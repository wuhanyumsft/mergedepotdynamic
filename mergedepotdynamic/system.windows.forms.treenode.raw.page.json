{"content":"    \r\n    <h1 id=\"System_Windows_Forms_TreeNode\">\r\n      <span class=\"lang-csharp\">TreeNode</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a node of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultProperty(&quot;Text&quot;)]\n[System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TreeNodeConverter))]\npublic class TreeNode : MarshalByRefObject, ICloneable, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TreeNode</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection holds all the child TreeNode objects assigned to the current TreeNode. You can add, remove, or clone a TreeNode; when you do this, all child tree nodes are added, removed, or cloned. Each TreeNode can contain a collection of other TreeNode objects. This can make it difficult to determine where you are in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> when iterating through the collection. To determine your location in a tree structure, use the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_FullPath_\" data-linktype=\"relative-path\">FullPath</a> property. The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_FullPath_\" data-linktype=\"relative-path\">FullPath</a> string can be parsed using the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_PathSeparator_\" data-linktype=\"relative-path\">PathSeparator</a> string value to determine where a TreeNode label begins and ends.  </p>\n<p> The TreeNode label is set by setting the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> property explicitly. The alternative is to create the tree node using one of the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode__ctor_\" data-linktype=\"relative-path\">TreeNode</a> constructors that has a string parameter that represents the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> property. The label is displayed next to the TreeNode image, if one is displayed.  </p>\n<p> To display images next to the tree nodes, assign an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property of the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control and assign an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> by referencing its index value in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> property. Set the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> property to the index value of the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> you want to display when the TreeNode is in an unselected state. Likewise, set the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> property to the index value of the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> you want to display when the TreeNode is selected.  </p>\n<p> Selecting specific tree nodes and iterating through the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection can be achieved by using the following property values: <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_FirstNode_\" data-linktype=\"relative-path\">FirstNode</a>, <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_LastNode_\" data-linktype=\"relative-path\">LastNode</a>, <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_NextNode_\" data-linktype=\"relative-path\">NextNode</a>, <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_PrevNode_\" data-linktype=\"relative-path\">PrevNode</a>, <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_NextVisibleNode_\" data-linktype=\"relative-path\">NextVisibleNode</a>, <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_PrevVisibleNode_\" data-linktype=\"relative-path\">PrevVisibleNode</a>. Assign the TreeNode returned by one of aforementioned properties to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedNode_\" data-linktype=\"relative-path\">SelectedNode</a> property to select that tree node in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.  </p>\n<p> Tree nodes can be expanded to display the next level of child tree nodes. The user can expand the TreeNode by pressing the plus (+) button next to the TreeNode, if one is displayed, or you can expand the TreeNode by calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Expand_\" data-linktype=\"relative-path\">Expand</a> method. To expand all child tree node levels in the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection, call the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ExpandAll_\" data-linktype=\"relative-path\">ExpandAll</a> method. You can collapse the child TreeNode level by calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Collapse_\" data-linktype=\"relative-path\">Collapse</a> method, or the user can press the minus (-) button next to the TreeNode, if one is displayed. You can also call the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Toggle_\" data-linktype=\"relative-path\">Toggle</a> method to alternate the TreeNode between the expanded and collapsed states.  </p>\n<p> Tree nodes can optionally display a check box. To display the check boxes, set the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CheckBoxes_\" data-linktype=\"relative-path\">CheckBoxes</a> property of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> to <code>true</code>. The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property is set to <code>true</code> for tree nodes that are in a checked state.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode__ctor\" data-linktype=\"self-bookmark\">TreeNode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode__ctor_System_String_\" data-linktype=\"self-bookmark\">TreeNode(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class with the specified label text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">TreeNode(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class using the specified serialization information and context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode__ctor_System_String_System_Windows_Forms_TreeNode___\" data-linktype=\"self-bookmark\">TreeNode(String,TreeNode[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class with the specified label text and child tree nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode__ctor_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">TreeNode(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class with the specified label text and images to display when the tree node is in a selected and unselected state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode__ctor_System_String_System_Int32_System_Int32_System_Windows_Forms_TreeNode___\" data-linktype=\"self-bookmark\">TreeNode(String,Int32,Int32,TreeNode[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class with the specified label text, child tree nodes, and images to display when the tree node is in a selected and unselected state.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_BackColor\" data-linktype=\"self-bookmark\">BackColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the background color of the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Bounds\" data-linktype=\"self-bookmark\">Bounds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the bounds of the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Checked\" data-linktype=\"self-bookmark\">Checked</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the tree node is in a checked state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_ContextMenu\" data-linktype=\"self-bookmark\">ContextMenu</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the shortcut menu that is associated with this tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_ContextMenuStrip\" data-linktype=\"self-bookmark\">ContextMenuStrip</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the shortcut menu associated with this tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_FirstNode\" data-linktype=\"self-bookmark\">FirstNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the first child tree node in the tree node collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_ForeColor\" data-linktype=\"self-bookmark\">ForeColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the foreground color of the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_FullPath\" data-linktype=\"self-bookmark\">FullPath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path from the root tree node to the current tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Handle\" data-linktype=\"self-bookmark\">Handle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the handle of the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_ImageIndex\" data-linktype=\"self-bookmark\">ImageIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the image list index value of the image displayed when the tree node is in the unselected state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_ImageKey\" data-linktype=\"self-bookmark\">ImageKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the key for the image associated with this tree node when the node is in an unselected state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Index\" data-linktype=\"self-bookmark\">Index</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of the tree node in the tree node collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_IsEditing\" data-linktype=\"self-bookmark\">IsEditing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the tree node is in an editable state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_IsExpanded\" data-linktype=\"self-bookmark\">IsExpanded</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the tree node is in the expanded state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_IsSelected\" data-linktype=\"self-bookmark\">IsSelected</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the tree node is in the selected state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_IsVisible\" data-linktype=\"self-bookmark\">IsVisible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the tree node is visible or partially visible.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_LastNode\" data-linktype=\"self-bookmark\">LastNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the last child tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Level\" data-linktype=\"self-bookmark\">Level</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the zero-based depth of the tree node in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_NextNode\" data-linktype=\"self-bookmark\">NextNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the next sibling tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_NextVisibleNode\" data-linktype=\"self-bookmark\">NextVisibleNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the next visible tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_NodeFont\" data-linktype=\"self-bookmark\">NodeFont</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the font that is used to display the text on the tree node label.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Nodes\" data-linktype=\"self-bookmark\">Nodes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects assigned to the current tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Parent\" data-linktype=\"self-bookmark\">Parent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parent tree node of the current tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_PrevNode\" data-linktype=\"self-bookmark\">PrevNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the previous sibling tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_PrevVisibleNode\" data-linktype=\"self-bookmark\">PrevVisibleNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the previous visible tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_SelectedImageIndex\" data-linktype=\"self-bookmark\">SelectedImageIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the image list index value of the image that is displayed when the tree node is in the selected state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_SelectedImageKey\" data-linktype=\"self-bookmark\">SelectedImageKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the key of the image displayed in the tree node when it is in a selected state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_StateImageIndex\" data-linktype=\"self-bookmark\">StateImageIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the index of the image that is used to indicate the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> has its <span class=\"xref\">stem.Windows.Forms.TreeView.CheckBoxes*</span> property set to <code>false</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_StateImageKey\" data-linktype=\"self-bookmark\">StateImageKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the key of the image that is used to indicate the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> has its <span class=\"xref\">stem.Windows.Forms.TreeView.CheckBoxes*</span> property set to <code>false</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Tag\" data-linktype=\"self-bookmark\">Tag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the object that contains data about the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Text\" data-linktype=\"self-bookmark\">Text</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text displayed in the label of the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_ToolTipText\" data-linktype=\"self-bookmark\">ToolTipText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text that appears when the mouse pointer hovers over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_TreeView\" data-linktype=\"self-bookmark\">TreeView</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parent tree view that the tree node is assigned to.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_BeginEdit\" data-linktype=\"self-bookmark\">BeginEdit()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates the editing of the tree node label.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the tree node and the entire subtree rooted at this tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Collapse\" data-linktype=\"self-bookmark\">Collapse()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Collapses the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Collapse_System_Boolean_\" data-linktype=\"self-bookmark\">Collapse(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Collapses the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> and optionally collapses its children.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Deserialize_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">Deserialize(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> from the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_EndEdit_System_Boolean_\" data-linktype=\"self-bookmark\">EndEdit(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends the editing of the tree node label.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_EnsureVisible\" data-linktype=\"self-bookmark\">EnsureVisible()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ensures that the tree node is visible, expanding tree nodes and scrolling the tree view control as necessary.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Expand\" data-linktype=\"self-bookmark\">Expand()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Expands the tree node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_ExpandAll\" data-linktype=\"self-bookmark\">ExpandAll()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Expands all the child tree nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_FromHandle_System_Windows_Forms_TreeView_System_IntPtr_\" data-linktype=\"self-bookmark\">FromHandle(TreeView,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the tree node with the specified handle and assigned to the specified tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_GetNodeCount_System_Boolean_\" data-linktype=\"self-bookmark\">GetNodeCount(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of child tree nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Remove\" data-linktype=\"self-bookmark\">Remove()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the current tree node from the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Serialize_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">Serialize(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_Toggle\" data-linktype=\"self-bookmark\">Toggle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Toggles the tree node to either the expanded or collapsed state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the current object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeNode_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a serialization information object with the data needed to serialize the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode__ctor\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeNode()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TreeNode ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a root tree node to assign child tree nodes to. A child tree node for each <code>Customer</code> object in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is added to the root tree node as well as a child tree node for each <code>Order</code> object assigned to the <code>Customer</code> object. The <code>Customer</code> object is assigned to the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property, and the tree nodes representing <code>Customer</code> objects are displayed with <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Orange_\" data-linktype=\"relative-path\">Orange</a> text. This example requires that you have a <code>Customer</code> and <code>Order</code> object defined, a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> named <code>customerArray</code> that contains <code>Customer</code> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Bounds#1\">public class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\npublic void AddRootNodes()\n{\n   // Add a root node to assign the customer nodes to.\n   TreeNode rootNode = new TreeNode();\n   rootNode.Text = &quot;CustomerList&quot;;\n   // Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode);\n\n   // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n   foreach(Customer myCustomer in customerArray)\n   {\n      // Add a child treenode for each Order object.\n      int i = 0;\n      TreeNode[] myTreeNodeArray = new TreeNode[5];\n      foreach(Order myOrder in myCustomer.CustomerOrders)\n      {\n         myTreeNodeArray[i] = new TreeNode(myOrder.OrderID);\n         i++;\n      }\n      TreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n        myTreeNodeArray);\n\t\t// Display the customer names with and Orange font.\n\t\tcustomerNode.ForeColor = Color.Orange;\n\t\t// Store the Customer object in the Tag property of the TreeNode.\n\t\tcustomerNode.Tag = myCustomer;\n      myTreeView.Nodes[0].Nodes.Add(customerNode);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Bounds#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n\n   void AddRootNodes()\n   {\n      \n      // Add a root node to assign the customer nodes to.\n      TreeNode^ rootNode = gcnew TreeNode;\n      rootNode-&gt;Text = &quot;CustomerList&quot;;\n      \n      // Add a main root treenode.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child treenode for each Order object.\n         int i = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(5);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            myTreeNodeArray[ i ] = gcnew TreeNode( myOrder-&gt;OrderID );\n            i++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,myTreeNodeArray );\n         \n         // Display the customer names with and Orange font.\n         customerNode-&gt;ForeColor = Color::Orange;\n         \n         // Store the Customer Object* in the Tag property of the TreeNode.\n         customerNode-&gt;Tag = myCustomer;\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Bounds#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\nPublic Class Order\n   Public OrderID As String\n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPublic Sub AddRootNodes()\n   &#39; Add a root node to assign the customer nodes to.\n   Dim rootNode As TreeNode\n   rootNode = New TreeNode()\n   rootNode.Text = &quot;CustomerList&quot;\n   &#39; Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode)\n\n   &#39; Add a root treenode for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In customerArray\n      &#39; Add a child treenode for each Order object.\n      Dim i As Integer = 0\n      Dim myTreeNodeArray(4) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         myTreeNodeArray(i) = New TreeNode(myOrder.OrderID)\n         i += 1\n      Next myOrder\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n        myTreeNodeArray)\n      &#39; Display the customer names with and Orange font.\n      customerNode.ForeColor = Color.Orange\n      &#39; Store the Customer object in the Tag property of the TreeNode.\n      customerNode.Tag = myCustomer\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeNode(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class with the specified label text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TreeNode (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The label <span class=\"xref\">stem.Windows.Forms.TreeNode.Text*</span> of the new tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>text</code> parameter value is assigned to the node&#39;s <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> property and becomes the tree node label.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays customer information in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is suppressed by using the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeginUpdate_\" data-linktype=\"relative-path\">BeginUpdate</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_EndUpdate_\" data-linktype=\"relative-path\">EndUpdate</a> methods, and a wait <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> is displayed while the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> creates and paints the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. This example requires that you have a <code>Customer</code> object that can hold a collection of <code>Order</code> objects. It also requires that you have created an instance of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeView#1\">      Public Class Customer\n         Inherits [Object]\n         Private custName As String = &quot;&quot;\n         Friend custOrders As New ArrayList()\n\n         Public Sub New(ByVal customername As String)\n            Me.custName = customername\n         End Sub\n\n         Public Property CustomerName() As String\n            Get\n               Return Me.custName\n            End Get\n            Set(ByVal Value As String)\n               Me.custName = Value\n            End Set\n         End Property\n\n         Public ReadOnly Property CustomerOrders() As ArrayList\n            Get\n               Return Me.custOrders\n            End Get\n         End Property\n      End Class &#39;End Customer class\n\n\n      Public Class Order\n         Inherits [Object]\n         Private ordID As String\n\n         Public Sub New(ByVal orderid As String)\n            Me.ordID = orderid\n         End Sub &#39;New\n\n         Public Property OrderID() As String\n            Get\n               Return Me.ordID\n            End Get\n            Set(ByVal Value As String)\n               Me.ordID = Value\n            End Set\n         End Property\n      End Class &#39; End Order class\n\n      &#39; Create a new ArrayList to hold the Customer objects.\n      Private customerArray As New ArrayList()\n\n      Private Sub FillMyTreeView()\n         &#39; Add customers to the ArrayList of Customer objects.\n         Dim x As Integer\n         For x = 0 To 999\n            customerArray.Add(New Customer(&quot;Customer&quot; + x.ToString()))\n         Next x\n\n         &#39; Add orders to each Customer object in the ArrayList.\n         Dim customer1 As Customer\n         For Each customer1 In customerArray\n            Dim y As Integer\n            For y = 0 To 14\n               customer1.CustomerOrders.Add(New Order(&quot;Order&quot; + y.ToString()))\n            Next y\n         Next customer1\n\n         &#39; Display a wait cursor while the TreeNodes are being created.\n         Cursor.Current = New Cursor(&quot;MyWait.cur&quot;)\n\n         &#39; Suppress repainting the TreeView until all the objects have been created.\n         treeView1.BeginUpdate()\n\n         &#39; Clear the TreeView each time the method is called.\n         treeView1.Nodes.Clear()\n\n         &#39; Add a root TreeNode for each Customer object in the ArrayList.\n         Dim customer2 As Customer\n         For Each customer2 In customerArray\n            treeView1.Nodes.Add(New TreeNode(customer2.CustomerName))\n\n            &#39; Add a child TreeNode for each Order object in the current Customer object.\n            Dim order1 As Order\n            For Each order1 In customer2.CustomerOrders\n               treeView1.Nodes(customerArray.IndexOf(customer2)).Nodes.Add( _\n          New TreeNode(customer2.CustomerName + &quot;.&quot; + order1.OrderID))\n            Next order1\n         Next customer2\n\n         &#39; Reset the cursor to the default for all controls.\n         Cursor.Current = System.Windows.Forms.Cursors.Default\n\n         &#39; Begin repainting the TreeView.\n         treeView1.EndUpdate()\n      End Sub &#39;FillMyTreeView\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeView#1\">\n// The basic Customer class.\npublic class Customer : System.Object\n{\n   private string custName = &quot;&quot;;\n   protected ArrayList custOrders = new ArrayList();\n\n   public Customer(string customername)\n   {\n      this.custName = customername;\n   }\n\n   public string CustomerName\n   {      \n      get{return this.custName;}\n      set{this.custName = value;}\n   }\n\n   public ArrayList CustomerOrders \n   {\n      get{return this.custOrders;}\n   }\n\n} // End Customer class \n\n\n// The basic customer Order class.\npublic class Order : System.Object\n{\n   private string ordID = &quot;&quot;;\n\n   public Order(string orderid)\n   {\n      this.ordID = orderid;\n   }\n\n   public string OrderID\n   {      \n      get{return this.ordID;}\n      set{this.ordID = value;}\n   }\n\n} // End Order class\n\n// Create a new ArrayList to hold the Customer objects.\nprivate ArrayList customerArray = new ArrayList(); \n\nprivate void FillMyTreeView()\n{\n   // Add customers to the ArrayList of Customer objects.\n   for(int x=0; x&lt;1000; x++)\n   {\n      customerArray.Add(new Customer(&quot;Customer&quot; + x.ToString()));\n   }\n\n   // Add orders to each Customer object in the ArrayList.\n   foreach(Customer customer1 in customerArray)\n   {\n      for(int y=0; y&lt;15; y++)\n      {\n         customer1.CustomerOrders.Add(new Order(&quot;Order&quot; + y.ToString()));    \n      }\n   }\n\n   // Display a wait cursor while the TreeNodes are being created.\n   Cursor.Current = new Cursor(&quot;MyWait.cur&quot;);\n        \n   // Suppress repainting the TreeView until all the objects have been created.\n   treeView1.BeginUpdate();\n\n   // Clear the TreeView each time the method is called.\n   treeView1.Nodes.Clear();\n\n   // Add a root TreeNode for each Customer object in the ArrayList.\n   foreach(Customer customer2 in customerArray)\n   {\n      treeView1.Nodes.Add(new TreeNode(customer2.CustomerName));\n          \n      // Add a child treenode for each Order object in the current Customer object.\n      foreach(Order order1 in customer2.CustomerOrders)\n      {\n         treeView1.Nodes[customerArray.IndexOf(customer2)].Nodes.Add(\n           new TreeNode(customer2.CustomerName + &quot;.&quot; + order1.OrderID));\n      }\n   }\n\n   // Reset the cursor to the default for all controls.\n   Cursor.Current = Cursors.Default;\n\n   // Begin repainting the TreeView.\n   treeView1.EndUpdate();\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeView#1\">      // The basic Customer class.\n      ref class Customer: public System::Object\n      {\n      private:\n         String^ custName;\n\n      protected:\n         ArrayList^ custOrders;\n\n      public:\n         Customer( String^ customername )\n         {\n            custName = &quot;&quot;;\n            custOrders = gcnew ArrayList;\n            this-&gt;custName = customername;\n         }\n\n\n         property String^ CustomerName \n         {\n            String^ get()\n            {\n               return this-&gt;custName;\n            }\n\n            void set( String^ value )\n            {\n               this-&gt;custName = value;\n            }\n\n         }\n\n         property ArrayList^ CustomerOrders \n         {\n            ArrayList^ get()\n            {\n               return this-&gt;custOrders;\n            }\n\n         }\n\n      };\n\n\n      // End Customer class\n      // The basic customer Order class.\n      ref class Order: public System::Object\n      {\n      private:\n         String^ ordID;\n\n      public:\n         Order( String^ orderid )\n         {\n            ordID = &quot;&quot;;\n            this-&gt;ordID = orderid;\n         }\n\n\n         property String^ OrderID \n         {\n            String^ get()\n            {\n               return this-&gt;ordID;\n            }\n\n            void set( String^ value )\n            {\n               this-&gt;ordID = value;\n            }\n\n         }\n\n      };\n      // End Order class\n\n\n\n      void FillMyTreeView()\n      {\n         // Add customers to the ArrayList of Customer objects.\n         for ( int x = 0; x &lt; 1000; x++ )\n         {\n            customerArray-&gt;Add( gcnew Customer( &quot;Customer &quot; + x ) );\n         }\n         \n         // Add orders to each Customer object in the ArrayList.\n         IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Customer^ customer1 = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n            for ( int y = 0; y &lt; 15; y++ )\n            {\n               customer1-&gt;CustomerOrders-&gt;Add( gcnew Order( &quot;Order &quot; + y ) );\n            }\n         }\n\n         // Display a wait cursor while the TreeNodes are being created.\n         ::Cursor::Current = gcnew System::Windows::Forms::Cursor( &quot;MyWait.cur&quot; );\n         \n         // Suppress repainting the TreeView until all the objects have been created.\n         treeView1-&gt;BeginUpdate();\n         \n         // Clear the TreeView each time the method is called.\n         treeView1-&gt;Nodes-&gt;Clear();\n         \n         // Add a root TreeNode for each Customer object in the ArrayList.\n         myEnum = customerArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Customer^ customer2 = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n            treeView1-&gt;Nodes-&gt;Add( gcnew TreeNode( customer2-&gt;CustomerName ) );\n            \n            // Add a child treenode for each Order object in the current Customer object.\n            IEnumerator^ myEnum = customer2-&gt;CustomerOrders-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               Order^ order1 = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n               treeView1-&gt;Nodes[ customerArray-&gt;IndexOf( customer2 ) ]-&gt;Nodes-&gt;Add( gcnew TreeNode( customer2-&gt;CustomerName + &quot;.&quot; + order1-&gt;OrderID ) );\n            }\n         }\n         \n         // Reset the cursor to the default for all controls.\n         ::Cursor::Current = Cursors::Default;\n         \n         // Begin repainting the TreeView.\n         treeView1-&gt;EndUpdate();\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeNode(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class using the specified serialization information and context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected TreeNode (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>serializationInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that contains the data to deserialize the class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that contains the source and destination of the serialized stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode__ctor_System_String_System_Windows_Forms_TreeNode___\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeNode(String,TreeNode[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class with the specified label text and child tree nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TreeNode (string text, System.Windows.Forms.TreeNode[] children);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The label <span class=\"xref\">stem.Windows.Forms.TreeNode.Text*</span> of the new tree node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>children</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>text</code> parameter value is assigned to the node&#39;s <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> property and becomes the tree node label. The tree nodes that are contained in the <code>children</code> array are added to the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that is stored in the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a root tree node to assign child tree nodes to. A child tree node for each <code>Customer</code> object in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is added to the root tree node as well as a child tree node for each <code>Order</code> object assigned to the <code>Customer</code> object. The <code>Customer</code> object is assigned to the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property, and the tree nodes representing <code>Customer</code> objects are displayed with <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Orange_\" data-linktype=\"relative-path\">Orange</a> text. This example requires that you have a <code>Customer</code> and <code>Order</code> object defined, a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> named <code>customerArray</code> that contains <code>Customer</code> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Bounds#1\">public class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\npublic void AddRootNodes()\n{\n   // Add a root node to assign the customer nodes to.\n   TreeNode rootNode = new TreeNode();\n   rootNode.Text = &quot;CustomerList&quot;;\n   // Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode);\n\n   // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n   foreach(Customer myCustomer in customerArray)\n   {\n      // Add a child treenode for each Order object.\n      int i = 0;\n      TreeNode[] myTreeNodeArray = new TreeNode[5];\n      foreach(Order myOrder in myCustomer.CustomerOrders)\n      {\n         myTreeNodeArray[i] = new TreeNode(myOrder.OrderID);\n         i++;\n      }\n      TreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n        myTreeNodeArray);\n\t\t// Display the customer names with and Orange font.\n\t\tcustomerNode.ForeColor = Color.Orange;\n\t\t// Store the Customer object in the Tag property of the TreeNode.\n\t\tcustomerNode.Tag = myCustomer;\n      myTreeView.Nodes[0].Nodes.Add(customerNode);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Bounds#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n\n   void AddRootNodes()\n   {\n      \n      // Add a root node to assign the customer nodes to.\n      TreeNode^ rootNode = gcnew TreeNode;\n      rootNode-&gt;Text = &quot;CustomerList&quot;;\n      \n      // Add a main root treenode.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child treenode for each Order object.\n         int i = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(5);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            myTreeNodeArray[ i ] = gcnew TreeNode( myOrder-&gt;OrderID );\n            i++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,myTreeNodeArray );\n         \n         // Display the customer names with and Orange font.\n         customerNode-&gt;ForeColor = Color::Orange;\n         \n         // Store the Customer Object* in the Tag property of the TreeNode.\n         customerNode-&gt;Tag = myCustomer;\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Bounds#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\nPublic Class Order\n   Public OrderID As String\n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPublic Sub AddRootNodes()\n   &#39; Add a root node to assign the customer nodes to.\n   Dim rootNode As TreeNode\n   rootNode = New TreeNode()\n   rootNode.Text = &quot;CustomerList&quot;\n   &#39; Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode)\n\n   &#39; Add a root treenode for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In customerArray\n      &#39; Add a child treenode for each Order object.\n      Dim i As Integer = 0\n      Dim myTreeNodeArray(4) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         myTreeNodeArray(i) = New TreeNode(myOrder.OrderID)\n         i += 1\n      Next myOrder\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n        myTreeNodeArray)\n      &#39; Display the customer names with and Orange font.\n      customerNode.ForeColor = Color.Orange\n      &#39; Store the Customer object in the Tag property of the TreeNode.\n      customerNode.Tag = myCustomer\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode__ctor_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeNode(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class with the specified label text and images to display when the tree node is in a selected and unselected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TreeNode (string text, int imageIndex, int selectedImageIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The label <span class=\"xref\">stem.Windows.Forms.TreeNode.Text*</span> of the new tree node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>imageIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index value of <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> to display when the tree node is unselected.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selectedImageIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index value of <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> to display when the tree node is selected.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>text</code> parameter value is assigned to the node&#39;s <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> property and becomes the tree node label. The <code>imageIndex</code> and <code>selectedImageIndex</code> values are the index values of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> stored in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> assigned to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property. The image referenced in the <code>imageIndex</code> property is displayed when the tree node is not selected. Likewise, the image referenced in the <code>selectedImageIndex</code> property is displayed when the tree node is in a selected state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates and assigns an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control and fills the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. The tree nodes are assigned images from the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that is displayed when the tree node is in a selected or unselected state. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains <code>Customer</code> objects that each contain <code>Order</code> objects. It also requires that the <code>Customer</code> and <code>Order</code> objects are defined.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_TreeNode#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   \n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\n\nPublic Class Order\n   Public OrderID As String\n   \n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPrivate Sub FillTreeView()\n   &#39; Load the images in an ImageList.\n   Dim myImageList As New ImageList()\n   myImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;))\n   \n   &#39; Assign the ImageList to the TreeView.\n   myTreeView.ImageList = myImageList\n   \n   &#39; Set the TreeView control&#39;s default image and selected image indexes.\n   myTreeView.ImageIndex = 0\n   myTreeView.SelectedImageIndex = 1\n   \n   &#39; Set the index of image from the \n   &#39; ImageList for selected and unselected tree nodes.\n   Me.rootImageIndex = 2\n   Me.selectedCustomerImageIndex = 3\n   Me.unselectedCustomerImageIndex = 4\n   Me.selectedOrderImageIndex = 5\n   Me.unselectedOrderImageIndex = 6\n   \n   &#39; Create the root tree node.\n   Dim rootNode As New TreeNode(&quot;CustomerList&quot;)\n   rootNode.ImageIndex = rootImageIndex\n   rootNode.SelectedImageIndex = rootImageIndex\n   \n   &#39; Add a main root tree node.\n   myTreeView.Nodes.Add(rootNode)\n   \n   &#39; Add a root tree node for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In  customerArray\n      &#39; Add a child tree node for each Order object.\n      Dim countIndex As Integer = 0\n      Dim myTreeNodeArray(myCustomer.CustomerOrders.Count) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         &#39; Add the Order tree node to the array.\n         myTreeNodeArray(countIndex) = New TreeNode(myOrder.OrderID, _\n            unselectedOrderImageIndex, selectedOrderImageIndex)\n         countIndex += 1\n      Next myOrder\n      &#39; Add the Customer tree node.\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n         unselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray)\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_TreeNode#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n   void FillTreeView()\n   {\n      \n      // Load the images in an ImageList.\n      ImageList^ myImageList = gcnew ImageList;\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Default.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedDefault.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Root.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedOrder.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedOrder.gif&quot; ) );\n      \n      // Assign the ImageList to the TreeView.\n      myTreeView-&gt;ImageList = myImageList;\n      \n      // Set the TreeView control&#39;s default image and selected image indexes.\n      myTreeView-&gt;ImageIndex = 0;\n      myTreeView-&gt;SelectedImageIndex = 1;\n      \n      /* Set the index of image from the\n        ImageList for selected and unselected tree nodes.*/\n      this-&gt;rootImageIndex = 2;\n      this-&gt;selectedCustomerImageIndex = 3;\n      this-&gt;unselectedCustomerImageIndex = 4;\n      this-&gt;selectedOrderImageIndex = 5;\n      this-&gt;unselectedOrderImageIndex = 6;\n      \n      // Create the root tree node.\n      TreeNode^ rootNode = gcnew TreeNode( &quot;CustomerList&quot; );\n      rootNode-&gt;ImageIndex = rootImageIndex;\n      rootNode-&gt;SelectedImageIndex = rootImageIndex;\n      \n      // Add a main root tree node.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root tree node for each Customer object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child tree node for each Order object.\n         int countIndex = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(myCustomer-&gt;CustomerOrders-&gt;Count);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            \n            // Add the Order tree node to the array.\n            myTreeNodeArray[ countIndex ] = gcnew TreeNode( myOrder-&gt;OrderID,unselectedOrderImageIndex,selectedOrderImageIndex );\n            countIndex++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,unselectedCustomerImageIndex,selectedCustomerImageIndex,myTreeNodeArray );\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_TreeNode#1\">\npublic class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\nprivate void FillTreeView()\n{\n\t// Load the images in an ImageList.\n\tImageList myImageList = new ImageList();\n\tmyImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;));\n\t\n\t// Assign the ImageList to the TreeView.\n\tmyTreeView.ImageList = myImageList;\n\t\n\t// Set the TreeView control&#39;s default image and selected image indexes.\n\tmyTreeView.ImageIndex = 0;\n\tmyTreeView.SelectedImageIndex = 1;\n\n\t/* Set the index of image from the \n\tImageList for selected and unselected tree nodes.*/\n\tthis.rootImageIndex = 2;\n\tthis.selectedCustomerImageIndex = 3;\n\tthis.unselectedCustomerImageIndex = 4;\n\tthis.selectedOrderImageIndex = 5;\n\tthis.unselectedOrderImageIndex = 6;\n\t\n\t// Create the root tree node.\n\tTreeNode rootNode = new TreeNode(&quot;CustomerList&quot;);\n\trootNode.ImageIndex = rootImageIndex;\n\trootNode.SelectedImageIndex = rootImageIndex;\n      \n\t// Add a main root tree node.\n\tmyTreeView.Nodes.Add(rootNode);\n\n\t// Add a root tree node for each Customer object in the ArrayList.\n\tforeach(Customer myCustomer in customerArray)\n\t{\n\t\t// Add a child tree node for each Order object.\n\t\tint countIndex=0;\n\t\tTreeNode[] myTreeNodeArray = new TreeNode[myCustomer.CustomerOrders.Count];\n\t\tforeach(Order myOrder in myCustomer.CustomerOrders)\n\t\t{\n\t\t\t// Add the Order tree node to the array.\n\t\t\tmyTreeNodeArray[countIndex] = new TreeNode(myOrder.OrderID,\n\t\t\t  unselectedOrderImageIndex, selectedOrderImageIndex);\n\t\t\tcountIndex++;\n\t\t}\n\t\t// Add the Customer tree node.\n\t\tTreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n\t\t\tunselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray);\n\t\tmyTreeView.Nodes[0].Nodes.Add(customerNode);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode__ctor_System_String_System_Int32_System_Int32_System_Windows_Forms_TreeNode___\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeNode(String,Int32,Int32,TreeNode[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> class with the specified label text, child tree nodes, and images to display when the tree node is in a selected and unselected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TreeNode (string text, int imageIndex, int selectedImageIndex, System.Windows.Forms.TreeNode[] children);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The label <span class=\"xref\">stem.Windows.Forms.TreeNode.Text*</span> of the new tree node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>imageIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index value of <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> to display when the tree node is unselected.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selectedImageIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index value of <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> to display when the tree node is selected.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>children</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>text</code> parameter value is assigned to the node&#39;s <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> property and becomes the tree node label. The <code>imageIndex</code> and <code>selectedImageIndex</code> values are the index values of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> stored in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> assigned to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property. The image referenced in the <code>imageIndex</code> parameter is displayed when the tree node is not selected. Likewise, the image referenced in the <code>selectedImageIndex</code> parameter is displayed when the tree node is in a selected state. The tree nodes that are contained in the <code>children</code> array are added to the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that is stored in the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates and assigns an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control and fills the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. The tree nodes are assigned images from the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that is displayed when the tree node is in a selected or unselected state. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains <code>Customer</code> objects that each contain <code>Order</code> objects. It also requires that the <code>Customer</code> and <code>Order</code> objects are defined.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_TreeNode#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   \n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\n\nPublic Class Order\n   Public OrderID As String\n   \n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPrivate Sub FillTreeView()\n   &#39; Load the images in an ImageList.\n   Dim myImageList As New ImageList()\n   myImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;))\n   \n   &#39; Assign the ImageList to the TreeView.\n   myTreeView.ImageList = myImageList\n   \n   &#39; Set the TreeView control&#39;s default image and selected image indexes.\n   myTreeView.ImageIndex = 0\n   myTreeView.SelectedImageIndex = 1\n   \n   &#39; Set the index of image from the \n   &#39; ImageList for selected and unselected tree nodes.\n   Me.rootImageIndex = 2\n   Me.selectedCustomerImageIndex = 3\n   Me.unselectedCustomerImageIndex = 4\n   Me.selectedOrderImageIndex = 5\n   Me.unselectedOrderImageIndex = 6\n   \n   &#39; Create the root tree node.\n   Dim rootNode As New TreeNode(&quot;CustomerList&quot;)\n   rootNode.ImageIndex = rootImageIndex\n   rootNode.SelectedImageIndex = rootImageIndex\n   \n   &#39; Add a main root tree node.\n   myTreeView.Nodes.Add(rootNode)\n   \n   &#39; Add a root tree node for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In  customerArray\n      &#39; Add a child tree node for each Order object.\n      Dim countIndex As Integer = 0\n      Dim myTreeNodeArray(myCustomer.CustomerOrders.Count) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         &#39; Add the Order tree node to the array.\n         myTreeNodeArray(countIndex) = New TreeNode(myOrder.OrderID, _\n            unselectedOrderImageIndex, selectedOrderImageIndex)\n         countIndex += 1\n      Next myOrder\n      &#39; Add the Customer tree node.\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n         unselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray)\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_TreeNode#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n   void FillTreeView()\n   {\n      \n      // Load the images in an ImageList.\n      ImageList^ myImageList = gcnew ImageList;\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Default.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedDefault.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Root.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedOrder.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedOrder.gif&quot; ) );\n      \n      // Assign the ImageList to the TreeView.\n      myTreeView-&gt;ImageList = myImageList;\n      \n      // Set the TreeView control&#39;s default image and selected image indexes.\n      myTreeView-&gt;ImageIndex = 0;\n      myTreeView-&gt;SelectedImageIndex = 1;\n      \n      /* Set the index of image from the\n        ImageList for selected and unselected tree nodes.*/\n      this-&gt;rootImageIndex = 2;\n      this-&gt;selectedCustomerImageIndex = 3;\n      this-&gt;unselectedCustomerImageIndex = 4;\n      this-&gt;selectedOrderImageIndex = 5;\n      this-&gt;unselectedOrderImageIndex = 6;\n      \n      // Create the root tree node.\n      TreeNode^ rootNode = gcnew TreeNode( &quot;CustomerList&quot; );\n      rootNode-&gt;ImageIndex = rootImageIndex;\n      rootNode-&gt;SelectedImageIndex = rootImageIndex;\n      \n      // Add a main root tree node.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root tree node for each Customer object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child tree node for each Order object.\n         int countIndex = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(myCustomer-&gt;CustomerOrders-&gt;Count);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            \n            // Add the Order tree node to the array.\n            myTreeNodeArray[ countIndex ] = gcnew TreeNode( myOrder-&gt;OrderID,unselectedOrderImageIndex,selectedOrderImageIndex );\n            countIndex++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,unselectedCustomerImageIndex,selectedCustomerImageIndex,myTreeNodeArray );\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_TreeNode#1\">\npublic class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\nprivate void FillTreeView()\n{\n\t// Load the images in an ImageList.\n\tImageList myImageList = new ImageList();\n\tmyImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;));\n\t\n\t// Assign the ImageList to the TreeView.\n\tmyTreeView.ImageList = myImageList;\n\t\n\t// Set the TreeView control&#39;s default image and selected image indexes.\n\tmyTreeView.ImageIndex = 0;\n\tmyTreeView.SelectedImageIndex = 1;\n\n\t/* Set the index of image from the \n\tImageList for selected and unselected tree nodes.*/\n\tthis.rootImageIndex = 2;\n\tthis.selectedCustomerImageIndex = 3;\n\tthis.unselectedCustomerImageIndex = 4;\n\tthis.selectedOrderImageIndex = 5;\n\tthis.unselectedOrderImageIndex = 6;\n\t\n\t// Create the root tree node.\n\tTreeNode rootNode = new TreeNode(&quot;CustomerList&quot;);\n\trootNode.ImageIndex = rootImageIndex;\n\trootNode.SelectedImageIndex = rootImageIndex;\n      \n\t// Add a main root tree node.\n\tmyTreeView.Nodes.Add(rootNode);\n\n\t// Add a root tree node for each Customer object in the ArrayList.\n\tforeach(Customer myCustomer in customerArray)\n\t{\n\t\t// Add a child tree node for each Order object.\n\t\tint countIndex=0;\n\t\tTreeNode[] myTreeNodeArray = new TreeNode[myCustomer.CustomerOrders.Count];\n\t\tforeach(Order myOrder in myCustomer.CustomerOrders)\n\t\t{\n\t\t\t// Add the Order tree node to the array.\n\t\t\tmyTreeNodeArray[countIndex] = new TreeNode(myOrder.OrderID,\n\t\t\t  unselectedOrderImageIndex, selectedOrderImageIndex);\n\t\t\tcountIndex++;\n\t\t}\n\t\t// Add the Customer tree node.\n\t\tTreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n\t\t\tunselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray);\n\t\tmyTreeView.Nodes[0].Nodes.Add(customerNode);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_BackColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_BackColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the background color of the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Color BackColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>The background <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> of the tree node. The default is <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the BackColor property is set to <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">System.Drawing.Color</a>, the <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> used is the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> property value of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that the tree node is assigned to.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example highlights any <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has its <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property set to <code>true</code> by setting its BackColor property to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Yellow_\" data-linktype=\"relative-path\">Yellow</a>. This code requires that you have a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_Checked#1\">Public Sub HighlightCheckedNodes()\n   Dim countIndex As Integer = 0\n   Dim selectedNode As String = &quot;Selected customer nodes are : &quot;\n   Dim myNode As TreeNode\n   For Each myNode In  myTreeView.Nodes(0).Nodes\n      &#39; Check whether the tree node is checked.\n      If myNode.Checked Then\n         &#39; Set the node&#39;s backColor.\n         myNode.BackColor = Color.Yellow\n         selectedNode += myNode.Text + &quot; &quot;\n         countIndex += 1\n      Else\n         myNode.BackColor = Color.White\n      End If\n   Next myNode\n\n   If countIndex &gt; 0 Then\n      MessageBox.Show(selectedNode)\n   Else\n      MessageBox.Show(&quot;No nodes are selected&quot;)\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Checked#1\">public:\n   void HighlightCheckedNodes()\n   {\n      int countIndex = 0;\n      String^ selectedNode = &quot;Selected customer nodes are : &quot;;\n      IEnumerator^ myEnum = myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         TreeNode^ myNode = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n         \n         // Check whether the tree node is checked.\n         if ( myNode-&gt;Checked )\n         {\n            \n            // Set the node&#39;s backColor.\n            myNode-&gt;BackColor = Color::Yellow;\n            selectedNode = String::Concat( selectedNode, myNode-&gt;Text, &quot; &quot; );\n            countIndex++;\n         }\n         else\n                  myNode-&gt;BackColor = Color::White;\n      }\n\n      if ( countIndex &gt; 0 )\n            MessageBox::Show( selectedNode );\n      else\n            MessageBox::Show( &quot;No nodes are selected&quot; );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_Checked#1\">public void HighlightCheckedNodes()\n{\n   int countIndex = 0;\n   string selectedNode = &quot;Selected customer nodes are : &quot;;\n   foreach (TreeNode myNode in myTreeView.Nodes[0].Nodes)\n   {\n      // Check whether the tree node is checked.\n      if(myNode.Checked)\n      {\n         // Set the node&#39;s backColor.\n         myNode.BackColor = Color.Yellow;\n         selectedNode += myNode.Text+&quot; &quot;;\n         countIndex++;\n      }\n      else\n         myNode.BackColor = Color.White;\n   }\n\n   if(countIndex &gt; 0)\n      MessageBox.Show(selectedNode);\n   else\n      MessageBox.Show(&quot;No nodes are selected&quot;);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Bounds\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Bounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bounds</div>        \r\n          </div>\r\n    \r\n            <p>Gets the bounds of the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle Bounds { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the bounds of the tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The coordinates are relative to the upper-left corner of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the size <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_NodeFont_\" data-linktype=\"relative-path\">NodeFont</a> to the specified size and adjusts the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ItemHeight_\" data-linktype=\"relative-path\">ItemHeight</a> of the tree node&#39;s parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, and a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> that contains font sizes.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Bounds#2\">   private void Button1_Click(object sender,EventArgs e)\n   {\n      myTreeView.ItemHeight = 5;\n      myTreeView.SelectedNode.NodeFont = new Font(&quot;Arial&quot;,5);\n\n      // Get the font size from combobox.\n      string selectedString = myComboBox.SelectedItem.ToString();\n      int myNodeFontSize = Int32.Parse(selectedString);\n\n      // Set the font of root node.\n      myTreeView.SelectedNode.NodeFont = new Font(&quot;Arial&quot;,myNodeFontSize);\n      for(int i = 0; i &lt; myTreeView.Nodes[0].Nodes.Count; i++)\n      {\n         // Set the font of child nodes.\n         myTreeView.Nodes[0].Nodes[i].NodeFont =\n           new Font(&quot;Arial&quot;,myNodeFontSize);\n      }\n\n      // Get the bounds of the tree node.\n      Rectangle myRectangle = myTreeView.SelectedNode.Bounds;\n      int myNodeHeight = myRectangle.Height;\n      if(myNodeHeight &lt; myNodeFontSize)\n      {\n         myNodeHeight = myNodeFontSize;\n      }\n      myTreeView.ItemHeight = myNodeHeight + 4;\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Bounds#2\">private:\n   void Button1_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      myTreeView-&gt;ItemHeight = 5;\n      myTreeView-&gt;SelectedNode-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,5 );\n      \n      // Get the font size from combobox.\n      String^ selectedString = myComboBox-&gt;SelectedItem-&gt;ToString();\n      int myNodeFontSize = Int32::Parse( selectedString );\n      \n      // Set the font of root node.\n      myTreeView-&gt;SelectedNode-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,(float)myNodeFontSize );\n      for ( int i = 0; i &lt; myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Count; i++ )\n      {\n         \n         // Set the font of child nodes.\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes[ i ]-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,(float)myNodeFontSize );\n\n      }\n      \n      // Get the bounds of the tree node.\n      Rectangle myRectangle = myTreeView-&gt;SelectedNode-&gt;Bounds;\n      int myNodeHeight = myRectangle.Height;\n      if ( myNodeHeight &lt; myNodeFontSize )\n      {\n         myNodeHeight = myNodeFontSize;\n      }\n\n      myTreeView-&gt;ItemHeight = myNodeHeight + 4;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Bounds#2\">Private Sub Button1_Click(sender As Object, e As EventArgs)\n   myTreeView.ItemHeight = 5\n   myTreeView.SelectedNode.NodeFont = New Font(&quot;Arial&quot;, 5)\n\n   &#39; Get the font size from combobox.\n   Dim selectedString As String = myComboBox.SelectedItem.ToString()\n   Dim myNodeFontSize As Integer = Int32.Parse(selectedString)\n\n   &#39; Set the font of root node.\n   myTreeView.SelectedNode.NodeFont = New Font(&quot;Arial&quot;, myNodeFontSize)\n   Dim i As Integer\n   For  i = 0 To (myTreeView.Nodes(0).Nodes.Count) - 1\n      &#39; Set the font of child nodes.\n      myTreeView.Nodes(0).Nodes(i).NodeFont = New Font(&quot;Arial&quot;, _\n        myNodeFontSize)\n   Next i\n\n   &#39; Get the bounds of the tree node.\n   Dim myRectangle As Rectangle = myTreeView.SelectedNode.Bounds\n   Dim myNodeHeight As Integer = myRectangle.Height\n   If myNodeHeight &lt; myNodeFontSize Then\n      myNodeHeight = myNodeFontSize\n   End If\n   myTreeView.ItemHeight = myNodeHeight + 4\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Checked\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Checked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Checked</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the tree node is in a checked state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Checked { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the tree node is in a checked state; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example highlights any <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has its Checked property set to <code>true</code> by setting its <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_BackColor_\" data-linktype=\"relative-path\">BackColor</a> property to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Yellow_\" data-linktype=\"relative-path\">Yellow</a>. This code requires that you have a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_Checked#1\">Public Sub HighlightCheckedNodes()\n   Dim countIndex As Integer = 0\n   Dim selectedNode As String = &quot;Selected customer nodes are : &quot;\n   Dim myNode As TreeNode\n   For Each myNode In  myTreeView.Nodes(0).Nodes\n      &#39; Check whether the tree node is checked.\n      If myNode.Checked Then\n         &#39; Set the node&#39;s backColor.\n         myNode.BackColor = Color.Yellow\n         selectedNode += myNode.Text + &quot; &quot;\n         countIndex += 1\n      Else\n         myNode.BackColor = Color.White\n      End If\n   Next myNode\n\n   If countIndex &gt; 0 Then\n      MessageBox.Show(selectedNode)\n   Else\n      MessageBox.Show(&quot;No nodes are selected&quot;)\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Checked#1\">public:\n   void HighlightCheckedNodes()\n   {\n      int countIndex = 0;\n      String^ selectedNode = &quot;Selected customer nodes are : &quot;;\n      IEnumerator^ myEnum = myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         TreeNode^ myNode = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n         \n         // Check whether the tree node is checked.\n         if ( myNode-&gt;Checked )\n         {\n            \n            // Set the node&#39;s backColor.\n            myNode-&gt;BackColor = Color::Yellow;\n            selectedNode = String::Concat( selectedNode, myNode-&gt;Text, &quot; &quot; );\n            countIndex++;\n         }\n         else\n                  myNode-&gt;BackColor = Color::White;\n      }\n\n      if ( countIndex &gt; 0 )\n            MessageBox::Show( selectedNode );\n      else\n            MessageBox::Show( &quot;No nodes are selected&quot; );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_Checked#1\">public void HighlightCheckedNodes()\n{\n   int countIndex = 0;\n   string selectedNode = &quot;Selected customer nodes are : &quot;;\n   foreach (TreeNode myNode in myTreeView.Nodes[0].Nodes)\n   {\n      // Check whether the tree node is checked.\n      if(myNode.Checked)\n      {\n         // Set the node&#39;s backColor.\n         myNode.BackColor = Color.Yellow;\n         selectedNode += myNode.Text+&quot; &quot;;\n         countIndex++;\n      }\n      else\n         myNode.BackColor = Color.White;\n   }\n\n   if(countIndex &gt; 0)\n      MessageBox.Show(selectedNode);\n   else\n      MessageBox.Show(&quot;No nodes are selected&quot;);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_ContextMenu\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_ContextMenu_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContextMenu</div>        \r\n          </div>\r\n    \r\n            <p>Gets the shortcut menu that is associated with this tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> that is associated with the tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The preferred way to associate a shortcut menu with a tree node is with the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_ContextMenuStrip\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_ContextMenuStrip_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContextMenuStrip</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the shortcut menu associated with this tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a> associated with the tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The shortcut menu is shown when the user right-clicks the tree node.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_FirstNode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_FirstNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the first child tree node in the tree node collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode FirstNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>The first child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> in the <span class=\"xref\">stem.Windows.Forms.TreeNode.Nodes*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FirstNode is the first child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> stored in the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> property of the current tree node. If the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> has no child tree node, the FirstNode property returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the appropriate <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> after determining if the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> passed in is selected and which <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to select. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that contains several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. It also requires that you have a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the following items: &quot;Previous&quot;, &quot;PreviousVisible&quot;, &quot;Next&quot;, &quot;NextVisible&quot;, &quot;First&quot;, and &quot;Last&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Parent#1\">\tprivate void SelectNode(TreeNode node)\n\t{\n\t\tif(node.IsSelected)\n\t\t{\n\t\t\t// Determine which TreeNode to select.\n\t\t\tswitch(myComboBox.Text)\n\t\t\t{\n\t\t\t\tcase &quot;Previous&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;PreviousVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Next&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;NextVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;First&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.FirstNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Last&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.LastNode;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnode.TreeView.Focus();\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Parent#1\">Private Sub SelectNode(node As TreeNode)\n   If node.IsSelected Then\n      &#39; Determine which TreeNode to select.\n      Select Case myComboBox.Text\n         Case &quot;Previous&quot;\n            node.TreeView.SelectedNode = node.PrevNode\n         Case &quot;PreviousVisible&quot;\n            node.TreeView.SelectedNode = node.PrevVisibleNode\n         Case &quot;Next&quot;\n            node.TreeView.SelectedNode = node.NextNode\n         Case &quot;NextVisible&quot;\n            node.TreeView.SelectedNode = node.NextVisibleNode\n         Case &quot;First&quot;\n            node.TreeView.SelectedNode = node.FirstNode\n         Case &quot;Last&quot;\n            node.TreeView.SelectedNode = node.LastNode\n      End Select\n   End If\n   node.TreeView.Focus()\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Parent#1\">   void SelectNode( TreeNode^ node )\n   {\n      if ( node-&gt;IsSelected )\n      {\n         \n         // Determine which TreeNode to select.\n         String^ str = myComboBox-&gt;Text;\n         if ( str-&gt;Equals( &quot;Previous&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevNode;\n         else\n         if ( str-&gt;Equals( &quot;PreviousVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;Next&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextNode;\n         else\n         if ( str-&gt;Equals( &quot;NextVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;First&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;FirstNode;\n         else\n         if ( str-&gt;Equals( &quot;Last&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;LastNode;\n      }\n\n      node-&gt;TreeView-&gt;Focus();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_ForeColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_ForeColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForeColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the foreground color of the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Color ForeColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>The foreground <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> of the tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>null</code>, the <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> used is the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> property value of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that the tree node is assigned to.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a root tree node to assign child tree nodes to. A child tree node for each <code>Customer</code> object in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is added to the root tree node as well as a child tree node for each <code>Order</code> object assigned to the <code>Customer</code> object. The <code>Customer</code> object is assigned to the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property, and the tree nodes representing <code>Customer</code> objects are displayed with <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Orange_\" data-linktype=\"relative-path\">Orange</a> text. This example requires that you have a <code>Customer</code> and <code>Order</code> object defined, a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> named <code>customerArray</code> that contains <code>Customer</code> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Bounds#1\">public class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\npublic void AddRootNodes()\n{\n   // Add a root node to assign the customer nodes to.\n   TreeNode rootNode = new TreeNode();\n   rootNode.Text = &quot;CustomerList&quot;;\n   // Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode);\n\n   // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n   foreach(Customer myCustomer in customerArray)\n   {\n      // Add a child treenode for each Order object.\n      int i = 0;\n      TreeNode[] myTreeNodeArray = new TreeNode[5];\n      foreach(Order myOrder in myCustomer.CustomerOrders)\n      {\n         myTreeNodeArray[i] = new TreeNode(myOrder.OrderID);\n         i++;\n      }\n      TreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n        myTreeNodeArray);\n\t\t// Display the customer names with and Orange font.\n\t\tcustomerNode.ForeColor = Color.Orange;\n\t\t// Store the Customer object in the Tag property of the TreeNode.\n\t\tcustomerNode.Tag = myCustomer;\n      myTreeView.Nodes[0].Nodes.Add(customerNode);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Bounds#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n\n   void AddRootNodes()\n   {\n      \n      // Add a root node to assign the customer nodes to.\n      TreeNode^ rootNode = gcnew TreeNode;\n      rootNode-&gt;Text = &quot;CustomerList&quot;;\n      \n      // Add a main root treenode.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child treenode for each Order object.\n         int i = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(5);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            myTreeNodeArray[ i ] = gcnew TreeNode( myOrder-&gt;OrderID );\n            i++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,myTreeNodeArray );\n         \n         // Display the customer names with and Orange font.\n         customerNode-&gt;ForeColor = Color::Orange;\n         \n         // Store the Customer Object* in the Tag property of the TreeNode.\n         customerNode-&gt;Tag = myCustomer;\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Bounds#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\nPublic Class Order\n   Public OrderID As String\n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPublic Sub AddRootNodes()\n   &#39; Add a root node to assign the customer nodes to.\n   Dim rootNode As TreeNode\n   rootNode = New TreeNode()\n   rootNode.Text = &quot;CustomerList&quot;\n   &#39; Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode)\n\n   &#39; Add a root treenode for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In customerArray\n      &#39; Add a child treenode for each Order object.\n      Dim i As Integer = 0\n      Dim myTreeNodeArray(4) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         myTreeNodeArray(i) = New TreeNode(myOrder.OrderID)\n         i += 1\n      Next myOrder\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n        myTreeNodeArray)\n      &#39; Display the customer names with and Orange font.\n      customerNode.ForeColor = Color.Orange\n      &#39; Store the Customer object in the Tag property of the TreeNode.\n      customerNode.Tag = myCustomer\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_FullPath\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_FullPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullPath</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path from the root tree node to the current tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string FullPath { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path from the root tree node to the current tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The node is not contained in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The path consists of the labels of all the tree nodes that must be navigated to reach this tree node, starting at the root tree node. The node labels are separated by the delimiter character specified in the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_PathSeparator_\" data-linktype=\"relative-path\">PathSeparator</a> property of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that contains this node. For example, if the delimiter character of the tree view control named &quot;Location&quot; is set to the backslash character, (\\), the FullPath property value is &quot;Country\\Region\\State&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_PathSeparator_\" data-linktype=\"relative-path\">PathSeparator</a> property of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and displays the number of child tree nodes that are contained in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedNode_\" data-linktype=\"relative-path\">SelectedNode</a>. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, and a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that has several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects (preferably with three or more levels).  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeNode_ForeColor#2\">   void myButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      \n      // Set the tree view&#39;s PathSeparator property.\n      myTreeView-&gt;PathSeparator = &quot;.&quot;;\n      \n      // Get the count of the child tree nodes contained in the SelectedNode.\n      int myNodeCount = myTreeView-&gt;SelectedNode-&gt;GetNodeCount( true );\n      Decimal myChildPercentage = ((Decimal)myNodeCount / (Decimal)myTreeView-&gt;GetNodeCount( true )) * 100;\n      \n      // Display the tree node path and the number of child nodes it and the tree view have.\n      MessageBox::Show( String::Concat( &quot;The &#39;&quot;, myTreeView-&gt;SelectedNode-&gt;FullPath, &quot;&#39; node has &quot;, myNodeCount, &quot; child nodes.<br>That is &quot;, String::Format( &quot;{0:###.##}&quot;, myChildPercentage ), &quot;% of the total tree nodes in the tree view control.&quot; ) );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_ForeColor#2\">private void myButton_Click(object sender, System.EventArgs e)\n{\n   // Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;;\n\n   // Get the count of the child tree nodes contained in the SelectedNode.\n   int myNodeCount = myTreeView.SelectedNode.GetNodeCount(true);\n   decimal myChildPercentage = ((decimal)myNodeCount/\n     (decimal)myTreeView.GetNodeCount(true)) * 100;\n\n   // Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show(&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; \n     + myNodeCount.ToString() + &quot; child nodes.<br>That is &quot; \n     + string.Format(&quot;{0:###.##}&quot;, myChildPercentage) \n     + &quot;% of the total tree nodes in the tree view control.&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_ForeColor#2\">Private Sub myButton_Click(ByVal sender As Object, _\n  ByVal e As System.EventArgs) Handles myButton.Click\n   &#39; Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;\n\n   &#39; Get the count of the child tree nodes contained in the SelectedNode.\n   Dim myNodeCount As Integer = myTreeView.SelectedNode.GetNodeCount(True)\n   Dim myChildPercentage As Decimal = CDec(myNodeCount) / _\n      CDec(myTreeView.GetNodeCount(True)) * 100\n\n   &#39; Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show((&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; _\n      + myNodeCount.ToString() + &quot; child nodes.&quot; + Microsoft.VisualBasic.ControlChars.Lf _\n      + &quot;That is &quot; + String.Format(&quot;{0:###.##}&quot;, myChildPercentage) _\n      + &quot;% of the total tree nodes in the tree view control.&quot;))\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Handle\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Handle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Handle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the handle of the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr Handle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The tree node handle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a handle is not already created when the Handle property is referenced, it is created.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that was collapsed and creates a copy of it using its Handle property. The original <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is removed from the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a>, and the copy is added to the collection. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on it. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control should have two or more root nodes, each having at least one child node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.TreeNode#3\">   private:\n      void treeView1_AfterCollapse( Object^ /*sender*/, TreeViewEventArgs^ e )\n      {\n         // Create a copy of the e.Node from its Handle.\n         TreeNode^ tn = TreeNode::FromHandle( e-&gt;Node-&gt;TreeView, e-&gt;Node-&gt;Handle );\n         tn-&gt;Text = String::Concat( tn-&gt;Text, &quot;Copy&quot; );\n\n         // Remove the e.Node so it can be replaced with tn.\n         e-&gt;Node-&gt;Remove();\n\n         // Add tn to the TreeNodeCollection.\n         treeView1-&gt;Nodes-&gt;Add( tn );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.TreeNode#3\">private void treeView1_AfterCollapse(object sender, TreeViewEventArgs e)\n{\n   // Create a copy of the e.Node from its Handle.\n   TreeNode tn = TreeNode.FromHandle(e.Node.TreeView, e.Node.Handle);\n   tn.Text += &quot;Copy&quot;;\n   // Remove the e.Node so it can be replaced with tn.\n   e.Node.Remove();\n   // Add tn to the TreeNodeCollection.\n   treeView1.Nodes.Add(tn);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.TreeNode#3\">Private Sub treeView1_AfterCollapse(sender As Object, _\n  e As TreeViewEventArgs) Handles treeView1.AfterCollapse\n   &#39; Create a copy of the e.Node from its Handle.\n   Dim tn As TreeNode = TreeNode.FromHandle(e.Node.TreeView, e.Node.Handle)\n   tn.Text += &quot;Copy&quot;\n   &#39; Remove the e.Node so it can be replaced with tn.\n   e.Node.Remove()\n   &#39; Add tn to the TreeNodeCollection.\n   treeView1.Nodes.Add(tn)\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_ImageIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_ImageIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the image list index value of the image displayed when the tree node is in the unselected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ImageIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A zero-based index value that represents the image position in the assigned <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ImageIndex value is the index value of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> stored in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> assigned to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The default value of the ImageIndex property is the same as the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> property of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is assigned to.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageKey_\" data-linktype=\"relative-path\">ImageKey</a> and ImageIndex properties are mutually exclusive; therefore, if one property is set, the other is ignored. If you set the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageKey_\" data-linktype=\"relative-path\">ImageKey</a> property, the ImageIndex property is automatically set to -1. Alternatively, if you set ImageIndex, <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageKey_\" data-linktype=\"relative-path\">ImageKey</a> is automatically set to an empty string (&quot;&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates and assigns an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control and fills the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. The tree nodes are assigned images from the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that is displayed when the tree node is in a selected or unselected state. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains <code>Customer</code> objects that each contain <code>Order</code> objects. It also requires that the <code>Customer</code> and <code>Order</code> objects are defined.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_TreeNode#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   \n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\n\nPublic Class Order\n   Public OrderID As String\n   \n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPrivate Sub FillTreeView()\n   &#39; Load the images in an ImageList.\n   Dim myImageList As New ImageList()\n   myImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;))\n   \n   &#39; Assign the ImageList to the TreeView.\n   myTreeView.ImageList = myImageList\n   \n   &#39; Set the TreeView control&#39;s default image and selected image indexes.\n   myTreeView.ImageIndex = 0\n   myTreeView.SelectedImageIndex = 1\n   \n   &#39; Set the index of image from the \n   &#39; ImageList for selected and unselected tree nodes.\n   Me.rootImageIndex = 2\n   Me.selectedCustomerImageIndex = 3\n   Me.unselectedCustomerImageIndex = 4\n   Me.selectedOrderImageIndex = 5\n   Me.unselectedOrderImageIndex = 6\n   \n   &#39; Create the root tree node.\n   Dim rootNode As New TreeNode(&quot;CustomerList&quot;)\n   rootNode.ImageIndex = rootImageIndex\n   rootNode.SelectedImageIndex = rootImageIndex\n   \n   &#39; Add a main root tree node.\n   myTreeView.Nodes.Add(rootNode)\n   \n   &#39; Add a root tree node for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In  customerArray\n      &#39; Add a child tree node for each Order object.\n      Dim countIndex As Integer = 0\n      Dim myTreeNodeArray(myCustomer.CustomerOrders.Count) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         &#39; Add the Order tree node to the array.\n         myTreeNodeArray(countIndex) = New TreeNode(myOrder.OrderID, _\n            unselectedOrderImageIndex, selectedOrderImageIndex)\n         countIndex += 1\n      Next myOrder\n      &#39; Add the Customer tree node.\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n         unselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray)\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_TreeNode#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n   void FillTreeView()\n   {\n      \n      // Load the images in an ImageList.\n      ImageList^ myImageList = gcnew ImageList;\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Default.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedDefault.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Root.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedOrder.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedOrder.gif&quot; ) );\n      \n      // Assign the ImageList to the TreeView.\n      myTreeView-&gt;ImageList = myImageList;\n      \n      // Set the TreeView control&#39;s default image and selected image indexes.\n      myTreeView-&gt;ImageIndex = 0;\n      myTreeView-&gt;SelectedImageIndex = 1;\n      \n      /* Set the index of image from the\n        ImageList for selected and unselected tree nodes.*/\n      this-&gt;rootImageIndex = 2;\n      this-&gt;selectedCustomerImageIndex = 3;\n      this-&gt;unselectedCustomerImageIndex = 4;\n      this-&gt;selectedOrderImageIndex = 5;\n      this-&gt;unselectedOrderImageIndex = 6;\n      \n      // Create the root tree node.\n      TreeNode^ rootNode = gcnew TreeNode( &quot;CustomerList&quot; );\n      rootNode-&gt;ImageIndex = rootImageIndex;\n      rootNode-&gt;SelectedImageIndex = rootImageIndex;\n      \n      // Add a main root tree node.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root tree node for each Customer object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child tree node for each Order object.\n         int countIndex = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(myCustomer-&gt;CustomerOrders-&gt;Count);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            \n            // Add the Order tree node to the array.\n            myTreeNodeArray[ countIndex ] = gcnew TreeNode( myOrder-&gt;OrderID,unselectedOrderImageIndex,selectedOrderImageIndex );\n            countIndex++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,unselectedCustomerImageIndex,selectedCustomerImageIndex,myTreeNodeArray );\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_TreeNode#1\">\npublic class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\nprivate void FillTreeView()\n{\n\t// Load the images in an ImageList.\n\tImageList myImageList = new ImageList();\n\tmyImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;));\n\t\n\t// Assign the ImageList to the TreeView.\n\tmyTreeView.ImageList = myImageList;\n\t\n\t// Set the TreeView control&#39;s default image and selected image indexes.\n\tmyTreeView.ImageIndex = 0;\n\tmyTreeView.SelectedImageIndex = 1;\n\n\t/* Set the index of image from the \n\tImageList for selected and unselected tree nodes.*/\n\tthis.rootImageIndex = 2;\n\tthis.selectedCustomerImageIndex = 3;\n\tthis.unselectedCustomerImageIndex = 4;\n\tthis.selectedOrderImageIndex = 5;\n\tthis.unselectedOrderImageIndex = 6;\n\t\n\t// Create the root tree node.\n\tTreeNode rootNode = new TreeNode(&quot;CustomerList&quot;);\n\trootNode.ImageIndex = rootImageIndex;\n\trootNode.SelectedImageIndex = rootImageIndex;\n      \n\t// Add a main root tree node.\n\tmyTreeView.Nodes.Add(rootNode);\n\n\t// Add a root tree node for each Customer object in the ArrayList.\n\tforeach(Customer myCustomer in customerArray)\n\t{\n\t\t// Add a child tree node for each Order object.\n\t\tint countIndex=0;\n\t\tTreeNode[] myTreeNodeArray = new TreeNode[myCustomer.CustomerOrders.Count];\n\t\tforeach(Order myOrder in myCustomer.CustomerOrders)\n\t\t{\n\t\t\t// Add the Order tree node to the array.\n\t\t\tmyTreeNodeArray[countIndex] = new TreeNode(myOrder.OrderID,\n\t\t\t  unselectedOrderImageIndex, selectedOrderImageIndex);\n\t\t\tcountIndex++;\n\t\t}\n\t\t// Add the Customer tree node.\n\t\tTreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n\t\t\tunselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray);\n\t\tmyTreeView.Nodes[0].Nodes.Add(customerNode);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_ImageKey\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_ImageKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the key for the image associated with this tree node when the node is in an unselected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ImageKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The key for the image associated with this tree node when the node is in an unselected state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The image key returned by this property is contained in the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property of the containing <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.  </p>\n<p> The ImageKey is case-insensitive.  </p>\n<p> The ImageKey and <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> properties are mutually exclusive; if one property is set, the other is ignored. If you set the ImageKey property, the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> property is automatically set to -1. Alternatively, if you set <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a>, ImageKey is automatically set to an empty string (&quot;&quot;).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Index\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Index_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Index</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of the tree node in the tree node collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Index { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A zero-based index value that represents the position of the tree node in the <span class=\"xref\">stem.Windows.Forms.TreeNode.Nodes*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> and Index property values of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> represented by the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Parent_\" data-linktype=\"relative-path\">Parent</a> property of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedNode_\" data-linktype=\"relative-path\">SelectedNode</a>. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on it. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> should have at least two root nodes, each having at least one child node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.TreeNode#2\">   private:\n      void treeView1_AfterSelect( Object^ /*sender*/, TreeViewEventArgs^ e )\n      {\n         /* Display the Text and Index of the\n               * selected tree node&#39;s Parent. */\n         if ( e-&gt;Node-&gt;Parent != nullptr &amp;&amp; e-&gt;Node-&gt;Parent-&gt;GetType() == TreeNode::typeid )\n         {\n            statusBar1-&gt;Text = String::Format( &quot;Parent: {0}<br> Index Position: {1}&quot;, e-&gt;Node-&gt;Parent-&gt;Text, e-&gt;Node-&gt;Parent-&gt;Index );\n         }\n         else\n         {\n            statusBar1-&gt;Text = &quot;No parent node.&quot;;\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.TreeNode#2\">private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)\n{  \n   /* Display the Text and Index of the \n    * selected tree node&#39;s Parent. */\n   if(e.Node.Parent!= null &amp;&amp; \n     e.Node.Parent.GetType() == typeof(TreeNode) )\n   {\n      statusBar1.Text = &quot;Parent: &quot; + e.Node.Parent.Text + &quot;<br>&quot;\n         + &quot;Index Position: &quot; + e.Node.Parent.Index.ToString();\n   }\n   else\n   {\n      statusBar1.Text = &quot;No parent node.&quot;;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.TreeNode#2\">Private Sub treeView1_AfterSelect(sender As Object, _\n  e As TreeViewEventArgs) Handles treeView1.AfterSelect\n   &#39; Display the Text and Index of the \n   &#39; selected tree node&#39;s Parent. \n   If (e.Node.Parent IsNot Nothing) \n      If (e.Node.Parent.GetType() Is GetType(TreeNode)) Then\n         statusBar1.Text = &quot;Parent: &quot; + e.Node.Parent.Text + _\n           ControlChars.Cr + &quot;Index Position: &quot; + e.Node.Parent.Index.ToString()\n      End If\n   Else\n      statusBar1.Text = &quot;No parent node.&quot;\n   End If\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_IsEditing\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_IsEditing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEditing</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the tree node is in an editable state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsEditing { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the tree node is in editable state; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lets the user edit nonroot tree nodes by using a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>. When the user right clicks the mouse, the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> at that position is determined and stored in a variable named <code>mySelectedNode</code>. If a nonroot tree node was selected, it is put into an editable state, letting the user edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  </p>\n<pre><code class=\"lang-cpp\" name=\"classic treenode.beginedit example#1\">   /* Get the tree node under the mouse pointer and \n      save it in the mySelectedNode variable. */\nprivate:\n   void treeView1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      mySelectedNode = treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y );\n   }\n\n   void menuItem1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      if ( mySelectedNode != nullptr &amp;&amp; mySelectedNode-&gt;Parent != nullptr )\n      {\n         treeView1-&gt;SelectedNode = mySelectedNode;\n         treeView1-&gt;LabelEdit = true;\n         if (  !mySelectedNode-&gt;IsEditing )\n         {\n            mySelectedNode-&gt;BeginEdit();\n         }\n      }\n      else\n      {\n         MessageBox::Show( String::Concat( &quot;No tree node selected or selected node is a root node.<br>&quot;,\n            &quot;Editing of root nodes is not allowed.&quot; ), &quot;Invalid selection&quot; );\n      }\n   }\n\n   void treeView1_AfterLabelEdit( Object^ /*sender*/,\n      System::Windows::Forms::NodeLabelEditEventArgs^ e )\n   {\n      if ( e-&gt;Label != nullptr )\n      {\n         if ( e-&gt;Label-&gt;Length &gt; 0 )\n         {\n            array&lt;Char&gt;^ temp0 = {&#39;@&#39;,&#39;.&#39;,&#39;,&#39;,&#39;!&#39;};\n            if ( e-&gt;Label-&gt;IndexOfAny( temp0 ) == -1 )\n            {\n               \n               // Stop editing without canceling the label change.\n               e-&gt;Node-&gt;EndEdit( false );\n            }\n            else\n            {\n               /* Cancel the label edit action, inform the user, and \n                  place the node in edit mode again. */\n               e-&gt;CancelEdit = true;\n               MessageBox::Show( String::Concat( &quot;Invalid tree node label.<br>&quot;,\n                  &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot; ),\n                  &quot;Node Label Edit&quot; );\n               e-&gt;Node-&gt;BeginEdit();\n            }\n         }\n         else\n         {\n            /* Cancel the label edit action, inform the user, and \n               place the node in edit mode again. */\n            e-&gt;CancelEdit = true;\n            MessageBox::Show( &quot;Invalid tree node label.<br>The label cannot be blank&quot;,\n               &quot;Node Label Edit&quot; );\n            e-&gt;Node-&gt;BeginEdit();\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"classic treenode.beginedit example#1\">/* Get the tree node under the mouse pointer and \n   save it in the mySelectedNode variable. */\nprivate void treeView1_MouseDown(object sender, \n  System.Windows.Forms.MouseEventArgs e)\n{\n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y);\n}\n\nprivate void menuItem1_Click(object sender, System.EventArgs e)\n{\n   if (mySelectedNode != null &amp;&amp; mySelectedNode.Parent != null)\n   {\n      treeView1.SelectedNode = mySelectedNode;\n      treeView1.LabelEdit = true;\n      if(!mySelectedNode.IsEditing)\n      {\n         mySelectedNode.BeginEdit();\n      }\n   }\n   else\n   {\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.<br>&quot; + \n         &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;);\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, \n         System.Windows.Forms.NodeLabelEditEventArgs e)\n{\n   if (e.Label != null)\n   {\n     if(e.Label.Length &gt; 0)\n     {\n        if (e.Label.IndexOfAny(new char[]{&#39;@&#39;, &#39;.&#39;, &#39;,&#39;, &#39;!&#39;}) == -1)\n        {\n           // Stop editing without canceling the label change.\n           e.Node.EndEdit(false);\n        }\n        else\n        {\n           /* Cancel the label edit action, inform the user, and \n              place the node in edit mode again. */\n           e.CancelEdit = true;\n           MessageBox.Show(&quot;Invalid tree node label.<br>&quot; + \n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, \n              &quot;Node Label Edit&quot;);\n           e.Node.BeginEdit();\n        }\n     }\n     else\n     {\n        /* Cancel the label edit action, inform the user, and \n           place the node in edit mode again. */\n        e.CancelEdit = true;\n        MessageBox.Show(&quot;Invalid tree node label.<br>The label cannot be blank&quot;, \n           &quot;Node Label Edit&quot;);\n        e.Node.BeginEdit();\n     }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"classic treenode.beginedit example#1\">&#39; Get the tree node under the mouse pointer and\n&#39; save it in the mySelectedNode variable. \nPrivate Sub treeView1_MouseDown(sender As Object, _\n  e As System.Windows.Forms.MouseEventArgs)\n        \n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y)\nEnd Sub    \n    \nPrivate Sub menuItem1_Click(sender As Object, e As System.EventArgs)\n   If Not (mySelectedNode Is Nothing) And _\n     Not (mySelectedNode.Parent Is Nothing) Then\n      treeView1.SelectedNode = mySelectedNode\n      treeView1.LabelEdit = True\n      If Not mySelectedNode.IsEditing Then\n         mySelectedNode.BeginEdit()\n      End If\n   Else\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.&quot; &amp; _\n        Microsoft.VisualBasic.ControlChars.Cr &amp; _\n        &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;)\n   End If\nEnd Sub    \n    \nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As System.Windows.Forms.NodeLabelEditEventArgs)\n   If Not (e.Label Is Nothing) Then\n      If e.Label.Length &gt; 0 Then\n         If e.Label.IndexOfAny(New Char() {&quot;@&quot;c, &quot;.&quot;c, &quot;,&quot;c, &quot;!&quot;c}) = -1 Then\n            &#39; Stop editing without canceling the label change.\n            e.Node.EndEdit(False)\n         Else\n            &#39; Cancel the label edit action, inform the user, and\n            &#39; place the node in edit mode again. \n            e.CancelEdit = True\n            MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n              Microsoft.VisualBasic.ControlChars.Cr &amp; _\n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, _\n              &quot;Node Label Edit&quot;)\n            e.Node.BeginEdit()\n         End If\n      Else\n         &#39; Cancel the label edit action, inform the user, and\n         &#39; place the node in edit mode again. \n         e.CancelEdit = True\n         MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n           Microsoft.VisualBasic.ControlChars.Cr &amp; _\n           &quot;The label cannot be blank&quot;, &quot;Node Label Edit&quot;)\n           e.Node.BeginEdit()\n      End If\n   End If\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_IsExpanded\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_IsExpanded_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsExpanded</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the tree node is in the expanded state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsExpanded { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the tree node is in the expanded state; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example toggles the selected node when a button is clicked. If the selected node is collapsed, it is expanded, if it is expanded by calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Expand_\" data-linktype=\"relative-path\">Expand</a> method, it is collapsed by calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Collapse_\" data-linktype=\"relative-path\">Collapse</a> method. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has at least one <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> with at least one child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_EnsureVisible_4#1\">Private Sub button1_Click(sender As Object, _\n  e As System.EventArgs) Handles button1.Click\n   If treeView1.SelectedNode.IsExpanded Then\n      treeView1.SelectedNode.Collapse()\n      MessageBox.Show(treeView1.SelectedNode.Text &amp; _ \n        &quot; tree node collapsed.&quot;)\n   Else\n      treeView1.SelectedNode.Expand()\n      MessageBox.Show(treeView1.SelectedNode.Text &amp; _\n        &quot; tree node expanded.&quot;)\n   End If\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_EnsureVisible_4#1\">private void button1_Click(object sender, System.EventArgs e)\n{\n   if (treeView1.SelectedNode.IsExpanded)\n   {\n      treeView1.SelectedNode.Collapse();\n      MessageBox.Show(treeView1.SelectedNode.Text + \n        &quot; tree node collapsed.&quot;);\n   }\n   else\n   {\n      treeView1.SelectedNode.Expand();\n      MessageBox.Show(treeView1.SelectedNode.Text + \n        &quot; tree node expanded.&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_EnsureVisible_4#1\">      void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         if ( treeView1-&gt;SelectedNode-&gt;IsExpanded )\n         {\n            treeView1-&gt;SelectedNode-&gt;Collapse();\n            MessageBox::Show( String::Concat( treeView1-&gt;SelectedNode-&gt;Text, &quot; tree node collapsed.&quot; ) );\n         }\n         else\n         {\n            treeView1-&gt;SelectedNode-&gt;Expand();\n            MessageBox::Show( String::Concat( treeView1-&gt;SelectedNode-&gt;Text, &quot; tree node expanded.&quot; ) );\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_IsSelected\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_IsSelected_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSelected</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the tree node is in the selected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSelected { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the tree node is in the selected state; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the appropriate <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> after determining if the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> passed in is selected and which <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to select. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> containing several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. It also requires that you have a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the following items: &quot;Previous&quot;, &quot;PreviousVisible&quot;, &quot;Next&quot;, &quot;NextVisible&quot;, &quot;First&quot;, and &quot;Last&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Parent#1\">\tprivate void SelectNode(TreeNode node)\n\t{\n\t\tif(node.IsSelected)\n\t\t{\n\t\t\t// Determine which TreeNode to select.\n\t\t\tswitch(myComboBox.Text)\n\t\t\t{\n\t\t\t\tcase &quot;Previous&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;PreviousVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Next&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;NextVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;First&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.FirstNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Last&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.LastNode;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnode.TreeView.Focus();\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Parent#1\">Private Sub SelectNode(node As TreeNode)\n   If node.IsSelected Then\n      &#39; Determine which TreeNode to select.\n      Select Case myComboBox.Text\n         Case &quot;Previous&quot;\n            node.TreeView.SelectedNode = node.PrevNode\n         Case &quot;PreviousVisible&quot;\n            node.TreeView.SelectedNode = node.PrevVisibleNode\n         Case &quot;Next&quot;\n            node.TreeView.SelectedNode = node.NextNode\n         Case &quot;NextVisible&quot;\n            node.TreeView.SelectedNode = node.NextVisibleNode\n         Case &quot;First&quot;\n            node.TreeView.SelectedNode = node.FirstNode\n         Case &quot;Last&quot;\n            node.TreeView.SelectedNode = node.LastNode\n      End Select\n   End If\n   node.TreeView.Focus()\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Parent#1\">   void SelectNode( TreeNode^ node )\n   {\n      if ( node-&gt;IsSelected )\n      {\n         \n         // Determine which TreeNode to select.\n         String^ str = myComboBox-&gt;Text;\n         if ( str-&gt;Equals( &quot;Previous&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevNode;\n         else\n         if ( str-&gt;Equals( &quot;PreviousVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;Next&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextNode;\n         else\n         if ( str-&gt;Equals( &quot;NextVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;First&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;FirstNode;\n         else\n         if ( str-&gt;Equals( &quot;Last&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;LastNode;\n      }\n\n      node-&gt;TreeView-&gt;Focus();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_IsVisible\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_IsVisible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsVisible</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the tree node is visible or partially visible.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsVisible { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the tree node is visible or partially visible; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example brings the last child tree node of the last root tree node into view in the tree view when a button is clicked. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, and a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>. There should be enough tree nodes so that they are not all visible in the tree view control.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_EnsureVisible_4#2\">Private Sub button3_Click(sender As Object, _\n  e As System.EventArgs) Handles button3.Click\n   Dim lastNode as TreeNode\n   lastNode = treeView1.Nodes(treeView1.Nodes.Count - 1). _\n     Nodes(treeView1.Nodes(treeView1.Nodes.Count - 1).Nodes.Count - 1)\n\n   If Not lastNode.IsVisible Then\n      lastNode.EnsureVisible()\n      MessageBox.Show(lastNode.Text &amp; _\n        &quot; tree node is visible.&quot;)\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_EnsureVisible_4#2\">private void button3_Click(object sender, System.EventArgs e)\n{\n   TreeNode lastNode = treeView1.Nodes[treeView1.Nodes.Count - 1].\n     Nodes[treeView1.Nodes[treeView1.Nodes.Count - 1].Nodes.Count - 1];\n\n   if (!lastNode.IsVisible)\n   {\n      lastNode.EnsureVisible();\n      MessageBox.Show(lastNode.Text + &quot; tree node is visible.&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_EnsureVisible_4#2\">      void button3_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         TreeNode^ lastNode = treeView1-&gt;Nodes[ treeView1-&gt;Nodes-&gt;Count - 1 ]-&gt;Nodes[ treeView1-&gt;Nodes[ treeView1-&gt;Nodes-&gt;Count - 1 ]-&gt;Nodes-&gt;Count - 1 ];\n         if (  !lastNode-&gt;IsVisible )\n         {\n            lastNode-&gt;EnsureVisible();\n            MessageBox::Show( String::Concat( lastNode-&gt;Text, &quot; tree node is visible.&quot; ) );\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_LastNode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_LastNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the last child tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode LastNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the last child tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LastNode is the last child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> stored in the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> property of the current tree node. If the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> has no child tree node, the LastNode property returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the appropriate <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> after determining if the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> passed in is selected and which <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to select. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that contains several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. It also requires that you have a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the following items: &quot;Previous&quot;, &quot;PreviousVisible&quot;, &quot;Next&quot;, &quot;NextVisible&quot;, &quot;First&quot;, and &quot;Last&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Parent#1\">\tprivate void SelectNode(TreeNode node)\n\t{\n\t\tif(node.IsSelected)\n\t\t{\n\t\t\t// Determine which TreeNode to select.\n\t\t\tswitch(myComboBox.Text)\n\t\t\t{\n\t\t\t\tcase &quot;Previous&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;PreviousVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Next&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;NextVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;First&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.FirstNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Last&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.LastNode;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnode.TreeView.Focus();\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Parent#1\">Private Sub SelectNode(node As TreeNode)\n   If node.IsSelected Then\n      &#39; Determine which TreeNode to select.\n      Select Case myComboBox.Text\n         Case &quot;Previous&quot;\n            node.TreeView.SelectedNode = node.PrevNode\n         Case &quot;PreviousVisible&quot;\n            node.TreeView.SelectedNode = node.PrevVisibleNode\n         Case &quot;Next&quot;\n            node.TreeView.SelectedNode = node.NextNode\n         Case &quot;NextVisible&quot;\n            node.TreeView.SelectedNode = node.NextVisibleNode\n         Case &quot;First&quot;\n            node.TreeView.SelectedNode = node.FirstNode\n         Case &quot;Last&quot;\n            node.TreeView.SelectedNode = node.LastNode\n      End Select\n   End If\n   node.TreeView.Focus()\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Parent#1\">   void SelectNode( TreeNode^ node )\n   {\n      if ( node-&gt;IsSelected )\n      {\n         \n         // Determine which TreeNode to select.\n         String^ str = myComboBox-&gt;Text;\n         if ( str-&gt;Equals( &quot;Previous&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevNode;\n         else\n         if ( str-&gt;Equals( &quot;PreviousVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;Next&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextNode;\n         else\n         if ( str-&gt;Equals( &quot;NextVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;First&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;FirstNode;\n         else\n         if ( str-&gt;Equals( &quot;Last&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;LastNode;\n      }\n\n      node-&gt;TreeView-&gt;Focus();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Level\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Level_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Level</div>        \r\n          </div>\r\n    \r\n            <p>Gets the zero-based depth of the tree node in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Level { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based depth of the tree node in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the Level property, the root node is considered the first level of nesting and returns 0.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Name\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents the name of the tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Name of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is also the node&#39;s key, when the node is part of a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a>. If the node does not have a name, Name returns an empty string (&quot;&quot;).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_NextNode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_NextNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the next sibling tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode NextNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the next sibling tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The NextNode is the next sibling <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> stored in the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> property of the tree node&#39;s parent <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>. If there is no next tree node, the NextNode property returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the appropriate <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> after determining if the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> passed in is selected and which <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to select. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that contains several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. It also requires that you have a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the following items: &quot;Previous&quot;, &quot;PreviousVisible&quot;, &quot;Next&quot;, &quot;NextVisible&quot;, &quot;First&quot;, and &quot;Last&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Parent#1\">\tprivate void SelectNode(TreeNode node)\n\t{\n\t\tif(node.IsSelected)\n\t\t{\n\t\t\t// Determine which TreeNode to select.\n\t\t\tswitch(myComboBox.Text)\n\t\t\t{\n\t\t\t\tcase &quot;Previous&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;PreviousVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Next&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;NextVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;First&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.FirstNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Last&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.LastNode;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnode.TreeView.Focus();\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Parent#1\">Private Sub SelectNode(node As TreeNode)\n   If node.IsSelected Then\n      &#39; Determine which TreeNode to select.\n      Select Case myComboBox.Text\n         Case &quot;Previous&quot;\n            node.TreeView.SelectedNode = node.PrevNode\n         Case &quot;PreviousVisible&quot;\n            node.TreeView.SelectedNode = node.PrevVisibleNode\n         Case &quot;Next&quot;\n            node.TreeView.SelectedNode = node.NextNode\n         Case &quot;NextVisible&quot;\n            node.TreeView.SelectedNode = node.NextVisibleNode\n         Case &quot;First&quot;\n            node.TreeView.SelectedNode = node.FirstNode\n         Case &quot;Last&quot;\n            node.TreeView.SelectedNode = node.LastNode\n      End Select\n   End If\n   node.TreeView.Focus()\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Parent#1\">   void SelectNode( TreeNode^ node )\n   {\n      if ( node-&gt;IsSelected )\n      {\n         \n         // Determine which TreeNode to select.\n         String^ str = myComboBox-&gt;Text;\n         if ( str-&gt;Equals( &quot;Previous&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevNode;\n         else\n         if ( str-&gt;Equals( &quot;PreviousVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;Next&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextNode;\n         else\n         if ( str-&gt;Equals( &quot;NextVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;First&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;FirstNode;\n         else\n         if ( str-&gt;Equals( &quot;Last&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;LastNode;\n      }\n\n      node-&gt;TreeView-&gt;Focus();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_NextVisibleNode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_NextVisibleNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextVisibleNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the next visible tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode NextVisibleNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the next visible tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The NextVisibleNode can be a child, sibling, or a tree node from another branch. If there is no next tree node, the NextVisibleNode property returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the appropriate <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> after determining if the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> passed in is selected and which <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to select. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that contains several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. It also requires that you have a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the following items: &quot;Previous&quot;, &quot;PreviousVisible&quot;, &quot;Next&quot;, &quot;NextVisible&quot;, &quot;First&quot;, and &quot;Last&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Parent#1\">\tprivate void SelectNode(TreeNode node)\n\t{\n\t\tif(node.IsSelected)\n\t\t{\n\t\t\t// Determine which TreeNode to select.\n\t\t\tswitch(myComboBox.Text)\n\t\t\t{\n\t\t\t\tcase &quot;Previous&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;PreviousVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Next&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;NextVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;First&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.FirstNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Last&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.LastNode;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnode.TreeView.Focus();\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Parent#1\">Private Sub SelectNode(node As TreeNode)\n   If node.IsSelected Then\n      &#39; Determine which TreeNode to select.\n      Select Case myComboBox.Text\n         Case &quot;Previous&quot;\n            node.TreeView.SelectedNode = node.PrevNode\n         Case &quot;PreviousVisible&quot;\n            node.TreeView.SelectedNode = node.PrevVisibleNode\n         Case &quot;Next&quot;\n            node.TreeView.SelectedNode = node.NextNode\n         Case &quot;NextVisible&quot;\n            node.TreeView.SelectedNode = node.NextVisibleNode\n         Case &quot;First&quot;\n            node.TreeView.SelectedNode = node.FirstNode\n         Case &quot;Last&quot;\n            node.TreeView.SelectedNode = node.LastNode\n      End Select\n   End If\n   node.TreeView.Focus()\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Parent#1\">   void SelectNode( TreeNode^ node )\n   {\n      if ( node-&gt;IsSelected )\n      {\n         \n         // Determine which TreeNode to select.\n         String^ str = myComboBox-&gt;Text;\n         if ( str-&gt;Equals( &quot;Previous&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevNode;\n         else\n         if ( str-&gt;Equals( &quot;PreviousVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;Next&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextNode;\n         else\n         if ( str-&gt;Equals( &quot;NextVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;First&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;FirstNode;\n         else\n         if ( str-&gt;Equals( &quot;Last&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;LastNode;\n      }\n\n      node-&gt;TreeView-&gt;Focus();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_NodeFont\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_NodeFont_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeFont</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the font that is used to display the text on the tree node label.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Font NodeFont { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> that is used to display the text on the tree node label.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>null</code>, the <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> used is the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Font_\" data-linktype=\"relative-path\">Font</a> property value of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that this node is attached to.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the node font is larger than the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Font_\" data-linktype=\"relative-path\">Font</a> property value that is set in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control, the tree node label text is clipped.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the size of NodeFont to the specified size and adjusts the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ItemHeight_\" data-linktype=\"relative-path\">ItemHeight</a> of the tree node&#39;s parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that contains a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, and a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> that contains font sizes.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Bounds#2\">   private void Button1_Click(object sender,EventArgs e)\n   {\n      myTreeView.ItemHeight = 5;\n      myTreeView.SelectedNode.NodeFont = new Font(&quot;Arial&quot;,5);\n\n      // Get the font size from combobox.\n      string selectedString = myComboBox.SelectedItem.ToString();\n      int myNodeFontSize = Int32.Parse(selectedString);\n\n      // Set the font of root node.\n      myTreeView.SelectedNode.NodeFont = new Font(&quot;Arial&quot;,myNodeFontSize);\n      for(int i = 0; i &lt; myTreeView.Nodes[0].Nodes.Count; i++)\n      {\n         // Set the font of child nodes.\n         myTreeView.Nodes[0].Nodes[i].NodeFont =\n           new Font(&quot;Arial&quot;,myNodeFontSize);\n      }\n\n      // Get the bounds of the tree node.\n      Rectangle myRectangle = myTreeView.SelectedNode.Bounds;\n      int myNodeHeight = myRectangle.Height;\n      if(myNodeHeight &lt; myNodeFontSize)\n      {\n         myNodeHeight = myNodeFontSize;\n      }\n      myTreeView.ItemHeight = myNodeHeight + 4;\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Bounds#2\">private:\n   void Button1_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      myTreeView-&gt;ItemHeight = 5;\n      myTreeView-&gt;SelectedNode-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,5 );\n      \n      // Get the font size from combobox.\n      String^ selectedString = myComboBox-&gt;SelectedItem-&gt;ToString();\n      int myNodeFontSize = Int32::Parse( selectedString );\n      \n      // Set the font of root node.\n      myTreeView-&gt;SelectedNode-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,(float)myNodeFontSize );\n      for ( int i = 0; i &lt; myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Count; i++ )\n      {\n         \n         // Set the font of child nodes.\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes[ i ]-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,(float)myNodeFontSize );\n\n      }\n      \n      // Get the bounds of the tree node.\n      Rectangle myRectangle = myTreeView-&gt;SelectedNode-&gt;Bounds;\n      int myNodeHeight = myRectangle.Height;\n      if ( myNodeHeight &lt; myNodeFontSize )\n      {\n         myNodeHeight = myNodeFontSize;\n      }\n\n      myTreeView-&gt;ItemHeight = myNodeHeight + 4;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Bounds#2\">Private Sub Button1_Click(sender As Object, e As EventArgs)\n   myTreeView.ItemHeight = 5\n   myTreeView.SelectedNode.NodeFont = New Font(&quot;Arial&quot;, 5)\n\n   &#39; Get the font size from combobox.\n   Dim selectedString As String = myComboBox.SelectedItem.ToString()\n   Dim myNodeFontSize As Integer = Int32.Parse(selectedString)\n\n   &#39; Set the font of root node.\n   myTreeView.SelectedNode.NodeFont = New Font(&quot;Arial&quot;, myNodeFontSize)\n   Dim i As Integer\n   For  i = 0 To (myTreeView.Nodes(0).Nodes.Count) - 1\n      &#39; Set the font of child nodes.\n      myTreeView.Nodes(0).Nodes(i).NodeFont = New Font(&quot;Arial&quot;, _\n        myNodeFontSize)\n   Next i\n\n   &#39; Get the bounds of the tree node.\n   Dim myRectangle As Rectangle = myTreeView.SelectedNode.Bounds\n   Dim myNodeHeight As Integer = myRectangle.Height\n   If myNodeHeight &lt; myNodeFontSize Then\n      myNodeHeight = myNodeFontSize\n   End If\n   myTreeView.ItemHeight = myNodeHeight + 4\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Nodes\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Nodes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Nodes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects assigned to the current tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNodeCollection Nodes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that represents the tree nodes assigned to the current tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Nodes property can hold a collection of other <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. Each of the tree node in the collection has a Nodes property that can contain its own <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a>. This nesting of tree nodes can make it difficult to navigate a tree structure. The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_FullPath_\" data-linktype=\"relative-path\">FullPath</a> property makes it easier to determine your location in a tree.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example removes the selected tree node from one <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and adds it to another if both tree node collections are not read-only. When a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> is clicked, the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedNode_\" data-linktype=\"relative-path\">SelectedNode</a> is deleted from one <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> using the <a class=\"xref\" href=\"system.windows.forms.treenodecollection#System_Windows_Forms_TreeNodeCollection_Remove_\" data-linktype=\"relative-path\">Remove</a> method and added to the other <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> using the <a class=\"xref\" href=\"system.windows.forms.treenodecollection#System_Windows_Forms_TreeNodeCollection_Insert_\" data-linktype=\"relative-path\">Insert</a> method. This example requires that you have two <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> controls named <code>treeView1</code> and <code>treeView2</code>, and a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNodeCollection#1\">Private Sub button1_Click(sender As Object, e As EventArgs) Handles button1.Click\n   &#39; If neither TreeNodeCollection is read-only, move the \n   &#39; selected node from treeView1 to treeView2. \n   If Not treeView1.Nodes.IsReadOnly And Not treeView2.Nodes.IsReadOnly Then\n      If (treeView1.SelectedNode IsNot Nothing) Then\n         Dim tn As TreeNode = treeView1.SelectedNode\n         treeView1.Nodes.Remove(tn)\n         treeView2.Nodes.Insert(treeView2.Nodes.Count, tn)\n      End If\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNodeCollection#1\">      void button1_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         // If neither TreeNodeCollection is read-only, move the\n         // selected node from treeView1 to treeView2.\n         if (  !treeView1-&gt;Nodes-&gt;IsReadOnly &amp;&amp;  !treeView2-&gt;Nodes-&gt;IsReadOnly )\n         {\n            if ( treeView1-&gt;SelectedNode != nullptr )\n            {\n               TreeNode^ tn = treeView1-&gt;SelectedNode;\n               treeView1-&gt;Nodes-&gt;Remove( tn );\n               treeView2-&gt;Nodes-&gt;Insert( treeView2-&gt;Nodes-&gt;Count, tn );\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNodeCollection#1\">private void button1_Click(object sender, EventArgs e)\n{\n   // If neither TreeNodeCollection is read-only, move the \n   // selected node from treeView1 to treeView2.\n   if(!treeView1.Nodes.IsReadOnly &amp;&amp; !treeView2.Nodes.IsReadOnly)\n   {\n      if(treeView1.SelectedNode != null)\n      {\n         TreeNode tn = treeView1.SelectedNode;\n         treeView1.Nodes.Remove(tn);\n         treeView2.Nodes.Insert(treeView2.Nodes.Count, tn);\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Parent\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Parent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parent</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parent tree node of the current tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode Parent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the parent of the current tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the tree node is at the root level, the Parent property returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> and <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Index_\" data-linktype=\"relative-path\">Index</a> property values of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> represented by the Parent property of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedNode_\" data-linktype=\"relative-path\">SelectedNode</a>. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on it. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> should have at least two root nodes, each having at least one child node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.TreeNode#2\">   private:\n      void treeView1_AfterSelect( Object^ /*sender*/, TreeViewEventArgs^ e )\n      {\n         /* Display the Text and Index of the\n               * selected tree node&#39;s Parent. */\n         if ( e-&gt;Node-&gt;Parent != nullptr &amp;&amp; e-&gt;Node-&gt;Parent-&gt;GetType() == TreeNode::typeid )\n         {\n            statusBar1-&gt;Text = String::Format( &quot;Parent: {0}<br> Index Position: {1}&quot;, e-&gt;Node-&gt;Parent-&gt;Text, e-&gt;Node-&gt;Parent-&gt;Index );\n         }\n         else\n         {\n            statusBar1-&gt;Text = &quot;No parent node.&quot;;\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.TreeNode#2\">private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)\n{  \n   /* Display the Text and Index of the \n    * selected tree node&#39;s Parent. */\n   if(e.Node.Parent!= null &amp;&amp; \n     e.Node.Parent.GetType() == typeof(TreeNode) )\n   {\n      statusBar1.Text = &quot;Parent: &quot; + e.Node.Parent.Text + &quot;<br>&quot;\n         + &quot;Index Position: &quot; + e.Node.Parent.Index.ToString();\n   }\n   else\n   {\n      statusBar1.Text = &quot;No parent node.&quot;;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.TreeNode#2\">Private Sub treeView1_AfterSelect(sender As Object, _\n  e As TreeViewEventArgs) Handles treeView1.AfterSelect\n   &#39; Display the Text and Index of the \n   &#39; selected tree node&#39;s Parent. \n   If (e.Node.Parent IsNot Nothing) \n      If (e.Node.Parent.GetType() Is GetType(TreeNode)) Then\n         statusBar1.Text = &quot;Parent: &quot; + e.Node.Parent.Text + _\n           ControlChars.Cr + &quot;Index Position: &quot; + e.Node.Parent.Index.ToString()\n      End If\n   Else\n      statusBar1.Text = &quot;No parent node.&quot;\n   End If\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_PrevNode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_PrevNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrevNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the previous sibling tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode PrevNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the previous sibling tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PrevNode is the previous sibling <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> stored in the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> property of the tree node&#39;s parent <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>. If there is no previous tree node, the PrevNode property returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the appropriate <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> after determining if the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> passed in is selected and which <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to select. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that contains several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. It also requires that you have a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the following items: &quot;Previous&quot;, &quot;PreviousVisible&quot;, &quot;Next&quot;, &quot;NextVisible&quot;, &quot;First&quot;, and &quot;Last&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Parent#1\">\tprivate void SelectNode(TreeNode node)\n\t{\n\t\tif(node.IsSelected)\n\t\t{\n\t\t\t// Determine which TreeNode to select.\n\t\t\tswitch(myComboBox.Text)\n\t\t\t{\n\t\t\t\tcase &quot;Previous&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;PreviousVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Next&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;NextVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;First&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.FirstNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Last&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.LastNode;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnode.TreeView.Focus();\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Parent#1\">Private Sub SelectNode(node As TreeNode)\n   If node.IsSelected Then\n      &#39; Determine which TreeNode to select.\n      Select Case myComboBox.Text\n         Case &quot;Previous&quot;\n            node.TreeView.SelectedNode = node.PrevNode\n         Case &quot;PreviousVisible&quot;\n            node.TreeView.SelectedNode = node.PrevVisibleNode\n         Case &quot;Next&quot;\n            node.TreeView.SelectedNode = node.NextNode\n         Case &quot;NextVisible&quot;\n            node.TreeView.SelectedNode = node.NextVisibleNode\n         Case &quot;First&quot;\n            node.TreeView.SelectedNode = node.FirstNode\n         Case &quot;Last&quot;\n            node.TreeView.SelectedNode = node.LastNode\n      End Select\n   End If\n   node.TreeView.Focus()\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Parent#1\">   void SelectNode( TreeNode^ node )\n   {\n      if ( node-&gt;IsSelected )\n      {\n         \n         // Determine which TreeNode to select.\n         String^ str = myComboBox-&gt;Text;\n         if ( str-&gt;Equals( &quot;Previous&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevNode;\n         else\n         if ( str-&gt;Equals( &quot;PreviousVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;Next&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextNode;\n         else\n         if ( str-&gt;Equals( &quot;NextVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;First&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;FirstNode;\n         else\n         if ( str-&gt;Equals( &quot;Last&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;LastNode;\n      }\n\n      node-&gt;TreeView-&gt;Focus();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_PrevVisibleNode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_PrevVisibleNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrevVisibleNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the previous visible tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode PrevVisibleNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the previous visible tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PrevVisibleNode can be a child, sibling, or a tree node from another branch. If there is no previous tree node, the PrevVisibleNode property returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the appropriate <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> after determining if the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> passed in is selected and which <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to select. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that contains several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. It also requires that you have a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the following items: &quot;Previous&quot;, &quot;PreviousVisible&quot;, &quot;Next&quot;, &quot;NextVisible&quot;, &quot;First&quot;, and &quot;Last&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Parent#1\">\tprivate void SelectNode(TreeNode node)\n\t{\n\t\tif(node.IsSelected)\n\t\t{\n\t\t\t// Determine which TreeNode to select.\n\t\t\tswitch(myComboBox.Text)\n\t\t\t{\n\t\t\t\tcase &quot;Previous&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;PreviousVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Next&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;NextVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;First&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.FirstNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Last&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.LastNode;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnode.TreeView.Focus();\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Parent#1\">Private Sub SelectNode(node As TreeNode)\n   If node.IsSelected Then\n      &#39; Determine which TreeNode to select.\n      Select Case myComboBox.Text\n         Case &quot;Previous&quot;\n            node.TreeView.SelectedNode = node.PrevNode\n         Case &quot;PreviousVisible&quot;\n            node.TreeView.SelectedNode = node.PrevVisibleNode\n         Case &quot;Next&quot;\n            node.TreeView.SelectedNode = node.NextNode\n         Case &quot;NextVisible&quot;\n            node.TreeView.SelectedNode = node.NextVisibleNode\n         Case &quot;First&quot;\n            node.TreeView.SelectedNode = node.FirstNode\n         Case &quot;Last&quot;\n            node.TreeView.SelectedNode = node.LastNode\n      End Select\n   End If\n   node.TreeView.Focus()\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Parent#1\">   void SelectNode( TreeNode^ node )\n   {\n      if ( node-&gt;IsSelected )\n      {\n         \n         // Determine which TreeNode to select.\n         String^ str = myComboBox-&gt;Text;\n         if ( str-&gt;Equals( &quot;Previous&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevNode;\n         else\n         if ( str-&gt;Equals( &quot;PreviousVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;Next&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextNode;\n         else\n         if ( str-&gt;Equals( &quot;NextVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;First&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;FirstNode;\n         else\n         if ( str-&gt;Equals( &quot;Last&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;LastNode;\n      }\n\n      node-&gt;TreeView-&gt;Focus();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_SelectedImageIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_SelectedImageIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedImageIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the image list index value of the image that is displayed when the tree node is in the selected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int SelectedImageIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A zero-based index value that represents the image position in an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SelectedImageIndex value is the index value of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> stored in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> assigned to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The default value of the SelectedImageIndex property is the same as the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> property of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is assigned to.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates and assigns an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control and fills the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. The tree nodes are assigned images from the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that is displayed when the tree node is in a selected or unselected state. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> containing a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> containing <code>Customer</code> objects that each contain <code>Order</code> objects. It also requires that the <code>Customer</code> and <code>Order</code> objects are defined.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_TreeNode#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   \n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\n\nPublic Class Order\n   Public OrderID As String\n   \n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPrivate Sub FillTreeView()\n   &#39; Load the images in an ImageList.\n   Dim myImageList As New ImageList()\n   myImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;))\n   \n   &#39; Assign the ImageList to the TreeView.\n   myTreeView.ImageList = myImageList\n   \n   &#39; Set the TreeView control&#39;s default image and selected image indexes.\n   myTreeView.ImageIndex = 0\n   myTreeView.SelectedImageIndex = 1\n   \n   &#39; Set the index of image from the \n   &#39; ImageList for selected and unselected tree nodes.\n   Me.rootImageIndex = 2\n   Me.selectedCustomerImageIndex = 3\n   Me.unselectedCustomerImageIndex = 4\n   Me.selectedOrderImageIndex = 5\n   Me.unselectedOrderImageIndex = 6\n   \n   &#39; Create the root tree node.\n   Dim rootNode As New TreeNode(&quot;CustomerList&quot;)\n   rootNode.ImageIndex = rootImageIndex\n   rootNode.SelectedImageIndex = rootImageIndex\n   \n   &#39; Add a main root tree node.\n   myTreeView.Nodes.Add(rootNode)\n   \n   &#39; Add a root tree node for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In  customerArray\n      &#39; Add a child tree node for each Order object.\n      Dim countIndex As Integer = 0\n      Dim myTreeNodeArray(myCustomer.CustomerOrders.Count) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         &#39; Add the Order tree node to the array.\n         myTreeNodeArray(countIndex) = New TreeNode(myOrder.OrderID, _\n            unselectedOrderImageIndex, selectedOrderImageIndex)\n         countIndex += 1\n      Next myOrder\n      &#39; Add the Customer tree node.\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n         unselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray)\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_TreeNode#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n   void FillTreeView()\n   {\n      \n      // Load the images in an ImageList.\n      ImageList^ myImageList = gcnew ImageList;\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Default.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedDefault.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Root.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedOrder.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedOrder.gif&quot; ) );\n      \n      // Assign the ImageList to the TreeView.\n      myTreeView-&gt;ImageList = myImageList;\n      \n      // Set the TreeView control&#39;s default image and selected image indexes.\n      myTreeView-&gt;ImageIndex = 0;\n      myTreeView-&gt;SelectedImageIndex = 1;\n      \n      /* Set the index of image from the\n        ImageList for selected and unselected tree nodes.*/\n      this-&gt;rootImageIndex = 2;\n      this-&gt;selectedCustomerImageIndex = 3;\n      this-&gt;unselectedCustomerImageIndex = 4;\n      this-&gt;selectedOrderImageIndex = 5;\n      this-&gt;unselectedOrderImageIndex = 6;\n      \n      // Create the root tree node.\n      TreeNode^ rootNode = gcnew TreeNode( &quot;CustomerList&quot; );\n      rootNode-&gt;ImageIndex = rootImageIndex;\n      rootNode-&gt;SelectedImageIndex = rootImageIndex;\n      \n      // Add a main root tree node.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root tree node for each Customer object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child tree node for each Order object.\n         int countIndex = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(myCustomer-&gt;CustomerOrders-&gt;Count);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            \n            // Add the Order tree node to the array.\n            myTreeNodeArray[ countIndex ] = gcnew TreeNode( myOrder-&gt;OrderID,unselectedOrderImageIndex,selectedOrderImageIndex );\n            countIndex++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,unselectedCustomerImageIndex,selectedCustomerImageIndex,myTreeNodeArray );\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_TreeNode#1\">\npublic class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\nprivate void FillTreeView()\n{\n\t// Load the images in an ImageList.\n\tImageList myImageList = new ImageList();\n\tmyImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;));\n\t\n\t// Assign the ImageList to the TreeView.\n\tmyTreeView.ImageList = myImageList;\n\t\n\t// Set the TreeView control&#39;s default image and selected image indexes.\n\tmyTreeView.ImageIndex = 0;\n\tmyTreeView.SelectedImageIndex = 1;\n\n\t/* Set the index of image from the \n\tImageList for selected and unselected tree nodes.*/\n\tthis.rootImageIndex = 2;\n\tthis.selectedCustomerImageIndex = 3;\n\tthis.unselectedCustomerImageIndex = 4;\n\tthis.selectedOrderImageIndex = 5;\n\tthis.unselectedOrderImageIndex = 6;\n\t\n\t// Create the root tree node.\n\tTreeNode rootNode = new TreeNode(&quot;CustomerList&quot;);\n\trootNode.ImageIndex = rootImageIndex;\n\trootNode.SelectedImageIndex = rootImageIndex;\n      \n\t// Add a main root tree node.\n\tmyTreeView.Nodes.Add(rootNode);\n\n\t// Add a root tree node for each Customer object in the ArrayList.\n\tforeach(Customer myCustomer in customerArray)\n\t{\n\t\t// Add a child tree node for each Order object.\n\t\tint countIndex=0;\n\t\tTreeNode[] myTreeNodeArray = new TreeNode[myCustomer.CustomerOrders.Count];\n\t\tforeach(Order myOrder in myCustomer.CustomerOrders)\n\t\t{\n\t\t\t// Add the Order tree node to the array.\n\t\t\tmyTreeNodeArray[countIndex] = new TreeNode(myOrder.OrderID,\n\t\t\t  unselectedOrderImageIndex, selectedOrderImageIndex);\n\t\t\tcountIndex++;\n\t\t}\n\t\t// Add the Customer tree node.\n\t\tTreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n\t\t\tunselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray);\n\t\tmyTreeView.Nodes[0].Nodes.Add(customerNode);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_SelectedImageKey\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_SelectedImageKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedImageKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the key of the image displayed in the tree node when it is in a selected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SelectedImageKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The key of the image displayed when the tree node is in a selected state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The image key returned by this property is contained in the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property of the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_StateImageIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_StateImageIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StateImageIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the index of the image that is used to indicate the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> has its <span class=\"xref\">stem.Windows.Forms.TreeView.CheckBoxes*</span> property set to <code>false</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int StateImageIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the image that is used to indicate the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified index is less than -1 or greater than 14.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The image index that is returned by this property is contained in the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_StateImageList_\" data-linktype=\"relative-path\">StateImageList</a> property of the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.  </p>\n<p> If the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> has check boxes enabled, the StateImageIndex is ignored and the node will display the first or second image in the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_StateImageList_\" data-linktype=\"relative-path\">StateImageList</a> set on the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> to indicate an unchecked or checked state, respectively. Toggling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property does not affect the value of the StateImageIndex.  </p>\n<p> The StateImageIndex returns -1 when not set. The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_StateImageKey_\" data-linktype=\"relative-path\">StateImageKey</a> and StateImageIndex properties are mutually exclusive, meaning if one is set, the other is ignored. If you set the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_StateImageKey_\" data-linktype=\"relative-path\">StateImageKey</a> property, the StateImageIndex property is automatically set to -1. Alternatively, if you set StateImageIndex, <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_StateImageKey_\" data-linktype=\"relative-path\">StateImageKey</a> is automatically set to an empty string (&quot;&quot;).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_StateImageKey\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_StateImageKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StateImageKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the key of the image that is used to indicate the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> has its <span class=\"xref\">stem.Windows.Forms.TreeView.CheckBoxes*</span> property set to <code>false</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string StateImageKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The key of the image that is used to indicate the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The image key that is returned by this property is contained in the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_StateImageList_\" data-linktype=\"relative-path\">StateImageList</a> property of the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.  </p>\n<p> If the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> has check boxes enabled, the StateImageKey is ignored and the node will display the first or second image in the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_StateImageList_\" data-linktype=\"relative-path\">StateImageList</a> set on the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> to indicate an unchecked or checked state, respectively. Toggling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property does not affect the value of the StateImageKey.  </p>\n<p> The StateImageKey and <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_StateImageIndex_\" data-linktype=\"relative-path\">StateImageIndex</a> properties are mutually exclusive, meaning if one is set, the other is ignored. If you set the StateImageKey property, the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_StateImageIndex_\" data-linktype=\"relative-path\">StateImageIndex</a> property is automatically set to -1. Alternatively, if you set <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_StateImageIndex_\" data-linktype=\"relative-path\">StateImageIndex</a>, StateImageKey is automatically set to an empty string (&quot;&quot;). You should set the StateImageKey to an image with a corresponding index between 0 and 14. You can set the StateImageKey to an image with an index value greater than 14 (an exception will not be thrown), but the image may not be displayed</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Tag\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Tag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tag</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the object that contains data about the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Tag { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains data about the tree node. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Clone_\" data-linktype=\"relative-path\">Clone</a> method performs a shallow copy of the node. If the value of the Tag property is a reference type, both the original and cloned copy will point to the same single instance of the Tag value.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a root tree node to assign child tree nodes to. A child tree node for each <code>Customer</code> object in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is added to the root tree node as well as a child tree node for each <code>Order</code> object assigned to the <code>Customer</code> object. The <code>Customer</code> object is assigned to the Tag property, and the tree nodes representing <code>Customer</code> objects are displayed with <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Orange_\" data-linktype=\"relative-path\">Orange</a> text. This example requires that you have a <code>Customer</code> and <code>Order</code> object defined, a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> named <code>customerArray</code> that contains <code>Customer</code> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Bounds#1\">public class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\npublic void AddRootNodes()\n{\n   // Add a root node to assign the customer nodes to.\n   TreeNode rootNode = new TreeNode();\n   rootNode.Text = &quot;CustomerList&quot;;\n   // Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode);\n\n   // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n   foreach(Customer myCustomer in customerArray)\n   {\n      // Add a child treenode for each Order object.\n      int i = 0;\n      TreeNode[] myTreeNodeArray = new TreeNode[5];\n      foreach(Order myOrder in myCustomer.CustomerOrders)\n      {\n         myTreeNodeArray[i] = new TreeNode(myOrder.OrderID);\n         i++;\n      }\n      TreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n        myTreeNodeArray);\n\t\t// Display the customer names with and Orange font.\n\t\tcustomerNode.ForeColor = Color.Orange;\n\t\t// Store the Customer object in the Tag property of the TreeNode.\n\t\tcustomerNode.Tag = myCustomer;\n      myTreeView.Nodes[0].Nodes.Add(customerNode);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Bounds#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n\n   void AddRootNodes()\n   {\n      \n      // Add a root node to assign the customer nodes to.\n      TreeNode^ rootNode = gcnew TreeNode;\n      rootNode-&gt;Text = &quot;CustomerList&quot;;\n      \n      // Add a main root treenode.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child treenode for each Order object.\n         int i = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(5);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            myTreeNodeArray[ i ] = gcnew TreeNode( myOrder-&gt;OrderID );\n            i++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,myTreeNodeArray );\n         \n         // Display the customer names with and Orange font.\n         customerNode-&gt;ForeColor = Color::Orange;\n         \n         // Store the Customer Object* in the Tag property of the TreeNode.\n         customerNode-&gt;Tag = myCustomer;\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Bounds#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\nPublic Class Order\n   Public OrderID As String\n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPublic Sub AddRootNodes()\n   &#39; Add a root node to assign the customer nodes to.\n   Dim rootNode As TreeNode\n   rootNode = New TreeNode()\n   rootNode.Text = &quot;CustomerList&quot;\n   &#39; Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode)\n\n   &#39; Add a root treenode for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In customerArray\n      &#39; Add a child treenode for each Order object.\n      Dim i As Integer = 0\n      Dim myTreeNodeArray(4) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         myTreeNodeArray(i) = New TreeNode(myOrder.OrderID)\n         i += 1\n      Next myOrder\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n        myTreeNodeArray)\n      &#39; Display the customer names with and Orange font.\n      customerNode.ForeColor = Color.Orange\n      &#39; Store the Customer object in the Tag property of the TreeNode.\n      customerNode.Tag = myCustomer\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Text\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Text_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Text</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text displayed in the label of the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Text { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text displayed in the label of the tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The maximum number of characters that a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> can display is 259. If a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that has more than 259 characters is assigned to this property, only the first 259 characters are displayed.  </p>\n<p> This property cannot be set by the user if the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_LabelEdit_\" data-linktype=\"relative-path\">LabelEdit</a> property of the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is set to <code>false</code>. The alternative to explicitly setting this property is to create the tree node by using one of the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode__ctor_\" data-linktype=\"relative-path\">TreeNode</a> constructors that has a string parameter that represents the Text property. The label is displayed next to the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> image, if one is displayed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a root tree node to assign child tree nodes to. A child tree node for each <code>Customer</code> object in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is added to the root tree node as well as a child tree node for each <code>Order</code> object assigned to the <code>Customer</code> object. The <code>Customer</code> object is assigned to the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property, and the tree nodes representing <code>Customer</code> objects are displayed with <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Orange_\" data-linktype=\"relative-path\">Orange</a> text. This example requires that you have a <code>Customer</code> and <code>Order</code> object defined, a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> named <code>customerArray</code> that contains <code>Customer</code> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Bounds#1\">public class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\npublic void AddRootNodes()\n{\n   // Add a root node to assign the customer nodes to.\n   TreeNode rootNode = new TreeNode();\n   rootNode.Text = &quot;CustomerList&quot;;\n   // Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode);\n\n   // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n   foreach(Customer myCustomer in customerArray)\n   {\n      // Add a child treenode for each Order object.\n      int i = 0;\n      TreeNode[] myTreeNodeArray = new TreeNode[5];\n      foreach(Order myOrder in myCustomer.CustomerOrders)\n      {\n         myTreeNodeArray[i] = new TreeNode(myOrder.OrderID);\n         i++;\n      }\n      TreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n        myTreeNodeArray);\n\t\t// Display the customer names with and Orange font.\n\t\tcustomerNode.ForeColor = Color.Orange;\n\t\t// Store the Customer object in the Tag property of the TreeNode.\n\t\tcustomerNode.Tag = myCustomer;\n      myTreeView.Nodes[0].Nodes.Add(customerNode);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Bounds#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n\n   void AddRootNodes()\n   {\n      \n      // Add a root node to assign the customer nodes to.\n      TreeNode^ rootNode = gcnew TreeNode;\n      rootNode-&gt;Text = &quot;CustomerList&quot;;\n      \n      // Add a main root treenode.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root treenode for each &#39;Customer&#39; object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child treenode for each Order object.\n         int i = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(5);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            myTreeNodeArray[ i ] = gcnew TreeNode( myOrder-&gt;OrderID );\n            i++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,myTreeNodeArray );\n         \n         // Display the customer names with and Orange font.\n         customerNode-&gt;ForeColor = Color::Orange;\n         \n         // Store the Customer Object* in the Tag property of the TreeNode.\n         customerNode-&gt;Tag = myCustomer;\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Bounds#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\nPublic Class Order\n   Public OrderID As String\n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPublic Sub AddRootNodes()\n   &#39; Add a root node to assign the customer nodes to.\n   Dim rootNode As TreeNode\n   rootNode = New TreeNode()\n   rootNode.Text = &quot;CustomerList&quot;\n   &#39; Add a main root treenode.\n   myTreeView.Nodes.Add(rootNode)\n\n   &#39; Add a root treenode for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In customerArray\n      &#39; Add a child treenode for each Order object.\n      Dim i As Integer = 0\n      Dim myTreeNodeArray(4) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         myTreeNodeArray(i) = New TreeNode(myOrder.OrderID)\n         i += 1\n      Next myOrder\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n        myTreeNodeArray)\n      &#39; Display the customer names with and Orange font.\n      customerNode.ForeColor = Color.Orange\n      &#39; Store the Customer object in the Tag property of the TreeNode.\n      customerNode.Tag = myCustomer\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_ToolTipText\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_ToolTipText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToolTipText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text that appears when the mouse pointer hovers over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToolTipText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Gets the text that appears when the mouse pointer hovers over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must set the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowNodeToolTips_\" data-linktype=\"relative-path\">ShowNodeToolTips</a> property of the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> to <code>true</code> for the ToolTipText to be visible at run time.  </p>\n<p> If the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control has a ToolTip and also contains a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that has a <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a>, only the <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> for the node will be shown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ToolTipText and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowNodeToolTips_\" data-linktype=\"relative-path\">ShowNodeToolTips</a> properties. To run this example, paste the following code into a Windows Form and call <code>InitializeTreeViewWithToolTips</code> from the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event handler.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#7\">    TreeView treeViewWithToolTips;\n    private void InitializeTreeViewWithToolTips()\n    {\n        treeViewWithToolTips = new TreeView();\n        TreeNode node1 = new TreeNode(&quot;Node1&quot;);\n        node1.ToolTipText = &quot;Help for Node1&quot;;\n        TreeNode node2 = new TreeNode(&quot;Node2&quot;);\n        node2.ToolTipText = &quot;A Tip for Node2&quot;;\n        treeViewWithToolTips.Nodes.AddRange(new TreeNode[] { node1, node2 });\n        treeViewWithToolTips.ShowNodeToolTips = true;\n        this.Controls.Add(treeViewWithToolTips);\n\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#7\">    Private treeViewWithToolTips As TreeView\n    \n    Private Sub InitializeTreeViewWithToolTips() \n        treeViewWithToolTips = New TreeView()\n        Dim node1 As New TreeNode(&quot;Node1&quot;)\n        node1.ToolTipText = &quot;Help for Node1&quot;\n        Dim node2 As New TreeNode(&quot;Node2&quot;)\n        node2.ToolTipText = &quot;A Tip for Node2&quot;\n        treeViewWithToolTips.Nodes.AddRange(New TreeNode() {node1, node2})\n        treeViewWithToolTips.ShowNodeToolTips = True\n        Me.Controls.Add(treeViewWithToolTips)\n    \n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_TreeView\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_TreeView_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeView</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parent tree view that the tree node is assigned to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeView TreeView { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> that represents the parent tree view that the tree node is assigned to, or <code>null</code> if the node has not been assigned to a tree view.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the appropriate <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> after determining if the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> passed in is selected and which <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to select. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that contains several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. It also requires that you have a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the following items: &quot;Previous&quot;, &quot;PreviousVisible&quot;, &quot;Next&quot;, &quot;NextVisible&quot;, &quot;First&quot;, and &quot;Last&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Parent#1\">\tprivate void SelectNode(TreeNode node)\n\t{\n\t\tif(node.IsSelected)\n\t\t{\n\t\t\t// Determine which TreeNode to select.\n\t\t\tswitch(myComboBox.Text)\n\t\t\t{\n\t\t\t\tcase &quot;Previous&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;PreviousVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.PrevVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Next&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;NextVisible&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.NextVisibleNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;First&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.FirstNode;\n\t\t\t\t\tbreak;\n\t\t\t\tcase &quot;Last&quot;:\n\t\t\t\t\tnode.TreeView.SelectedNode = node.LastNode;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnode.TreeView.Focus();\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Parent#1\">Private Sub SelectNode(node As TreeNode)\n   If node.IsSelected Then\n      &#39; Determine which TreeNode to select.\n      Select Case myComboBox.Text\n         Case &quot;Previous&quot;\n            node.TreeView.SelectedNode = node.PrevNode\n         Case &quot;PreviousVisible&quot;\n            node.TreeView.SelectedNode = node.PrevVisibleNode\n         Case &quot;Next&quot;\n            node.TreeView.SelectedNode = node.NextNode\n         Case &quot;NextVisible&quot;\n            node.TreeView.SelectedNode = node.NextVisibleNode\n         Case &quot;First&quot;\n            node.TreeView.SelectedNode = node.FirstNode\n         Case &quot;Last&quot;\n            node.TreeView.SelectedNode = node.LastNode\n      End Select\n   End If\n   node.TreeView.Focus()\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Parent#1\">   void SelectNode( TreeNode^ node )\n   {\n      if ( node-&gt;IsSelected )\n      {\n         \n         // Determine which TreeNode to select.\n         String^ str = myComboBox-&gt;Text;\n         if ( str-&gt;Equals( &quot;Previous&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevNode;\n         else\n         if ( str-&gt;Equals( &quot;PreviousVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;PrevVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;Next&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextNode;\n         else\n         if ( str-&gt;Equals( &quot;NextVisible&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;NextVisibleNode;\n         else\n         if ( str-&gt;Equals( &quot;First&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;FirstNode;\n         else\n         if ( str-&gt;Equals( &quot;Last&quot; ) )\n                  node-&gt;TreeView-&gt;SelectedNode = node-&gt;LastNode;\n      }\n\n      node-&gt;TreeView-&gt;Focus();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_BeginEdit\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_BeginEdit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginEdit()</div>        \r\n          </div>\r\n    \r\n            <p>Initiates the editing of the tree node label.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginEdit ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Windows.Forms.TreeView.LabelEdit*</span> is set to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A typical scenario to use this method is to call it on the <a class=\"xref\" href=\"system.windows.forms.menuitem#System_Windows_Forms_MenuItem_Click\" data-linktype=\"relative-path\">Click</a> event of a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a> or <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method only works if the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_LabelEdit_\" data-linktype=\"relative-path\">LabelEdit</a> property of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is set to <code>true</code>. If <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_LabelEdit_\" data-linktype=\"relative-path\">LabelEdit</a> is set to <code>false</code>, an exception is thrown and the tree node will not be put into an editable state.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lets the user edit nonroot tree nodes by using a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>. When the user right-clicks the mouse, the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> at that position is determined and stored in a variable named <code>mySelectedNode</code>. If a nonroot tree node was selected, it is put into an editable state, allowing the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  </p>\n<pre><code class=\"lang-cpp\" name=\"classic treenode.beginedit example#1\">   /* Get the tree node under the mouse pointer and \n      save it in the mySelectedNode variable. */\nprivate:\n   void treeView1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      mySelectedNode = treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y );\n   }\n\n   void menuItem1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      if ( mySelectedNode != nullptr &amp;&amp; mySelectedNode-&gt;Parent != nullptr )\n      {\n         treeView1-&gt;SelectedNode = mySelectedNode;\n         treeView1-&gt;LabelEdit = true;\n         if (  !mySelectedNode-&gt;IsEditing )\n         {\n            mySelectedNode-&gt;BeginEdit();\n         }\n      }\n      else\n      {\n         MessageBox::Show( String::Concat( &quot;No tree node selected or selected node is a root node.<br>&quot;,\n            &quot;Editing of root nodes is not allowed.&quot; ), &quot;Invalid selection&quot; );\n      }\n   }\n\n   void treeView1_AfterLabelEdit( Object^ /*sender*/,\n      System::Windows::Forms::NodeLabelEditEventArgs^ e )\n   {\n      if ( e-&gt;Label != nullptr )\n      {\n         if ( e-&gt;Label-&gt;Length &gt; 0 )\n         {\n            array&lt;Char&gt;^ temp0 = {&#39;@&#39;,&#39;.&#39;,&#39;,&#39;,&#39;!&#39;};\n            if ( e-&gt;Label-&gt;IndexOfAny( temp0 ) == -1 )\n            {\n               \n               // Stop editing without canceling the label change.\n               e-&gt;Node-&gt;EndEdit( false );\n            }\n            else\n            {\n               /* Cancel the label edit action, inform the user, and \n                  place the node in edit mode again. */\n               e-&gt;CancelEdit = true;\n               MessageBox::Show( String::Concat( &quot;Invalid tree node label.<br>&quot;,\n                  &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot; ),\n                  &quot;Node Label Edit&quot; );\n               e-&gt;Node-&gt;BeginEdit();\n            }\n         }\n         else\n         {\n            /* Cancel the label edit action, inform the user, and \n               place the node in edit mode again. */\n            e-&gt;CancelEdit = true;\n            MessageBox::Show( &quot;Invalid tree node label.<br>The label cannot be blank&quot;,\n               &quot;Node Label Edit&quot; );\n            e-&gt;Node-&gt;BeginEdit();\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"classic treenode.beginedit example#1\">/* Get the tree node under the mouse pointer and \n   save it in the mySelectedNode variable. */\nprivate void treeView1_MouseDown(object sender, \n  System.Windows.Forms.MouseEventArgs e)\n{\n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y);\n}\n\nprivate void menuItem1_Click(object sender, System.EventArgs e)\n{\n   if (mySelectedNode != null &amp;&amp; mySelectedNode.Parent != null)\n   {\n      treeView1.SelectedNode = mySelectedNode;\n      treeView1.LabelEdit = true;\n      if(!mySelectedNode.IsEditing)\n      {\n         mySelectedNode.BeginEdit();\n      }\n   }\n   else\n   {\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.<br>&quot; + \n         &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;);\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, \n         System.Windows.Forms.NodeLabelEditEventArgs e)\n{\n   if (e.Label != null)\n   {\n     if(e.Label.Length &gt; 0)\n     {\n        if (e.Label.IndexOfAny(new char[]{&#39;@&#39;, &#39;.&#39;, &#39;,&#39;, &#39;!&#39;}) == -1)\n        {\n           // Stop editing without canceling the label change.\n           e.Node.EndEdit(false);\n        }\n        else\n        {\n           /* Cancel the label edit action, inform the user, and \n              place the node in edit mode again. */\n           e.CancelEdit = true;\n           MessageBox.Show(&quot;Invalid tree node label.<br>&quot; + \n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, \n              &quot;Node Label Edit&quot;);\n           e.Node.BeginEdit();\n        }\n     }\n     else\n     {\n        /* Cancel the label edit action, inform the user, and \n           place the node in edit mode again. */\n        e.CancelEdit = true;\n        MessageBox.Show(&quot;Invalid tree node label.<br>The label cannot be blank&quot;, \n           &quot;Node Label Edit&quot;);\n        e.Node.BeginEdit();\n     }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"classic treenode.beginedit example#1\">&#39; Get the tree node under the mouse pointer and\n&#39; save it in the mySelectedNode variable. \nPrivate Sub treeView1_MouseDown(sender As Object, _\n  e As System.Windows.Forms.MouseEventArgs)\n        \n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y)\nEnd Sub    \n    \nPrivate Sub menuItem1_Click(sender As Object, e As System.EventArgs)\n   If Not (mySelectedNode Is Nothing) And _\n     Not (mySelectedNode.Parent Is Nothing) Then\n      treeView1.SelectedNode = mySelectedNode\n      treeView1.LabelEdit = True\n      If Not mySelectedNode.IsEditing Then\n         mySelectedNode.BeginEdit()\n      End If\n   Else\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.&quot; &amp; _\n        Microsoft.VisualBasic.ControlChars.Cr &amp; _\n        &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;)\n   End If\nEnd Sub    \n    \nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As System.Windows.Forms.NodeLabelEditEventArgs)\n   If Not (e.Label Is Nothing) Then\n      If e.Label.Length &gt; 0 Then\n         If e.Label.IndexOfAny(New Char() {&quot;@&quot;c, &quot;.&quot;c, &quot;,&quot;c, &quot;!&quot;c}) = -1 Then\n            &#39; Stop editing without canceling the label change.\n            e.Node.EndEdit(False)\n         Else\n            &#39; Cancel the label edit action, inform the user, and\n            &#39; place the node in edit mode again. \n            e.CancelEdit = True\n            MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n              Microsoft.VisualBasic.ControlChars.Cr &amp; _\n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, _\n              &quot;Node Label Edit&quot;)\n            e.Node.BeginEdit()\n         End If\n      Else\n         &#39; Cancel the label edit action, inform the user, and\n         &#39; place the node in edit mode again. \n         e.CancelEdit = True\n         MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n           Microsoft.VisualBasic.ControlChars.Cr &amp; _\n           &quot;The label cannot be blank&quot;, &quot;Node Label Edit&quot;)\n           e.Node.BeginEdit()\n      End If\n   End If\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Clone\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Copies the tree node and the entire subtree rooted at this tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents the cloned <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The tree structure from the tree node being cloned and below is copied. Any child tree nodes assigned to the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> being cloned are included in the new tree node and subtree.  </p>\n<p> The Clone method performs a shallow copy of the node. If the value of the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property is a reference type, both the original and cloned copy will point to the same single instance of the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example clones the last child tree node of the last root tree node and inserts the clone as the first root tree node in the <code>TreeNodeCollection</code>. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects and a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_EnsureVisible_4#3\">Private Sub button4_Click(sender As Object, _\n  e As System.EventArgs) Handles button4.Click\n   Dim lastNode as TreeNode\n   lastNode = treeView1.Nodes(treeView1.Nodes.Count - 1). _\n     Nodes(treeView1.Nodes(treeView1.Nodes.Count - 1).Nodes.Count - 1)\n\n   &#39; Clone the last child node.\n   Dim clonedNode As TreeNode = CType(lastNode.Clone(), TreeNode)\n\n   &#39; Insert the cloned node as the first root node.\n   treeView1.Nodes.Insert(0, clonedNode)\n   MessageBox.Show(lastNode.Text &amp; _\n     &quot; tree node cloned and added to &quot; &amp; treeView1.Nodes(0).Text)\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_EnsureVisible_4#3\">private void button4_Click(object sender, System.EventArgs e)\n{\n   TreeNode lastNode = treeView1.Nodes[treeView1.Nodes.Count - 1].\n     Nodes[treeView1.Nodes[treeView1.Nodes.Count - 1].Nodes.Count - 1];\n\n   // Clone the last child node.\n   TreeNode clonedNode = (TreeNode) lastNode.Clone();\n\n   // Insert the cloned node as the first root node.\n   treeView1.Nodes.Insert(0, clonedNode);\n   MessageBox.Show(lastNode.Text + \n     &quot; tree node cloned and added to &quot; + treeView1.Nodes[0].Text);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_EnsureVisible_4#3\">      void button4_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         TreeNode^ lastNode = treeView1-&gt;Nodes[ treeView1-&gt;Nodes-&gt;Count - 1 ]-&gt;Nodes[ treeView1-&gt;Nodes[ treeView1-&gt;Nodes-&gt;Count - 1 ]-&gt;Nodes-&gt;Count - 1 ];\n         \n         // Clone the last child node.\n         TreeNode^ clonedNode = dynamic_cast&lt;TreeNode^&gt;(lastNode-&gt;Clone());\n         \n         // Insert the cloned node as the first root node.\n         treeView1-&gt;Nodes-&gt;Insert( 0, clonedNode );\n         MessageBox::Show( String::Concat( lastNode-&gt;Text, &quot; tree node cloned and added to &quot;, treeView1-&gt;Nodes[ 0 ]-&gt;Text ) );\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Collapse\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Collapse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collapse()</div>        \r\n          </div>\r\n    \r\n            <p>Collapses the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Collapse ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Collapse method collapses the current <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> and its child nodes. If you want to collapse only the current <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>, use the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Collapse_System_Boolean_\" data-linktype=\"relative-path\">System.Windows.Forms.TreeNode.Collapse(Boolean)</a> overload, passing <code>true</code> to ignore its child nodes.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The state of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is persisted. For example, if the next level of child nodes was not collapsed previously, when the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Expand_\" data-linktype=\"relative-path\">Expand</a> method is called, the child nodes appear in their previously expanded state.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example toggles the selected node when a button is clicked. If the selected node is collapsed, it is expanded, if it is expanded by calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Expand_\" data-linktype=\"relative-path\">Expand</a> method, it is collapsed by calling the Collapse method. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has at least one <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> with at least one child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_EnsureVisible_4#1\">Private Sub button1_Click(sender As Object, _\n  e As System.EventArgs) Handles button1.Click\n   If treeView1.SelectedNode.IsExpanded Then\n      treeView1.SelectedNode.Collapse()\n      MessageBox.Show(treeView1.SelectedNode.Text &amp; _ \n        &quot; tree node collapsed.&quot;)\n   Else\n      treeView1.SelectedNode.Expand()\n      MessageBox.Show(treeView1.SelectedNode.Text &amp; _\n        &quot; tree node expanded.&quot;)\n   End If\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_EnsureVisible_4#1\">private void button1_Click(object sender, System.EventArgs e)\n{\n   if (treeView1.SelectedNode.IsExpanded)\n   {\n      treeView1.SelectedNode.Collapse();\n      MessageBox.Show(treeView1.SelectedNode.Text + \n        &quot; tree node collapsed.&quot;);\n   }\n   else\n   {\n      treeView1.SelectedNode.Expand();\n      MessageBox.Show(treeView1.SelectedNode.Text + \n        &quot; tree node expanded.&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_EnsureVisible_4#1\">      void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         if ( treeView1-&gt;SelectedNode-&gt;IsExpanded )\n         {\n            treeView1-&gt;SelectedNode-&gt;Collapse();\n            MessageBox::Show( String::Concat( treeView1-&gt;SelectedNode-&gt;Text, &quot; tree node collapsed.&quot; ) );\n         }\n         else\n         {\n            treeView1-&gt;SelectedNode-&gt;Expand();\n            MessageBox::Show( String::Concat( treeView1-&gt;SelectedNode-&gt;Text, &quot; tree node expanded.&quot; ) );\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Collapse_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Collapse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collapse(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Collapses the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> and optionally collapses its children.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Collapse (bool ignoreChildren);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreChildren</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to leave the child nodes in their current state; <code>false</code> to collapse the child nodes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Collapse method, passing <code>true</code>, when you want to collapse a node but leave its child nodes in their expanded state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Deserialize_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Deserialize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Deserialize(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> from the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Deserialize (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>serializationInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that describes the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that indicates the state of the stream during deserialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_EndEdit_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_EndEdit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndEdit(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Ends the editing of the tree node label.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EndEdit (bool cancel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the editing of the tree node label text was canceled without being saved; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lets the user edit nonroot tree nodes by using a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>. When the user right clicks the mouse, the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> at that position is determined and stored in a variable named <code>mySelectedNode</code>. If a nonroot tree node was selected, it is put into an editable state, allowing the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  </p>\n<pre><code class=\"lang-cpp\" name=\"classic treenode.beginedit example#1\">   /* Get the tree node under the mouse pointer and \n      save it in the mySelectedNode variable. */\nprivate:\n   void treeView1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      mySelectedNode = treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y );\n   }\n\n   void menuItem1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      if ( mySelectedNode != nullptr &amp;&amp; mySelectedNode-&gt;Parent != nullptr )\n      {\n         treeView1-&gt;SelectedNode = mySelectedNode;\n         treeView1-&gt;LabelEdit = true;\n         if (  !mySelectedNode-&gt;IsEditing )\n         {\n            mySelectedNode-&gt;BeginEdit();\n         }\n      }\n      else\n      {\n         MessageBox::Show( String::Concat( &quot;No tree node selected or selected node is a root node.<br>&quot;,\n            &quot;Editing of root nodes is not allowed.&quot; ), &quot;Invalid selection&quot; );\n      }\n   }\n\n   void treeView1_AfterLabelEdit( Object^ /*sender*/,\n      System::Windows::Forms::NodeLabelEditEventArgs^ e )\n   {\n      if ( e-&gt;Label != nullptr )\n      {\n         if ( e-&gt;Label-&gt;Length &gt; 0 )\n         {\n            array&lt;Char&gt;^ temp0 = {&#39;@&#39;,&#39;.&#39;,&#39;,&#39;,&#39;!&#39;};\n            if ( e-&gt;Label-&gt;IndexOfAny( temp0 ) == -1 )\n            {\n               \n               // Stop editing without canceling the label change.\n               e-&gt;Node-&gt;EndEdit( false );\n            }\n            else\n            {\n               /* Cancel the label edit action, inform the user, and \n                  place the node in edit mode again. */\n               e-&gt;CancelEdit = true;\n               MessageBox::Show( String::Concat( &quot;Invalid tree node label.<br>&quot;,\n                  &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot; ),\n                  &quot;Node Label Edit&quot; );\n               e-&gt;Node-&gt;BeginEdit();\n            }\n         }\n         else\n         {\n            /* Cancel the label edit action, inform the user, and \n               place the node in edit mode again. */\n            e-&gt;CancelEdit = true;\n            MessageBox::Show( &quot;Invalid tree node label.<br>The label cannot be blank&quot;,\n               &quot;Node Label Edit&quot; );\n            e-&gt;Node-&gt;BeginEdit();\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"classic treenode.beginedit example#1\">/* Get the tree node under the mouse pointer and \n   save it in the mySelectedNode variable. */\nprivate void treeView1_MouseDown(object sender, \n  System.Windows.Forms.MouseEventArgs e)\n{\n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y);\n}\n\nprivate void menuItem1_Click(object sender, System.EventArgs e)\n{\n   if (mySelectedNode != null &amp;&amp; mySelectedNode.Parent != null)\n   {\n      treeView1.SelectedNode = mySelectedNode;\n      treeView1.LabelEdit = true;\n      if(!mySelectedNode.IsEditing)\n      {\n         mySelectedNode.BeginEdit();\n      }\n   }\n   else\n   {\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.<br>&quot; + \n         &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;);\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, \n         System.Windows.Forms.NodeLabelEditEventArgs e)\n{\n   if (e.Label != null)\n   {\n     if(e.Label.Length &gt; 0)\n     {\n        if (e.Label.IndexOfAny(new char[]{&#39;@&#39;, &#39;.&#39;, &#39;,&#39;, &#39;!&#39;}) == -1)\n        {\n           // Stop editing without canceling the label change.\n           e.Node.EndEdit(false);\n        }\n        else\n        {\n           /* Cancel the label edit action, inform the user, and \n              place the node in edit mode again. */\n           e.CancelEdit = true;\n           MessageBox.Show(&quot;Invalid tree node label.<br>&quot; + \n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, \n              &quot;Node Label Edit&quot;);\n           e.Node.BeginEdit();\n        }\n     }\n     else\n     {\n        /* Cancel the label edit action, inform the user, and \n           place the node in edit mode again. */\n        e.CancelEdit = true;\n        MessageBox.Show(&quot;Invalid tree node label.<br>The label cannot be blank&quot;, \n           &quot;Node Label Edit&quot;);\n        e.Node.BeginEdit();\n     }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"classic treenode.beginedit example#1\">&#39; Get the tree node under the mouse pointer and\n&#39; save it in the mySelectedNode variable. \nPrivate Sub treeView1_MouseDown(sender As Object, _\n  e As System.Windows.Forms.MouseEventArgs)\n        \n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y)\nEnd Sub    \n    \nPrivate Sub menuItem1_Click(sender As Object, e As System.EventArgs)\n   If Not (mySelectedNode Is Nothing) And _\n     Not (mySelectedNode.Parent Is Nothing) Then\n      treeView1.SelectedNode = mySelectedNode\n      treeView1.LabelEdit = True\n      If Not mySelectedNode.IsEditing Then\n         mySelectedNode.BeginEdit()\n      End If\n   Else\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.&quot; &amp; _\n        Microsoft.VisualBasic.ControlChars.Cr &amp; _\n        &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;)\n   End If\nEnd Sub    \n    \nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As System.Windows.Forms.NodeLabelEditEventArgs)\n   If Not (e.Label Is Nothing) Then\n      If e.Label.Length &gt; 0 Then\n         If e.Label.IndexOfAny(New Char() {&quot;@&quot;c, &quot;.&quot;c, &quot;,&quot;c, &quot;!&quot;c}) = -1 Then\n            &#39; Stop editing without canceling the label change.\n            e.Node.EndEdit(False)\n         Else\n            &#39; Cancel the label edit action, inform the user, and\n            &#39; place the node in edit mode again. \n            e.CancelEdit = True\n            MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n              Microsoft.VisualBasic.ControlChars.Cr &amp; _\n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, _\n              &quot;Node Label Edit&quot;)\n            e.Node.BeginEdit()\n         End If\n      Else\n         &#39; Cancel the label edit action, inform the user, and\n         &#39; place the node in edit mode again. \n         e.CancelEdit = True\n         MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n           Microsoft.VisualBasic.ControlChars.Cr &amp; _\n           &quot;The label cannot be blank&quot;, &quot;Node Label Edit&quot;)\n           e.Node.BeginEdit()\n      End If\n   End If\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_EnsureVisible\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_EnsureVisible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnsureVisible()</div>        \r\n          </div>\r\n    \r\n            <p>Ensures that the tree node is visible, expanding tree nodes and scrolling the tree view control as necessary.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EnsureVisible ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the EnsureVisible method is called, the tree is expanded and scrolled to ensure that the current tree node is visible in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. This method is useful if you are selecting a tree node in code based on certain criteria. By calling this method after you select the node, the user can see and interact with the selected node.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ItemHeight_\" data-linktype=\"relative-path\">ItemHeight</a> property is set to a value that is larger than the height of the tree view control, calling this method has unexpected results.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example brings the last child tree node of the last root tree node into view in the tree view when a button is clicked. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, and a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>. There should be enough tree nodes so that they are not all visible in the tree view control.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_EnsureVisible_4#2\">Private Sub button3_Click(sender As Object, _\n  e As System.EventArgs) Handles button3.Click\n   Dim lastNode as TreeNode\n   lastNode = treeView1.Nodes(treeView1.Nodes.Count - 1). _\n     Nodes(treeView1.Nodes(treeView1.Nodes.Count - 1).Nodes.Count - 1)\n\n   If Not lastNode.IsVisible Then\n      lastNode.EnsureVisible()\n      MessageBox.Show(lastNode.Text &amp; _\n        &quot; tree node is visible.&quot;)\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_EnsureVisible_4#2\">private void button3_Click(object sender, System.EventArgs e)\n{\n   TreeNode lastNode = treeView1.Nodes[treeView1.Nodes.Count - 1].\n     Nodes[treeView1.Nodes[treeView1.Nodes.Count - 1].Nodes.Count - 1];\n\n   if (!lastNode.IsVisible)\n   {\n      lastNode.EnsureVisible();\n      MessageBox.Show(lastNode.Text + &quot; tree node is visible.&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_EnsureVisible_4#2\">      void button3_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         TreeNode^ lastNode = treeView1-&gt;Nodes[ treeView1-&gt;Nodes-&gt;Count - 1 ]-&gt;Nodes[ treeView1-&gt;Nodes[ treeView1-&gt;Nodes-&gt;Count - 1 ]-&gt;Nodes-&gt;Count - 1 ];\n         if (  !lastNode-&gt;IsVisible )\n         {\n            lastNode-&gt;EnsureVisible();\n            MessageBox::Show( String::Concat( lastNode-&gt;Text, &quot; tree node is visible.&quot; ) );\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Expand\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Expand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Expand()</div>        \r\n          </div>\r\n    \r\n            <p>Expands the tree node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Expand ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Expand method expands the current <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> down to the next level of nodes.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The state of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is persisted. For example, if the next level of child nodes was not collapsed previously, when the Expand method is called, the child nodes appear in their previously expanded state.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example toggles the selected node when a button is clicked. If the selected node is collapsed, it is expanded, if it is expanded by calling the Expand method, it is collapsed by calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Collapse_\" data-linktype=\"relative-path\">Collapse</a> method. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control that has at least one <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> with at least one child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_EnsureVisible_4#1\">Private Sub button1_Click(sender As Object, _\n  e As System.EventArgs) Handles button1.Click\n   If treeView1.SelectedNode.IsExpanded Then\n      treeView1.SelectedNode.Collapse()\n      MessageBox.Show(treeView1.SelectedNode.Text &amp; _ \n        &quot; tree node collapsed.&quot;)\n   Else\n      treeView1.SelectedNode.Expand()\n      MessageBox.Show(treeView1.SelectedNode.Text &amp; _\n        &quot; tree node expanded.&quot;)\n   End If\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_EnsureVisible_4#1\">private void button1_Click(object sender, System.EventArgs e)\n{\n   if (treeView1.SelectedNode.IsExpanded)\n   {\n      treeView1.SelectedNode.Collapse();\n      MessageBox.Show(treeView1.SelectedNode.Text + \n        &quot; tree node collapsed.&quot;);\n   }\n   else\n   {\n      treeView1.SelectedNode.Expand();\n      MessageBox.Show(treeView1.SelectedNode.Text + \n        &quot; tree node expanded.&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_EnsureVisible_4#1\">      void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         if ( treeView1-&gt;SelectedNode-&gt;IsExpanded )\n         {\n            treeView1-&gt;SelectedNode-&gt;Collapse();\n            MessageBox::Show( String::Concat( treeView1-&gt;SelectedNode-&gt;Text, &quot; tree node collapsed.&quot; ) );\n         }\n         else\n         {\n            treeView1-&gt;SelectedNode-&gt;Expand();\n            MessageBox::Show( String::Concat( treeView1-&gt;SelectedNode-&gt;Text, &quot; tree node expanded.&quot; ) );\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_ExpandAll\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_ExpandAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExpandAll()</div>        \r\n          </div>\r\n    \r\n            <p>Expands all the child tree nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ExpandAll ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ExpandAll method expands all the child tree nodes assigned to the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The state of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is persisted. For example, if the next level of child nodes was not collapsed previously, when the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Expand_\" data-linktype=\"relative-path\">Expand</a> method is called, the child nodes appear in their previously expanded state.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example expands all the tree nodes in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control when a <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked, and collapses the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_FirstNode_\" data-linktype=\"relative-path\">FirstNode</a> when the <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is cleared. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a>, and a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that has several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects (preferably with three or more levels).  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeNode_ForeColor#1\">   void myCheckBox_CheckedChanged( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      \n      // If the check box is checked, expand all the tree nodes.\n      if ( myCheckBox-&gt;Checked == true )\n      {\n         myTreeView-&gt;ExpandAll();\n      }\n      else\n      {\n         \n         // If the check box is not cheked, collapse the first tree node.\n         myTreeView-&gt;Nodes[ 0 ]-&gt;FirstNode-&gt;Collapse();\n         MessageBox::Show( &quot;The first and last  node of CutomerList root node is collapsed&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_ForeColor#1\">private void myCheckBox_CheckedChanged(object sender, System.EventArgs e)\n{\n   // If the check box is checked, expand all the tree nodes.\n   if (myCheckBox.Checked == true)\n   {\n      myTreeView.ExpandAll();\n   }\n   else\n   {\n      // If the check box is not cheked, collapse the first tree node.\n      myTreeView.Nodes[0].FirstNode.Collapse();\n      MessageBox.Show(&quot;The first and last  node of CutomerList root node is collapsed&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_ForeColor#1\">Private Sub myCheckBox_CheckedChanged(ByVal sender As Object, _\n   ByVal e As System.EventArgs) Handles myCheckBox.CheckedChanged\n   &#39; If the check box is checked, expand all the tree nodes.\n   If myCheckBox.Checked = True Then\n      myTreeView.ExpandAll()\n   Else\n      &#39; If the check box is not cheked, collapse the first tree node.\n      myTreeView.Nodes(0).FirstNode.Collapse()\n      MessageBox.Show(&quot;The first and last node of CutomerList root node is collapsed&quot;)\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_FromHandle_System_Windows_Forms_TreeView_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_FromHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromHandle(TreeView,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the tree node with the specified handle and assigned to the specified tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.TreeNode FromHandle (System.Windows.Forms.TreeView tree, IntPtr handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tree</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> that contains the tree node.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handle of the tree node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the tree node assigned to the specified <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with the specified handle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a node is added to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection, the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control sends an NM_CUSTOMDRAW notification before the node handle is available. If you override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_WndProc_\" data-linktype=\"relative-path\">WndProc</a> method of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> to provide custom drawing in response to this notification, you should always check the return value of this method for <code>null</code> before you attempt to access the node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that was collapsed and creates a copy of it using its <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Handle_\" data-linktype=\"relative-path\">Handle</a> property. The original <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is removed from the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a>, and the copy is added to the collection. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on it. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control should have two or more root nodes, each having at least one child node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.TreeNode#3\">   private:\n      void treeView1_AfterCollapse( Object^ /*sender*/, TreeViewEventArgs^ e )\n      {\n         // Create a copy of the e.Node from its Handle.\n         TreeNode^ tn = TreeNode::FromHandle( e-&gt;Node-&gt;TreeView, e-&gt;Node-&gt;Handle );\n         tn-&gt;Text = String::Concat( tn-&gt;Text, &quot;Copy&quot; );\n\n         // Remove the e.Node so it can be replaced with tn.\n         e-&gt;Node-&gt;Remove();\n\n         // Add tn to the TreeNodeCollection.\n         treeView1-&gt;Nodes-&gt;Add( tn );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.TreeNode#3\">private void treeView1_AfterCollapse(object sender, TreeViewEventArgs e)\n{\n   // Create a copy of the e.Node from its Handle.\n   TreeNode tn = TreeNode.FromHandle(e.Node.TreeView, e.Node.Handle);\n   tn.Text += &quot;Copy&quot;;\n   // Remove the e.Node so it can be replaced with tn.\n   e.Node.Remove();\n   // Add tn to the TreeNodeCollection.\n   treeView1.Nodes.Add(tn);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.TreeNode#3\">Private Sub treeView1_AfterCollapse(sender As Object, _\n  e As TreeViewEventArgs) Handles treeView1.AfterCollapse\n   &#39; Create a copy of the e.Node from its Handle.\n   Dim tn As TreeNode = TreeNode.FromHandle(e.Node.TreeView, e.Node.Handle)\n   tn.Text += &quot;Copy&quot;\n   &#39; Remove the e.Node so it can be replaced with tn.\n   e.Node.Remove()\n   &#39; Add tn to the TreeNodeCollection.\n   treeView1.Nodes.Add(tn)\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_GetNodeCount_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_GetNodeCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNodeCount(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of child tree nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetNodeCount (bool includeSubTrees);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeSubTrees</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the resulting count includes all tree nodes indirectly rooted at this tree node; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of child tree nodes assigned to the <span class=\"xref\">stem.Windows.Forms.TreeNode.Nodes*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_PathSeparator_\" data-linktype=\"relative-path\">PathSeparator</a> property of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and displays the number of child tree nodes that are contained in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedNode_\" data-linktype=\"relative-path\">SelectedNode</a>. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, and a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that has several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects (preferably with three or more levels).  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeNode_ForeColor#2\">   void myButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      \n      // Set the tree view&#39;s PathSeparator property.\n      myTreeView-&gt;PathSeparator = &quot;.&quot;;\n      \n      // Get the count of the child tree nodes contained in the SelectedNode.\n      int myNodeCount = myTreeView-&gt;SelectedNode-&gt;GetNodeCount( true );\n      Decimal myChildPercentage = ((Decimal)myNodeCount / (Decimal)myTreeView-&gt;GetNodeCount( true )) * 100;\n      \n      // Display the tree node path and the number of child nodes it and the tree view have.\n      MessageBox::Show( String::Concat( &quot;The &#39;&quot;, myTreeView-&gt;SelectedNode-&gt;FullPath, &quot;&#39; node has &quot;, myNodeCount, &quot; child nodes.<br>That is &quot;, String::Format( &quot;{0:###.##}&quot;, myChildPercentage ), &quot;% of the total tree nodes in the tree view control.&quot; ) );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_ForeColor#2\">private void myButton_Click(object sender, System.EventArgs e)\n{\n   // Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;;\n\n   // Get the count of the child tree nodes contained in the SelectedNode.\n   int myNodeCount = myTreeView.SelectedNode.GetNodeCount(true);\n   decimal myChildPercentage = ((decimal)myNodeCount/\n     (decimal)myTreeView.GetNodeCount(true)) * 100;\n\n   // Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show(&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; \n     + myNodeCount.ToString() + &quot; child nodes.<br>That is &quot; \n     + string.Format(&quot;{0:###.##}&quot;, myChildPercentage) \n     + &quot;% of the total tree nodes in the tree view control.&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_ForeColor#2\">Private Sub myButton_Click(ByVal sender As Object, _\n  ByVal e As System.EventArgs) Handles myButton.Click\n   &#39; Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;\n\n   &#39; Get the count of the child tree nodes contained in the SelectedNode.\n   Dim myNodeCount As Integer = myTreeView.SelectedNode.GetNodeCount(True)\n   Dim myChildPercentage As Decimal = CDec(myNodeCount) / _\n      CDec(myTreeView.GetNodeCount(True)) * 100\n\n   &#39; Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show((&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; _\n      + myNodeCount.ToString() + &quot; child nodes.&quot; + Microsoft.VisualBasic.ControlChars.Lf _\n      + &quot;That is &quot; + String.Format(&quot;{0:###.##}&quot;, myChildPercentage) _\n      + &quot;% of the total tree nodes in the tree view control.&quot;))\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Remove\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove()</div>        \r\n          </div>\r\n    \r\n            <p>Removes the current tree node from the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the Remove method is called, the tree node, and any child tree nodes that are assigned to the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>, are removed from the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. The removed child nodes are removed from the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> but are still attached to this tree node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example removes a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the user right-clicks the mouse over it and toggles it from expanded to collapsed when the user clicks the mouse wheel over it. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on it. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> should have two or more root tree nodes, each having at least one child node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.TreeNode#1\">   private:\n      void treeView1_MouseDown( Object^ /*sender*/, MouseEventArgs^ e )\n      {\n         switch ( e-&gt;Button )\n         {\n            // Remove the TreeNode under the mouse cursor\n            // if the right mouse button was clicked.\n            case ::MouseButtons::Right:\n               treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y )-&gt;Remove();\n               break;\n\n            // Toggle the TreeNode under the mouse cursor\n            // if the middle mouse button (mouse wheel) was clicked.\n            case ::MouseButtons::Middle:\n               treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y )-&gt;Toggle();\n               break;\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.TreeNode#1\">private void treeView1_MouseDown(object sender, MouseEventArgs e)\n{\n   switch(e.Button)\n   {\n      // Remove the TreeNode under the mouse cursor \n      // if the right mouse button was clicked. \n      case MouseButtons.Right:\n         treeView1.GetNodeAt(e.X, e.Y).Remove();\n         break;\n      \n      // Toggle the TreeNode under the mouse cursor \n      // if the middle mouse button (mouse wheel) was clicked. \n      case MouseButtons.Middle:\n         treeView1.GetNodeAt(e.X, e.Y).Toggle();\n         break;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.TreeNode#1\">Private Sub treeView1_MouseDown(sender As Object, _\n  e As MouseEventArgs) Handles treeView1.MouseDown\n   Select Case e.Button\n      &#39; Remove the TreeNode under the mouse cursor \n      &#39; if the right mouse button was clicked. \n      Case MouseButtons.Right\n         treeView1.GetNodeAt(e.X, e.Y).Remove()\n      \n      &#39; Toggle the TreeNode under the mouse cursor \n      &#39; if the middle mouse button (mouse wheel) was clicked. \n      Case MouseButtons.Middle\n         treeView1.GetNodeAt(e.X, e.Y).Toggle()\n   End Select\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Serialize_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Serialize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Serialize(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Saves the state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Serialize (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>si</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that describes the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that indicates the state of the stream during serialization</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_Toggle\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_Toggle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Toggle()</div>        \r\n          </div>\r\n    \r\n            <p>Toggles the tree node to either the expanded or collapsed state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Toggle ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The tree node is toggled to the state opposite its current state, either expanded or collapsed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The state of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is persisted. For example, if the next level of child nodes was not collapsed previously, when the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Expand_\" data-linktype=\"relative-path\">Expand</a> method is called, the child nodes appear in their previously expanded state.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example removes a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the user right-clicks the mouse over it and toggles it from expanded to collapsed when the user clicks the mouse wheel over it. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on it. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> should have two or more root tree nodes, each having at least one child node.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.TreeNode#1\">   private:\n      void treeView1_MouseDown( Object^ /*sender*/, MouseEventArgs^ e )\n      {\n         switch ( e-&gt;Button )\n         {\n            // Remove the TreeNode under the mouse cursor\n            // if the right mouse button was clicked.\n            case ::MouseButtons::Right:\n               treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y )-&gt;Remove();\n               break;\n\n            // Toggle the TreeNode under the mouse cursor\n            // if the middle mouse button (mouse wheel) was clicked.\n            case ::MouseButtons::Middle:\n               treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y )-&gt;Toggle();\n               break;\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.TreeNode#1\">private void treeView1_MouseDown(object sender, MouseEventArgs e)\n{\n   switch(e.Button)\n   {\n      // Remove the TreeNode under the mouse cursor \n      // if the right mouse button was clicked. \n      case MouseButtons.Right:\n         treeView1.GetNodeAt(e.X, e.Y).Remove();\n         break;\n      \n      // Toggle the TreeNode under the mouse cursor \n      // if the middle mouse button (mouse wheel) was clicked. \n      case MouseButtons.Middle:\n         treeView1.GetNodeAt(e.X, e.Y).Toggle();\n         break;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.TreeNode#1\">Private Sub treeView1_MouseDown(sender As Object, _\n  e As MouseEventArgs) Handles treeView1.MouseDown\n   Select Case e.Button\n      &#39; Remove the TreeNode under the mouse cursor \n      &#39; if the right mouse button was clicked. \n      Case MouseButtons.Right\n         treeView1.GetNodeAt(e.X, e.Y).Remove()\n      \n      &#39; Toggle the TreeNode under the mouse cursor \n      &#39; if the middle mouse button (mouse wheel) was clicked. \n      Case MouseButtons.Middle\n         treeView1.GetNodeAt(e.X, e.Y).Toggle()\n   End Select\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_ToString\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the current object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeNode_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeNode_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a serialization information object with the data needed to serialize the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>si</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that contains the data to serialize the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that contains the destination information for this serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.TreeNode.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.TreeNode.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.BackColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.BeginEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Bounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Checked\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Clone\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Collapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ContextMenu\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ContextMenuStrip\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Deserialize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.EndEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.EnsureVisible\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Expand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ExpandAll\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.FirstNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ForeColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.FromHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.FullPath\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.GetNodeCount\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Handle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ImageIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ImageKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Index\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.IsEditing\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.IsExpanded\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.IsSelected\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.IsVisible\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.LastNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Level\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Name\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.NextNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.NextVisibleNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.NodeFont\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Nodes\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Parent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.PrevNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.PrevVisibleNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Remove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.SelectedImageIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.SelectedImageKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Serialize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.StateImageIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.StateImageKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ISerializable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Tag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Text\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.Toggle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ToolTipText\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.ToString\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNode.TreeView\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"71300e3c-05a8-04db-8ac9-912ac57f0e89\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\TreeNode.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a node of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.TreeNode\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.TreeNode.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.TreeNode.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.TreeNode","System.Windows.Forms.TreeNode..ctor","System.Windows.Forms.TreeNode.BackColor","System.Windows.Forms.TreeNode.BeginEdit","System.Windows.Forms.TreeNode.Bounds","System.Windows.Forms.TreeNode.Checked","System.Windows.Forms.TreeNode.Clone","System.Windows.Forms.TreeNode.Collapse","System.Windows.Forms.TreeNode.ContextMenu","System.Windows.Forms.TreeNode.ContextMenuStrip","System.Windows.Forms.TreeNode.Deserialize","System.Windows.Forms.TreeNode.EndEdit","System.Windows.Forms.TreeNode.EnsureVisible","System.Windows.Forms.TreeNode.Expand","System.Windows.Forms.TreeNode.ExpandAll","System.Windows.Forms.TreeNode.FirstNode","System.Windows.Forms.TreeNode.ForeColor","System.Windows.Forms.TreeNode.FromHandle","System.Windows.Forms.TreeNode.FullPath","System.Windows.Forms.TreeNode.GetNodeCount","System.Windows.Forms.TreeNode.Handle","System.Windows.Forms.TreeNode.ImageIndex","System.Windows.Forms.TreeNode.ImageKey","System.Windows.Forms.TreeNode.Index","System.Windows.Forms.TreeNode.IsEditing","System.Windows.Forms.TreeNode.IsExpanded","System.Windows.Forms.TreeNode.IsSelected","System.Windows.Forms.TreeNode.IsVisible","System.Windows.Forms.TreeNode.LastNode","System.Windows.Forms.TreeNode.Level","System.Windows.Forms.TreeNode.Name","System.Windows.Forms.TreeNode.NextNode","System.Windows.Forms.TreeNode.NextVisibleNode","System.Windows.Forms.TreeNode.NodeFont","System.Windows.Forms.TreeNode.Nodes","System.Windows.Forms.TreeNode.Parent","System.Windows.Forms.TreeNode.PrevNode","System.Windows.Forms.TreeNode.PrevVisibleNode","System.Windows.Forms.TreeNode.Remove","System.Windows.Forms.TreeNode.SelectedImageIndex","System.Windows.Forms.TreeNode.SelectedImageKey","System.Windows.Forms.TreeNode.Serialize","System.Windows.Forms.TreeNode.StateImageIndex","System.Windows.Forms.TreeNode.StateImageKey","System.Windows.Forms.TreeNode.ISerializable.GetObjectData","System.Windows.Forms.TreeNode.Tag","System.Windows.Forms.TreeNode.Text","System.Windows.Forms.TreeNode.Toggle","System.Windows.Forms.TreeNode.ToolTipText","System.Windows.Forms.TreeNode.ToString","System.Windows.Forms.TreeNode.TreeView"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.TreeNode","System::Windows::Forms::TreeNode","System.Windows.Forms.TreeNode.#ctor","System::Windows::Forms::TreeNode::#ctor","System.Windows.Forms.TreeNode.BackColor","System::Windows::Forms::TreeNode::BackColor","System.Windows.Forms.TreeNode.BeginEdit","System::Windows::Forms::TreeNode::BeginEdit","System.Windows.Forms.TreeNode.Bounds","System::Windows::Forms::TreeNode::Bounds","System.Windows.Forms.TreeNode.Checked","System::Windows::Forms::TreeNode::Checked","System.Windows.Forms.TreeNode.Clone","System::Windows::Forms::TreeNode::Clone","System.Windows.Forms.TreeNode.Collapse","System::Windows::Forms::TreeNode::Collapse","System.Windows.Forms.TreeNode.ContextMenu","System::Windows::Forms::TreeNode::ContextMenu","System.Windows.Forms.TreeNode.ContextMenuStrip","System::Windows::Forms::TreeNode::ContextMenuStrip","System.Windows.Forms.TreeNode.Deserialize","System::Windows::Forms::TreeNode::Deserialize","System.Windows.Forms.TreeNode.EndEdit","System::Windows::Forms::TreeNode::EndEdit","System.Windows.Forms.TreeNode.EnsureVisible","System::Windows::Forms::TreeNode::EnsureVisible","System.Windows.Forms.TreeNode.Expand","System::Windows::Forms::TreeNode::Expand","System.Windows.Forms.TreeNode.ExpandAll","System::Windows::Forms::TreeNode::ExpandAll","System.Windows.Forms.TreeNode.FirstNode","System::Windows::Forms::TreeNode::FirstNode","System.Windows.Forms.TreeNode.ForeColor","System::Windows::Forms::TreeNode::ForeColor","System.Windows.Forms.TreeNode.FromHandle","System::Windows::Forms::TreeNode::FromHandle","System.Windows.Forms.TreeNode.FullPath","System::Windows::Forms::TreeNode::FullPath","System.Windows.Forms.TreeNode.GetNodeCount","System::Windows::Forms::TreeNode::GetNodeCount","System.Windows.Forms.TreeNode.Handle","System::Windows::Forms::TreeNode::Handle","System.Windows.Forms.TreeNode.ImageIndex","System::Windows::Forms::TreeNode::ImageIndex","System.Windows.Forms.TreeNode.ImageKey","System::Windows::Forms::TreeNode::ImageKey","System.Windows.Forms.TreeNode.Index","System::Windows::Forms::TreeNode::Index","System.Windows.Forms.TreeNode.IsEditing","System::Windows::Forms::TreeNode::IsEditing","System.Windows.Forms.TreeNode.IsExpanded","System::Windows::Forms::TreeNode::IsExpanded","System.Windows.Forms.TreeNode.IsSelected","System::Windows::Forms::TreeNode::IsSelected","System.Windows.Forms.TreeNode.IsVisible","System::Windows::Forms::TreeNode::IsVisible","System.Windows.Forms.TreeNode.LastNode","System::Windows::Forms::TreeNode::LastNode","System.Windows.Forms.TreeNode.Level","System::Windows::Forms::TreeNode::Level","System.Windows.Forms.TreeNode.Name","System::Windows::Forms::TreeNode::Name","System.Windows.Forms.TreeNode.NextNode","System::Windows::Forms::TreeNode::NextNode","System.Windows.Forms.TreeNode.NextVisibleNode","System::Windows::Forms::TreeNode::NextVisibleNode","System.Windows.Forms.TreeNode.NodeFont","System::Windows::Forms::TreeNode::NodeFont","System.Windows.Forms.TreeNode.Nodes","System::Windows::Forms::TreeNode::Nodes","System.Windows.Forms.TreeNode.Parent","System::Windows::Forms::TreeNode::Parent","System.Windows.Forms.TreeNode.PrevNode","System::Windows::Forms::TreeNode::PrevNode","System.Windows.Forms.TreeNode.PrevVisibleNode","System::Windows::Forms::TreeNode::PrevVisibleNode","System.Windows.Forms.TreeNode.Remove","System::Windows::Forms::TreeNode::Remove","System.Windows.Forms.TreeNode.SelectedImageIndex","System::Windows::Forms::TreeNode::SelectedImageIndex","System.Windows.Forms.TreeNode.SelectedImageKey","System::Windows::Forms::TreeNode::SelectedImageKey","System.Windows.Forms.TreeNode.Serialize","System::Windows::Forms::TreeNode::Serialize","System.Windows.Forms.TreeNode.StateImageIndex","System::Windows::Forms::TreeNode::StateImageIndex","System.Windows.Forms.TreeNode.StateImageKey","System::Windows::Forms::TreeNode::StateImageKey","System.Windows.Forms.TreeNode.System#Runtime#Serialization#ISerializable#GetObjectData","System::Windows::Forms::TreeNode::System#Runtime#Serialization#ISerializable#GetObjectData","System.Windows.Forms.TreeNode.Tag","System::Windows::Forms::TreeNode::Tag","System.Windows.Forms.TreeNode.Text","System::Windows::Forms::TreeNode::Text","System.Windows.Forms.TreeNode.Toggle","System::Windows::Forms::TreeNode::Toggle","System.Windows.Forms.TreeNode.ToolTipText","System::Windows::Forms::TreeNode::ToolTipText","System.Windows.Forms.TreeNode.ToString","System::Windows::Forms::TreeNode::ToString","System.Windows.Forms.TreeNode.TreeView","System::Windows::Forms::TreeNode::TreeView"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"71300e3c-05a8-04db-8ac9-912ac57f0e89","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\TreeNode.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/TreeNode.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TreeNode class | Microsoft Docs","_op_ogTitle":"TreeNode class","description":"Represents a node of a .\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.TreeNode","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.treenode","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.treenode","fileRelativePath":"System.Windows.Forms.TreeNode.html"},"themesRelativePathToOutputRoot":"_themes/"}