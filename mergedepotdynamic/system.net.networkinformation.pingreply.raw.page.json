{"content":"    \r\n    <h1 id=\"System_Net_NetworkInformation_PingReply\">\r\n      <span class=\"lang-csharp\">PingReply</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about the status and data resulting from a <span class=\"xref\">stem.Net.NetworkInformation.Ping.Send*</span> or <span class=\"xref\">stem.Net.NetworkInformation.Ping.SendAsync*</span> operation.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class PingReply</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">PingReply</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <a class=\"xref\" href=\"system.net.networkinformation.ping\" data-linktype=\"relative-path\">Ping</a> class attempts to send an Internet Control Message Protocol (ICMP) echo request to a remote computer and receive information back from the computer via an ICMP echo reply message. The <a class=\"xref\" href=\"system.net.networkinformation.ping\" data-linktype=\"relative-path\">Ping</a> class uses instances of the PingReply class to return information about the operation, such as its status and the time taken to send the request and receive the reply.  </p>\n<p> The <a class=\"xref\" href=\"system.net.networkinformation.ping#System_Net_NetworkInformation_Ping_Send_\" data-linktype=\"relative-path\">Send</a> methods return instances of the PingReply class directly. The <a class=\"xref\" href=\"system.net.networkinformation.ping#System_Net_NetworkInformation_Ping_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods return a PingReply in the <a class=\"xref\" href=\"system.net.networkinformation.pingcompletedeventhandler\" data-linktype=\"relative-path\">PingCompletedEventHandler</a> method&#39;s <a class=\"xref\" href=\"system.net.networkinformation.pingcompletedeventargs\" data-linktype=\"relative-path\">PingCompletedEventArgs</a> parameter. The PingReply is accessed through the <a class=\"xref\" href=\"system.net.networkinformation.pingcompletedeventargs#System_Net_NetworkInformation_PingCompletedEventArgs_Reply_\" data-linktype=\"relative-path\">Reply</a> property.  </p>\n<p> If the value of <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Status_\" data-linktype=\"relative-path\">Status</a> is not <a class=\"xref\" href=\"system.net.networkinformation.ipstatus\" data-linktype=\"relative-path\">IPStatus</a>, you should not use the values returned by the <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_RoundtripTime_\" data-linktype=\"relative-path\">RoundtripTime</a>, <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Options_\" data-linktype=\"relative-path\">Options</a> or <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Buffer_\" data-linktype=\"relative-path\">Buffer</a> properties. The <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_RoundtripTime_\" data-linktype=\"relative-path\">RoundtripTime</a> property will return zero, the <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Buffer_\" data-linktype=\"relative-path\">Buffer</a> property will return an empty array, and the <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Options_\" data-linktype=\"relative-path\">Options</a> property will return <code>null</code>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PingReply_Address\" data-linktype=\"self-bookmark\">Address</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the address of the host that sends the Internet Control Message Protocol (ICMP) echo reply.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PingReply_Buffer\" data-linktype=\"self-bookmark\">Buffer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the buffer of data received in an Internet Control Message Protocol (ICMP) echo reply message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PingReply_Options\" data-linktype=\"self-bookmark\">Options</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the options used to transmit the reply to an Internet Control Message Protocol (ICMP) echo request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PingReply_RoundtripTime\" data-linktype=\"self-bookmark\">RoundtripTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of milliseconds taken to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PingReply_Status\" data-linktype=\"self-bookmark\">Status</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the status of an attempt to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PingReply_Address\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PingReply_Address_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Address</div>        \r\n          </div>\r\n    \r\n            <p>Gets the address of the host that sends the Internet Control Message Protocol (ICMP) echo reply.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.IPAddress Address { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> containing the destination for the ICMP echo message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Address returned by any of the <a class=\"xref\" href=\"system.net.networkinformation.ping#System_Net_NetworkInformation_Ping_Send_\" data-linktype=\"relative-path\">Send</a> overloads can originate from a malicious remote computer. Do not connect to the remote computer using this address. Use DNS to determine the IP address of the machine to which you want to connect.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends an ICMP echo request synchronously and displays the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclPingSampler#2\">        public static void SimplePing ()\n        {\n            Ping pingSender = new Ping ();\n            PingReply reply = pingSender.Send (&quot;www.contoso.com&quot;);\n\n            if (reply.Status == IPStatus.Success)\n            {\n                Console.WriteLine (&quot;Address: {0}&quot;, reply.Address.ToString ());\n                Console.WriteLine (&quot;RoundTrip time: {0}&quot;, reply.RoundtripTime);\n                Console.WriteLine (&quot;Time to live: {0}&quot;, reply.Options.Ttl);\n                Console.WriteLine (&quot;Don&#39;t fragment: {0}&quot;, reply.Options.DontFragment);\n                Console.WriteLine (&quot;Buffer size: {0}&quot;, reply.Buffer.Length);\n            }\n            else\n            {\n                Console.WriteLine (reply.Status);\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclPingSampler#2\">void SimplePing()\n{\n   Ping ^ pingSender = gcnew Ping;\n   PingReply ^ reply = pingSender-&gt;Send( &quot;www.contoso.com&quot; );\n   if ( reply-&gt;Status == IPStatus::Success )\n   {\n      Console::WriteLine( &quot;Address: {0}&quot;, reply-&gt;Address-&gt;ToString() );\n      Console::WriteLine( &quot;RoundTrip time: {0}&quot;, reply-&gt;RoundtripTime );\n      Console::WriteLine( &quot;Time to live: {0}&quot;, reply-&gt;Options-&gt;Ttl );\n      Console::WriteLine( &quot;Don&#39;t fragment: {0}&quot;, reply-&gt;Options-&gt;DontFragment );\n      Console::WriteLine( &quot;Buffer size: {0}&quot;, reply-&gt;Buffer-&gt;Length );\n   }\n   else\n   {\n      Console::WriteLine( reply-&gt;Status );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PingReply_Buffer\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PingReply_Buffer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Buffer</div>        \r\n          </div>\r\n    \r\n            <p>Gets the buffer of data received in an Internet Control Message Protocol (ICMP) echo reply message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] Buffer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array containing the data received in an ICMP echo reply message, or an empty array, if no reply was received.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The data buffer sent with the ICMP echo request is returned to the sender in the echo reply so the roundtrip travel time for a packet of a known size can be computed. The data buffer, combined with the <a class=\"xref\" href=\"system.net.networkinformation.pingoptions#System_Net_NetworkInformation_PingOptions_DontFragment_\" data-linktype=\"relative-path\">DontFragment</a> option, can be used to discover the maximum transmission unit for the network path between the source and destination computers. For additional information, see &quot;Traceroute&quot; in RFC 1574, Section 3.2, available at <a href=\"http://www.ietf.org\" data-linktype=\"external\">http://www.ietf.org</a>.  </p>\n<p> The default buffer used with <a class=\"xref\" href=\"system.net.networkinformation.ping#System_Net_NetworkInformation_Ping_Send_\" data-linktype=\"relative-path\">Send</a> and <a class=\"xref\" href=\"system.net.networkinformation.ping#System_Net_NetworkInformation_Ping_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> contains 32 bytes of data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends an ICMP echo request synchronously and displays the size of the buffer returned by this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclPingSampler#4\">        public static void ComplexPing ()\n        {\n            Ping pingSender = new Ping ();\n\n            // Create a buffer of 32 bytes of data to be transmitted.\n            string data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;\n            byte[] buffer = Encoding.ASCII.GetBytes (data);\n\n            // Wait 10 seconds for a reply.\n            int timeout = 10000;\n\n            // Set options for transmission:\n            // The data can go through 64 gateways or routers\n            // before it is destroyed, and the data packet\n            // cannot be fragmented.\n            PingOptions options = new PingOptions (64, true);\n\n            // Send the request.\n            PingReply reply = pingSender.Send (&quot;www.contoso.com&quot;, timeout, buffer, options);\n\n            if (reply.Status == IPStatus.Success)\n            {\n                Console.WriteLine (&quot;Address: {0}&quot;, reply.Address.ToString ());\n                Console.WriteLine (&quot;RoundTrip time: {0}&quot;, reply.RoundtripTime);\n                Console.WriteLine (&quot;Time to live: {0}&quot;, reply.Options.Ttl);\n                Console.WriteLine (&quot;Don&#39;t fragment: {0}&quot;, reply.Options.DontFragment);\n                Console.WriteLine (&quot;Buffer size: {0}&quot;, reply.Buffer.Length);\n            }\n            else\n            {\n                Console.WriteLine (reply.Status);\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclPingSampler#4\">void ComplexPing()\n{\n   Ping ^ pingSender = gcnew Ping;\n   \n   // Create a buffer of 32 bytes of data to be transmitted.\n   String^ data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;\n   array&lt;Byte&gt;^buffer = Encoding::ASCII-&gt;GetBytes( data );\n   \n   // Wait 10 seconds for a reply.\n   int timeout = 10000;\n   \n   // Set options for transmission:\n   // The data can go through 64 gateways or routers\n   // before it is destroyed, and the data packet\n   // cannot be fragmented.\n   PingOptions ^ options = gcnew PingOptions( 64,true );\n   \n   // Send the request.\n   PingReply ^ reply = pingSender-&gt;Send( &quot;www.contoso.com&quot;, timeout, buffer, options );\n   if ( reply-&gt;Status == IPStatus::Success )\n   {\n      Console::WriteLine( &quot;Address: {0}&quot;, reply-&gt;Address-&gt;ToString() );\n      Console::WriteLine( &quot;RoundTrip time: {0}&quot;, reply-&gt;RoundtripTime );\n      Console::WriteLine( &quot;Time to live: {0}&quot;, reply-&gt;Options-&gt;Ttl );\n      Console::WriteLine( &quot;Don&#39;t fragment: {0}&quot;, reply-&gt;Options-&gt;DontFragment );\n      Console::WriteLine( &quot;Buffer size: {0}&quot;, reply-&gt;Buffer-&gt;Length );\n   }\n   else\n   {\n      Console::WriteLine( reply-&gt;Status );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PingReply_Options\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PingReply_Options_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Options</div>        \r\n          </div>\r\n    \r\n            <p>Gets the options used to transmit the reply to an Internet Control Message Protocol (ICMP) echo request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.NetworkInformation.PingOptions Options { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.pingoptions\" data-linktype=\"relative-path\">PingOptions</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.networkinformation.pingoptions\" data-linktype=\"relative-path\">PingOptions</a> object that contains the Time to Live (TTL) and the fragmentation directive used for transmitting the reply if <span class=\"xref\">stem.Net.NetworkInformation.PingReply.Status*</span> is <a class=\"xref\" href=\"system.net.networkinformation.ipstatus\" data-linktype=\"relative-path\">IPStatus</a>; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TTL defines the number of times nodes can forward a packet as it travels between its source and destination. If the number of forwards, also known as hops, exceeds the value specified for the TTL, the packet is deemed undeliverable and is discarded.  </p>\n<p> The <a class=\"xref\" href=\"system.net.networkinformation.pingoptions#System_Net_NetworkInformation_PingOptions_DontFragment_\" data-linktype=\"relative-path\">DontFragment</a> value specified in the ICMP echo request controls packet fragmentation. If <a class=\"xref\" href=\"system.net.networkinformation.pingoptions#System_Net_NetworkInformation_PingOptions_DontFragment_\" data-linktype=\"relative-path\">DontFragment</a> is <code>true</code> and the packet size exceeds the maximum transmission unit of the network path taken by the packet, the packet is discarded and the <a class=\"xref\" href=\"system.net.networkinformation.ipstatus\" data-linktype=\"relative-path\">IPStatus</a> error is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends an ICMP echo request synchronously and displays the values stored in the <a class=\"xref\" href=\"system.net.networkinformation.pingoptions\" data-linktype=\"relative-path\">PingOptions</a> object returned by this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclPingSampler#3\">        public static void LocalPing ()\n        {\n            // Ping&#39;s the local machine.\n            Ping pingSender = new Ping ();\n            IPAddress address = IPAddress.Loopback;\n            PingReply reply = pingSender.Send (address);\n\n            if (reply.Status == IPStatus.Success)\n            {\n                Console.WriteLine (&quot;Address: {0}&quot;, reply.Address.ToString ());\n                Console.WriteLine (&quot;RoundTrip time: {0}&quot;, reply.RoundtripTime);\n                Console.WriteLine (&quot;Time to live: {0}&quot;, reply.Options.Ttl);\n                Console.WriteLine (&quot;Don&#39;t fragment: {0}&quot;, reply.Options.DontFragment);\n                Console.WriteLine (&quot;Buffer size: {0}&quot;, reply.Buffer.Length);\n            }\n            else\n            {\n                Console.WriteLine (reply.Status);\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclPingSampler#3\">void LocalPing()\n{\n   \n   // Ping&#39;s the local machine.\n   Ping ^ pingSender = gcnew Ping;\n   IPAddress^ address = IPAddress::Loopback;\n   PingReply ^ reply = pingSender-&gt;Send( address );\n   if ( reply-&gt;Status == IPStatus::Success )\n   {\n      Console::WriteLine( &quot;Address: {0}&quot;, reply-&gt;Address-&gt;ToString() );\n      Console::WriteLine( &quot;RoundTrip time: {0}&quot;, reply-&gt;RoundtripTime );\n      Console::WriteLine( &quot;Time to live: {0}&quot;, reply-&gt;Options-&gt;Ttl );\n      Console::WriteLine( &quot;Don&#39;t fragment: {0}&quot;, reply-&gt;Options-&gt;DontFragment );\n      Console::WriteLine( &quot;Buffer size: {0}&quot;, reply-&gt;Buffer-&gt;Length );\n   }\n   else\n   {\n      Console::WriteLine( reply-&gt;Status );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PingReply_RoundtripTime\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PingReply_RoundtripTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RoundtripTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of milliseconds taken to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long RoundtripTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that specifies the round trip time, in milliseconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the Echo request fails, the RoundtripTime time is reported as 0, which is also a valid value when the request succeeds. You must check the <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Status_\" data-linktype=\"relative-path\">Status</a> to determine whether the value returned by this property should be ignored.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends an ICMP echo request synchronously and displays the size of the buffer returned by this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclPingSampler#4\">        public static void ComplexPing ()\n        {\n            Ping pingSender = new Ping ();\n\n            // Create a buffer of 32 bytes of data to be transmitted.\n            string data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;\n            byte[] buffer = Encoding.ASCII.GetBytes (data);\n\n            // Wait 10 seconds for a reply.\n            int timeout = 10000;\n\n            // Set options for transmission:\n            // The data can go through 64 gateways or routers\n            // before it is destroyed, and the data packet\n            // cannot be fragmented.\n            PingOptions options = new PingOptions (64, true);\n\n            // Send the request.\n            PingReply reply = pingSender.Send (&quot;www.contoso.com&quot;, timeout, buffer, options);\n\n            if (reply.Status == IPStatus.Success)\n            {\n                Console.WriteLine (&quot;Address: {0}&quot;, reply.Address.ToString ());\n                Console.WriteLine (&quot;RoundTrip time: {0}&quot;, reply.RoundtripTime);\n                Console.WriteLine (&quot;Time to live: {0}&quot;, reply.Options.Ttl);\n                Console.WriteLine (&quot;Don&#39;t fragment: {0}&quot;, reply.Options.DontFragment);\n                Console.WriteLine (&quot;Buffer size: {0}&quot;, reply.Buffer.Length);\n            }\n            else\n            {\n                Console.WriteLine (reply.Status);\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclPingSampler#4\">void ComplexPing()\n{\n   Ping ^ pingSender = gcnew Ping;\n   \n   // Create a buffer of 32 bytes of data to be transmitted.\n   String^ data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;\n   array&lt;Byte&gt;^buffer = Encoding::ASCII-&gt;GetBytes( data );\n   \n   // Wait 10 seconds for a reply.\n   int timeout = 10000;\n   \n   // Set options for transmission:\n   // The data can go through 64 gateways or routers\n   // before it is destroyed, and the data packet\n   // cannot be fragmented.\n   PingOptions ^ options = gcnew PingOptions( 64,true );\n   \n   // Send the request.\n   PingReply ^ reply = pingSender-&gt;Send( &quot;www.contoso.com&quot;, timeout, buffer, options );\n   if ( reply-&gt;Status == IPStatus::Success )\n   {\n      Console::WriteLine( &quot;Address: {0}&quot;, reply-&gt;Address-&gt;ToString() );\n      Console::WriteLine( &quot;RoundTrip time: {0}&quot;, reply-&gt;RoundtripTime );\n      Console::WriteLine( &quot;Time to live: {0}&quot;, reply-&gt;Options-&gt;Ttl );\n      Console::WriteLine( &quot;Don&#39;t fragment: {0}&quot;, reply-&gt;Options-&gt;DontFragment );\n      Console::WriteLine( &quot;Buffer size: {0}&quot;, reply-&gt;Buffer-&gt;Length );\n   }\n   else\n   {\n      Console::WriteLine( reply-&gt;Status );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PingReply_Status\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PingReply_Status_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Status</div>        \r\n          </div>\r\n    \r\n            <p>Gets the status of an attempt to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.NetworkInformation.IPStatus Status { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipstatus\" data-linktype=\"relative-path\">IPStatus</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.ipstatus\" data-linktype=\"relative-path\">IPStatus</a> value indicating the result of the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of Status is not <a class=\"xref\" href=\"system.net.networkinformation.ipstatus\" data-linktype=\"relative-path\">IPStatus</a>, you should not use the values returned by the <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_RoundtripTime_\" data-linktype=\"relative-path\">RoundtripTime</a>, <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Options_\" data-linktype=\"relative-path\">Options</a> or <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Buffer_\" data-linktype=\"relative-path\">Buffer</a> properties. The <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_RoundtripTime_\" data-linktype=\"relative-path\">RoundtripTime</a> and <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Buffer_\" data-linktype=\"relative-path\">Buffer</a> properties will return zero, and the <a class=\"xref\" href=\"system.net.networkinformation.pingreply#System_Net_NetworkInformation_PingReply_Options_\" data-linktype=\"relative-path\">Options</a> property will return <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using <a class=\"xref\" href=\"system.net.networkinformation.ping\" data-linktype=\"relative-path\">Ping</a> class to send an ICMP echo request synchronously and display the response.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLPingSync#1\">using System;\nusing System.Net;\nusing System.Net.NetworkInformation;\nusing System.Text;\n\nnamespace Examples.System.Net.NetworkInformation.PingTest\n{\n    public class PingExample\n    {\n        // args[0] can be an IPaddress or host name.\n        public static void Main (string[] args)\n        {\n            Ping pingSender = new Ping ();\n            PingOptions options = new PingOptions ();\n\n            // Use the default Ttl value which is 128,\n            // but change the fragmentation behavior.\n            options.DontFragment = true;\n\n            // Create a buffer of 32 bytes of data to be transmitted.\n            string data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;\n            byte[] buffer = Encoding.ASCII.GetBytes (data);\n            int timeout = 120;\n            PingReply reply = pingSender.Send (args[0], timeout, buffer, options);\n            if (reply.Status == IPStatus.Success)\n            {\n                Console.WriteLine (&quot;Address: {0}&quot;, reply.Address.ToString ());\n                Console.WriteLine (&quot;RoundTrip time: {0}&quot;, reply.RoundtripTime);\n                Console.WriteLine (&quot;Time to live: {0}&quot;, reply.Options.Ttl);\n                Console.WriteLine (&quot;Don&#39;t fragment: {0}&quot;, reply.Options.DontFragment);\n                Console.WriteLine (&quot;Buffer size: {0}&quot;, reply.Buffer.Length);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLPingSync#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::NetworkInformation;\nusing namespace System::Text;\n\n// args[1] can be an IPaddress or host name.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   \n   Ping ^ pingSender = gcnew Ping;\n   PingOptions ^ options = gcnew PingOptions;\n   \n   // Use the default Ttl value which is 128,\n   // but change the fragmentation behavior.\n   options-&gt;DontFragment = true;\n   \n   // Create a buffer of 32 bytes of data to be transmitted.\n   String^ data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;\n   array&lt;Byte&gt;^buffer = Encoding::ASCII-&gt;GetBytes( data );\n   int timeout = 120;\n   PingReply ^ reply = pingSender-&gt;Send( args[ 1 ], timeout, buffer, options );\n   \n   if ( reply-&gt;Status == IPStatus::Success )\n   {\n      Console::WriteLine( &quot;Address: {0}&quot;, reply-&gt;Address-&gt;ToString() );\n      Console::WriteLine( &quot;RoundTrip time: {0}&quot;, reply-&gt;RoundtripTime );\n      Console::WriteLine( &quot;Time to live: {0}&quot;, reply-&gt;Options-&gt;Ttl );\n      Console::WriteLine( &quot;Don&#39;t fragment: {0}&quot;, reply-&gt;Options-&gt;DontFragment );\n      Console::WriteLine( &quot;Buffer size: {0}&quot;, reply-&gt;Buffer-&gt;Length );\n   }\n\n   \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.PingReply.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.PingReply.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingReply\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingReply.Address\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingReply.Buffer\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingReply.Options\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingReply.RoundtripTime\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingReply.Status\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ce5e22d1-0c74-8754-0c6f-f13bf85ee655\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about the status and data resulting from a  or  operation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.NetworkInformation/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.PingReply\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.PingReply.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.PingReply.yml","open_to_public_contributors":true,"api_name":["System.Net.NetworkInformation.PingReply","System.Net.NetworkInformation.PingReply.Address","System.Net.NetworkInformation.PingReply.Buffer","System.Net.NetworkInformation.PingReply.Options","System.Net.NetworkInformation.PingReply.RoundtripTime","System.Net.NetworkInformation.PingReply.Status"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.PingReply","System::Net::NetworkInformation::PingReply","System.Net.NetworkInformation.PingReply.Address","System::Net::NetworkInformation::PingReply::Address","System.Net.NetworkInformation.PingReply.Buffer","System::Net::NetworkInformation::PingReply::Buffer","System.Net.NetworkInformation.PingReply.Options","System::Net::NetworkInformation::PingReply::Options","System.Net.NetworkInformation.PingReply.RoundtripTime","System::Net::NetworkInformation::PingReply::RoundtripTime","System.Net.NetworkInformation.PingReply.Status","System::Net::NetworkInformation::PingReply::Status"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ce5e22d1-0c74-8754-0c6f-f13bf85ee655","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.NetworkInformation/PingReply.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PingReply class | Microsoft Docs","_op_ogTitle":"PingReply class","description":"Provides information about the status and data resulting from a  or  operation.\n","toc_asset_id":"_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.PingReply","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.pingreply","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.pingreply","fileRelativePath":"System.Net.NetworkInformation.PingReply.html"},"themesRelativePathToOutputRoot":"_themes/"}