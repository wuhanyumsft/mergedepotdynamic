{"content":"    \r\n    <h1 id=\"System_Numerics_Complex\">\r\n      <span class=\"lang-csharp\">Complex</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a complex number.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public struct Complex : IEquatable&lt;System.Numerics.Complex&gt;, IFormattable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Complex</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A complex number is a number that comprises a real number part and an imaginary number part. A complex number z is usually written in the form z = x + yi, where <em>x</em> and <em>y</em> are real numbers, and <em>i</em> is the imaginary unit that has the property <em>i</em><sup>2</sup> = -1. The real part of the complex number is represented by <em>x</em>, and the imaginary part of the complex number is represented by <em>y</em>.  </p>\n<p> The Complex type uses the Cartesian coordinate system (real, imaginary) when instantiating and manipulating complex numbers. A complex number can be represented as a point in a two-dimensional coordinate system, which is known as the complex plane. The real part of the complex number is positioned on the x-axis (the horizontal axis), and the imaginary part is positioned on the y-axis (the vertical axis).  </p>\n<p> Any point in the complex plane can also be expressed based on its absolute value, by using the polar coordinate system., In polar coordinates, a point is characterized by two numbers:  </p>\n<ul>\n<li><p>Its magnitude, which is the distance of the point from the origin (that is, 0,0, or the point at which the x-axis and the y-axis intersect).  </p>\n</li>\n<li><p>Its phase, which is the angle between the real axis and the line drawn from the origin to the point.  </p>\n</li>\n</ul>\n<h2 id=\"instantiating-a-complex-number\">Instantiating a Complex Number</h2>\n<p> You can assign a value to a complex number in one of the following ways:  </p>\n<ul>\n<li><p>By passing two <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to its constructor. The first value represents the real part of the complex number, and the second value represents its imaginary part. These values represent the position of the complex number in the two-dimensional Cartesian coordinate system.  </p>\n</li>\n<li><p>By calling the static (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_FromPolarCoordinates_\" data-linktype=\"relative-path\">FromPolarCoordinates</a> method to create a complex number from its polar coordinates.  </p>\n</li>\n<li><p>By assigning a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, or <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value to a Complex object. The value becomes the real part of the complex number, and its imaginary part equals 0.  </p>\n</li>\n<li><p>By casting (in C#) or converting (in Visual Basic) a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value to a Complex object. The value becomes the real part of the complex number, and its imaginary part equals 0.  </p>\n</li>\n<li><p>By assigning the complex number that is returned by a method or operator to a Complex object. For example, <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Add_\" data-linktype=\"relative-path\">Add</a> is a static method that returns a complex number that is the sum of two complex numbers, and the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_op_Addition_\" data-linktype=\"relative-path\">op_Addition</a> operator adds two complex numbers and returns the result.  </p>\n<p>The following example demonstrates each of these five ways of assigning a value to a complex number.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Class#2\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a complex number by calling its class constructor.\n      Complex c1 = new Complex(12, 6);\n      Console.WriteLine(c1);\n      \n      // Assign a Double to a complex number.\n      Complex c2 = 3.14;\n      Console.WriteLine(c2);\n      \n      // Cast a Decimal to a complex number.\n      Complex c3 = (Complex) 12.3m;\n      Console.WriteLine(c3);\n      \n      // Assign the return value of a method to a Complex variable.\n      Complex c4 = Complex.Pow(Complex.One, -1);\n      Console.WriteLine(c4);\n      \n      // Assign the value returned by an operator to a Complex variable.\n      Complex c5 = Complex.One + Complex.One;\n      Console.WriteLine(c5);\n\n      // Instantiate a complex number from its polar coordinates.\n      Complex c6 = Complex.FromPolarCoordinates(10, .524);\n      Console.WriteLine(c6);\n   }\n}\n// The example displays the following output:\n//       (12, 6)\n//       (3.14, 0)\n//       (12.3, 0)\n//       (1, 0)\n//       (2, 0)\n//       (8.65824721882145, 5.00347430269914)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Class#2\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      &#39; Create a complex number by calling its class constructor.\n      Dim c1 As New Complex(12, 6)\n      Console.WriteLine(c1)\n      \n      &#39; Assign a Double to a complex number.\n      Dim c2 As Complex = 3.14\n      Console.WriteLine(c2)\n      \n      &#39; Cast a Decimal to a complex number.\n      Dim c3 As Complex = CType(12.3d, Complex)\n      Console.WriteLine(c3)\n      \n      &#39; Assign the return value of a method to a Complex variable.\n      Dim c4 As Complex = Complex.Pow(Complex.One, -1)\n      Console.WriteLine(c4)\n      \n      &#39; Assign the value returned by an operator to a Complex variable.\n      Dim c5 As Complex = Complex.One + Complex.One\n      Console.WriteLine(c5)\n\n      &#39; Instantiate a complex number from its polar coordinates.\n      Dim c6 As Complex = Complex.FromPolarCoordinates(10, .524)\n      Console.WriteLine(c6)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (12, 6)\n&#39;       (3.14, 0)\n&#39;       (12.3000001907349, 0)\n&#39;       (1, 0)\n&#39;       (2, 0)\n&#39;       (8.65824721882145, 5.00347430269914)\n</code></pre></li>\n</ul>\n<h2 id=\"operations-with-complex-numbers\">Operations with Complex Numbers</h2>\n<p> The Complex structure in the .NET Framework includes members that provide the following functionality:  </p>\n<ul>\n<li><p>Methods to compare two complex numbers to determine whether they are equal.  </p>\n</li>\n<li><p>Operators to perform arithmetic operations on complex numbers. Complex operators enable you to perform addition, subtraction, multiplication, division, and unary negation with complex numbers.  </p>\n</li>\n<li><p>Methods to perform other numerical operations on complex numbers. In addition to the four basic arithmetic operations, you can raise a complex number to a specified power, find the square root of a complex number, and get the absolute value of a complex number.  </p>\n</li>\n<li><p>Methods to perform trigonometric operations on complex numbers. For example, you can calculate the tangent of an angle represented by a complex number.  </p>\n<p>Note that, because the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Real_\" data-linktype=\"relative-path\">Real</a> and  <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Imaginary_\" data-linktype=\"relative-path\">Imaginary</a> properties are read-only, you cannot modify the value of an existing Complex object.  All methods that perform an operation on a Complex number, if their return value is of type Complex, return a new Complex number.  </p>\n</li>\n</ul>\n<h2 id=\"precision-and-complex-numbers\">Precision and Complex Numbers</h2>\n<p> The real and imaginary parts of a complex number are represented by two double-precision floating-point values. This means that Complex values, like double-precision floating-point values, can lose precision as a result of numerical operations. This means that strict comparisons for equality of two Complex values may fail, even if the difference between the two values is due to a loss of precision. For more information, see <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<p> For example, performing exponentiation on the logarithm of a number should return the original number. However, in some cases, the loss of precision of floating-point values can cause slight differences between the two values, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Class#5\">      Complex value = new Complex(Double.MinValue/2, Double.MinValue/2);\n      Complex value2 = Complex.Exp(Complex.Log(value));\n      Console.WriteLine(&quot;{0} \\n{1} \\nEqual: {2}&quot;, value, value2, \n                                                  value == value2);\n      // The example displays the following output:\n      //    (-8.98846567431158E+307, -8.98846567431158E+307)\n      //    (-8.98846567431161E+307, -8.98846567431161E+307)\n      //    Equal: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Class#5\">      Dim value As New Complex(Double.MinValue/2, Double.MinValue/2)\n      Dim value2 As Complex = Complex.Exp(Complex.Log(value))\n      Console.WriteLine(&quot;{0} {3}{1} {3}Equal: {2}&quot;, value, value2, \n                                                    value = value2,\n                                                    vbCrLf)\n      &#39; The example displays the following output:\n      &#39;    (-8.98846567431158E+307, -8.98846567431158E+307)\n      &#39;    (-8.98846567431161E+307, -8.98846567431161E+307)\n      &#39;    Equal: False\n</code></pre><p> Similarly, the following example, which calculates the square root of a Complex number, produces slightly different results on the 32-bit and IA64 versions of the .NET Framework.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Class#6\">      Complex minusOne = new Complex(-1, 0);\n      Console.WriteLine(Complex.Sqrt(minusOne));\n      // The example displays the following output:\n      //    (6.12303176911189E-17, 1) on 32-bit systems.\n      //    (6.12323399573677E-17,1) on IA64 systems.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Class#6\">      Dim minusOne As New Complex(-1, 0)\n      Console.WriteLine(Complex.Sqrt(minusOne))\n      &#39; The example displays the following output:\n      &#39;    (6.12303176911189E-17, 1) on 32-bit systems.\n      &#39;    (6.12323399573677E-17,1) on IA64 systems.\n</code></pre><h2 id=\"complex-numbers-infinity-and-nan\">Complex Numbers, Infinity, and NaN</h2>\n<p> The real and imaginary parts of a complex number are represented by <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. In addition to ranging from <a class=\"xref\" href=\"system.double#System_Double_MinValue\" data-linktype=\"relative-path\">System.Double.MinValue</a> to <a class=\"xref\" href=\"system.double#System_Double_MaxValue\" data-linktype=\"relative-path\">System.Double.MaxValue</a>, the real or imaginary part of a complex number can have a value of <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>, <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>, or <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>. <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>, <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>, and <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> all propagate in any arithmetic or trigonometric operation.  </p>\n<p> In the following example, division by <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Zero\" data-linktype=\"relative-path\">Zero</a> produces a complex number whose real and imaginary parts are both <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>. As a result, performing multiplication with this value also produces a complex number whose real and imaginary parts are <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>. Similarly, performing a multiplication that overflows the range of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> type produces a complex number whose real part is <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> and whose imaginary part is <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>. Subsequently performing division with this complex number returns a complex number whose real part is <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> and whose imaginary part is <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Class#3\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex c1 = new Complex(Double.MaxValue / 2, Double.MaxValue /2);\n\n      Complex c2 = c1 / Complex.Zero;\n      Console.WriteLine(c2.ToString());\n      c2 = c2 * new Complex(1.5, 1.5);\n      Console.WriteLine(c2.ToString());\n      Console.WriteLine();\n      \n      Complex c3 = c1 * new Complex(2.5, 3.5);\n      Console.WriteLine(c3.ToString());\n      c3 = c3 + new Complex(Double.MinValue / 2, Double.MaxValue / 2); \n      Console.WriteLine(c3);\n   }\n}\n// The example displays the following output:\n//       (NaN, NaN)\n//       (NaN, NaN)\n//       (NaN, Infinity)\n//       (NaN, Infinity)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Class#3\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c1 As Complex = New Complex(Double.MaxValue / 2, Double.MaxValue /2)\n\n      Dim c2 As Complex = c1 / Complex.Zero\n      Console.WriteLine(c2.ToString())\n      c2 = c2 * New Complex(1.5, 1.5)\n      Console.WriteLine(c2.ToString())\n      Console.WriteLine()\n      \n      Dim c3 As Complex = c1 * New Complex(2.5, 3.5)\n      Console.WriteLine(c3.ToString())\n      c3 = c3 + New Complex(Double.MinValue / 2, Double.MaxValue / 2) \n      Console.WriteLine(c3)     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (NaN, NaN)\n&#39;       (NaN, NaN)\n&#39;\n&#39;       (NaN, Infinity)\n&#39;       (NaN, Infinity)\n</code></pre><p> Mathematical operations with complex numbers that are invalid or that overflow the range of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type do not throw an exception. Instead, they return a <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>, <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>, or <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> under the following conditions:  </p>\n<ul>\n<li><p>The division of a positive number by zero returns <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>.  </p>\n</li>\n<li><p>Any operation that overflows the upper bound of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type returns <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>.  </p>\n</li>\n<li><p>The division of a negative number by zero returns <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n</li>\n<li><p>Any operation that overflows the lower bound of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type returns <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n</li>\n<li><p>The division of a zero by zero returns <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>.  </p>\n</li>\n<li><p>Any operation that is performed on operands whose values are <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>, <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>, or <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> returns <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>, <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>, or <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>, depending on the specific operation.  </p>\n<p>Note that this applies to any intermediate calculations performed by a method. For example, the multiplication of <code>new Complex(9e308, 9e308) and new Complex(2.5, 3.5)</code> uses the formula (ac - bd) + (ad + bc)i. The calculation of the real component that results from the multiplication evaluates the expression 9e308 * 2.5 - 9e308 * 3.5. Each intermediate multiplication in this expression returns <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>, and the attempt to subtract <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> from <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> returns <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>.  </p>\n</li>\n</ul>\n<h2 id=\"formatting-a-complex-number\">Formatting a Complex Number</h2>\n<p> By default, the string representation of a complex number takes the form <code>(</code><em>real</em><code>,</code> <em>imaginary</em><code>)</code>, where <em>real</em> and <em>imaginary</em> are the string representations of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that form the complex number&#39;s real and imaginary components. Some overloads of the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_ToString_\" data-linktype=\"relative-path\">ToString</a> method allow customization of the string representations of these <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to reflect the formatting conventions of a particular culture or to appear in a particular format defined by a standard or custom numeric format string. (For more information, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.)  </p>\n<p> One of the more common ways of expressing the string representation of a complex number takes the form a + bi, where a is the complex number&#39;s real component, and b is the complex number&#39;s imaginary component. In electrical engineering, a complex number is most commonly expressed as a + bj. You can return the string representation of a complex number in either of these two forms. To do this, define a custom format provider by implementing the <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> and <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interfaces, and then call the [String.Format(IFormatProvider,â€‚String,â€‚Object&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; method.  </p>\n<p> The following example defines a <code>ComplexFormatter</code> class that represents a complex number as a string in the form of either a + bi or a + bj.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Class#1\">using System;\nusing System.Numerics;\n\npublic class ComplexFormatter :IFormatProvider, ICustomFormatter\n{\n   public object GetFormat(Type formatType) \n   {   \n      if (formatType == typeof(ICustomFormatter))\n         return this;\n      else\n         return null;\n   }\n   \n   public string Format(string format, object arg, \n                        IFormatProvider provider)\n   {\n      if (arg is Complex)\n      {\n         Complex c1 = (Complex) arg; \n         // Check if the format string has a precision specifier.\n         int precision;\n         string fmtString = String.Empty;\n         if (format.Length &gt; 1) {\n            try {\n               precision = Int32.Parse(format.Substring(1));\n            }\n            catch (FormatException) {\n               precision = 0;\n            }\n            fmtString = &quot;N&quot; + precision.ToString();\n         }\n         if (format.Substring(0, 1).Equals(&quot;I&quot;, StringComparison.OrdinalIgnoreCase))\n            return c1.Real.ToString(fmtString) + &quot; + &quot; + c1.Imaginary.ToString(fmtString) + &quot;i&quot;;\n         else if (format.Substring(0, 1).Equals(&quot;J&quot;, StringComparison.OrdinalIgnoreCase))\n            return c1.Real.ToString(fmtString) + &quot; + &quot; + c1.Imaginary.ToString(fmtString) + &quot;j&quot;;\n         else\n            return c1.ToString(format, provider);\n      }\n      else\n      {\n         if (arg is IFormattable)\n            return ((IFormattable) arg).ToString(format, provider);\n         else if (arg != null) \n            return arg.ToString();\n         else\n            return String.Empty;\n      }                        \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Class#1\">Imports System.Numerics\n\nPublic Class ComplexFormatter \n             Implements IFormatProvider, ICustomFormatter\n   \n   Public Function GetFormat(formatType As Type) As Object _\n                   Implements IFormatProvider.GetFormat\n      If formatType Is GetType(ICustomFormatter) Then\n         Return Me\n      Else\n         Return Nothing\n      End If\n   End Function\n   \n   Public Function Format(fmt As String, arg As Object, \n                          provider As IFormatProvider) As String _\n                   Implements ICustomFormatter.Format\n      If TypeOf arg Is Complex Then\n         Dim c1 As Complex = DirectCast(arg, Complex)\n         &#39; Check if the format string has a precision specifier.\n         Dim precision As Integer\n         Dim fmtString As String = String.Empty\n         If fmt.Length &gt; 1 Then\n            Try\n               precision = Int32.Parse(fmt.Substring(1))\n            Catch e As FormatException\n               precision = 0\n            End Try\n            fmtString = &quot;N&quot; + precision.ToString()\n         End If\n         If fmt.Substring(0, 1).Equals(&quot;I&quot;, StringComparison.OrdinalIgnoreCase) Then\n            Return c1.Real.ToString(fmtString) + &quot; + &quot; + c1.Imaginary.ToString(fmtString) + &quot;i&quot;\n         ElseIf fmt.Substring(0, 1).Equals(&quot;J&quot;, StringComparison.OrdinalIgnoreCase) Then\n            Return c1.Real.ToString(fmtString) + &quot; + &quot; + c1.Imaginary.ToString(fmtString) + &quot;j&quot;\n         Else\n            Return c1.ToString(fmt, provider)\n         End If\n      Else\n         If Typeof arg Is IFormattable Then\n            Return DirectCast(arg, IFormattable).ToString(fmt, provider)\n         ElseIf arg IsNot Nothing Then\n            Return arg.ToString()\n         Else\n            Return String.Empty\n         End If   \n      End If                        \n   End Function\nEnd Class\n</code></pre><p> The following example then uses this custom formatter to display the string representation of a complex number.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Class#4\">public class Example\n{\n   public static void Main()\n   {\n      Complex c1 = new Complex(12.1, 15.4);\n      Console.WriteLine(&quot;Formatting with ToString():       &quot; + \n                        c1.ToString());\n      Console.WriteLine(&quot;Formatting with ToString(format): &quot; + \n                        c1.ToString(&quot;N2&quot;));\n      Console.WriteLine(&quot;Custom formatting with I0:        &quot; + \n                        String.Format(new ComplexFormatter(), &quot;{0:I0}&quot;, c1));\n      Console.WriteLine(&quot;Custom formatting with J3:        &quot; + \n                        String.Format(new ComplexFormatter(), &quot;{0:J3}&quot;, c1));\n   }\n}\n// The example displays the following output:\n//    Formatting with ToString():       (12.1, 15.4)\n//    Formatting with ToString(format): (12.10, 15.40)\n//    Custom formatting with I0:        12 + 15i\n//    Custom formatting with J3:        12.100 + 15.400j\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Class#4\">Module Example\n   Public Sub Main()\n      Dim c1 As Complex = New Complex(12.1, 15.4)\n      Console.WriteLine(&quot;Formatting with ToString():       &quot; + \n                        c1.ToString())\n      Console.WriteLine(&quot;Formatting with ToString(format): &quot; + \n                        c1.ToString(&quot;N2&quot;))\n      Console.WriteLine(&quot;Custom formatting with I0:        &quot; + \n                        String.Format(New ComplexFormatter(), &quot;{0:I0}&quot;, c1))\n      Console.WriteLine(&quot;Custom formatting with J3:        &quot; + \n                        String.Format(New ComplexFormatter(), &quot;{0:J3}&quot;, c1))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Formatting with ToString():       (12.1, 15.4)\n&#39;    Formatting with ToString(format): (12.10, 15.40)\n&#39;    Custom formatting with I0:        12 + 15i\n&#39;    Custom formatting with J3:        12.100 + 15.400j\n</code></pre>\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex__ctor_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Complex(Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> structure using the specified real and imaginary values.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_ImaginaryOne\" data-linktype=\"self-bookmark\">ImaginaryOne</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> instance with a real number equal to zero and an imaginary number equal to one.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_One\" data-linktype=\"self-bookmark\">One</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> instance with a real number equal to one and an imaginary number equal to zero.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Zero\" data-linktype=\"self-bookmark\">Zero</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> instance with a real number equal to zero and an imaginary number equal to zero.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Imaginary\" data-linktype=\"self-bookmark\">Imaginary</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the imaginary component of the current <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Magnitude\" data-linktype=\"self-bookmark\">Magnitude</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the magnitude (or absolute value) of a complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Phase\" data-linktype=\"self-bookmark\">Phase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the phase of a complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Real\" data-linktype=\"self-bookmark\">Real</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the real component of the current <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Abs_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Abs(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the absolute value (or magnitude) of a complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Acos_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Acos(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the angle that is the arc cosine of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Add_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Add(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two complex numbers and returns the result.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Asin_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Asin(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the angle that is the arc sine of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Atan_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Atan(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the angle that is the arc tangent of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Conjugate_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Conjugate(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the conjugate of a complex number and returns the result.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Cos_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Cos(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the cosine of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Cosh_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Cosh(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hyperbolic cosine of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Divide_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Divide(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides one complex number by another and returns the result.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Equals_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Equals(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current instance and a specified complex number have the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current instance and a specified object have the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Exp_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Exp(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns <code>e</code> raised to the power specified by a complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_FromPolarCoordinates_System_Double_System_Double_\" data-linktype=\"self-bookmark\">FromPolarCoordinates(Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a complex number from a point&#39;s polar coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Log_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Log(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the natural (base <code>e</code>) logarithm of a specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Log_System_Numerics_Complex_System_Double_\" data-linktype=\"self-bookmark\">Log(Complex,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the logarithm of a specified complex number in a specified base.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Log10_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Log10(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the base-10 logarithm of a specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Multiply_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Multiply(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the product of two complex numbers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Negate_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Negate(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the additive inverse of a specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Pow_System_Numerics_Complex_System_Double_\" data-linktype=\"self-bookmark\">Pow(Complex,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a specified complex number raised to a power specified by a double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Pow_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Pow(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a specified complex number raised to a power specified by a complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Reciprocal_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Reciprocal(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the multiplicative inverse of a complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Sin_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Sin(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the sine of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Sinh_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Sinh(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hyperbolic sine of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Sqrt_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Sqrt(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the square root of a specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Subtract_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Subtract(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts one complex number from another and returns the result.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Tan_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Tan(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the tangent of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_Tanh_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">Tanh(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hyperbolic tangent of the specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current complex number to its equivalent string representation in Cartesian form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Addition_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_Addition(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two complex numbers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Division_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_Division(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides a specified complex number by another specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Equality_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_Equality(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether two complex numbers are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Explicit_System_Decimal_to_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Explicit_System_Numerics_BigInteger_to_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_Explicit(BigInteger)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_Byte_\" data-linktype=\"self-bookmark\">op_Implicit(Byte)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_Double_\" data-linktype=\"self-bookmark\">op_Implicit(Double)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_Int16_\" data-linktype=\"self-bookmark\">op_Implicit(Int16)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_Int32_\" data-linktype=\"self-bookmark\">op_Implicit(Int32)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_Int64_\" data-linktype=\"self-bookmark\">op_Implicit(Int64)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_SByte_\" data-linktype=\"self-bookmark\">op_Implicit(SByte)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_Single_\" data-linktype=\"self-bookmark\">op_Implicit(Single)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_UInt16_\" data-linktype=\"self-bookmark\">op_Implicit(UInt16)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_UInt32_\" data-linktype=\"self-bookmark\">op_Implicit(UInt32)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Implicit_System_UInt64_\" data-linktype=\"self-bookmark\">op_Implicit(UInt64)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Inequality_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_Inequality(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether two complex numbers are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Multiply_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_Multiply(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies two specified complex numbers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_Subtraction_System_Numerics_Complex_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_Subtraction(Complex,Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts a complex number from another complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Numerics_Complex_op_UnaryNegation_System_Numerics_Complex_\" data-linktype=\"self-bookmark\">op_UnaryNegation(Complex)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the additive inverse of a specified complex number.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex__ctor_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Numerics_Complex__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Complex(Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> structure using the specified real and imaginary values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Complex (double real, double imaginary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>real</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The real part of the complex number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>imaginary</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The imaginary part of the complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>real</code> or <code>imaginary</code> arguments may lose precision if they are data types that require an explicit cast to <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates two complex numbers, and then uses them in addition, subtraction, multiplication, and division operations.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.ctor#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim complex1 As New Complex(17.34, 12.87)\n      Dim Complex2 As New Complex(8.76, 5.19)\n      \n      Console.WriteLine(&quot;{0} + {1} = {2}&quot;, complex1, complex2, \n                                          complex1 + complex2)\n      Console.WriteLine(&quot;{0} - {1} = {2}&quot;, complex1, complex2, \n                                          complex1 - complex2)\n      Console.WriteLine(&quot;{0} * {1} = {2}&quot;, complex1, complex2, \n                                          complex1 * complex2)\n      Console.WriteLine(&quot;{0} / {1} = {2}&quot;, complex1, complex2, \n                                          complex1 / complex2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    (17.34, 12.87) + (8.76, 5.19) = (26.1, 18.06)\n&#39;    (17.34, 12.87) - (8.76, 5.19) = (8.58, 7.68)\n&#39;    (17.34, 12.87) * (8.76, 5.19) = (85.1031, 202.7358)\n&#39;    (17.34, 12.87) / (8.76, 5.19) = (2.10944241403558, 0.219405693054265)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.ctor#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex complex1 = new Complex(17.34, 12.87);\n      Complex complex2 = new Complex(8.76, 5.19);\n      \n      Console.WriteLine(&quot;{0} + {1} = {2}&quot;, complex1, complex2, \n                                          complex1 + complex2);\n      Console.WriteLine(&quot;{0} - {1} = {2}&quot;, complex1, complex2, \n                                          complex1 - complex2);\n      Console.WriteLine(&quot;{0} * {1} = {2}&quot;, complex1, complex2, \n                                          complex1 * complex2);\n      Console.WriteLine(&quot;{0} / {1} = {2}&quot;, complex1, complex2, \n                                          complex1 / complex2);\n   }\n}\n// The example displays the following output:\n//    (17.34, 12.87) + (8.76, 5.19) = (26.1, 18.06)\n//    (17.34, 12.87) - (8.76, 5.19) = (8.58, 7.68)\n//    (17.34, 12.87) * (8.76, 5.19) = (85.1031, 202.7358)\n//    (17.34, 12.87) / (8.76, 5.19) = (2.10944241403558, 0.219405693054265)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_ImaginaryOne\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImaginaryOne</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> instance with a real number equal to zero and an imaginary number equal to one.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Numerics.Complex ImaginaryOne;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value by using the ImaginaryOne property. It then compares this value to another value that is instantiated by calling the <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> constructor with a real part equal to zero and an imaginary part equal to one. As the output from the example shows, the two values are equal.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.ImaginaryOne#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim value As Complex = Complex.ImaginaryOne\n      Console.WriteLine(value.ToString())\n      \n      &#39; Instantiate a complex number with real part 0 and imaginary part 1.\n      Dim value1 As New Complex(0, 1)\n      Console.WriteLine(value.Equals(value1))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (0, 1)\n&#39;       True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.ImaginaryOne#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex value = Complex.ImaginaryOne;\n      Console.WriteLine(value.ToString());\n      \n      // Instantiate a complex number with real part 0 and imaginary part 1.\n      Complex value1 = new Complex(0, 1);\n      Console.WriteLine(value.Equals(value1));\n   }\n}\n// The example displays the following output:\n//       (0, 1)\n//       True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_One\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">One</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> instance with a real number equal to one and an imaginary number equal to zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Numerics.Complex One;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value by using the One property. It then compares this value to another value that is instantiated by calling the <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> constructor with a real part equal to one and an imaginary part equal to zero. As the output from the example shows, the two values are equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.One#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex value = Complex.One;\n      Console.WriteLine(value.ToString());\n      \n      // Instantiate a complex number with real part 1 and imaginary part 0.\n      Complex value1 = new Complex(1, 0);\n      Console.WriteLine(value.Equals(value1));\n   }\n}\n// The example displays the following output:\n//       (1, 0)\n//       True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.One#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim value As Complex = Complex.One\n      Console.WriteLine(value.ToString())\n      \n      &#39; Instantiate a complex number with real part 1 and imaginary part 0.\n      Dim value1 As New Complex(1, 0)\n      Console.WriteLine(value.Equals(value1))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (1, 0)\n&#39;       True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Zero\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Zero</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> instance with a real number equal to zero and an imaginary number equal to zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Numerics.Complex Zero;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Zero property is most frequently used to compare a <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value to zero.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value by using the Zero property. It then compares this value to another value that is instantiated by calling the <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> constructor with a real part equal to zero and an imaginary part equal to zero. As the output from the example shows, the two values are equal.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Zero#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim value As Complex = Complex.Zero\n      Console.WriteLine(value.ToString())\n      \n      &#39; Instantiate a complex number with real part 1 and imaginary part 0.\n      Dim value1 As New Complex(0, 0)\n      Console.WriteLine(value.Equals(value1))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (0, 0)\n&#39;       True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Zero#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex value = Complex.Zero;\n      Console.WriteLine(value.ToString());\n      \n      // Instantiate a complex number with real part 0 and imaginary part 1.\n      Complex value1 = new Complex(0, 0);\n      Console.WriteLine(value.Equals(value1));\n   }\n}\n// The example displays the following output:\n//       (0, 0)\n//       True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Imaginary\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Imaginary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Imaginary</div>        \r\n          </div>\r\n    \r\n            <p>Gets the imaginary component of the current <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Imaginary { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The imaginary component of a complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Given a complex number a + bi, the Imaginary property returns the value of b.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates an array of <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> objects and displays the real and imaginary components of each in the form a + bi.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Real#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(12.5, -6.3), \n                                  New Complex(-17.8, 1.7), \n                                  New Complex(14.4, 8.9) }\n      For Each value In values\n         Console.WriteLine(&quot;{0} + {1}i&quot;, value.Real, value.Imaginary)\n      Next                                   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       12.5 + -6.3i\n&#39;       -17.8 + 1.7i\n&#39;       14.4 + 8.9i\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Real#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(12.5, -6.3), \n                           new Complex(-17.8, 1.7), \n                           new Complex(14.4, 8.9) };\n      foreach (var value in values)\n         Console.WriteLine(&quot;{0} + {1}i&quot;, value.Real, value.Imaginary);\n   }\n}\n// The example displays the following output:\n//       12.5 + -6.3i\n//       -17.8 + 1.7i\n//       14.4 + 8.9i\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Magnitude\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Magnitude_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Magnitude</div>        \r\n          </div>\r\n    \r\n            <p>Gets the magnitude (or absolute value) of a complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Magnitude { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The magnitude of the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Magnitude property is equivalent to the absolute value of a complex number. It specifies the distance from the origin (the intersection of the x-axis and the y-axis in the Cartesian coordinate system) to the two-dimensional point represented by a complex number. The absolute value is calculated as follows:  </p>\n<p> &#124; a + bi &#124; = <a class=\"xref\" href=\"system.math#System_Math_Sqrt_\" data-linktype=\"relative-path\">Sqrt</a>(a * a + b * b)  </p>\n<p> If the calculation of the absolute value results in an overflow, this property returns either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> The Magnitude and the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Phase_\" data-linktype=\"relative-path\">Phase</a> properties define the position of a point that represents a complex number in the polar coordinate system.  </p>\n<p> You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_FromPolarCoordinates_\" data-linktype=\"relative-path\">FromPolarCoordinates</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the Magnitude property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Abs#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim complex1 As New Complex(2.0, 3.0)\n      Console.WriteLine(&quot;|{0}| = {1:N2}&quot;, complex1, Complex.Abs(complex1))\n      Console.WriteLine(&quot;Equal to Magnitude: {0}&quot;, \n                        Complex.Abs(complex1).Equals(complex1.Magnitude)) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       |(2, 3)| = 3.61\n&#39;       Equal to Magnitude: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Abs#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex complex1 = new Complex(2.0, 3.0);\n      Console.WriteLine(&quot;|{0}| = {1:N2}&quot;, complex1, Complex.Abs(complex1));\n      Console.WriteLine(&quot;Equal to Magnitude: {0}&quot;, \n                        Complex.Abs(complex1).Equals(complex1.Magnitude)); \n   }\n}\n// The example displays the following output:\n//       |(2, 3)| = 3.60555127546399\n//       Equal to Magnitude: True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Phase\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Phase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Phase</div>        \r\n          </div>\r\n    \r\n            <p>Gets the phase of a complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Phase { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The phase of a complex number, in radians.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a complex number a + bi, the phase is computed as <a class=\"xref\" href=\"system.math#System_Math_Atan2_\" data-linktype=\"relative-path\">Atan2</a>(b, a).  </p>\n<p> You can identify a complex number by its Cartesian coordinates on the complex plane or by its polar coordinates. The phase (argument) of a complex number is the angle to the real axis of a line drawn from the point of origin (the intersection of the x-axis and the y-axis) to the point represented by the complex number. The magnitude (represented by the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Magnitude_\" data-linktype=\"relative-path\">Magnitude</a> property) is the distance from the point of origin to the point that is represented by the complex number.  </p>\n<p> You can instantiate a complex number based on its polar coordinates instead of its Cartesian coordinates by calling the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_FromPolarCoordinates_\" data-linktype=\"relative-path\">FromPolarCoordinates</a> method.  </p>\n<p> To convert the phase from radians to degrees, multiply it by 180/<a class=\"xref\" href=\"system.math#System_Math_PI\" data-linktype=\"relative-path\">System.Math.PI</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_FromPolarCoordinates_\" data-linktype=\"relative-path\">FromPolarCoordinates</a> method to instantiate a complex number based on its polar coordinates, and then displays the value of its <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Magnitude_\" data-linktype=\"relative-path\">Magnitude</a> and Phase properties.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Phase#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex c1 = Complex.FromPolarCoordinates(10, 45 * Math.PI / 180);\n      Console.WriteLine(&quot;{0}:&quot;, c1);\n      Console.WriteLine(&quot;   Magnitude: {0}&quot;, Complex.Abs(c1));\n      Console.WriteLine(&quot;   Phase:     {0} radians&quot;, c1.Phase);\n      Console.WriteLine(&quot;   Phase      {0} degrees&quot;, c1.Phase * 180/Math.PI);\n      Console.WriteLine(&quot;   Atan(b/a): {0}&quot;, Math.Atan(c1.Imaginary/c1.Real));\n   }\n}\n// The example displays the following output:\n//       (7.07106781186548, 7.07106781186547):\n//          Magnitude: 10\n//          Phase:     0.785398163397448 radians\n//          Phase      45 degrees\n//          Atan(b/a): 0.785398163397448\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Phase#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c1 As Complex = Complex.FromPolarCoordinates(10, 45 * Math.Pi / 180)\n      Console.WriteLine(&quot;{0}:&quot;, c1)\n      Console.WriteLine(&quot;   Magnitude: {0}&quot;, Complex.Abs(c1))\n      Console.WriteLine(&quot;   Phase:     {0} radians&quot;, c1.Phase)\n      Console.WriteLine(&quot;   Phase      {0} degrees&quot;, c1.Phase * 180/Math.Pi)\n      Console.WriteLine(&quot;   Atan(b/a): {0}&quot;, Math.Atan(c1.Imaginary/c1.Real))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (7.07106781186548, 7.07106781186547):\n&#39;          Magnitude: 10\n&#39;          Phase:     0.785398163397448 radians\n&#39;          Phase      45 degrees\n&#39;          Atan(b/a): 0.785398163397448\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Real\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Real_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Real</div>        \r\n          </div>\r\n    \r\n            <p>Gets the real component of the current <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Real { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The real component of a complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Given a complex number a + bi, the Real property returns the value of a.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates an array of <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> objects and displays the real and imaginary components of each in the form a + bi.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Real#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(12.5, -6.3), \n                                  New Complex(-17.8, 1.7), \n                                  New Complex(14.4, 8.9) }\n      For Each value In values\n         Console.WriteLine(&quot;{0} + {1}i&quot;, value.Real, value.Imaginary)\n      Next                                   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       12.5 + -6.3i\n&#39;       -17.8 + 1.7i\n&#39;       14.4 + 8.9i\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Real#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(12.5, -6.3), \n                           new Complex(-17.8, 1.7), \n                           new Complex(14.4, 8.9) };\n      foreach (var value in values)\n         Console.WriteLine(&quot;{0} + {1}i&quot;, value.Real, value.Imaginary);\n   }\n}\n// The example displays the following output:\n//       12.5 + -6.3i\n//       -17.8 + 1.7i\n//       14.4 + 8.9i\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Abs_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Abs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Abs(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the absolute value (or magnitude) of a complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Abs (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The absolute value of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The absolute value of a complex number is equivalent to its <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Magnitude_\" data-linktype=\"relative-path\">Magnitude</a> property. The absolute value of a real number a + bi is calculated as follows:  </p>\n<ul>\n<li><p>If b = 0, the result is 0.  </p>\n</li>\n<li><p>If a &gt; b, the result is a *<a class=\"xref\" href=\"system.math#System_Math_Sqrt_\" data-linktype=\"relative-path\">Sqrt</a>(1 + b<sup>2</sup>/a<sup>2</sup>).  </p>\n</li>\n<li><p>If b &gt; a, the result is b * <a class=\"xref\" href=\"system.math#System_Math_Sqrt_\" data-linktype=\"relative-path\">Sqrt</a>(1 + a<sup>2</sup>/b<sup>2</sup>).  </p>\n<p>If the calculation of the absolute value results in an overflow, the method returns either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>. If either the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Real_\" data-linktype=\"relative-path\">Real</a> or <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Imaginary_\" data-linktype=\"relative-path\">Imaginary</a> property is <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> and the other property is neither <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> nor <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>, the method returns <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calculates the absolute value of a complex number and demonstrates that it is equivalent to the value of the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Magnitude_\" data-linktype=\"relative-path\">Magnitude</a> property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Abs#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim complex1 As New Complex(2.0, 3.0)\n      Console.WriteLine(&quot;|{0}| = {1:N2}&quot;, complex1, Complex.Abs(complex1))\n      Console.WriteLine(&quot;Equal to Magnitude: {0}&quot;, \n                        Complex.Abs(complex1).Equals(complex1.Magnitude)) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       |(2, 3)| = 3.61\n&#39;       Equal to Magnitude: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Abs#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex complex1 = new Complex(2.0, 3.0);\n      Console.WriteLine(&quot;|{0}| = {1:N2}&quot;, complex1, Complex.Abs(complex1));\n      Console.WriteLine(&quot;Equal to Magnitude: {0}&quot;, \n                        Complex.Abs(complex1).Equals(complex1.Magnitude)); \n   }\n}\n// The example displays the following output:\n//       |(2, 3)| = 3.60555127546399\n//       Equal to Magnitude: True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Acos_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Acos_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Acos(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the angle that is the arc cosine of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Acos (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number that represents a cosine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The angle, measured in radians, which is the arc cosine of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Acos method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Acos_\" data-linktype=\"relative-path\">Acos</a> method for real numbers.  </p>\n<p> The Acos method uses the following formula:  </p>\n<p> (-<a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_ImaginaryOne\" data-linktype=\"relative-path\">ImaginaryOne</a>) * <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Log_\" data-linktype=\"relative-path\">Log</a>(<code>value</code> + <a href=\"assetId:///F:System.Numerics.Complex.ImaginaryOne?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ImaginaryOne</a>*<a href=\"assetId:///M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">Sqrt</a>(<a href=\"assetId:///F:System.Numerics.Complex.One?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">One</a> - <code>value</code> * <code>value</code>)))</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Acos method. It shows that passing the value returned by the Acos method to the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Cos_\" data-linktype=\"relative-path\">Cos</a> method returns the original <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Acos#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(.5, 2), \n                                  New Complex(.5, -2),\n                                  New Complex(-.5, 2),\n                                  New Complex(-.3, -.8) }\n      For Each value As Complex In values\n         Console.WriteLine(&quot;Cos(ACos({0})) = {1}&quot;, value, \n                           Complex.Cos(Complex.Acos(value)))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Cos(ACos((0.5, 2))) = (0.5, 2)\n&#39;       Cos(ACos((0.5, -2))) = (0.5, -2)\n&#39;       Cos(ACos((-0.5, 2))) = (-0.5, 2)\n&#39;       Cos(ACos((-0.3, -0.8))) = (-0.3, -0.8)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Acos#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(.5, 2), \n                           new Complex(.5, -2),\n                           new Complex(-.5, 2),\n                           new Complex(-.3, -.8) };\n      foreach (Complex value in values)\n         Console.WriteLine(&quot;Cos(ACos({0})) = {1}&quot;, value, \n                           Complex.Cos(Complex.Acos(value)));\n   }\n}\n// The example displays the following output:\n//       Cos(ACos((0.5, 2))) = (0.5, 2)\n//       Cos(ACos((0.5, -2))) = (0.5, -2)\n//       Cos(ACos((-0.5, 2))) = (-0.5, 2)\n//       Cos(ACos((-0.3, -0.8))) = (-0.3, -0.8)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Add_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Adds two complex numbers and returns the result.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Add (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first complex number to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second complex number to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>left</code> and <code>right</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:  </p>\n<p> (a + c) + (b + d)i.  </p>\n<p> If the method call results in an overflow in either the real or imaginary component, the value of the component is either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> Languages that do not support custom operators can use the Add method to perform addition with complex numbers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates addition with complex numbers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Add#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values= { new Complex(12.3, -1.4), \n                          new Complex(-6.2, 3.1), \n                          new Complex(8.9, 1.5) };   \n      foreach (var c1 in values)\n         foreach (var c2 in values)\n            Console.WriteLine(&quot;{0} + {1} = {2}&quot;, c1, c2, \n                              Complex.Add(c1, c2));\n   }\n}\n// The example displays the following output:\n//       (12.3, -1.4) + (12.3, -1.4) = (24.6, -2.8)\n//       (12.3, -1.4) + (-6.2, 3.1) = (6.1, 1.7)\n//       (12.3, -1.4) + (8.9, 1.5) = (21.2, 0.1)\n//       (-6.2, 3.1) + (12.3, -1.4) = (6.1, 1.7)\n//       (-6.2, 3.1) + (-6.2, 3.1) = (-12.4, 6.2)\n//       (-6.2, 3.1) + (8.9, 1.5) = (2.7, 4.6)\n//       (8.9, 1.5) + (12.3, -1.4) = (21.2, 0.1)\n//       (8.9, 1.5) + (-6.2, 3.1) = (2.7, 4.6)\n//       (8.9, 1.5) + (8.9, 1.5) = (17.8, 3)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Add#1\">Imports System.Numerics\n\nModule modMain\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(12.3, -1.4), \n                                  New Complex(-6.2, 3.1), \n                                  New Complex(8.9, 1.5) }   \n      For Each c1 In values\n         For Each c2 In values\n            Console.WriteLine(&quot;{0} + {1} = {2}&quot;, c1, c2, \n                              Complex.Add(c1, c2))\n         Next\n      Next      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (12.3, -1.4) + (12.3, -1.4) = (24.6, -2.8)\n&#39;       (12.3, -1.4) + (-6.2, 3.1) = (6.1, 1.7)\n&#39;       (12.3, -1.4) + (8.9, 1.5) = (21.2, 0.1)\n&#39;       (-6.2, 3.1) + (12.3, -1.4) = (6.1, 1.7)\n&#39;       (-6.2, 3.1) + (-6.2, 3.1) = (-12.4, 6.2)\n&#39;       (-6.2, 3.1) + (8.9, 1.5) = (2.7, 4.6)\n&#39;       (8.9, 1.5) + (12.3, -1.4) = (21.2, 0.1)\n&#39;       (8.9, 1.5) + (-6.2, 3.1) = (2.7, 4.6)\n&#39;       (8.9, 1.5) + (8.9, 1.5) = (17.8, 3)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Asin_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Asin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Asin(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the angle that is the arc sine of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Asin (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The angle which is the arc sine of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Asin method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Asin_\" data-linktype=\"relative-path\">Asin</a> method for real numbers.  </p>\n<p> The Asin method uses the following formula:  </p>\n<p> -<a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_ImaginaryOne\" data-linktype=\"relative-path\">ImaginaryOne</a> * <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Log_\" data-linktype=\"relative-path\">Log</a>(<a href=\"assetId:///F:System.Numerics.Complex.ImaginaryOne?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ImaginaryOne</a> * value + <a href=\"assetId:///M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">Sqrt</a>(<a href=\"assetId:///F:System.Numerics.Complex.One?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">One</a> - value * value))</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Asin method. It shows that passing the value returned by the Asin method to the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Sin_\" data-linktype=\"relative-path\">Sin</a> method returns the original <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Asin#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(2.3, 1.4),\n                           new Complex(-2.3, 1.4), \n                           new Complex(-2.3, -1.4),\n                           new Complex(2.3, -1.4) };\n      foreach (Complex value in values)\n         Console.WriteLine(&quot;Sin(Asin({0})) = {1}&quot;, \n                            value, Complex.Sin(Complex.Asin(value)));\n   }\n}\n// The example displays the following output:\n//       Sin(Asin((2.3, 1.4))) = (2.3, 1.4)\n//       Sin(Asin((-2.3, 1.4))) = (-2.3, 1.4)\n//       Sin(Asin((-2.3, -1.4))) = (-2.3, -1.4)\n//       Sin(Asin((2.3, -1.4))) = (2.3, -1.4)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Asin#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(2.3, 1.4),\n                                  New Complex(-2.3, 1.4), \n                                  New Complex(-2.3, -1.4),\n                                  New Complex(2.3, -1.4) }\n      For Each value As Complex In values\n         Console.WriteLine(&quot;Sin(Asin({0})) = {1}&quot;, \n                            value, Complex.Sin(Complex.Asin(value)))\n      Next                      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Sin(Asin((2.3, 1.4))) = (2.3, 1.4)\n&#39;       Sin(Asin((-2.3, 1.4))) = (-2.3, 1.4)\n&#39;       Sin(Asin((-2.3, -1.4))) = (-2.3, -1.4)\n&#39;       Sin(Asin((2.3, -1.4))) = (2.3, -1.4)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Atan_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Atan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Atan(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the angle that is the arc tangent of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Atan (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The angle that is the arc tangent of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Atan method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Atan_\" data-linktype=\"relative-path\">Atan</a> method for real numbers.  </p>\n<p> The Atan method uses the following formula:  </p>\n<p> <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_ImaginaryOne\" data-linktype=\"relative-path\">ImaginaryOne</a> / new Complex(2.0, 0.0)) * (<a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Log_\" data-linktype=\"relative-path\">Log</a>(<a href=\"assetId:///F:System.Numerics.Complex.One?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">One</a> - <a href=\"assetId:///F:System.Numerics.Complex.ImaginaryOne?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ImaginaryOne</a> * value) - <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Log_\" data-linktype=\"relative-path\">Log</a>(<a href=\"assetId:///F:System.Numerics.Complex.One?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">One</a> + ImaginaryOne * value)</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Atan method. It shows that passing the value returned by the Atan method to the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Tan_\" data-linktype=\"relative-path\">Tan</a> method returns the original <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Atan#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(2.5, 1.5), \n                                  New Complex(2.5, -1.5), \n                                  New Complex(-2.5, 1.5), \n                                  New Complex(-2.5, -1.5) }\n      For Each value As Complex In values\n         Console.WriteLine(&quot;Tan(Atan({0})) = {1}&quot;, \n                            value, Complex.Tan(Complex.Atan(value)))\n      Next                               \n   End Sub\nEnd Module\n&#39; The example displays the following example:\n&#39;       Tan(Atan((2.5, 1.5))) = (2.5, 1.5)\n&#39;       Tan(Atan((2.5, -1.5))) = (2.5, -1.5)\n&#39;       Tan(Atan((-2.5, 1.5))) = (-2.5, 1.5)\n&#39;       Tan(Atan((-2.5, -1.5))) = (-2.5, -1.5)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Atan#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(2.5, 1.5), \n                           new Complex(2.5, -1.5), \n                           new Complex(-2.5, 1.5), \n                           new Complex(-2.5, -1.5) };\n      foreach (Complex value in values)\n         Console.WriteLine(&quot;Tan(Atan({0})) = {1}&quot;, \n                            value, Complex.Tan(Complex.Atan(value)));\n   }\n}\n// The example displays the following output:\n//       Tan(Atan((2.5, 1.5))) = (2.5, 1.5)\n//       Tan(Atan((2.5, -1.5))) = (2.5, -1.5)\n//       Tan(Atan((-2.5, 1.5))) = (-2.5, 1.5)\n//       Tan(Atan((-2.5, -1.5))) = (-2.5, -1.5)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Conjugate_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Conjugate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conjugate(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the conjugate of a complex number and returns the result.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Conjugate (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The conjugate of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The conjugate of a complex number inverts the sign of the imaginary component; that is, it applies unary negation to the imaginary component. If a + bi is a complex number, its conjugate is a - bi.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the conjugate of two complex numbers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Conjugate#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(12.4, 6.3), \n                           new Complex(12.4, -6.3) };\n      foreach (Complex value in values)\n      {\n         Console.WriteLine(&quot;Original value: {0}&quot;, value);\n         Console.WriteLine(&quot;Conjugate:      {0}<br>&quot;, \n                           Complex.Conjugate(value).ToString());\n      }                           \n   }\n}\n// The example displays the following output:\n//       Original value: (12.4, 6.3)\n//       Conjugate:      (12.4, -6.3)\n//       \n//       Original value: (12.4, -6.3)\n//       Conjugate:      (12.4, 6.3)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Conjugate#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(12.4, 6.3), \n                                  New Complex(12.4, -6.3) }\n      For Each value In values\n         Console.WriteLine(&quot;Original value: {0}&quot;, value)\n         Console.WriteLine(&quot;Conjugate:      {0}&quot;, \n                           Complex.Conjugate(value).ToString())\n         Console.WriteLine()                        \n      Next                            \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Original value: (12.4, 6.3)\n&#39;       Conjugate:      (12.4, -6.3)\n&#39;       \n&#39;       Original value: (12.4, -6.3)\n&#39;       Conjugate:      (12.4, 6.3)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Cos_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Cos_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cos(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the cosine of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Cos (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The cosine of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Cos method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Cos_\" data-linktype=\"relative-path\">Cos</a> method for real numbers.  </p>\n<p> The Cos method uses the following formula to calculate the cosine of the complex number a + bi:  </p>\n<p> (<a class=\"xref\" href=\"system.math#System_Math_Cos_\" data-linktype=\"relative-path\">Cos</a>(a) * <a class=\"xref\" href=\"system.math#System_Math_Cosh_\" data-linktype=\"relative-path\">Cosh</a>(b), -(<a class=\"xref\" href=\"system.math#System_Math_Sin_\" data-linktype=\"relative-path\">Sin</a>(a) * <a class=\"xref\" href=\"system.math#System_Math_Sinh_\" data-linktype=\"relative-path\">Sinh</a>(b)))</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Acos_\" data-linktype=\"relative-path\">Acos</a> method. It shows that passing the value returned by the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Acos_\" data-linktype=\"relative-path\">Acos</a> method to the Cos method returns the original <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Acos#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(.5, 2), \n                                  New Complex(.5, -2),\n                                  New Complex(-.5, 2),\n                                  New Complex(-.3, -.8) }\n      For Each value As Complex In values\n         Console.WriteLine(&quot;Cos(ACos({0})) = {1}&quot;, value, \n                           Complex.Cos(Complex.Acos(value)))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Cos(ACos((0.5, 2))) = (0.5, 2)\n&#39;       Cos(ACos((0.5, -2))) = (0.5, -2)\n&#39;       Cos(ACos((-0.5, 2))) = (-0.5, 2)\n&#39;       Cos(ACos((-0.3, -0.8))) = (-0.3, -0.8)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Acos#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(.5, 2), \n                           new Complex(.5, -2),\n                           new Complex(-.5, 2),\n                           new Complex(-.3, -.8) };\n      foreach (Complex value in values)\n         Console.WriteLine(&quot;Cos(ACos({0})) = {1}&quot;, value, \n                           Complex.Cos(Complex.Acos(value)));\n   }\n}\n// The example displays the following output:\n//       Cos(ACos((0.5, 2))) = (0.5, 2)\n//       Cos(ACos((0.5, -2))) = (0.5, -2)\n//       Cos(ACos((-0.5, 2))) = (-0.5, 2)\n//       Cos(ACos((-0.3, -0.8))) = (-0.3, -0.8)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Cosh_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Cosh_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cosh(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hyperbolic cosine of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Cosh (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The hyperbolic cosine of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Cosh method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Cosh_\" data-linktype=\"relative-path\">Cosh</a> method for real numbers.  </p>\n<p> The Cosh method uses the following formula to calculate the hyperbolic cosine of the complex number a + bi:  </p>\n<p> (<a class=\"xref\" href=\"system.math#System_Math_Cosh_\" data-linktype=\"relative-path\">Cosh</a>(a) * <a class=\"xref\" href=\"system.math#System_Math_Cos_\" data-linktype=\"relative-path\">Cos</a>(b), <a class=\"xref\" href=\"system.math#System_Math_Sinh_\" data-linktype=\"relative-path\">Sinh</a>(a) * <a class=\"xref\" href=\"system.math#System_Math_Sin_\" data-linktype=\"relative-path\">Sin</a>(b))</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Divide_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Divide_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Divide(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Divides one complex number by another and returns the result.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, System.Numerics.Complex divisor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dividend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The complex number to be divided.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>divisor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The complex number to divide by.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The quotient of the division.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The division of a complex number, a + bi, by a second complex number, number, c + di, takes the following form:  </p>\n<p> ((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i  </p>\n<p> If the calculation of the quotient results in an overflow in either the real or imaginary component, the value of that component is either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> The Divide method can be used by languages that do not support custom operators. Its behavior is identical to division using the division operator.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example divides a complex number by each element in an array of complex numbers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Divide#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex c1 = new Complex(1.2, 2.3);\n      Complex[] values = { new Complex(1.2, 2.3), \n                           new Complex(0.5, 0.75), \n                           new Complex(3.0, -5.0) };\n      foreach (Complex c2 in values)\n         Console.WriteLine(&quot;{0} / {1} = {2:N2}&quot;, c1, c2, \n                           Complex.Divide(c1, c2));\n   }\n}\n// The example displays the following output:\n//       (1.2, 2.3) / (1.2, 2.3) = (1.00, 0.00)\n//       (1.2, 2.3) / (0.5, 0.75) = (2.86, 0.31)\n//       (1.2, 2.3) / (3, -5) = (-0.23, 0.38)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Divide#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c1 As New Complex(1.2, 2.3)\n      Dim values() As Complex = { New Complex(1.2, 2.3), \n                                  New Complex(0.5, 0.75), \n                                  New Complex(3.0, -5.0) }\n      For Each c2 In values\n         Console.WriteLine(&quot;{0} / {1} = {2:N2}&quot;, c1, c2, \n                           Complex.Divide(c1, c2))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (1.2, 2.3) / (1.2, 2.3) = (1.00, 0.00)\n&#39;       (1.2, 2.3) / (0.5, 0.75) = (2.86, 0.31)\n&#39;       (1.2, 2.3) / (3, -5) = (-0.23, 0.38)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Equals_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current instance and a specified complex number have the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The complex number to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this complex number and <code>value</code> have the same value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equals method provides the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> implementation for the <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> structure. It performs slightly better than <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a> method because it does not have to convert its parameter to a complex number.  </p>\n<p> Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The Equals method is equivalent to the following expression:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Equals#1\">      return this.Real.Equals(value) &amp;&amp; this.Imaginary.Equals(value);      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Equals#1\">      Return Me.Real.Equals(value.Real) AndAlso Me.Imaginary.Equals(value.Imaginary)\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current instance and a specified object have the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>obj</code> parameter is a <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object or a type capable of implicit conversion to a <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object, and its value is equal to the current <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The Equals method is equivalent to the following expression:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Equals#2\">      return this.Real.Equals(((Complex) value).Real) &amp;&amp; \n             this.Imaginary.Equals(((Complex) value).Imaginary);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Equals#2\">      Return Me.Real.Equals(CType(value, Complex).Real) AndAlso \n             Me.Imaginary.Equals(CType(value, Complex).Imaginary)\n</code></pre><p> If the <code>obj</code> parameter is not a <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object, but it is a data type for which an implicit conversion is defined, the Equals method converts <code>obj</code> to a <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object whose real part is equal to the value of <code>obj</code> and whose imaginary part is equal to zero before it performs the comparison. The following example illustrates this by finding that a complex number and a double-precision floating-point value are equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Equals#6\">      double n1 = 16.33;\n      System.Numerics.Complex c1 = \n             new System.Numerics.Complex(16.33, 0);\n      Console.WriteLine(c1.Equals(n1));               // Returns true.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Equals#6\">      Dim n1 As Double = 16.33\n      Dim c1 As New System.Numerics.Complex(16.33, 0)\n      Console.WriteLine(c1.Equals(n1))                &#39; Returns True.\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Exp_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Exp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exp(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns <code>e</code> raised to the power specified by a complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Exp (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number that specifies a power.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The number <code>e</code> raised to the power <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Pow_\" data-linktype=\"relative-path\">Pow</a> method to calculate the powers of other bases.  </p>\n<p> The Exp method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Exp_\" data-linktype=\"relative-path\">Exp</a> method for real numbers. Exp is the inverse of <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Log_\" data-linktype=\"relative-path\">Log</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Exp method. It shows that, with some allowance for the lack of precision of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type, passing the value returned by the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Log_\" data-linktype=\"relative-path\">Log</a> method to the Exp method returns the original <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Log#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(1.53, 9.26), \n                           new Complex(2.53, -8.12),\n                           new Complex(-2.81, 5.32),\n                           new Complex(-1.09, -3.43),\n                           new Complex(Double.MinValue/2, Double.MinValue/2) };\n      foreach (Complex value in values)\n         Console.WriteLine(&quot;Exp(Log({0}) = {1}&quot;, value, \n                           Complex.Exp(Complex.Log(value)));\n   }\n}\n// The example displays the following output:\n//       Exp(Log((1.53, 9.26)) = (1.53, 9.26)\n//       Exp(Log((2.53, -8.12)) = (2.53, -8.12)\n//       Exp(Log((-2.81, 5.32)) = (-2.81, 5.32)\n//       Exp(Log((-1.09, -3.43)) = (-1.09, -3.43)\n//       Exp(Log((-8.98846567431158E+307, -8.98846567431158E+307)) = (-8.98846567431161E+307, -8.98846567431161E+307)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Log#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(1.53, 9.26), \n                                  New Complex(2.53, -8.12),\n                                  New Complex(-2.81, 5.32),\n                                  New Complex(-1.09, -3.43),\n                                  New Complex(Double.MinValue/2, Double.MinValue/2) }\n      For Each value As Complex In values\n         Console.WriteLine(&quot;Exp(Log({0}) = {1}&quot;, value, \n                           Complex.Exp(Complex.Log(value)))\n      Next                                  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      Exp(Log((1.53, 9.26)) = (1.53, 9.26)\n&#39;      Exp(Log((2.53, -8.12)) = (2.53, -8.12)\n&#39;      Exp(Log((-2.81, 5.32)) = (-2.81, 5.32)\n&#39;      Exp(Log((-1.09, -3.43)) = (-1.09, -3.43)\n&#39;      Exp(Log((-8.98846567431158E+307, -8.98846567431158E+307)) = (-8.98846567431161E+307, -8.98846567431161E+307)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_FromPolarCoordinates_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_FromPolarCoordinates_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromPolarCoordinates(Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a complex number from a point&#39;s polar coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex FromPolarCoordinates (double magnitude, double phase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>magnitude</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>phase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The phase, which is the angle from the line to the horizontal axis, measured in radians.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FromPolarCoordinates method instantiates a complex number based on its polar coordinates.  </p>\n<p> Because there are multiple representations of a point on a complex plane, the return value of the FromPolarCoordinates method is normalized. The magnitude is normalized to a positive number, and the phase is normalized to a value in the range of -<a class=\"xref\" href=\"system.math#System_Math_PI\" data-linktype=\"relative-path\">PI</a> to <a class=\"xref\" href=\"system.math#System_Math_PI\" data-linktype=\"relative-path\">PI</a>. As a result, the values of the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Phase_\" data-linktype=\"relative-path\">Phase</a> and <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Magnitude_\" data-linktype=\"relative-path\">Magnitude</a> properties of the resulting complex number may not equal the original values of the <code>magnitude</code> and <code>phase</code> parameters.  </p>\n<p> To convert a value from degrees to radians for the <code>phase</code> parameter, multiply it by <a class=\"xref\" href=\"system.math#System_Math_PI\" data-linktype=\"relative-path\">System.Math.PI</a>/180.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the FromPolarCoordinates method to instantiate a complex number based on its polar coordinates and then displays the value of its <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Magnitude_\" data-linktype=\"relative-path\">Magnitude</a> and <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Phase_\" data-linktype=\"relative-path\">Phase</a> properties.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Phase#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex c1 = Complex.FromPolarCoordinates(10, 45 * Math.PI / 180);\n      Console.WriteLine(&quot;{0}:&quot;, c1);\n      Console.WriteLine(&quot;   Magnitude: {0}&quot;, Complex.Abs(c1));\n      Console.WriteLine(&quot;   Phase:     {0} radians&quot;, c1.Phase);\n      Console.WriteLine(&quot;   Phase      {0} degrees&quot;, c1.Phase * 180/Math.PI);\n      Console.WriteLine(&quot;   Atan(b/a): {0}&quot;, Math.Atan(c1.Imaginary/c1.Real));\n   }\n}\n// The example displays the following output:\n//       (7.07106781186548, 7.07106781186547):\n//          Magnitude: 10\n//          Phase:     0.785398163397448 radians\n//          Phase      45 degrees\n//          Atan(b/a): 0.785398163397448\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Phase#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c1 As Complex = Complex.FromPolarCoordinates(10, 45 * Math.Pi / 180)\n      Console.WriteLine(&quot;{0}:&quot;, c1)\n      Console.WriteLine(&quot;   Magnitude: {0}&quot;, Complex.Abs(c1))\n      Console.WriteLine(&quot;   Phase:     {0} radians&quot;, c1.Phase)\n      Console.WriteLine(&quot;   Phase      {0} degrees&quot;, c1.Phase * 180/Math.Pi)\n      Console.WriteLine(&quot;   Atan(b/a): {0}&quot;, Math.Atan(c1.Imaginary/c1.Real))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (7.07106781186548, 7.07106781186547):\n&#39;          Magnitude: 10\n&#39;          Phase:     0.785398163397448 radians\n&#39;          Phase      45 degrees\n&#39;          Atan(b/a): 0.785398163397448\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_GetHashCode\">\r\n    \r\n            <a id=\"System_Numerics_Complex_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Log_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Log_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Log(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the natural (base <code>e</code>) logarithm of a specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Log (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The natural (base <code>e</code>) logarithm of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Log method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Log_System_Double_\" data-linktype=\"relative-path\">System.Math.Log(Double)</a> method for real numbers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Log method. It shows that, with some allowance for the lack of precision of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type, passing the value returned by the Log method to the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Exp_\" data-linktype=\"relative-path\">Exp</a> method returns the original <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Log#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(1.53, 9.26), \n                           new Complex(2.53, -8.12),\n                           new Complex(-2.81, 5.32),\n                           new Complex(-1.09, -3.43),\n                           new Complex(Double.MinValue/2, Double.MinValue/2) };\n      foreach (Complex value in values)\n         Console.WriteLine(&quot;Exp(Log({0}) = {1}&quot;, value, \n                           Complex.Exp(Complex.Log(value)));\n   }\n}\n// The example displays the following output:\n//       Exp(Log((1.53, 9.26)) = (1.53, 9.26)\n//       Exp(Log((2.53, -8.12)) = (2.53, -8.12)\n//       Exp(Log((-2.81, 5.32)) = (-2.81, 5.32)\n//       Exp(Log((-1.09, -3.43)) = (-1.09, -3.43)\n//       Exp(Log((-8.98846567431158E+307, -8.98846567431158E+307)) = (-8.98846567431161E+307, -8.98846567431161E+307)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Log#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(1.53, 9.26), \n                                  New Complex(2.53, -8.12),\n                                  New Complex(-2.81, 5.32),\n                                  New Complex(-1.09, -3.43),\n                                  New Complex(Double.MinValue/2, Double.MinValue/2) }\n      For Each value As Complex In values\n         Console.WriteLine(&quot;Exp(Log({0}) = {1}&quot;, value, \n                           Complex.Exp(Complex.Log(value)))\n      Next                                  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      Exp(Log((1.53, 9.26)) = (1.53, 9.26)\n&#39;      Exp(Log((2.53, -8.12)) = (2.53, -8.12)\n&#39;      Exp(Log((-2.81, 5.32)) = (-2.81, 5.32)\n&#39;      Exp(Log((-1.09, -3.43)) = (-1.09, -3.43)\n&#39;      Exp(Log((-8.98846567431158E+307, -8.98846567431158E+307)) = (-8.98846567431161E+307, -8.98846567431161E+307)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Log_System_Numerics_Complex_System_Double_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Log_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Log(Complex,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the logarithm of a specified complex number in a specified base.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Log (System.Numerics.Complex value, double baseValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>baseValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the logarithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The logarithm of <code>value</code> in base <code>baseValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Log method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Log_System_Double_System_Double_\" data-linktype=\"relative-path\">System.Math.Log(Double,Double)</a> method for real numbers.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Log10_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Log10_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Log10(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the base-10 logarithm of a specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Log10 (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The base-10 logarithm of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Log10 method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Log10_\" data-linktype=\"relative-path\">Log10</a> method for real numbers.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Multiply_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Multiply(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the product of two complex numbers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Multiply (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first complex number to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second complex number to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The product of the <code>left</code> and <code>right</code> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:  </p>\n<p> (ac - bd) + (ad + bc)i  </p>\n<p> If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> The Multiply method is implemented for languages that do not support custom operators. Its behavior is identical to multiplication using the multiplication operator.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example multiples a complex number by each element in an array of complex numbers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Multiply#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex number1 = new Complex(8.3, 17.5);\n      Complex[] numbers = { new Complex(1.4, 6.3), \n                            new Complex(-2.7, 1.8), \n                            new Complex(3.1, -2.1) };\n      foreach (Complex number2 in numbers)\n         Console.WriteLine(&quot;{0} x {1} = {2}&quot;, number1, number2, \n                           Complex.Multiply(number1, number2));\n   }\n}\n// The example displays the following output:\n//       (8.3, 17.5) x (1.4, 6.3) = (-98.63, 76.79)\n//       (8.3, 17.5) x (-2.7, 1.8) = (-53.91, -32.31)\n//       (8.3, 17.5) x (3.1, -2.1) = (62.48, 36.82)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Multiply#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim number1 As New Complex(8.3, 17.5)\n      Dim numbers() As Complex = { New Complex(1.4, 6.3), \n                                   New Complex(-2.7, 1.8), \n                                   New Complex(3.1, -2.1) }\n      For Each number2 In numbers\n         Console.WriteLine(&quot;{0} x {1} = {2}&quot;, number1, number2, \n                           Complex.Multiply(number1, number2))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (8.3, 17.5) x (1.4, 6.3) = (-98.63, 76.79)\n&#39;       (8.3, 17.5) x (-2.7, 1.8) = (-53.91, -32.31)\n&#39;       (8.3, 17.5) x (3.1, -2.1) = (62.48, 36.82)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Negate_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Negate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Negate(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the additive inverse of a specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Negate (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The result of the <span class=\"xref\">stem.Numerics.Complex.Real*</span> and <span class=\"xref\">stem.Numerics.Complex.Imaginary*</span> components of the <code>value</code> parameter multiplied by -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The additive inverse of a complex number is a complex number that produces a value of <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Zero\" data-linktype=\"relative-path\">Zero</a> when it is added to the original complex number. This method returns a complex number in which the real and imaginary components of the original complex number are multiplied by -1.  </p>\n<p> The Negate method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator, <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_op_UnaryNegation_\" data-linktype=\"relative-path\">op_UnaryNegation</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example obtains the additive inverse of each element in an array of complex numbers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Negate#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values= { Complex.One, \n                          new Complex(-7.1, 2.5), \n                          new Complex(1.3, -4.2), \n                          new Complex(-3.3, -1.8) };\n      foreach (Complex c1 in values)\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, c1, Complex.Negate(c1));\n   }\n}\n// The example displays the following output:\n//       (1, 0) --&gt; (-1, 0)\n//       (-7.1, 2.5) --&gt; (7.1, -2.5)\n//       (1.3, -4.2) --&gt; (-1.3, 4.2)\n//       (-3.3, -1.8) --&gt; (3.3, 1.8)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Negate#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { Complex.One, \n                                  New Complex(-7.1, 2.5), \n                                  New Complex(1.3, -4.2), \n                                  New Complex(-3.3, -1.8) }\n      For Each c1 In values\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, c1, Complex.Negate(c1))\n      Next                                    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (1, 0) --&gt; (-1, 0)\n&#39;       (-7.1, 2.5) --&gt; (7.1, -2.5)\n&#39;       (1.3, -4.2) --&gt; (-1.3, 4.2)\n&#39;       (-3.3, -1.8) --&gt; (3.3, 1.8)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Pow_System_Numerics_Complex_System_Double_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Pow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pow(Complex,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a specified complex number raised to a power specified by a double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Pow (System.Numerics.Complex value, double power);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number to be raised to a power.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>power</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A double-precision floating-point number that specifies a power.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The complex number <code>value</code> raised to the power <code>power</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">System.Numerics.Complex</a>, the method returns <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">System.Numerics.Complex</a>. For other values, if <code>power</code> is 0, the method returns <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">System.Numerics.Complex</a>, and if <code>power</code> is 1, it returns <code>value</code>.  </p>\n<p> This method corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Pow_\" data-linktype=\"relative-path\">Pow</a> method for primitive numeric types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates exponentiation using a complex number and an exponent whose value ranges from -1 to 10.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Pow#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim value As New Complex(12, -6)\n      For power As Integer = -1 To 10\n         Console.WriteLine(&quot;{0} ^ {1,2} = {2:N2}&quot;, value, power, \n                           Complex.Pow(value, power))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    (12, -6) ^ -1 = (0.07, 0.03)\n&#39;    (12, -6) ^  0 = (1.00, 0.00)\n&#39;    (12, -6) ^  1 = (12.00, -6.00)\n&#39;    (12, -6) ^  2 = (108.00, -144.00)\n&#39;    (12, -6) ^  3 = (432.00, -2,376.00)\n&#39;    (12, -6) ^  4 = (-9,072.00, -31,104.00)\n&#39;    (12, -6) ^  5 = (-295,488.00, -318,816.00)\n&#39;    (12, -6) ^  6 = (-5,458,752.00, -2,052,864.00)\n&#39;    (12, -6) ^  7 = (-77,822,208.00, 8,118,144.00)\n&#39;    (12, -6) ^  8 = (-885,157,632.00, 564,350,976.00)\n&#39;    (12, -6) ^  9 = (-7,235,785,728.00, 12,083,157,504.00)\n&#39;    (12, -6) ^ 10 = (-14,330,483,712.00, 188,412,604,416.00)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Pow#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex value = new Complex(12, -6);\n      for (int power = -1; power &lt;= 10; power++)\n         Console.WriteLine(&quot;{0} ^ {1,2} = {2:N2}&quot;, value, power, \n                           Complex.Pow(value, power));\n   }\n}\n// The example displays the following output:\n//    (12, -6) ^ -1 = (0.07, 0.03)\n//    (12, -6) ^  0 = (1.00, 0.00)\n//    (12, -6) ^  1 = (12.00, -6.00)\n//    (12, -6) ^  2 = (108.00, -144.00)\n//    (12, -6) ^  3 = (432.00, -2,376.00)\n//    (12, -6) ^  4 = (-9,072.00, -31,104.00)\n//    (12, -6) ^  5 = (-295,488.00, -318,816.00)\n//    (12, -6) ^  6 = (-5,458,752.00, -2,052,864.00)\n//    (12, -6) ^  7 = (-77,822,208.00, 8,118,144.00)\n//    (12, -6) ^  8 = (-885,157,632.00, 564,350,976.00)\n//    (12, -6) ^  9 = (-7,235,785,728.00, 12,083,157,504.00)\n//    (12, -6) ^ 10 = (-14,330,483,712.00, 188,412,604,416.00)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Pow_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Pow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pow(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a specified complex number raised to a power specified by a complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Pow (System.Numerics.Complex value, System.Numerics.Complex power);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number to be raised to a power.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>power</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number that specifies a power.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The complex number <code>value</code> raised to the power <code>power</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Reciprocal_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Reciprocal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reciprocal(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the multiplicative inverse of a complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Reciprocal (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The reciprocal of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The reciprocal, or multiplicative inverse, of a number <em>x</em> is a number <em>y</em> where <em>x</em> multiplied by <em>y</em> yields 1. The reciprocal of a complex number is the complex number that produces <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">System.Numerics.Complex</a> when the two numbers are multiplied. If a complex number is represented by a +bi, its reciprocal is represented by the expression a/(a<sup>2</sup>+b<sup>2</sup>) + -b/(a<sup>2</sup> + b<sup>2</sup>).  </p>\n<p> If value is <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">System.Numerics.Complex</a>, the method returns <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">System.Numerics.Complex</a>. Otherwise, it returns the result of the expression <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">System.Numerics.Complex</a>/<code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Reciprocal method to calculate the reciprocal values of several complex numbers. It also demonstrates that the result of multiplying a complex number by its reciprocal is <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">System.Numerics.Complex</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Reciprocal#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(1, 1), \n                           new Complex(-1, 1), \n                           new Complex(10, -1),\n                           new Complex(3, 5) };\n      foreach (Complex value in values)\n      {         \n         Complex r1 = Complex.Reciprocal(value);                   \n         Console.WriteLine(&quot;{0:N0} x {1:N2} = {2:N2}&quot;, \n                           value, r1, value * r1);\n      }\n   }\n}\n// The example displays the following output:\n//       (1, 1) x (0.50, -0.50) = (1.00, 0.00)\n//       (-1, 1) x (-0.50, -0.50) = (1.00, 0.00)\n//       (10, -1) x (0.10, 0.01) = (1.00, 0.00)\n//       (3, 5) x (0.09, -0.15) = (1.00, 0.00)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Reciprocal#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(1, 1), \n                                  New Complex(-1, 1), \n                                  New Complex(10, -1),\n                                  New Complex(3, 5) }\n      For Each value As Complex In values         \n         Dim r1 As Complex = Complex.Reciprocal(value)                   \n         Console.WriteLine(&quot;{0:N0} x {1:N2} = {2:N2}&quot;, \n                           value, r1, value * r1)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (1, 1) x (0.50, -0.50) = (1.00, 0.00)\n&#39;       (-1, 1) x (-0.50, -0.50) = (1.00, 0.00)\n&#39;       (10, -1) x (0.10, 0.01) = (1.00, 0.00)\n&#39;       (3, 5) x (0.09, -0.15) = (1.00, 0.00)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Sin_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Sin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sin(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the sine of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Sin (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The sine of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sin method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Sin_\" data-linktype=\"relative-path\">Sin</a> method for real numbers.  </p>\n<p> The Sin method uses the following formula to calculate the sine of the complex number a + bi:  </p>\n<p> (<a class=\"xref\" href=\"system.math#System_Math_Sin_\" data-linktype=\"relative-path\">Sin</a>(a) * <a class=\"xref\" href=\"system.math#System_Math_Cosh_\" data-linktype=\"relative-path\">Cosh</a>(b), <a class=\"xref\" href=\"system.math#System_Math_Cos_\" data-linktype=\"relative-path\">Cos</a>(a) * <a class=\"xref\" href=\"system.math#System_Math_Sinh_\" data-linktype=\"relative-path\">Sinh</a>(b))</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Sin method. It shows that passing the value returned by the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Asin_\" data-linktype=\"relative-path\">Asin</a> method to the Sin method returns the original <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Asin#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(2.3, 1.4),\n                           new Complex(-2.3, 1.4), \n                           new Complex(-2.3, -1.4),\n                           new Complex(2.3, -1.4) };\n      foreach (Complex value in values)\n         Console.WriteLine(&quot;Sin(Asin({0})) = {1}&quot;, \n                            value, Complex.Sin(Complex.Asin(value)));\n   }\n}\n// The example displays the following output:\n//       Sin(Asin((2.3, 1.4))) = (2.3, 1.4)\n//       Sin(Asin((-2.3, 1.4))) = (-2.3, 1.4)\n//       Sin(Asin((-2.3, -1.4))) = (-2.3, -1.4)\n//       Sin(Asin((2.3, -1.4))) = (2.3, -1.4)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Asin#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(2.3, 1.4),\n                                  New Complex(-2.3, 1.4), \n                                  New Complex(-2.3, -1.4),\n                                  New Complex(2.3, -1.4) }\n      For Each value As Complex In values\n         Console.WriteLine(&quot;Sin(Asin({0})) = {1}&quot;, \n                            value, Complex.Sin(Complex.Asin(value)))\n      Next                      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Sin(Asin((2.3, 1.4))) = (2.3, 1.4)\n&#39;       Sin(Asin((-2.3, 1.4))) = (-2.3, 1.4)\n&#39;       Sin(Asin((-2.3, -1.4))) = (-2.3, -1.4)\n&#39;       Sin(Asin((2.3, -1.4))) = (2.3, -1.4)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Sinh_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Sinh_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sinh(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hyperbolic sine of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Sinh (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The hyperbolic sine of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sinh method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Sinh_\" data-linktype=\"relative-path\">Sinh</a> method for real numbers.  </p>\n<p> The Sinh method uses the following formula to calculate the hyperbolic sine of the complex number a + bi:  </p>\n<p> (<a class=\"xref\" href=\"system.math#System_Math_Sinh_\" data-linktype=\"relative-path\">Sinh</a>(a) * <a class=\"xref\" href=\"system.math#System_Math_Cos_\" data-linktype=\"relative-path\">Cos</a>(b), <a class=\"xref\" href=\"system.math#System_Math_Cosh_\" data-linktype=\"relative-path\">Cosh</a>(a) * <a class=\"xref\" href=\"system.math#System_Math_Sin_\" data-linktype=\"relative-path\">Sin</a>(b))</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Sqrt_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Sqrt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sqrt(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the square root of a specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Sqrt (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The square root of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The square root of the complex number <code>value</code> is calculated by using the following formula:  </p>\n<p> <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_FromPolarCoordinates_\" data-linktype=\"relative-path\">FromPolarCoordinates</a>(<a href=\"assetId:///M:System.Math.Sqrt(System.Double)?qualifyHint=True&amp;autoUpgrade=True\" data-linktype=\"external\">Math.Sqrt</a>(<code>value</code>.<a href=\"assetId:///P:System.Numerics.Complex.Magnitude?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">Magnitude</a>), <code>value</code>.<a href=\"assetId:///P:System.Numerics.Complex.Phase?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">Phase</a>/2.0)  </p>\n<p> The Sqrt method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Sqrt_\" data-linktype=\"relative-path\">Sqrt</a> method for real numbers.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Subtract_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Subtract_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Subtract(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts one complex number from another and returns the result.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Subtract (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to subtract from (the minuend).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to subtract (the subtrahend).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The result of subtracting <code>right</code> from <code>left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:  </p>\n<p> (a - c) + (b - d)i  </p>\n<p> If the method call results in an overflow in either the real or imaginary component, the value of that component is either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> Languages that do not support custom operators can use the Subtract method to perform subtraction using complex numbers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example subtracts each complex number in an array from a complex number.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Subtract#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex c1 = new Complex(4.93, 6.87);\n      Complex[] values = { new Complex(12.5, 9.6), \n                           new Complex(4.3, -8.1), \n                           new Complex(-1.9, 7.4), \n                           new Complex(-5.3, -6.6) };\n\n      foreach (var c2 in values)\n         Console.WriteLine(&quot;{0} - {1} = {2}&quot;, c1, c2, \n                           Complex.Subtract(c1, c2));\n   }\n}\n// The example displays the following output:\n//       (4.93, 6.87) - (12.5, 9.6) = (-7.57, -2.73)\n//       (4.93, 6.87) - (4.3, -8.1) = (0.63, 14.97)\n//       (4.93, 6.87) - (-1.9, 7.4) = (6.83, -0.53)\n//       (4.93, 6.87) - (-5.3, -6.6) = (10.23, 13.47)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Subtract#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c1 As New Complex(4.93, 6.87)\n      Dim values() As Complex = { New Complex(12.5, 9.6), \n                                  New Complex(4.3, -8.1), \n                                  New Complex(-1.9, 7.4), \n                                  New Complex(-5.3, -6.6) }\n\n      For Each c2 In values\n         Console.WriteLine(&quot;{0} - {1} = {2}&quot;, c1, c2, \n                           Complex.Subtract(c1, c2))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (4.93, 6.87) - (12.5, 9.6) = (-7.57, -2.73)\n&#39;       (4.93, 6.87) - (4.3, -8.1) = (0.63, 14.97)\n&#39;       (4.93, 6.87) - (-1.9, 7.4) = (6.83, -0.53)\n&#39;       (4.93, 6.87) - (-5.3, -6.6) = (10.23, 13.47)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Tan_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Tan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tan(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the tangent of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Tan (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The tangent of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Tan method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Tan_\" data-linktype=\"relative-path\">Tan</a> method for real numbers.  </p>\n<p> The Tan method uses the following formula to calculate the tangent of the complex number <code>value</code>:  </p>\n<p> <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Sin_\" data-linktype=\"relative-path\">Sin</a>(<code>value</code>) / <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Cos_\" data-linktype=\"relative-path\">Cos</a>(<code>value</code>)</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Tan method. It shows that passing the value returned by the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Atan_\" data-linktype=\"relative-path\">Atan</a> method to the Tan method returns the original <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Atan#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(2.5, 1.5), \n                                  New Complex(2.5, -1.5), \n                                  New Complex(-2.5, 1.5), \n                                  New Complex(-2.5, -1.5) }\n      For Each value As Complex In values\n         Console.WriteLine(&quot;Tan(Atan({0})) = {1}&quot;, \n                            value, Complex.Tan(Complex.Atan(value)))\n      Next                               \n   End Sub\nEnd Module\n&#39; The example displays the following example:\n&#39;       Tan(Atan((2.5, 1.5))) = (2.5, 1.5)\n&#39;       Tan(Atan((2.5, -1.5))) = (2.5, -1.5)\n&#39;       Tan(Atan((-2.5, 1.5))) = (-2.5, 1.5)\n&#39;       Tan(Atan((-2.5, -1.5))) = (-2.5, -1.5)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Atan#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values = { new Complex(2.5, 1.5), \n                           new Complex(2.5, -1.5), \n                           new Complex(-2.5, 1.5), \n                           new Complex(-2.5, -1.5) };\n      foreach (Complex value in values)\n         Console.WriteLine(&quot;Tan(Atan({0})) = {1}&quot;, \n                            value, Complex.Tan(Complex.Atan(value)));\n   }\n}\n// The example displays the following output:\n//       Tan(Atan((2.5, 1.5))) = (2.5, 1.5)\n//       Tan(Atan((2.5, -1.5))) = (2.5, -1.5)\n//       Tan(Atan((-2.5, 1.5))) = (-2.5, 1.5)\n//       Tan(Atan((-2.5, -1.5))) = (-2.5, -1.5)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_Tanh_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_Tanh_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tanh(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hyperbolic tangent of the specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex Tanh (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A complex number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The hyperbolic tangent of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Tanh method for complex numbers corresponds to the <a class=\"xref\" href=\"system.math#System_Math_Tanh_\" data-linktype=\"relative-path\">Tanh</a> method for real numbers.  </p>\n<p> The Tanh method uses the following formula to calculate the hyperbolic tangent of the complex number <code>value</code>:  </p>\n<p> <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Sinh_\" data-linktype=\"relative-path\">Sinh</a>(<code>value</code>) / <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Cosh_\" data-linktype=\"relative-path\">Cosh</a>(<code>value</code>)</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_ToString\">\r\n    \r\n            <a id=\"System_Numerics_Complex_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current complex number to its equivalent string representation in Cartesian form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current instance in Cartesian form.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default string representation of a complex number displays the number using its Cartesian coordinates in the form <code>(</code><em>a</em><code>,</code> <em>b</em><code>)</code>, where <em>a</em> is the real part of the complex number, and <em>b</em> is its imaginary part. Both <em>a</em> and <em>b</em> are formatted using the general format specifier (&quot;G&quot;) and the conventions of the current system culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the string representation of several complex numbers. The output uses the formatting conventions of the English - United States (&quot;en-US&quot;) culture, which, in this case, is the current system culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.ToString#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] c = { new Complex(17.3, 14.1), \n                      new Complex(-18.9, 147.2), \n                      new Complex(13.472, -18.115), \n                      new Complex(-11.154, -17.002) };\n      foreach (Complex c1 in c)\n         Console.WriteLine(c1.ToString());\n   }\n}\n// The example display the following output:\n//       (17.3, 14.1)\n//       (-18.9, 147.2)\n//       (13.472, -18.115)\n//       (-11.154, -17.002)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.ToString#1\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c() As Complex = { New Complex(17.3, 14.1), \n                             New Complex(-18.9, 147.2), \n                             New Complex(13.472, -18.115), \n                             New Complex(-11.154, -17.002) }\n      For Each c1 As Complex In c\n         Console.WriteLine(c1.ToString())\n      Next                          \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (17.3, 14.1)\n&#39;       (-18.9, 147.2)\n&#39;       (13.472, -18.115)\n&#39;       (-11.154, -17.002)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current instance in Cartesian form, as specified by <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form <code>(</code><em>a</em><code>,</code> <em>b</em><code>)</code>, where <em>a</em> is the real part of the complex number, and <em>b</em> is its imaginary part. Both <em>a</em> and <em>b</em> are formatted using the general format specifier (&quot;G&quot;) and the conventions of the culture defined by <code>provider</code>.  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string. If <code>provider</code> is <code>null</code>, the returned string is formatted using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of the current culture.  </p>\n<p> The <code>provider</code> parameter can be one of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that supplies formatting information  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that supplies formatting information.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that supplies formatting information.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the string representation of several complex numbers. The result uses the formatting conventions of the English - United States (&quot;en-US&quot;) and French - France (&quot;fr-FR&quot;) cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.ToString#2\">using System;\nusing System.Globalization;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] c = { new Complex(17.3, 14.1), \n                      new Complex(-18.9, 147.2), \n                      new Complex(13.472, -18.115), \n                      new Complex(-11.154, -17.002) };\n      CultureInfo[] cultures = { new CultureInfo(&quot;en-US&quot;), \n                                 new CultureInfo(&quot;fr-FR&quot;) };\n      foreach (Complex c1 in c)\n      {\n         foreach (CultureInfo culture in cultures)\n            Console.Write(&quot;{0} ({1})    &quot;, c1.ToString(culture), culture.Name);\n\n         Console.WriteLine();\n      }                          \n   }\n}\n// The example displays the following output:\n//       (17.3, 14.1) (en-US)    (17,3, 14,1) (fr-FR)\n//       (-18.9, 147.2) (en-US)    (-18,9, 147,2) (fr-FR)\n//       (13.472, -18.115) (en-US)    (13,472, -18,115) (fr-FR)\n//       (-11.154, -17.002) (en-US)    (-11,154, -17,002) (fr-FR)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.ToString#2\">Imports System.Globalization\nImports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c() As Complex = { New Complex(17.3, 14.1), \n                             New Complex(-18.9, 147.2), \n                             New Complex(13.472, -18.115), \n                             New Complex(-11.154, -17.002) }\n      Dim cultures() As CultureInfo = { New CultureInfo(&quot;en-US&quot;), \n                                        New CultureInfo(&quot;fr-FR&quot;) } \n      For Each c1 As Complex In c\n         For Each culture As CultureInfo In cultures\n            Console.Write(&quot;{0} ({1})    &quot;, c1.ToString(culture), culture.Name)\n         Next\n         Console.WriteLine()\n      Next                          \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (17.3, 14.1) (en-US)    (17,3, 14,1) (fr-FR)\n&#39;       (-18.9, 147.2) (en-US)    (-18,9, 147,2) (fr-FR)\n&#39;       (13.472, -18.115) (en-US)    (13,472, -18,115) (fr-FR)\n&#39;       (-11.154, -17.002) (en-US)    (-11,154, -17,002) (fr-FR)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_ToString_System_String_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom numeric format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current instance in Cartesian form.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is not a valid format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form <code>(</code><em>a</em><code>,</code> <em>b</em><code>)</code>, where <em>a</em> is the real part of the complex number, and <em>b</em> is its imaginary part. Both <em>a</em> and <em>b</em> are formatted using the format string specified by <code>format</code>. The <code>format</code> parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers. If <code>format</code> is equal to <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> or is <code>null</code>, the real and imaginary parts of the complex number are formatted with the general format specifier (&quot;G&quot;). If <code>format</code> is any other value, the method throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:  </p>\n<ul>\n<li><p>For more information about numeric format strings, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting in the .NET Framework, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The format of the returned string is determined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture. Depending on the <code>format</code> parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a> overload.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example initializes a complex number and displays it using several standard format strings.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.ToString#3\">Imports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c() As Complex = { New Complex(17.3, 14.1), \n                             New Complex(-18.9, 147.2), \n                             New Complex(13.472, -18.115), \n                             New Complex(-11.154, -17.002) }\n      Dim formats() As String = { &quot;F2&quot;, &quot;N2&quot;, &quot;G5&quot; } \n      \n      For Each c1 As Complex In c\n         For Each format As String In formats\n            Console.WriteLine(&quot;{0}: {1}    &quot;, format, c1.ToString(format))\n         Next\n         Console.WriteLine()\n      Next                          \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       F2: (17.30, 14.10)\n&#39;       N2: (17.30, 14.10)\n&#39;       G5: (17.3, 14.1)\n&#39;       \n&#39;       F2: (-18.90, 147.20)\n&#39;       N2: (-18.90, 147.20)\n&#39;       G5: (-18.9, 147.2)\n&#39;       \n&#39;       F2: (13.47, -18.12)\n&#39;       N2: (13.47, -18.12)\n&#39;       G5: (13.472, -18.115)\n&#39;       \n&#39;       F2: (-11.15, -17.00)\n&#39;       N2: (-11.15, -17.00)\n&#39;       G5: (-11.154, -17.002)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.ToString#3\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] c = { new Complex(17.3, 14.1), \n                      new Complex(-18.9, 147.2), \n                      new Complex(13.472, -18.115), \n                      new Complex(-11.154, -17.002) };\n      string[] formats = { &quot;F2&quot;, &quot;N2&quot;, &quot;G5&quot; }; \n      \n      foreach (Complex c1 in c)\n      {\n         foreach (string format in formats)\n            Console.WriteLine(&quot;{0}: {1}    &quot;, format, c1.ToString(format));\n\n         Console.WriteLine();\n      }                          \n   }\n}\n// The example displays the following output:\n//       F2: (17.30, 14.10)\n//       N2: (17.30, 14.10)\n//       G5: (17.3, 14.1)\n//       \n//       F2: (-18.90, 147.20)\n//       N2: (-18.90, 147.20)\n//       G5: (-18.9, 147.2)\n//       \n//       F2: (13.47, -18.12)\n//       N2: (13.47, -18.12)\n//       G5: (13.472, -18.115)\n//       \n//       F2: (-11.15, -17.00)\n//       N2: (-11.15, -17.00)\n//       G5: (-11.154, -17.002)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom numeric format string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current instance in Cartesian form, as specified by <code>format</code> and <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is not a valid format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string representation of the complex number returned by this method displays the number using its Cartesian coordinates in the form <code>(</code><em>a</em><code>,</code> <em>b</em><code>)</code>, where <em>a</em> is the real part of the complex number, and <em>b</em> is its imaginary part. Both <em>a</em> and <em>b</em> are formatted using the format string specified by <code>format</code>. The <code>format</code> parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers. If <code>format</code> is equal to <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> or is <code>null</code>, the real and imaginary parts of the complex number are formatted with the general format specifier (&quot;G&quot;). If <code>format</code> is any other value, the method throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following topics:  </p>\n<ul>\n<li><p>For more information about numeric format strings, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting in the .NET Framework, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of the real and imaginary numbers in the returned string. Depending on the <code>format</code> parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. If <code>provider</code> is <code>null</code>, the returned string is formatted using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of the current culture.  </p>\n<p>The <code>provider</code> parameter can be one of the following:  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that supplies formatting information  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that supplies formatting information.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that supplies formatting information.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of complex numbers, and displays each using several standard format strings as well as <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects that represent the English - United States (&quot;en-US&quot;) and French - France (&quot;fr-FR&quot;) cultures.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.ToString#4\">Imports System.Globalization\nImports System.Numerics\n\nModule Example\n   Public Sub Main()\n      Dim c() As Complex = { New Complex(17.3, 14.1), \n                             New Complex(-18.9, 147.2), \n                             New Complex(13.472, -18.115), \n                             New Complex(-11.154, -17.002) }\n      Dim cultures() As CultureInfo = { New CultureInfo(&quot;en-US&quot;), \n                                        New CultureInfo(&quot;fr-FR&quot;) } \n      Dim formats() As String = { &quot;F2&quot;, &quot;N2&quot;, &quot;G5&quot; } \n\n      For Each c1 As Complex In c\n         For Each format As String In formats\n            Console.Write(&quot;{0} format string:   &quot;, format)\n            For Each culture As CultureInfo In cultures\n               Console.Write(&quot;{0} ({1})    &quot;, c1.ToString(format, culture), \n                                              culture.Name)\n            Next\n            Console.WriteLine()\n         Next\n         Console.WriteLine()\n      Next                          \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    F2 format string:   (17.30, 14.10) (en-US)    (17,30, 14,10) (fr-FR)\n&#39;    N2 format string:   (17.30, 14.10) (en-US)    (17,30, 14,10) (fr-FR)\n&#39;    G5 format string:   (17.3, 14.1) (en-US)    (17,3, 14,1) (fr-FR)\n&#39;    \n&#39;    F2 format string:   (-18.90, 147.20) (en-US)    (-18,90, 147,20) (fr-FR)\n&#39;    N2 format string:   (-18.90, 147.20) (en-US)    (-18,90, 147,20) (fr-FR)\n&#39;    G5 format string:   (-18.9, 147.2) (en-US)    (-18,9, 147,2) (fr-FR)\n&#39;    \n&#39;    F2 format string:   (13.47, -18.12) (en-US)    (13,47, -18,12) (fr-FR)\n&#39;    N2 format string:   (13.47, -18.12) (en-US)    (13,47, -18,12) (fr-FR)\n&#39;    G5 format string:   (13.472, -18.115) (en-US)    (13,472, -18,115) (fr-FR)\n&#39;    \n&#39;    F2 format string:   (-11.15, -17.00) (en-US)    (-11,15, -17,00) (fr-FR)\n&#39;    N2 format string:   (-11.15, -17.00) (en-US)    (-11,15, -17,00) (fr-FR)\n&#39;    G5 format string:   (-11.154, -17.002) (en-US)    (-11,154, -17,002) (fr-FR)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.ToString#4\">using System;\nusing System.Globalization;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] c = { new Complex(17.3, 14.1), \n                      new Complex(-18.9, 147.2), \n                      new Complex(13.472, -18.115), \n                      new Complex(-11.154, -17.002) };\n      CultureInfo[] cultures = { new CultureInfo(&quot;en-US&quot;), \n                                 new CultureInfo(&quot;fr-FR&quot;) }; \n      string[] formats = { &quot;F2&quot;, &quot;N2&quot;, &quot;G5&quot; }; \n\n      foreach (Complex c1 in c)\n      {\n         foreach (string format in formats)\n         {\n            Console.Write(&quot;{0} format string:   &quot;, format);\n            foreach (CultureInfo culture in cultures)\n               Console.Write(&quot;{0} ({1})    &quot;, c1.ToString(format, culture), culture.Name);\n\n            Console.WriteLine();\n         }\n         Console.WriteLine();\n      }                          \n   }\n}\n// The example displays the following output:\n//    F2 format string:   (17.30, 14.10) (en-US)    (17,30, 14,10) (fr-FR)\n//    N2 format string:   (17.30, 14.10) (en-US)    (17,30, 14,10) (fr-FR)\n//    G5 format string:   (17.3, 14.1) (en-US)    (17,3, 14,1) (fr-FR)\n//    \n//    F2 format string:   (-18.90, 147.20) (en-US)    (-18,90, 147,20) (fr-FR)\n//    N2 format string:   (-18.90, 147.20) (en-US)    (-18,90, 147,20) (fr-FR)\n//    G5 format string:   (-18.9, 147.2) (en-US)    (-18,9, 147,2) (fr-FR)\n//    \n//    F2 format string:   (13.47, -18.12) (en-US)    (13,47, -18,12) (fr-FR)\n//    N2 format string:   (13.47, -18.12) (en-US)    (13,47, -18,12) (fr-FR)\n//    G5 format string:   (13.472, -18.115) (en-US)    (13,472, -18,115) (fr-FR)\n//    \n//    F2 format string:   (-11.15, -17.00) (en-US)    (-11,15, -17,00) (fr-FR)\n//    N2 format string:   (-11.15, -17.00) (en-US)    (-11,15, -17,00) (fr-FR)\n//    G5 format string:   (-11.154, -17.002) (en-US)    (-11,154, -17,002) (fr-FR)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Addition_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Addition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Addition(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Adds two complex numbers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Addition (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>left</code> and <code>right</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Addition method defines the addition operation for complex numbers. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Add#3\">      Complex c1 = new Complex(1.2, 2.3);\n      Complex c2 = new Complex(2.1, 3.2);\n      Complex c3 = c1 + c2;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Add#3\">      Dim c1 As New Complex(1.2, 2.3)\n      Dim c2 As New Complex(2.1, 3.2)\n      Dim c3 As Complex = c1 + c2\n</code></pre><p> The addition of a complex number, a + bi, and a second complex number, c + di, takes the following form:  </p>\n<p> (a + c) + (b + d)i  </p>\n<p> If the method call results in an overflow in either the real or imaginary component, the value of that component is either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Add_\" data-linktype=\"relative-path\">Add</a> method instead.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates addition with complex numbers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Add#2\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Complex[] values= { new Complex(12.3, -1.4), \n                          new Complex(-6.2, 3.1), \n                          new Complex(8.9, 1.5) };   \n      foreach (var c1 in values)\n         foreach (var c2 in values)\n            Console.WriteLine(&quot;{0} + {1} = {2}&quot;, c1, c2, c1 + c2);\n   }\n}\n// The example displays the following output:\n//       (12.3, -1.4) + (12.3, -1.4) = (24.6, -2.8)\n//       (12.3, -1.4) + (-6.2, 3.1) = (6.1, 1.7)\n//       (12.3, -1.4) + (8.9, 1.5) = (21.2, 0.1)\n//       (-6.2, 3.1) + (12.3, -1.4) = (6.1, 1.7)\n//       (-6.2, 3.1) + (-6.2, 3.1) = (-12.4, 6.2)\n//       (-6.2, 3.1) + (8.9, 1.5) = (2.7, 4.6)\n//       (8.9, 1.5) + (12.3, -1.4) = (21.2, 0.1)\n//       (8.9, 1.5) + (-6.2, 3.1) = (2.7, 4.6)\n//       (8.9, 1.5) + (8.9, 1.5) = (17.8, 3)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Add#2\">Imports System.Numerics\n\nModule modMain\n   Public Sub Main()\n      Dim values() As Complex = { New Complex(12.3, -1.4), \n                                  New Complex(-6.2, 3.1), \n                                  New Complex(8.9, 1.5) }   \n      For Each c1 In values\n         For Each c2 In values\n            Console.WriteLine(&quot;{0} + {1} = {2}&quot;, c1, c2, c1 + c2)\n         Next\n      Next      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (12.3, -1.4) + (12.3, -1.4) = (24.6, -2.8)\n&#39;       (12.3, -1.4) + (-6.2, 3.1) = (6.1, 1.7)\n&#39;       (12.3, -1.4) + (8.9, 1.5) = (21.2, 0.1)\n&#39;       (-6.2, 3.1) + (12.3, -1.4) = (6.1, 1.7)\n&#39;       (-6.2, 3.1) + (-6.2, 3.1) = (-12.4, 6.2)\n&#39;       (-6.2, 3.1) + (8.9, 1.5) = (2.7, 4.6)\n&#39;       (8.9, 1.5) + (12.3, -1.4) = (21.2, 0.1)\n&#39;       (8.9, 1.5) + (-6.2, 3.1) = (2.7, 4.6)\n&#39;       (8.9, 1.5) + (8.9, 1.5) = (17.8, 3)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Division_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Division_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Division(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Divides a specified complex number by another specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Division (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to be divided.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to divide by.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The result of dividing <code>left</code> by <code>right</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Division method defines the division operation for complex numbers. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Divide#2\">      Complex c1 = new Complex(2.3, 3.7);\n      Complex c2 = new Complex(1.4, 2.3);\n      Complex c3 = c1 / c2;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Divide#2\">      Dim c1 As New Complex(2.3, 3.7)\n      Dim c2 As New Complex(1.4, 2.3)\n      Dim c3 As Complex = c1 / c2 \n</code></pre><p> The division of a complex number, a + bi, and a second complex number, c + di, takes the following form:  </p>\n<p> ((ac + bd) / (c<sup>2</sup> + d<sup>2</sup>)) + ((bc - ad) / (c<sup>2</sup> + d<sup>2</sup>)i  </p>\n<p> If the division results in an overflow in either the real or imaginary component, the value of that component is either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> Languages that do not support custom operators and operator overloading can call the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Divide_\" data-linktype=\"relative-path\">Divide</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Equality_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether two complex numbers are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first complex number to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second complex number to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equality method defines the operation of the equality operator for <a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Equals#9\">      Complex c1 = new Complex(12.6, 4.3);\n      Complex c2 = new Complex(11.1, 8.9);\n      if (c1 == c2) \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Equals#9\">      Dim c1 As New Complex(12.6, 4.3)\n      Dim c2 As New Complex(11.1, 8.9)\n      If c1 = c2 Then \n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Equals_System_Numerics_Complex_\" data-linktype=\"relative-path\">Equals(Complex)</a> method instead.  </p>\n<p> Two complex numbers are equal if their real parts are equal and their imaginary parts are equal. The Equality method is equivalent to the following expression:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Equals#3\">      return this.Real == value.Real &amp;&amp; this.Imaginary == value.Imaginary;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Equals#3\">      Return Me.Real = value.Real AndAlso Me.Imaginary = value.Imaginary\n</code></pre><p> Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal. For more information and a possible workaround, see the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Equals_System_Numerics_Complex_\" data-linktype=\"relative-path\">Equals(Complex)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Explicit_System_Decimal_to_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Explicit_System_Numerics_BigInteger_to_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(BigInteger)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Explicit (System.Numerics.BigInteger value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_Byte_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Byte)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_Double_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Double)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_Int16_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Int16)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_Int32_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Int32)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_Int64_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Int64)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_SByte_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(SByte)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_Single_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Single)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_UInt16_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(UInt16)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_UInt32_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(UInt32)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Implicit_System_UInt64_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(UInt64)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Implicit (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Inequality_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether two complex numbers are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_op_Equality_\" data-linktype=\"relative-path\">op_Equality</a> method defines the operation of the inequality operator for complex numbers. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Inequality#1\">      Dim c1 As New Complex(12.6, 4.3)\n      Dim c2 As New Complex(11.1, 8.9)\n      If c1 &lt;&gt; c2 Then \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Inequality#1\">      Complex c1 = new Complex(12.6, 4.3);\n      Complex c2 = new Complex(11.1, 8.9);\n      if (c1 != c2) \n</code></pre><p> Languages that do not support custom operators can test for inequality by calling the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Equals_System_Numerics_Complex_\" data-linktype=\"relative-path\">Equals(Complex)</a> method and reversing its value.  </p>\n<p> Note that, because of differences in precision, two complex numbers that are apparently equivalent can be considered unequal. One possible workaround is to implement a comparison method that returns <code>true</code> only if the difference between the two real and imaginary parts of the complex numbers exceeds a certain threshold (such as .01% of the value of the real or imaginary component of one of the complex numbers). For more information, see the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Equals_System_Numerics_Complex_\" data-linktype=\"relative-path\">Equals(Complex)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Multiply_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Multiply(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies two specified complex numbers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Multiply (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The product of <code>left</code> and <code>right</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Multiply method defines the operation of the multiplication operator for complex numbers. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Multiply#2\">      Complex c1 = Complex.One;\n      Complex c2 = new Complex(1.4, 2.3);\n      Complex c3 = c1 * c2;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Multiply#2\">      Dim c1 As Complex = Complex.One\n      Dim c2 As New Complex(1.4, 2.3)\n      Dim c3 As Complex = c1 * c2\n</code></pre><p> The multiplication of a complex number, a + bi, and a second complex number, c + di, takes the following form:  </p>\n<p> (ac - bd) + (ad + bc)i  </p>\n<p> If the multiplication results in an overflow in either the real or imaginary component, the value of that component is either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Multiply_\" data-linktype=\"relative-path\">Multiply</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_Subtraction_System_Numerics_Complex_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_Subtraction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Subtraction(Complex,Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts a complex number from another complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_Subtraction (System.Numerics.Complex left, System.Numerics.Complex right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to subtract from (the minuend).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to subtract (the subtrahend).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The result of subtracting <code>right</code> from <code>left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Subtraction method defines the operation of the subtraction operator for complex numbers. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Subtract#2\">      System.Numerics.Complex c1 = new System.Numerics.Complex(6.7, -1.3);\n      System.Numerics.Complex c2 = new System.Numerics.Complex(1.4, 3.8);\n      System.Numerics.Complex result = c1 - c2;\n      Console.WriteLine(&quot;{0} - {1} = {2}&quot;, c1, c2, result);\n      // The example displays the following output:\n      //       (6.7, -1.3); - (1.4, 3.8); = (5.3, -5.1)      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Subtract#2\">      Dim c1 As New System.Numerics.Complex(6.7, -1.3)\n      Dim c2 As New System.Numerics.Complex(1.4, 3.8)\n      Dim result As System.Numerics.Complex = c1 - c2\n      Console.WriteLine(&quot;{0} - {1} = {2}&quot;, c1, c2, result)\n      &#39; The example displays the following output:\n      &#39;       (6.7, -1.3) - (1.4, 3.8) = (5.3, -5.1)      \n</code></pre><p> If the method call results in an overflow in either the real or imaginary component, the value of that component is either <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>.  </p>\n<p> The subtraction of a complex number, c + di, from another complex number, a + bi, takes the following form:  </p>\n<p> (a - c) + (b - d)i  </p>\n<p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Subtract_\" data-linktype=\"relative-path\">Subtract</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Numerics_Complex_op_UnaryNegation_System_Numerics_Complex_\">\r\n    \r\n            <a id=\"System_Numerics_Complex_op_UnaryNegation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_UnaryNegation(Complex)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the additive inverse of a specified complex number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Numerics.Complex op_UnaryNegation (System.Numerics.Complex value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to negate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.numerics.complex\" data-linktype=\"relative-path\">Complex</a></div>\r\n                  </div>\r\n                  <p>The result of the <span class=\"xref\">stem.Numerics.Complex.Real*</span> and <span class=\"xref\">stem.Numerics.Complex.Imaginary*</span> components of the <code>value</code> parameter multiplied by -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UnaryNegation method defines the operation of the unary negation (additive inverse) operator for complex numbers. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Numerics.Complex.Negate#2\">      Dim c1 As New Complex(1.7, 3.9)\n      Dim c2 As Complex = -c1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Numerics.Complex.Negate#2\">      Complex c1 = new Complex(1.7, 3.9);\n      Complex c2 = -c1;\n</code></pre><p> The resulting complex number produces a value of <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Zero\" data-linktype=\"relative-path\">Zero</a> 0 (zero) when it is added to the original complex number. Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.numerics.complex#System_Numerics_Complex_Negate_\" data-linktype=\"relative-path\">Negate</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Numerics.Complex.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Numerics.Complex.yml\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex..ctor\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Abs\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Acos\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Add\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Asin\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Atan\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Conjugate\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Cos\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Cosh\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Divide\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Equals\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Exp\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.FromPolarCoordinates\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Imaginary\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.ImaginaryOne\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Log\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Log10\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Magnitude\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Multiply\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Negate\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.One\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_Division\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_Division\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_Multiply\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_Multiply\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.op_op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Phase\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Pow\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Real\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Reciprocal\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Sin\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Sinh\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Sqrt\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Subtract\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Tan\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Tanh\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.ToString\">\r\n<meta name=\"APIName\" content=\"System.Numerics.Complex.Zero\">\r\n<meta name=\"APILocation\" content=\"System.Numerics.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3a56b76e-233d-d300-c0c9-c07b2280ce64\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a complex number.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Numerics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Numerics.Complex\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Numerics.Complex.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Numerics.Complex.yml","open_to_public_contributors":true,"api_name":["System.Numerics.Complex","System.Numerics.Complex..ctor","System.Numerics.Complex.Abs","System.Numerics.Complex.Acos","System.Numerics.Complex.Add","System.Numerics.Complex.Asin","System.Numerics.Complex.Atan","System.Numerics.Complex.Conjugate","System.Numerics.Complex.Cos","System.Numerics.Complex.Cosh","System.Numerics.Complex.Divide","System.Numerics.Complex.Equals","System.Numerics.Complex.Exp","System.Numerics.Complex.FromPolarCoordinates","System.Numerics.Complex.GetHashCode","System.Numerics.Complex.Imaginary","System.Numerics.Complex.ImaginaryOne","System.Numerics.Complex.Log","System.Numerics.Complex.Log10","System.Numerics.Complex.Magnitude","System.Numerics.Complex.Multiply","System.Numerics.Complex.Negate","System.Numerics.Complex.One","System.Numerics.Complex.op_Addition","System.Numerics.Complex.op_op_Addition","System.Numerics.Complex.op_Division","System.Numerics.Complex.op_op_Division","System.Numerics.Complex.op_Equality","System.Numerics.Complex.op_op_Equality","System.Numerics.Complex.op_Explicit","System.Numerics.Complex.op_op_Explicit","System.Numerics.Complex.op_Implicit","System.Numerics.Complex.op_op_Implicit","System.Numerics.Complex.op_Inequality","System.Numerics.Complex.op_op_Inequality","System.Numerics.Complex.op_Multiply","System.Numerics.Complex.op_op_Multiply","System.Numerics.Complex.op_Subtraction","System.Numerics.Complex.op_op_Subtraction","System.Numerics.Complex.op_UnaryNegation","System.Numerics.Complex.op_op_UnaryNegation","System.Numerics.Complex.Phase","System.Numerics.Complex.Pow","System.Numerics.Complex.Real","System.Numerics.Complex.Reciprocal","System.Numerics.Complex.Sin","System.Numerics.Complex.Sinh","System.Numerics.Complex.Sqrt","System.Numerics.Complex.Subtract","System.Numerics.Complex.Tan","System.Numerics.Complex.Tanh","System.Numerics.Complex.ToString","System.Numerics.Complex.Zero"],"api_location":["System.Numerics.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Numerics.Complex","System::Numerics::Complex","System.Numerics.Complex.#ctor","System::Numerics::Complex::#ctor","System.Numerics.Complex.Abs","System::Numerics::Complex::Abs","System.Numerics.Complex.Acos","System::Numerics::Complex::Acos","System.Numerics.Complex.Add","System::Numerics::Complex::Add","System.Numerics.Complex.Asin","System::Numerics::Complex::Asin","System.Numerics.Complex.Atan","System::Numerics::Complex::Atan","System.Numerics.Complex.Conjugate","System::Numerics::Complex::Conjugate","System.Numerics.Complex.Cos","System::Numerics::Complex::Cos","System.Numerics.Complex.Cosh","System::Numerics::Complex::Cosh","System.Numerics.Complex.Divide","System::Numerics::Complex::Divide","System.Numerics.Complex.Equals","System::Numerics::Complex::Equals","System.Numerics.Complex.Exp","System::Numerics::Complex::Exp","System.Numerics.Complex.FromPolarCoordinates","System::Numerics::Complex::FromPolarCoordinates","System.Numerics.Complex.GetHashCode","System::Numerics::Complex::GetHashCode","System.Numerics.Complex.Imaginary","System::Numerics::Complex::Imaginary","System.Numerics.Complex.ImaginaryOne","System::Numerics::Complex::ImaginaryOne","System.Numerics.Complex.Log","System::Numerics::Complex::Log","System.Numerics.Complex.Log10","System::Numerics::Complex::Log10","System.Numerics.Complex.Magnitude","System::Numerics::Complex::Magnitude","System.Numerics.Complex.Multiply","System::Numerics::Complex::Multiply","System.Numerics.Complex.Negate","System::Numerics::Complex::Negate","System.Numerics.Complex.One","System::Numerics::Complex::One","System.Numerics.Complex.op_Addition","System::Numerics::Complex::op_Addition","System.Numerics.Complex.op_Division","System::Numerics::Complex::op_Division","System.Numerics.Complex.op_Equality","System::Numerics::Complex::op_Equality","System.Numerics.Complex.op_Explicit","System::Numerics::Complex::op_Explicit","System.Numerics.Complex.op_Implicit","System::Numerics::Complex::op_Implicit","System.Numerics.Complex.op_Inequality","System::Numerics::Complex::op_Inequality","System.Numerics.Complex.op_Multiply","System::Numerics::Complex::op_Multiply","System.Numerics.Complex.op_Subtraction","System::Numerics::Complex::op_Subtraction","System.Numerics.Complex.op_UnaryNegation","System::Numerics::Complex::op_UnaryNegation","System.Numerics.Complex.Phase","System::Numerics::Complex::Phase","System.Numerics.Complex.Pow","System::Numerics::Complex::Pow","System.Numerics.Complex.Real","System::Numerics::Complex::Real","System.Numerics.Complex.Reciprocal","System::Numerics::Complex::Reciprocal","System.Numerics.Complex.Sin","System::Numerics::Complex::Sin","System.Numerics.Complex.Sinh","System::Numerics::Complex::Sinh","System.Numerics.Complex.Sqrt","System::Numerics::Complex::Sqrt","System.Numerics.Complex.Subtract","System::Numerics::Complex::Subtract","System.Numerics.Complex.Tan","System::Numerics::Complex::Tan","System.Numerics.Complex.Tanh","System::Numerics::Complex::Tanh","System.Numerics.Complex.ToString","System::Numerics::Complex::ToString","System.Numerics.Complex.Zero","System::Numerics::Complex::Zero"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3a56b76e-233d-d300-c0c9-c07b2280ce64","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Numerics/Complex.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Complex struct | Microsoft Docs","_op_ogTitle":"Complex struct","description":"Represents a complex number.\n","toc_asset_id":"_splitted/System.Numerics/toc.json","toc_rel":"_splitted/System.Numerics/toc.json","source_url":"","ms.assetid":"System.Numerics.Complex","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.numerics.complex","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.numerics.complex","fileRelativePath":"System.Numerics.Complex.html"},"themesRelativePathToOutputRoot":"_themes/"}