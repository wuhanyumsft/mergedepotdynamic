{"content":"    \r\n    <h1 id=\"System_IO_Packaging_RightsManagementInformation\">\r\n      <span class=\"lang-csharp\">RightsManagementInformation</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents Digital Rights Management (DRM) information that is stored in an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class RightsManagementInformation</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RightsManagementInformation</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>RightsManagementInformation provides access to the <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a> and <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> data stored in a rights managed protected <a class=\"xref\" href=\"system.io.packaging.package\" data-linktype=\"relative-path\">Package</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_RightsManagementInformation_CryptoProvider\" data-linktype=\"self-bookmark\">CryptoProvider</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.security.rightsmanagement.cryptoprovider\" data-linktype=\"relative-path\">CryptoProvider</a> for accessing the package&#39;s encrypted rights management data stream.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_RightsManagementInformation_DeleteUseLicense_System_Security_RightsManagement_ContentUser_\" data-linktype=\"self-bookmark\">DeleteUseLicense(ContentUser)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> for a specified user from the encrypted rights management data stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_RightsManagementInformation_GetEmbeddedUseLicenses\" data-linktype=\"self-bookmark\">GetEmbeddedUseLicenses()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a dictionary collection of user and <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> key/value pairs from the encrypted rights management data stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_RightsManagementInformation_LoadPublishLicense\" data-linktype=\"self-bookmark\">LoadPublishLicense()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the embedded <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a> from the encrypted rights management data stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_RightsManagementInformation_LoadUseLicense_System_Security_RightsManagement_ContentUser_\" data-linktype=\"self-bookmark\">LoadUseLicense(ContentUser)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a specified user&#39;s embedded <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> from the encrypted rights management data stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_RightsManagementInformation_SavePublishLicense_System_Security_RightsManagement_PublishLicense_\" data-linktype=\"self-bookmark\">SavePublishLicense(PublishLicense)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves a given <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a> to the encrypted rights management data stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_RightsManagementInformation_SaveUseLicense_System_Security_RightsManagement_ContentUser_System_Security_RightsManagement_UseLicense_\" data-linktype=\"self-bookmark\">SaveUseLicense(ContentUser,UseLicense)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves a given <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> for a specified user to the encrypted rights management data stream.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_RightsManagementInformation_CryptoProvider\">\r\n    \r\n            <a id=\"System_IO_Packaging_RightsManagementInformation_CryptoProvider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CryptoProvider</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.security.rightsmanagement.cryptoprovider\" data-linktype=\"relative-path\">CryptoProvider</a> for accessing the package&#39;s encrypted rights management data stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.RightsManagement.CryptoProvider CryptoProvider { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.cryptoprovider\" data-linktype=\"relative-path\">CryptoProvider</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.rightsmanagement.cryptoprovider\" data-linktype=\"relative-path\">CryptoProvider</a> for accessing the rights management information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to set the CryptoProvider property.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackageViewer#RmPkgViewBind\">ShowStatus(&quot;   Binding UseLicense with the SecureEnvironment&quot; &amp; vbLf &amp; &quot;       to obtain the CryptoProvider.&quot;)\nrmi.CryptoProvider = useLicense.Bind(_secureEnv)\n\nShowStatus(&quot;   Obtaining BoundGrants.&quot;)\ngrants = rmi.CryptoProvider.BoundGrants\n\n&#39; You can access the Package via GetPackage() at this point.\n\nrightsBlock.Text = &quot;GRANTS LIST&quot; &amp; vbLf &amp; &quot;-----------&quot; &amp; vbLf\nFor Each grant As ContentGrant In grants\n\trightsBlock.Text &amp;= &quot;USER  :&quot; &amp; grant.User.Name &amp; &quot; [&quot; &amp; grant.User.AuthenticationType &amp; &quot;]&quot; &amp; vbLf\n\trightsBlock.Text &amp;= &quot;RIGHT :&quot; &amp; grant.Right.ToString()+vbLf\n\trightsBlock.Text &amp;= &quot;    From:  &quot; &amp; grant.ValidFrom &amp; vbLf\n\trightsBlock.Text &amp;= &quot;    Until: &quot; &amp; grant.ValidUntil &amp; vbLf\nNext grant\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackageViewer#RmPkgViewBind\">ShowStatus(&quot;   Binding UseLicense with the SecureEnvironment&quot; +\n         &quot;<br>       to obtain the CryptoProvider.&quot;);\nrmi.CryptoProvider = useLicense.Bind(_secureEnv);\n\nShowStatus(&quot;   Obtaining BoundGrants.&quot;);\ngrants = rmi.CryptoProvider.BoundGrants;\n\n// You can access the Package via GetPackage() at this point.\n\nrightsBlock.Text = &quot;GRANTS LIST<br>-----------<br>&quot;;\nforeach (ContentGrant grant in grants)\n{\n    rightsBlock.Text += &quot;USER  :&quot; + grant.User.Name + &quot; [&quot; +\n        grant.User.AuthenticationType + &quot;]<br>&quot;;\n    rightsBlock.Text += &quot;RIGHT :&quot; + grant.Right.ToString()+&quot;<br>&quot;;\n    rightsBlock.Text += &quot;    From:  &quot; + grant.ValidFrom + &quot;<br>&quot;;\n    rightsBlock.Text += &quot;    Until: &quot; + grant.ValidUntil + &quot;<br>&quot;;\n}\n</code></pre><p> The following example shows how to access the CryptoProvider property.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackageViewer#RmPkgViewDecrypt\">If rmi.CryptoProvider.CanDecrypt = True Then\n\tShowStatus(&quot;   Decryption granted.&quot;)\nElse\n\tShowStatus(&quot;   CANNOT DECRYPT!&quot;)\nEnd If\n\nShowStatus(&quot;   Getting the Package from&quot; &amp; vbLf &amp; &quot;      the EncryptedPackage.&quot;)\n_xpsPackage = ePackage.GetPackage()\nIf _xpsPackage Is Nothing Then\n\tMessageBox.Show(&quot;Unable to get Package.&quot;)\n\tReturn False\nEnd If\n\n&#39; Set a PackageStore Uri reference for the encrypted stream.\n&#39; (&quot;sdk://packLocation&quot; is a pseudo URI used by\n&#39;  PackUriHelper.Create to define the parserContext.BaseURI\n&#39;  that XamlReader uses to access the encrypted data stream.)\nDim packageUri As New Uri(&quot;sdk://packLocation&quot;, UriKind.Absolute)\n&#39; Add the URI package\nPackageStore.AddPackage(packageUri, _xpsPackage)\n&#39; Determine the starting part for the package.\nDim startingPart As PackagePart = GetPackageStartingPart(_xpsPackage)\n\n&#39; Set the DocViewer.Document property.\nShowStatus(&quot;   Opening in DocumentViewer.&quot;)\nDim parserContext As New ParserContext()\nparserContext.BaseUri = PackUriHelper.Create(packageUri, startingPart.Uri)\nparserContext.XamlTypeMapper = XamlTypeMapper.DefaultMapper\n            DocViewerProperty.Document = TryCast(XamlReader.Load(startingPart.GetStream(), parserContext), IDocumentPaginatorSource)\n\n&#39; Enable document menu controls.\nmenuFileClose.IsEnabled = True\nmenuFilePrint.IsEnabled = True\nmenuViewIncreaseZoom.IsEnabled = True\nmenuViewDecreaseZoom.IsEnabled = True\n\n&#39; Give the DocumentViewer focus.\n            DocViewerProperty.Focus()\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackageViewer#RmPkgViewDecrypt\">if (rmi.CryptoProvider.CanDecrypt == true)\n    ShowStatus(&quot;   Decryption granted.&quot;);\nelse\n    ShowStatus(&quot;   CANNOT DECRYPT!&quot;);\n\nShowStatus(&quot;   Getting the Package from<br>&quot; +\n           &quot;      the EncryptedPackage.&quot;);\n_xpsPackage = ePackage.GetPackage();\nif (_xpsPackage == null)\n{\n    MessageBox.Show(&quot;Unable to get Package.&quot;);\n    return false;\n}\n\n// Set a PackageStore Uri reference for the encrypted stream.\n// (&quot;sdk://packLocation&quot; is a pseudo URI used by\n//  PackUriHelper.Create to define the parserContext.BaseURI\n//  that XamlReader uses to access the encrypted data stream.)\nUri packageUri = new Uri(@&quot;sdk://packLocation&quot;, UriKind.Absolute);\n// Add the URI package\nPackageStore.AddPackage(packageUri, _xpsPackage);\n// Determine the starting part for the package.\nPackagePart startingPart = GetPackageStartingPart(_xpsPackage);\n\n// Set the DocViewer.Document property.\nShowStatus(&quot;   Opening in DocumentViewer.&quot;);\nParserContext parserContext = new ParserContext();\nparserContext.BaseUri = PackUriHelper.Create(\n                            packageUri, startingPart.Uri);\nparserContext.XamlTypeMapper = XamlTypeMapper.DefaultMapper;\nDocViewer.Document = XamlReader.Load(\n    startingPart.GetStream(), parserContext)\n        as IDocumentPaginatorSource;\n\n// Enable document menu controls.\nmenuFileClose.IsEnabled = true;\nmenuFilePrint.IsEnabled = true;\nmenuViewIncreaseZoom.IsEnabled = true;\nmenuViewDecreaseZoom.IsEnabled = true;\n\n// Give the DocumentViewer focus.\nDocViewer.Focus();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_RightsManagementInformation_DeleteUseLicense_System_Security_RightsManagement_ContentUser_\">\r\n    \r\n            <a id=\"System_IO_Packaging_RightsManagementInformation_DeleteUseLicense_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteUseLicense(ContentUser)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> for a specified user from the encrypted rights management data stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DeleteUseLicense (System.Security.RightsManagement.ContentUser userKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>userKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.contentuser\" data-linktype=\"relative-path\">ContentUser</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user of the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> to be deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_RightsManagementInformation_GetEmbeddedUseLicenses\">\r\n    \r\n            <a id=\"System_IO_Packaging_RightsManagementInformation_GetEmbeddedUseLicenses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEmbeddedUseLicenses()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a dictionary collection of user and <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> key/value pairs from the encrypted rights management data stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IDictionary&lt;System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense&gt; GetEmbeddedUseLicenses ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.security.rightsmanagement.contentuser\" data-linktype=\"relative-path\">ContentUser</a>,<a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of user and <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> key/value pairs that are contained in the rights managed protected package.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetEmbeddedUseLicenses only returns those use licenses that are currently embedded in the package.  It does not include any other use licenses that the application might have acquired separately from a rights management server but that are not yet embedded in the package.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_RightsManagementInformation_LoadPublishLicense\">\r\n    \r\n            <a id=\"System_IO_Packaging_RightsManagementInformation_LoadPublishLicense_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadPublishLicense()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the embedded <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a> from the encrypted rights management data stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.RightsManagement.PublishLicense LoadPublishLicense ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a></div>\r\n                  </div>\r\n                  <p>The embedded <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a>; or <code>null</code>, if the package does not contain a <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileformatexception\" data-linktype=\"relative-path\">FileFormatException</a></div>\r\n                  </div>\r\n                  <p>The rights management information in this package cannot be read by the current version of this class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the LoadPublishLicense method.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackageViewer#RmPkgViewOpenPkg\">ShowStatus(&quot;   Opening the encrypted Package.&quot;)\nDim ePackage As EncryptedPackageEnvelope = EncryptedPackageEnvelope.Open(xpsFile, FileAccess.ReadWrite)\nDim rmi As RightsManagementInformation = ePackage.RightsManagementInformation\n\nShowStatus(&quot;   Looking for an embedded UseLicense for user:&quot; &amp; vbLf &amp; &quot;       &quot; &amp; currentUserId &amp; &quot; [&quot; &amp; _authentication &amp; &quot;]&quot;)\nDim useLicense As UseLicense = rmi.LoadUseLicense(New ContentUser(currentUserId, _authentication))\n\nDim grants As ReadOnlyCollection(Of ContentGrant)\nIf useLicense Is Nothing Then\n\tShowStatus(&quot;   No Embedded UseLicense found.&quot; &amp; vbLf &amp; &quot;       &quot; &amp; &quot;Attempting to acqure UseLicnese&quot; &amp; vbLf &amp; &quot;       &quot; &amp; &quot;from the PublishLicense.&quot;)\n\tDim pubLicense As PublishLicense = rmi.LoadPublishLicense()\n\n\tShowStatus(&quot;   Referral information:&quot;)\n\n\tIf pubLicense.ReferralInfoName Is Nothing Then\n\t\tShowStatus(&quot;       Name: (null)&quot;)\n\tElse\n\t\tShowStatus(&quot;       Name: &quot; &amp; pubLicense.ReferralInfoName)\n\tEnd If\n\n\tIf pubLicense.ReferralInfoUri Is Nothing Then\n\t\tShowStatus(&quot;    Uri: (null)&quot;)\n\tElse\n\t\tShowStatus(&quot;    Uri: &quot; &amp; pubLicense.ReferralInfoUri.ToString())\n\tEnd If\n\n\tuseLicense = pubLicense.AcquireUseLicense(_secureEnv)\n\tIf useLicense Is Nothing Then\n\t\tShowStatus(&quot;   User DOES NOT HAVE RIGHTS&quot; &amp; vbLf &amp; &quot;       &quot; &amp; &quot;to access this document!&quot;)\n\t\tReturn False\n\tEnd If\nEnd If &#39; end:if (useLicense == null)\nShowStatus(&quot;   UseLicense acquired.&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackageViewer#RmPkgViewOpenPkg\">ShowStatus(&quot;   Opening the encrypted Package.&quot;);\nEncryptedPackageEnvelope ePackage =\n    EncryptedPackageEnvelope.Open(xpsFile, FileAccess.ReadWrite);\nRightsManagementInformation rmi =\n    ePackage.RightsManagementInformation;\n\nShowStatus(&quot;   Looking for an embedded UseLicense for user:<br>       &quot; +\n           currentUserId + &quot; [&quot; + _authentication + &quot;]&quot;);\nUseLicense useLicense =\n    rmi.LoadUseLicense(\n        new ContentUser(currentUserId, _authentication));\n\nReadOnlyCollection&lt;ContentGrant&gt; grants;\nif (useLicense == null)\n{\n    ShowStatus(&quot;   No Embedded UseLicense found.<br>       &quot; +\n               &quot;Attempting to acqure UseLicnese<br>       &quot; +\n               &quot;from the PublishLicense.&quot;);\n    PublishLicense pubLicense = rmi.LoadPublishLicense();\n\n    ShowStatus(&quot;   Referral information:&quot;);\n\n    if (pubLicense.ReferralInfoName == null)\n        ShowStatus(&quot;       Name: (null)&quot;);\n    else\n        ShowStatus(&quot;       Name: &quot; + pubLicense.ReferralInfoName);\n\n    if (pubLicense.ReferralInfoUri == null)\n        ShowStatus(&quot;    Uri: (null)&quot;);\n    else\n        ShowStatus(&quot;    Uri: &quot; +\n            pubLicense.ReferralInfoUri.ToString());\n\n    useLicense = pubLicense.AcquireUseLicense(_secureEnv);\n    if (useLicense == null)\n    {\n        ShowStatus(&quot;   User DOES NOT HAVE RIGHTS<br>       &quot; +\n            &quot;to access this document!&quot;);\n        return false;\n    }\n}// end:if (useLicense == null)\nShowStatus(&quot;   UseLicense acquired.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_RightsManagementInformation_LoadUseLicense_System_Security_RightsManagement_ContentUser_\">\r\n    \r\n            <a id=\"System_IO_Packaging_RightsManagementInformation_LoadUseLicense_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadUseLicense(ContentUser)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a specified user&#39;s embedded <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> from the encrypted rights management data stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.RightsManagement.UseLicense LoadUseLicense (System.Security.RightsManagement.ContentUser userKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>userKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.contentuser\" data-linktype=\"relative-path\">ContentUser</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user or user group to return the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> for the specified user; or <code>null</code>, if the package does not contain a <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> that matches the given <code>userKey</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>userKey</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileformatexception\" data-linktype=\"relative-path\">FileFormatException</a></div>\r\n                  </div>\r\n                  <p>The rights management information in this package cannot be read by the current version of this class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the LoadUseLicense method.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackageViewer#RmPkgViewOpenPkg\">ShowStatus(&quot;   Opening the encrypted Package.&quot;)\nDim ePackage As EncryptedPackageEnvelope = EncryptedPackageEnvelope.Open(xpsFile, FileAccess.ReadWrite)\nDim rmi As RightsManagementInformation = ePackage.RightsManagementInformation\n\nShowStatus(&quot;   Looking for an embedded UseLicense for user:&quot; &amp; vbLf &amp; &quot;       &quot; &amp; currentUserId &amp; &quot; [&quot; &amp; _authentication &amp; &quot;]&quot;)\nDim useLicense As UseLicense = rmi.LoadUseLicense(New ContentUser(currentUserId, _authentication))\n\nDim grants As ReadOnlyCollection(Of ContentGrant)\nIf useLicense Is Nothing Then\n\tShowStatus(&quot;   No Embedded UseLicense found.&quot; &amp; vbLf &amp; &quot;       &quot; &amp; &quot;Attempting to acqure UseLicnese&quot; &amp; vbLf &amp; &quot;       &quot; &amp; &quot;from the PublishLicense.&quot;)\n\tDim pubLicense As PublishLicense = rmi.LoadPublishLicense()\n\n\tShowStatus(&quot;   Referral information:&quot;)\n\n\tIf pubLicense.ReferralInfoName Is Nothing Then\n\t\tShowStatus(&quot;       Name: (null)&quot;)\n\tElse\n\t\tShowStatus(&quot;       Name: &quot; &amp; pubLicense.ReferralInfoName)\n\tEnd If\n\n\tIf pubLicense.ReferralInfoUri Is Nothing Then\n\t\tShowStatus(&quot;    Uri: (null)&quot;)\n\tElse\n\t\tShowStatus(&quot;    Uri: &quot; &amp; pubLicense.ReferralInfoUri.ToString())\n\tEnd If\n\n\tuseLicense = pubLicense.AcquireUseLicense(_secureEnv)\n\tIf useLicense Is Nothing Then\n\t\tShowStatus(&quot;   User DOES NOT HAVE RIGHTS&quot; &amp; vbLf &amp; &quot;       &quot; &amp; &quot;to access this document!&quot;)\n\t\tReturn False\n\tEnd If\nEnd If &#39; end:if (useLicense == null)\nShowStatus(&quot;   UseLicense acquired.&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackageViewer#RmPkgViewOpenPkg\">ShowStatus(&quot;   Opening the encrypted Package.&quot;);\nEncryptedPackageEnvelope ePackage =\n    EncryptedPackageEnvelope.Open(xpsFile, FileAccess.ReadWrite);\nRightsManagementInformation rmi =\n    ePackage.RightsManagementInformation;\n\nShowStatus(&quot;   Looking for an embedded UseLicense for user:<br>       &quot; +\n           currentUserId + &quot; [&quot; + _authentication + &quot;]&quot;);\nUseLicense useLicense =\n    rmi.LoadUseLicense(\n        new ContentUser(currentUserId, _authentication));\n\nReadOnlyCollection&lt;ContentGrant&gt; grants;\nif (useLicense == null)\n{\n    ShowStatus(&quot;   No Embedded UseLicense found.<br>       &quot; +\n               &quot;Attempting to acqure UseLicnese<br>       &quot; +\n               &quot;from the PublishLicense.&quot;);\n    PublishLicense pubLicense = rmi.LoadPublishLicense();\n\n    ShowStatus(&quot;   Referral information:&quot;);\n\n    if (pubLicense.ReferralInfoName == null)\n        ShowStatus(&quot;       Name: (null)&quot;);\n    else\n        ShowStatus(&quot;       Name: &quot; + pubLicense.ReferralInfoName);\n\n    if (pubLicense.ReferralInfoUri == null)\n        ShowStatus(&quot;    Uri: (null)&quot;);\n    else\n        ShowStatus(&quot;    Uri: &quot; +\n            pubLicense.ReferralInfoUri.ToString());\n\n    useLicense = pubLicense.AcquireUseLicense(_secureEnv);\n    if (useLicense == null)\n    {\n        ShowStatus(&quot;   User DOES NOT HAVE RIGHTS<br>       &quot; +\n            &quot;to access this document!&quot;);\n        return false;\n    }\n}// end:if (useLicense == null)\nShowStatus(&quot;   UseLicense acquired.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_RightsManagementInformation_SavePublishLicense_System_Security_RightsManagement_PublishLicense_\">\r\n    \r\n            <a id=\"System_IO_Packaging_RightsManagementInformation_SavePublishLicense_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SavePublishLicense(PublishLicense)</div>        \r\n          </div>\r\n    \r\n            <p>Saves a given <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a> to the encrypted rights management data stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SavePublishLicense (System.Security.RightsManagement.PublishLicense publishLicense);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>publishLicense</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The publish license to store and embed in the package.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>publishLicense</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileformatexception\" data-linktype=\"relative-path\">FileFormatException</a></div>\r\n                  </div>\r\n                  <p>The rights management information in this package cannot be read by the current version of this class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> can contain only one <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a>.  Each call to SavePublishLicense will overwrite any prior <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a> contained in the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_RightsManagementInformation_SaveUseLicense_System_Security_RightsManagement_ContentUser_System_Security_RightsManagement_UseLicense_\">\r\n    \r\n            <a id=\"System_IO_Packaging_RightsManagementInformation_SaveUseLicense_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SaveUseLicense(ContentUser,UseLicense)</div>        \r\n          </div>\r\n    \r\n            <p>Saves a given <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> for a specified user to the encrypted rights management data stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SaveUseLicense (System.Security.RightsManagement.ContentUser userKey, System.Security.RightsManagement.UseLicense useLicense);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>userKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.contentuser\" data-linktype=\"relative-path\">ContentUser</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user of the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>useLicense</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The use license to store and embed in the package.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Either the <code>userKey</code> or <code>useLicense</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileformatexception\" data-linktype=\"relative-path\">FileFormatException</a></div>\r\n                  </div>\r\n                  <p>The rights management information in this package cannot be read by the current version of this class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> for the specified user has been saved, it can be retrieved through the <a class=\"xref\" href=\"system.io.packaging.rightsmanagementinformation#System_IO_Packaging_RightsManagementInformation_LoadUseLicense_\" data-linktype=\"relative-path\">LoadUseLicense</a> method and from the collection returned by <a class=\"xref\" href=\"system.io.packaging.rightsmanagementinformation#System_IO_Packaging_RightsManagementInformation_GetEmbeddedUseLicenses_\" data-linktype=\"relative-path\">GetEmbeddedUseLicenses</a>.  </p>\n<p> A <a class=\"xref\" href=\"system.io.packaging.package\" data-linktype=\"relative-path\">Package</a> can store the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> rights information for multiple content users.  Each ContentUser can have at most one <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a>.  If SaveUseLicense is called to store a new <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a> for a <a class=\"xref\" href=\"system.security.rightsmanagement.contentuser\" data-linktype=\"relative-path\">ContentUser</a> that already has a <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a>, the previous license will be overwritten with the new license.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use of the SaveUseLicense method.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense&quot; &amp; vbLf &amp; &quot;       to build the PublishLicense.&quot;)\n            Dim authorsUseLicense As UseLicense = Nothing\nDim publishLicense As PublishLicense = unsignedLicense.Sign(_secureEnv, authorsUseLicense)\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;)\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;)\nDim cryptoProvider As CryptoProvider = authorsUseLicense.Bind(_secureEnv)\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;)\nDim packageStream As Stream = File.OpenRead(packageFile)\nDim ePackage As EncryptedPackageEnvelope = EncryptedPackageEnvelope.CreateFromPackage(encryptedFile, packageStream, publishLicense, cryptoProvider)\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;)\nDim rmi As RightsManagementInformation = ePackage.RightsManagementInformation\nrmi.SaveUseLicense(author, authorsUseLicense)\n\nePackage.Close()\nWriteStatus(&quot;   Done - Package encryption complete.&quot;)\n\nWriteStatus(&quot;Verifying package encryption.&quot;)\nIf EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile) Then\n\tWriteStatus(&quot;   Confirmed - &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is encrypted.&quot;)\nElse\n\tMessageBox.Show(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;, MessageBoxButton.OK, MessageBoxImage.Error)\n\tWriteStatus(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot; &amp; vbLf)\n\tReturn False\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense<br>&quot; +\n            &quot;       to build the PublishLicense.&quot;);\nUseLicense authorsUseLicense;\nPublishLicense publishLicense =\n    unsignedLicense.Sign(_secureEnv, out authorsUseLicense);\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;);\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;);\nCryptoProvider cryptoProvider = authorsUseLicense.Bind(_secureEnv);\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;);\nStream packageStream = File.OpenRead(packageFile);\nEncryptedPackageEnvelope ePackage =\n    EncryptedPackageEnvelope.CreateFromPackage(encryptedFile,\n        packageStream, publishLicense, cryptoProvider);\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;);\nRightsManagementInformation rmi =\n    ePackage.RightsManagementInformation;\nrmi.SaveUseLicense(author, authorsUseLicense);\n\nePackage.Close();\nWriteStatus(&quot;   Done - Package encryption complete.&quot;);\n\nWriteStatus(&quot;Verifying package encryption.&quot;);\nif (EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile))\n{\n    WriteStatus(&quot;   Confirmed - &#39;&quot; + encryptedFilename +\n                &quot;&#39; is encrypted.&quot;);\n}\nelse\n{\n    MessageBox.Show(&quot;ERROR: &#39;&quot; + encryptedFilename +\n        &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;,\n        MessageBoxButton.OK, MessageBoxImage.Error);\n    WriteStatus(&quot;ERROR: &#39;&quot; + encryptedFilename +\n                &quot;&#39; is NOT ENCRYPTED.<br>&quot;);\n    return false;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Packaging.RightsManagementInformation.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Packaging.RightsManagementInformation.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.RightsManagementInformation\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.RightsManagementInformation.CryptoProvider\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.RightsManagementInformation.DeleteUseLicense\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.RightsManagementInformation.LoadPublishLicense\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.RightsManagementInformation.LoadUseLicense\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.RightsManagementInformation.SavePublishLicense\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.RightsManagementInformation.SaveUseLicense\">\r\n<meta name=\"APILocation\" content=\"WindowsBase.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"23ae335f-e8b6-9892-4818-02889f9f509f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents Digital Rights Management (DRM) information that is stored in an .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO.Packaging/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Packaging.RightsManagementInformation\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Packaging.RightsManagementInformation.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Packaging.RightsManagementInformation.yml","open_to_public_contributors":true,"api_name":["System.IO.Packaging.RightsManagementInformation","System.IO.Packaging.RightsManagementInformation.CryptoProvider","System.IO.Packaging.RightsManagementInformation.DeleteUseLicense","System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses","System.IO.Packaging.RightsManagementInformation.LoadPublishLicense","System.IO.Packaging.RightsManagementInformation.LoadUseLicense","System.IO.Packaging.RightsManagementInformation.SavePublishLicense","System.IO.Packaging.RightsManagementInformation.SaveUseLicense"],"api_location":["WindowsBase.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Packaging.RightsManagementInformation","System::IO::Packaging::RightsManagementInformation","System.IO.Packaging.RightsManagementInformation.CryptoProvider","System::IO::Packaging::RightsManagementInformation::CryptoProvider","System.IO.Packaging.RightsManagementInformation.DeleteUseLicense","System::IO::Packaging::RightsManagementInformation::DeleteUseLicense","System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses","System::IO::Packaging::RightsManagementInformation::GetEmbeddedUseLicenses","System.IO.Packaging.RightsManagementInformation.LoadPublishLicense","System::IO::Packaging::RightsManagementInformation::LoadPublishLicense","System.IO.Packaging.RightsManagementInformation.LoadUseLicense","System::IO::Packaging::RightsManagementInformation::LoadUseLicense","System.IO.Packaging.RightsManagementInformation.SavePublishLicense","System::IO::Packaging::RightsManagementInformation::SavePublishLicense","System.IO.Packaging.RightsManagementInformation.SaveUseLicense","System::IO::Packaging::RightsManagementInformation::SaveUseLicense"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"23ae335f-e8b6-9892-4818-02889f9f509f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO.Packaging/RightsManagementInformation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RightsManagementInformation class | Microsoft Docs","_op_ogTitle":"RightsManagementInformation class","description":"Represents Digital Rights Management (DRM) information that is stored in an .\n","toc_asset_id":"_splitted/System.IO.Packaging/toc.json","toc_rel":"_splitted/System.IO.Packaging/toc.json","source_url":"","ms.assetid":"System.IO.Packaging.RightsManagementInformation","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.packaging.rightsmanagementinformation","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.packaging.rightsmanagementinformation","fileRelativePath":"System.IO.Packaging.RightsManagementInformation.html"},"themesRelativePathToOutputRoot":"_themes/"}