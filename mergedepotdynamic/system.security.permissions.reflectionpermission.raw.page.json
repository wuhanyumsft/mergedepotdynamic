{"content":"    \r\n    <h1 id=\"System_Security_Permissions_ReflectionPermission\">\r\n      <span class=\"lang-csharp\">ReflectionPermission</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Controls access to non-public types and members through the <a class=\"xref\" href=\"system.reflection\" data-linktype=\"relative-path\">System.Reflection</a> APIs. Controls some features of the <a class=\"xref\" href=\"system.reflection.emit\" data-linktype=\"relative-path\">System.Reflection.Emit</a> APIs.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class ReflectionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">System.Security.CodeAccessPermission</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ReflectionPermission</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert\" data-linktype=\"relative-path\">Assert()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand\" data-linktype=\"relative-path\">Demand()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny\" data-linktype=\"relative-path\">Deny()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_PermitOnly\" data-linktype=\"relative-path\">PermitOnly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAll\" data-linktype=\"relative-path\">RevertAll()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAssert\" data-linktype=\"relative-path\">RevertAssert()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertDeny\" data-linktype=\"relative-path\">RevertDeny()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertPermitOnly\" data-linktype=\"relative-path\">RevertPermitOnly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Without ReflectionPermission, code can use reflection to access only the public members of objects. Code with ReflectionPermission and the appropriate <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> flags can access the <code>protected</code> and <code>private</code> members of objects.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because ReflectionPermission can provide access to non-public types and members, we recommend that you do not grant ReflectionPermission to Internet code, except with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> allows access to non-public members, with the restriction that the grant set of the non-public members must be equal to, or a subset of, the grant set of the code that accesses the non-public members.  </p>\n</div>\n<p> Certain features of reflection emit, such as emitting debug symbols, require ReflectionPermission with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag.  </p>\n<p> For more information, see the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> enumeration.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission__ctor_System_Security_Permissions_PermissionState_\" data-linktype=\"self-bookmark\">ReflectionPermission(PermissionState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class with either fully restricted or unrestricted permission as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission__ctor_System_Security_Permissions_ReflectionPermissionFlag_\" data-linktype=\"self-bookmark\">ReflectionPermission(ReflectionPermissionFlag)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class with the specified access.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission_Flags\" data-linktype=\"self-bookmark\">Flags</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the type of reflection allowed for the current permission.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns an identical copy of the current permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission_FromXml_System_Security_SecurityElement_\" data-linktype=\"self-bookmark\">FromXml(SecurityElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reconstructs a permission with a specified state from an XML encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission_Intersect_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Intersect(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns a permission that is the intersection of the current permission and the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission_IsSubsetOf_System_Security_IPermission_\" data-linktype=\"self-bookmark\">IsSubsetOf(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current permission is a subset of the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission_IsUnrestricted\" data-linktype=\"self-bookmark\">IsUnrestricted()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the current permission is unrestricted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission_ToXml\" data-linktype=\"self-bookmark\">ToXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an XML encoding of the permission and its current state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_ReflectionPermission_Union_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Union(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a permission that is the union of the current permission and the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission__ctor_System_Security_Permissions_PermissionState_\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionPermission(PermissionState)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class with either fully restricted or unrestricted permission as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ReflectionPermission (System.Security.Permissions.PermissionState state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>state</code> parameter is not a valid value of <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates either fully restricted (<code>None</code>) or <code>Unrestricted</code> access to metadata.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#7\">        Dim restrictedMemberAccessPerm As New ReflectionPermission(PermissionState.None)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#7\">        ReflectionPermission restrictedMemberAccessPerm = new ReflectionPermission(PermissionState.None);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission__ctor_System_Security_Permissions_ReflectionPermissionFlag_\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionPermission(ReflectionPermissionFlag)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class with the specified access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>flag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>flag</code> parameter is not a valid value of <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#8\">        Dim restrictedMemberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#8\">        ReflectionPermission restrictedMemberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission_Flags\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission_Flags_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flags</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the type of reflection allowed for the current permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a></div>\r\n                  </div>\r\n                  <p>The set flags for the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An attempt is made to set this property to an invalid value. See <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">ReflectionPermissionFlag</a> for the valid values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the Flags property. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#2\">    Private Shared Sub IsSubsetOfDemo()\n\n        Dim memberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.MemberAccess)\n        Dim restrictedMemberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess)\n        If restrictedMemberAccessPerm.IsSubsetOf(memberAccessPerm) Then\n            Console.WriteLine(restrictedMemberAccessPerm.Flags + &quot; is a subset of &quot; + memberAccessPerm.Flags)\n        Else\n            Console.WriteLine(restrictedMemberAccessPerm.Flags.ToString() + _\n            &quot; is not a subset of &quot; + memberAccessPerm.Flags.ToString())\n        End If\n\n    End Sub &#39;IsSubsetOfDemo\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#2\">    private static void IsSubsetOfDemo()\n    {\n        ReflectionPermission memberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.MemberAccess);\n        ReflectionPermission restrictedMemberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess);\n\n        if (restrictedMemberAccessPerm.IsSubsetOf(memberAccessPerm))\n        {\n            Console.WriteLine(restrictedMemberAccessPerm.Flags + &quot; is a subset of &quot; +\n                memberAccessPerm.Flags);\n        }\n        else\n        {\n            Console.WriteLine(restrictedMemberAccessPerm.Flags + &quot; is not a subset of &quot; +\n                memberAccessPerm.Flags);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission_Copy\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns an identical copy of the current permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A copy of the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A copy of a permission represents the same access to resources as the original permission.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#5\">    Private Shared Sub CopyDemo()\n        Dim memberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.MemberAccess)\n        Dim restrictedMemberAccessPerm As ReflectionPermission = CType(memberAccessPerm.Copy(), ReflectionPermission)\n        Console.WriteLine(&quot;Result of copy = &quot; + restrictedMemberAccessPerm.ToString())\n\n    End Sub &#39;CopyDemo\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#5\">    private static void CopyDemo()\n    {\n        ReflectionPermission memberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.MemberAccess);\n        ReflectionPermission restrictedMemberAccessPerm = (ReflectionPermission)memberAccessPerm.Copy();\n        Console.WriteLine(&quot;Result of copy = &quot; + restrictedMemberAccessPerm.ToString());\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission_FromXml_System_Security_SecurityElement_\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission_FromXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXml(SecurityElement)</div>        \r\n          </div>\r\n    \r\n            <p>Reconstructs a permission with a specified state from an XML encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void FromXml (System.Security.SecurityElement esd);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>esd</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML encoding to use to reconstruct the permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>esd</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>esd</code> parameter is not a valid permission element.  </p>\n<p> -or-  </p>\n<p> The <code>esd</code> parameter&#39;s version number is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#6\">    Private Shared Sub ToFromXmlDemo()\n        Dim memberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.MemberAccess)\n        Dim restrictedMemberAccessPerm As New ReflectionPermission(PermissionState.None)\n        restrictedMemberAccessPerm.FromXml(memberAccessPerm.ToXml())\n        Console.WriteLine(&quot;Result of ToFromXml = &quot; + restrictedMemberAccessPerm.ToString())\n\n    End Sub &#39;ToFromXmlDemo\nEnd Class &#39;ReflectionPermissionDemo\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#6\">    private static void ToFromXmlDemo()\n    {\n        ReflectionPermission memberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.MemberAccess);\n        ReflectionPermission restrictedMemberAccessPerm = new ReflectionPermission(PermissionState.None);\n        restrictedMemberAccessPerm.FromXml(memberAccessPerm.ToXml());\n        Console.WriteLine(&quot;Result of ToFromXml = &quot; +\n            restrictedMemberAccessPerm.ToString());\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission_Intersect_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission_Intersect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns a permission that is the intersection of the current permission and the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Intersect (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission to intersect with the current permission. It must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new permission that represents the intersection of the current permission and the specified permission. This new permission is <code>null</code> if the intersection is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the behavior of the Intersect method. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#4\">    Private Shared Sub IntersectDemo()\n        Dim memberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.MemberAccess)\n        Dim restrictedMemberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess)\n        Dim reflectionPerm3 As ReflectionPermission = CType(memberAccessPerm.Intersect(restrictedMemberAccessPerm), ReflectionPermission)\n        If Not (reflectionPerm3 Is Nothing) Then\n            Console.WriteLine(&quot;The intersection of &quot; + memberAccessPerm.Flags.ToString() + _\n            &quot; and &quot; + restrictedMemberAccessPerm.Flags.ToString() + &quot; = &quot; + _\n            CType(reflectionPerm3, ReflectionPermission).Flags.ToString())\n        Else\n            Console.WriteLine(&quot;The intersection of &quot; + memberAccessPerm.Flags.ToString + &quot; and &quot; + _\n                restrictedMemberAccessPerm.Flags.ToString() + &quot; is null.&quot;)\n        End If\n\n    End Sub &#39;IntersectDemo\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#4\">    private static void IntersectDemo()\n    {\n        ReflectionPermission memberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.MemberAccess);\n        ReflectionPermission restrictedMemberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess);\n        ReflectionPermission reflectionPerm3 = (ReflectionPermission)memberAccessPerm.Intersect(restrictedMemberAccessPerm);\n        if (reflectionPerm3 != null)\n        {\n            Console.WriteLine(&quot;The intersection of &quot; + memberAccessPerm.Flags +\n                &quot; and &quot; + restrictedMemberAccessPerm.Flags + &quot; = &quot; +\n                ((ReflectionPermission)reflectionPerm3).Flags.ToString());\n        }\n        else\n        {\n            Console.WriteLine(&quot;The intersection of &quot; + memberAccessPerm.Flags + &quot; and &quot; +\n                restrictedMemberAccessPerm.Flags + &quot; is null.&quot;);\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission_IsSubsetOf_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission_IsSubsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubsetOf(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current permission is a subset of the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSubsetOf (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current permission is a subset of the specified permission; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\. If this method returns <code>true</code>, the current permission represents no more access to the protected resource than does the specified permission.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the behavior of the IsSubsetOf method. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#2\">    Private Shared Sub IsSubsetOfDemo()\n\n        Dim memberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.MemberAccess)\n        Dim restrictedMemberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess)\n        If restrictedMemberAccessPerm.IsSubsetOf(memberAccessPerm) Then\n            Console.WriteLine(restrictedMemberAccessPerm.Flags + &quot; is a subset of &quot; + memberAccessPerm.Flags)\n        Else\n            Console.WriteLine(restrictedMemberAccessPerm.Flags.ToString() + _\n            &quot; is not a subset of &quot; + memberAccessPerm.Flags.ToString())\n        End If\n\n    End Sub &#39;IsSubsetOfDemo\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#2\">    private static void IsSubsetOfDemo()\n    {\n        ReflectionPermission memberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.MemberAccess);\n        ReflectionPermission restrictedMemberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess);\n\n        if (restrictedMemberAccessPerm.IsSubsetOf(memberAccessPerm))\n        {\n            Console.WriteLine(restrictedMemberAccessPerm.Flags + &quot; is a subset of &quot; +\n                memberAccessPerm.Flags);\n        }\n        else\n        {\n            Console.WriteLine(restrictedMemberAccessPerm.Flags + &quot; is not a subset of &quot; +\n                memberAccessPerm.Flags);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission_IsUnrestricted\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission_IsUnrestricted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUnrestricted()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the current permission is unrestricted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsUnrestricted ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current permission is unrestricted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An unrestricted permission represents access to any and all resources protected by the permission.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission_ToXml\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission_ToXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXml()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an XML encoding of the permission and its current state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.SecurityElement ToXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>An XML encoding of the permission, including any state information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the behavior of the ToXml method. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#6\">    Private Shared Sub ToFromXmlDemo()\n        Dim memberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.MemberAccess)\n        Dim restrictedMemberAccessPerm As New ReflectionPermission(PermissionState.None)\n        restrictedMemberAccessPerm.FromXml(memberAccessPerm.ToXml())\n        Console.WriteLine(&quot;Result of ToFromXml = &quot; + restrictedMemberAccessPerm.ToString())\n\n    End Sub &#39;ToFromXmlDemo\nEnd Class &#39;ReflectionPermissionDemo\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#6\">    private static void ToFromXmlDemo()\n    {\n        ReflectionPermission memberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.MemberAccess);\n        ReflectionPermission restrictedMemberAccessPerm = new ReflectionPermission(PermissionState.None);\n        restrictedMemberAccessPerm.FromXml(memberAccessPerm.ToXml());\n        Console.WriteLine(&quot;Result of ToFromXml = &quot; +\n            restrictedMemberAccessPerm.ToString());\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_ReflectionPermission_Union_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_Permissions_ReflectionPermission_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a permission that is the union of the current permission and the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Union (System.Security.IPermission other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission to combine with the current permission. It must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new permission that represents the union of the current permission and the specified permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>other</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the behavior of the Union method. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.Permissions.ReflectionPermission#3\">    Private Shared Sub UnionDemo()\n        Dim memberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.MemberAccess)\n        Dim restrictedMemberAccessPerm As New ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess)\n        Dim reflectionPerm3 As ReflectionPermission = _\n                CType(memberAccessPerm.Union(restrictedMemberAccessPerm), ReflectionPermission)\n        If reflectionPerm3 Is Nothing Then\n            Console.WriteLine(&quot;The union of &quot; + memberAccessPerm.Flags.ToString() + &quot; and &quot; + _\n            restrictedMemberAccessPerm.Flags.ToString() + &quot; is null.&quot;)\n        Else\n            Console.WriteLine(&quot;The union of &quot; + memberAccessPerm.Flags.ToString() + _\n            &quot; and &quot; + restrictedMemberAccessPerm.Flags.ToString() + &quot; = &quot; + _\n            CType(reflectionPerm3, ReflectionPermission).Flags.ToString())\n        End If\n\n    End Sub &#39;UnionDemo\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Permissions.ReflectionPermission#3\">    private static void UnionDemo()\n    {\n        ReflectionPermission memberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.MemberAccess);\n        ReflectionPermission restrictedMemberAccessPerm = new ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess);\n        ReflectionPermission reflectionPerm3 = (ReflectionPermission)memberAccessPerm.Union(restrictedMemberAccessPerm);\n        if (reflectionPerm3 == null)\n        {\n            Console.WriteLine(&quot;The union of &quot; + memberAccessPerm.Flags + &quot; and &quot; +\n                restrictedMemberAccessPerm.Flags + &quot; is null.&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;The union of &quot; + memberAccessPerm.Flags + &quot; and &quot; +\n                restrictedMemberAccessPerm.Flags + &quot; = &quot; +\n                ((ReflectionPermission)reflectionPerm3).Flags.ToString());\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Permissions.ReflectionPermission.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Permissions.ReflectionPermission.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission.Flags\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission.FromXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission.Intersect\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission.IsSubsetOf\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission.IsUnrestricted\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission.ToXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.ReflectionPermission.Union\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d39b6d83-4a93-2da9-2ea3-c0b6c2950745\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Security.Permissions\\ReflectionPermission.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Controls access to non-public types and members through the  APIs. Controls some features of the  APIs.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Permissions/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Permissions.ReflectionPermission\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Permissions.ReflectionPermission.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Permissions.ReflectionPermission.yml","open_to_public_contributors":true,"api_name":["System.Security.Permissions.ReflectionPermission","System.Security.Permissions.ReflectionPermission..ctor","System.Security.Permissions.ReflectionPermission.Copy","System.Security.Permissions.ReflectionPermission.Flags","System.Security.Permissions.ReflectionPermission.FromXml","System.Security.Permissions.ReflectionPermission.Intersect","System.Security.Permissions.ReflectionPermission.IsSubsetOf","System.Security.Permissions.ReflectionPermission.IsUnrestricted","System.Security.Permissions.ReflectionPermission.ToXml","System.Security.Permissions.ReflectionPermission.Union"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Permissions.ReflectionPermission","System::Security::Permissions::ReflectionPermission","System.Security.Permissions.ReflectionPermission.#ctor","System::Security::Permissions::ReflectionPermission::#ctor","System.Security.Permissions.ReflectionPermission.Copy","System::Security::Permissions::ReflectionPermission::Copy","System.Security.Permissions.ReflectionPermission.Flags","System::Security::Permissions::ReflectionPermission::Flags","System.Security.Permissions.ReflectionPermission.FromXml","System::Security::Permissions::ReflectionPermission::FromXml","System.Security.Permissions.ReflectionPermission.Intersect","System::Security::Permissions::ReflectionPermission::Intersect","System.Security.Permissions.ReflectionPermission.IsSubsetOf","System::Security::Permissions::ReflectionPermission::IsSubsetOf","System.Security.Permissions.ReflectionPermission.IsUnrestricted","System::Security::Permissions::ReflectionPermission::IsUnrestricted","System.Security.Permissions.ReflectionPermission.ToXml","System::Security::Permissions::ReflectionPermission::ToXml","System.Security.Permissions.ReflectionPermission.Union","System::Security::Permissions::ReflectionPermission::Union"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d39b6d83-4a93-2da9-2ea3-c0b6c2950745","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Security.Permissions\\ReflectionPermission.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Permissions/ReflectionPermission.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ReflectionPermission class | Microsoft Docs","_op_ogTitle":"ReflectionPermission class","description":"Controls access to non-public types and members through the  APIs. Controls some features of the  APIs.\n","toc_asset_id":"_splitted/System.Security.Permissions/toc.json","toc_rel":"_splitted/System.Security.Permissions/toc.json","source_url":"","ms.assetid":"System.Security.Permissions.ReflectionPermission","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.permissions.reflectionpermission","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.permissions.reflectionpermission","fileRelativePath":"System.Security.Permissions.ReflectionPermission.html"},"themesRelativePathToOutputRoot":"_themes/"}