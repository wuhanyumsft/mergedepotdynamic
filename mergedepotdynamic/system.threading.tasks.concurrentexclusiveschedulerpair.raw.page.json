{"content":"    \r\n    <h1 id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair\">\r\n      <span class=\"lang-csharp\">ConcurrentExclusiveSchedulerPair</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides task schedulers that coordinate to execute tasks while ensuring that concurrent tasks may run concurrently and exclusive tasks never do.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Concurrent={ConcurrentTaskCountForDebugger}, Exclusive={ExclusiveTaskCountForDebugger}, Mode={ModeForDebugger}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.ConcurrentExclusiveSchedulerPair/DebugView))]\npublic class ConcurrentExclusiveSchedulerPair</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ConcurrentExclusiveSchedulerPair</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor\" data-linktype=\"self-bookmark\">ConcurrentExclusiveSchedulerPair()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ConcurrentExclusiveSchedulerPair(TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> class that targets the specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_System_Threading_Tasks_TaskScheduler_System_Int32_\" data-linktype=\"self-bookmark\">ConcurrentExclusiveSchedulerPair(TaskScheduler,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> class that targets the specified scheduler with a maximum concurrency level.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_System_Threading_Tasks_TaskScheduler_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ConcurrentExclusiveSchedulerPair(TaskScheduler,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> class that targets the specified scheduler with a maximum concurrency level and a maximum number of scheduled tasks that may be processed as a unit.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_Completion\" data-linktype=\"self-bookmark\">Completion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that will complete when the scheduler has completed processing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_ConcurrentScheduler\" data-linktype=\"self-bookmark\">ConcurrentScheduler</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> that can be used to schedule tasks to this pair that may run concurrently with other tasks on this pair.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_ExclusiveScheduler\" data-linktype=\"self-bookmark\">ExclusiveScheduler</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> that can be used to schedule tasks to this pair that must run exclusively with regards to other tasks on this pair.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_Complete\" data-linktype=\"self-bookmark\">Complete()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Informs the scheduler pair that it should not accept any more tasks.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor\">\r\n    \r\n            <a id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConcurrentExclusiveSchedulerPair()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ConcurrentExclusiveSchedulerPair ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of the ConcurrentExclusiveSchedulerPair constructor to create a new <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> object. This code example is part of a larger example provided for the <a href=\"../Topic/How%20to:%20Specify%20a%20Task%20Scheduler%20in%20a%20Dataflow%20Block.md\" data-linktype=\"relative-path\">How to: Specify a Task Scheduler in a Dataflow Block</a> topic.  </p>\n<pre><code class=\"lang-cs\" name=\"TPLDataflow_WriterReadersWinForms#4\">// Create a ConcurrentExclusiveSchedulerPair object.\n// Readers will run on the concurrent part of the scheduler pair.\n// The writer will run on the exclusive part of the scheduler pair.\nvar taskSchedulerPair = new ConcurrentExclusiveSchedulerPair();\n\n// Create an ActionBlock&lt;int&gt; object for each reader CheckBox object.\n// Each ActionBlock&lt;int&gt; object represents an action that can read \n// from a resource in parallel to other readers.\n// Specifying the concurrent part of the scheduler pair enables the \n// reader to run in parallel to other actions that are managed by \n// that scheduler.\nvar readerActions = \n   from checkBox in new CheckBox[] {checkBox1, checkBox2, checkBox3}\n   select new ActionBlock&lt;int&gt;(milliseconds =&gt;\n   {\n      // Toggle the check box to the checked state.\n      toggleCheckBox.Post(checkBox);\n\n      // Perform the read action. For demonstration, suspend the current\n      // thread to simulate a lengthy read operation.\n      Thread.Sleep(milliseconds);\n\n      // Toggle the check box to the unchecked state.\n      toggleCheckBox.Post(checkBox);\n   },\n   new ExecutionDataflowBlockOptions\n   {\n      TaskScheduler = taskSchedulerPair.ConcurrentScheduler\n   });\n\n// Create an ActionBlock&lt;int&gt; object for the writer CheckBox object.\n// This ActionBlock&lt;int&gt; object represents an action that writes to \n// a resource, but cannot run in parallel to readers.\n// Specifying the exclusive part of the scheduler pair enables the \n// writer to run in exclusively with respect to other actions that are \n// managed by the scheduler pair.\nvar writerAction = new ActionBlock&lt;int&gt;(milliseconds =&gt;\n{\n   // Toggle the check box to the checked state.\n   toggleCheckBox.Post(checkBox4);\n\n   // Perform the write action. For demonstration, suspend the current\n   // thread to simulate a lengthy write operation.\n   Thread.Sleep(milliseconds);\n\n   // Toggle the check box to the unchecked state.\n   toggleCheckBox.Post(checkBox4);\n},\nnew ExecutionDataflowBlockOptions\n{\n   TaskScheduler = taskSchedulerPair.ExclusiveScheduler\n});\n\n// Link the broadcaster to each reader and writer block.\n// The BroadcastBlock&lt;T&gt; class propagates values that it \n// receives to all connected targets.\nforeach (var readerAction in readerActions)\n{\n   broadcaster.LinkTo(readerAction);\n}\nbroadcaster.LinkTo(writerAction);\n</code></pre><pre><code class=\"lang-vb\" name=\"TPLDataflow_WriterReadersWinForms#4\">&#39; Create a ConcurrentExclusiveSchedulerPair object.\n&#39; Readers will run on the concurrent part of the scheduler pair.\n&#39; The writer will run on the exclusive part of the scheduler pair.\nDim taskSchedulerPair = New ConcurrentExclusiveSchedulerPair()\n\n&#39; Create an ActionBlock&lt;int&gt; object for each reader CheckBox object.\n&#39; Each ActionBlock&lt;int&gt; object represents an action that can read \n&#39; from a resource in parallel to other readers.\n&#39; Specifying the concurrent part of the scheduler pair enables the \n&#39; reader to run in parallel to other actions that are managed by \n&#39; that scheduler.\nDim readerActions = From checkBox In New CheckBox() {checkBox1, checkBox2, checkBox3} _\n    Select New ActionBlock(Of Integer)(Sub(milliseconds)\n        &#39; Toggle the check box to the checked state.\n        &#39; Perform the read action. For demonstration, suspend the current\n        &#39; thread to simulate a lengthy read operation.\n        &#39; Toggle the check box to the unchecked state.\n        toggleCheckBox.Post(checkBox)\n        Thread.Sleep(milliseconds)\n        toggleCheckBox.Post(checkBox)\n    End Sub, New ExecutionDataflowBlockOptions With {.TaskScheduler = taskSchedulerPair.ConcurrentScheduler})\n\n&#39; Create an ActionBlock&lt;int&gt; object for the writer CheckBox object.\n&#39; This ActionBlock&lt;int&gt; object represents an action that writes to \n&#39; a resource, but cannot run in parallel to readers.\n&#39; Specifying the exclusive part of the scheduler pair enables the \n&#39; writer to run in exclusively with respect to other actions that are \n&#39; managed by the scheduler pair.\nDim writerAction = New ActionBlock(Of Integer)(Sub(milliseconds)\n    &#39; Toggle the check box to the checked state.\n    &#39; Perform the write action. For demonstration, suspend the current\n    &#39; thread to simulate a lengthy write operation.\n    &#39; Toggle the check box to the unchecked state.\n    toggleCheckBox.Post(checkBox4)\n    Thread.Sleep(milliseconds)\n    toggleCheckBox.Post(checkBox4)\nEnd Sub, New ExecutionDataflowBlockOptions With {.TaskScheduler = taskSchedulerPair.ExclusiveScheduler})\n\n&#39; Link the broadcaster to each reader and writer block.\n&#39; The BroadcastBlock&lt;T&gt; class propagates values that it \n&#39; receives to all connected targets.\nFor Each readerAction In readerActions\n    broadcaster.LinkTo(readerAction)\nNext readerAction\nbroadcaster.LinkTo(writerAction)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConcurrentExclusiveSchedulerPair(TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> class that targets the specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ConcurrentExclusiveSchedulerPair (System.Threading.Tasks.TaskScheduler taskScheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>taskScheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The target scheduler on which this pair should execute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_System_Threading_Tasks_TaskScheduler_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConcurrentExclusiveSchedulerPair(TaskScheduler,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> class that targets the specified scheduler with a maximum concurrency level.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ConcurrentExclusiveSchedulerPair (System.Threading.Tasks.TaskScheduler taskScheduler, int maxConcurrencyLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>taskScheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The target scheduler on which this pair should execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxConcurrencyLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of tasks to run concurrently.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_System_Threading_Tasks_TaskScheduler_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConcurrentExclusiveSchedulerPair(TaskScheduler,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair\" data-linktype=\"relative-path\">ConcurrentExclusiveSchedulerPair</a> class that targets the specified scheduler with a maximum concurrency level and a maximum number of scheduled tasks that may be processed as a unit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ConcurrentExclusiveSchedulerPair (System.Threading.Tasks.TaskScheduler taskScheduler, int maxConcurrencyLevel, int maxItemsPerTask);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>taskScheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The target scheduler on which this pair should execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxConcurrencyLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of tasks to run concurrently.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxItemsPerTask</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of tasks to process for each underlying scheduled task used by the pair.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_Completion\">\r\n    \r\n            <a id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_Completion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Completion</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that will complete when the scheduler has completed processing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task Completion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>The asynchronous operation that will complete when the scheduler finishes processing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_ConcurrentScheduler\">\r\n    \r\n            <a id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_ConcurrentScheduler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConcurrentScheduler</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> that can be used to schedule tasks to this pair that may run concurrently with other tasks on this pair.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.TaskScheduler ConcurrentScheduler { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to schedule tasks concurrently.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of the ConcurrentScheduler property to run a reader. This code example is part of a larger example provided for the <a href=\"../Topic/How%20to:%20Specify%20a%20Task%20Scheduler%20in%20a%20Dataflow%20Block.md\" data-linktype=\"relative-path\">How to: Specify a Task Scheduler in a Dataflow Block</a> topic.  </p>\n<pre><code class=\"lang-cs\" name=\"TPLDataflow_WriterReadersWinForms#4\">// Create a ConcurrentExclusiveSchedulerPair object.\n// Readers will run on the concurrent part of the scheduler pair.\n// The writer will run on the exclusive part of the scheduler pair.\nvar taskSchedulerPair = new ConcurrentExclusiveSchedulerPair();\n\n// Create an ActionBlock&lt;int&gt; object for each reader CheckBox object.\n// Each ActionBlock&lt;int&gt; object represents an action that can read \n// from a resource in parallel to other readers.\n// Specifying the concurrent part of the scheduler pair enables the \n// reader to run in parallel to other actions that are managed by \n// that scheduler.\nvar readerActions = \n   from checkBox in new CheckBox[] {checkBox1, checkBox2, checkBox3}\n   select new ActionBlock&lt;int&gt;(milliseconds =&gt;\n   {\n      // Toggle the check box to the checked state.\n      toggleCheckBox.Post(checkBox);\n\n      // Perform the read action. For demonstration, suspend the current\n      // thread to simulate a lengthy read operation.\n      Thread.Sleep(milliseconds);\n\n      // Toggle the check box to the unchecked state.\n      toggleCheckBox.Post(checkBox);\n   },\n   new ExecutionDataflowBlockOptions\n   {\n      TaskScheduler = taskSchedulerPair.ConcurrentScheduler\n   });\n\n// Create an ActionBlock&lt;int&gt; object for the writer CheckBox object.\n// This ActionBlock&lt;int&gt; object represents an action that writes to \n// a resource, but cannot run in parallel to readers.\n// Specifying the exclusive part of the scheduler pair enables the \n// writer to run in exclusively with respect to other actions that are \n// managed by the scheduler pair.\nvar writerAction = new ActionBlock&lt;int&gt;(milliseconds =&gt;\n{\n   // Toggle the check box to the checked state.\n   toggleCheckBox.Post(checkBox4);\n\n   // Perform the write action. For demonstration, suspend the current\n   // thread to simulate a lengthy write operation.\n   Thread.Sleep(milliseconds);\n\n   // Toggle the check box to the unchecked state.\n   toggleCheckBox.Post(checkBox4);\n},\nnew ExecutionDataflowBlockOptions\n{\n   TaskScheduler = taskSchedulerPair.ExclusiveScheduler\n});\n\n// Link the broadcaster to each reader and writer block.\n// The BroadcastBlock&lt;T&gt; class propagates values that it \n// receives to all connected targets.\nforeach (var readerAction in readerActions)\n{\n   broadcaster.LinkTo(readerAction);\n}\nbroadcaster.LinkTo(writerAction);\n</code></pre><pre><code class=\"lang-vb\" name=\"TPLDataflow_WriterReadersWinForms#4\">&#39; Create a ConcurrentExclusiveSchedulerPair object.\n&#39; Readers will run on the concurrent part of the scheduler pair.\n&#39; The writer will run on the exclusive part of the scheduler pair.\nDim taskSchedulerPair = New ConcurrentExclusiveSchedulerPair()\n\n&#39; Create an ActionBlock&lt;int&gt; object for each reader CheckBox object.\n&#39; Each ActionBlock&lt;int&gt; object represents an action that can read \n&#39; from a resource in parallel to other readers.\n&#39; Specifying the concurrent part of the scheduler pair enables the \n&#39; reader to run in parallel to other actions that are managed by \n&#39; that scheduler.\nDim readerActions = From checkBox In New CheckBox() {checkBox1, checkBox2, checkBox3} _\n    Select New ActionBlock(Of Integer)(Sub(milliseconds)\n        &#39; Toggle the check box to the checked state.\n        &#39; Perform the read action. For demonstration, suspend the current\n        &#39; thread to simulate a lengthy read operation.\n        &#39; Toggle the check box to the unchecked state.\n        toggleCheckBox.Post(checkBox)\n        Thread.Sleep(milliseconds)\n        toggleCheckBox.Post(checkBox)\n    End Sub, New ExecutionDataflowBlockOptions With {.TaskScheduler = taskSchedulerPair.ConcurrentScheduler})\n\n&#39; Create an ActionBlock&lt;int&gt; object for the writer CheckBox object.\n&#39; This ActionBlock&lt;int&gt; object represents an action that writes to \n&#39; a resource, but cannot run in parallel to readers.\n&#39; Specifying the exclusive part of the scheduler pair enables the \n&#39; writer to run in exclusively with respect to other actions that are \n&#39; managed by the scheduler pair.\nDim writerAction = New ActionBlock(Of Integer)(Sub(milliseconds)\n    &#39; Toggle the check box to the checked state.\n    &#39; Perform the write action. For demonstration, suspend the current\n    &#39; thread to simulate a lengthy write operation.\n    &#39; Toggle the check box to the unchecked state.\n    toggleCheckBox.Post(checkBox4)\n    Thread.Sleep(milliseconds)\n    toggleCheckBox.Post(checkBox4)\nEnd Sub, New ExecutionDataflowBlockOptions With {.TaskScheduler = taskSchedulerPair.ExclusiveScheduler})\n\n&#39; Link the broadcaster to each reader and writer block.\n&#39; The BroadcastBlock&lt;T&gt; class propagates values that it \n&#39; receives to all connected targets.\nFor Each readerAction In readerActions\n    broadcaster.LinkTo(readerAction)\nNext readerAction\nbroadcaster.LinkTo(writerAction)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_ExclusiveScheduler\">\r\n    \r\n            <a id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_ExclusiveScheduler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExclusiveScheduler</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> that can be used to schedule tasks to this pair that must run exclusively with regards to other tasks on this pair.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.TaskScheduler ExclusiveScheduler { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to schedule tasks that do not run concurrently with other tasks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of the ExclusiveScheduler property to run a writer. This code example is part of a larger example provided for the <a href=\"../Topic/How%20to:%20Specify%20a%20Task%20Scheduler%20in%20a%20Dataflow%20Block.md\" data-linktype=\"relative-path\">How to: Specify a Task Scheduler in a Dataflow Block</a> topic.  </p>\n<pre><code class=\"lang-cs\" name=\"TPLDataflow_WriterReadersWinForms#4\">// Create a ConcurrentExclusiveSchedulerPair object.\n// Readers will run on the concurrent part of the scheduler pair.\n// The writer will run on the exclusive part of the scheduler pair.\nvar taskSchedulerPair = new ConcurrentExclusiveSchedulerPair();\n\n// Create an ActionBlock&lt;int&gt; object for each reader CheckBox object.\n// Each ActionBlock&lt;int&gt; object represents an action that can read \n// from a resource in parallel to other readers.\n// Specifying the concurrent part of the scheduler pair enables the \n// reader to run in parallel to other actions that are managed by \n// that scheduler.\nvar readerActions = \n   from checkBox in new CheckBox[] {checkBox1, checkBox2, checkBox3}\n   select new ActionBlock&lt;int&gt;(milliseconds =&gt;\n   {\n      // Toggle the check box to the checked state.\n      toggleCheckBox.Post(checkBox);\n\n      // Perform the read action. For demonstration, suspend the current\n      // thread to simulate a lengthy read operation.\n      Thread.Sleep(milliseconds);\n\n      // Toggle the check box to the unchecked state.\n      toggleCheckBox.Post(checkBox);\n   },\n   new ExecutionDataflowBlockOptions\n   {\n      TaskScheduler = taskSchedulerPair.ConcurrentScheduler\n   });\n\n// Create an ActionBlock&lt;int&gt; object for the writer CheckBox object.\n// This ActionBlock&lt;int&gt; object represents an action that writes to \n// a resource, but cannot run in parallel to readers.\n// Specifying the exclusive part of the scheduler pair enables the \n// writer to run in exclusively with respect to other actions that are \n// managed by the scheduler pair.\nvar writerAction = new ActionBlock&lt;int&gt;(milliseconds =&gt;\n{\n   // Toggle the check box to the checked state.\n   toggleCheckBox.Post(checkBox4);\n\n   // Perform the write action. For demonstration, suspend the current\n   // thread to simulate a lengthy write operation.\n   Thread.Sleep(milliseconds);\n\n   // Toggle the check box to the unchecked state.\n   toggleCheckBox.Post(checkBox4);\n},\nnew ExecutionDataflowBlockOptions\n{\n   TaskScheduler = taskSchedulerPair.ExclusiveScheduler\n});\n\n// Link the broadcaster to each reader and writer block.\n// The BroadcastBlock&lt;T&gt; class propagates values that it \n// receives to all connected targets.\nforeach (var readerAction in readerActions)\n{\n   broadcaster.LinkTo(readerAction);\n}\nbroadcaster.LinkTo(writerAction);\n</code></pre><pre><code class=\"lang-vb\" name=\"TPLDataflow_WriterReadersWinForms#4\">&#39; Create a ConcurrentExclusiveSchedulerPair object.\n&#39; Readers will run on the concurrent part of the scheduler pair.\n&#39; The writer will run on the exclusive part of the scheduler pair.\nDim taskSchedulerPair = New ConcurrentExclusiveSchedulerPair()\n\n&#39; Create an ActionBlock&lt;int&gt; object for each reader CheckBox object.\n&#39; Each ActionBlock&lt;int&gt; object represents an action that can read \n&#39; from a resource in parallel to other readers.\n&#39; Specifying the concurrent part of the scheduler pair enables the \n&#39; reader to run in parallel to other actions that are managed by \n&#39; that scheduler.\nDim readerActions = From checkBox In New CheckBox() {checkBox1, checkBox2, checkBox3} _\n    Select New ActionBlock(Of Integer)(Sub(milliseconds)\n        &#39; Toggle the check box to the checked state.\n        &#39; Perform the read action. For demonstration, suspend the current\n        &#39; thread to simulate a lengthy read operation.\n        &#39; Toggle the check box to the unchecked state.\n        toggleCheckBox.Post(checkBox)\n        Thread.Sleep(milliseconds)\n        toggleCheckBox.Post(checkBox)\n    End Sub, New ExecutionDataflowBlockOptions With {.TaskScheduler = taskSchedulerPair.ConcurrentScheduler})\n\n&#39; Create an ActionBlock&lt;int&gt; object for the writer CheckBox object.\n&#39; This ActionBlock&lt;int&gt; object represents an action that writes to \n&#39; a resource, but cannot run in parallel to readers.\n&#39; Specifying the exclusive part of the scheduler pair enables the \n&#39; writer to run in exclusively with respect to other actions that are \n&#39; managed by the scheduler pair.\nDim writerAction = New ActionBlock(Of Integer)(Sub(milliseconds)\n    &#39; Toggle the check box to the checked state.\n    &#39; Perform the write action. For demonstration, suspend the current\n    &#39; thread to simulate a lengthy write operation.\n    &#39; Toggle the check box to the unchecked state.\n    toggleCheckBox.Post(checkBox4)\n    Thread.Sleep(milliseconds)\n    toggleCheckBox.Post(checkBox4)\nEnd Sub, New ExecutionDataflowBlockOptions With {.TaskScheduler = taskSchedulerPair.ExclusiveScheduler})\n\n&#39; Link the broadcaster to each reader and writer block.\n&#39; The BroadcastBlock&lt;T&gt; class propagates values that it \n&#39; receives to all connected targets.\nFor Each readerAction In readerActions\n    broadcaster.LinkTo(readerAction)\nNext readerAction\nbroadcaster.LinkTo(writerAction)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_Complete\">\r\n    \r\n            <a id=\"System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_Complete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Complete()</div>        \r\n          </div>\r\n    \r\n            <p>Informs the scheduler pair that it should not accept any more tasks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Complete ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling Complete is optional. It is necessary only if you&#39;re relying on the <a class=\"xref\" href=\"system.threading.tasks.concurrentexclusiveschedulerpair#System_Threading_Tasks_ConcurrentExclusiveSchedulerPair_Completion_\" data-linktype=\"relative-path\">Completion</a> property for notification that all processing has been completed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"ea4128eb-ee36-3656-cb93-75e2677aa0e1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides task schedulers that coordinate to execute tasks while ensuring that concurrent tasks may run concurrently and exclusive tasks never do.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading.Tasks/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.yml","open_to_public_contributors":true,"api_name":["System.Threading.Tasks.ConcurrentExclusiveSchedulerPair","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair..ctor","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Tasks.ConcurrentExclusiveSchedulerPair","System::Threading::Tasks::ConcurrentExclusiveSchedulerPair","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor","System::Threading::Tasks::ConcurrentExclusiveSchedulerPair::#ctor","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete","System::Threading::Tasks::ConcurrentExclusiveSchedulerPair::Complete","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion","System::Threading::Tasks::ConcurrentExclusiveSchedulerPair::Completion","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler","System::Threading::Tasks::ConcurrentExclusiveSchedulerPair::ConcurrentScheduler","System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler","System::Threading::Tasks::ConcurrentExclusiveSchedulerPair::ExclusiveScheduler"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"ea4128eb-ee36-3656-cb93-75e2677aa0e1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading.Tasks/ConcurrentExclusiveSchedulerPair.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConcurrentExclusiveSchedulerPair class | Microsoft Docs","_op_ogTitle":"ConcurrentExclusiveSchedulerPair class","description":"Provides task schedulers that coordinate to execute tasks while ensuring that concurrent tasks may run concurrently and exclusive tasks never do.\n","toc_asset_id":"_splitted/System.Threading.Tasks/toc.json","toc_rel":"_splitted/System.Threading.Tasks/toc.json","source_url":"","ms.assetid":"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.concurrentexclusiveschedulerpair","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.concurrentexclusiveschedulerpair","fileRelativePath":"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.html"},"themesRelativePathToOutputRoot":"_themes/"}