{"content":"    \r\n    <h1 id=\"System_Net_HttpListenerRequest\">\r\n      <span class=\"lang-csharp\">HttpListenerRequest</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Describes an incoming HTTP request to an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class HttpListenerRequest</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HttpListenerRequest</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>When a client makes a request to a Uniform Resource Identifier (URI) handled by an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object, the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> provides a <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> object that contains information about the sender, the request, and the response that is sent to the client. The <a class=\"xref\" href=\"system.net.httplistenercontext#System_Net_HttpListenerContext_Request_\" data-linktype=\"relative-path\">Request</a> property returns the HttpListenerRequest object that describes the request.  </p>\n<p> The HttpListenerRequest object contains information about the request, such as the request <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_HttpMethod_\" data-linktype=\"relative-path\">HttpMethod</a> string, <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_UserAgent_\" data-linktype=\"relative-path\">UserAgent</a> string, and request body data (see the <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_InputStream_\" data-linktype=\"relative-path\">InputStream</a> property).  </p>\n<p> To reply to the request, you must get the associated response using the <a class=\"xref\" href=\"system.net.httplistenercontext#System_Net_HttpListenerContext_Response_\" data-linktype=\"relative-path\">Response</a> property.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_AcceptTypes\" data-linktype=\"self-bookmark\">AcceptTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the MIME types accepted by the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_ClientCertificateError\" data-linktype=\"self-bookmark\">ClientCertificateError</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an error code that identifies a problem with the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> provided by the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_ContentEncoding\" data-linktype=\"self-bookmark\">ContentEncoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the content encoding that can be used with data sent with the request</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_ContentLength64\" data-linktype=\"self-bookmark\">ContentLength64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length of the body data included in the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_ContentType\" data-linktype=\"self-bookmark\">ContentType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the MIME type of the body data included in the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_Cookies\" data-linktype=\"self-bookmark\">Cookies</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the cookies sent with the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_HasEntityBody\" data-linktype=\"self-bookmark\">HasEntityBody</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the request has associated body data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_Headers\" data-linktype=\"self-bookmark\">Headers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of header name/value pairs sent in the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_HttpMethod\" data-linktype=\"self-bookmark\">HttpMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the HTTP method specified by the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_InputStream\" data-linktype=\"self-bookmark\">InputStream</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a stream that contains the body data sent by the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_IsAuthenticated\" data-linktype=\"self-bookmark\">IsAuthenticated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the client sending this request is authenticated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_IsLocal\" data-linktype=\"self-bookmark\">IsLocal</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the request is sent from the local computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_IsSecureConnection\" data-linktype=\"self-bookmark\">IsSecureConnection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the TCP connection used to send the request is using the Secure Sockets Layer (SSL) protocol.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_IsWebSocketRequest\" data-linktype=\"self-bookmark\">IsWebSocketRequest</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the TCP connection was  a WebSocket request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_KeepAlive\" data-linktype=\"self-bookmark\">KeepAlive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the client requests a persistent connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_LocalEndPoint\" data-linktype=\"self-bookmark\">LocalEndPoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Get the server IP address and port number to which the request is directed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_ProtocolVersion\" data-linktype=\"self-bookmark\">ProtocolVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the HTTP version used by the requesting client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_QueryString\" data-linktype=\"self-bookmark\">QueryString</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the query string included in the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_RawUrl\" data-linktype=\"self-bookmark\">RawUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the URL information (without the host and port) requested by the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_RemoteEndPoint\" data-linktype=\"self-bookmark\">RemoteEndPoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the client IP address and port number from which the request originated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_RequestTraceIdentifier\" data-linktype=\"self-bookmark\">RequestTraceIdentifier</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the request identifier of the incoming HTTP request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_ServiceName\" data-linktype=\"self-bookmark\">ServiceName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Service Provider Name (SPN) that the client sent on the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_TransportContext\" data-linktype=\"self-bookmark\">TransportContext</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> for the client request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_Url\" data-linktype=\"self-bookmark\">Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object requested by the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_UrlReferrer\" data-linktype=\"self-bookmark\">UrlReferrer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Uniform Resource Identifier (URI) of the resource that referred the client to the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_UserAgent\" data-linktype=\"self-bookmark\">UserAgent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the user agent presented by the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_UserHostAddress\" data-linktype=\"self-bookmark\">UserHostAddress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the server IP address and port number to which the request is directed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_UserHostName\" data-linktype=\"self-bookmark\">UserHostName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the DNS name and, if provided, the port number specified by the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_UserLanguages\" data-linktype=\"self-bookmark\">UserLanguages</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the natural languages that are preferred for the response.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_BeginGetClientCertificate_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetClientCertificate(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous request for the client&#39;s X.509 v.3 certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_EndGetClientCertificate_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetClientCertificate(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous request for the client&#39;s X.509 v.3 certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_GetClientCertificate\" data-linktype=\"self-bookmark\">GetClientCertificate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the client&#39;s X.509 v.3 certificate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerRequest_GetClientCertificateAsync\" data-linktype=\"self-bookmark\">GetClientCertificateAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the client&#39;s X.509 v.3 certificate as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_AcceptTypes\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_AcceptTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcceptTypes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the MIME types accepted by the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] AcceptTypes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array that contains the type names specified in the request&#39;s <code>Accept</code> header or <code>null</code> if the client request did not include an <code>Accept</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Accept</code> header is a string of space-separated Multipurpose Internet Mail Extensions (MIME) type names (for example, <code>image/jpeg</code>), which indicate the MIME types that the client is prepared to accept and process in a response. The <code>*/*</code> entry indicates that the client accepts any MIME type. For a detailed description of the <code>Accept</code> header, see RFC 2616, available at <a href=\"http://www.rfc-editor.org/\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<p> For a complete list of request headers, see the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#15\">    public static void ShowRequestProperties1 (HttpListenerRequest request)\n    {\n        // Display the MIME types that can be used in the response.\n        string[] types = request.AcceptTypes;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable MIME types:&quot;);\n            foreach (string s in types)\n            {\n                Console.WriteLine(s);\n            }\n        }\n        // Display the language preferences for the response.\n        types = request.UserLanguages;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable natural languages:&quot;);\n            foreach (string l in types)\n            {\n                Console.WriteLine(l);\n            }\n        }\n        \n        // Display the URL used by the client.\n        Console.WriteLine(&quot;URL: {0}&quot;, request.Url.OriginalString);\n        Console.WriteLine(&quot;Raw URL: {0}&quot;, request.RawUrl);\n        Console.WriteLine(&quot;Query: {0}&quot;, request.QueryString);\n\n        // Display the referring URI.\n        Console.WriteLine(&quot;Referred by: {0}&quot;, request.UrlReferrer);\n\n        //Display the HTTP method.\n        Console.WriteLine(&quot;HTTP Method: {0}&quot;, request.HttpMethod);\n        //Display the host information specified by the client;\n        Console.WriteLine(&quot;Host name: {0}&quot;, request.UserHostName);\n        Console.WriteLine(&quot;Host address: {0}&quot;, request.UserHostAddress);\n        Console.WriteLine(&quot;User agent: {0}&quot;, request.UserAgent);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_ClientCertificateError\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_ClientCertificateError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientCertificateError</div>        \r\n          </div>\r\n    \r\n            <p>Gets an error code that identifies a problem with the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> provided by the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ClientCertificateError { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that contains a Windows error code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The client certificate has not been initialized yet by a call to the <span class=\"xref\">stem.Net.HttpListenerRequest.BeginGetClientCertificate*</span> or <span class=\"xref\">stem.Net.HttpListenerRequest.GetClientCertificate*</span> methods  </p>\n<p> -or -  </p>\n<p> The operation is still in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property contains a Windows error code returned by the Secure Channel (Schannel) Security Support Provider Interface (SSPI), which is used to validate the certificate. For more information about SSPI support for Schannel, see &quot;Creating a Secure Connection Using Schannel&quot; in the Security documentation at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks this property to determine whether the request includes a valid client certificate.  </p>\n<pre><code class=\"lang-vb\" name=\"NCLListener#3\">            Console.WriteLine(&quot;Listening for {0} prefixes...&quot;, listener.Prefixes.Count)\n            Dim context As HttpListenerContext = listener.GetContext()\n            Dim request As HttpListenerRequest = context.Request\n            Console.WriteLine(&quot;Received a request.&quot;)\n            &#39; This server requires a valid client certificate\n            &#39; for requests that are not sent from the local computer.\n\n            &#39; Did the client omit the certificate or send an invalid certificate?\n            If request.IsAuthenticated AndAlso request.GetClientCertificate() Is Nothing OrElse request.ClientCertificateError &lt;&gt; 0 Then\n                &#39; Send a 403 response.\n                Dim badCertificateResponse As HttpListenerResponse = context.Response\n                SendBadCertificateResponse(badCertificateResponse)\n                Console.WriteLine(&quot;Client has invalid certificate.&quot;)\n                Continue Do\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLListener#3\">            Console.WriteLine(&quot;Listening for {0} prefixes...&quot;, listener.Prefixes.Count);\n            HttpListenerContext context = listener.GetContext();\n            HttpListenerRequest request = context.Request;\n            Console.WriteLine(&quot;Received a request.&quot;);\n            // This server requires a valid client certificate\n            // for requests that are not sent from the local computer.\n\n            // Did the client omit the certificate or send an invalid certificate?\n            if (request.IsAuthenticated &amp;&amp;\n                request.GetClientCertificate() == null || \n                request.ClientCertificateError != 0)\n            {\n                // Send a 403 response.\n                HttpListenerResponse badCertificateResponse = context.Response ;\n                SendBadCertificateResponse(badCertificateResponse);\n                Console.WriteLine(&quot;Client has invalid certificate.&quot;);\n                continue;\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_ContentEncoding\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_ContentEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentEncoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets the content encoding that can be used with data sent with the request</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.Encoding ContentEncoding { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object suitable for use with the data in the <span class=\"xref\">stem.Net.HttpListenerRequest.InputStream*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object can be used to convert byte sequences into character sets (code pages) and characters into byte sequences. This property uses the charset value from the <code>Content-Type</code> header to determine the encoding. If that information is not available, this property returns <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Default_\" data-linktype=\"relative-path\">Default</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the ContentEncoding property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#16\">    public static void ShowRequestData (HttpListenerRequest request)\n    {\n        if (!request.HasEntityBody)\n        {\n            Console.WriteLine(&quot;No client data was sent with the request.&quot;);\n            return;\n        }\n        System.IO.Stream body = request.InputStream;\n        System.Text.Encoding encoding = request.ContentEncoding;\n        System.IO.StreamReader reader = new System.IO.StreamReader(body, encoding);\n        if (request.ContentType != null)\n        {\n            Console.WriteLine(&quot;Client data content type {0}&quot;, request.ContentType);\n        }\n        Console.WriteLine(&quot;Client data content length {0}&quot;, request.ContentLength64);\n       \n        Console.WriteLine(&quot;Start of client data:&quot;);\n        // Convert the data to a string and display it on the console.\n        string s = reader.ReadToEnd();\n        Console.WriteLine(s);\n        Console.WriteLine(&quot;End of client data:&quot;);\n        body.Close();\n        reader.Close();\n        // If you are finished with the request, it should be closed also.\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_ContentLength64\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_ContentLength64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentLength64</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length of the body data included in the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long ContentLength64 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The value from the request&#39;s <code>Content-Length</code> header. This value is -1 if the content length is not known.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Content-Length</code> header expresses the length, in bytes, of the body data that accompanies the request.  </p>\n<p> For a complete list of request headers, see the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the ContentLength64 property while processing body data.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#16\">    public static void ShowRequestData (HttpListenerRequest request)\n    {\n        if (!request.HasEntityBody)\n        {\n            Console.WriteLine(&quot;No client data was sent with the request.&quot;);\n            return;\n        }\n        System.IO.Stream body = request.InputStream;\n        System.Text.Encoding encoding = request.ContentEncoding;\n        System.IO.StreamReader reader = new System.IO.StreamReader(body, encoding);\n        if (request.ContentType != null)\n        {\n            Console.WriteLine(&quot;Client data content type {0}&quot;, request.ContentType);\n        }\n        Console.WriteLine(&quot;Client data content length {0}&quot;, request.ContentLength64);\n       \n        Console.WriteLine(&quot;Start of client data:&quot;);\n        // Convert the data to a string and display it on the console.\n        string s = reader.ReadToEnd();\n        Console.WriteLine(s);\n        Console.WriteLine(&quot;End of client data:&quot;);\n        body.Close();\n        reader.Close();\n        // If you are finished with the request, it should be closed also.\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_ContentType\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_ContentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the MIME type of the body data included in the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ContentType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the text of the request&#39;s <code>Content-Type</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a client includes body data in a request, it declares the Multipurpose Internet Mail Extensions (MIME) type of the body data in the <code>Content-Type</code> header. For example, the default MIME type of data returned from a Web form using the <code>POST</code> method is <code>application/x-www-form-urlencoded</code>.  </p>\n<p> For a complete list of request headers, see the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> enumeration and RFC 2616, available at <a href=\"http://www.rfc-editor.org/\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<p> The ContentType is null when there is no <code>Content-Type</code> header in the request.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#16\">    public static void ShowRequestData (HttpListenerRequest request)\n    {\n        if (!request.HasEntityBody)\n        {\n            Console.WriteLine(&quot;No client data was sent with the request.&quot;);\n            return;\n        }\n        System.IO.Stream body = request.InputStream;\n        System.Text.Encoding encoding = request.ContentEncoding;\n        System.IO.StreamReader reader = new System.IO.StreamReader(body, encoding);\n        if (request.ContentType != null)\n        {\n            Console.WriteLine(&quot;Client data content type {0}&quot;, request.ContentType);\n        }\n        Console.WriteLine(&quot;Client data content length {0}&quot;, request.ContentLength64);\n       \n        Console.WriteLine(&quot;Start of client data:&quot;);\n        // Convert the data to a string and display it on the console.\n        string s = reader.ReadToEnd();\n        Console.WriteLine(s);\n        Console.WriteLine(&quot;End of client data:&quot;);\n        body.Close();\n        reader.Close();\n        // If you are finished with the request, it should be closed also.\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_Cookies\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_Cookies_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cookies</div>        \r\n          </div>\r\n    \r\n            <p>Gets the cookies sent with the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.CookieCollection Cookies { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.cookiecollection\" data-linktype=\"relative-path\">CookieCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.cookiecollection\" data-linktype=\"relative-path\">CookieCollection</a> that contains cookies that accompany the request. This property returns an empty collection if the request does not contain cookies.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A cookie is name/value text data from a Web server that is stored on the local (client) computer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of cookies sent with the request.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#18\">        // This example requires the System and System.Net nam&#39;espaces.\n        public static void DisplayCookies(HttpListenerRequest request)\n        {\n            // Print the properties of each cookie.\n            foreach (Cookie cook in request.Cookies)\n            {\n                Console.WriteLine(&quot;Cookie:&quot;);\n                Console.WriteLine(&quot;{0} = {1}&quot;, cook.Name, cook.Value);\n                Console.WriteLine(&quot;Domain: {0}&quot;, cook.Domain);\n                Console.WriteLine(&quot;Path: {0}&quot;, cook.Path);\n                Console.WriteLine(&quot;Port: {0}&quot;, cook.Port);\n                Console.WriteLine(&quot;Secure: {0}&quot;, cook.Secure);\n             \n                Console.WriteLine(&quot;When issued: {0}&quot;, cook.TimeStamp);\n                Console.WriteLine(&quot;Expires: {0} (expired? {1})&quot;, \n                    cook.Expires, cook.Expired);\n                Console.WriteLine(&quot;Don&#39;t save: {0}&quot;, cook.Discard);    \n                Console.WriteLine(&quot;Comment: {0}&quot;, cook.Comment);\n                Console.WriteLine(&quot;Uri for comments: {0}&quot;, cook.CommentUri);\n                Console.WriteLine(&quot;Version: RFC {0}&quot; , cook.Version == 1 ? &quot;2109&quot; : &quot;2965&quot;);\n\n                // Show the string representation of the cookie.\n                Console.WriteLine (&quot;String: {0}&quot;, cook.ToString());\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_HasEntityBody\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_HasEntityBody_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasEntityBody</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the request has associated body data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasEntityBody { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the request has associated body data; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A request that sends data to the server using the <code>POST</code> method, for example, should have an entity body.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#16\">    public static void ShowRequestData (HttpListenerRequest request)\n    {\n        if (!request.HasEntityBody)\n        {\n            Console.WriteLine(&quot;No client data was sent with the request.&quot;);\n            return;\n        }\n        System.IO.Stream body = request.InputStream;\n        System.Text.Encoding encoding = request.ContentEncoding;\n        System.IO.StreamReader reader = new System.IO.StreamReader(body, encoding);\n        if (request.ContentType != null)\n        {\n            Console.WriteLine(&quot;Client data content type {0}&quot;, request.ContentType);\n        }\n        Console.WriteLine(&quot;Client data content length {0}&quot;, request.ContentLength64);\n       \n        Console.WriteLine(&quot;Start of client data:&quot;);\n        // Convert the data to a string and display it on the console.\n        string s = reader.ReadToEnd();\n        Console.WriteLine(s);\n        Console.WriteLine(&quot;End of client data:&quot;);\n        body.Close();\n        reader.Close();\n        // If you are finished with the request, it should be closed also.\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_Headers\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_Headers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Headers</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of header name/value pairs sent in the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Specialized.NameValueCollection Headers { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> that contains the HTTP headers included in the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Request headers contain metadata information. For example, headers can contain the Uniform Resource Identifier (URI) of the resource that referred the client to the server, the identity of the user agent employed by the client, and the acceptable MIME types for data in the response body.  </p>\n<p> For a complete list of request headers, see the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays all the information in a given <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#21\">        // Displays the header information that accompanied a request.\n    public static void DisplayWebHeaderCollection(HttpListenerRequest request)\n    {\n        System.Collections.Specialized.NameValueCollection headers = request.Headers;\n        // Get each header and display each value.\n        foreach (string key in headers.AllKeys)\n        {\n            string[] values = headers.GetValues(key);\n            if(values.Length &gt; 0) \n            {\n                Console.WriteLine(&quot;The values of the {0} header are: &quot;, key);\n                foreach (string value in values) \n                {\n                    Console.WriteLine(&quot;   {0}&quot;, value);\n                }\n            }\n            else\n                Console.WriteLine(&quot;There is no value associated with the header.&quot;);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_HttpMethod\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_HttpMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HttpMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the HTTP method specified by the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string HttpMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the method used in the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HTTP method is typically GET or POST, depending on the action desired by the client.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#17\">        public static void ShowRequestProperties2 (HttpListenerRequest request)\n        {\n            Console.WriteLine(&quot;KeepAlive: {0}&quot;, request.KeepAlive);\n            Console.WriteLine(&quot;Local end point: {0}&quot;, request.LocalEndPoint.ToString());\n            Console.WriteLine(&quot;Remote end point: {0}&quot;, request.RemoteEndPoint.ToString());\n            Console.WriteLine(&quot;Is local? {0}&quot;, request.IsLocal);\n            Console.WriteLine(&quot;HTTP method: {0}&quot;, request.HttpMethod);\n            Console.WriteLine(&quot;Protocol version: {0}&quot;, request.ProtocolVersion);\n            Console.WriteLine(&quot;Is authenticated: {0}&quot;, request.IsAuthenticated);\n            Console.WriteLine(&quot;Is secure: {0}&quot;, request.IsSecureConnection);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_InputStream\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_InputStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputStream</div>        \r\n          </div>\r\n    \r\n            <p>Gets a stream that contains the body data sent by the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Stream InputStream { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A readable <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object that contains the bytes sent by the client in the body of the request. This property returns <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> if no data is sent with the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the client transmits data (for example, using the HTTP <code>POST</code> method), the stream returned by this method contains that data.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Closing the request does not close the stream returned by this property. When you no longer need the stream, you should close it by calling the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property to read the data sent with a request.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#16\">    public static void ShowRequestData (HttpListenerRequest request)\n    {\n        if (!request.HasEntityBody)\n        {\n            Console.WriteLine(&quot;No client data was sent with the request.&quot;);\n            return;\n        }\n        System.IO.Stream body = request.InputStream;\n        System.Text.Encoding encoding = request.ContentEncoding;\n        System.IO.StreamReader reader = new System.IO.StreamReader(body, encoding);\n        if (request.ContentType != null)\n        {\n            Console.WriteLine(&quot;Client data content type {0}&quot;, request.ContentType);\n        }\n        Console.WriteLine(&quot;Client data content length {0}&quot;, request.ContentLength64);\n       \n        Console.WriteLine(&quot;Start of client data:&quot;);\n        // Convert the data to a string and display it on the console.\n        string s = reader.ReadToEnd();\n        Console.WriteLine(s);\n        Console.WriteLine(&quot;End of client data:&quot;);\n        body.Close();\n        reader.Close();\n        // If you are finished with the request, it should be closed also.\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_IsAuthenticated\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_IsAuthenticated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAuthenticated</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the client sending this request is authenticated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsAuthenticated { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the client was authenticated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Your application requests client authentication using the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_AuthenticationSchemes_\" data-linktype=\"relative-path\">AuthenticationSchemes</a> or <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_AuthenticationSchemeSelectorDelegate_\" data-linktype=\"relative-path\">AuthenticationSchemeSelectorDelegate</a> property.  </p>\n<p> Your application does not receive an <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> for requests from clients that are not successfully authenticated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of the IsAuthenticated property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#17\">        public static void ShowRequestProperties2 (HttpListenerRequest request)\n        {\n            Console.WriteLine(&quot;KeepAlive: {0}&quot;, request.KeepAlive);\n            Console.WriteLine(&quot;Local end point: {0}&quot;, request.LocalEndPoint.ToString());\n            Console.WriteLine(&quot;Remote end point: {0}&quot;, request.RemoteEndPoint.ToString());\n            Console.WriteLine(&quot;Is local? {0}&quot;, request.IsLocal);\n            Console.WriteLine(&quot;HTTP method: {0}&quot;, request.HttpMethod);\n            Console.WriteLine(&quot;Protocol version: {0}&quot;, request.ProtocolVersion);\n            Console.WriteLine(&quot;Is authenticated: {0}&quot;, request.IsAuthenticated);\n            Console.WriteLine(&quot;Is secure: {0}&quot;, request.IsSecureConnection);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_IsLocal\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_IsLocal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLocal</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the request is sent from the local computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsLocal { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the request originated on the same computer as the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object that provided the request; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Applications can use this property to perform special processing when requests are from the local computer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the IsLocal property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#17\">        public static void ShowRequestProperties2 (HttpListenerRequest request)\n        {\n            Console.WriteLine(&quot;KeepAlive: {0}&quot;, request.KeepAlive);\n            Console.WriteLine(&quot;Local end point: {0}&quot;, request.LocalEndPoint.ToString());\n            Console.WriteLine(&quot;Remote end point: {0}&quot;, request.RemoteEndPoint.ToString());\n            Console.WriteLine(&quot;Is local? {0}&quot;, request.IsLocal);\n            Console.WriteLine(&quot;HTTP method: {0}&quot;, request.HttpMethod);\n            Console.WriteLine(&quot;Protocol version: {0}&quot;, request.ProtocolVersion);\n            Console.WriteLine(&quot;Is authenticated: {0}&quot;, request.IsAuthenticated);\n            Console.WriteLine(&quot;Is secure: {0}&quot;, request.IsSecureConnection);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_IsSecureConnection\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_IsSecureConnection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecureConnection</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the TCP connection used to send the request is using the Secure Sockets Layer (SSL) protocol.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSecureConnection { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the TCP connection is using SSL; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To request a secure connection, the client request uses <a class=\"xref\" href=\"system.uri#System_Uri_UriSchemeHttps\" data-linktype=\"relative-path\">UriSchemeHttps</a> instead of <a class=\"xref\" href=\"system.uri#System_Uri_UriSchemeHttp\" data-linktype=\"relative-path\">UriSchemeHttp</a>. If the connection cannot be established using SSL, the client receives a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> that provides information about the error.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the IsSecureConnection property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#17\">        public static void ShowRequestProperties2 (HttpListenerRequest request)\n        {\n            Console.WriteLine(&quot;KeepAlive: {0}&quot;, request.KeepAlive);\n            Console.WriteLine(&quot;Local end point: {0}&quot;, request.LocalEndPoint.ToString());\n            Console.WriteLine(&quot;Remote end point: {0}&quot;, request.RemoteEndPoint.ToString());\n            Console.WriteLine(&quot;Is local? {0}&quot;, request.IsLocal);\n            Console.WriteLine(&quot;HTTP method: {0}&quot;, request.HttpMethod);\n            Console.WriteLine(&quot;Protocol version: {0}&quot;, request.ProtocolVersion);\n            Console.WriteLine(&quot;Is authenticated: {0}&quot;, request.IsAuthenticated);\n            Console.WriteLine(&quot;Is secure: {0}&quot;, request.IsSecureConnection);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_IsWebSocketRequest\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_IsWebSocketRequest_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsWebSocketRequest</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the TCP connection was  a WebSocket request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsWebSocketRequest { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n<p> <code>true</code> if the TCP connection is a WebSocket request; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_KeepAlive\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_KeepAlive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeepAlive</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the client requests a persistent connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool KeepAlive { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the connection should be kept open; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an HTTP client and server expect to exchange data multiple times in a short time period, a persistent connection speeds up their communications by allowing them to avoid the overhead required to open and close a TCP connection for each message. For clients using HTTP/1.1, the default value for this property is <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#17\">        public static void ShowRequestProperties2 (HttpListenerRequest request)\n        {\n            Console.WriteLine(&quot;KeepAlive: {0}&quot;, request.KeepAlive);\n            Console.WriteLine(&quot;Local end point: {0}&quot;, request.LocalEndPoint.ToString());\n            Console.WriteLine(&quot;Remote end point: {0}&quot;, request.RemoteEndPoint.ToString());\n            Console.WriteLine(&quot;Is local? {0}&quot;, request.IsLocal);\n            Console.WriteLine(&quot;HTTP method: {0}&quot;, request.HttpMethod);\n            Console.WriteLine(&quot;Protocol version: {0}&quot;, request.ProtocolVersion);\n            Console.WriteLine(&quot;Is authenticated: {0}&quot;, request.IsAuthenticated);\n            Console.WriteLine(&quot;Is secure: {0}&quot;, request.IsSecureConnection);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_LocalEndPoint\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_LocalEndPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalEndPoint</div>        \r\n          </div>\r\n    \r\n            <p>Get the server IP address and port number to which the request is directed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.IPEndPoint LocalEndPoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> that represents the IP address that the request is sent to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is useful when you want to respond to requests based on the way they are addressed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#17\">        public static void ShowRequestProperties2 (HttpListenerRequest request)\n        {\n            Console.WriteLine(&quot;KeepAlive: {0}&quot;, request.KeepAlive);\n            Console.WriteLine(&quot;Local end point: {0}&quot;, request.LocalEndPoint.ToString());\n            Console.WriteLine(&quot;Remote end point: {0}&quot;, request.RemoteEndPoint.ToString());\n            Console.WriteLine(&quot;Is local? {0}&quot;, request.IsLocal);\n            Console.WriteLine(&quot;HTTP method: {0}&quot;, request.HttpMethod);\n            Console.WriteLine(&quot;Protocol version: {0}&quot;, request.ProtocolVersion);\n            Console.WriteLine(&quot;Is authenticated: {0}&quot;, request.IsAuthenticated);\n            Console.WriteLine(&quot;Is secure: {0}&quot;, request.IsSecureConnection);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_ProtocolVersion\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_ProtocolVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProtocolVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the HTTP version used by the requesting client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version ProtocolVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> that identifies the client&#39;s version of HTTP.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capabilities of different HTTP versions are specified in the documents available at <a href=\"http://www.rfc-editor.org/\" data-linktype=\"external\">http://www.rfc-editor.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#17\">        public static void ShowRequestProperties2 (HttpListenerRequest request)\n        {\n            Console.WriteLine(&quot;KeepAlive: {0}&quot;, request.KeepAlive);\n            Console.WriteLine(&quot;Local end point: {0}&quot;, request.LocalEndPoint.ToString());\n            Console.WriteLine(&quot;Remote end point: {0}&quot;, request.RemoteEndPoint.ToString());\n            Console.WriteLine(&quot;Is local? {0}&quot;, request.IsLocal);\n            Console.WriteLine(&quot;HTTP method: {0}&quot;, request.HttpMethod);\n            Console.WriteLine(&quot;Protocol version: {0}&quot;, request.ProtocolVersion);\n            Console.WriteLine(&quot;Is authenticated: {0}&quot;, request.IsAuthenticated);\n            Console.WriteLine(&quot;Is secure: {0}&quot;, request.IsSecureConnection);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_QueryString\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_QueryString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryString</div>        \r\n          </div>\r\n    \r\n            <p>Gets the query string included in the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Specialized.NameValueCollection QueryString { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a> object that contains the query data included in the request <span class=\"xref\">stem.Net.HttpListenerRequest.Url*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a URL, the query information is separated from the path information by a question mark (?). Name/value pairs are separated by an equals sign (=). To access the query data as a single string, get the <a class=\"xref\" href=\"system.uri#System_Uri_Query_\" data-linktype=\"relative-path\">Query</a> property value from the <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object returned by <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_Url_\" data-linktype=\"relative-path\">Url</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Queries without an equal sign (example: <a href=\"http://www.contoso.com/query.htm?Name\" data-linktype=\"external\">http://www.contoso.com/query.htm?Name</a> ) are added to the <code>null</code> key in the <a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the QueryString property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#15\">    public static void ShowRequestProperties1 (HttpListenerRequest request)\n    {\n        // Display the MIME types that can be used in the response.\n        string[] types = request.AcceptTypes;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable MIME types:&quot;);\n            foreach (string s in types)\n            {\n                Console.WriteLine(s);\n            }\n        }\n        // Display the language preferences for the response.\n        types = request.UserLanguages;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable natural languages:&quot;);\n            foreach (string l in types)\n            {\n                Console.WriteLine(l);\n            }\n        }\n        \n        // Display the URL used by the client.\n        Console.WriteLine(&quot;URL: {0}&quot;, request.Url.OriginalString);\n        Console.WriteLine(&quot;Raw URL: {0}&quot;, request.RawUrl);\n        Console.WriteLine(&quot;Query: {0}&quot;, request.QueryString);\n\n        // Display the referring URI.\n        Console.WriteLine(&quot;Referred by: {0}&quot;, request.UrlReferrer);\n\n        //Display the HTTP method.\n        Console.WriteLine(&quot;HTTP Method: {0}&quot;, request.HttpMethod);\n        //Display the host information specified by the client;\n        Console.WriteLine(&quot;Host name: {0}&quot;, request.UserHostName);\n        Console.WriteLine(&quot;Host address: {0}&quot;, request.UserHostAddress);\n        Console.WriteLine(&quot;User agent: {0}&quot;, request.UserAgent);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_RawUrl\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_RawUrl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RawUrl</div>        \r\n          </div>\r\n    \r\n            <p>Gets the URL information (without the host and port) requested by the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string RawUrl { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the raw URL for this request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The raw URL is defined as the part of the URL following the domain information. In the URL string <code>http://www.contoso.com/articles/recent.aspx</code>, the raw URL is <code>/articles/recent.aspx</code>. The raw URL includes the query string, if present.  </p>\n<p> To obtain the host and port information, use the <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_RemoteEndPoint_\" data-linktype=\"relative-path\">RemoteEndPoint</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the RawUrl property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#11\">    public static void CheckTestUrl(HttpListener listener, HttpListenerRequest request)\n    {\n        if (request.RawUrl == &quot;/www.contoso.com/test/NoReply&quot;)\n        {\n            listener.Abort ();\n            return;\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_RemoteEndPoint\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_RemoteEndPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoteEndPoint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the client IP address and port number from which the request originated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.IPEndPoint RemoteEndPoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> that represents the IP address and port number from which the request originated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#17\">        public static void ShowRequestProperties2 (HttpListenerRequest request)\n        {\n            Console.WriteLine(&quot;KeepAlive: {0}&quot;, request.KeepAlive);\n            Console.WriteLine(&quot;Local end point: {0}&quot;, request.LocalEndPoint.ToString());\n            Console.WriteLine(&quot;Remote end point: {0}&quot;, request.RemoteEndPoint.ToString());\n            Console.WriteLine(&quot;Is local? {0}&quot;, request.IsLocal);\n            Console.WriteLine(&quot;HTTP method: {0}&quot;, request.HttpMethod);\n            Console.WriteLine(&quot;Protocol version: {0}&quot;, request.ProtocolVersion);\n            Console.WriteLine(&quot;Is authenticated: {0}&quot;, request.IsAuthenticated);\n            Console.WriteLine(&quot;Is secure: {0}&quot;, request.IsSecureConnection);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_RequestTraceIdentifier\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_RequestTraceIdentifier_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RequestTraceIdentifier</div>        \r\n          </div>\r\n    \r\n            <p>Gets the request identifier of the incoming HTTP request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Guid RequestTraceIdentifier { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> object that contains the identifier of the HTTP request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_ServiceName\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_ServiceName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ServiceName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Service Provider Name (SPN) that the client sent on the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ServiceName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the SPN the client sent on the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An application could use the ServiceName property to perform custom Service Provide Name (SPN) validation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_TransportContext\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_TransportContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransportContext</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> for the client request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.TransportContext TransportContext { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> object for the client request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> property can be used to retrieve the channel binding token (CBT) for an <a class=\"xref\" href=\"system.net.httplistenerrequest\" data-linktype=\"relative-path\">HttpListenerRequest</a> which was sent using HTTPS.  </p>\n<p> An application could use the <a class=\"xref\" href=\"system.net.transportcontext\" data-linktype=\"relative-path\">TransportContext</a> property to perform custom authentication using calls to the native Win32 <a href=\"http://go.microsoft.com/fwlink/?LinkId=147021\" data-linktype=\"external\">AcceptSecurityContext</a> function.  </p>\n<p> If an application attempts to retrieve the channel binding token (CBT) from this TransportContext property using the <a class=\"xref\" href=\"system.net.transportcontext#System_Net_TransportContext_GetChannelBinding_\" data-linktype=\"relative-path\">GetChannelBinding</a> method and the <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbindingkind\" data-linktype=\"relative-path\">ChannelBindingKind</a> is not <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbindingkind\" data-linktype=\"relative-path\">ChannelBindingKind</a>, then the <a class=\"xref\" href=\"system.net.httplistenerrequest\" data-linktype=\"relative-path\">HttpListenerRequest</a> will throw <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. The <a class=\"xref\" href=\"system.net.httplistenerrequest\" data-linktype=\"relative-path\">HttpListenerRequest</a> overrides the <a class=\"xref\" href=\"system.net.transportcontext#System_Net_TransportContext_GetChannelBinding_\" data-linktype=\"relative-path\">GetChannelBinding</a> method with an internal implementation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_Url\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_Url_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Url</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object requested by the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Uri Url { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object that identifies the resource requested by the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Url property allows you to obtain all the information available from a <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object. If you need to know only the raw text of the URI request, consider using the <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_RawUrl_\" data-linktype=\"relative-path\">RawUrl</a> property instead.  </p>\n<p> The Url property is null if the <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> from the client could not be parsed.  </p>\n<p> The <a class=\"xref\" href=\"system.net.configuration.httplistenerelement#System_Net_Configuration_HttpListenerElement_UnescapeRequestUrl_\" data-linktype=\"relative-path\">UnescapeRequestUrl</a> property indicates if <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.  </p>\n<p> When a <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> instance receives a request through the <code>http.sys</code> service, it creates an instance of the URI string provided by <code>http.sys</code>, and exposes it as the Url property.  </p>\n<p> The <code>http.sys</code> service exposes two request URI strings:  </p>\n<ul>\n<li><p>Raw URI  </p>\n</li>\n<li><p>Converted URI  </p>\n<p>The raw URI is the <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">System.Uri</a> provided in the request line of a HTTP request:  </p>\n<p><code>GET /path/</code>  </p>\n<p><code>Host: www.contoso.com</code>  </p>\n<p>The raw URI provided by <code>http.sys</code> for the request mentioned above, is &quot;/path/&quot;. This represents the string following the HTTP verb as it was sent over the network.  </p>\n<p>The <code>http.sys</code> service creates a converted URI from the information provided in the request using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to. This is done by comparing the information from the request with a set of registered URI prefixes. In order to be able to compare those values, some normalization to the request needs to be done. For the sample above the converted URI would be as follows:  </p>\n<p><code>http://www.contoso.com/path/</code>  </p>\n<p>The <code>http.sys</code> service combines the <a class=\"xref\" href=\"system.uri#System_Uri_Host_\" data-linktype=\"relative-path\">Host</a> property value and the string in the request line to create a converted URI. In addition, <code>http.sys</code> and the <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">System.Uri</a> class also do the following:  </p>\n</li>\n<li><p>Un-escapes all percent encoded values.  </p>\n</li>\n<li><p>Converts percent-encoded non-ASCII characters into a UTF-16 character representation. Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).  </p>\n</li>\n<li><p>Executes other normalization steps, like path compression.  </p>\n<p>Since the request doesn&#39;t contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.  </p>\n<p>Therefore <code>http.sys</code> provides two registry keys for modifying the process:  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Registry Key</th>\n<th>Default Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EnableNonUTF8</td>\n<td>1</td>\n<td>If zero, <code>http.sys</code> accepts only UTF-8-encoded URLs.<br><br> If non-zero, <code>http.sys</code> also accepts ANSI-encoded or DBCS-encoded URLs in requests.</td>\n</tr>\n<tr>\n<td>FavorUTF8</td>\n<td>1</td>\n<td>If non-zero, <code>http.sys</code> always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS.<br><br> If zero (and EnableNonUTF8 is non-zero), <code>http.sys</code> tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.</td>\n</tr>\n</tbody>\n</table>\n<p> When <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> receives a request, it uses the converted URI from <code>http.sys</code> as input to the Url property.  </p>\n<p> There is a need for supporting characters besides characters and numbers in URIs. An example is the following URI, which is used to retrieve customer information for customer number &quot;1/3812&quot;:  </p>\n<p> <code>http://www.contoso.com/Customer(&#39;1%2F3812&#39;)/</code>  </p>\n<p> Note the percent-encoded slash in the Uri (%2F). This is necessary, since in this case the slash character represents data and not a path delimiter.  </p>\n<p> Passing the string to Uri constructor will lead to the following URI:  </p>\n<p> <code>http://www.contoso.com/Customer(&#39;1/3812&#39;)/</code>  </p>\n<p> Splitting the path into its segments would result in the following elements:  </p>\n<p> <code>Customer(&#39;1</code>  </p>\n<p> <code>3812&#39;)</code>  </p>\n<p> This is not the intent of the sender of the request.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.configuration.httplistenerelement#System_Net_Configuration_HttpListenerElement_UnescapeRequestUrl_\" data-linktype=\"relative-path\">UnescapeRequestUrl</a> property is set to false, then when the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> receives a request, it uses the raw URI instead of the converted URI from <code>http.sys</code> as input to the Url property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the Url property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#15\">    public static void ShowRequestProperties1 (HttpListenerRequest request)\n    {\n        // Display the MIME types that can be used in the response.\n        string[] types = request.AcceptTypes;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable MIME types:&quot;);\n            foreach (string s in types)\n            {\n                Console.WriteLine(s);\n            }\n        }\n        // Display the language preferences for the response.\n        types = request.UserLanguages;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable natural languages:&quot;);\n            foreach (string l in types)\n            {\n                Console.WriteLine(l);\n            }\n        }\n        \n        // Display the URL used by the client.\n        Console.WriteLine(&quot;URL: {0}&quot;, request.Url.OriginalString);\n        Console.WriteLine(&quot;Raw URL: {0}&quot;, request.RawUrl);\n        Console.WriteLine(&quot;Query: {0}&quot;, request.QueryString);\n\n        // Display the referring URI.\n        Console.WriteLine(&quot;Referred by: {0}&quot;, request.UrlReferrer);\n\n        //Display the HTTP method.\n        Console.WriteLine(&quot;HTTP Method: {0}&quot;, request.HttpMethod);\n        //Display the host information specified by the client;\n        Console.WriteLine(&quot;Host name: {0}&quot;, request.UserHostName);\n        Console.WriteLine(&quot;Host address: {0}&quot;, request.UserHostAddress);\n        Console.WriteLine(&quot;User agent: {0}&quot;, request.UserAgent);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_UrlReferrer\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_UrlReferrer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UrlReferrer</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Uniform Resource Identifier (URI) of the resource that referred the client to the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Uri UrlReferrer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object that contains the text of the request&#39;s <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> header, or <code>null</code> if the header was not included in the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a client has followed a hyperlink to the requested URI, its request might contain a <code>Referrer</code> header that identifies the URI of the resource that contained the hyperlink.  </p>\n<p> Clients can falsify or choose not to present a <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> header. Therefore, while the UrlReferrer property can be useful for identifying basic trends in Web traffic; you should not use it as part of an authorization scheme to control access to data.  </p>\n<p> For a complete list of request headers, see the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> enumeration.  </p>\n<p> The UrlReferrer is null when there is no <code>Referrer</code> header in the request or when the <code>Referrer</code> header is present in the request but does not parse to a valid <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#15\">    public static void ShowRequestProperties1 (HttpListenerRequest request)\n    {\n        // Display the MIME types that can be used in the response.\n        string[] types = request.AcceptTypes;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable MIME types:&quot;);\n            foreach (string s in types)\n            {\n                Console.WriteLine(s);\n            }\n        }\n        // Display the language preferences for the response.\n        types = request.UserLanguages;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable natural languages:&quot;);\n            foreach (string l in types)\n            {\n                Console.WriteLine(l);\n            }\n        }\n        \n        // Display the URL used by the client.\n        Console.WriteLine(&quot;URL: {0}&quot;, request.Url.OriginalString);\n        Console.WriteLine(&quot;Raw URL: {0}&quot;, request.RawUrl);\n        Console.WriteLine(&quot;Query: {0}&quot;, request.QueryString);\n\n        // Display the referring URI.\n        Console.WriteLine(&quot;Referred by: {0}&quot;, request.UrlReferrer);\n\n        //Display the HTTP method.\n        Console.WriteLine(&quot;HTTP Method: {0}&quot;, request.HttpMethod);\n        //Display the host information specified by the client;\n        Console.WriteLine(&quot;Host name: {0}&quot;, request.UserHostName);\n        Console.WriteLine(&quot;Host address: {0}&quot;, request.UserHostAddress);\n        Console.WriteLine(&quot;User agent: {0}&quot;, request.UserAgent);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_UserAgent\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_UserAgent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserAgent</div>        \r\n          </div>\r\n    \r\n            <p>Gets the user agent presented by the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string UserAgent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object that contains the text of the request&#39;s <code>User-Agent</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>User-Agent</code> header typically contains text that identifies the name and version number of the software used to generate the request.  </p>\n<p> For a complete list of request headers, see the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> enumeration.  </p>\n<p> The UserAgent is null when there is no <code>User-Agent</code> header in the request.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#15\">    public static void ShowRequestProperties1 (HttpListenerRequest request)\n    {\n        // Display the MIME types that can be used in the response.\n        string[] types = request.AcceptTypes;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable MIME types:&quot;);\n            foreach (string s in types)\n            {\n                Console.WriteLine(s);\n            }\n        }\n        // Display the language preferences for the response.\n        types = request.UserLanguages;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable natural languages:&quot;);\n            foreach (string l in types)\n            {\n                Console.WriteLine(l);\n            }\n        }\n        \n        // Display the URL used by the client.\n        Console.WriteLine(&quot;URL: {0}&quot;, request.Url.OriginalString);\n        Console.WriteLine(&quot;Raw URL: {0}&quot;, request.RawUrl);\n        Console.WriteLine(&quot;Query: {0}&quot;, request.QueryString);\n\n        // Display the referring URI.\n        Console.WriteLine(&quot;Referred by: {0}&quot;, request.UrlReferrer);\n\n        //Display the HTTP method.\n        Console.WriteLine(&quot;HTTP Method: {0}&quot;, request.HttpMethod);\n        //Display the host information specified by the client;\n        Console.WriteLine(&quot;Host name: {0}&quot;, request.UserHostName);\n        Console.WriteLine(&quot;Host address: {0}&quot;, request.UserHostAddress);\n        Console.WriteLine(&quot;User agent: {0}&quot;, request.UserAgent);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_UserHostAddress\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_UserHostAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserHostAddress</div>        \r\n          </div>\r\n    \r\n            <p>Gets the server IP address and port number to which the request is directed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string UserHostAddress { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the host address information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The information returned by this property is also available in the <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_LocalEndPoint_\" data-linktype=\"relative-path\">LocalEndPoint</a> property value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#15\">    public static void ShowRequestProperties1 (HttpListenerRequest request)\n    {\n        // Display the MIME types that can be used in the response.\n        string[] types = request.AcceptTypes;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable MIME types:&quot;);\n            foreach (string s in types)\n            {\n                Console.WriteLine(s);\n            }\n        }\n        // Display the language preferences for the response.\n        types = request.UserLanguages;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable natural languages:&quot;);\n            foreach (string l in types)\n            {\n                Console.WriteLine(l);\n            }\n        }\n        \n        // Display the URL used by the client.\n        Console.WriteLine(&quot;URL: {0}&quot;, request.Url.OriginalString);\n        Console.WriteLine(&quot;Raw URL: {0}&quot;, request.RawUrl);\n        Console.WriteLine(&quot;Query: {0}&quot;, request.QueryString);\n\n        // Display the referring URI.\n        Console.WriteLine(&quot;Referred by: {0}&quot;, request.UrlReferrer);\n\n        //Display the HTTP method.\n        Console.WriteLine(&quot;HTTP Method: {0}&quot;, request.HttpMethod);\n        //Display the host information specified by the client;\n        Console.WriteLine(&quot;Host name: {0}&quot;, request.UserHostName);\n        Console.WriteLine(&quot;Host address: {0}&quot;, request.UserHostAddress);\n        Console.WriteLine(&quot;User agent: {0}&quot;, request.UserAgent);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_UserHostName\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_UserHostName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserHostName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the DNS name and, if provided, the port number specified by the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string UserHostName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value that contains the text of the request&#39;s <code>Host</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Host</code> header contains the requested server host name and port number, if specified, separated by a colon (for example, <code>www.contoso.com:8080</code>).  </p>\n<p> You can use this property to return different responses depending on the host name specified in the request.  </p>\n<p> For a complete list of request headers, see the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#15\">    public static void ShowRequestProperties1 (HttpListenerRequest request)\n    {\n        // Display the MIME types that can be used in the response.\n        string[] types = request.AcceptTypes;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable MIME types:&quot;);\n            foreach (string s in types)\n            {\n                Console.WriteLine(s);\n            }\n        }\n        // Display the language preferences for the response.\n        types = request.UserLanguages;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable natural languages:&quot;);\n            foreach (string l in types)\n            {\n                Console.WriteLine(l);\n            }\n        }\n        \n        // Display the URL used by the client.\n        Console.WriteLine(&quot;URL: {0}&quot;, request.Url.OriginalString);\n        Console.WriteLine(&quot;Raw URL: {0}&quot;, request.RawUrl);\n        Console.WriteLine(&quot;Query: {0}&quot;, request.QueryString);\n\n        // Display the referring URI.\n        Console.WriteLine(&quot;Referred by: {0}&quot;, request.UrlReferrer);\n\n        //Display the HTTP method.\n        Console.WriteLine(&quot;HTTP Method: {0}&quot;, request.HttpMethod);\n        //Display the host information specified by the client;\n        Console.WriteLine(&quot;Host name: {0}&quot;, request.UserHostName);\n        Console.WriteLine(&quot;Host address: {0}&quot;, request.UserHostAddress);\n        Console.WriteLine(&quot;User agent: {0}&quot;, request.UserAgent);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_UserLanguages\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_UserLanguages_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserLanguages</div>        \r\n          </div>\r\n    \r\n            <p>Gets the natural languages that are preferred for the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] UserLanguages { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array that contains the languages specified in the request&#39;s <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> header or <code>null</code> if the client request did not include an <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a detailed description of the <code>Accept-Language</code> header, see RFC 2616 Section 14.4, available at <a href=\"http://www.rfc-editor.org/\" data-linktype=\"external\">http://www.rfc-editor.org</a>.  </p>\n<p> For a complete list of request headers, see the <a class=\"xref\" href=\"system.net.httprequestheader\" data-linktype=\"relative-path\">HttpRequestHeader</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the languages from the request&#39;s <code>Accept-Language</code> header.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#15\">    public static void ShowRequestProperties1 (HttpListenerRequest request)\n    {\n        // Display the MIME types that can be used in the response.\n        string[] types = request.AcceptTypes;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable MIME types:&quot;);\n            foreach (string s in types)\n            {\n                Console.WriteLine(s);\n            }\n        }\n        // Display the language preferences for the response.\n        types = request.UserLanguages;\n        if (types != null)\n        {\n            Console.WriteLine(&quot;Acceptable natural languages:&quot;);\n            foreach (string l in types)\n            {\n                Console.WriteLine(l);\n            }\n        }\n        \n        // Display the URL used by the client.\n        Console.WriteLine(&quot;URL: {0}&quot;, request.Url.OriginalString);\n        Console.WriteLine(&quot;Raw URL: {0}&quot;, request.RawUrl);\n        Console.WriteLine(&quot;Query: {0}&quot;, request.QueryString);\n\n        // Display the referring URI.\n        Console.WriteLine(&quot;Referred by: {0}&quot;, request.UrlReferrer);\n\n        //Display the HTTP method.\n        Console.WriteLine(&quot;HTTP Method: {0}&quot;, request.HttpMethod);\n        //Display the host information specified by the client;\n        Console.WriteLine(&quot;Host name: {0}&quot;, request.UserHostName);\n        Console.WriteLine(&quot;Host address: {0}&quot;, request.UserHostAddress);\n        Console.WriteLine(&quot;User agent: {0}&quot;, request.UserAgent);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_BeginGetClientCertificate_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_BeginGetClientCertificate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetClientCertificate(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous request for the client&#39;s X.509 v.3 certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginGetClientCertificate (AsyncCallback requestCallback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the callback delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that indicates the status of the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_EndGetClientCertificate_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_EndGetClientCertificate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetClientCertificate(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous request for the client&#39;s X.509 v.3 certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.X509Certificate2 EndGetClientCertificate (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pending request for the certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object that is returned when the operation started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not obtained by calling <span class=\"xref\">stem.Net.HttpListenerRequest.BeginGetClientCertificate*</span><code>e.</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method was already called for the operation identified by <code>asyncResult</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_GetClientCertificate\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_GetClientCertificate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetClientCertificate()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the client&#39;s X.509 v.3 certificate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.cryptography.x509certificates\" data-linktype=\"relative-path\">System.Security.Cryptography.X509Certificates</a> object that contains the client&#39;s X.509 v.3 certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A call to this method to retrieve the client&#39;s X.509 v.3 certificate is in progress and therefore another call to this method cannot be made.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the certificate is retrieved.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerRequest_GetClientCertificateAsync\">\r\n    \r\n            <a id=\"System_Net_HttpListenerRequest_GetClientCertificateAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetClientCertificateAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the client&#39;s X.509 v.3 certificate as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt; GetClientCertificateAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.  </p>\n<p> The task object representing the asynchronous operation. The <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property on the task object returns a <a class=\"xref\" href=\"system.security.cryptography.x509certificates\" data-linktype=\"relative-path\">System.Security.Cryptography.X509Certificates</a> object that contains the client&#39;s X.509 v.3 certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object will complete when the certificate has been retrieved.  </p>\n<p> If a call to this method to retrieve the client&#39;s X.509 v.3 certificate is in progress, then another call to this method cannot be made.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.HttpListenerRequest.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpListenerRequest.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.AcceptTypes\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.BeginGetClientCertificate\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.ClientCertificateError\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.ContentEncoding\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.ContentLength64\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.ContentType\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.Cookies\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.EndGetClientCertificate\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.GetClientCertificate\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.GetClientCertificateAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.HasEntityBody\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.Headers\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.HttpMethod\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.InputStream\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.IsAuthenticated\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.IsLocal\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.IsSecureConnection\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.IsWebSocketRequest\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.KeepAlive\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.LocalEndPoint\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.ProtocolVersion\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.QueryString\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.RawUrl\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.RemoteEndPoint\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.RequestTraceIdentifier\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.ServiceName\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.TransportContext\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.Url\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.UrlReferrer\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.UserAgent\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.UserHostAddress\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.UserHostName\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerRequest.UserLanguages\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d29628aa-f013-c25e-def7-89f36d65fe5a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes an incoming HTTP request to an  object. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.HttpListenerRequest\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.HttpListenerRequest.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpListenerRequest.yml","open_to_public_contributors":true,"api_name":["System.Net.HttpListenerRequest","System.Net.HttpListenerRequest.AcceptTypes","System.Net.HttpListenerRequest.BeginGetClientCertificate","System.Net.HttpListenerRequest.ClientCertificateError","System.Net.HttpListenerRequest.ContentEncoding","System.Net.HttpListenerRequest.ContentLength64","System.Net.HttpListenerRequest.ContentType","System.Net.HttpListenerRequest.Cookies","System.Net.HttpListenerRequest.EndGetClientCertificate","System.Net.HttpListenerRequest.GetClientCertificate","System.Net.HttpListenerRequest.GetClientCertificateAsync","System.Net.HttpListenerRequest.HasEntityBody","System.Net.HttpListenerRequest.Headers","System.Net.HttpListenerRequest.HttpMethod","System.Net.HttpListenerRequest.InputStream","System.Net.HttpListenerRequest.IsAuthenticated","System.Net.HttpListenerRequest.IsLocal","System.Net.HttpListenerRequest.IsSecureConnection","System.Net.HttpListenerRequest.IsWebSocketRequest","System.Net.HttpListenerRequest.KeepAlive","System.Net.HttpListenerRequest.LocalEndPoint","System.Net.HttpListenerRequest.ProtocolVersion","System.Net.HttpListenerRequest.QueryString","System.Net.HttpListenerRequest.RawUrl","System.Net.HttpListenerRequest.RemoteEndPoint","System.Net.HttpListenerRequest.RequestTraceIdentifier","System.Net.HttpListenerRequest.ServiceName","System.Net.HttpListenerRequest.TransportContext","System.Net.HttpListenerRequest.Url","System.Net.HttpListenerRequest.UrlReferrer","System.Net.HttpListenerRequest.UserAgent","System.Net.HttpListenerRequest.UserHostAddress","System.Net.HttpListenerRequest.UserHostName","System.Net.HttpListenerRequest.UserLanguages"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.HttpListenerRequest","System::Net::HttpListenerRequest","System.Net.HttpListenerRequest.AcceptTypes","System::Net::HttpListenerRequest::AcceptTypes","System.Net.HttpListenerRequest.BeginGetClientCertificate","System::Net::HttpListenerRequest::BeginGetClientCertificate","System.Net.HttpListenerRequest.ClientCertificateError","System::Net::HttpListenerRequest::ClientCertificateError","System.Net.HttpListenerRequest.ContentEncoding","System::Net::HttpListenerRequest::ContentEncoding","System.Net.HttpListenerRequest.ContentLength64","System::Net::HttpListenerRequest::ContentLength64","System.Net.HttpListenerRequest.ContentType","System::Net::HttpListenerRequest::ContentType","System.Net.HttpListenerRequest.Cookies","System::Net::HttpListenerRequest::Cookies","System.Net.HttpListenerRequest.EndGetClientCertificate","System::Net::HttpListenerRequest::EndGetClientCertificate","System.Net.HttpListenerRequest.GetClientCertificate","System::Net::HttpListenerRequest::GetClientCertificate","System.Net.HttpListenerRequest.GetClientCertificateAsync","System::Net::HttpListenerRequest::GetClientCertificateAsync","System.Net.HttpListenerRequest.HasEntityBody","System::Net::HttpListenerRequest::HasEntityBody","System.Net.HttpListenerRequest.Headers","System::Net::HttpListenerRequest::Headers","System.Net.HttpListenerRequest.HttpMethod","System::Net::HttpListenerRequest::HttpMethod","System.Net.HttpListenerRequest.InputStream","System::Net::HttpListenerRequest::InputStream","System.Net.HttpListenerRequest.IsAuthenticated","System::Net::HttpListenerRequest::IsAuthenticated","System.Net.HttpListenerRequest.IsLocal","System::Net::HttpListenerRequest::IsLocal","System.Net.HttpListenerRequest.IsSecureConnection","System::Net::HttpListenerRequest::IsSecureConnection","System.Net.HttpListenerRequest.IsWebSocketRequest","System::Net::HttpListenerRequest::IsWebSocketRequest","System.Net.HttpListenerRequest.KeepAlive","System::Net::HttpListenerRequest::KeepAlive","System.Net.HttpListenerRequest.LocalEndPoint","System::Net::HttpListenerRequest::LocalEndPoint","System.Net.HttpListenerRequest.ProtocolVersion","System::Net::HttpListenerRequest::ProtocolVersion","System.Net.HttpListenerRequest.QueryString","System::Net::HttpListenerRequest::QueryString","System.Net.HttpListenerRequest.RawUrl","System::Net::HttpListenerRequest::RawUrl","System.Net.HttpListenerRequest.RemoteEndPoint","System::Net::HttpListenerRequest::RemoteEndPoint","System.Net.HttpListenerRequest.RequestTraceIdentifier","System::Net::HttpListenerRequest::RequestTraceIdentifier","System.Net.HttpListenerRequest.ServiceName","System::Net::HttpListenerRequest::ServiceName","System.Net.HttpListenerRequest.TransportContext","System::Net::HttpListenerRequest::TransportContext","System.Net.HttpListenerRequest.Url","System::Net::HttpListenerRequest::Url","System.Net.HttpListenerRequest.UrlReferrer","System::Net::HttpListenerRequest::UrlReferrer","System.Net.HttpListenerRequest.UserAgent","System::Net::HttpListenerRequest::UserAgent","System.Net.HttpListenerRequest.UserHostAddress","System::Net::HttpListenerRequest::UserHostAddress","System.Net.HttpListenerRequest.UserHostName","System::Net::HttpListenerRequest::UserHostName","System.Net.HttpListenerRequest.UserLanguages","System::Net::HttpListenerRequest::UserLanguages"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d29628aa-f013-c25e-def7-89f36d65fe5a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/HttpListenerRequest.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HttpListenerRequest class | Microsoft Docs","_op_ogTitle":"HttpListenerRequest class","description":"Describes an incoming HTTP request to an  object. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.HttpListenerRequest","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httplistenerrequest","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httplistenerrequest","fileRelativePath":"System.Net.HttpListenerRequest.html"},"themesRelativePathToOutputRoot":"_themes/"}