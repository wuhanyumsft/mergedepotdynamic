{"content":"    \r\n    <h1 id=\"System_Collections_Generic_List_1\">\r\n      <span class=\"lang-csharp\">List&lt;T&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))]\npublic class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of elements in the list.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">List&lt;T&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The List(T) class is the generic equivalent of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class. It implements the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> generic interface by using an array whose size is dynamically increased as required.  </p>\n<p> You can add items to a List(T) by using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Add_\" data-linktype=\"relative-path\">Add</a> or <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_AddRange_\" data-linktype=\"relative-path\">AddRange</a> methods.  </p>\n<p> The List(T) class uses both an equality comparer and an ordering comparer.  </p>\n<ul>\n<li><p>Methods such as <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, and <a class=\"xref\" href=\"system.collections.generic.dictionary-2#System_Collections_Generic_Dictionary_2_Remove_\" data-linktype=\"relative-path\">Remove</a> use an equality comparer for the list elements. The default equality comparer for type <code>T</code> is determined as follows. If type <code>T</code> implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> generic interface, then the equality comparer is the <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals__0_\" data-linktype=\"relative-path\">Equals(T)</a> method of that interface; otherwise, the default equality comparer is <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a>.  </p>\n</li>\n<li><p>Methods such as <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_\" data-linktype=\"relative-path\">Sort</a> use an ordering comparer for the list elements. The default comparer for type <code>T</code> is determined as follows.  If type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface, then the default comparer is the <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo__0_\" data-linktype=\"relative-path\">CompareTo(T)</a> method of that interface; otherwise, if type <code>T</code> implements the nongeneric <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, then the default comparer is the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_System_Object_\" data-linktype=\"relative-path\">CompareTo(Object)</a> method of that interface. If type <code>T</code> implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.  </p>\n<p>The List(T) is not guaranteed to be sorted.  You must sort the List(T) before performing operations (such as <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a>) that require the List(T) to be sorted.  </p>\n<p>Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  </p>\n<p>For very large List(T) objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <code>enabled</code> attribute of the  configuration element to <code>true</code> in the run-time environment.  </p>\n<p>List(T) accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p>For an immutable version of the List(T) class, see &lt;xref:System.Collections.Immutable.ImmutableList%601&gt;.  </p>\n</li>\n</ul>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> In deciding whether to use the List(T) or <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class, both of which have similar functionality, remember that the List(T) class performs better in most cases and is type safe. If a reference type is used for type <code>T</code> of the List(T) class, the behavior of the two classes is identical. However, if a value type is used for type <code>T</code>, you need to consider implementation and boxing issues.  </p>\n<p> If a value type is used for type <code>T</code>, the compiler generates an implementation of the List(T) class specifically for that value type. That means a list element of a List(T) object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.  </p>\n<p> Make certain the value type used for type <code>T</code> implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> generic interface. If not, methods such as <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Contains_\" data-linktype=\"relative-path\">Contains</a> must call the <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> method, which boxes the affected list element. If the value type implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface and you own the source code, also implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to prevent the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_\" data-linktype=\"relative-path\">Sort</a> methods from boxing list elements. If you do not own the source code, pass an <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> object to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_\" data-linktype=\"relative-path\">Sort</a> methods  </p>\n<p> It is to your advantage to use the type-specific implementation of the List(T) class instead of using the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class or writing a strongly typed wrapper collection yourself. The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.  </p>\n<h2 id=\"f-considerations\">F# Considerations</h2>\n<p> The List(T) class is used infrequently in F# code.  Instead, <a href=\"../Topic/Lists%20(F%23).md\" data-linktype=\"relative-path\">Lists</a>, which are immutable, singly-linked lists, are typically preferred. An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development. When used from F#, theList(T) class is typically referred to by the  <a href=\"https://msdn.microsoft.com/library/ee353447.aspx\" data-linktype=\"external\">ResizeArray&lt;&#39;T&gt;</a> type abbreviation to avoid naming conflicts with F# Lists</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1__ctor\" data-linktype=\"self-bookmark\">List&lt;T&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.List`1</span> class that is empty and has the default initial capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1__ctor_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">List&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.List`1</span> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1__ctor_System_Int32_\" data-linktype=\"self-bookmark\">List&lt;T&gt;(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.List`1</span> class that is empty and has the specified initial capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Capacity\" data-linktype=\"self-bookmark\">Capacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the total number of elements the internal data structure can hold without resizing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Add__0_\" data-linktype=\"self-bookmark\">Add(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an object to the end of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_AddRange_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">AddRange(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the elements of the specified collection to the end of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_AsReadOnly\" data-linktype=\"self-bookmark\">AsReadOnly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a read-only <span class=\"xref\">stem.Collections.ObjectModel.ReadOnlyCollection`1</span> wrapper for the current collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_BinarySearch__0_\" data-linktype=\"self-bookmark\">BinarySearch(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches the entire sorted <span class=\"xref\">stem.Collections.Generic.List`1</span> for an element using the default comparer and returns the zero-based index of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_BinarySearch__0_System_Collections_Generic_IComparer__0__\" data-linktype=\"self-bookmark\">BinarySearch(T,IComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches the entire sorted <span class=\"xref\">stem.Collections.Generic.List`1</span> for an element using the specified comparer and returns the zero-based index of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_BinarySearch_System_Int32_System_Int32__0_System_Collections_Generic_IComparer__0__\" data-linktype=\"self-bookmark\">BinarySearch(Int32,Int32,T,IComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches a range of elements in the sorted <span class=\"xref\">stem.Collections.Generic.List`1</span> for an element using the specified comparer and returns the zero-based index of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Contains__0_\" data-linktype=\"self-bookmark\">Contains(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an element is in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_ConvertAll__1_System_Converter__0___0__\" data-linktype=\"self-bookmark\">ConvertAll&lt;TOutput&gt;(Converter&lt;T,TOutput&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the elements in the current <span class=\"xref\">stem.Collections.Generic.List`1</span> to another type, and returns a list containing the converted elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_CopyTo__0___\" data-linktype=\"self-bookmark\">CopyTo(T[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> to a compatible one-dimensional array, starting at the beginning of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_CopyTo__0___System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(T[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> to a compatible one-dimensional array, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_CopyTo_System_Int32__0___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Int32,T[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a range of elements from the <span class=\"xref\">stem.Collections.Generic.List`1</span> to a compatible one-dimensional array, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Exists_System_Predicate__0__\" data-linktype=\"self-bookmark\">Exists(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <span class=\"xref\">stem.Collections.Generic.List`1</span> contains elements that match the conditions defined by the specified predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Find_System_Predicate__0__\" data-linktype=\"self-bookmark\">Find(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_FindAll_System_Predicate__0__\" data-linktype=\"self-bookmark\">FindAll(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all the elements that match the conditions defined by the specified predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_FindIndex_System_Predicate__0__\" data-linktype=\"self-bookmark\">FindIndex(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Predicate__0__\" data-linktype=\"self-bookmark\">FindIndex(Int32,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the specified index to the last element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"self-bookmark\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that starts at the specified index and contains the specified number of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_FindLast_System_Predicate__0__\" data-linktype=\"self-bookmark\">FindLast(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_FindLastIndex_System_Predicate__0__\" data-linktype=\"self-bookmark\">FindLastIndex(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_FindLastIndex_System_Int32_System_Predicate__0__\" data-linktype=\"self-bookmark\">FindLastIndex(Int32,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the first element to the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_FindLastIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"self-bookmark\">FindLastIndex(Int32,Int32,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that contains the specified number of elements and ends at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_ForEach_System_Action__0__\" data-linktype=\"self-bookmark\">ForEach(Action&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the specified action on each element of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_GetRange_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetRange(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of a range of elements in the source <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_IndexOf__0_\" data-linktype=\"self-bookmark\">IndexOf(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_IndexOf__0_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(T,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the specified index to the last element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_IndexOf__0_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(T,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that starts at the specified index and contains the specified number of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Insert_System_Int32__0_\" data-linktype=\"self-bookmark\">Insert(Int32,T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an element into the <span class=\"xref\">stem.Collections.Generic.List`1</span> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_InsertRange_System_Int32_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">InsertRange(Int32,IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the elements of a collection into the <span class=\"xref\">stem.Collections.Generic.List`1</span> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_LastIndexOf__0_\" data-linktype=\"self-bookmark\">LastIndexOf(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_LastIndexOf__0_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(T,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the first element to the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_LastIndexOf__0_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(T,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that contains the specified number of elements and ends at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Remove__0_\" data-linktype=\"self-bookmark\">Remove(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_RemoveAll_System_Predicate__0__\" data-linktype=\"self-bookmark\">RemoveAll(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all the elements that match the conditions defined by the specified predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element at the specified index of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_RemoveRange_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">RemoveRange(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes a range of elements from the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Reverse\" data-linktype=\"self-bookmark\">Reverse()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reverses the order of the elements in the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Reverse_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Reverse(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reverses the order of the elements in the specified range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Sort\" data-linktype=\"self-bookmark\">Sort()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> using the default comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Sort_System_Collections_Generic_IComparer__0__\" data-linktype=\"self-bookmark\">Sort(IComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> using the specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Sort_System_Comparison__0__\" data-linktype=\"self-bookmark\">Sort(Comparison&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> using the specified <span class=\"xref\">stem.Comparison`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_Sort_System_Int32_System_Int32_System_Collections_Generic_IComparer__0__\" data-linktype=\"self-bookmark\">Sort(Int32,Int32,IComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in a range of elements in <span class=\"xref\">stem.Collections.Generic.List`1</span> using the specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_ToArray\" data-linktype=\"self-bookmark\">ToArray()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the <span class=\"xref\">stem.Collections.Generic.List`1</span> to a new array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_TrimExcess\" data-linktype=\"self-bookmark\">TrimExcess()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the capacity to the actual number of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span>, if that number is less than a threshold value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_TrueForAll_System_Predicate__0__\" data-linktype=\"self-bookmark\">TrueForAll(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether every element in the <span class=\"xref\">stem.Collections.Generic.List`1</span> matches the conditions defined by the specified predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_Generic_ICollection_T__IsReadOnly\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_Generic_IEnumerable_T__GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable&lt;T&gt;.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">ICollection.CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_ICollection_IsSynchronized\" data-linktype=\"self-bookmark\">ICollection.IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_ICollection_SyncRoot\" data-linktype=\"self-bookmark\">ICollection.SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IList_Add_System_Object_\" data-linktype=\"self-bookmark\">IList.Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IList_Contains_System_Object_\" data-linktype=\"self-bookmark\">IList.Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> contains a specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IList_IndexOf_System_Object_\" data-linktype=\"self-bookmark\">IList.IndexOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the index of a specific item in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IList_Insert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">IList.Insert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IList_IsFixedSize\" data-linktype=\"self-bookmark\">IList.IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IList_IsReadOnly\" data-linktype=\"self-bookmark\">IList.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IList_Item_System_Int32_\" data-linktype=\"self-bookmark\">IList.Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_List_1_System_Collections_IList_Remove_System_Object_\" data-linktype=\"self-bookmark\">IList.Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1__ctor\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">List&lt;T&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.List`1</span> class that is empty and has the default initial capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public List ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1__ctor_System_Int32_\" data-linktype=\"relative-path\">List&lt;T&gt;(Int32)</a> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> The capacity can be decreased by calling the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> method or by setting the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the default constructor of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> generic class. The default constructor creates a list with the default capacity, as demonstrated by displaying the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property.  </p>\n<p> The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Class#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    Console::WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n        dinosaurs-&gt;Contains(&quot;Deinonychus&quot;));\n\n    Console::WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Insert(2, &quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n    Console::WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Remove(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;TrimExcess();\n    Console::WriteLine(&quot;<br>TrimExcess()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    dinosaurs-&gt;Clear();\n    Console::WriteLine(&quot;<br>Clear()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n            dinosaurs.Contains(&quot;Deinonychus&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-fs\" name=\"List`1_Class#1\">\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflict with the List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let dinosaurs = ResizeArray&lt;_&gt;()\n \n    // Write out the dinosaurs in the ResizeArray.\n    let printDinosaurs() =\n        printfn &quot;&quot;\n        dinosaurs |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p) \n \n    \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n \n    dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n    dinosaurs.Add(&quot;Amargasaurus&quot;)\n    dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n    dinosaurs.Add(&quot;Deinonychus&quot;)\n    dinosaurs.Add(&quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    printfn &quot;<br>Contains(\\&quot;Deinonychus\\&quot;): %b&quot; (dinosaurs.Contains(&quot;Deinonychus&quot;))\n \n    printfn &quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    // Shows accessing the list using the Item property.\n    printfn &quot;<br>dinosaurs[3]: %s&quot; dinosaurs.[3]\n \n    printfn &quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Remove(&quot;Compsognathus&quot;) |&gt; ignore\n \n    printDinosaurs()\n \n    dinosaurs.TrimExcess()\n    printfn &quot;<br>TrimExcess()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    dinosaurs.Clear()\n    printfn &quot;<br>Clear()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    0 // return an integer exit code\n \n    (* This code example produces the following output:\n \nCapacity: 0\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nCapacity: 8\nCount: 5\n \nContains(&quot;Deinonychus&quot;): true\n \nInsert(2, &quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \ndinosaurs[3]: Mamenchisaurus\n \nRemove(&quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nTrimExcess()\nCapacity: 5\nCount: 5\n \nClear()\nCapacity: 5\nCount: 0\n    *)\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Deinonychus&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Deinonychus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        dinosaurs.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 0\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;Capacity: 8\n&#39;Count: 5\n&#39;\n&#39;Contains(&quot;Deinonychus&quot;): True\n&#39;\n&#39;Insert(2, &quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Compsognathus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;dinosaurs(3): Mamenchisaurus\n&#39;\n&#39;Remove(&quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;TrimExcess()\n&#39;Capacity: 5\n&#39;Count: 5\n&#39;\n&#39;Clear()\n&#39;Capacity: 5\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1__ctor_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">List&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.List`1</span> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection whose elements are copied to the new list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>collection</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are copied onto the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> in the same order they are read by the enumerator of the collection.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>collection</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the List(T) constructor and various methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class that act on ranges. An array of strings is created and passed to the constructor, populating the list with the elements of the array. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_Ranges#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim input() As String = { &quot;Brachiosaurus&quot;, _\n                                  &quot;Amargasaurus&quot;, _\n                                  &quot;Mamenchisaurus&quot; }\n\n        Dim dinosaurs As New List(Of String)(input)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;AddRange(dinosaurs)&quot;)\n        dinosaurs.AddRange(dinosaurs)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveRange(2, 2)&quot;)\n        dinosaurs.RemoveRange(2, 2)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        input = New String() { &quot;Tyrannosaurus&quot;, _\n                               &quot;Deinonychus&quot;, _\n                               &quot;Velociraptor&quot; }\n\n        Console.WriteLine(vbLf &amp; &quot;InsertRange(3, input)&quot;)\n        dinosaurs.InsertRange(3, input)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;output = dinosaurs.GetRange(2, 3).ToArray&quot;)\n        Dim output() As String = dinosaurs.GetRange(2, 3).ToArray()\n        \n        Console.WriteLine()\n        For Each dinosaur As String In output\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 3\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;AddRange(dinosaurs)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;RemoveRange(2, 2)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;InsertRange(3, input)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n&#39;Velociraptor\n&#39;Mamenchisaurus\n&#39;\n&#39;output = dinosaurs.GetRange(2, 3).ToArray\n&#39;\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_Ranges#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    array&lt;String^&gt;^ input = { &quot;Brachiosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Mamenchisaurus&quot; };\n\n    List&lt;String^&gt;^ dinosaurs = \n        gcnew List&lt;String^&gt;((IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n    dinosaurs-&gt;AddRange(dinosaurs);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n    dinosaurs-&gt;RemoveRange(2, 2);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    input = gcnew array&lt;String^&gt; { &quot;Tyrannosaurus&quot;, \n                                   &quot;Deinonychus&quot;, \n                                   &quot;Velociraptor&quot;};\n\n    Console::WriteLine(&quot;<br>InsertRange(3, (IEnumerable&lt;String^&gt;^) input)&quot;);\n    dinosaurs-&gt;InsertRange(3, (IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()&quot;);\n    array&lt;String^&gt;^ output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray();\n        \n    Console::WriteLine();\n    for each(String^ dinosaur in output )\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, (IEnumerable&lt;String^&gt;^) input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Ranges#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] input = { &quot;Brachiosaurus&quot;, \n                           &quot;Amargasaurus&quot;, \n                           &quot;Mamenchisaurus&quot; };\n\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;(input);\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n        dinosaurs.AddRange(dinosaurs);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n        dinosaurs.RemoveRange(2, 2);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        input = new string[] { &quot;Tyrannosaurus&quot;, \n                               &quot;Deinonychus&quot;, \n                               &quot;Velociraptor&quot;};\n\n        Console.WriteLine(&quot;<br>InsertRange(3, input)&quot;);\n        dinosaurs.InsertRange(3, input);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>output = dinosaurs.GetRange(2, 3).ToArray()&quot;);\n        string[] output = dinosaurs.GetRange(2, 3).ToArray();\n        \n        Console.WriteLine();\n        foreach( string dinosaur in output )\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs.GetRange(2, 3).ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">List&lt;T&gt;(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.List`1</span> class that is empty and has the specified initial capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public List (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements that the new list can initially store.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> The capacity can be decreased by calling the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> method or by setting the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the List(T) constructor. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and a read-only copy is created by using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_AsReadOnly_\" data-linktype=\"relative-path\">AsReadOnly</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"List`1_AsReadOnly#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;(4);\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n\n        Console.WriteLine();\n        foreach(string s in dinosaurs)\n        {\n            Console.WriteLine(s);\n        }\n\n        Console.WriteLine(&quot;<br>IList&lt;string&gt; roDinosaurs = dinosaurs.AsReadOnly()&quot;);\n        IList&lt;string&gt; roDinosaurs = dinosaurs.AsReadOnly();\n\n        Console.WriteLine(&quot;<br>Elements in the read-only IList:&quot;);\n        foreach(string dinosaur in roDinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Coelophysis\\&quot;&quot;);\n        dinosaurs[2] = &quot;Coelophysis&quot;;\n\n        Console.WriteLine(&quot;<br>Elements in the read-only IList:&quot;);\n        foreach(string dinosaur in roDinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 4\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nIList&lt;string&gt; roDinosaurs = dinosaurs.AsReadOnly()\n\nElements in the read-only IList:\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\ndinosaurs[2] = &quot;Coelophysis&quot;\n\nElements in the read-only IList:\nTyrannosaurus\nAmargasaurus\nCoelophysis\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_AsReadOnly#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;(4);\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>IList&lt;String^&gt;^ roDinosaurs = dinosaurs-&gt;AsReadOnly()&quot;);\n    IList&lt;String^&gt;^ roDinosaurs = dinosaurs-&gt;AsReadOnly();\n\n    Console::WriteLine(&quot;<br>Elements in the read-only IList:&quot;);\n    for each(String^ dinosaur in roDinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Coelophysis\\&quot;&quot;);\n    dinosaurs[2] = &quot;Coelophysis&quot;;\n\n    Console::WriteLine(&quot;<br>Elements in the read-only IList:&quot;);\n    for each(String^ dinosaur in roDinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 4\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nIList&lt;String^&gt;^ roDinosaurs = dinosaurs-&gt;AsReadOnly()\n\nElements in the read-only IList:\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\ndinosaurs[2] = &quot;Coelophysis&quot;\n\nElements in the read-only IList:\nTyrannosaurus\nAmargasaurus\nCoelophysis\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_AsReadOnly#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)(4)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Dim roDinosaurs As IList(Of String) = dinosaurs.AsReadOnly&quot;)\n        Dim roDinosaurs As IList(Of String) = dinosaurs.AsReadOnly\n\n        Console.WriteLine(vbLf &amp; &quot;Elements in the read-only IList:&quot;)\n        For Each dinosaur As String In roDinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Coelophysis&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Coelophysis&quot;\n\n        Console.WriteLine(vbLf &amp; &quot;Elements in the read-only IList:&quot;)\n        For Each dinosaur As String In roDinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 4\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;\n&#39;Dim roDinosaurs As IList(Of String) = dinosaurs.AsReadOnly\n&#39;\n&#39;Elements in the read-only IList:\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;\n&#39;dinosaurs(2) = &quot;Coelophysis&quot;\n&#39;\n&#39;Elements in the read-only IList:\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Deinonychus\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Capacity\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Capacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Capacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the total number of elements the internal data structure can hold without resizing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Capacity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements that the <span class=\"xref\">stem.Collections.Generic.List`1</span> can contain before resizing is required.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Capacity is set to a value that is less than <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough memory available on the system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Capacity is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> can store before resizing is required, whereas <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> Capacity is always greater than or equal to <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>. If <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> exceeds Capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> If the capacity is significantly larger than the count and you want to reduce the memory used by the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>,  you can  decrease capacity by calling the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> method or by setting the Capacity property explicitly to a lower value. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is an O(<code>n</code>) operation, where <code>n</code> is the new capacity.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to check the capacity and count of a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> that contains a simple business object, and illustrates using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> method to remove extra capacity.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.CapacityCount#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify a part \n// but the part name be different for the same Id.\npublic class Part : IEquatable&lt;Part&gt;\n{\n    public string PartName { get; set; }\n    public int PartId { get; set; }\n    public override string ToString()\n    {\n        return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public override int GetHashCode()\n    {\n        return base.GetHashCode();\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n\n}\npublic class Example\n{\n\n    public static void Main()\n    {\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, parts.Capacity);\n\n        parts.Add(new Part() { PartName = &quot;crank arm&quot;, PartId = 1234 });\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 }); ;\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n\n        parts.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n\n        parts.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n    }\n    /*\n     This code example produces the following output. \n            Capacity: 0\n\n            ID: 1234   Name: crank arm\n            ID: 1334   Name: chain ring\n            ID: 1434   Name: seat\n            ID: 1534   Name: cassette\n            ID: 1634   Name: shift lever\n\n            Capacity: 8\n            Count: 5\n\n            TrimExcess()\n            Capacity: 5\n            Count: 5\n\n            Clear()\n            Capacity: 5\n            Count: 0\n     */\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.CapacityCount#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify a part \n&#39; but the part name can change.\nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return MyBase.GetHashCode()\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim parts As New List(Of Part)()\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, parts.Capacity)\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n\n        parts.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n\n        parts.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n    End Sub\n    &#39;\n    &#39;     This code example produces the following output. \n    &#39;            Capacity: 0\n    &#39;\n    &#39;            ID: 1234   Name: crank arm\n    &#39;            ID: 1334   Name: chain ring\n    &#39;            ID: 1434   Name: seat\n    &#39;            ID: 1534   Name: cassette\n    &#39;            ID: 1634   Name: shift lever\n    &#39;\n    &#39;            Capacity: 8\n    &#39;            Count: 6\n    &#39;\n    &#39;            TrimExcess()\n    &#39;            Capacity: 6\n    &#39;            Count: 6\n    &#39;\n    &#39;            Clear()\n    &#39;            Capacity: 6\n    &#39;            Count: 0\n    &#39;     \n\nEnd Class\n</code></pre><p> The following example shows the Capacity property at several points in the life of a list. The default constructor is used to create a list of strings with a capacity of 0, and the Capacity property is displayed to demonstrate this. After the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Add_\" data-linktype=\"relative-path\">Add</a> method has been used to add several items, the items are listed, and then the Capacity property is displayed again, along with the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> property, to show that the capacity has been increased as needed.  </p>\n<p> The Capacity property is displayed again after the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> method is used to reduce the capacity to match the count. Finally, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method is used to remove all items from the list, and the Capacity and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> properties are displayed again.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Class#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    Console::WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n        dinosaurs-&gt;Contains(&quot;Deinonychus&quot;));\n\n    Console::WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Insert(2, &quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n    Console::WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Remove(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;TrimExcess();\n    Console::WriteLine(&quot;<br>TrimExcess()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    dinosaurs-&gt;Clear();\n    Console::WriteLine(&quot;<br>Clear()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n            dinosaurs.Contains(&quot;Deinonychus&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-fs\" name=\"List`1_Class#1\">\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflict with the List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let dinosaurs = ResizeArray&lt;_&gt;()\n \n    // Write out the dinosaurs in the ResizeArray.\n    let printDinosaurs() =\n        printfn &quot;&quot;\n        dinosaurs |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p) \n \n    \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n \n    dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n    dinosaurs.Add(&quot;Amargasaurus&quot;)\n    dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n    dinosaurs.Add(&quot;Deinonychus&quot;)\n    dinosaurs.Add(&quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    printfn &quot;<br>Contains(\\&quot;Deinonychus\\&quot;): %b&quot; (dinosaurs.Contains(&quot;Deinonychus&quot;))\n \n    printfn &quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    // Shows accessing the list using the Item property.\n    printfn &quot;<br>dinosaurs[3]: %s&quot; dinosaurs.[3]\n \n    printfn &quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Remove(&quot;Compsognathus&quot;) |&gt; ignore\n \n    printDinosaurs()\n \n    dinosaurs.TrimExcess()\n    printfn &quot;<br>TrimExcess()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    dinosaurs.Clear()\n    printfn &quot;<br>Clear()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    0 // return an integer exit code\n \n    (* This code example produces the following output:\n \nCapacity: 0\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nCapacity: 8\nCount: 5\n \nContains(&quot;Deinonychus&quot;): true\n \nInsert(2, &quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \ndinosaurs[3]: Mamenchisaurus\n \nRemove(&quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nTrimExcess()\nCapacity: 5\nCount: 5\n \nClear()\nCapacity: 5\nCount: 0\n    *)\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Deinonychus&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Deinonychus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        dinosaurs.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 0\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;Capacity: 8\n&#39;Count: 5\n&#39;\n&#39;Contains(&quot;Deinonychus&quot;): True\n&#39;\n&#39;Insert(2, &quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Compsognathus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;dinosaurs(3): Mamenchisaurus\n&#39;\n&#39;Remove(&quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;TrimExcess()\n&#39;Capacity: 5\n&#39;Count: 5\n&#39;\n&#39;Clear()\n&#39;Capacity: 5\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Count\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> can store before resizing is required. Count is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> is always greater than or equal to Count. If Count exceeds <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to check the capacity and count of a  <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> that contains a simple business object, and illustrates using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> method to remove extra capacity.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.CapacityCount#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify a part \n// but the part name be different for the same Id.\npublic class Part : IEquatable&lt;Part&gt;\n{\n    public string PartName { get; set; }\n    public int PartId { get; set; }\n    public override string ToString()\n    {\n        return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public override int GetHashCode()\n    {\n        return base.GetHashCode();\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n\n}\npublic class Example\n{\n\n    public static void Main()\n    {\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, parts.Capacity);\n\n        parts.Add(new Part() { PartName = &quot;crank arm&quot;, PartId = 1234 });\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 }); ;\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n\n        parts.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n\n        parts.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n    }\n    /*\n     This code example produces the following output. \n            Capacity: 0\n\n            ID: 1234   Name: crank arm\n            ID: 1334   Name: chain ring\n            ID: 1434   Name: seat\n            ID: 1534   Name: cassette\n            ID: 1634   Name: shift lever\n\n            Capacity: 8\n            Count: 5\n\n            TrimExcess()\n            Capacity: 5\n            Count: 5\n\n            Clear()\n            Capacity: 5\n            Count: 0\n     */\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.CapacityCount#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify a part \n&#39; but the part name can change.\nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return MyBase.GetHashCode()\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim parts As New List(Of Part)()\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, parts.Capacity)\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n\n        parts.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n\n        parts.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n    End Sub\n    &#39;\n    &#39;     This code example produces the following output. \n    &#39;            Capacity: 0\n    &#39;\n    &#39;            ID: 1234   Name: crank arm\n    &#39;            ID: 1334   Name: chain ring\n    &#39;            ID: 1434   Name: seat\n    &#39;            ID: 1534   Name: cassette\n    &#39;            ID: 1634   Name: shift lever\n    &#39;\n    &#39;            Capacity: 8\n    &#39;            Count: 6\n    &#39;\n    &#39;            TrimExcess()\n    &#39;            Capacity: 6\n    &#39;            Count: 6\n    &#39;\n    &#39;            Clear()\n    &#39;            Capacity: 6\n    &#39;            Count: 0\n    &#39;     \n\nEnd Class\n</code></pre><p> The following example shows the value of the Count property at various points in the life of a list. After the list has been created and populated and its elements displayed, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> and Count properties are displayed. These properties are displayed again after the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> method has been called, and again after the contents of the list are cleared.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Class#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    Console::WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n        dinosaurs-&gt;Contains(&quot;Deinonychus&quot;));\n\n    Console::WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Insert(2, &quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n    Console::WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Remove(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;TrimExcess();\n    Console::WriteLine(&quot;<br>TrimExcess()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    dinosaurs-&gt;Clear();\n    Console::WriteLine(&quot;<br>Clear()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n            dinosaurs.Contains(&quot;Deinonychus&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-fs\" name=\"List`1_Class#1\">\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflict with the List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let dinosaurs = ResizeArray&lt;_&gt;()\n \n    // Write out the dinosaurs in the ResizeArray.\n    let printDinosaurs() =\n        printfn &quot;&quot;\n        dinosaurs |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p) \n \n    \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n \n    dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n    dinosaurs.Add(&quot;Amargasaurus&quot;)\n    dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n    dinosaurs.Add(&quot;Deinonychus&quot;)\n    dinosaurs.Add(&quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    printfn &quot;<br>Contains(\\&quot;Deinonychus\\&quot;): %b&quot; (dinosaurs.Contains(&quot;Deinonychus&quot;))\n \n    printfn &quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    // Shows accessing the list using the Item property.\n    printfn &quot;<br>dinosaurs[3]: %s&quot; dinosaurs.[3]\n \n    printfn &quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Remove(&quot;Compsognathus&quot;) |&gt; ignore\n \n    printDinosaurs()\n \n    dinosaurs.TrimExcess()\n    printfn &quot;<br>TrimExcess()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    dinosaurs.Clear()\n    printfn &quot;<br>Clear()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    0 // return an integer exit code\n \n    (* This code example produces the following output:\n \nCapacity: 0\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nCapacity: 8\nCount: 5\n \nContains(&quot;Deinonychus&quot;): true\n \nInsert(2, &quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \ndinosaurs[3]: Mamenchisaurus\n \nRemove(&quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nTrimExcess()\nCapacity: 5\nCount: 5\n \nClear()\nCapacity: 5\nCount: 0\n    *)\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Deinonychus&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Deinonychus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        dinosaurs.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 0\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;Capacity: 8\n&#39;Count: 5\n&#39;\n&#39;Contains(&quot;Deinonychus&quot;): True\n&#39;\n&#39;Insert(2, &quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Compsognathus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;dinosaurs(3): Mamenchisaurus\n&#39;\n&#39;Remove(&quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;TrimExcess()\n&#39;Capacity: 5\n&#39;Count: 5\n&#39;\n&#39;Clear()\n&#39;Capacity: 5\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T this[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example in this section demonstrates the Item property (the indexer in C#) and various other properties and methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> generic class. After the list has been created and populated using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Add_\" data-linktype=\"relative-path\">Add</a> method, an element is retrieved and displayed using the Item property. (For an example that uses the Item property to set the value of a list element, see <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_AsReadOnly_\" data-linktype=\"relative-path\">AsReadOnly</a>.)  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Visual Basic, C#, and C++ all have syntax for accessing the Item property without using its name. Instead, the variable containing the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is used as if it were an array.  </p>\n</div>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<pre><code class=\"lang-cs\" name=\"List`1_Class#2\">        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#2\">        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#3\">        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#3\">        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Add__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(T)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an object to the end of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be added to the end of the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> already equals <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> is less than <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to add, remove, and insert a simple business object in a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify the type of part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt;\n    {\n        public string PartName { get; set; }\n       \n        public int PartId { get; set; }\n\n        public override string ToString()\n        {\n            return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n        }\n        public override bool Equals(object obj)\n        {\n            if (obj == null) return false;\n            Part objAsPart = obj as Part;\n            if (objAsPart == null) return false;\n            else return Equals(objAsPart);\n        }\n        public override int GetHashCode()\n        {\n            return PartId;\n        }\n        public bool Equals(Part other)\n        {\n            if (other == null) return false;\n            return (this.PartId.Equals(other.PartId));\n        }\n    // Should also override == and != operators.\n\n    }\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() {PartName=&quot;crank arm&quot;, PartId=1234});\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 });\n\n        // Write out the parts in the list. This will call the overridden ToString method\n        // in the Part class.\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n      \n        // Check the list for part #1734. This calls the IEquitable.Equals method\n        // of the Part class, which checks the PartId for equality.\n        Console.WriteLine(&quot;<br>Contains(\\&quot;1734\\&quot;): {0}&quot;,\n        parts.Contains(new Part {PartId=1734, PartName=&quot;&quot; }));\n\n        // Insert a new item at position 2.\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;1834\\&quot;)&quot;);\n        parts.Insert(2, new Part() { PartName = &quot;brake lever&quot;, PartId = 1834 });\n\n        \n        //Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        Console.WriteLine(&quot;<br>Parts[3]: {0}&quot;, parts[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;1534\\&quot;)&quot;);\n\n        // This will remove part 1534 even though the PartName is different,\n        // because the Equals method only checks PartId for equality.\n        parts.Remove(new Part(){PartId=1534, PartName=&quot;cogs&quot;});\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n        Console.WriteLine(&quot;<br>RemoveAt(3)&quot;);\n        // This will remove the part at index 3.\n        parts.RemoveAt(3);\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n            /*\n  \n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1534   Name: cassette\n             ID: 1634   Name: shift lever\n\n             Contains(&quot;1734&quot;): False\n\n             Insert(2, &quot;1834&quot;)\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1534   Name: cassette\n             ID: 1634   Name: shift lever\n\n             Parts[3]: ID: 1434   Name: regular seat\n\n             Remove(&quot;1534&quot;)\n\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1634   Name: shift lever\n\n             RemoveAt(3)\n\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1444   Name: banana seat\n             ID: 1634   Name: shift lever\n\n\n         */\n\n    }\n}\n</code></pre><pre><code class=\"lang-fs\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">\n// Simple business object. A PartId is used to identify the type of part  \n// but the part name can change.  \n[&lt;CustomEquality; NoComparison&gt;]\ntype Part = { PartId : int ; mutable PartName : string } with\n    override this.GetHashCode() = hash this.PartId\n    override this.Equals(other) =\n        match other with\n        | :? Part as p -&gt; this.PartId = p.PartId\n        | _ -&gt; false\n    override this.ToString() = sprintf &quot;ID: %i   Name: %s&quot; this.PartId this.PartName\n\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflicts with the F# List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let parts = ResizeArray&lt;_&gt;()\n    parts.Add({PartName = &quot;crank arm&quot; ; PartId = 1234})\n    parts.Add({PartName = &quot;chain ring&quot;; PartId = 1334 })\n    parts.Add({PartName = &quot;regular seat&quot;; PartId = 1434 })\n    parts.Add({PartName = &quot;banana seat&quot;; PartId = 1444 })\n    parts.Add({PartName = &quot;cassette&quot;; PartId = 1534 })\n    parts.Add({PartName = &quot;shift lever&quot;; PartId = 1634 })\n\n    // Write out the parts in the ResizeArray.  This will call the overridden ToString method\n    // in the Part type\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    // Check the ResizeArray for part #1734. This calls the IEquatable.Equals method \n    // of the Part type, which checks the PartId for equality.    \n    printfn &quot;<br>Contains(\\&quot;1734\\&quot;): %b&quot; (parts.Contains({PartId=1734; PartName=&quot;&quot;}))\n    \n    // Insert a new item at position 2.\n    printfn &quot;<br>Insert(2, \\&quot;1834\\&quot;)&quot;\n    parts.Insert(2, { PartName = &quot;brake lever&quot;; PartId = 1834 })\n\n    // Write out all parts\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    printfn &quot;<br>Parts[3]: %O&quot; parts.[3]\n\n    printfn &quot;<br>Remove(\\&quot;1534\\&quot;)&quot;\n    // This will remove part 1534 even though the PartName is different, \n    // because the Equals method only checks PartId for equality.\n    // Since Remove returns true or false, we need to ignore the result\n    parts.Remove({PartId=1534; PartName=&quot;cogs&quot;}) |&gt; ignore\n\n    // Write out all parts\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    printfn &quot;<br>RemoveAt(3)&quot;\n    // This will remove the part at index 3.\n    parts.RemoveAt(3)\n\n    // Write out all parts\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    0 // return an integer exit code\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify the type of part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean _\n        Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        &#39; Write out the parts in the list. This will call the overridden ToString method\n        &#39; in the Part class.\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Check the list for part #1734. This calls the IEquitable.Equals method\n        &#39; of the Part class, which checks the PartId for equality.\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;1734&quot;&quot;): {0}&quot;, parts.Contains(New Part() With { _\n             .PartId = 1734, _\n             .PartName = &quot;&quot; _\n        }))\n\n        &#39; Insert a new item at position 2.\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;1834&quot;&quot;)&quot;)\n        parts.Insert(2, New Part() With { _\n             .PartName = &quot;brake lever&quot;, _\n             .PartId = 1834 _\n        })\n\n\n        &#39;Console.WriteLine();\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Parts[3]: {0}&quot;, parts(3))\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;1534&quot;&quot;)&quot;)\n\n        &#39; This will remove part 1534 even though the PartName is different,\n        &#39; because the Equals method only checks PartId for equality.\n        parts.Remove(New Part() With { _\n             .PartId = 1534, _\n             .PartName = &quot;cogs&quot; _\n        })\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(3)&quot;)\n        &#39; This will remove part at index 3.\n        parts.RemoveAt(3)\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n    End Sub\n    &#39;\n    &#39;        This example code produces the following output:\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1534   Name: cassette\n    &#39;        ID: 1634   Name: shift lever\n    &#39;\n    &#39;        Contains(&quot;1734&quot;): False\n    &#39;\n    &#39;        Insert(2, &quot;1834&quot;)\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1534   Name: cassette\n    &#39;        ID: 1634   Name: shift lever\n    &#39;\n    &#39;        Parts[3]: ID: 1434   Name: regular seat\n    &#39;\n    &#39;        Remove(&quot;1534&quot;)\n    &#39;\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1634   Name: shift lever\n    &#39;   &#39;\n    &#39;        RemoveAt(3)\n    &#39;\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1634   Name: shift lever\n    &#39;        \n\nEnd Class\n</code></pre><p> The following example demonstrates several properties and methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> generic class, including the Add method. The default constructor is used to create a list of strings with a capacity of 0. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property is displayed, and then the Add method is used to add several items. The items are listed, and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property is displayed again, along with the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> property, to show that the capacity has been increased as needed.  </p>\n<p> Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Class#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    Console::WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n        dinosaurs-&gt;Contains(&quot;Deinonychus&quot;));\n\n    Console::WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Insert(2, &quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n    Console::WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Remove(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;TrimExcess();\n    Console::WriteLine(&quot;<br>TrimExcess()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    dinosaurs-&gt;Clear();\n    Console::WriteLine(&quot;<br>Clear()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n            dinosaurs.Contains(&quot;Deinonychus&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-fs\" name=\"List`1_Class#1\">\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflict with the List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let dinosaurs = ResizeArray&lt;_&gt;()\n \n    // Write out the dinosaurs in the ResizeArray.\n    let printDinosaurs() =\n        printfn &quot;&quot;\n        dinosaurs |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p) \n \n    \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n \n    dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n    dinosaurs.Add(&quot;Amargasaurus&quot;)\n    dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n    dinosaurs.Add(&quot;Deinonychus&quot;)\n    dinosaurs.Add(&quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    printfn &quot;<br>Contains(\\&quot;Deinonychus\\&quot;): %b&quot; (dinosaurs.Contains(&quot;Deinonychus&quot;))\n \n    printfn &quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    // Shows accessing the list using the Item property.\n    printfn &quot;<br>dinosaurs[3]: %s&quot; dinosaurs.[3]\n \n    printfn &quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Remove(&quot;Compsognathus&quot;) |&gt; ignore\n \n    printDinosaurs()\n \n    dinosaurs.TrimExcess()\n    printfn &quot;<br>TrimExcess()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    dinosaurs.Clear()\n    printfn &quot;<br>Clear()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    0 // return an integer exit code\n \n    (* This code example produces the following output:\n \nCapacity: 0\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nCapacity: 8\nCount: 5\n \nContains(&quot;Deinonychus&quot;): true\n \nInsert(2, &quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \ndinosaurs[3]: Mamenchisaurus\n \nRemove(&quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nTrimExcess()\nCapacity: 5\nCount: 5\n \nClear()\nCapacity: 5\nCount: 0\n    *)\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Deinonychus&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Deinonychus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        dinosaurs.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 0\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;Capacity: 8\n&#39;Count: 5\n&#39;\n&#39;Contains(&quot;Deinonychus&quot;): True\n&#39;\n&#39;Insert(2, &quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Compsognathus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;dinosaurs(3): Mamenchisaurus\n&#39;\n&#39;Remove(&quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;TrimExcess()\n&#39;Capacity: 5\n&#39;Count: 5\n&#39;\n&#39;Clear()\n&#39;Capacity: 5\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_AddRange_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the elements of the specified collection to the end of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection whose elements should be added to the end of the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The collection itself cannot be <code>null</code>, but it can contain elements that are <code>null</code>, if type <code>T</code> is a reference type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>collection</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the elements in the collection is preserved in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> If the new <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> (the current <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> plus the size of the collection) will be greater than <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> can accommodate the new elements without increasing the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements to be added and <code>m</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the AddRange method and various other methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class that act on ranges. An array of strings is created and passed to the constructor, populating the list with the elements of the array. The AddRange method is called, with the list as its argument. The result is that the current elements of the list are added to the end of the list, duplicating all the elements.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_Ranges#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim input() As String = { &quot;Brachiosaurus&quot;, _\n                                  &quot;Amargasaurus&quot;, _\n                                  &quot;Mamenchisaurus&quot; }\n\n        Dim dinosaurs As New List(Of String)(input)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;AddRange(dinosaurs)&quot;)\n        dinosaurs.AddRange(dinosaurs)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveRange(2, 2)&quot;)\n        dinosaurs.RemoveRange(2, 2)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        input = New String() { &quot;Tyrannosaurus&quot;, _\n                               &quot;Deinonychus&quot;, _\n                               &quot;Velociraptor&quot; }\n\n        Console.WriteLine(vbLf &amp; &quot;InsertRange(3, input)&quot;)\n        dinosaurs.InsertRange(3, input)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;output = dinosaurs.GetRange(2, 3).ToArray&quot;)\n        Dim output() As String = dinosaurs.GetRange(2, 3).ToArray()\n        \n        Console.WriteLine()\n        For Each dinosaur As String In output\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 3\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;AddRange(dinosaurs)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;RemoveRange(2, 2)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;InsertRange(3, input)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n&#39;Velociraptor\n&#39;Mamenchisaurus\n&#39;\n&#39;output = dinosaurs.GetRange(2, 3).ToArray\n&#39;\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_Ranges#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    array&lt;String^&gt;^ input = { &quot;Brachiosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Mamenchisaurus&quot; };\n\n    List&lt;String^&gt;^ dinosaurs = \n        gcnew List&lt;String^&gt;((IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n    dinosaurs-&gt;AddRange(dinosaurs);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n    dinosaurs-&gt;RemoveRange(2, 2);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    input = gcnew array&lt;String^&gt; { &quot;Tyrannosaurus&quot;, \n                                   &quot;Deinonychus&quot;, \n                                   &quot;Velociraptor&quot;};\n\n    Console::WriteLine(&quot;<br>InsertRange(3, (IEnumerable&lt;String^&gt;^) input)&quot;);\n    dinosaurs-&gt;InsertRange(3, (IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()&quot;);\n    array&lt;String^&gt;^ output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray();\n        \n    Console::WriteLine();\n    for each(String^ dinosaur in output )\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, (IEnumerable&lt;String^&gt;^) input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Ranges#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] input = { &quot;Brachiosaurus&quot;, \n                           &quot;Amargasaurus&quot;, \n                           &quot;Mamenchisaurus&quot; };\n\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;(input);\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n        dinosaurs.AddRange(dinosaurs);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n        dinosaurs.RemoveRange(2, 2);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        input = new string[] { &quot;Tyrannosaurus&quot;, \n                               &quot;Deinonychus&quot;, \n                               &quot;Velociraptor&quot;};\n\n        Console.WriteLine(&quot;<br>InsertRange(3, input)&quot;);\n        dinosaurs.InsertRange(3, input);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>output = dinosaurs.GetRange(2, 3).ToArray()&quot;);\n        string[] output = dinosaurs.GetRange(2, 3).ToArray();\n        \n        Console.WriteLine();\n        foreach( string dinosaur in output )\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs.GetRange(2, 3).ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_AsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_AsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsReadOnly()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a read-only <span class=\"xref\">stem.Collections.ObjectModel.ReadOnlyCollection`1</span> wrapper for the current collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.objectmodel.readonlycollection-1\" data-linktype=\"relative-path\">ReadOnlyCollection<t></t></a></div>\r\n                  </div>\r\n                  <p>An object that acts as a read-only wrapper around the current <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To prevent any modifications to the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object, expose it only through this wrapper. A  <a class=\"xref\" href=\"system.collections.objectmodel.readonlycollection-1\" data-linktype=\"relative-path\">ReadOnlyCollection&lt;T&gt;</a> object does not expose methods that modify the collection. However, if changes are made to the underlying <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object, the read-only collection reflects those changes.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the AsReadOnly method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and the AsReadOnly method is used to get a read-only <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> generic interface implementation that wraps the original list.  </p>\n<p> An element of the original list is set to &quot;Coelophysis&quot; using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.  </p>\n<pre><code class=\"lang-cs\" name=\"List`1_AsReadOnly#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;(4);\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n\n        Console.WriteLine();\n        foreach(string s in dinosaurs)\n        {\n            Console.WriteLine(s);\n        }\n\n        Console.WriteLine(&quot;<br>IList&lt;string&gt; roDinosaurs = dinosaurs.AsReadOnly()&quot;);\n        IList&lt;string&gt; roDinosaurs = dinosaurs.AsReadOnly();\n\n        Console.WriteLine(&quot;<br>Elements in the read-only IList:&quot;);\n        foreach(string dinosaur in roDinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Coelophysis\\&quot;&quot;);\n        dinosaurs[2] = &quot;Coelophysis&quot;;\n\n        Console.WriteLine(&quot;<br>Elements in the read-only IList:&quot;);\n        foreach(string dinosaur in roDinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 4\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nIList&lt;string&gt; roDinosaurs = dinosaurs.AsReadOnly()\n\nElements in the read-only IList:\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\ndinosaurs[2] = &quot;Coelophysis&quot;\n\nElements in the read-only IList:\nTyrannosaurus\nAmargasaurus\nCoelophysis\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_AsReadOnly#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;(4);\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>IList&lt;String^&gt;^ roDinosaurs = dinosaurs-&gt;AsReadOnly()&quot;);\n    IList&lt;String^&gt;^ roDinosaurs = dinosaurs-&gt;AsReadOnly();\n\n    Console::WriteLine(&quot;<br>Elements in the read-only IList:&quot;);\n    for each(String^ dinosaur in roDinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Coelophysis\\&quot;&quot;);\n    dinosaurs[2] = &quot;Coelophysis&quot;;\n\n    Console::WriteLine(&quot;<br>Elements in the read-only IList:&quot;);\n    for each(String^ dinosaur in roDinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 4\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nIList&lt;String^&gt;^ roDinosaurs = dinosaurs-&gt;AsReadOnly()\n\nElements in the read-only IList:\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\ndinosaurs[2] = &quot;Coelophysis&quot;\n\nElements in the read-only IList:\nTyrannosaurus\nAmargasaurus\nCoelophysis\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_AsReadOnly#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)(4)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Dim roDinosaurs As IList(Of String) = dinosaurs.AsReadOnly&quot;)\n        Dim roDinosaurs As IList(Of String) = dinosaurs.AsReadOnly\n\n        Console.WriteLine(vbLf &amp; &quot;Elements in the read-only IList:&quot;)\n        For Each dinosaur As String In roDinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Coelophysis&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Coelophysis&quot;\n\n        Console.WriteLine(vbLf &amp; &quot;Elements in the read-only IList:&quot;)\n        For Each dinosaur As String In roDinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 4\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;\n&#39;Dim roDinosaurs As IList(Of String) = dinosaurs.AsReadOnly\n&#39;\n&#39;Elements in the read-only IList:\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;\n&#39;dinosaurs(2) = &quot;Coelophysis&quot;\n&#39;\n&#39;Elements in the read-only IList:\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Deinonychus\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_BinarySearch__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(T)</div>        \r\n          </div>\r\n    \r\n            <p>Searches the entire sorted <span class=\"xref\">stem.Collections.Generic.List`1</span> for an element using the default comparer and returns the zero-based index of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int BinarySearch (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of <code>item</code> in the sorted <span class=\"xref\">stem.Collections.Generic.List`1</span>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span> cannot find an implementation of the <span class=\"xref\">stem.IComparable`1</span> generic interface or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for type <code>T</code> to determine the order of list elements. The <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> property checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  If type <code>T</code> does not implement either interface, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  </p>\n<p> Comparing <code>null</code> with any reference type is allowed and does not generate an exception when using the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface. When sorting, <code>null</code> is considered to be less than any other object.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, this index should be used as the insertion point to maintain the sort order.  </p>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is the number of elements in the range.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort\" data-linktype=\"relative-path\">Sort()</a> method overload and the BinarySearch method overload. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted, and displayed again.  </p>\n<p> The BinarySearch method overload is then used to search for two strings that are not in the list, and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method is used to insert them. The return value of the BinarySearch method is negative in each case, because the strings are not in the list. Taking the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order. The second search string is larger than any element in the list, so the insertion position is at the end of the list.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_SortSearch#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Sort&quot;);\n    dinosaurs-&gt;Sort();\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>BinarySearch and Insert \\&quot;Coelophysis\\&quot;:&quot;);\n    int index = dinosaurs-&gt;BinarySearch(&quot;Coelophysis&quot;);\n    if (index &lt; 0)\n    {\n        dinosaurs-&gt;Insert(~index, &quot;Coelophysis&quot;);\n    }\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>BinarySearch and Insert \\&quot;Tyrannosaurus\\&quot;:&quot;);\n    index = dinosaurs-&gt;BinarySearch(&quot;Tyrannosaurus&quot;);\n    if (index &lt; 0)\n    {\n        dinosaurs-&gt;Insert(~index, &quot;Tyrannosaurus&quot;);\n    }\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nSort\n\nAmargasaurus\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Coelophysis&quot;:\n\nAmargasaurus\nCoelophysis\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Tyrannosaurus&quot;:\n\nAmargasaurus\nCoelophysis\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\nTyrannosaurus\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_SortSearch#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Sort&quot;);\n        dinosaurs.Sort();\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>BinarySearch and Insert \\&quot;Coelophysis\\&quot;:&quot;);\n        int index = dinosaurs.BinarySearch(&quot;Coelophysis&quot;);\n        if (index &lt; 0)\n        {\n            dinosaurs.Insert(~index, &quot;Coelophysis&quot;);\n        }\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>BinarySearch and Insert \\&quot;Tyrannosaurus\\&quot;:&quot;);\n        index = dinosaurs.BinarySearch(&quot;Tyrannosaurus&quot;);\n        if (index &lt; 0)\n        {\n            dinosaurs.Insert(~index, &quot;Tyrannosaurus&quot;);\n        }\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nSort\n\nAmargasaurus\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Coelophysis&quot;:\n\nAmargasaurus\nCoelophysis\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Tyrannosaurus&quot;:\n\nAmargasaurus\nCoelophysis\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\nTyrannosaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_SortSearch#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Sort&quot;)\n        dinosaurs.Sort\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch and Insert &quot;&quot;Coelophysis&quot;&quot;:&quot;)\n        Dim index As Integer = dinosaurs.BinarySearch(&quot;Coelophysis&quot;)\n        If index &lt; 0 Then\n            index = index Xor -1\n            dinosaurs.Insert(index, &quot;Coelophysis&quot;)\n        End If\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch and Insert &quot;&quot;Tyrannosaurus&quot;&quot;:&quot;)\n        index = dinosaurs.BinarySearch(&quot;Tyrannosaurus&quot;)\n        If index &lt; 0 Then\n            index = index Xor -1\n            dinosaurs.Insert(index, &quot;Tyrannosaurus&quot;)\n        End If\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;\n&#39;Sort\n&#39;\n&#39;Amargasaurus\n&#39;Deinonychus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Coelophysis&quot;:\n&#39;\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Tyrannosaurus&quot;:\n&#39;\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;Tyrannosaurus\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_BinarySearch__0_System_Collections_Generic_IComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(T,IComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches the entire sorted <span class=\"xref\">stem.Collections.Generic.List`1</span> for an element using the specified comparer and returns the zero-based index of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of <code>item</code> in the sorted <span class=\"xref\">stem.Collections.Generic.List`1</span>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and the default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span> cannot find an implementation of the <span class=\"xref\">stem.IComparable`1</span> generic interface or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparer customizes how the elements are compared. For example, you can use a <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a> instance as the comparer to perform case-insensitive string searches.  </p>\n<p> If <code>comparer</code> is provided, the elements of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are compared to the specified value using the specified <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  If type <code>T</code> does not implement either interface, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> throws <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  </p>\n<p> Comparing <code>null</code> with any reference type is allowed and does not generate an exception when using the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface. When sorting, <code>null</code> is considered to be less than any other object.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, this index should be used as the insertion point to maintain the sort order.  </p>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is the number of elements in the range.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">Sort(IComparer&lt;T&gt;)</a> method overload and the BinarySearch method overload.  </p>\n<p> The example defines an alternative comparer for strings named DinoCompare, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer\\&lt;String^&gt;</code> in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for <code>null</code>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted using the alternate comparer, and displayed again.  </p>\n<p> The BinarySearch method overload is then used to search for several strings that are not in the list, employing the alternate comparer. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method is used to insert the strings. These two methods are located in the function named <code>SearchAndInsert</code>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) of the negative number returned by BinarySearch and use it as an index for inserting the new string.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_SortSearchComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class DinoComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        if (x == nullptr)\n        {\n            if (y == nullptr)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == nullptr)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x-&gt;Length.CompareTo(y-&gt;Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x-&gt;CompareTo(y);\n                }\n            }\n        }\n    }\n};\n\nvoid SearchAndInsert(List&lt;String^&gt;^ list, String^ insert, \n    DinoComparer^ dc)\n{\n    Console::WriteLine(&quot;<br>BinarySearch and Insert \\&quot;{0}\\&quot;:&quot;, insert);\n\n    int index = list-&gt;BinarySearch(insert, dc);\n\n    if (index &lt; 0)\n    {\n        list-&gt;Insert(~index, insert);\n    }\n};\n\nvoid Display(List&lt;String^&gt;^ list)\n{\n    Console::WriteLine();\n    for each(String^ s in list)\n    {\n        Console::WriteLine(s);\n    }\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    Display(dinosaurs);\n\n    DinoComparer^ dc = gcnew DinoComparer();\n\n    Console::WriteLine(&quot;<br>Sort with alternate comparer:&quot;);\n    dinosaurs-&gt;Sort(dc);\n    Display(dinosaurs);\n\n    SearchAndInsert(dinosaurs, &quot;Coelophysis&quot;, dc);\n    Display(dinosaurs);\n\n    SearchAndInsert(dinosaurs, &quot;Oviraptor&quot;, dc);\n    Display(dinosaurs);\n\n    SearchAndInsert(dinosaurs, &quot;Tyrannosaur&quot;, dc);\n    Display(dinosaurs);\n\n    SearchAndInsert(dinosaurs, nullptr, dc);\n    Display(dinosaurs);\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nSort with alternate comparer:\n\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Coelophysis&quot;:\n\nCoelophysis\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Oviraptor&quot;:\n\nOviraptor\nCoelophysis\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Tyrannosaur&quot;:\n\nOviraptor\nCoelophysis\nDeinonychus\nTyrannosaur\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;&quot;:\n\n\nOviraptor\nCoelophysis\nDeinonychus\nTyrannosaur\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_SortSearchComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class DinoComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        If x Is Nothing Then\n            If y Is Nothing Then \n                &#39; If x is Nothing and y is Nothing, they&#39;re\n                &#39; equal. \n                Return 0\n            Else\n                &#39; If x is Nothing and y is not Nothing, y\n                &#39; is greater. \n                Return -1\n            End If\n        Else\n            &#39; If x is not Nothing...\n            &#39;\n            If y Is Nothing Then\n                &#39; ...and y is Nothing, x is greater.\n                Return 1\n            Else\n                &#39; ...and y is not Nothing, compare the \n                &#39; lengths of the two strings.\n                &#39;\n                Dim retval As Integer = _\n                    x.Length.CompareTo(y.Length)\n\n                If retval &lt;&gt; 0 Then \n                    &#39; If the strings are not of equal length,\n                    &#39; the longer string is greater.\n                    &#39;\n                    Return retval\n                Else\n                    &#39; If the strings are of equal length,\n                    &#39; sort them with ordinary string comparison.\n                    &#39;\n                    Return x.CompareTo(y)\n                End If\n            End If\n        End If\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        Display(dinosaurs)\n\n        Dim dc As New DinoComparer\n\n        Console.WriteLine(vbLf &amp; &quot;Sort with alternate comparer:&quot;)\n        dinosaurs.Sort(dc)\n        Display(dinosaurs)\n\n        SearchAndInsert(dinosaurs, &quot;Coelophysis&quot;, dc)\n        Display(dinosaurs)\n\n        SearchAndInsert(dinosaurs, &quot;Oviraptor&quot;, dc)\n        Display(dinosaurs)\n\n        SearchAndInsert(dinosaurs, &quot;Tyrannosaur&quot;, dc)\n        Display(dinosaurs)\n\n        SearchAndInsert(dinosaurs, Nothing, dc)\n        Display(dinosaurs)\n    End Sub\n\n    Private Shared Sub SearchAndInsert( _\n        ByVal lis As List(Of String), _\n        ByVal insert As String, ByVal dc As DinoComparer)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch and Insert &quot;&quot;{0}&quot;&quot;:&quot;, insert)\n\n        Dim index As Integer = lis.BinarySearch(insert, dc)\n\n        If index &lt; 0 Then\n            index = index Xor -1\n            lis.Insert(index, insert)\n        End If\n    End Sub\n\n    Private Shared Sub Display(ByVal lis As List(Of String))\n        Console.WriteLine()\n        For Each s As String In lis\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;\n&#39;Sort with alternate comparer:\n&#39;\n&#39;Deinonychus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Coelophysis&quot;:\n&#39;\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Oviraptor&quot;:\n&#39;\n&#39;Oviraptor\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Tyrannosaur&quot;:\n&#39;\n&#39;Oviraptor\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Tyrannosaur\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;&quot;:\n&#39;\n&#39;\n&#39;Oviraptor\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Tyrannosaur\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_SortSearchComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class DinoComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        if (x == null)\n        {\n            if (y == null)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == null)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x.Length.CompareTo(y.Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x.CompareTo(y);\n                }\n            }\n        }\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        Display(dinosaurs);\n\n        DinoComparer dc = new DinoComparer();\n\n        Console.WriteLine(&quot;<br>Sort with alternate comparer:&quot;);\n        dinosaurs.Sort(dc);\n        Display(dinosaurs);\n\n        SearchAndInsert(dinosaurs, &quot;Coelophysis&quot;, dc);\n        Display(dinosaurs);\n\n        SearchAndInsert(dinosaurs, &quot;Oviraptor&quot;, dc);\n        Display(dinosaurs);\n\n        SearchAndInsert(dinosaurs, &quot;Tyrannosaur&quot;, dc);\n        Display(dinosaurs);\n\n        SearchAndInsert(dinosaurs, null, dc);\n        Display(dinosaurs);\n    }\n\n    private static void SearchAndInsert(List&lt;string&gt; list, \n        string insert, DinoComparer dc)\n    {\n        Console.WriteLine(&quot;<br>BinarySearch and Insert \\&quot;{0}\\&quot;:&quot;, insert);\n\n        int index = list.BinarySearch(insert, dc);\n\n        if (index &lt; 0)\n        {\n            list.Insert(~index, insert);\n        }\n    }\n\n    private static void Display(List&lt;string&gt; list)\n    {\n        Console.WriteLine();\n        foreach( string s in list )\n        {\n            Console.WriteLine(s);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nSort with alternate comparer:\n\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Coelophysis&quot;:\n\nCoelophysis\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Oviraptor&quot;:\n\nOviraptor\nCoelophysis\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Tyrannosaur&quot;:\n\nOviraptor\nCoelophysis\nDeinonychus\nTyrannosaur\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;&quot;:\n\n\nOviraptor\nCoelophysis\nDeinonychus\nTyrannosaur\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_BinarySearch_System_Int32_System_Int32__0_System_Collections_Generic_IComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(Int32,Int32,T,IComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches a range of elements in the sorted <span class=\"xref\">stem.Collections.Generic.List`1</span> for an element using the specified comparer and returns the zero-based index of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing elements, or <code>null</code> to use the default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of <code>item</code> in the sorted <span class=\"xref\">stem.Collections.Generic.List`1</span>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not denote a valid range in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and the default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span> cannot find an implementation of the <span class=\"xref\">stem.IComparable`1</span> generic interface or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparer customizes how the elements are compared. For example, you can use a <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a> instance as the comparer to perform case-insensitive string searches.  </p>\n<p> If <code>comparer</code> is provided, the elements of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are compared to the specified value using the specified <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  If type <code>T</code> does not implement either interface, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> throws <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  </p>\n<p> Comparing <code>null</code> with any reference type is allowed and does not generate an exception when using the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface. When sorting, <code>null</code> is considered to be less than any other object.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, this index should be used as the insertion point to maintain the sort order.  </p>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is the number of elements in the range.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Int32_System_Int32_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">Sort(Int32,Int32,IComparer&lt;T&gt;)</a> method overload and the BinarySearch method overload.  </p>\n<p> The example defines an alternative comparer for strings named DinoCompare, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer&lt;String^&gt;</code> in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for <code>null</code>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs. Within each of the two groups, the names are not in any particular sort order. The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.  </p>\n<p> The BinarySearch method overload is then used to search only the range of herbivores for &quot;Brachiosaurus&quot;. The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) of the negative number returned by the BinarySearch method is used as an index for inserting the new string.  </p>\n<pre><code class=\"lang-cs\" name=\"List`1_SortSearchComparerRange#1\">using System;\nusing System.Collections.Generic;\n\npublic class DinoComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        if (x == null)\n        {\n            if (y == null)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == null)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x.Length.CompareTo(y.Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x.CompareTo(y);\n                }\n            }\n        }\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Parasauralophus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Galimimus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Oviraptor&quot;);\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n\n        int herbivores = 5;\n        Display(dinosaurs);\n\n        DinoComparer dc = new DinoComparer();\n\n        Console.WriteLine(&quot;<br>Sort a range with the alternate comparer:&quot;);\n        dinosaurs.Sort(0, herbivores, dc);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>BinarySearch a range and Insert \\&quot;{0}\\&quot;:&quot;,\n            &quot;Brachiosaurus&quot;);\n\n        int index = dinosaurs.BinarySearch(0, herbivores, &quot;Brachiosaurus&quot;, dc);\n\n        if (index &lt; 0)\n        {\n            dinosaurs.Insert(~index, &quot;Brachiosaurus&quot;);\n            herbivores++;\n        }\n\n        Display(dinosaurs);\n    }\n\n    private static void Display(List&lt;string&gt; list)\n    {\n        Console.WriteLine();\n        foreach( string s in list )\n        {\n            Console.WriteLine(s);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nParasauralophus\nAmargasaurus\nGalimimus\nMamenchisaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n\nSort a range with the alternate comparer:\n\nGalimimus\nAmargasaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n\nBinarySearch a range and Insert &quot;Brachiosaurus&quot;:\n\nGalimimus\nAmargasaurus\nBrachiosaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_SortSearchComparerRange#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class DinoComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        If x Is Nothing Then\n            If y Is Nothing Then \n                &#39; If x is Nothing and y is Nothing, they&#39;re\n                &#39; equal. \n                Return 0\n            Else\n                &#39; If x is Nothing and y is not Nothing, y\n                &#39; is greater. \n                Return -1\n            End If\n        Else\n            &#39; If x is not Nothing...\n            &#39;\n            If y Is Nothing Then\n                &#39; ...and y is Nothing, x is greater.\n                Return 1\n            Else\n                &#39; ...and y is not Nothing, compare the \n                &#39; lengths of the two strings.\n                &#39;\n                Dim retval As Integer = _\n                    x.Length.CompareTo(y.Length)\n\n                If retval &lt;&gt; 0 Then \n                    &#39; If the strings are not of equal length,\n                    &#39; the longer string is greater.\n                    &#39;\n                    Return retval\n                Else\n                    &#39; If the strings are of equal length,\n                    &#39; sort them with ordinary string comparison.\n                    &#39;\n                    Return x.CompareTo(y)\n                End If\n            End If\n        End If\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Parasauralophus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Galimimus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Oviraptor&quot;)\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n\n        Dim herbivores As Integer = 5\n        Display(dinosaurs)\n\n        Dim dc As New DinoComparer\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort a range with the alternate comparer:&quot;)\n        dinosaurs.Sort(0, herbivores, dc)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch a range and Insert &quot;&quot;{0}&quot;&quot;:&quot;, _\n            &quot;Brachiosaurus&quot;)\n\n        Dim index As Integer = _\n            dinosaurs.BinarySearch(0, herbivores, &quot;Brachiosaurus&quot;, dc)\n\n        If index &lt; 0 Then\n            index = index Xor -1\n            dinosaurs.Insert(index, &quot;Brachiosaurus&quot;)\n            herbivores += 1\n        End If\n\n        Display(dinosaurs)\n\n    End Sub\n\n    Private Shared Sub Display(ByVal lis As List(Of String))\n        Console.WriteLine()\n        For Each s As String In lis\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Parasauralophus\n&#39;Amargasaurus\n&#39;Galimimus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Oviraptor\n&#39;Tyrannosaurus\n&#39;\n&#39;Sort a range with the alternate comparer:\n&#39;\n&#39;Galimimus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Parasauralophus\n&#39;Pachycephalosaurus\n&#39;Deinonychus\n&#39;Oviraptor\n&#39;Tyrannosaurus\n&#39;\n&#39;BinarySearch a range and Insert &quot;Brachiosaurus&quot;:\n&#39;\n&#39;Galimimus\n&#39;Amargasaurus\n&#39;Brachiosaurus\n&#39;Mamenchisaurus\n&#39;Parasauralophus\n&#39;Pachycephalosaurus\n&#39;Deinonychus\n&#39;Oviraptor\n&#39;Tyrannosaurus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_SortSearchComparerRange#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class DinoComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        if (x == nullptr)\n        {\n            if (y == nullptr)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == nullptr)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x-&gt;Length.CompareTo(y-&gt;Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x-&gt;CompareTo(y);\n                }\n            }\n        }\n    }\n};\n\nvoid Display(List&lt;String^&gt;^ list)\n{\n    Console::WriteLine();\n    for each(String^ s in list)\n    {\n        Console::WriteLine(s);\n    }\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Parasauralophus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Galimimus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Oviraptor&quot;);\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n\n    int herbivores = 5;\n    Display(dinosaurs);\n\n    DinoComparer^ dc = gcnew DinoComparer();\n\n    Console::WriteLine(&quot;<br>Sort a range with the alternate comparer:&quot;);\n    dinosaurs-&gt;Sort(0, herbivores, dc);\n    Display(dinosaurs);\n\n    Console::WriteLine(&quot;<br>BinarySearch a range and Insert \\&quot;{0}\\&quot;:&quot;,\n            &quot;Brachiosaurus&quot;);\n\n    int index = dinosaurs-&gt;BinarySearch(0, herbivores, &quot;Brachiosaurus&quot;, dc);\n\n    if (index &lt; 0)\n    {\n        dinosaurs-&gt;Insert(~index, &quot;Brachiosaurus&quot;);\n        herbivores++;\n    }\n\n    Display(dinosaurs);\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nParasauralophus\nAmargasaurus\nGalimimus\nMamenchisaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n\nSort a range with the alternate comparer:\n\nGalimimus\nAmargasaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n\nBinarySearch a range and Insert &quot;Brachiosaurus&quot;:\n\nGalimimus\nAmargasaurus\nBrachiosaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Clear\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> is set to 0, and references to other objects from elements of the collection are also released.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> remains unchanged. To reset the capacity of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, call the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> method or set the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property directly. Decreasing the capacity reallocates memory and copies all the elements in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>. Trimming an empty <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Clear method and various other properties and methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> generic class. The Clear method is used at the end of the program, to remove all items from the list, and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> properties are then displayed.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Class#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    Console::WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n        dinosaurs-&gt;Contains(&quot;Deinonychus&quot;));\n\n    Console::WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Insert(2, &quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n    Console::WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Remove(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;TrimExcess();\n    Console::WriteLine(&quot;<br>TrimExcess()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    dinosaurs-&gt;Clear();\n    Console::WriteLine(&quot;<br>Clear()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n            dinosaurs.Contains(&quot;Deinonychus&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-fs\" name=\"List`1_Class#1\">\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflict with the List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let dinosaurs = ResizeArray&lt;_&gt;()\n \n    // Write out the dinosaurs in the ResizeArray.\n    let printDinosaurs() =\n        printfn &quot;&quot;\n        dinosaurs |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p) \n \n    \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n \n    dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n    dinosaurs.Add(&quot;Amargasaurus&quot;)\n    dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n    dinosaurs.Add(&quot;Deinonychus&quot;)\n    dinosaurs.Add(&quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    printfn &quot;<br>Contains(\\&quot;Deinonychus\\&quot;): %b&quot; (dinosaurs.Contains(&quot;Deinonychus&quot;))\n \n    printfn &quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    // Shows accessing the list using the Item property.\n    printfn &quot;<br>dinosaurs[3]: %s&quot; dinosaurs.[3]\n \n    printfn &quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Remove(&quot;Compsognathus&quot;) |&gt; ignore\n \n    printDinosaurs()\n \n    dinosaurs.TrimExcess()\n    printfn &quot;<br>TrimExcess()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    dinosaurs.Clear()\n    printfn &quot;<br>Clear()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    0 // return an integer exit code\n \n    (* This code example produces the following output:\n \nCapacity: 0\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nCapacity: 8\nCount: 5\n \nContains(&quot;Deinonychus&quot;): true\n \nInsert(2, &quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \ndinosaurs[3]: Mamenchisaurus\n \nRemove(&quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nTrimExcess()\nCapacity: 5\nCount: 5\n \nClear()\nCapacity: 5\nCount: 0\n    *)\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Deinonychus&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Deinonychus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        dinosaurs.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 0\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;Capacity: 8\n&#39;Count: 5\n&#39;\n&#39;Contains(&quot;Deinonychus&quot;): True\n&#39;\n&#39;Insert(2, &quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Compsognathus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;dinosaurs(3): Mamenchisaurus\n&#39;\n&#39;Remove(&quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;TrimExcess()\n&#39;Capacity: 5\n&#39;Count: 5\n&#39;\n&#39;Clear()\n&#39;Capacity: 5\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Contains__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(T)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an element is in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> is found in the <span class=\"xref\">stem.Collections.Generic.List`1</span>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality by using the default equality comparer, as defined by the object&#39;s implementation of the <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method for <code>T</code> (the type of values in the list).  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Contains and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Exists_\" data-linktype=\"relative-path\">Exists</a> methods on a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> that contains a simple business object that implements <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.ContainsExists#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify a part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return Convert.ToString(&quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot;) &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean _\n        Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        &#39; Write out the parts in the list. This will call the overridden ToString method\n        &#39; in the Part class.\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Check the list for part #1734. This calls the IEquatable.Equals method\n        &#39; of the Part class, which checks the PartId for equality.\n        Console.WriteLine(vbLf &amp; &quot;Contains: Part with Id=1734: {0}&quot;,\n                          parts.Contains(New Part() With { _\n             .PartId = 1734, _\n             .PartName = &quot;&quot; _\n        }))\n\n        &#39; Find items where name contains &quot;seat&quot;.\n        Console.WriteLine(vbLf &amp; &quot;Find: Part where name contains &quot;&quot;seat&quot;&quot;: {0}&quot;,\n                          parts.Find(Function(x) x.PartName.Contains(&quot;seat&quot;)))\n\n        &#39; Check if an item with Id 1444 exists.\n        Console.WriteLine(vbLf &amp; &quot;Exists: Part with Id=1444: {0}&quot;,\n                          parts.Exists(Function(x) x.PartId = 1444))\n\n        &#39;This code example produces the following output:\n        &#39;        \n        &#39;        ID: 1234   Name: crank arm\n        &#39;        ID: 1334   Name: chain ring\n        &#39;        ID: 1434   Name: regular seat\n        &#39;        ID: 1444   Name: banana seat\n        &#39;        ID: 1534   Name: cassette\n        &#39;        ID: 1634   Name: shift lever\n        &#39;\n        &#39;        Contains: Part with Id=1734: False\n        &#39;\n        &#39;        Find: Part where name contains &quot;seat&quot;: ID: 1434   Name: regular seat\n        &#39;\n        &#39;        Exists: Part with Id=1444: True \n        &#39;         \n\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.ContainsExists#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify a part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt;\n{\n    public string PartName { get; set; }\n    public int PartId { get; set; }\n\n    public override string ToString()\n    {\n        return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public override int GetHashCode()\n    {\n        return PartId;\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n}\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() { PartName = &quot;crank arm&quot;, PartId = 1234 });\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 }); ;\n\n        // Write out the parts in the list. This will call the overridden ToString method\n        // in the Part class.\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n\n        // Check the list for part #1734. This calls the IEquatable.Equals method\n        // of the Part class, which checks the PartId for equality.\n        Console.WriteLine(&quot;<br>Contains: Part with Id=1734: {0}&quot;,\n            parts.Contains(new Part { PartId = 1734, PartName = &quot;&quot; }));\n\n        // Find items where name contains &quot;seat&quot;.\n        Console.WriteLine(&quot;<br>Find: Part where name contains \\&quot;seat\\&quot;: {0}&quot;, \n            parts.Find(x =&gt; x.PartName.Contains(&quot;seat&quot;)));\n        \n        // Check if an item with Id 1444 exists.\n        Console.WriteLine(&quot;<br>Exists: Part with Id=1444: {0}&quot;, \n            parts.Exists(x =&gt; x.PartId == 1444));\n\n        /*This code example produces the following output:\n        \n        ID: 1234   Name: crank arm\n        ID: 1334   Name: chain ring\n        ID: 1434   Name: regular seat\n        ID: 1444   Name: banana seat\n        ID: 1534   Name: cassette\n        ID: 1634   Name: shift lever\n\n        Contains: Part with Id=1734: False\n\n        Find: Part where name contains &quot;seat&quot;: ID: 1434   Name: regular seat\n\n        Exists: Part with Id=1444: True \n         */\n    } \n}\n</code></pre><p> The following example contains a list of complex objects of type <code>Cube</code>. The <code>Cube</code> class implements the <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method so that two cubes are considered equal if their dimensions are the same. In this example, the Contains method returns <code>true</code>, because a cube that has the specified dimensions is already in the collection.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.Contains#1\">Imports System\nImports System.Collections.Generic\n\nClass Program\n    Public Shared Sub Main(ByVal args As String())\n        Dim cubes As New List(Of Cube)()\n\n        cubes.Add(New Cube(8, 8, 4))\n        cubes.Add(New Cube(8, 4, 8))\n        cubes.Add(New Cube(8, 6, 4))\n\n        If cubes.Contains(New Cube(8, 6, 4)) Then\n            Console.WriteLine(&quot;An equal cube is already in the collection.&quot;)\n        Else\n            Console.WriteLine(&quot;Cube can be added.&quot;)\n        End If\n\n        &#39;Outputs &quot;An equal cube is already in the collection.&quot;\n    End Sub\nEnd Class\n\nPublic Class Cube\n    Implements IEquatable(Of Cube)\n\n    Public Sub New(ByVal h As Integer, ByVal l As Integer, ByVal w As Integer)\n        Me.Height = h\n        Me.Length = l\n        Me.Width = w\n    End Sub\n    Private _Height As Integer\n    Public Property Height() As Integer\n        Get\n            Return _Height\n        End Get\n        Set(ByVal value As Integer)\n            _Height = value\n        End Set\n    End Property\n    Private _Length As Integer\n    Public Property Length() As Integer\n        Get\n            Return _Length\n        End Get\n        Set(ByVal value As Integer)\n            _Length = value\n        End Set\n    End Property\n    Private _Width As Integer\n    Public Property Width() As Integer\n        Get\n            Return _Width\n        End Get\n        Set(ByVal value As Integer)\n            _Width = value\n        End Set\n    End Property\n\n    Public Overloads Function Equals(ByVal other As Cube) _\n            As Boolean Implements IEquatable(Of Cube).Equals\n        If Me.Height = other.Height And Me.Length = other.Length _\n                And Me.Width = other.Width Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.Contains#1\">using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        List&lt;Cube&gt; cubes = new List&lt;Cube&gt;();\n\n        cubes.Add(new Cube(8, 8, 4));\n        cubes.Add(new Cube(8, 4, 8));\n        cubes.Add(new Cube(8, 6, 4));\n\n        if (cubes.Contains(new Cube(8, 6, 4))) {\n            Console.WriteLine(&quot;An equal cube is already in the collection.&quot;);\n        }\n        else {\n            Console.WriteLine(&quot;Cube can be added.&quot;);\n        }\n\n        //Outputs &quot;An equal cube is already in the collection.&quot;\n    }\n}\n\npublic class Cube : IEquatable&lt;Cube&gt;\n{\n\n    public Cube(int h, int l, int w)\n    {\n        this.Height = h;\n        this.Length = l;\n        this.Width = w;\n    }\n    public int Height { get; set; }\n    public int Length { get; set; }\n    public int Width { get; set; }\n\n    public bool Equals(Cube other)\n    {\n        if (this.Height == other.Height &amp;&amp; this.Length == other.Length\n            &amp;&amp; this.Width == other.Width) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_ConvertAll__1_System_Converter__0___0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_ConvertAll_TOutput__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertAll&lt;TOutput&gt;(Converter&lt;T,TOutput&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the elements in the current <span class=\"xref\">stem.Collections.Generic.List`1</span> to another type, and returns a list containing the converted elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>converter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter</a>&lt;<span class=\"xref\">T</span>,<span class=\"xref\">TOutput</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Converter`2</span> delegate that converts each element from one type to another type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List</a>&lt;<span class=\"xref\">TOutput</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.List`1</span> of the target type containing the converted elements from the current <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>converter</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter&lt;TInput,TOutput&gt;</a> is a delegate to a method that converts an object to the target type.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter&lt;TInput,TOutput&gt;</a> delegate, and the converted elements are saved in the new <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> The current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> remains unchanged.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a method named <code>PointFToPoint</code> that converts a <a class=\"xref\" href=\"system.drawing.pointf\" data-linktype=\"relative-path\">PointF</a> structure to a <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> structure. The example then creates a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of <a class=\"xref\" href=\"system.drawing.pointf\" data-linktype=\"relative-path\">PointF</a> structures, creates a <code>Converter&lt;PointF, Point&gt;</code> delegate (<code>Converter(Of PointF, Point)</code> in Visual Basic) to represent the <code>PointFToPoint</code> method, and passes the delegate to the ConvertAll(TOutput) method. The ConvertAll(TOutput) method passes each element of the input list to the <code>PointFToPoint</code> method and puts the converted elements into a new list of <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> structures. Both lists are displayed.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_ConvertAll#1\">#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Collections::Generic;\n\nPoint PointFToPoint(PointF pf)\n{\n    return Point((int) pf.X, (int) pf.Y);\n};\n\nvoid main()\n{\n    List&lt;PointF&gt;^ lpf = gcnew List&lt;PointF&gt;();\n\n    lpf-&gt;Add(PointF(27.8F, 32.62F));\n    lpf-&gt;Add(PointF(99.3F, 147.273F));\n    lpf-&gt;Add(PointF(7.5F, 1412.2F));\n\n    Console::WriteLine();\n    for each(PointF p in lpf)\n    {\n        Console::WriteLine(p);\n    }\n\n    List&lt;Point&gt;^ lp = \n        lpf-&gt;ConvertAll&lt;Point&gt;(\n            gcnew Converter&lt;PointF, Point&gt;(PointFToPoint)\n        );\n\n    Console::WriteLine();\n    for each(Point p in lp)\n    {\n        Console::WriteLine(p);\n    }\n}\n\n/* This code example produces the following output:\n\n{X=27.8, Y=32.62}\n{X=99.3, Y=147.273}\n{X=7.5, Y=1412.2}\n\n{X=27,Y=32}\n{X=99,Y=147}\n{X=7,Y=1412}\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_ConvertAll#1\">Imports System\nImports System.Drawing\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim lpf As New List(Of PointF)\n\n        lpf.Add(New PointF(27.8, 32.62))\n        lpf.Add(New PointF(99.3, 147.273))\n        lpf.Add(New PointF(7.5, 1412.2))\n\n        Console.WriteLine()\n        For Each p As PointF In lpf\n            Console.WriteLine(p)\n        Next\n\n        Dim lp As List(Of Point) = lpf.ConvertAll( _\n            New Converter(Of PointF, Point)(AddressOf PointFToPoint))\n\n        Console.WriteLine()\n        For Each p As Point In lp\n            Console.WriteLine(p)\n        Next\n\n    End Sub\n\n    Public Shared Function PointFToPoint(ByVal pf As PointF) _\n        As Point\n\n        Return New Point(CInt(pf.X), CInt(pf.Y))\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;{X=27.8, Y=32.62}\n&#39;{X=99.3, Y=147.273}\n&#39;{X=7.5, Y=1412.2}\n&#39;\n&#39;{X=28,Y=33}\n&#39;{X=99,Y=147}\n&#39;{X=8,Y=1412}\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_ConvertAll#1\">using System;\nusing System.Drawing;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;PointF&gt; lpf = new List&lt;PointF&gt;();\n\n        lpf.Add(new PointF(27.8F, 32.62F));\n        lpf.Add(new PointF(99.3F, 147.273F));\n        lpf.Add(new PointF(7.5F, 1412.2F));\n\n        Console.WriteLine();\n        foreach( PointF p in lpf )\n        {\n            Console.WriteLine(p);\n        }\n\n        List&lt;Point&gt; lp = lpf.ConvertAll( \n            new Converter&lt;PointF, Point&gt;(PointFToPoint));\n\n        Console.WriteLine();\n        foreach( Point p in lp )\n        {\n            Console.WriteLine(p);\n        }\n    }\n\n    public static Point PointFToPoint(PointF pf)\n    {\n        return new Point(((int) pf.X), ((int) pf.Y));\n    }\n}\n\n/* This code example produces the following output:\n\n{X=27.8, Y=32.62}\n{X=99.3, Y=147.273}\n{X=7.5, Y=1412.2}\n\n{X=27,Y=32}\n{X=99,Y=147}\n{X=7,Y=1412}\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_CopyTo__0___\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(T[])</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> to a compatible one-dimensional array, starting at the beginning of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (T[] array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <span class=\"xref\">stem.Collections.Generic.List`1</span>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the source <span class=\"xref\">stem.Collections.Generic.List`1</span> is greater than the number of elements that the destination <code>array</code> can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the CopyTo method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the CopyTo method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The [CopyTo(T&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt; method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the [CopyTo(Int32,â€‚T&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_CopyTo#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        &#39; Declare an array with 15 elements (0 through 14).\n        Dim array(14) As String\n\n        dinosaurs.CopyTo(array)\n        dinosaurs.CopyTo(array, 6)\n        dinosaurs.CopyTo(2, array, 12, 3)\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the array:&quot;)\n        For Each dinosaur As String In array\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Contents of the array:\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_CopyTo#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaurs in dinosaurs )\n    {\n        Console::WriteLine(dinosaurs);\n    }\n\n    // Create an array of 15 strings.\n    array&lt;String^&gt;^ arr = gcnew array&lt;String^&gt;(15);\n\n    dinosaurs-&gt;CopyTo(arr);\n    dinosaurs-&gt;CopyTo(arr, 6);\n    dinosaurs-&gt;CopyTo(2, arr, 12, 3);\n\n    Console::WriteLine(&quot;<br>Contents of the array:&quot;);\n    for each(String^ dinosaurs in arr )\n    {\n        Console::WriteLine(dinosaurs);\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_CopyTo#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Declare an array with 15 elements.\n        string[] array = new string[15];\n\n        dinosaurs.CopyTo(array);\n        dinosaurs.CopyTo(array, 6);\n        dinosaurs.CopyTo(2, array, 12, 3);\n\n        Console.WriteLine(&quot;<br>Contents of the array:&quot;);\n        foreach(string dinosaur in array)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nContents of the array:\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_CopyTo__0___System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(T[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> to a compatible one-dimensional array, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (T[] array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <span class=\"xref\">stem.Collections.Generic.List`1</span>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the source <span class=\"xref\">stem.Collections.Generic.List`1</span> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the [CopyTo(T&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt; method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The CopyTo method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the [CopyTo(Int32,â€‚T&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_CopyTo#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        &#39; Declare an array with 15 elements (0 through 14).\n        Dim array(14) As String\n\n        dinosaurs.CopyTo(array)\n        dinosaurs.CopyTo(array, 6)\n        dinosaurs.CopyTo(2, array, 12, 3)\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the array:&quot;)\n        For Each dinosaur As String In array\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Contents of the array:\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_CopyTo#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaurs in dinosaurs )\n    {\n        Console::WriteLine(dinosaurs);\n    }\n\n    // Create an array of 15 strings.\n    array&lt;String^&gt;^ arr = gcnew array&lt;String^&gt;(15);\n\n    dinosaurs-&gt;CopyTo(arr);\n    dinosaurs-&gt;CopyTo(arr, 6);\n    dinosaurs-&gt;CopyTo(2, arr, 12, 3);\n\n    Console::WriteLine(&quot;<br>Contents of the array:&quot;);\n    for each(String^ dinosaurs in arr )\n    {\n        Console::WriteLine(dinosaurs);\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_CopyTo#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Declare an array with 15 elements.\n        string[] array = new string[15];\n\n        dinosaurs.CopyTo(array);\n        dinosaurs.CopyTo(array, 6);\n        dinosaurs.CopyTo(2, array, 12, 3);\n\n        Console.WriteLine(&quot;<br>Contents of the array:&quot;);\n        foreach(string dinosaur in array)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nContents of the array:\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_CopyTo_System_Int32__0___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Int32,T[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a range of elements from the <span class=\"xref\">stem.Collections.Generic.List`1</span> to a compatible one-dimensional array, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (int index, T[] array, int arrayIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source <span class=\"xref\">stem.Collections.Generic.List`1</span> at which copying begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <span class=\"xref\">stem.Collections.Generic.List`1</span>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>arrayIndex</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is equal to or greater than the <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span> of the source <span class=\"xref\">stem.Collections.Generic.List`1</span>.  </p>\n<p> -or-  </p>\n<p> The number of elements from <code>index</code> to the end of the source <span class=\"xref\">stem.Collections.Generic.List`1</span> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the [CopyTo(T&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt; method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The [CopyTo(T&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt; method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the CopyTo method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_CopyTo#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        &#39; Declare an array with 15 elements (0 through 14).\n        Dim array(14) As String\n\n        dinosaurs.CopyTo(array)\n        dinosaurs.CopyTo(array, 6)\n        dinosaurs.CopyTo(2, array, 12, 3)\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the array:&quot;)\n        For Each dinosaur As String In array\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Contents of the array:\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n&#39;\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Compsognathus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_CopyTo#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaurs in dinosaurs )\n    {\n        Console::WriteLine(dinosaurs);\n    }\n\n    // Create an array of 15 strings.\n    array&lt;String^&gt;^ arr = gcnew array&lt;String^&gt;(15);\n\n    dinosaurs-&gt;CopyTo(arr);\n    dinosaurs-&gt;CopyTo(arr, 6);\n    dinosaurs-&gt;CopyTo(2, arr, 12, 3);\n\n    Console::WriteLine(&quot;<br>Contents of the array:&quot;);\n    for each(String^ dinosaurs in arr )\n    {\n        Console::WriteLine(dinosaurs);\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_CopyTo#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Declare an array with 15 elements.\n        string[] array = new string[15];\n\n        dinosaurs.CopyTo(array);\n        dinosaurs.CopyTo(array, 6);\n        dinosaurs.CopyTo(2, array, 12, 3);\n\n        Console.WriteLine(&quot;<br>Contents of the array:&quot;);\n        foreach(string dinosaur in array)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nContents of the array:\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n\nMamenchisaurus\nBrachiosaurus\nCompsognathus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Exists_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Exists_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <span class=\"xref\">stem.Collections.Generic.List`1</span> contains elements that match the conditions defined by the specified predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Exists (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the elements to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.List`1</span> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate, and processing is stopped when a match is found.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Contains_\" data-linktype=\"relative-path\">Contains</a> and Existsmethods on a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> that contains a simple business object that implements <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.ContainsExists#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify a part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return Convert.ToString(&quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot;) &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean _\n        Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        &#39; Write out the parts in the list. This will call the overridden ToString method\n        &#39; in the Part class.\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Check the list for part #1734. This calls the IEquatable.Equals method\n        &#39; of the Part class, which checks the PartId for equality.\n        Console.WriteLine(vbLf &amp; &quot;Contains: Part with Id=1734: {0}&quot;,\n                          parts.Contains(New Part() With { _\n             .PartId = 1734, _\n             .PartName = &quot;&quot; _\n        }))\n\n        &#39; Find items where name contains &quot;seat&quot;.\n        Console.WriteLine(vbLf &amp; &quot;Find: Part where name contains &quot;&quot;seat&quot;&quot;: {0}&quot;,\n                          parts.Find(Function(x) x.PartName.Contains(&quot;seat&quot;)))\n\n        &#39; Check if an item with Id 1444 exists.\n        Console.WriteLine(vbLf &amp; &quot;Exists: Part with Id=1444: {0}&quot;,\n                          parts.Exists(Function(x) x.PartId = 1444))\n\n        &#39;This code example produces the following output:\n        &#39;        \n        &#39;        ID: 1234   Name: crank arm\n        &#39;        ID: 1334   Name: chain ring\n        &#39;        ID: 1434   Name: regular seat\n        &#39;        ID: 1444   Name: banana seat\n        &#39;        ID: 1534   Name: cassette\n        &#39;        ID: 1634   Name: shift lever\n        &#39;\n        &#39;        Contains: Part with Id=1734: False\n        &#39;\n        &#39;        Find: Part where name contains &quot;seat&quot;: ID: 1434   Name: regular seat\n        &#39;\n        &#39;        Exists: Part with Id=1444: True \n        &#39;         \n\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.ContainsExists#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify a part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt;\n{\n    public string PartName { get; set; }\n    public int PartId { get; set; }\n\n    public override string ToString()\n    {\n        return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public override int GetHashCode()\n    {\n        return PartId;\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n}\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() { PartName = &quot;crank arm&quot;, PartId = 1234 });\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 }); ;\n\n        // Write out the parts in the list. This will call the overridden ToString method\n        // in the Part class.\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n\n        // Check the list for part #1734. This calls the IEquatable.Equals method\n        // of the Part class, which checks the PartId for equality.\n        Console.WriteLine(&quot;<br>Contains: Part with Id=1734: {0}&quot;,\n            parts.Contains(new Part { PartId = 1734, PartName = &quot;&quot; }));\n\n        // Find items where name contains &quot;seat&quot;.\n        Console.WriteLine(&quot;<br>Find: Part where name contains \\&quot;seat\\&quot;: {0}&quot;, \n            parts.Find(x =&gt; x.PartName.Contains(&quot;seat&quot;)));\n        \n        // Check if an item with Id 1444 exists.\n        Console.WriteLine(&quot;<br>Exists: Part with Id=1444: {0}&quot;, \n            parts.Exists(x =&gt; x.PartId == 1444));\n\n        /*This code example produces the following output:\n        \n        ID: 1234   Name: crank arm\n        ID: 1334   Name: chain ring\n        ID: 1434   Name: regular seat\n        ID: 1444   Name: banana seat\n        ID: 1534   Name: cassette\n        ID: 1634   Name: shift lever\n\n        Contains: Part with Id=1734: False\n\n        Find: Part where name contains &quot;seat&quot;: ID: 1434   Name: regular seat\n\n        Exists: Part with Id=1444: True \n         */\n    } \n}\n</code></pre><p> The following example demonstrates the Exists method and several other methods that use the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> generic delegate.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Find_\" data-linktype=\"relative-path\">Find</a>, <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLast_\" data-linktype=\"relative-path\">FindLast</a>, and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindAll_\" data-linktype=\"relative-path\">FindAll</a> methods are used to search the list with the search predicate method, and then the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_RemoveAll_\" data-linktype=\"relative-path\">RemoveAll</a> method is used to remove all entries ending with &quot;saurus&quot;.  </p>\n<p> Finally, the Exists method is called. It traverses the list from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops and the method returns <code>true</code> if the <code>EndsWithSaurus</code> method returns <code>true</code> for any element. The Exists method returns <code>false</code> because all such elements have been removed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"List`1_FindEtAl#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Oviraptor&quot;);\n        dinosaurs.Add(&quot;Velociraptor&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Dilophosaurus&quot;);\n        dinosaurs.Add(&quot;Gallimimus&quot;);\n        dinosaurs.Add(&quot;Triceratops&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>TrueForAll(EndsWithSaurus): {0}&quot;,\n            dinosaurs.TrueForAll(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>Find(EndsWithSaurus): {0}&quot;, \n            dinosaurs.Find(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>FindLast(EndsWithSaurus): {0}&quot;,\n            dinosaurs.FindLast(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>FindAll(EndsWithSaurus):&quot;);\n        List&lt;string&gt; sublist = dinosaurs.FindAll(EndsWithSaurus);\n\n        foreach(string dinosaur in sublist)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>{0} elements removed by RemoveAll(EndsWithSaurus).&quot;, \n            dinosaurs.RemoveAll(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>List now contains:&quot;);\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Exists(EndsWithSaurus): {0}&quot;, \n            dinosaurs.Exists(EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        return s.ToLower().EndsWith(&quot;saurus&quot;);\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nTrueForAll(EndsWithSaurus): False\n\nFind(EndsWithSaurus): Amargasaurus\n\nFindLast(EndsWithSaurus): Dilophosaurus\n\nFindAll(EndsWithSaurus):\nAmargasaurus\nDilophosaurus\n\n2 elements removed by RemoveAll(EndsWithSaurus).\n\nList now contains:\nCompsognathus\nOviraptor\nVelociraptor\nDeinonychus\nGallimimus\nTriceratops\n\nExists(EndsWithSaurus): False\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_FindEtAl#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    return s-&gt;ToLower()-&gt;EndsWith(&quot;saurus&quot;);\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Oviraptor&quot;);\n    dinosaurs-&gt;Add(&quot;Velociraptor&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Dilophosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Gallimimus&quot;);\n    dinosaurs-&gt;Add(&quot;Triceratops&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>TrueForAll(EndsWithSaurus): {0}&quot;,\n        dinosaurs-&gt;TrueForAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Find(EndsWithSaurus): {0}&quot;, \n        dinosaurs-&gt;Find(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>FindLast(EndsWithSaurus): {0}&quot;,\n        dinosaurs-&gt;FindLast(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>FindAll(EndsWithSaurus):&quot;);\n    List&lt;String^&gt;^ sublist = \n        dinosaurs-&gt;FindAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus));\n\n    for each(String^ dinosaur in sublist)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(\n        &quot;<br>{0} elements removed by RemoveAll(EndsWithSaurus).&quot;, \n        dinosaurs-&gt;RemoveAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>List now contains:&quot;);\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Exists(EndsWithSaurus): {0}&quot;, \n        dinosaurs-&gt;Exists(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nTrueForAll(EndsWithSaurus): False\n\nFind(EndsWithSaurus): Amargasaurus\n\nFindLast(EndsWithSaurus): Dilophosaurus\n\nFindAll(EndsWithSaurus):\nAmargasaurus\nDilophosaurus\n\n2 elements removed by RemoveAll(EndsWithSaurus).\n\nList now contains:\nCompsognathus\nOviraptor\nVelociraptor\nDeinonychus\nGallimimus\nTriceratops\n\nExists(EndsWithSaurus): False\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_FindEtAl#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Oviraptor&quot;)\n        dinosaurs.Add(&quot;Velociraptor&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Dilophosaurus&quot;)\n        dinosaurs.Add(&quot;Gallimimus&quot;)\n        dinosaurs.Add(&quot;Triceratops&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;TrueForAll(AddressOf EndsWithSaurus: {0}&quot;, _\n            dinosaurs.TrueForAll(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Find(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.Find(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;FindLast(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.FindLast(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;FindAll(AddressOf EndsWithSaurus):&quot;)\n        Dim sublist As List(Of String) = _\n            dinosaurs.FindAll(AddressOf EndsWithSaurus)\n\n        For Each dinosaur As String In sublist\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;{0} elements removed by RemoveAll(AddressOf EndsWithSaurus).&quot;, _\n            dinosaurs.RemoveAll(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; &quot;List now contains:&quot;)\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Exists(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.Exists(AddressOf EndsWithSaurus))\n        \n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        Return s.ToLower().EndsWith(&quot;saurus&quot;)\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;TrueForAll(AddressOf EndsWithSaurus: False\n&#39;\n&#39;Find(AddressOf EndsWithSaurus): Amargasaurus\n&#39;\n&#39;FindLast(AddressOf EndsWithSaurus): Dilophosaurus\n&#39;\n&#39;FindAll(AddressOf EndsWithSaurus):\n&#39;Amargasaurus\n&#39;Dilophosaurus\n&#39;\n&#39;2 elements removed by RemoveAll(AddressOf EndsWithSaurus).\n&#39;\n&#39;List now contains:\n&#39;Compsognathus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Exists(AddressOf EndsWithSaurus): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Find_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Find_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Find(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T Find (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate, moving forward in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_\" data-linktype=\"relative-path\">FindIndex</a> method instead.  </p>\n</div>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Find method on a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> that contains a simple complex object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.ContainsExists#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify a part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return Convert.ToString(&quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot;) &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean _\n        Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        &#39; Write out the parts in the list. This will call the overridden ToString method\n        &#39; in the Part class.\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Check the list for part #1734. This calls the IEquatable.Equals method\n        &#39; of the Part class, which checks the PartId for equality.\n        Console.WriteLine(vbLf &amp; &quot;Contains: Part with Id=1734: {0}&quot;,\n                          parts.Contains(New Part() With { _\n             .PartId = 1734, _\n             .PartName = &quot;&quot; _\n        }))\n\n        &#39; Find items where name contains &quot;seat&quot;.\n        Console.WriteLine(vbLf &amp; &quot;Find: Part where name contains &quot;&quot;seat&quot;&quot;: {0}&quot;,\n                          parts.Find(Function(x) x.PartName.Contains(&quot;seat&quot;)))\n\n        &#39; Check if an item with Id 1444 exists.\n        Console.WriteLine(vbLf &amp; &quot;Exists: Part with Id=1444: {0}&quot;,\n                          parts.Exists(Function(x) x.PartId = 1444))\n\n        &#39;This code example produces the following output:\n        &#39;        \n        &#39;        ID: 1234   Name: crank arm\n        &#39;        ID: 1334   Name: chain ring\n        &#39;        ID: 1434   Name: regular seat\n        &#39;        ID: 1444   Name: banana seat\n        &#39;        ID: 1534   Name: cassette\n        &#39;        ID: 1634   Name: shift lever\n        &#39;\n        &#39;        Contains: Part with Id=1734: False\n        &#39;\n        &#39;        Find: Part where name contains &quot;seat&quot;: ID: 1434   Name: regular seat\n        &#39;\n        &#39;        Exists: Part with Id=1444: True \n        &#39;         \n\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.ContainsExists#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify a part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt;\n{\n    public string PartName { get; set; }\n    public int PartId { get; set; }\n\n    public override string ToString()\n    {\n        return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public override int GetHashCode()\n    {\n        return PartId;\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n}\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() { PartName = &quot;crank arm&quot;, PartId = 1234 });\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 }); ;\n\n        // Write out the parts in the list. This will call the overridden ToString method\n        // in the Part class.\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n\n        // Check the list for part #1734. This calls the IEquatable.Equals method\n        // of the Part class, which checks the PartId for equality.\n        Console.WriteLine(&quot;<br>Contains: Part with Id=1734: {0}&quot;,\n            parts.Contains(new Part { PartId = 1734, PartName = &quot;&quot; }));\n\n        // Find items where name contains &quot;seat&quot;.\n        Console.WriteLine(&quot;<br>Find: Part where name contains \\&quot;seat\\&quot;: {0}&quot;, \n            parts.Find(x =&gt; x.PartName.Contains(&quot;seat&quot;)));\n        \n        // Check if an item with Id 1444 exists.\n        Console.WriteLine(&quot;<br>Exists: Part with Id=1444: {0}&quot;, \n            parts.Exists(x =&gt; x.PartId == 1444));\n\n        /*This code example produces the following output:\n        \n        ID: 1234   Name: crank arm\n        ID: 1334   Name: chain ring\n        ID: 1434   Name: regular seat\n        ID: 1444   Name: banana seat\n        ID: 1534   Name: cassette\n        ID: 1634   Name: shift lever\n\n        Contains: Part with Id=1734: False\n\n        Find: Part where name contains &quot;seat&quot;: ID: 1434   Name: regular seat\n\n        Exists: Part with Id=1444: True \n         */\n    } \n}\n</code></pre><p> The following example demonstrates the find methods for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class. The example for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the <a href=\"../Topic/Sample%20XML%20File:%20Books%20(LINQ%20to%20XML)2.md\" data-linktype=\"relative-path\">Sample XML File: Books (LINQ to XML)</a>. The <code>FillList</code> method in the example uses <a href=\"../Topic/LINQ%20to%20XML.md\" data-linktype=\"relative-path\">LINQ to XML</a> to parse the values from the XML to property values of the <code>book</code> objects.  </p>\n<p> The following table describes the examples provided for the find methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Find</td>\n<td>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindAll_System_Predicate__0__\" data-linktype=\"relative-path\">FindAll(Predicate&lt;T&gt;)</a></td>\n<td>Find all books that whose <code>Genre</code> property is &quot;Computer&quot; using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLast_System_Predicate__0__\" data-linktype=\"relative-path\">FindLast(Predicate&lt;T&gt;)</a></td>\n<td>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindLastIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindLastIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-cs\" name=\"List`1_Find_Methods#1\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Xml.Linq;\n\nnamespace Find\n{\n    class Program\n    {\n        private static string IDtoFind = &quot;bk109&quot;;\n\n        private static List&lt;Book&gt; Books = new List&lt;Book&gt;();\n        public static void Main(string[] args)\n        {\n            FillList();\n            \n            // Find a book by its ID.\n            Book result = Books.Find(\n            delegate(Book bk)\n            {\n                return bk.ID == IDtoFind;\n            }\n            );\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Find by ID: &quot; + IDtoFind);   \n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find last book in collection published before 2001.\n            result = Books.FindLast(\n            delegate(Book bk)\n            {\n                DateTime year2001 = new DateTime(2001,01,01);\n                return bk.Publish_date &lt; year2001;\n            });\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Last book in collection published before 2001:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find all computer books.\n            List&lt;Book&gt; results = Books.FindAll(FindComputer);\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;All computer:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n\n            // Find all books under $10.00.\n            results = Books.FindAll(\n            delegate(Book bk)\n            {\n                return bk.Price &lt; 10.00;\n            }\n            );\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;Books under $10:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n            \n\n            // Find index values.\n            Console.WriteLine();\n            int ndx = Books.FindIndex(FindComputer);\n            Console.WriteLine(&quot;Index of first computer book: {0}&quot;, ndx);\n            ndx = Books.FindLastIndex(FindComputer);\n            Console.WriteLine(&quot;Index of last computer book: {0}&quot;, ndx);\n\n            int mid = Books.Count / 2;\n            ndx = Books.FindIndex(mid, mid, FindComputer);\n            Console.WriteLine(&quot;Index of first computer book in the second half of the collection: {0}&quot;, ndx);\n            \n            ndx = Books.FindLastIndex(Books.Count - 1, mid, FindComputer);\n            Console.WriteLine(&quot;Index of last computer book in the second half of the collection: {0}&quot;, ndx);\n\n        }\n\n\n\n\n\n        // Populates the list with sample data.\n        private static void FillList()\n        {\n            \n            // Create XML elements from a source file.\n            XElement xTree = XElement.Load(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;);\n\n            // Create an enumerable collection of the elements.\n            IEnumerable&lt;XElement&gt; elements = xTree.Elements();\n\n            // Evaluate each element and set set values in the book object.\n            foreach (XElement el in elements)\n            {\n                Book book = new Book();\n                book.ID = el.Attribute(&quot;id&quot;).Value;\n                IEnumerable&lt;XElement&gt; props = el.Elements();\n                foreach (XElement p in props)\n                {\n\n\n                    if (p.Name.ToString().ToLower() == &quot;author&quot;)\n                    {\n                        book.Author = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;title&quot;)\n                    {\n                        book.Title = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;genre&quot;)\n                    {\n                        book.Genre = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;price&quot;)\n                    {\n                        book.Price = Convert.ToDouble(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;publish_date&quot;)\n                    {\n                        book.Publish_date = Convert.ToDateTime(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;description&quot;)\n                    {\n                        book.Description = p.Value;\n                    }\n                }\n\n                Books.Add(book);\n\n            }\n\n            DisplayResults(Books, &quot;All books:&quot;);\n\n        }\n\n        // Explicit predicate delegate.\n        private static bool FindComputer(Book bk)\n        {\n\n            if (bk.Genre == &quot;Computer&quot;)\n            {\n                return true;\n            }\n\t    else\n            {\n                return false;\n            }\n\n        }\n\n        private static void DisplayResult(Book result, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            Console.WriteLine(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, result.ID,\n                result.Author, result.Title, result.Genre, result.Price,\n                result.Publish_date.ToShortDateString());\n            Console.WriteLine();\n\n\n        }\n\n        private static void DisplayResults(List&lt;Book&gt; results, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            foreach (Book b in results)\n            {\n\n                Console.Write(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, b.ID,\n                    b.Author, b.Title, b.Genre, b.Price,\n                    b.Publish_date.ToShortDateString());\n            }\n            Console.WriteLine();\n\n        }\n\n    }\n\n    public class Book\n    {\n        public string ID { get; set; }\n        public string Author { get; set; }\n        public string Title { get; set; }\n        public string Genre { get; set; }\n        public double Price { get; set; }\n        public DateTime Publish_date { get; set; }\n        public string Description { get; set; }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Find_Methods#1\">Imports System.Collections.Generic\nImports System.Linq\nImports System.Xml.Linq\nModule Module1\n\n    Private IDToFind As String = &quot;bk109&quot;\n\n    Public Books As New List(Of Book)\n\n\n    Sub Main()\n\n        FillList()\n\n        &#39; Find a book by its ID.\n        Dim result As Book = Books.Find(AddressOf FindID)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Find by ID: &quot; &amp; IDToFind)\n        Else\n\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find last book in collection that has a publish date before 2001.\n        result = Books.FindLast(AddressOf PubBefore2001)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Last book in collection published before 2001:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find all computer books.\n        Dim results As List(Of Book) = Books.FindAll(AddressOf FindComputer)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;All computer books:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n\n        &#39; Find all books under $10.00.\n        results = Books.FindAll(AddressOf FindUnderTen)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;Books under $10:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n        &#39; Find index values.\n        Console.WriteLine()\n        Dim ndx As Integer = Books.FindIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book: &quot; &amp; ndx)\n        ndx = Books.FindLastIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book: &quot; &amp; ndx)\n\n        Dim mid As Integer = Books.Count / 2\n        ndx = Books.FindIndex(mid, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n\n        ndx = Books.FindLastIndex(Books.Count - 1, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n    End Sub\n\n\n\n    Private Sub FillList()\n\n        &#39; Create XML elements from a source file.\n        Dim xTree As XElement = XElement.Load(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;)\n\n        &#39; Create an enumerable collection of the elements.\n        Dim elements As IEnumerable(Of XElement) = xTree.Elements\n\n        &#39; Evaluate each element and set values in the book object.\n        For Each el As XElement In elements\n            Dim Book As New Book()\n            Book.ID = el.Attribute(&quot;id&quot;).Value\n            Dim props As IEnumerable(Of XElement) = el.Elements\n            For Each p As XElement In props\n                If p.Name.ToString.ToLower = &quot;author&quot; Then\n                    Book.Author = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;title&quot; Then\n                    Book.Title = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;genre&quot; Then\n                    Book.Genre = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;price&quot; Then\n                    Book.Price = Convert.ToDouble(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;publish_date&quot; Then\n                    Book.Publish_date = Convert.ToDateTime(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;description&quot; Then\n                    Book.Description = p.Value\n                End If\n            Next\n            Books.Add(Book)\n        Next\n\n        DisplayResults(Books, &quot;All books:&quot;)\n        Console.WriteLine()\n\n    End Sub\n\n    &#39; Predicate delegates for\n    &#39; Find and FindAll methods.\n    Private Function FindID(ByVal bk As Book) As Boolean\n        If bk.ID = IDToFind Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindComputer(ByVal bk As Book) As Boolean\n        If bk.Genre = &quot;Computer&quot; Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindUnderTen(ByVal bk As Book) As Boolean\n        Dim tendollars As Double = 10.0\n        If bk.Price &lt; tendollars Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function PubBefore2001(ByVal bk As Book) As Boolean\n        Dim year2001 As DateTime = New DateTime(2001, 1, 1)\n        Return bk.Publish_date &lt; year2001\n    End Function\n    Private Sub DisplayResult(ByVal result As Book, ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        Console.WriteLine(vbLf &amp; result.ID &amp; vbTab &amp; result.Author &amp; _\n                          vbTab &amp; result.Title &amp; vbTab &amp; result.Genre &amp; _\n                          vbTab &amp; result.Publish_date &amp; vbTab &amp; result.Price)\n        Console.WriteLine()\n    End Sub\n    Private Sub DisplayResults(ByVal results As List(Of Book), ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        For Each b As Book In results\n            Console.Write(vbLf &amp; b.ID &amp; vbTab &amp; b.Author &amp; _\n                              vbTab &amp; b.Title &amp; vbTab &amp; b.Genre &amp; _\n                              vbTab &amp; b.Publish_date &amp; vbTab &amp; b.Price)\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Public Class Book\n        Public ID As String\n        Public Author As String\n        Public Title As String\n        Public Genre As String\n        Public Price As Double\n        Public Publish_date As DateTime\n        Public Description As String\n    End Class\n\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_FindAll_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_FindAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindAll(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all the elements that match the conditions defined by the specified predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the elements to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List<t></t></a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.List`1</span> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate, and the elements that match the conditions are saved in the returned <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the find methods for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class. The example for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the <a href=\"../Topic/Sample%20XML%20File:%20Books%20(LINQ%20to%20XML)2.md\" data-linktype=\"relative-path\">Sample XML File: Books (LINQ to XML)</a>. The <code>FillList</code> method in the example uses <a href=\"../Topic/LINQ%20to%20XML.md\" data-linktype=\"relative-path\">LINQ to XML</a> to parse the values from the XML to property values of the <code>book</code> objects.  </p>\n<p> The following table describes the examples provided for the find methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Find_System_Predicate__0__\" data-linktype=\"relative-path\">Find(Predicate&lt;T&gt;)</a></td>\n<td>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td>FindAll</td>\n<td>Find all books that whose <code>Genre</code> property is &quot;Computer&quot; using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLast_System_Predicate__0__\" data-linktype=\"relative-path\">FindLast(Predicate&lt;T&gt;)</a></td>\n<td>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindLastIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindLastIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-cs\" name=\"List`1_Find_Methods#1\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Xml.Linq;\n\nnamespace Find\n{\n    class Program\n    {\n        private static string IDtoFind = &quot;bk109&quot;;\n\n        private static List&lt;Book&gt; Books = new List&lt;Book&gt;();\n        public static void Main(string[] args)\n        {\n            FillList();\n            \n            // Find a book by its ID.\n            Book result = Books.Find(\n            delegate(Book bk)\n            {\n                return bk.ID == IDtoFind;\n            }\n            );\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Find by ID: &quot; + IDtoFind);   \n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find last book in collection published before 2001.\n            result = Books.FindLast(\n            delegate(Book bk)\n            {\n                DateTime year2001 = new DateTime(2001,01,01);\n                return bk.Publish_date &lt; year2001;\n            });\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Last book in collection published before 2001:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find all computer books.\n            List&lt;Book&gt; results = Books.FindAll(FindComputer);\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;All computer:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n\n            // Find all books under $10.00.\n            results = Books.FindAll(\n            delegate(Book bk)\n            {\n                return bk.Price &lt; 10.00;\n            }\n            );\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;Books under $10:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n            \n\n            // Find index values.\n            Console.WriteLine();\n            int ndx = Books.FindIndex(FindComputer);\n            Console.WriteLine(&quot;Index of first computer book: {0}&quot;, ndx);\n            ndx = Books.FindLastIndex(FindComputer);\n            Console.WriteLine(&quot;Index of last computer book: {0}&quot;, ndx);\n\n            int mid = Books.Count / 2;\n            ndx = Books.FindIndex(mid, mid, FindComputer);\n            Console.WriteLine(&quot;Index of first computer book in the second half of the collection: {0}&quot;, ndx);\n            \n            ndx = Books.FindLastIndex(Books.Count - 1, mid, FindComputer);\n            Console.WriteLine(&quot;Index of last computer book in the second half of the collection: {0}&quot;, ndx);\n\n        }\n\n\n\n\n\n        // Populates the list with sample data.\n        private static void FillList()\n        {\n            \n            // Create XML elements from a source file.\n            XElement xTree = XElement.Load(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;);\n\n            // Create an enumerable collection of the elements.\n            IEnumerable&lt;XElement&gt; elements = xTree.Elements();\n\n            // Evaluate each element and set set values in the book object.\n            foreach (XElement el in elements)\n            {\n                Book book = new Book();\n                book.ID = el.Attribute(&quot;id&quot;).Value;\n                IEnumerable&lt;XElement&gt; props = el.Elements();\n                foreach (XElement p in props)\n                {\n\n\n                    if (p.Name.ToString().ToLower() == &quot;author&quot;)\n                    {\n                        book.Author = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;title&quot;)\n                    {\n                        book.Title = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;genre&quot;)\n                    {\n                        book.Genre = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;price&quot;)\n                    {\n                        book.Price = Convert.ToDouble(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;publish_date&quot;)\n                    {\n                        book.Publish_date = Convert.ToDateTime(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;description&quot;)\n                    {\n                        book.Description = p.Value;\n                    }\n                }\n\n                Books.Add(book);\n\n            }\n\n            DisplayResults(Books, &quot;All books:&quot;);\n\n        }\n\n        // Explicit predicate delegate.\n        private static bool FindComputer(Book bk)\n        {\n\n            if (bk.Genre == &quot;Computer&quot;)\n            {\n                return true;\n            }\n\t    else\n            {\n                return false;\n            }\n\n        }\n\n        private static void DisplayResult(Book result, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            Console.WriteLine(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, result.ID,\n                result.Author, result.Title, result.Genre, result.Price,\n                result.Publish_date.ToShortDateString());\n            Console.WriteLine();\n\n\n        }\n\n        private static void DisplayResults(List&lt;Book&gt; results, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            foreach (Book b in results)\n            {\n\n                Console.Write(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, b.ID,\n                    b.Author, b.Title, b.Genre, b.Price,\n                    b.Publish_date.ToShortDateString());\n            }\n            Console.WriteLine();\n\n        }\n\n    }\n\n    public class Book\n    {\n        public string ID { get; set; }\n        public string Author { get; set; }\n        public string Title { get; set; }\n        public string Genre { get; set; }\n        public double Price { get; set; }\n        public DateTime Publish_date { get; set; }\n        public string Description { get; set; }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Find_Methods#1\">Imports System.Collections.Generic\nImports System.Linq\nImports System.Xml.Linq\nModule Module1\n\n    Private IDToFind As String = &quot;bk109&quot;\n\n    Public Books As New List(Of Book)\n\n\n    Sub Main()\n\n        FillList()\n\n        &#39; Find a book by its ID.\n        Dim result As Book = Books.Find(AddressOf FindID)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Find by ID: &quot; &amp; IDToFind)\n        Else\n\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find last book in collection that has a publish date before 2001.\n        result = Books.FindLast(AddressOf PubBefore2001)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Last book in collection published before 2001:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find all computer books.\n        Dim results As List(Of Book) = Books.FindAll(AddressOf FindComputer)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;All computer books:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n\n        &#39; Find all books under $10.00.\n        results = Books.FindAll(AddressOf FindUnderTen)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;Books under $10:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n        &#39; Find index values.\n        Console.WriteLine()\n        Dim ndx As Integer = Books.FindIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book: &quot; &amp; ndx)\n        ndx = Books.FindLastIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book: &quot; &amp; ndx)\n\n        Dim mid As Integer = Books.Count / 2\n        ndx = Books.FindIndex(mid, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n\n        ndx = Books.FindLastIndex(Books.Count - 1, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n    End Sub\n\n\n\n    Private Sub FillList()\n\n        &#39; Create XML elements from a source file.\n        Dim xTree As XElement = XElement.Load(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;)\n\n        &#39; Create an enumerable collection of the elements.\n        Dim elements As IEnumerable(Of XElement) = xTree.Elements\n\n        &#39; Evaluate each element and set values in the book object.\n        For Each el As XElement In elements\n            Dim Book As New Book()\n            Book.ID = el.Attribute(&quot;id&quot;).Value\n            Dim props As IEnumerable(Of XElement) = el.Elements\n            For Each p As XElement In props\n                If p.Name.ToString.ToLower = &quot;author&quot; Then\n                    Book.Author = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;title&quot; Then\n                    Book.Title = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;genre&quot; Then\n                    Book.Genre = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;price&quot; Then\n                    Book.Price = Convert.ToDouble(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;publish_date&quot; Then\n                    Book.Publish_date = Convert.ToDateTime(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;description&quot; Then\n                    Book.Description = p.Value\n                End If\n            Next\n            Books.Add(Book)\n        Next\n\n        DisplayResults(Books, &quot;All books:&quot;)\n        Console.WriteLine()\n\n    End Sub\n\n    &#39; Predicate delegates for\n    &#39; Find and FindAll methods.\n    Private Function FindID(ByVal bk As Book) As Boolean\n        If bk.ID = IDToFind Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindComputer(ByVal bk As Book) As Boolean\n        If bk.Genre = &quot;Computer&quot; Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindUnderTen(ByVal bk As Book) As Boolean\n        Dim tendollars As Double = 10.0\n        If bk.Price &lt; tendollars Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function PubBefore2001(ByVal bk As Book) As Boolean\n        Dim year2001 As DateTime = New DateTime(2001, 1, 1)\n        Return bk.Publish_date &lt; year2001\n    End Function\n    Private Sub DisplayResult(ByVal result As Book, ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        Console.WriteLine(vbLf &amp; result.ID &amp; vbTab &amp; result.Author &amp; _\n                          vbTab &amp; result.Title &amp; vbTab &amp; result.Genre &amp; _\n                          vbTab &amp; result.Publish_date &amp; vbTab &amp; result.Price)\n        Console.WriteLine()\n    End Sub\n    Private Sub DisplayResults(ByVal results As List(Of Book), ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        For Each b As Book In results\n            Console.Write(vbLf &amp; b.ID &amp; vbTab &amp; b.Author &amp; _\n                              vbTab &amp; b.Title &amp; vbTab &amp; b.Genre &amp; _\n                              vbTab &amp; b.Publish_date &amp; vbTab &amp; b.Price)\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Public Class Book\n        Public ID As String\n        Public Author As String\n        Public Title As String\n        Public Genre As String\n        Public Price As Double\n        Public Publish_date As DateTime\n        Public Description As String\n    End Class\n\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_FindIndex_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_FindIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindIndex(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int FindIndex (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched forward starting at the first element and ending at the last element.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate. The delegate has the signature:  </p>\n<pre><code class=\"lang-c#\">public bool methodName(T obj)  \n</code></pre><pre><code class=\"lang-vb\">Public Function methodName(obj As T) As Boolean  \n</code></pre><p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <code>Employee</code> class with two fields, <code>Name</code> and <code>Id</code>. It also defines an <code>EmployeeSearch</code> class with a single method, <code>StartsWith</code>, that indicates whether the <code>Employee.Name</code> field starts with a specified substring that is supplied to the <code>EmployeeSearch</code> class constructor. Note  the signature of this method  </p>\n<p><codecontentplaceholder>2</codecontentplaceholder><br><codecontentplaceholder>3</codecontentplaceholder><br> corresponds to the signature of the delegate that can be passed to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_\" data-linktype=\"relative-path\">FindIndex</a> method. The example instantiates a <code>List&lt;Employee&gt;</code> object, adds a number of <code>Employee</code> objets to it, and then calls the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</a> method twice  to search the entire collection , the first time for the first <code>Employee</code> object whose <code>Name</code> field begins with &quot;J&quot;, and the second time for the first <code>Employee</code> object whose <code>Name</code> field begins with &quot;Ju&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.FindIndex#2\">using System;\nusing System.Collections.Generic;\n\npublic class Employee : IComparable\n{\n   public String Name { get; set; }\n   public int Id { get; set; }\n\n   public int CompareTo(Object o )\n   {\n      Employee e = o as Employee;\n      if (e == null)\n         throw new ArgumentException(&quot;o is not an Employee object.&quot;);\n\n      return Name.CompareTo(e.Name);\n   }\n}\n\npublic class EmployeeSearch\n{\n   String _s;\n\n   public EmployeeSearch(String s)\n   {\n      _s = s;\n   }\n\n   public bool StartsWith(Employee e)\n   {\n      return e.Name.StartsWith(_s, StringComparison.InvariantCultureIgnoreCase);\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var employees = new List&lt;Employee&gt;();\n      employees.AddRange( new Employee[] { new Employee { Name = &quot;Frank&quot;, Id = 2 },\n                                           new Employee { Name = &quot;Jill&quot;, Id = 3 },\n                                           new Employee { Name = &quot;Dave&quot;, Id = 5 },\n                                           new Employee { Name = &quot;Jack&quot;, Id = 8 },\n                                           new Employee { Name = &quot;Judith&quot;, Id = 12 },\n                                           new Employee { Name = &quot;Robert&quot;, Id = 14 },\n                                           new Employee { Name = &quot;Adam&quot;, Id = 1 } } );\n      employees.Sort();\n\n      var es = new EmployeeSearch(&quot;J&quot;);\n      Console.WriteLine(&quot;&#39;J&#39; starts at index {0}&quot;,\n                        employees.FindIndex(es.StartsWith));\n\n      es = new EmployeeSearch(&quot;Ju&quot;);\n      Console.WriteLine(&quot;&#39;Ju&#39; starts at index {0}&quot;,\n                        employees.FindIndex(es.StartsWith));\n   }\n}\n// The example displays the following output:\n//       &#39;J&#39; starts at index 3\n//       &#39;Ju&#39; starts at index 5\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.FindIndex#2\">Imports System.Collections.Generic\n\nPublic Class Employee : Implements IComparable\n   Public Property Name As String\n   Public Property Id As Integer\n   \n   Public Function CompareTo(o As Object) As Integer _\n         Implements IComparable.CompareTo\n      Dim e As Employee = TryCast(o, Employee)\n      If e Is Nothing Then\n         Throw New ArgumentException(&quot;o is not an Employee object.&quot;)\n      End If\n\n      Return Name.CompareTo(e.Name)\n   End Function\nEnd Class\n\nPublic Class EmployeeSearch\n   Dim _s As String\n   \n   Public Sub New(s As String)\n      _s = s\n   End Sub\n   \n   Public Function StartsWith(e As Employee) As Boolean\n      Return e.Name.StartsWith(_s, StringComparison.InvariantCultureIgnoreCase)\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim employees As New List(Of Employee)()\n      employees.AddRange( { New Employee() With { .Name = &quot;Frank&quot;, .Id = 2 },\n                            New Employee() With { .Name = &quot;Jill&quot;, .Id = 3 },\n                            New Employee() With { .Name = &quot;Dave&quot;, .Id = 5 },\n                            New Employee() With { .Name = &quot;Jack&quot;, .Id = 8 },\n                            New Employee() With { .Name = &quot;Judith&quot;, .Id = 12 },\n                            New Employee() With { .Name = &quot;Robert&quot;, .Id = 14 },\n                            New Employee() With { .Name = &quot;Adam&quot;, .Id = 1 } } )\n      employees.Sort()\n\n      Dim es As New EmployeeSearch(&quot;J&quot;)\n      Console.WriteLine(&quot;&#39;J&#39; starts at index {0}&quot;,\n                        employees.FindIndex(AddressOf es.StartsWith))\n      es = New EmployeeSearch(&quot;Ju&quot;)\n      Console.WriteLine(&quot;&#39;Ju&#39; starts at index {0}&quot;,\n                        employees.FindIndex(AddressOf es.StartsWith))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;J&#39; starts at index 3\n&#39;       &#39;Ju&#39; starts at index 5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_FindIndex_System_Int32_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_FindIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindIndex(Int32,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the specified index to the last element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int FindIndex (int startIndex, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched forward starting at <code>startIndex</code> and ending at the last element.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate. The delegate has the signature:  </p>\n<p><codecontentplaceholder>0</codecontentplaceholder><br><codecontentplaceholder>1</codecontentplaceholder><br> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from <code>startIndex</code> to the end of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <code>Employee</code> class with two fields, <code>Name</code> and <code>Id</code>. It also defines an <code>EmployeeSearch</code> class with a single method, <code>StartsWith</code>, that indicates whether the <code>Employee.Name</code> field starts with a specified substring that is supplied to the <code>EmployeeSearch</code> class constructor. Note  the signature of this method  </p>\n<pre><code class=\"lang-c#\">public bool StartsWith(Employee e)  \n</code></pre><pre><code class=\"lang-vb\">Public Function StartsWith(e As Employee) As Boolean  \n</code></pre><p> corresponds to the signature of the delegate that can be passed to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_\" data-linktype=\"relative-path\">FindIndex</a> method. The example instantiates a <code>List&lt;Employee&gt;</code> object, adds a number of <code>Employee</code> objets to it, and then calls the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</a> method twice  to search the collection starting with its fifth member (that is, the member at index 4). The first time, it searches for the first <code>Employee</code> object whose <code>Name</code> field begins with &quot;J&quot;; the second time, it searches for the first <code>Employee</code> object whose <code>Name</code> field begins with &quot;Ju&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.FindIndex#3\">using System;\nusing System.Collections.Generic;\n\npublic class Employee : IComparable\n{\n   public String Name { get; set; }\n   public int Id { get; set; }\n\n   public int CompareTo(Object o )\n   {\n      Employee e = o as Employee;\n      if (e == null)\n         throw new ArgumentException(&quot;o is not an Employee object.&quot;);\n\n      return Name.CompareTo(e.Name);\n   }\n}\n\npublic class EmployeeSearch\n{\n   String _s;\n\n   public EmployeeSearch(String s)\n   {\n      _s = s;\n   }\n\n   public bool StartsWith(Employee e)\n   {\n      return e.Name.StartsWith(_s, StringComparison.InvariantCultureIgnoreCase);\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var employees = new List&lt;Employee&gt;();\n      employees.AddRange( new Employee[] { new Employee { Name = &quot;Frank&quot;, Id = 2 },\n                                           new Employee { Name = &quot;Jill&quot;, Id = 3 },\n                                           new Employee { Name = &quot;Dave&quot;, Id = 5 },\n                                           new Employee { Name = &quot;Jack&quot;, Id = 8 },\n                                           new Employee { Name = &quot;Judith&quot;, Id = 12 },\n                                           new Employee { Name = &quot;Robert&quot;, Id = 14 },\n                                           new Employee { Name = &quot;Adam&quot;, Id = 1 } } );\n      employees.Sort();\n\n      var es = new EmployeeSearch(&quot;J&quot;);\n      int index = employees.FindIndex(4, es.StartsWith);        \n      Console.WriteLine(&quot;Starting index of&#39;J&#39;: {0}&quot;,\n                        index &gt;= 0 ? index.ToString() : &quot;Not found&quot;);\n\n      es = new EmployeeSearch(&quot;Ju&quot;);\n      index = employees.FindIndex(4, es.StartsWith);        \n      Console.WriteLine(&quot;Starting index of &#39;Ju&#39;: {0}&quot;,\n                        index &gt;= 0 ? index.ToString() : &quot;Not found&quot;);\n   }\n}\n// The example displays the following output:\n//       &#39;J&#39; starts at index 4\n//       &#39;Ju&#39; starts at index 5\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.FindIndex#3\">Imports System.Collections.Generic\n\nPublic Class Employee : Implements IComparable\n   Public Property Name As String\n   Public Property Id As Integer\n   \n   Public Function CompareTo(o As Object) As Integer _\n         Implements IComparable.CompareTo\n      Dim e As Employee = TryCast(o, Employee)\n      If e Is Nothing Then\n         Throw New ArgumentException(&quot;o is not an Employee object.&quot;)\n      End If\n\n      Return Name.CompareTo(e.Name)\n   End Function\nEnd Class\n\nPublic Class EmployeeSearch\n   Dim _s As String\n   \n   Public Sub New(s As String)\n      _s = s\n   End Sub\n   \n   Public Function StartsWith(e As Employee) As Boolean\n      Return e.Name.StartsWith(_s, StringComparison.InvariantCultureIgnoreCase)\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim employees As New List(Of Employee)()\n      employees.AddRange( { New Employee() With { .Name = &quot;Frank&quot;, .Id = 2 },\n                            New Employee() With { .Name = &quot;Jill&quot;, .Id = 3 },\n                            New Employee() With { .Name = &quot;Dave&quot;, .Id = 5 },\n                            New Employee() With { .Name = &quot;Jack&quot;, .Id = 8 },\n                            New Employee() With { .Name = &quot;Judith&quot;, .Id = 12 },\n                            New Employee() With { .Name = &quot;Robert&quot;, .Id = 14 },\n                            New Employee() With { .Name = &quot;Adam&quot;, .Id = 1 } } )\n      employees.Sort()\n\n      Dim es As New EmployeeSearch(&quot;J&quot;)\n      Dim index As Integer = employees.FindIndex(4, AddressOf es.StartsWith)        \n      Console.WriteLine(&quot;Starting index of&#39;J&#39;: {0}&quot;,\n                        If(index &gt;= 0, index.ToString(), &quot;Not found&quot;))\n\n      es = New EmployeeSearch(&quot;Ju&quot;)\n      index = employees.FindIndex(4, AddressOf es.StartsWith) \n      Console.WriteLine(&quot;Starting index of&#39;Ju&#39;: {0}&quot;,\n                        If(index &gt;= 0, index.ToString(), &quot;Not found&quot;))\n\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;J&#39; starts at index 4\n&#39;       &#39;Ju&#39; starts at index 5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_FindIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that starts at the specified index and contains the specified number of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched forward starting at <code>startIndex</code> and ending at <code>startIndex</code> plus <code>count</code> minus 1, if <code>count</code> is greater than 0.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate. The delegate has the signature:  </p>\n<pre><code class=\"lang-c#\">public bool methodName(T obj)  \n</code></pre><pre><code class=\"lang-vb\">Public Function methodName(obj As T) As Boolean  \n</code></pre><p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <code>Employee</code> class with two fields, <code>Name</code> and <code>Id</code>. It also defines an <code>EmployeeSearch</code> class with a single method, <code>StartsWith</code>, that indicates whether the <code>Employee.Name</code> field starts with a specified substring that is supplied to the <code>EmployeeSearch</code> class constructor. Note  the signature of this method  </p>\n<pre><code class=\"lang-c#\">public bool StartsWith(Employee e)  \n</code></pre><pre><code class=\"lang-vb\">Public Function StartsWith(e As Employee) As Boolean  \n</code></pre><p> corresponds to the signature of the delegate that can be passed to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_\" data-linktype=\"relative-path\">FindIndex</a> method. The example instantiates a <code>List&lt;Employee&gt;</code> object, adds a number of <code>Employee</code> objets to it, and then calls the FindIndex method twice  to search the entire collection (that is, the members from index 0 to index <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> - 1). The first time, it searches for the first <code>Employee</code> object whose <code>Name</code> field begins with &quot;J&quot;; the second time, it searches for the first <code>Employee</code> object whose <code>Name</code> field begins with &quot;Ju&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.FindIndex#1\">using System;\nusing System.Collections.Generic;\n\npublic class Employee : IComparable\n{\n   public String Name { get; set; }\n   public int Id { get; set; }\n\n   public int CompareTo(Object o )\n   {\n      Employee e = o as Employee;\n      if (e == null)\n         throw new ArgumentException(&quot;o is not an Employee object.&quot;);\n\n      return Name.CompareTo(e.Name);\n   }\n}\n\npublic class EmployeeSearch\n{\n   String _s;\n\n   public EmployeeSearch(String s)\n   {\n      _s = s;\n   }\n\n   public bool StartsWith(Employee e)\n   {\n      return e.Name.StartsWith(_s, StringComparison.InvariantCultureIgnoreCase);\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var employees = new List&lt;Employee&gt;();\n      employees.AddRange( new Employee[] { new Employee { Name = &quot;Frank&quot;, Id = 2 },\n                                           new Employee { Name = &quot;Jill&quot;, Id = 3 },\n                                           new Employee { Name = &quot;Dave&quot;, Id = 5 },\n                                           new Employee { Name = &quot;Jack&quot;, Id = 8 },\n                                           new Employee { Name = &quot;Judith&quot;, Id = 12 },\n                                           new Employee { Name = &quot;Robert&quot;, Id = 14 },\n                                           new Employee { Name = &quot;Adam&quot;, Id = 1 } } );\n      employees.Sort();\n\n      var es = new EmployeeSearch(&quot;J&quot;);\n      Console.WriteLine(&quot;&#39;J&#39; starts at index {0}&quot;,\n                        employees.FindIndex(0, employees.Count - 1, es.StartsWith));\n\n      es = new EmployeeSearch(&quot;Ju&quot;);\n      Console.WriteLine(&quot;&#39;Ju&#39; starts at index {0}&quot;,\n                        employees.FindIndex(0, employees.Count - 1,es.StartsWith));\n   }\n}\n// The example displays the following output:\n//       &#39;J&#39; starts at index 3\n//       &#39;Ju&#39; starts at index 5\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.FindIndex#1\">Imports System.Collections.Generic\n\nPublic Class Employee : Implements IComparable\n   Public Property Name As String\n   Public Property Id As Integer\n   \n   Public Function CompareTo(o As Object) As Integer _\n         Implements IComparable.CompareTo\n      Dim e As Employee = TryCast(o, Employee)\n      If e Is Nothing Then\n         Throw New ArgumentException(&quot;o is not an Employee object.&quot;)\n      End If\n\n      Return Name.CompareTo(e.Name)\n   End Function\nEnd Class\n\nPublic Class EmployeeSearch\n   Dim _s As String\n   \n   Public Sub New(s As String)\n      _s = s\n   End Sub\n   \n   Public Function StartsWith(e As Employee) As Boolean\n      Return e.Name.StartsWith(_s, StringComparison.InvariantCultureIgnoreCase)\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim employees As New List(Of Employee)()\n      employees.AddRange( { New Employee() With { .Name = &quot;Frank&quot;, .Id = 2 },\n                            New Employee() With { .Name = &quot;Jill&quot;, .Id = 3 },\n                            New Employee() With { .Name = &quot;Dave&quot;, .Id = 5 },\n                            New Employee() With { .Name = &quot;Jack&quot;, .Id = 8 },\n                            New Employee() With { .Name = &quot;Judith&quot;, .Id = 12 },\n                            New Employee() With { .Name = &quot;Robert&quot;, .Id = 14 },\n                            New Employee() With { .Name = &quot;Adam&quot;, .Id = 1 } } )\n      employees.Sort()\n\n      Dim es As New EmployeeSearch(&quot;J&quot;)\n      Console.WriteLine(&quot;&#39;J&#39; starts at index {0}&quot;,\n                        employees.FindIndex(0, employees.Count - 1,\n                                            AddressOf es.StartsWith))\n      es = New EmployeeSearch(&quot;Ju&quot;)\n      Console.WriteLine(&quot;&#39;Ju&#39; starts at index {0}&quot;,\n                        employees.FindIndex(0, employees.Count - 1,\n                                            AddressOf es.StartsWith))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;J&#39; starts at index 3\n&#39;       &#39;Ju&#39; starts at index 5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_FindLast_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_FindLast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindLast(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T FindLast (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate, moving backward in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_\" data-linktype=\"relative-path\">FindLastIndex</a> method instead.  </p>\n</div>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the find methods for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class. The example for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the <a href=\"../Topic/Sample%20XML%20File:%20Books%20(LINQ%20to%20XML)2.md\" data-linktype=\"relative-path\">Sample XML File: Books (LINQ to XML)</a>. The <code>FillList</code> method in the example uses <a href=\"../Topic/LINQ%20to%20XML.md\" data-linktype=\"relative-path\">LINQ to XML</a> to parse the values from the XML to property values of the <code>book</code> objects.  </p>\n<p> The following table describes the examples provided for the find methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Find_System_Predicate__0__\" data-linktype=\"relative-path\">Find(Predicate&lt;T&gt;)</a></td>\n<td>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindAll_System_Predicate__0__\" data-linktype=\"relative-path\">FindAll(Predicate&lt;T&gt;)</a></td>\n<td>Find all books that whose <code>Genre</code> property is &quot;Computer&quot; using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td>FindLast</td>\n<td>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindLastIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindLastIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-cs\" name=\"List`1_Find_Methods#1\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Xml.Linq;\n\nnamespace Find\n{\n    class Program\n    {\n        private static string IDtoFind = &quot;bk109&quot;;\n\n        private static List&lt;Book&gt; Books = new List&lt;Book&gt;();\n        public static void Main(string[] args)\n        {\n            FillList();\n            \n            // Find a book by its ID.\n            Book result = Books.Find(\n            delegate(Book bk)\n            {\n                return bk.ID == IDtoFind;\n            }\n            );\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Find by ID: &quot; + IDtoFind);   \n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find last book in collection published before 2001.\n            result = Books.FindLast(\n            delegate(Book bk)\n            {\n                DateTime year2001 = new DateTime(2001,01,01);\n                return bk.Publish_date &lt; year2001;\n            });\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Last book in collection published before 2001:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find all computer books.\n            List&lt;Book&gt; results = Books.FindAll(FindComputer);\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;All computer:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n\n            // Find all books under $10.00.\n            results = Books.FindAll(\n            delegate(Book bk)\n            {\n                return bk.Price &lt; 10.00;\n            }\n            );\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;Books under $10:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n            \n\n            // Find index values.\n            Console.WriteLine();\n            int ndx = Books.FindIndex(FindComputer);\n            Console.WriteLine(&quot;Index of first computer book: {0}&quot;, ndx);\n            ndx = Books.FindLastIndex(FindComputer);\n            Console.WriteLine(&quot;Index of last computer book: {0}&quot;, ndx);\n\n            int mid = Books.Count / 2;\n            ndx = Books.FindIndex(mid, mid, FindComputer);\n            Console.WriteLine(&quot;Index of first computer book in the second half of the collection: {0}&quot;, ndx);\n            \n            ndx = Books.FindLastIndex(Books.Count - 1, mid, FindComputer);\n            Console.WriteLine(&quot;Index of last computer book in the second half of the collection: {0}&quot;, ndx);\n\n        }\n\n\n\n\n\n        // Populates the list with sample data.\n        private static void FillList()\n        {\n            \n            // Create XML elements from a source file.\n            XElement xTree = XElement.Load(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;);\n\n            // Create an enumerable collection of the elements.\n            IEnumerable&lt;XElement&gt; elements = xTree.Elements();\n\n            // Evaluate each element and set set values in the book object.\n            foreach (XElement el in elements)\n            {\n                Book book = new Book();\n                book.ID = el.Attribute(&quot;id&quot;).Value;\n                IEnumerable&lt;XElement&gt; props = el.Elements();\n                foreach (XElement p in props)\n                {\n\n\n                    if (p.Name.ToString().ToLower() == &quot;author&quot;)\n                    {\n                        book.Author = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;title&quot;)\n                    {\n                        book.Title = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;genre&quot;)\n                    {\n                        book.Genre = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;price&quot;)\n                    {\n                        book.Price = Convert.ToDouble(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;publish_date&quot;)\n                    {\n                        book.Publish_date = Convert.ToDateTime(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;description&quot;)\n                    {\n                        book.Description = p.Value;\n                    }\n                }\n\n                Books.Add(book);\n\n            }\n\n            DisplayResults(Books, &quot;All books:&quot;);\n\n        }\n\n        // Explicit predicate delegate.\n        private static bool FindComputer(Book bk)\n        {\n\n            if (bk.Genre == &quot;Computer&quot;)\n            {\n                return true;\n            }\n\t    else\n            {\n                return false;\n            }\n\n        }\n\n        private static void DisplayResult(Book result, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            Console.WriteLine(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, result.ID,\n                result.Author, result.Title, result.Genre, result.Price,\n                result.Publish_date.ToShortDateString());\n            Console.WriteLine();\n\n\n        }\n\n        private static void DisplayResults(List&lt;Book&gt; results, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            foreach (Book b in results)\n            {\n\n                Console.Write(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, b.ID,\n                    b.Author, b.Title, b.Genre, b.Price,\n                    b.Publish_date.ToShortDateString());\n            }\n            Console.WriteLine();\n\n        }\n\n    }\n\n    public class Book\n    {\n        public string ID { get; set; }\n        public string Author { get; set; }\n        public string Title { get; set; }\n        public string Genre { get; set; }\n        public double Price { get; set; }\n        public DateTime Publish_date { get; set; }\n        public string Description { get; set; }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Find_Methods#1\">Imports System.Collections.Generic\nImports System.Linq\nImports System.Xml.Linq\nModule Module1\n\n    Private IDToFind As String = &quot;bk109&quot;\n\n    Public Books As New List(Of Book)\n\n\n    Sub Main()\n\n        FillList()\n\n        &#39; Find a book by its ID.\n        Dim result As Book = Books.Find(AddressOf FindID)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Find by ID: &quot; &amp; IDToFind)\n        Else\n\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find last book in collection that has a publish date before 2001.\n        result = Books.FindLast(AddressOf PubBefore2001)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Last book in collection published before 2001:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find all computer books.\n        Dim results As List(Of Book) = Books.FindAll(AddressOf FindComputer)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;All computer books:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n\n        &#39; Find all books under $10.00.\n        results = Books.FindAll(AddressOf FindUnderTen)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;Books under $10:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n        &#39; Find index values.\n        Console.WriteLine()\n        Dim ndx As Integer = Books.FindIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book: &quot; &amp; ndx)\n        ndx = Books.FindLastIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book: &quot; &amp; ndx)\n\n        Dim mid As Integer = Books.Count / 2\n        ndx = Books.FindIndex(mid, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n\n        ndx = Books.FindLastIndex(Books.Count - 1, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n    End Sub\n\n\n\n    Private Sub FillList()\n\n        &#39; Create XML elements from a source file.\n        Dim xTree As XElement = XElement.Load(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;)\n\n        &#39; Create an enumerable collection of the elements.\n        Dim elements As IEnumerable(Of XElement) = xTree.Elements\n\n        &#39; Evaluate each element and set values in the book object.\n        For Each el As XElement In elements\n            Dim Book As New Book()\n            Book.ID = el.Attribute(&quot;id&quot;).Value\n            Dim props As IEnumerable(Of XElement) = el.Elements\n            For Each p As XElement In props\n                If p.Name.ToString.ToLower = &quot;author&quot; Then\n                    Book.Author = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;title&quot; Then\n                    Book.Title = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;genre&quot; Then\n                    Book.Genre = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;price&quot; Then\n                    Book.Price = Convert.ToDouble(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;publish_date&quot; Then\n                    Book.Publish_date = Convert.ToDateTime(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;description&quot; Then\n                    Book.Description = p.Value\n                End If\n            Next\n            Books.Add(Book)\n        Next\n\n        DisplayResults(Books, &quot;All books:&quot;)\n        Console.WriteLine()\n\n    End Sub\n\n    &#39; Predicate delegates for\n    &#39; Find and FindAll methods.\n    Private Function FindID(ByVal bk As Book) As Boolean\n        If bk.ID = IDToFind Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindComputer(ByVal bk As Book) As Boolean\n        If bk.Genre = &quot;Computer&quot; Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindUnderTen(ByVal bk As Book) As Boolean\n        Dim tendollars As Double = 10.0\n        If bk.Price &lt; tendollars Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function PubBefore2001(ByVal bk As Book) As Boolean\n        Dim year2001 As DateTime = New DateTime(2001, 1, 1)\n        Return bk.Publish_date &lt; year2001\n    End Function\n    Private Sub DisplayResult(ByVal result As Book, ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        Console.WriteLine(vbLf &amp; result.ID &amp; vbTab &amp; result.Author &amp; _\n                          vbTab &amp; result.Title &amp; vbTab &amp; result.Genre &amp; _\n                          vbTab &amp; result.Publish_date &amp; vbTab &amp; result.Price)\n        Console.WriteLine()\n    End Sub\n    Private Sub DisplayResults(ByVal results As List(Of Book), ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        For Each b As Book In results\n            Console.Write(vbLf &amp; b.ID &amp; vbTab &amp; b.Author &amp; _\n                              vbTab &amp; b.Title &amp; vbTab &amp; b.Genre &amp; _\n                              vbTab &amp; b.Publish_date &amp; vbTab &amp; b.Price)\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Public Class Book\n        Public ID As String\n        Public Author As String\n        Public Title As String\n        Public Genre As String\n        Public Price As Double\n        Public Publish_date As DateTime\n        Public Description As String\n    End Class\n\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_FindLastIndex_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_FindLastIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindLastIndex(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int FindLastIndex (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched backward starting at the last element and ending at the first element.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the find methods for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class. The example for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the <a href=\"../Topic/Sample%20XML%20File:%20Books%20(LINQ%20to%20XML)2.md\" data-linktype=\"relative-path\">Sample XML File: Books (LINQ to XML)</a>. The <code>FillList</code> method in the example uses <a href=\"../Topic/LINQ%20to%20XML.md\" data-linktype=\"relative-path\">LINQ to XML</a> to parse the values from the XML to property values of the <code>book</code> objects.  </p>\n<p> The following table describes the examples provided for the find methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Find_System_Predicate__0__\" data-linktype=\"relative-path\">Find(Predicate&lt;T&gt;)</a></td>\n<td>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindAll_System_Predicate__0__\" data-linktype=\"relative-path\">FindAll(Predicate&lt;T&gt;)</a></td>\n<td>Find all books that whose <code>Genre</code> property is &quot;Computer&quot; using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLast_System_Predicate__0__\" data-linktype=\"relative-path\">FindLast(Predicate&lt;T&gt;)</a></td>\n<td>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td>FindLastIndex</td>\n<td>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindLastIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-cs\" name=\"List`1_Find_Methods#1\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Xml.Linq;\n\nnamespace Find\n{\n    class Program\n    {\n        private static string IDtoFind = &quot;bk109&quot;;\n\n        private static List&lt;Book&gt; Books = new List&lt;Book&gt;();\n        public static void Main(string[] args)\n        {\n            FillList();\n            \n            // Find a book by its ID.\n            Book result = Books.Find(\n            delegate(Book bk)\n            {\n                return bk.ID == IDtoFind;\n            }\n            );\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Find by ID: &quot; + IDtoFind);   \n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find last book in collection published before 2001.\n            result = Books.FindLast(\n            delegate(Book bk)\n            {\n                DateTime year2001 = new DateTime(2001,01,01);\n                return bk.Publish_date &lt; year2001;\n            });\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Last book in collection published before 2001:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find all computer books.\n            List&lt;Book&gt; results = Books.FindAll(FindComputer);\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;All computer:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n\n            // Find all books under $10.00.\n            results = Books.FindAll(\n            delegate(Book bk)\n            {\n                return bk.Price &lt; 10.00;\n            }\n            );\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;Books under $10:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n            \n\n            // Find index values.\n            Console.WriteLine();\n            int ndx = Books.FindIndex(FindComputer);\n            Console.WriteLine(&quot;Index of first computer book: {0}&quot;, ndx);\n            ndx = Books.FindLastIndex(FindComputer);\n            Console.WriteLine(&quot;Index of last computer book: {0}&quot;, ndx);\n\n            int mid = Books.Count / 2;\n            ndx = Books.FindIndex(mid, mid, FindComputer);\n            Console.WriteLine(&quot;Index of first computer book in the second half of the collection: {0}&quot;, ndx);\n            \n            ndx = Books.FindLastIndex(Books.Count - 1, mid, FindComputer);\n            Console.WriteLine(&quot;Index of last computer book in the second half of the collection: {0}&quot;, ndx);\n\n        }\n\n\n\n\n\n        // Populates the list with sample data.\n        private static void FillList()\n        {\n            \n            // Create XML elements from a source file.\n            XElement xTree = XElement.Load(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;);\n\n            // Create an enumerable collection of the elements.\n            IEnumerable&lt;XElement&gt; elements = xTree.Elements();\n\n            // Evaluate each element and set set values in the book object.\n            foreach (XElement el in elements)\n            {\n                Book book = new Book();\n                book.ID = el.Attribute(&quot;id&quot;).Value;\n                IEnumerable&lt;XElement&gt; props = el.Elements();\n                foreach (XElement p in props)\n                {\n\n\n                    if (p.Name.ToString().ToLower() == &quot;author&quot;)\n                    {\n                        book.Author = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;title&quot;)\n                    {\n                        book.Title = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;genre&quot;)\n                    {\n                        book.Genre = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;price&quot;)\n                    {\n                        book.Price = Convert.ToDouble(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;publish_date&quot;)\n                    {\n                        book.Publish_date = Convert.ToDateTime(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;description&quot;)\n                    {\n                        book.Description = p.Value;\n                    }\n                }\n\n                Books.Add(book);\n\n            }\n\n            DisplayResults(Books, &quot;All books:&quot;);\n\n        }\n\n        // Explicit predicate delegate.\n        private static bool FindComputer(Book bk)\n        {\n\n            if (bk.Genre == &quot;Computer&quot;)\n            {\n                return true;\n            }\n\t    else\n            {\n                return false;\n            }\n\n        }\n\n        private static void DisplayResult(Book result, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            Console.WriteLine(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, result.ID,\n                result.Author, result.Title, result.Genre, result.Price,\n                result.Publish_date.ToShortDateString());\n            Console.WriteLine();\n\n\n        }\n\n        private static void DisplayResults(List&lt;Book&gt; results, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            foreach (Book b in results)\n            {\n\n                Console.Write(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, b.ID,\n                    b.Author, b.Title, b.Genre, b.Price,\n                    b.Publish_date.ToShortDateString());\n            }\n            Console.WriteLine();\n\n        }\n\n    }\n\n    public class Book\n    {\n        public string ID { get; set; }\n        public string Author { get; set; }\n        public string Title { get; set; }\n        public string Genre { get; set; }\n        public double Price { get; set; }\n        public DateTime Publish_date { get; set; }\n        public string Description { get; set; }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Find_Methods#1\">Imports System.Collections.Generic\nImports System.Linq\nImports System.Xml.Linq\nModule Module1\n\n    Private IDToFind As String = &quot;bk109&quot;\n\n    Public Books As New List(Of Book)\n\n\n    Sub Main()\n\n        FillList()\n\n        &#39; Find a book by its ID.\n        Dim result As Book = Books.Find(AddressOf FindID)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Find by ID: &quot; &amp; IDToFind)\n        Else\n\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find last book in collection that has a publish date before 2001.\n        result = Books.FindLast(AddressOf PubBefore2001)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Last book in collection published before 2001:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find all computer books.\n        Dim results As List(Of Book) = Books.FindAll(AddressOf FindComputer)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;All computer books:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n\n        &#39; Find all books under $10.00.\n        results = Books.FindAll(AddressOf FindUnderTen)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;Books under $10:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n        &#39; Find index values.\n        Console.WriteLine()\n        Dim ndx As Integer = Books.FindIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book: &quot; &amp; ndx)\n        ndx = Books.FindLastIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book: &quot; &amp; ndx)\n\n        Dim mid As Integer = Books.Count / 2\n        ndx = Books.FindIndex(mid, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n\n        ndx = Books.FindLastIndex(Books.Count - 1, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n    End Sub\n\n\n\n    Private Sub FillList()\n\n        &#39; Create XML elements from a source file.\n        Dim xTree As XElement = XElement.Load(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;)\n\n        &#39; Create an enumerable collection of the elements.\n        Dim elements As IEnumerable(Of XElement) = xTree.Elements\n\n        &#39; Evaluate each element and set values in the book object.\n        For Each el As XElement In elements\n            Dim Book As New Book()\n            Book.ID = el.Attribute(&quot;id&quot;).Value\n            Dim props As IEnumerable(Of XElement) = el.Elements\n            For Each p As XElement In props\n                If p.Name.ToString.ToLower = &quot;author&quot; Then\n                    Book.Author = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;title&quot; Then\n                    Book.Title = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;genre&quot; Then\n                    Book.Genre = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;price&quot; Then\n                    Book.Price = Convert.ToDouble(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;publish_date&quot; Then\n                    Book.Publish_date = Convert.ToDateTime(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;description&quot; Then\n                    Book.Description = p.Value\n                End If\n            Next\n            Books.Add(Book)\n        Next\n\n        DisplayResults(Books, &quot;All books:&quot;)\n        Console.WriteLine()\n\n    End Sub\n\n    &#39; Predicate delegates for\n    &#39; Find and FindAll methods.\n    Private Function FindID(ByVal bk As Book) As Boolean\n        If bk.ID = IDToFind Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindComputer(ByVal bk As Book) As Boolean\n        If bk.Genre = &quot;Computer&quot; Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindUnderTen(ByVal bk As Book) As Boolean\n        Dim tendollars As Double = 10.0\n        If bk.Price &lt; tendollars Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function PubBefore2001(ByVal bk As Book) As Boolean\n        Dim year2001 As DateTime = New DateTime(2001, 1, 1)\n        Return bk.Publish_date &lt; year2001\n    End Function\n    Private Sub DisplayResult(ByVal result As Book, ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        Console.WriteLine(vbLf &amp; result.ID &amp; vbTab &amp; result.Author &amp; _\n                          vbTab &amp; result.Title &amp; vbTab &amp; result.Genre &amp; _\n                          vbTab &amp; result.Publish_date &amp; vbTab &amp; result.Price)\n        Console.WriteLine()\n    End Sub\n    Private Sub DisplayResults(ByVal results As List(Of Book), ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        For Each b As Book In results\n            Console.Write(vbLf &amp; b.ID &amp; vbTab &amp; b.Author &amp; _\n                              vbTab &amp; b.Title &amp; vbTab &amp; b.Genre &amp; _\n                              vbTab &amp; b.Publish_date &amp; vbTab &amp; b.Price)\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Public Class Book\n        Public ID As String\n        Public Author As String\n        Public Title As String\n        Public Genre As String\n        Public Price As Double\n        Public Publish_date As DateTime\n        Public Description As String\n    End Class\n\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_FindLastIndex_System_Int32_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_FindLastIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindLastIndex(Int32,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the first element to the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched backward starting at <code>startIndex</code> and ending at the first element.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from the beginning of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> to <code>startIndex</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_FindLastIndex_System_Int32_System_Int32_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_FindLastIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindLastIndex(Int32,Int32,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that contains the specified number of elements and ends at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> minus <code>count</code> plus 1, if <code>count</code> is greater than 0.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the find methods for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class. The example for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the <a href=\"../Topic/Sample%20XML%20File:%20Books%20(LINQ%20to%20XML)2.md\" data-linktype=\"relative-path\">Sample XML File: Books (LINQ to XML)</a>. The <code>FillList</code> method in the example uses <a href=\"../Topic/LINQ%20to%20XML.md\" data-linktype=\"relative-path\">LINQ to XML</a> to parse the values from the XML to property values of the <code>book</code> objects.  </p>\n<p> The following table describes the examples provided for the find methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Find_System_Predicate__0__\" data-linktype=\"relative-path\">Find(Predicate&lt;T&gt;)</a></td>\n<td>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindAll_System_Predicate__0__\" data-linktype=\"relative-path\">FindAll(Predicate&lt;T&gt;)</a></td>\n<td>Find all books that whose <code>Genre</code> property is &quot;Computer&quot; using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLast_System_Predicate__0__\" data-linktype=\"relative-path\">FindLast(Predicate&lt;T&gt;)</a></td>\n<td>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.<br><br> C# example uses an anonymous delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLastIndex_System_Predicate__0__\" data-linktype=\"relative-path\">FindLastIndex(Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindIndex_System_Int32_System_Int32_System_Predicate__0__\" data-linktype=\"relative-path\">FindIndex(Int32,Int32,Predicate&lt;T&gt;)</a></td>\n<td>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n<tr>\n<td>FindLastIndex</td>\n<td>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-cs\" name=\"List`1_Find_Methods#1\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Xml.Linq;\n\nnamespace Find\n{\n    class Program\n    {\n        private static string IDtoFind = &quot;bk109&quot;;\n\n        private static List&lt;Book&gt; Books = new List&lt;Book&gt;();\n        public static void Main(string[] args)\n        {\n            FillList();\n            \n            // Find a book by its ID.\n            Book result = Books.Find(\n            delegate(Book bk)\n            {\n                return bk.ID == IDtoFind;\n            }\n            );\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Find by ID: &quot; + IDtoFind);   \n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find last book in collection published before 2001.\n            result = Books.FindLast(\n            delegate(Book bk)\n            {\n                DateTime year2001 = new DateTime(2001,01,01);\n                return bk.Publish_date &lt; year2001;\n            });\n            if (result != null)\n            {\n                DisplayResult(result, &quot;Last book in collection published before 2001:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>Not found: {0}&quot;, IDtoFind);\n            }\n\n\n            // Find all computer books.\n            List&lt;Book&gt; results = Books.FindAll(FindComputer);\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;All computer:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n\n            // Find all books under $10.00.\n            results = Books.FindAll(\n            delegate(Book bk)\n            {\n                return bk.Price &lt; 10.00;\n            }\n            );\n            if (results.Count != 0)\n            {\n                DisplayResults(results, &quot;Books under $10:&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;<br>No books found.&quot;);\n            }\n            \n\n            // Find index values.\n            Console.WriteLine();\n            int ndx = Books.FindIndex(FindComputer);\n            Console.WriteLine(&quot;Index of first computer book: {0}&quot;, ndx);\n            ndx = Books.FindLastIndex(FindComputer);\n            Console.WriteLine(&quot;Index of last computer book: {0}&quot;, ndx);\n\n            int mid = Books.Count / 2;\n            ndx = Books.FindIndex(mid, mid, FindComputer);\n            Console.WriteLine(&quot;Index of first computer book in the second half of the collection: {0}&quot;, ndx);\n            \n            ndx = Books.FindLastIndex(Books.Count - 1, mid, FindComputer);\n            Console.WriteLine(&quot;Index of last computer book in the second half of the collection: {0}&quot;, ndx);\n\n        }\n\n\n\n\n\n        // Populates the list with sample data.\n        private static void FillList()\n        {\n            \n            // Create XML elements from a source file.\n            XElement xTree = XElement.Load(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;);\n\n            // Create an enumerable collection of the elements.\n            IEnumerable&lt;XElement&gt; elements = xTree.Elements();\n\n            // Evaluate each element and set set values in the book object.\n            foreach (XElement el in elements)\n            {\n                Book book = new Book();\n                book.ID = el.Attribute(&quot;id&quot;).Value;\n                IEnumerable&lt;XElement&gt; props = el.Elements();\n                foreach (XElement p in props)\n                {\n\n\n                    if (p.Name.ToString().ToLower() == &quot;author&quot;)\n                    {\n                        book.Author = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;title&quot;)\n                    {\n                        book.Title = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;genre&quot;)\n                    {\n                        book.Genre = p.Value;\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;price&quot;)\n                    {\n                        book.Price = Convert.ToDouble(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;publish_date&quot;)\n                    {\n                        book.Publish_date = Convert.ToDateTime(p.Value);\n                    }\n                    else if (p.Name.ToString().ToLower() == &quot;description&quot;)\n                    {\n                        book.Description = p.Value;\n                    }\n                }\n\n                Books.Add(book);\n\n            }\n\n            DisplayResults(Books, &quot;All books:&quot;);\n\n        }\n\n        // Explicit predicate delegate.\n        private static bool FindComputer(Book bk)\n        {\n\n            if (bk.Genre == &quot;Computer&quot;)\n            {\n                return true;\n            }\n\t    else\n            {\n                return false;\n            }\n\n        }\n\n        private static void DisplayResult(Book result, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            Console.WriteLine(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, result.ID,\n                result.Author, result.Title, result.Genre, result.Price,\n                result.Publish_date.ToShortDateString());\n            Console.WriteLine();\n\n\n        }\n\n        private static void DisplayResults(List&lt;Book&gt; results, string title)\n        {\n            Console.WriteLine();\n            Console.WriteLine(title);\n            foreach (Book b in results)\n            {\n\n                Console.Write(&quot;<br>{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&nbsp;&nbsp;&nbsp;&nbsp;{3}&nbsp;&nbsp;&nbsp;&nbsp;{4}&nbsp;&nbsp;&nbsp;&nbsp;{5}&quot;, b.ID,\n                    b.Author, b.Title, b.Genre, b.Price,\n                    b.Publish_date.ToShortDateString());\n            }\n            Console.WriteLine();\n\n        }\n\n    }\n\n    public class Book\n    {\n        public string ID { get; set; }\n        public string Author { get; set; }\n        public string Title { get; set; }\n        public string Genre { get; set; }\n        public double Price { get; set; }\n        public DateTime Publish_date { get; set; }\n        public string Description { get; set; }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Find_Methods#1\">Imports System.Collections.Generic\nImports System.Linq\nImports System.Xml.Linq\nModule Module1\n\n    Private IDToFind As String = &quot;bk109&quot;\n\n    Public Books As New List(Of Book)\n\n\n    Sub Main()\n\n        FillList()\n\n        &#39; Find a book by its ID.\n        Dim result As Book = Books.Find(AddressOf FindID)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Find by ID: &quot; &amp; IDToFind)\n        Else\n\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find last book in collection that has a publish date before 2001.\n        result = Books.FindLast(AddressOf PubBefore2001)\n        If result IsNot Nothing Then\n            DisplayResult(result, &quot;Last book in collection published before 2001:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Not found: &quot; &amp; IDToFind)\n        End If\n        Console.WriteLine()\n\n        &#39; Find all computer books.\n        Dim results As List(Of Book) = Books.FindAll(AddressOf FindComputer)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;All computer books:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n\n        &#39; Find all books under $10.00.\n        results = Books.FindAll(AddressOf FindUnderTen)\n        If results.Count &lt;&gt; 0 Then\n            DisplayResults(results, &quot;Books under $10:&quot;)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;No books found.&quot;)\n        End If\n        Console.WriteLine()\n\n        &#39; Find index values.\n        Console.WriteLine()\n        Dim ndx As Integer = Books.FindIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book: &quot; &amp; ndx)\n        ndx = Books.FindLastIndex(AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book: &quot; &amp; ndx)\n\n        Dim mid As Integer = Books.Count / 2\n        ndx = Books.FindIndex(mid, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of first computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n\n        ndx = Books.FindLastIndex(Books.Count - 1, mid, AddressOf FindComputer)\n        Console.WriteLine(&quot;Index of last computer book in the second half of the collection: &quot; &amp; ndx)\n\n\n    End Sub\n\n\n\n    Private Sub FillList()\n\n        &#39; Create XML elements from a source file.\n        Dim xTree As XElement = XElement.Load(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\books.xml&quot;)\n\n        &#39; Create an enumerable collection of the elements.\n        Dim elements As IEnumerable(Of XElement) = xTree.Elements\n\n        &#39; Evaluate each element and set values in the book object.\n        For Each el As XElement In elements\n            Dim Book As New Book()\n            Book.ID = el.Attribute(&quot;id&quot;).Value\n            Dim props As IEnumerable(Of XElement) = el.Elements\n            For Each p As XElement In props\n                If p.Name.ToString.ToLower = &quot;author&quot; Then\n                    Book.Author = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;title&quot; Then\n                    Book.Title = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;genre&quot; Then\n                    Book.Genre = p.Value\n                End If\n                If p.Name.ToString.ToLower = &quot;price&quot; Then\n                    Book.Price = Convert.ToDouble(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;publish_date&quot; Then\n                    Book.Publish_date = Convert.ToDateTime(p.Value)\n                End If\n                If p.Name.ToString.ToLower = &quot;description&quot; Then\n                    Book.Description = p.Value\n                End If\n            Next\n            Books.Add(Book)\n        Next\n\n        DisplayResults(Books, &quot;All books:&quot;)\n        Console.WriteLine()\n\n    End Sub\n\n    &#39; Predicate delegates for\n    &#39; Find and FindAll methods.\n    Private Function FindID(ByVal bk As Book) As Boolean\n        If bk.ID = IDToFind Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindComputer(ByVal bk As Book) As Boolean\n        If bk.Genre = &quot;Computer&quot; Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function FindUnderTen(ByVal bk As Book) As Boolean\n        Dim tendollars As Double = 10.0\n        If bk.Price &lt; tendollars Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n    Private Function PubBefore2001(ByVal bk As Book) As Boolean\n        Dim year2001 As DateTime = New DateTime(2001, 1, 1)\n        Return bk.Publish_date &lt; year2001\n    End Function\n    Private Sub DisplayResult(ByVal result As Book, ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        Console.WriteLine(vbLf &amp; result.ID &amp; vbTab &amp; result.Author &amp; _\n                          vbTab &amp; result.Title &amp; vbTab &amp; result.Genre &amp; _\n                          vbTab &amp; result.Publish_date &amp; vbTab &amp; result.Price)\n        Console.WriteLine()\n    End Sub\n    Private Sub DisplayResults(ByVal results As List(Of Book), ByVal title As String)\n        Console.WriteLine()\n        Console.WriteLine(title)\n        For Each b As Book In results\n            Console.Write(vbLf &amp; b.ID &amp; vbTab &amp; b.Author &amp; _\n                              vbTab &amp; b.Title &amp; vbTab &amp; b.Genre &amp; _\n                              vbTab &amp; b.Publish_date &amp; vbTab &amp; b.Price)\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Public Class Book\n        Public ID As String\n        Public Author As String\n        Public Title As String\n        Public Genre As String\n        Public Price As Double\n        Public Publish_date As DateTime\n        Public Description As String\n    End Class\n\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_ForEach_System_Action__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_ForEach_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach(Action&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs the specified action on each element of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ForEach (Action&lt;T&gt; action);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Action`1</span> delegate to perform on each element of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>action</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An element in the collection has been modified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a> is a delegate to a method that performs an action on the object passed to it.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a> delegate.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Modifying the underlying collection in the body of the <a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a> delegate is not supported and causes undefined behavior.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the <a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a> delegate to print the contents of a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object. In this example the <code>Print</code> method is used to display the contents of the list to the console.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In addition to displaying the contents using the <code>Print</code> method, the C# example demonstrates the use of  to display the results to the console.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Action_PrintExample#01\">using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        List&lt;String&gt; names = new List&lt;String&gt;();\n        names.Add(&quot;Bruce&quot;);\n        names.Add(&quot;Alfred&quot;);\n        names.Add(&quot;Tim&quot;);\n        names.Add(&quot;Richard&quot;);\n\n        // Display the contents of the list using the Print method.\n        names.ForEach(Print);\n\n        // The following demonstrates the anonymous method feature of C#\n        // to display the contents of the list to the console.\n        names.ForEach(delegate(String name)\n        {\n            Console.WriteLine(name);\n        });\n    }\n\n    private static void Print(string s)\n    {\n        Console.WriteLine(s);\n    }\n}\n/* This code will produce output similar to the following:\n * Bruce\n * Alfred\n * Tim\n * Richard\n * Bruce\n * Alfred\n * Tim\n * Richard\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action_PrintExample#01\">Imports System\nImports System.Collections.Generic\n\nClass Program\n    Shared Sub Main()\n        Dim names As New List(Of String)\n        names.Add(&quot;Bruce&quot;)\n        names.Add(&quot;Alfred&quot;)\n        names.Add(&quot;Tim&quot;)\n        names.Add(&quot;Richard&quot;)\n\n        &#39; Display the contents of the list using the Print method.\n        names.ForEach(AddressOf Print)\n    End Sub\n\n    Shared Sub Print(ByVal s As String)\n        Console.WriteLine(s)\n    End Sub\nEnd Class\n\n&#39; This code will produce output similar to the following:\n&#39; Bruce\n&#39; Alfred\n&#39; Tim\n&#39; Richard\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.list-1.enumerator\" data-linktype=\"relative-path\">List<t>+Enumerator</t></a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.List`1.Enumerator</span> for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, the <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call the <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> property returns the same object until <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called. <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.list-1.enumerator#System_Collections_Generic_List_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator instance instead.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_GetRange_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_GetRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRange(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of a range of elements in the source <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based <span class=\"xref\">stem.Collections.Generic.List`1</span> index at which the range starts.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List<t></t></a></div>\r\n                  </div>\r\n                  <p>A shallow copy of a range of elements in the source <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not denote a valid range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection. The objects themselves are not copied. The references in the new list point to the same objects as the references in the original list.  </p>\n<p> A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection. However, if the elements of the collection contain references to other objects, those objects are not copied. The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.  </p>\n<p> In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the GetRange method and other methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class that act on ranges. At the end of the example, the GetRange method is used to get three items from the list, beginning with index location 2. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is called on the resulting <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, creating an array of three elements. The elements of the array are displayed.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_Ranges#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim input() As String = { &quot;Brachiosaurus&quot;, _\n                                  &quot;Amargasaurus&quot;, _\n                                  &quot;Mamenchisaurus&quot; }\n\n        Dim dinosaurs As New List(Of String)(input)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;AddRange(dinosaurs)&quot;)\n        dinosaurs.AddRange(dinosaurs)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveRange(2, 2)&quot;)\n        dinosaurs.RemoveRange(2, 2)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        input = New String() { &quot;Tyrannosaurus&quot;, _\n                               &quot;Deinonychus&quot;, _\n                               &quot;Velociraptor&quot; }\n\n        Console.WriteLine(vbLf &amp; &quot;InsertRange(3, input)&quot;)\n        dinosaurs.InsertRange(3, input)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;output = dinosaurs.GetRange(2, 3).ToArray&quot;)\n        Dim output() As String = dinosaurs.GetRange(2, 3).ToArray()\n        \n        Console.WriteLine()\n        For Each dinosaur As String In output\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 3\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;AddRange(dinosaurs)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;RemoveRange(2, 2)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;InsertRange(3, input)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n&#39;Velociraptor\n&#39;Mamenchisaurus\n&#39;\n&#39;output = dinosaurs.GetRange(2, 3).ToArray\n&#39;\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_Ranges#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    array&lt;String^&gt;^ input = { &quot;Brachiosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Mamenchisaurus&quot; };\n\n    List&lt;String^&gt;^ dinosaurs = \n        gcnew List&lt;String^&gt;((IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n    dinosaurs-&gt;AddRange(dinosaurs);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n    dinosaurs-&gt;RemoveRange(2, 2);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    input = gcnew array&lt;String^&gt; { &quot;Tyrannosaurus&quot;, \n                                   &quot;Deinonychus&quot;, \n                                   &quot;Velociraptor&quot;};\n\n    Console::WriteLine(&quot;<br>InsertRange(3, (IEnumerable&lt;String^&gt;^) input)&quot;);\n    dinosaurs-&gt;InsertRange(3, (IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()&quot;);\n    array&lt;String^&gt;^ output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray();\n        \n    Console::WriteLine();\n    for each(String^ dinosaur in output )\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, (IEnumerable&lt;String^&gt;^) input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Ranges#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] input = { &quot;Brachiosaurus&quot;, \n                           &quot;Amargasaurus&quot;, \n                           &quot;Mamenchisaurus&quot; };\n\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;(input);\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n        dinosaurs.AddRange(dinosaurs);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n        dinosaurs.RemoveRange(2, 2);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        input = new string[] { &quot;Tyrannosaurus&quot;, \n                               &quot;Deinonychus&quot;, \n                               &quot;Velociraptor&quot;};\n\n        Console.WriteLine(&quot;<br>InsertRange(3, input)&quot;);\n        dinosaurs.InsertRange(3, input);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>output = dinosaurs.GetRange(2, 3).ToArray()&quot;);\n        string[] output = dinosaurs.GetRange(2, 3).ToArray();\n        \n        Console.WriteLine();\n        foreach( string dinosaur in output )\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs.GetRange(2, 3).ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_IndexOf__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(T)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>item</code> within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched forward starting at the first element and ending at the last element.  </p>\n<p> This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The IndexOf method overload searches the list from the beginning, and finds the first occurrence of the string. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf__0_System_Int32_\" data-linktype=\"relative-path\">IndexOf(T,Int32)</a> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf__0_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IndexOf(T,Int32,Int32)</a> method overload is used to search a range of two entries, beginning at index location two; it returns â€“1 because there are no instances of the search string in that range.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_IndexOf#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;, 2, 2));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_IndexOf#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 2, 2): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 2, 2))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;): 0\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_IndexOf#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 2, 2));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_IndexOf__0_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(T,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the specified index to the last element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (T item, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from <code>index</code> to the last element, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched forward starting at <code>index</code> and ending at the last element.  </p>\n<p> This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from <code>index</code> to the end of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf__0_\" data-linktype=\"relative-path\">IndexOf(T)</a> method overload searches the list from the beginning, and finds the first occurrence of the string. The IndexOf method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf__0_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IndexOf(T,Int32,Int32)</a> method overload is used to search a range of two entries, beginning at index location two; it returns â€“1 because there are no instances of the search string in that range.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_IndexOf#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;, 2, 2));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_IndexOf#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 2, 2): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 2, 2))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;): 0\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_IndexOf#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 2, 2));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_IndexOf__0_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(T,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that starts at the specified index and contains the specified number of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (T item, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that starts at <code>index</code> and contains <code>count</code> number of elements, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not specify a valid section in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched forward starting at <code>index</code> and ending at <code>index</code> plus <code>count</code> minus 1, if <code>count</code> is greater than 0.  </p>\n<p> This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf__0_\" data-linktype=\"relative-path\">IndexOf(T)</a> method overload searches the list from the beginning, and finds the first occurrence of the string. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf__0_System_Int32_\" data-linktype=\"relative-path\">IndexOf(T,Int32)</a> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the IndexOf method overload is used to search a range of two entries, beginning at index location two; it returns â€“1 because there are no instances of the search string in that range.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_IndexOf#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n        dinosaurs-&gt;IndexOf(&quot;Tyrannosaurus&quot;, 2, 2));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_IndexOf#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;IndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 2, 2): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 2, 2))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;): 0\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n&#39;\n&#39;IndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_IndexOf#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Tyrannosaurus&quot;, 2, 2));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nIndexOf(&quot;Tyrannosaurus&quot;): 0\n\nIndexOf(&quot;Tyrannosaurus&quot;, 3): 5\n\nIndexOf(&quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Insert_System_Int32__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,T)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an element into the <span class=\"xref\">stem.Collections.Generic.List`1</span> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Insert (int index, T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>item</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to insert. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> already equals <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>, <code>item</code> is added to the end of <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to add, remove, and insert a simple business object in a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify the type of part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt;\n    {\n        public string PartName { get; set; }\n       \n        public int PartId { get; set; }\n\n        public override string ToString()\n        {\n            return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n        }\n        public override bool Equals(object obj)\n        {\n            if (obj == null) return false;\n            Part objAsPart = obj as Part;\n            if (objAsPart == null) return false;\n            else return Equals(objAsPart);\n        }\n        public override int GetHashCode()\n        {\n            return PartId;\n        }\n        public bool Equals(Part other)\n        {\n            if (other == null) return false;\n            return (this.PartId.Equals(other.PartId));\n        }\n    // Should also override == and != operators.\n\n    }\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() {PartName=&quot;crank arm&quot;, PartId=1234});\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 });\n\n        // Write out the parts in the list. This will call the overridden ToString method\n        // in the Part class.\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n      \n        // Check the list for part #1734. This calls the IEquitable.Equals method\n        // of the Part class, which checks the PartId for equality.\n        Console.WriteLine(&quot;<br>Contains(\\&quot;1734\\&quot;): {0}&quot;,\n        parts.Contains(new Part {PartId=1734, PartName=&quot;&quot; }));\n\n        // Insert a new item at position 2.\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;1834\\&quot;)&quot;);\n        parts.Insert(2, new Part() { PartName = &quot;brake lever&quot;, PartId = 1834 });\n\n        \n        //Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        Console.WriteLine(&quot;<br>Parts[3]: {0}&quot;, parts[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;1534\\&quot;)&quot;);\n\n        // This will remove part 1534 even though the PartName is different,\n        // because the Equals method only checks PartId for equality.\n        parts.Remove(new Part(){PartId=1534, PartName=&quot;cogs&quot;});\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n        Console.WriteLine(&quot;<br>RemoveAt(3)&quot;);\n        // This will remove the part at index 3.\n        parts.RemoveAt(3);\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n            /*\n  \n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1534   Name: cassette\n             ID: 1634   Name: shift lever\n\n             Contains(&quot;1734&quot;): False\n\n             Insert(2, &quot;1834&quot;)\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1534   Name: cassette\n             ID: 1634   Name: shift lever\n\n             Parts[3]: ID: 1434   Name: regular seat\n\n             Remove(&quot;1534&quot;)\n\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1634   Name: shift lever\n\n             RemoveAt(3)\n\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1444   Name: banana seat\n             ID: 1634   Name: shift lever\n\n\n         */\n\n    }\n}\n</code></pre><pre><code class=\"lang-fs\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">\n// Simple business object. A PartId is used to identify the type of part  \n// but the part name can change.  \n[&lt;CustomEquality; NoComparison&gt;]\ntype Part = { PartId : int ; mutable PartName : string } with\n    override this.GetHashCode() = hash this.PartId\n    override this.Equals(other) =\n        match other with\n        | :? Part as p -&gt; this.PartId = p.PartId\n        | _ -&gt; false\n    override this.ToString() = sprintf &quot;ID: %i   Name: %s&quot; this.PartId this.PartName\n\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflicts with the F# List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let parts = ResizeArray&lt;_&gt;()\n    parts.Add({PartName = &quot;crank arm&quot; ; PartId = 1234})\n    parts.Add({PartName = &quot;chain ring&quot;; PartId = 1334 })\n    parts.Add({PartName = &quot;regular seat&quot;; PartId = 1434 })\n    parts.Add({PartName = &quot;banana seat&quot;; PartId = 1444 })\n    parts.Add({PartName = &quot;cassette&quot;; PartId = 1534 })\n    parts.Add({PartName = &quot;shift lever&quot;; PartId = 1634 })\n\n    // Write out the parts in the ResizeArray.  This will call the overridden ToString method\n    // in the Part type\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    // Check the ResizeArray for part #1734. This calls the IEquatable.Equals method \n    // of the Part type, which checks the PartId for equality.    \n    printfn &quot;<br>Contains(\\&quot;1734\\&quot;): %b&quot; (parts.Contains({PartId=1734; PartName=&quot;&quot;}))\n    \n    // Insert a new item at position 2.\n    printfn &quot;<br>Insert(2, \\&quot;1834\\&quot;)&quot;\n    parts.Insert(2, { PartName = &quot;brake lever&quot;; PartId = 1834 })\n\n    // Write out all parts\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    printfn &quot;<br>Parts[3]: %O&quot; parts.[3]\n\n    printfn &quot;<br>Remove(\\&quot;1534\\&quot;)&quot;\n    // This will remove part 1534 even though the PartName is different, \n    // because the Equals method only checks PartId for equality.\n    // Since Remove returns true or false, we need to ignore the result\n    parts.Remove({PartId=1534; PartName=&quot;cogs&quot;}) |&gt; ignore\n\n    // Write out all parts\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    printfn &quot;<br>RemoveAt(3)&quot;\n    // This will remove the part at index 3.\n    parts.RemoveAt(3)\n\n    // Write out all parts\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    0 // return an integer exit code\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify the type of part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean _\n        Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        &#39; Write out the parts in the list. This will call the overridden ToString method\n        &#39; in the Part class.\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Check the list for part #1734. This calls the IEquitable.Equals method\n        &#39; of the Part class, which checks the PartId for equality.\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;1734&quot;&quot;): {0}&quot;, parts.Contains(New Part() With { _\n             .PartId = 1734, _\n             .PartName = &quot;&quot; _\n        }))\n\n        &#39; Insert a new item at position 2.\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;1834&quot;&quot;)&quot;)\n        parts.Insert(2, New Part() With { _\n             .PartName = &quot;brake lever&quot;, _\n             .PartId = 1834 _\n        })\n\n\n        &#39;Console.WriteLine();\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Parts[3]: {0}&quot;, parts(3))\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;1534&quot;&quot;)&quot;)\n\n        &#39; This will remove part 1534 even though the PartName is different,\n        &#39; because the Equals method only checks PartId for equality.\n        parts.Remove(New Part() With { _\n             .PartId = 1534, _\n             .PartName = &quot;cogs&quot; _\n        })\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(3)&quot;)\n        &#39; This will remove part at index 3.\n        parts.RemoveAt(3)\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n    End Sub\n    &#39;\n    &#39;        This example code produces the following output:\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1534   Name: cassette\n    &#39;        ID: 1634   Name: shift lever\n    &#39;\n    &#39;        Contains(&quot;1734&quot;): False\n    &#39;\n    &#39;        Insert(2, &quot;1834&quot;)\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1534   Name: cassette\n    &#39;        ID: 1634   Name: shift lever\n    &#39;\n    &#39;        Parts[3]: ID: 1434   Name: regular seat\n    &#39;\n    &#39;        Remove(&quot;1534&quot;)\n    &#39;\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1634   Name: shift lever\n    &#39;   &#39;\n    &#39;        RemoveAt(3)\n    &#39;\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1634   Name: shift lever\n    &#39;        \n\nEnd Class\n</code></pre><p> The following example demonstrates the Insert method, along with various other properties and methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> generic class. After the list is created, elements are added. The Insert method is used to insert an item into the middle of the list. The item inserted is a duplicate, which is later removed using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Class#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    Console::WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n        dinosaurs-&gt;Contains(&quot;Deinonychus&quot;));\n\n    Console::WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Insert(2, &quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n    Console::WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Remove(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;TrimExcess();\n    Console::WriteLine(&quot;<br>TrimExcess()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    dinosaurs-&gt;Clear();\n    Console::WriteLine(&quot;<br>Clear()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n            dinosaurs.Contains(&quot;Deinonychus&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-fs\" name=\"List`1_Class#1\">\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflict with the List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let dinosaurs = ResizeArray&lt;_&gt;()\n \n    // Write out the dinosaurs in the ResizeArray.\n    let printDinosaurs() =\n        printfn &quot;&quot;\n        dinosaurs |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p) \n \n    \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n \n    dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n    dinosaurs.Add(&quot;Amargasaurus&quot;)\n    dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n    dinosaurs.Add(&quot;Deinonychus&quot;)\n    dinosaurs.Add(&quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    printfn &quot;<br>Contains(\\&quot;Deinonychus\\&quot;): %b&quot; (dinosaurs.Contains(&quot;Deinonychus&quot;))\n \n    printfn &quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    // Shows accessing the list using the Item property.\n    printfn &quot;<br>dinosaurs[3]: %s&quot; dinosaurs.[3]\n \n    printfn &quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Remove(&quot;Compsognathus&quot;) |&gt; ignore\n \n    printDinosaurs()\n \n    dinosaurs.TrimExcess()\n    printfn &quot;<br>TrimExcess()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    dinosaurs.Clear()\n    printfn &quot;<br>Clear()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    0 // return an integer exit code\n \n    (* This code example produces the following output:\n \nCapacity: 0\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nCapacity: 8\nCount: 5\n \nContains(&quot;Deinonychus&quot;): true\n \nInsert(2, &quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \ndinosaurs[3]: Mamenchisaurus\n \nRemove(&quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nTrimExcess()\nCapacity: 5\nCount: 5\n \nClear()\nCapacity: 5\nCount: 0\n    *)\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Deinonychus&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Deinonychus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        dinosaurs.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 0\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;Capacity: 8\n&#39;Count: 5\n&#39;\n&#39;Contains(&quot;Deinonychus&quot;): True\n&#39;\n&#39;Insert(2, &quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Compsognathus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;dinosaurs(3): Mamenchisaurus\n&#39;\n&#39;Remove(&quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;TrimExcess()\n&#39;Capacity: 5\n&#39;Count: 5\n&#39;\n&#39;Clear()\n&#39;Capacity: 5\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_InsertRange_System_Int32_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_InsertRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InsertRange(Int32,IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the elements of a collection into the <span class=\"xref\">stem.Collections.Generic.List`1</span> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which the new elements should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>collection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection whose elements should be inserted into the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The collection itself cannot be <code>null</code>, but it can contain elements that are <code>null</code>, if type <code>T</code> is a reference type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>collection</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> If the new <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> (the current <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> plus the size of the collection) will be greater than <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>, the elements are added to the end of <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> The order of the elements in the collection is preserved in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements to be added and <code>m</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates InsertRange method and various other methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class that act on ranges. After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the InsertRange method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_Ranges#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim input() As String = { &quot;Brachiosaurus&quot;, _\n                                  &quot;Amargasaurus&quot;, _\n                                  &quot;Mamenchisaurus&quot; }\n\n        Dim dinosaurs As New List(Of String)(input)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;AddRange(dinosaurs)&quot;)\n        dinosaurs.AddRange(dinosaurs)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveRange(2, 2)&quot;)\n        dinosaurs.RemoveRange(2, 2)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        input = New String() { &quot;Tyrannosaurus&quot;, _\n                               &quot;Deinonychus&quot;, _\n                               &quot;Velociraptor&quot; }\n\n        Console.WriteLine(vbLf &amp; &quot;InsertRange(3, input)&quot;)\n        dinosaurs.InsertRange(3, input)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;output = dinosaurs.GetRange(2, 3).ToArray&quot;)\n        Dim output() As String = dinosaurs.GetRange(2, 3).ToArray()\n        \n        Console.WriteLine()\n        For Each dinosaur As String In output\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 3\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;AddRange(dinosaurs)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;RemoveRange(2, 2)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;InsertRange(3, input)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n&#39;Velociraptor\n&#39;Mamenchisaurus\n&#39;\n&#39;output = dinosaurs.GetRange(2, 3).ToArray\n&#39;\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_Ranges#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    array&lt;String^&gt;^ input = { &quot;Brachiosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Mamenchisaurus&quot; };\n\n    List&lt;String^&gt;^ dinosaurs = \n        gcnew List&lt;String^&gt;((IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n    dinosaurs-&gt;AddRange(dinosaurs);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n    dinosaurs-&gt;RemoveRange(2, 2);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    input = gcnew array&lt;String^&gt; { &quot;Tyrannosaurus&quot;, \n                                   &quot;Deinonychus&quot;, \n                                   &quot;Velociraptor&quot;};\n\n    Console::WriteLine(&quot;<br>InsertRange(3, (IEnumerable&lt;String^&gt;^) input)&quot;);\n    dinosaurs-&gt;InsertRange(3, (IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()&quot;);\n    array&lt;String^&gt;^ output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray();\n        \n    Console::WriteLine();\n    for each(String^ dinosaur in output )\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, (IEnumerable&lt;String^&gt;^) input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Ranges#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] input = { &quot;Brachiosaurus&quot;, \n                           &quot;Amargasaurus&quot;, \n                           &quot;Mamenchisaurus&quot; };\n\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;(input);\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n        dinosaurs.AddRange(dinosaurs);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n        dinosaurs.RemoveRange(2, 2);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        input = new string[] { &quot;Tyrannosaurus&quot;, \n                               &quot;Deinonychus&quot;, \n                               &quot;Velociraptor&quot;};\n\n        Console.WriteLine(&quot;<br>InsertRange(3, input)&quot;);\n        dinosaurs.InsertRange(3, input);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>output = dinosaurs.GetRange(2, 3).ToArray()&quot;);\n        string[] output = dinosaurs.GetRange(2, 3).ToArray();\n        \n        Console.WriteLine();\n        foreach( string dinosaur in output )\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs.GetRange(2, 3).ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_LastIndexOf__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(T)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>item</code> within the entire the <span class=\"xref\">stem.Collections.Generic.List`1</span>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched backward starting at the last element and ending at the first element.  </p>\n<p> This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The LastIndexOf method overload searches the entire list from the end, and finds the second occurrence of the string. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf__0_System_Int32_\" data-linktype=\"relative-path\">LastIndexOf(T,Int32)</a> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf__0_System_Int32_System_Int32_\" data-linktype=\"relative-path\">LastIndexOf(T,Int32,Int32)</a> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns â€“1 because there are no instances of the search string in that range.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_LastIndexOf#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 4, 4): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;): 5\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_LastIndexOf#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nLastIndexOf(&quot;Tyrannosaurus&quot;): 5\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_LastIndexOf#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nLastIndexOf(&quot;Tyrannosaurus&quot;): 5\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_LastIndexOf__0_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(T,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the first element to the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (T item, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that extends from the first element to <code>index</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched backward starting at <code>index</code> and ending at the first element.  </p>\n<p> This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from the beginning of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> to <code>index</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf__0_\" data-linktype=\"relative-path\">LastIndexOf(T)</a> method overload searches the entire list from the end, and finds the second occurrence of the string. The LastIndexOf method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf__0_System_Int32_System_Int32_\" data-linktype=\"relative-path\">LastIndexOf(T,Int32,Int32)</a> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns â€“1 because there are no instances of the search string in that range.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_LastIndexOf#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 4, 4): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;): 5\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_LastIndexOf#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nLastIndexOf(&quot;Tyrannosaurus&quot;): 5\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_LastIndexOf#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nLastIndexOf(&quot;Tyrannosaurus&quot;): 5\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_LastIndexOf__0_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(T,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that contains the specified number of elements and ends at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (T item, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span> that contains <code>count</code> number of elements and ends at <code>index</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the <span class=\"xref\">stem.Collections.Generic.List`1</span>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not specify a valid section in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> is searched backward starting at <code>index</code> and ending at <code>index</code> minus <code>count</code> plus 1, if <code>count</code> is greater than 0.  </p>\n<p> This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf__0_\" data-linktype=\"relative-path\">LastIndexOf(T)</a> method overload searches the entire list from the end, and finds the second occurrence of the string. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf__0_System_Int32_\" data-linktype=\"relative-path\">LastIndexOf(T,Int32)</a> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the LastIndexOf method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns â€“1 because there are no instances of the search string in that range.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_LastIndexOf#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Brachiosaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;LastIndexOf(&quot;&quot;Tyrannosaurus&quot;&quot;, 4, 4): {0}&quot;, _\n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;): 5\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n&#39;\n&#39;LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_LastIndexOf#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Brachiosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n        dinosaurs-&gt;LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nLastIndexOf(&quot;Tyrannosaurus&quot;): 5\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_LastIndexOf#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Brachiosaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(&quot;<br>LastIndexOf(\\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n            dinosaurs.LastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nLastIndexOf(&quot;Tyrannosaurus&quot;): 5\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 3): 0\n\nLastIndexOf(&quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Remove__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(T)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Remove (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to remove from the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> is successfully removed; otherwise, <code>false</code>.  This method also returns <code>false</code> if <code>item</code> was not found in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If type <code>T</code> implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> generic interface, the equality comparer is the <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method of that interface; otherwise, the default equality comparer is <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to add, remove, and insert a simple business object in a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify the type of part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt;\n    {\n        public string PartName { get; set; }\n       \n        public int PartId { get; set; }\n\n        public override string ToString()\n        {\n            return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n        }\n        public override bool Equals(object obj)\n        {\n            if (obj == null) return false;\n            Part objAsPart = obj as Part;\n            if (objAsPart == null) return false;\n            else return Equals(objAsPart);\n        }\n        public override int GetHashCode()\n        {\n            return PartId;\n        }\n        public bool Equals(Part other)\n        {\n            if (other == null) return false;\n            return (this.PartId.Equals(other.PartId));\n        }\n    // Should also override == and != operators.\n\n    }\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() {PartName=&quot;crank arm&quot;, PartId=1234});\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 });\n\n        // Write out the parts in the list. This will call the overridden ToString method\n        // in the Part class.\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n      \n        // Check the list for part #1734. This calls the IEquitable.Equals method\n        // of the Part class, which checks the PartId for equality.\n        Console.WriteLine(&quot;<br>Contains(\\&quot;1734\\&quot;): {0}&quot;,\n        parts.Contains(new Part {PartId=1734, PartName=&quot;&quot; }));\n\n        // Insert a new item at position 2.\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;1834\\&quot;)&quot;);\n        parts.Insert(2, new Part() { PartName = &quot;brake lever&quot;, PartId = 1834 });\n\n        \n        //Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        Console.WriteLine(&quot;<br>Parts[3]: {0}&quot;, parts[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;1534\\&quot;)&quot;);\n\n        // This will remove part 1534 even though the PartName is different,\n        // because the Equals method only checks PartId for equality.\n        parts.Remove(new Part(){PartId=1534, PartName=&quot;cogs&quot;});\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n        Console.WriteLine(&quot;<br>RemoveAt(3)&quot;);\n        // This will remove the part at index 3.\n        parts.RemoveAt(3);\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n            /*\n  \n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1534   Name: cassette\n             ID: 1634   Name: shift lever\n\n             Contains(&quot;1734&quot;): False\n\n             Insert(2, &quot;1834&quot;)\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1534   Name: cassette\n             ID: 1634   Name: shift lever\n\n             Parts[3]: ID: 1434   Name: regular seat\n\n             Remove(&quot;1534&quot;)\n\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1634   Name: shift lever\n\n             RemoveAt(3)\n\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1444   Name: banana seat\n             ID: 1634   Name: shift lever\n\n\n         */\n\n    }\n}\n</code></pre><pre><code class=\"lang-fs\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">\n// Simple business object. A PartId is used to identify the type of part  \n// but the part name can change.  \n[&lt;CustomEquality; NoComparison&gt;]\ntype Part = { PartId : int ; mutable PartName : string } with\n    override this.GetHashCode() = hash this.PartId\n    override this.Equals(other) =\n        match other with\n        | :? Part as p -&gt; this.PartId = p.PartId\n        | _ -&gt; false\n    override this.ToString() = sprintf &quot;ID: %i   Name: %s&quot; this.PartId this.PartName\n\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflicts with the F# List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let parts = ResizeArray&lt;_&gt;()\n    parts.Add({PartName = &quot;crank arm&quot; ; PartId = 1234})\n    parts.Add({PartName = &quot;chain ring&quot;; PartId = 1334 })\n    parts.Add({PartName = &quot;regular seat&quot;; PartId = 1434 })\n    parts.Add({PartName = &quot;banana seat&quot;; PartId = 1444 })\n    parts.Add({PartName = &quot;cassette&quot;; PartId = 1534 })\n    parts.Add({PartName = &quot;shift lever&quot;; PartId = 1634 })\n\n    // Write out the parts in the ResizeArray.  This will call the overridden ToString method\n    // in the Part type\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    // Check the ResizeArray for part #1734. This calls the IEquatable.Equals method \n    // of the Part type, which checks the PartId for equality.    \n    printfn &quot;<br>Contains(\\&quot;1734\\&quot;): %b&quot; (parts.Contains({PartId=1734; PartName=&quot;&quot;}))\n    \n    // Insert a new item at position 2.\n    printfn &quot;<br>Insert(2, \\&quot;1834\\&quot;)&quot;\n    parts.Insert(2, { PartName = &quot;brake lever&quot;; PartId = 1834 })\n\n    // Write out all parts\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    printfn &quot;<br>Parts[3]: %O&quot; parts.[3]\n\n    printfn &quot;<br>Remove(\\&quot;1534\\&quot;)&quot;\n    // This will remove part 1534 even though the PartName is different, \n    // because the Equals method only checks PartId for equality.\n    // Since Remove returns true or false, we need to ignore the result\n    parts.Remove({PartId=1534; PartName=&quot;cogs&quot;}) |&gt; ignore\n\n    // Write out all parts\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    printfn &quot;<br>RemoveAt(3)&quot;\n    // This will remove the part at index 3.\n    parts.RemoveAt(3)\n\n    // Write out all parts\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    0 // return an integer exit code\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify the type of part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean _\n        Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        &#39; Write out the parts in the list. This will call the overridden ToString method\n        &#39; in the Part class.\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Check the list for part #1734. This calls the IEquitable.Equals method\n        &#39; of the Part class, which checks the PartId for equality.\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;1734&quot;&quot;): {0}&quot;, parts.Contains(New Part() With { _\n             .PartId = 1734, _\n             .PartName = &quot;&quot; _\n        }))\n\n        &#39; Insert a new item at position 2.\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;1834&quot;&quot;)&quot;)\n        parts.Insert(2, New Part() With { _\n             .PartName = &quot;brake lever&quot;, _\n             .PartId = 1834 _\n        })\n\n\n        &#39;Console.WriteLine();\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Parts[3]: {0}&quot;, parts(3))\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;1534&quot;&quot;)&quot;)\n\n        &#39; This will remove part 1534 even though the PartName is different,\n        &#39; because the Equals method only checks PartId for equality.\n        parts.Remove(New Part() With { _\n             .PartId = 1534, _\n             .PartName = &quot;cogs&quot; _\n        })\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(3)&quot;)\n        &#39; This will remove part at index 3.\n        parts.RemoveAt(3)\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n    End Sub\n    &#39;\n    &#39;        This example code produces the following output:\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1534   Name: cassette\n    &#39;        ID: 1634   Name: shift lever\n    &#39;\n    &#39;        Contains(&quot;1734&quot;): False\n    &#39;\n    &#39;        Insert(2, &quot;1834&quot;)\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1534   Name: cassette\n    &#39;        ID: 1634   Name: shift lever\n    &#39;\n    &#39;        Parts[3]: ID: 1434   Name: regular seat\n    &#39;\n    &#39;        Remove(&quot;1534&quot;)\n    &#39;\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1634   Name: shift lever\n    &#39;   &#39;\n    &#39;        RemoveAt(3)\n    &#39;\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1634   Name: shift lever\n    &#39;        \n\nEnd Class\n</code></pre><p> The following example demonstrates Remove method. Several properties and methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> generic class are used to add, insert, and search the list. After these operations, the list contains a duplicate. The Remove method is used to remove the first instance of the duplicate item, and the contents are displayed. The Remove method always removes the first instance it encounters.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Class#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    Console::WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n        dinosaurs-&gt;Contains(&quot;Deinonychus&quot;));\n\n    Console::WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Insert(2, &quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n    Console::WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Remove(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;TrimExcess();\n    Console::WriteLine(&quot;<br>TrimExcess()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    dinosaurs-&gt;Clear();\n    Console::WriteLine(&quot;<br>Clear()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n            dinosaurs.Contains(&quot;Deinonychus&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-fs\" name=\"List`1_Class#1\">\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflict with the List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let dinosaurs = ResizeArray&lt;_&gt;()\n \n    // Write out the dinosaurs in the ResizeArray.\n    let printDinosaurs() =\n        printfn &quot;&quot;\n        dinosaurs |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p) \n \n    \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n \n    dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n    dinosaurs.Add(&quot;Amargasaurus&quot;)\n    dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n    dinosaurs.Add(&quot;Deinonychus&quot;)\n    dinosaurs.Add(&quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    printfn &quot;<br>Contains(\\&quot;Deinonychus\\&quot;): %b&quot; (dinosaurs.Contains(&quot;Deinonychus&quot;))\n \n    printfn &quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    // Shows accessing the list using the Item property.\n    printfn &quot;<br>dinosaurs[3]: %s&quot; dinosaurs.[3]\n \n    printfn &quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Remove(&quot;Compsognathus&quot;) |&gt; ignore\n \n    printDinosaurs()\n \n    dinosaurs.TrimExcess()\n    printfn &quot;<br>TrimExcess()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    dinosaurs.Clear()\n    printfn &quot;<br>Clear()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    0 // return an integer exit code\n \n    (* This code example produces the following output:\n \nCapacity: 0\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nCapacity: 8\nCount: 5\n \nContains(&quot;Deinonychus&quot;): true\n \nInsert(2, &quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \ndinosaurs[3]: Mamenchisaurus\n \nRemove(&quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nTrimExcess()\nCapacity: 5\nCount: 5\n \nClear()\nCapacity: 5\nCount: 0\n    *)\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Deinonychus&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Deinonychus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        dinosaurs.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 0\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;Capacity: 8\n&#39;Count: 5\n&#39;\n&#39;Contains(&quot;Deinonychus&quot;): True\n&#39;\n&#39;Insert(2, &quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Compsognathus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;dinosaurs(3): Mamenchisaurus\n&#39;\n&#39;Remove(&quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;TrimExcess()\n&#39;Capacity: 5\n&#39;Count: 5\n&#39;\n&#39;Clear()\n&#39;Capacity: 5\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_RemoveAll_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_RemoveAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAll(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all the elements that match the conditions defined by the specified predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RemoveAll (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the elements to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements removed from the <span class=\"xref\">stem.Collections.Generic.List`1</span> .</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate, and the elements that match the conditions are removed from the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the RemoveAll method and several other methods that use the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> generic delegate.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Find_\" data-linktype=\"relative-path\">Find</a>, <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindLast_\" data-linktype=\"relative-path\">FindLast</a>, and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindAll_\" data-linktype=\"relative-path\">FindAll</a> methods are used to search the list with the search predicate method.  </p>\n<p> The RemoveAll method is used to remove all entries ending with &quot;saurus&quot;. It traverses the list from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The element is removed if the <code>EndsWithSaurus</code> method returns <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context, and create it automatically.  </p>\n</div>\n<p> Finally, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Exists_\" data-linktype=\"relative-path\">Exists</a> method verifies that there are no strings in the list that end with &quot;saurus&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"List`1_FindEtAl#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Oviraptor&quot;);\n        dinosaurs.Add(&quot;Velociraptor&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Dilophosaurus&quot;);\n        dinosaurs.Add(&quot;Gallimimus&quot;);\n        dinosaurs.Add(&quot;Triceratops&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>TrueForAll(EndsWithSaurus): {0}&quot;,\n            dinosaurs.TrueForAll(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>Find(EndsWithSaurus): {0}&quot;, \n            dinosaurs.Find(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>FindLast(EndsWithSaurus): {0}&quot;,\n            dinosaurs.FindLast(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>FindAll(EndsWithSaurus):&quot;);\n        List&lt;string&gt; sublist = dinosaurs.FindAll(EndsWithSaurus);\n\n        foreach(string dinosaur in sublist)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>{0} elements removed by RemoveAll(EndsWithSaurus).&quot;, \n            dinosaurs.RemoveAll(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>List now contains:&quot;);\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Exists(EndsWithSaurus): {0}&quot;, \n            dinosaurs.Exists(EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        return s.ToLower().EndsWith(&quot;saurus&quot;);\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nTrueForAll(EndsWithSaurus): False\n\nFind(EndsWithSaurus): Amargasaurus\n\nFindLast(EndsWithSaurus): Dilophosaurus\n\nFindAll(EndsWithSaurus):\nAmargasaurus\nDilophosaurus\n\n2 elements removed by RemoveAll(EndsWithSaurus).\n\nList now contains:\nCompsognathus\nOviraptor\nVelociraptor\nDeinonychus\nGallimimus\nTriceratops\n\nExists(EndsWithSaurus): False\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_FindEtAl#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    return s-&gt;ToLower()-&gt;EndsWith(&quot;saurus&quot;);\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Oviraptor&quot;);\n    dinosaurs-&gt;Add(&quot;Velociraptor&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Dilophosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Gallimimus&quot;);\n    dinosaurs-&gt;Add(&quot;Triceratops&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>TrueForAll(EndsWithSaurus): {0}&quot;,\n        dinosaurs-&gt;TrueForAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Find(EndsWithSaurus): {0}&quot;, \n        dinosaurs-&gt;Find(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>FindLast(EndsWithSaurus): {0}&quot;,\n        dinosaurs-&gt;FindLast(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>FindAll(EndsWithSaurus):&quot;);\n    List&lt;String^&gt;^ sublist = \n        dinosaurs-&gt;FindAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus));\n\n    for each(String^ dinosaur in sublist)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(\n        &quot;<br>{0} elements removed by RemoveAll(EndsWithSaurus).&quot;, \n        dinosaurs-&gt;RemoveAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>List now contains:&quot;);\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Exists(EndsWithSaurus): {0}&quot;, \n        dinosaurs-&gt;Exists(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nTrueForAll(EndsWithSaurus): False\n\nFind(EndsWithSaurus): Amargasaurus\n\nFindLast(EndsWithSaurus): Dilophosaurus\n\nFindAll(EndsWithSaurus):\nAmargasaurus\nDilophosaurus\n\n2 elements removed by RemoveAll(EndsWithSaurus).\n\nList now contains:\nCompsognathus\nOviraptor\nVelociraptor\nDeinonychus\nGallimimus\nTriceratops\n\nExists(EndsWithSaurus): False\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_FindEtAl#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Oviraptor&quot;)\n        dinosaurs.Add(&quot;Velociraptor&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Dilophosaurus&quot;)\n        dinosaurs.Add(&quot;Gallimimus&quot;)\n        dinosaurs.Add(&quot;Triceratops&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;TrueForAll(AddressOf EndsWithSaurus: {0}&quot;, _\n            dinosaurs.TrueForAll(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Find(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.Find(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;FindLast(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.FindLast(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;FindAll(AddressOf EndsWithSaurus):&quot;)\n        Dim sublist As List(Of String) = _\n            dinosaurs.FindAll(AddressOf EndsWithSaurus)\n\n        For Each dinosaur As String In sublist\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;{0} elements removed by RemoveAll(AddressOf EndsWithSaurus).&quot;, _\n            dinosaurs.RemoveAll(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; &quot;List now contains:&quot;)\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Exists(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.Exists(AddressOf EndsWithSaurus))\n        \n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        Return s.ToLower().EndsWith(&quot;saurus&quot;)\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;TrueForAll(AddressOf EndsWithSaurus: False\n&#39;\n&#39;Find(AddressOf EndsWithSaurus): Amargasaurus\n&#39;\n&#39;FindLast(AddressOf EndsWithSaurus): Dilophosaurus\n&#39;\n&#39;FindAll(AddressOf EndsWithSaurus):\n&#39;Amargasaurus\n&#39;Dilophosaurus\n&#39;\n&#39;2 elements removed by RemoveAll(AddressOf EndsWithSaurus).\n&#39;\n&#39;List now contains:\n&#39;Compsognathus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Exists(AddressOf EndsWithSaurus): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element at the specified index of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.Generic.List`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you call RemoveAt to remove an item, the remaining items in the list are renumbered to replace the removed item. For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position. In addition, the number of items in the list (as represented by the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> property) is reduced by 1.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is (<a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> - <code>index</code>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to add, remove, and insert a simple business object in a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify the type of part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt;\n    {\n        public string PartName { get; set; }\n       \n        public int PartId { get; set; }\n\n        public override string ToString()\n        {\n            return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n        }\n        public override bool Equals(object obj)\n        {\n            if (obj == null) return false;\n            Part objAsPart = obj as Part;\n            if (objAsPart == null) return false;\n            else return Equals(objAsPart);\n        }\n        public override int GetHashCode()\n        {\n            return PartId;\n        }\n        public bool Equals(Part other)\n        {\n            if (other == null) return false;\n            return (this.PartId.Equals(other.PartId));\n        }\n    // Should also override == and != operators.\n\n    }\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() {PartName=&quot;crank arm&quot;, PartId=1234});\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 });\n\n        // Write out the parts in the list. This will call the overridden ToString method\n        // in the Part class.\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n      \n        // Check the list for part #1734. This calls the IEquitable.Equals method\n        // of the Part class, which checks the PartId for equality.\n        Console.WriteLine(&quot;<br>Contains(\\&quot;1734\\&quot;): {0}&quot;,\n        parts.Contains(new Part {PartId=1734, PartName=&quot;&quot; }));\n\n        // Insert a new item at position 2.\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;1834\\&quot;)&quot;);\n        parts.Insert(2, new Part() { PartName = &quot;brake lever&quot;, PartId = 1834 });\n\n        \n        //Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        Console.WriteLine(&quot;<br>Parts[3]: {0}&quot;, parts[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;1534\\&quot;)&quot;);\n\n        // This will remove part 1534 even though the PartName is different,\n        // because the Equals method only checks PartId for equality.\n        parts.Remove(new Part(){PartId=1534, PartName=&quot;cogs&quot;});\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n        Console.WriteLine(&quot;<br>RemoveAt(3)&quot;);\n        // This will remove the part at index 3.\n        parts.RemoveAt(3);\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n            /*\n  \n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1534   Name: cassette\n             ID: 1634   Name: shift lever\n\n             Contains(&quot;1734&quot;): False\n\n             Insert(2, &quot;1834&quot;)\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1534   Name: cassette\n             ID: 1634   Name: shift lever\n\n             Parts[3]: ID: 1434   Name: regular seat\n\n             Remove(&quot;1534&quot;)\n\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1434   Name: regular seat\n             ID: 1444   Name: banana seat\n             ID: 1634   Name: shift lever\n\n             RemoveAt(3)\n\n             ID: 1234   Name: crank arm\n             ID: 1334   Name: chain ring\n             ID: 1834   Name: brake lever\n             ID: 1444   Name: banana seat\n             ID: 1634   Name: shift lever\n\n\n         */\n\n    }\n}\n</code></pre><pre><code class=\"lang-fs\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">\n// Simple business object. A PartId is used to identify the type of part  \n// but the part name can change.  \n[&lt;CustomEquality; NoComparison&gt;]\ntype Part = { PartId : int ; mutable PartName : string } with\n    override this.GetHashCode() = hash this.PartId\n    override this.Equals(other) =\n        match other with\n        | :? Part as p -&gt; this.PartId = p.PartId\n        | _ -&gt; false\n    override this.ToString() = sprintf &quot;ID: %i   Name: %s&quot; this.PartId this.PartName\n\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflicts with the F# List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let parts = ResizeArray&lt;_&gt;()\n    parts.Add({PartName = &quot;crank arm&quot; ; PartId = 1234})\n    parts.Add({PartName = &quot;chain ring&quot;; PartId = 1334 })\n    parts.Add({PartName = &quot;regular seat&quot;; PartId = 1434 })\n    parts.Add({PartName = &quot;banana seat&quot;; PartId = 1444 })\n    parts.Add({PartName = &quot;cassette&quot;; PartId = 1534 })\n    parts.Add({PartName = &quot;shift lever&quot;; PartId = 1634 })\n\n    // Write out the parts in the ResizeArray.  This will call the overridden ToString method\n    // in the Part type\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    // Check the ResizeArray for part #1734. This calls the IEquatable.Equals method \n    // of the Part type, which checks the PartId for equality.    \n    printfn &quot;<br>Contains(\\&quot;1734\\&quot;): %b&quot; (parts.Contains({PartId=1734; PartName=&quot;&quot;}))\n    \n    // Insert a new item at position 2.\n    printfn &quot;<br>Insert(2, \\&quot;1834\\&quot;)&quot;\n    parts.Insert(2, { PartName = &quot;brake lever&quot;; PartId = 1834 })\n\n    // Write out all parts\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    printfn &quot;<br>Parts[3]: %O&quot; parts.[3]\n\n    printfn &quot;<br>Remove(\\&quot;1534\\&quot;)&quot;\n    // This will remove part 1534 even though the PartName is different, \n    // because the Equals method only checks PartId for equality.\n    // Since Remove returns true or false, we need to ignore the result\n    parts.Remove({PartId=1534; PartName=&quot;cogs&quot;}) |&gt; ignore\n\n    // Write out all parts\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    printfn &quot;<br>RemoveAt(3)&quot;\n    // This will remove the part at index 3.\n    parts.RemoveAt(3)\n\n    // Write out all parts\n    printfn &quot;&quot;\n    parts |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p)\n\n    0 // return an integer exit code\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.AddRemoveInsert#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify the type of part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean _\n        Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        &#39; Write out the parts in the list. This will call the overridden ToString method\n        &#39; in the Part class.\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Check the list for part #1734. This calls the IEquitable.Equals method\n        &#39; of the Part class, which checks the PartId for equality.\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;1734&quot;&quot;): {0}&quot;, parts.Contains(New Part() With { _\n             .PartId = 1734, _\n             .PartName = &quot;&quot; _\n        }))\n\n        &#39; Insert a new item at position 2.\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;1834&quot;&quot;)&quot;)\n        parts.Insert(2, New Part() With { _\n             .PartName = &quot;brake lever&quot;, _\n             .PartId = 1834 _\n        })\n\n\n        &#39;Console.WriteLine();\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Parts[3]: {0}&quot;, parts(3))\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;1534&quot;&quot;)&quot;)\n\n        &#39; This will remove part 1534 even though the PartName is different,\n        &#39; because the Equals method only checks PartId for equality.\n        parts.Remove(New Part() With { _\n             .PartId = 1534, _\n             .PartName = &quot;cogs&quot; _\n        })\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(3)&quot;)\n        &#39; This will remove part at index 3.\n        parts.RemoveAt(3)\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n    End Sub\n    &#39;\n    &#39;        This example code produces the following output:\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1534   Name: cassette\n    &#39;        ID: 1634   Name: shift lever\n    &#39;\n    &#39;        Contains(&quot;1734&quot;): False\n    &#39;\n    &#39;        Insert(2, &quot;1834&quot;)\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1534   Name: cassette\n    &#39;        ID: 1634   Name: shift lever\n    &#39;\n    &#39;        Parts[3]: ID: 1434   Name: regular seat\n    &#39;\n    &#39;        Remove(&quot;1534&quot;)\n    &#39;\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1434   Name: regular seat\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1634   Name: shift lever\n    &#39;   &#39;\n    &#39;        RemoveAt(3)\n    &#39;\n    &#39;        ID: 1234   Name: crank arm\n    &#39;        ID: 1334   Name: chain ring\n    &#39;        ID: 1834   Name: brake lever\n    &#39;        ID: 1444   Name: banana seat\n    &#39;        ID: 1634   Name: shift lever\n    &#39;        \n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_RemoveRange_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_RemoveRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveRange(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes a range of elements from the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveRange (int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the range of elements to remove.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not denote a valid range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The items are removed and all the elements following them in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> have their indexes reduced by <code>count</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the RemoveRange method and various other methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class that act on ranges. After the list has been created and modified, the RemoveRange method is used to remove two elements from the list, beginning at index location 2.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_Ranges#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim input() As String = { &quot;Brachiosaurus&quot;, _\n                                  &quot;Amargasaurus&quot;, _\n                                  &quot;Mamenchisaurus&quot; }\n\n        Dim dinosaurs As New List(Of String)(input)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;AddRange(dinosaurs)&quot;)\n        dinosaurs.AddRange(dinosaurs)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveRange(2, 2)&quot;)\n        dinosaurs.RemoveRange(2, 2)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        input = New String() { &quot;Tyrannosaurus&quot;, _\n                               &quot;Deinonychus&quot;, _\n                               &quot;Velociraptor&quot; }\n\n        Console.WriteLine(vbLf &amp; &quot;InsertRange(3, input)&quot;)\n        dinosaurs.InsertRange(3, input)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;output = dinosaurs.GetRange(2, 3).ToArray&quot;)\n        Dim output() As String = dinosaurs.GetRange(2, 3).ToArray()\n        \n        Console.WriteLine()\n        For Each dinosaur As String In output\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 3\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;AddRange(dinosaurs)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;RemoveRange(2, 2)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;InsertRange(3, input)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n&#39;Velociraptor\n&#39;Mamenchisaurus\n&#39;\n&#39;output = dinosaurs.GetRange(2, 3).ToArray\n&#39;\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_Ranges#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    array&lt;String^&gt;^ input = { &quot;Brachiosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Mamenchisaurus&quot; };\n\n    List&lt;String^&gt;^ dinosaurs = \n        gcnew List&lt;String^&gt;((IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n    dinosaurs-&gt;AddRange(dinosaurs);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n    dinosaurs-&gt;RemoveRange(2, 2);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    input = gcnew array&lt;String^&gt; { &quot;Tyrannosaurus&quot;, \n                                   &quot;Deinonychus&quot;, \n                                   &quot;Velociraptor&quot;};\n\n    Console::WriteLine(&quot;<br>InsertRange(3, (IEnumerable&lt;String^&gt;^) input)&quot;);\n    dinosaurs-&gt;InsertRange(3, (IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()&quot;);\n    array&lt;String^&gt;^ output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray();\n        \n    Console::WriteLine();\n    for each(String^ dinosaur in output )\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, (IEnumerable&lt;String^&gt;^) input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Ranges#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] input = { &quot;Brachiosaurus&quot;, \n                           &quot;Amargasaurus&quot;, \n                           &quot;Mamenchisaurus&quot; };\n\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;(input);\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n        dinosaurs.AddRange(dinosaurs);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n        dinosaurs.RemoveRange(2, 2);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        input = new string[] { &quot;Tyrannosaurus&quot;, \n                               &quot;Deinonychus&quot;, \n                               &quot;Velociraptor&quot;};\n\n        Console.WriteLine(&quot;<br>InsertRange(3, input)&quot;);\n        dinosaurs.InsertRange(3, input);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>output = dinosaurs.GetRange(2, 3).ToArray()&quot;);\n        string[] output = dinosaurs.GetRange(2, 3).ToArray();\n        \n        Console.WriteLine();\n        foreach( string dinosaur in output )\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs.GetRange(2, 3).ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Reverse\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Reverse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reverse()</div>        \r\n          </div>\r\n    \r\n            <p>Reverses the order of the elements in the entire <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Reverse ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Reverse_\" data-linktype=\"relative-path\">Reverse</a> to reverse the order of the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates both overloads of the Reverse method. The example creates a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings and adds six strings. The Reverse method overload is used to reverse the list, and then the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Reverse_System_Int32_System_Int32_\" data-linktype=\"relative-path\">Reverse(Int32,Int32)</a> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Reverse#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Parasauralophus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Coelophysis&quot;);\n    dinosaurs-&gt;Add(&quot;Oviraptor&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;Reverse();\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;Reverse(1, 4);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nParasauralophus\nMamenchisaurus\nAmargasaurus\nCoelophysis\nOviraptor\n\nOviraptor\nCoelophysis\nAmargasaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\n\nOviraptor\nParasauralophus\nMamenchisaurus\nAmargasaurus\nCoelophysis\nPachycephalosaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Reverse#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Parasauralophus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Coelophysis&quot;)\n        dinosaurs.Add(&quot;Oviraptor&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.Reverse()\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.Reverse(1, 4)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Parasauralophus\n&#39;Mamenchisaurus\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Oviraptor\n&#39;\n&#39;Oviraptor\n&#39;Coelophysis\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Parasauralophus\n&#39;Pachycephalosaurus\n&#39;\n&#39;Oviraptor\n&#39;Parasauralophus\n&#39;Mamenchisaurus\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Pachycephalosaurus\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Reverse#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Parasauralophus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Coelophysis&quot;);\n        dinosaurs.Add(&quot;Oviraptor&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.Reverse();\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.Reverse(1, 4);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nParasauralophus\nMamenchisaurus\nAmargasaurus\nCoelophysis\nOviraptor\n\nOviraptor\nCoelophysis\nAmargasaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\n\nOviraptor\nParasauralophus\nMamenchisaurus\nAmargasaurus\nCoelophysis\nPachycephalosaurus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Reverse_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Reverse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reverse(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reverses the order of the elements in the specified range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Reverse (int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the range to reverse.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to reverse.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not denote a valid range of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Reverse_\" data-linktype=\"relative-path\">Reverse</a> to reverse the order of the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates both overloads of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Reverse_\" data-linktype=\"relative-path\">Reverse</a> method. The example creates a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings and adds six strings. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Reverse\" data-linktype=\"relative-path\">Reverse()</a> method overload is used to reverse the list, and then the Reverse method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Reverse#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Parasauralophus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Coelophysis&quot;);\n    dinosaurs-&gt;Add(&quot;Oviraptor&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;Reverse();\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;Reverse(1, 4);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nParasauralophus\nMamenchisaurus\nAmargasaurus\nCoelophysis\nOviraptor\n\nOviraptor\nCoelophysis\nAmargasaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\n\nOviraptor\nParasauralophus\nMamenchisaurus\nAmargasaurus\nCoelophysis\nPachycephalosaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Reverse#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Parasauralophus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Coelophysis&quot;)\n        dinosaurs.Add(&quot;Oviraptor&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.Reverse()\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.Reverse(1, 4)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Parasauralophus\n&#39;Mamenchisaurus\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Oviraptor\n&#39;\n&#39;Oviraptor\n&#39;Coelophysis\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Parasauralophus\n&#39;Pachycephalosaurus\n&#39;\n&#39;Oviraptor\n&#39;Parasauralophus\n&#39;Mamenchisaurus\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Pachycephalosaurus\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Reverse#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Parasauralophus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Coelophysis&quot;);\n        dinosaurs.Add(&quot;Oviraptor&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.Reverse();\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.Reverse(1, 4);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nParasauralophus\nMamenchisaurus\nAmargasaurus\nCoelophysis\nOviraptor\n\nOviraptor\nCoelophysis\nAmargasaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\n\nOviraptor\nParasauralophus\nMamenchisaurus\nAmargasaurus\nCoelophysis\nPachycephalosaurus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Sort\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort()</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> using the default comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Sort ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span> cannot find an implementation of the <span class=\"xref\">stem.IComparable`1</span> generic interface or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for type <code>T</code> to determine the order of list elements. The <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> property checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  If type <code>T</code> does not implement either interface, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> This method uses the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method, which applies the introspective sort as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * LogN, where <em>N</em> is the range of the input array, it uses a Heapsort algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a Quicksort algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>On average, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>; in the worst case it is an O(<code>n</code> ^ 2) operation.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds some names to a <code>List&lt;String&gt;</code> object, displays the list in unsorted order, calls the Sort method, and then displays the sorted list.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.Sort#2\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] names = { &quot;Samuel&quot;, &quot;Dakota&quot;, &quot;Koani&quot;, &quot;Saya&quot;, &quot;Vanya&quot;,\n                         &quot;Yiska&quot;, &quot;Yuma&quot;, &quot;Jody&quot;, &quot;Nikita&quot; };\n      var nameList = new List&lt;String&gt;();\n      nameList.AddRange(names);\n      Console.WriteLine(&quot;List in unsorted order: &quot;);\n      foreach (var name in nameList)\n         Console.Write(&quot;   {0}&quot;, name);\n\n      Console.WriteLine(Environment.NewLine);\n\n      nameList.Sort();\n      Console.WriteLine(&quot;List in sorted order: &quot;);\n      foreach (var name in nameList)\n         Console.Write(&quot;   {0}&quot;, name);\n\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    List in unsorted order:\n//       Samuel   Dakota   Koani   Saya   Vanya   Yiska   Yuma   Jody   Nikita\n//\n//    List in sorted order:\n//       Dakota   Jody   Koani   Nikita   Samuel   Saya   Vanya   Yiska   Yuma\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.Sort#2\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim names() As String = { &quot;Samuel&quot;, &quot;Dakota&quot;, &quot;Koani&quot;, &quot;Saya&quot;,\n                                &quot;Vanya&quot;, &quot;Yiska&quot;, &quot;Yuma&quot;, &quot;Jody&quot;,\n                                &quot;Nikita&quot; }\n      Dim nameList As New List(Of String)()\n      nameList.AddRange(names)\n      Console.WriteLine(&quot;List in unsorted order: &quot;)\n      For Each name In nameList\n         Console.Write(&quot;   {0}&quot;, name)\n      Next\n      Console.WriteLine(vbCrLf)\n\n      nameList.Sort()\n      Console.WriteLine(&quot;List in sorted order: &quot;)\n      For Each name In nameList\n         Console.Write(&quot;   {0}&quot;, name)\n      Next\n      Console.WriteLine()\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    List in unsorted order:\n&#39;       Samuel   Dakota   Koani   Saya   Vanya   Yiska   Yuma   Jody   Nikita\n&#39;\n&#39;    List in sorted order:\n&#39;       Dakota   Jody   Koani   Nikita   Samuel   Saya   Vanya   Yiska   Yuma\n</code></pre><p> The following code demonstrates the Sort and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Comparison__0__\" data-linktype=\"relative-path\">Sort(Comparison&lt;T&gt;)</a> method overloads on a simple business object. Calling the Sort method results in the use of the default comparer for the Part type, and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Comparison__0__\" data-linktype=\"relative-path\">Sort(Comparison&lt;T&gt;)</a> method is implemented by using an anonymous method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.Sort#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify the type of part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt; , IComparable&lt;Part&gt;\n{\n    public string PartName { get; set; }\n\n    public int PartId { get; set; }\n\n    public override string ToString()\n    {\n        return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public int SortByNameAscending(string name1, string name2)\n    {\n        \n        return name1.CompareTo(name2);\n    }\n\n    // Default comparer for Part type.\n    public int CompareTo(Part comparePart)\n    {\n          // A null value means that this object is greater.\n        if (comparePart == null)\n            return 1;\n            \n        else\n            return this.PartId.CompareTo(comparePart.PartId);\n    }\n    public override int GetHashCode()\n    {\n        return PartId;\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n\n}\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName= &quot;crank arm&quot;, PartId = 1234 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 }); ;\n        // Name intentionally left null.\n        parts.Add(new Part() {  PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n       \n\n        // Write out the parts in the list. This will call the overridden \n        // ToString method in the Part class.\n        Console.WriteLine(&quot;<br>Before sort:&quot;);\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n\n        // Call Sort on the list. This will use the \n        // default comparer, which is the Compare method \n        // implemented on Part.\n        parts.Sort();\n\n\n        Console.WriteLine(&quot;<br>After sort by part number:&quot;);\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n       \n        // This shows calling the Sort(Comparison(T) overload using \n        // an anonymous method for the Comparison delegate. \n        // This method treats null as the lesser of two values.\n        parts.Sort(delegate(Part x, Part y)\n        {\n            if (x.PartName == null &amp;&amp; y.PartName == null) return 0;\n            else if (x.PartName == null) return -1;\n            else if (y.PartName == null) return 1;\n            else return x.PartName.CompareTo(y.PartName);\n        });\n\n        Console.WriteLine(&quot;<br>After sort by name:&quot;);\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n       \n        /*\n       \n            Before sort:\n\t\tID: 1434   Name: regular seat\n\t\tID: 1234   Name: crank arm\n\t\tID: 1634   Name: shift lever\n\t\tID: 1334   Name:\n\t\tID: 1444   Name: banana seat\n\t\tID: 1534   Name: cassette\n\n\t    After sort by part number:\n\t\tID: 1234   Name: crank arm\n\t\tID: 1334   Name:\n\t\tID: 1434   Name: regular seat\n\t\tID: 1444   Name: banana seat\n\t\tID: 1534   Name: cassette\n\t\tID: 1634   Name: shift lever\n\n\t    After sort by name:\n\t\tID: 1334   Name:\n\t\tID: 1444   Name: banana seat\n\t\tID: 1534   Name: cassette\n\t\tID: 1234   Name: crank arm\n\t\tID: 1434   Name: regular seat\n\t\tID: 1634   Name: shift lever\n\n         */\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.Sort#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify the type of part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Implements IComparable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n\n    Public Function SortByNameAscending(name1 As String, name2 As String) As Integer\n\n        Return name1.CompareTo(name2)\n    End Function\n\n    &#39; Default comparer for Part.\n    Public Function CompareTo(comparePart As Part) As Integer _\n            Implements IComparable(Of ListSortVB.Part).CompareTo\n        &#39; A null value means that this object is greater.\n        If comparePart Is Nothing Then\n            Return 1\n        Else\n\n            Return Me.PartId.CompareTo(comparePart.PartId)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean Implements IEquatable(Of ListSortVB.Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n        &#39; Name intentionally left null.\n        parts.Add(New Part() With { _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n\n\n        &#39; Write out the parts in the list. This will call the overridden \n        &#39; ToString method in the Part class.\n        Console.WriteLine(vbLf &amp; &quot;Before sort:&quot;)\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Call Sort on the list. This will use the \n        &#39; default comparer, which is the Compare method \n        &#39; implemented on Part.\n        parts.Sort()\n\n\n        Console.WriteLine(vbLf &amp; &quot;After sort by part number:&quot;)\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        &#39; This shows calling the Sort(Comparison(T) overload using \n        &#39; an anonymous delegate method. \n        &#39; This method treats null as the lesser of two values.\n        parts.Sort(Function(x As Part, y As Part)\n                             If x.PartName Is Nothing AndAlso y.PartName Is Nothing Then\n                                 Return 0\n                             ElseIf x.PartName Is Nothing Then\n                                 Return -1\n                             ElseIf y.PartName Is Nothing Then\n                                 Return 1\n                             Else\n                                 Return x.PartName.CompareTo(y.PartName)\n                             End If\n                         End Function)\n        \n\n        Console.WriteLine(vbLf &amp; &quot;After sort by name:&quot;)\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        &#39;\n        &#39;        \n        &#39;            Before sort:\n        &#39;            ID: 1434   Name: regular seat\n        &#39;            ID: 1234   Name: crank arm\n        &#39;            ID: 1634   Name: shift lever\n        &#39;            ID: 1334   Name:\n        &#39;            ID: 1444   Name: banana seat\n        &#39;            ID: 1534   Name: cassette\n        &#39;\n        &#39;            After sort by part number:\n        &#39;            ID: 1234   Name: crank arm\n        &#39;            ID: 1334   Name:\n        &#39;            ID: 1434   Name: regular seat\n        &#39;            ID: 1444   Name: banana seat\n        &#39;            ID: 1534   Name: cassette\n        &#39;            ID: 1634   Name: shift lever\n        &#39;\n        &#39;            After sort by name:\n        &#39;            ID: 1334   Name:\n        &#39;            ID: 1444   Name: banana seat\n        &#39;            ID: 1534   Name: cassette\n        &#39;            ID: 1234   Name: crank arm\n        &#39;            ID: 1434   Name: regular seat\n        &#39;            ID: 1634   Name: shift lever\n\n    End Sub\nEnd Class\n</code></pre><p> The following example demonstrates the Sort method overload and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch__0_\" data-linktype=\"relative-path\">BinarySearch(T)</a> method overload. A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted, and displayed again.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch__0_\" data-linktype=\"relative-path\">BinarySearch(T)</a> method overload is then used to search for two strings that are not in the list, and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method is used to insert them. The return value of the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> method is negative in each case, because the strings are not in the list. Taking the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order. The second search string is larger than any element in the list, so the insertion position is at the end of the list.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_SortSearch#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Sort&quot;);\n    dinosaurs-&gt;Sort();\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>BinarySearch and Insert \\&quot;Coelophysis\\&quot;:&quot;);\n    int index = dinosaurs-&gt;BinarySearch(&quot;Coelophysis&quot;);\n    if (index &lt; 0)\n    {\n        dinosaurs-&gt;Insert(~index, &quot;Coelophysis&quot;);\n    }\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>BinarySearch and Insert \\&quot;Tyrannosaurus\\&quot;:&quot;);\n    index = dinosaurs-&gt;BinarySearch(&quot;Tyrannosaurus&quot;);\n    if (index &lt; 0)\n    {\n        dinosaurs-&gt;Insert(~index, &quot;Tyrannosaurus&quot;);\n    }\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nSort\n\nAmargasaurus\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Coelophysis&quot;:\n\nAmargasaurus\nCoelophysis\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Tyrannosaurus&quot;:\n\nAmargasaurus\nCoelophysis\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\nTyrannosaurus\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_SortSearch#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Sort&quot;);\n        dinosaurs.Sort();\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>BinarySearch and Insert \\&quot;Coelophysis\\&quot;:&quot;);\n        int index = dinosaurs.BinarySearch(&quot;Coelophysis&quot;);\n        if (index &lt; 0)\n        {\n            dinosaurs.Insert(~index, &quot;Coelophysis&quot;);\n        }\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>BinarySearch and Insert \\&quot;Tyrannosaurus\\&quot;:&quot;);\n        index = dinosaurs.BinarySearch(&quot;Tyrannosaurus&quot;);\n        if (index &lt; 0)\n        {\n            dinosaurs.Insert(~index, &quot;Tyrannosaurus&quot;);\n        }\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nSort\n\nAmargasaurus\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Coelophysis&quot;:\n\nAmargasaurus\nCoelophysis\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Tyrannosaurus&quot;:\n\nAmargasaurus\nCoelophysis\nDeinonychus\nMamenchisaurus\nPachycephalosaurus\nTyrannosaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_SortSearch#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Sort&quot;)\n        dinosaurs.Sort\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch and Insert &quot;&quot;Coelophysis&quot;&quot;:&quot;)\n        Dim index As Integer = dinosaurs.BinarySearch(&quot;Coelophysis&quot;)\n        If index &lt; 0 Then\n            index = index Xor -1\n            dinosaurs.Insert(index, &quot;Coelophysis&quot;)\n        End If\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch and Insert &quot;&quot;Tyrannosaurus&quot;&quot;:&quot;)\n        index = dinosaurs.BinarySearch(&quot;Tyrannosaurus&quot;)\n        If index &lt; 0 Then\n            index = index Xor -1\n            dinosaurs.Insert(index, &quot;Tyrannosaurus&quot;)\n        End If\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;\n&#39;Sort\n&#39;\n&#39;Amargasaurus\n&#39;Deinonychus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Coelophysis&quot;:\n&#39;\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Tyrannosaurus&quot;:\n&#39;\n&#39;Amargasaurus\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;Tyrannosaurus\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Sort_System_Collections_Generic_IComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(IComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> using the specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing elements, or <code>null</code> to use the default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and the default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span> cannot find implementation of the <span class=\"xref\">stem.IComparable`1</span> generic interface or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface for type <code>T</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is provided, the elements of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are sorted using the specified <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  If type <code>T</code> does not implement either interface, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> This method uses the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method, which applies the introspective sort as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * LogN, where <em>N</em> is the range of the input array, it uses a Heapsort algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a Quicksort algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>On average, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>; in the worst case it is an O(<code>n</code> ^ 2) operation.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Sort method overload and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch__0_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">BinarySearch(T,IComparer&lt;T&gt;)</a> method overload.  </p>\n<p> The example defines an alternative comparer for strings named DinoCompare, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer\\&lt;String^&gt;</code> in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for <code>null</code>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted using the alternate comparer, and displayed again.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch__0_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">BinarySearch(T,IComparer&lt;T&gt;)</a> method overload is then used to search for several strings that are not in the list, employing the alternate comparer. The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method is used to insert the strings. These two methods are located in the function named <code>SearchAndInsert</code>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) of the negative number returned by <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch__0_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">BinarySearch(T,IComparer&lt;T&gt;)</a> and use it as an index for inserting the new string.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_SortSearchComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class DinoComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        if (x == nullptr)\n        {\n            if (y == nullptr)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == nullptr)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x-&gt;Length.CompareTo(y-&gt;Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x-&gt;CompareTo(y);\n                }\n            }\n        }\n    }\n};\n\nvoid SearchAndInsert(List&lt;String^&gt;^ list, String^ insert, \n    DinoComparer^ dc)\n{\n    Console::WriteLine(&quot;<br>BinarySearch and Insert \\&quot;{0}\\&quot;:&quot;, insert);\n\n    int index = list-&gt;BinarySearch(insert, dc);\n\n    if (index &lt; 0)\n    {\n        list-&gt;Insert(~index, insert);\n    }\n};\n\nvoid Display(List&lt;String^&gt;^ list)\n{\n    Console::WriteLine();\n    for each(String^ s in list)\n    {\n        Console::WriteLine(s);\n    }\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    Display(dinosaurs);\n\n    DinoComparer^ dc = gcnew DinoComparer();\n\n    Console::WriteLine(&quot;<br>Sort with alternate comparer:&quot;);\n    dinosaurs-&gt;Sort(dc);\n    Display(dinosaurs);\n\n    SearchAndInsert(dinosaurs, &quot;Coelophysis&quot;, dc);\n    Display(dinosaurs);\n\n    SearchAndInsert(dinosaurs, &quot;Oviraptor&quot;, dc);\n    Display(dinosaurs);\n\n    SearchAndInsert(dinosaurs, &quot;Tyrannosaur&quot;, dc);\n    Display(dinosaurs);\n\n    SearchAndInsert(dinosaurs, nullptr, dc);\n    Display(dinosaurs);\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nSort with alternate comparer:\n\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Coelophysis&quot;:\n\nCoelophysis\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Oviraptor&quot;:\n\nOviraptor\nCoelophysis\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Tyrannosaur&quot;:\n\nOviraptor\nCoelophysis\nDeinonychus\nTyrannosaur\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;&quot;:\n\n\nOviraptor\nCoelophysis\nDeinonychus\nTyrannosaur\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_SortSearchComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class DinoComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        If x Is Nothing Then\n            If y Is Nothing Then \n                &#39; If x is Nothing and y is Nothing, they&#39;re\n                &#39; equal. \n                Return 0\n            Else\n                &#39; If x is Nothing and y is not Nothing, y\n                &#39; is greater. \n                Return -1\n            End If\n        Else\n            &#39; If x is not Nothing...\n            &#39;\n            If y Is Nothing Then\n                &#39; ...and y is Nothing, x is greater.\n                Return 1\n            Else\n                &#39; ...and y is not Nothing, compare the \n                &#39; lengths of the two strings.\n                &#39;\n                Dim retval As Integer = _\n                    x.Length.CompareTo(y.Length)\n\n                If retval &lt;&gt; 0 Then \n                    &#39; If the strings are not of equal length,\n                    &#39; the longer string is greater.\n                    &#39;\n                    Return retval\n                Else\n                    &#39; If the strings are of equal length,\n                    &#39; sort them with ordinary string comparison.\n                    &#39;\n                    Return x.CompareTo(y)\n                End If\n            End If\n        End If\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        Display(dinosaurs)\n\n        Dim dc As New DinoComparer\n\n        Console.WriteLine(vbLf &amp; &quot;Sort with alternate comparer:&quot;)\n        dinosaurs.Sort(dc)\n        Display(dinosaurs)\n\n        SearchAndInsert(dinosaurs, &quot;Coelophysis&quot;, dc)\n        Display(dinosaurs)\n\n        SearchAndInsert(dinosaurs, &quot;Oviraptor&quot;, dc)\n        Display(dinosaurs)\n\n        SearchAndInsert(dinosaurs, &quot;Tyrannosaur&quot;, dc)\n        Display(dinosaurs)\n\n        SearchAndInsert(dinosaurs, Nothing, dc)\n        Display(dinosaurs)\n    End Sub\n\n    Private Shared Sub SearchAndInsert( _\n        ByVal lis As List(Of String), _\n        ByVal insert As String, ByVal dc As DinoComparer)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch and Insert &quot;&quot;{0}&quot;&quot;:&quot;, insert)\n\n        Dim index As Integer = lis.BinarySearch(insert, dc)\n\n        If index &lt; 0 Then\n            index = index Xor -1\n            lis.Insert(index, insert)\n        End If\n    End Sub\n\n    Private Shared Sub Display(ByVal lis As List(Of String))\n        Console.WriteLine()\n        For Each s As String In lis\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;\n&#39;Sort with alternate comparer:\n&#39;\n&#39;Deinonychus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Coelophysis&quot;:\n&#39;\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Oviraptor&quot;:\n&#39;\n&#39;Oviraptor\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;Tyrannosaur&quot;:\n&#39;\n&#39;Oviraptor\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Tyrannosaur\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;\n&#39;BinarySearch and Insert &quot;&quot;:\n&#39;\n&#39;\n&#39;Oviraptor\n&#39;Coelophysis\n&#39;Deinonychus\n&#39;Tyrannosaur\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_SortSearchComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class DinoComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        if (x == null)\n        {\n            if (y == null)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == null)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x.Length.CompareTo(y.Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x.CompareTo(y);\n                }\n            }\n        }\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        Display(dinosaurs);\n\n        DinoComparer dc = new DinoComparer();\n\n        Console.WriteLine(&quot;<br>Sort with alternate comparer:&quot;);\n        dinosaurs.Sort(dc);\n        Display(dinosaurs);\n\n        SearchAndInsert(dinosaurs, &quot;Coelophysis&quot;, dc);\n        Display(dinosaurs);\n\n        SearchAndInsert(dinosaurs, &quot;Oviraptor&quot;, dc);\n        Display(dinosaurs);\n\n        SearchAndInsert(dinosaurs, &quot;Tyrannosaur&quot;, dc);\n        Display(dinosaurs);\n\n        SearchAndInsert(dinosaurs, null, dc);\n        Display(dinosaurs);\n    }\n\n    private static void SearchAndInsert(List&lt;string&gt; list, \n        string insert, DinoComparer dc)\n    {\n        Console.WriteLine(&quot;<br>BinarySearch and Insert \\&quot;{0}\\&quot;:&quot;, insert);\n\n        int index = list.BinarySearch(insert, dc);\n\n        if (index &lt; 0)\n        {\n            list.Insert(~index, insert);\n        }\n    }\n\n    private static void Display(List&lt;string&gt; list)\n    {\n        Console.WriteLine();\n        foreach( string s in list )\n        {\n            Console.WriteLine(s);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\n\nSort with alternate comparer:\n\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Coelophysis&quot;:\n\nCoelophysis\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Oviraptor&quot;:\n\nOviraptor\nCoelophysis\nDeinonychus\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;Tyrannosaur&quot;:\n\nOviraptor\nCoelophysis\nDeinonychus\nTyrannosaur\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n\nBinarySearch and Insert &quot;&quot;:\n\n\nOviraptor\nCoelophysis\nDeinonychus\nTyrannosaur\nAmargasaurus\nMamenchisaurus\nPachycephalosaurus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Sort_System_Comparison__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Comparison&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in the entire <span class=\"xref\">stem.Collections.Generic.List`1</span> using the specified <span class=\"xref\">stem.Comparison`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Sort (Comparison&lt;T&gt; comparison);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparison</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.comparison-1\" data-linktype=\"relative-path\">Comparison<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Comparison`1</span> to use when comparing elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>comparison</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The implementation of <code>comparison</code> caused an error during the sort. For example, <code>comparison</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparison</code> is provided, the elements of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are sorted using the method represented by the delegate.  </p>\n<p> If <code>comparison</code> is <code>null</code>, an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> is thrown.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a>, which applies the introspective sort as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * LogN, where N is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a Quicksort algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>On average, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>; in the worst case it is an O(<code>n</code> ^ 2) operation.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code demonstrates the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_\" data-linktype=\"relative-path\">Sort</a> and Sort method overloads on a simple business object. Calling the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_\" data-linktype=\"relative-path\">Sort</a> method results in the use of the default comparer for the Part type, and the Sort method is implemented using an anonymous method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.Sort#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify the type of part \n// but the part name can change. \npublic class Part : IEquatable&lt;Part&gt; , IComparable&lt;Part&gt;\n{\n    public string PartName { get; set; }\n\n    public int PartId { get; set; }\n\n    public override string ToString()\n    {\n        return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public int SortByNameAscending(string name1, string name2)\n    {\n        \n        return name1.CompareTo(name2);\n    }\n\n    // Default comparer for Part type.\n    public int CompareTo(Part comparePart)\n    {\n          // A null value means that this object is greater.\n        if (comparePart == null)\n            return 1;\n            \n        else\n            return this.PartId.CompareTo(comparePart.PartId);\n    }\n    public override int GetHashCode()\n    {\n        return PartId;\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n\n}\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        // Add parts to the list.\n        parts.Add(new Part() { PartName = &quot;regular seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName= &quot;crank arm&quot;, PartId = 1234 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 }); ;\n        // Name intentionally left null.\n        parts.Add(new Part() {  PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;banana seat&quot;, PartId = 1444 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n       \n\n        // Write out the parts in the list. This will call the overridden \n        // ToString method in the Part class.\n        Console.WriteLine(&quot;<br>Before sort:&quot;);\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n\n        // Call Sort on the list. This will use the \n        // default comparer, which is the Compare method \n        // implemented on Part.\n        parts.Sort();\n\n\n        Console.WriteLine(&quot;<br>After sort by part number:&quot;);\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n       \n        // This shows calling the Sort(Comparison(T) overload using \n        // an anonymous method for the Comparison delegate. \n        // This method treats null as the lesser of two values.\n        parts.Sort(delegate(Part x, Part y)\n        {\n            if (x.PartName == null &amp;&amp; y.PartName == null) return 0;\n            else if (x.PartName == null) return -1;\n            else if (y.PartName == null) return 1;\n            else return x.PartName.CompareTo(y.PartName);\n        });\n\n        Console.WriteLine(&quot;<br>After sort by name:&quot;);\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n       \n        /*\n       \n            Before sort:\n\t\tID: 1434   Name: regular seat\n\t\tID: 1234   Name: crank arm\n\t\tID: 1634   Name: shift lever\n\t\tID: 1334   Name:\n\t\tID: 1444   Name: banana seat\n\t\tID: 1534   Name: cassette\n\n\t    After sort by part number:\n\t\tID: 1234   Name: crank arm\n\t\tID: 1334   Name:\n\t\tID: 1434   Name: regular seat\n\t\tID: 1444   Name: banana seat\n\t\tID: 1534   Name: cassette\n\t\tID: 1634   Name: shift lever\n\n\t    After sort by name:\n\t\tID: 1334   Name:\n\t\tID: 1444   Name: banana seat\n\t\tID: 1534   Name: cassette\n\t\tID: 1234   Name: crank arm\n\t\tID: 1434   Name: regular seat\n\t\tID: 1634   Name: shift lever\n\n         */\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.Sort#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify the type of part \n&#39; but the part name can change. \nPublic Class Part\n    Implements IEquatable(Of Part)\n    Implements IComparable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n\n    Public Function SortByNameAscending(name1 As String, name2 As String) As Integer\n\n        Return name1.CompareTo(name2)\n    End Function\n\n    &#39; Default comparer for Part.\n    Public Function CompareTo(comparePart As Part) As Integer _\n            Implements IComparable(Of ListSortVB.Part).CompareTo\n        &#39; A null value means that this object is greater.\n        If comparePart Is Nothing Then\n            Return 1\n        Else\n\n            Return Me.PartId.CompareTo(comparePart.PartId)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return PartId\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean Implements IEquatable(Of ListSortVB.Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create a list of parts.\n        Dim parts As New List(Of Part)()\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n        &#39; Name intentionally left null.\n        parts.Add(New Part() With { _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n\n\n        &#39; Write out the parts in the list. This will call the overridden \n        &#39; ToString method in the Part class.\n        Console.WriteLine(vbLf &amp; &quot;Before sort:&quot;)\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n\n        &#39; Call Sort on the list. This will use the \n        &#39; default comparer, which is the Compare method \n        &#39; implemented on Part.\n        parts.Sort()\n\n\n        Console.WriteLine(vbLf &amp; &quot;After sort by part number:&quot;)\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        &#39; This shows calling the Sort(Comparison(T) overload using \n        &#39; an anonymous delegate method. \n        &#39; This method treats null as the lesser of two values.\n        parts.Sort(Function(x As Part, y As Part)\n                             If x.PartName Is Nothing AndAlso y.PartName Is Nothing Then\n                                 Return 0\n                             ElseIf x.PartName Is Nothing Then\n                                 Return -1\n                             ElseIf y.PartName Is Nothing Then\n                                 Return 1\n                             Else\n                                 Return x.PartName.CompareTo(y.PartName)\n                             End If\n                         End Function)\n        \n\n        Console.WriteLine(vbLf &amp; &quot;After sort by name:&quot;)\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        &#39;\n        &#39;        \n        &#39;            Before sort:\n        &#39;            ID: 1434   Name: regular seat\n        &#39;            ID: 1234   Name: crank arm\n        &#39;            ID: 1634   Name: shift lever\n        &#39;            ID: 1334   Name:\n        &#39;            ID: 1444   Name: banana seat\n        &#39;            ID: 1534   Name: cassette\n        &#39;\n        &#39;            After sort by part number:\n        &#39;            ID: 1234   Name: crank arm\n        &#39;            ID: 1334   Name:\n        &#39;            ID: 1434   Name: regular seat\n        &#39;            ID: 1444   Name: banana seat\n        &#39;            ID: 1534   Name: cassette\n        &#39;            ID: 1634   Name: shift lever\n        &#39;\n        &#39;            After sort by name:\n        &#39;            ID: 1334   Name:\n        &#39;            ID: 1444   Name: banana seat\n        &#39;            ID: 1534   Name: cassette\n        &#39;            ID: 1234   Name: crank arm\n        &#39;            ID: 1434   Name: regular seat\n        &#39;            ID: 1634   Name: shift lever\n\n    End Sub\nEnd Class\n</code></pre><p> The following example demonstrates the Sort method overload.  </p>\n<p> The example defines an alternative comparison method for strings, named <code>CompareDinosByLength</code>. This method works as follows: First, the comparands are tested for <code>null</code>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with four strings, in no particular order. The list also includes an empty string and a null reference. The list is displayed, sorted using a <a class=\"xref\" href=\"system.comparison-1\" data-linktype=\"relative-path\">Comparison&lt;T&gt;</a> generic delegate representing the <code>CompareDinosByLength</code> method, and displayed again.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_SortComparison#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nint CompareDinosByLength(String^ x, String^ y)\n{\n    if (x == nullptr)\n    {\n        if (y == nullptr)\n        {\n            // If x is null and y is null, they&#39;re\n            // equal. \n            return 0;\n        }\n        else\n        {\n            // If x is null and y is not null, y\n            // is greater. \n            return -1;\n        }\n    }\n    else\n    {\n        // If x is not null...\n        //\n        if (y == nullptr)\n            // ...and y is null, x is greater.\n        {\n            return 1;\n        }\n        else\n        {\n            // ...and y is not null, compare the \n            // lengths of the two strings.\n            //\n            int retval = x-&gt;Length.CompareTo(y-&gt;Length);\n\n            if (retval != 0)\n            {\n                // If the strings are not of equal length,\n                // the longer string is greater.\n                //\n                return retval;\n            }\n            else\n            {\n                // If the strings are of equal length,\n                // sort them with ordinary string comparison.\n                //\n                return x-&gt;CompareTo(y);\n            }\n        }\n    }\n};\n\nvoid Display(List&lt;String^&gt;^ list)\n{\n    Console::WriteLine();\n    for each(String^ s in list)\n    {\n        if (s == nullptr)\n            Console::WriteLine(&quot;(null)&quot;);\n        else\n            Console::WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, s);\n    }\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;&quot;);\n    dinosaurs-&gt;Add(nullptr);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    Display(dinosaurs);\n\n    Console::WriteLine(&quot;<br>Sort with generic Comparison&lt;String^&gt; delegate:&quot;);\n    dinosaurs-&gt;Sort(\n        gcnew Comparison&lt;String^&gt;(CompareDinosByLength));\n    Display(dinosaurs);\n\n}\n\n/* This code example produces the following output:\n\n&quot;Pachycephalosaurus&quot;\n&quot;Amargasaurus&quot;\n&quot;&quot;\n(null)\n&quot;Mamenchisaurus&quot;\n&quot;Deinonychus&quot;\n\nSort with generic Comparison&lt;String^&gt; delegate:\n\n(null)\n&quot;&quot;\n&quot;Deinonychus&quot;\n&quot;Amargasaurus&quot;\n&quot;Mamenchisaurus&quot;\n&quot;Pachycephalosaurus&quot;\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_SortComparison#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Private Shared Function CompareDinosByLength( _\n        ByVal x As String, ByVal y As String) As Integer\n\n        If x Is Nothing Then\n            If y Is Nothing Then \n                &#39; If x is Nothing and y is Nothing, they&#39;re\n                &#39; equal. \n                Return 0\n            Else\n                &#39; If x is Nothing and y is not Nothing, y\n                &#39; is greater. \n                Return -1\n            End If\n        Else\n            &#39; If x is not Nothing...\n            &#39;\n            If y Is Nothing Then\n                &#39; ...and y is Nothing, x is greater.\n                Return 1\n            Else\n                &#39; ...and y is not Nothing, compare the \n                &#39; lengths of the two strings.\n                &#39;\n                Dim retval As Integer = _\n                    x.Length.CompareTo(y.Length)\n\n                If retval &lt;&gt; 0 Then \n                    &#39; If the strings are not of equal length,\n                    &#39; the longer string is greater.\n                    &#39;\n                    Return retval\n                Else\n                    &#39; If the strings are of equal length,\n                    &#39; sort them with ordinary string comparison.\n                    &#39;\n                    Return x.CompareTo(y)\n                End If\n            End If\n        End If\n\n    End Function\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;&quot;)\n        dinosaurs.Add(Nothing)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Sort with generic Comparison(Of String) delegate:&quot;)\n        dinosaurs.Sort(AddressOf CompareDinosByLength)\n        Display(dinosaurs)\n\n    End Sub\n\n    Private Shared Sub Display(ByVal lis As List(Of String))\n        Console.WriteLine()\n        For Each s As String In lis\n            If s Is Nothing Then\n                Console.WriteLine(&quot;(Nothing)&quot;)\n            Else\n                Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, s)\n            End If\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;&quot;Pachycephalosaurus&quot;\n&#39;&quot;Amargasaurus&quot;\n&#39;&quot;&quot;\n&#39;(Nothing)\n&#39;&quot;Mamenchisaurus&quot;\n&#39;&quot;Deinonychus&quot;\n&#39;\n&#39;Sort with generic Comparison(Of String) delegate:\n&#39;\n&#39;(Nothing)\n&#39;&quot;&quot;\n&#39;&quot;Deinonychus&quot;\n&#39;&quot;Amargasaurus&quot;\n&#39;&quot;Mamenchisaurus&quot;\n&#39;&quot;Pachycephalosaurus&quot;\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_SortComparison#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    private static int CompareDinosByLength(string x, string y)\n    {\n        if (x == null)\n        {\n            if (y == null)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == null)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x.Length.CompareTo(y.Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x.CompareTo(y);\n                }\n            }\n        }\n    }\n\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;&quot;);\n        dinosaurs.Add(null);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Sort with generic Comparison&lt;string&gt; delegate:&quot;);\n        dinosaurs.Sort(CompareDinosByLength);\n        Display(dinosaurs);\n\n    }\n\n    private static void Display(List&lt;string&gt; list)\n    {\n        Console.WriteLine();\n        foreach( string s in list )\n        {\n            if (s == null)\n                Console.WriteLine(&quot;(null)&quot;);\n            else\n                Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, s);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n&quot;Pachycephalosaurus&quot;\n&quot;Amargasaurus&quot;\n&quot;&quot;\n(null)\n&quot;Mamenchisaurus&quot;\n&quot;Deinonychus&quot;\n\nSort with generic Comparison&lt;string&gt; delegate:\n\n(null)\n&quot;&quot;\n&quot;Deinonychus&quot;\n&quot;Amargasaurus&quot;\n&quot;Mamenchisaurus&quot;\n&quot;Pachycephalosaurus&quot;\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_Sort_System_Int32_System_Int32_System_Collections_Generic_IComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Int32,Int32,IComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in a range of elements in <span class=\"xref\">stem.Collections.Generic.List`1</span> using the specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing elements, or <code>null</code> to use the default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not specify a valid range in the <span class=\"xref\">stem.Collections.Generic.List`1</span>.  </p>\n<p> -or-  </p>\n<p> The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and the default comparer <span class=\"xref\">stem.Collections.Generic.Comparer`1.Default*</span> cannot find implementation of the <span class=\"xref\">stem.IComparable`1</span> generic interface or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is provided, the elements of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are sorted using the specified <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  If type <code>T</code> does not implement either interface, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a>, which applies the introspective sort as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * LogN, where N is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a Quicksort algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>On average, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>; in the worst case it is an O(<code>n</code> ^ 2) operation.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Sort method overload and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch_System_Int32_System_Int32__0_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">BinarySearch(Int32,Int32,T,IComparer&lt;T&gt;)</a> method overload.  </p>\n<p> The example defines an alternative comparer for strings named DinoCompare, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer&lt;String^&gt;</code> in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for <code>null</code>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs. Within each of the two groups, the names are not in any particular sort order. The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch_System_Int32_System_Int32__0_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">BinarySearch(Int32,Int32,T,IComparer&lt;T&gt;)</a> method overload is then used to search only the range of herbivores for &quot;Brachiosaurus&quot;. The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) of the negative number returned by the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_BinarySearch_System_Int32_System_Int32__0_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">BinarySearch(Int32,Int32,T,IComparer&lt;T&gt;)</a> method is used as an index for inserting the new string.  </p>\n<pre><code class=\"lang-cs\" name=\"List`1_SortSearchComparerRange#1\">using System;\nusing System.Collections.Generic;\n\npublic class DinoComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        if (x == null)\n        {\n            if (y == null)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == null)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x.Length.CompareTo(y.Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x.CompareTo(y);\n                }\n            }\n        }\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;);\n        dinosaurs.Add(&quot;Parasauralophus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Galimimus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Oviraptor&quot;);\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n\n        int herbivores = 5;\n        Display(dinosaurs);\n\n        DinoComparer dc = new DinoComparer();\n\n        Console.WriteLine(&quot;<br>Sort a range with the alternate comparer:&quot;);\n        dinosaurs.Sort(0, herbivores, dc);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>BinarySearch a range and Insert \\&quot;{0}\\&quot;:&quot;,\n            &quot;Brachiosaurus&quot;);\n\n        int index = dinosaurs.BinarySearch(0, herbivores, &quot;Brachiosaurus&quot;, dc);\n\n        if (index &lt; 0)\n        {\n            dinosaurs.Insert(~index, &quot;Brachiosaurus&quot;);\n            herbivores++;\n        }\n\n        Display(dinosaurs);\n    }\n\n    private static void Display(List&lt;string&gt; list)\n    {\n        Console.WriteLine();\n        foreach( string s in list )\n        {\n            Console.WriteLine(s);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nParasauralophus\nAmargasaurus\nGalimimus\nMamenchisaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n\nSort a range with the alternate comparer:\n\nGalimimus\nAmargasaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n\nBinarySearch a range and Insert &quot;Brachiosaurus&quot;:\n\nGalimimus\nAmargasaurus\nBrachiosaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_SortSearchComparerRange#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class DinoComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        If x Is Nothing Then\n            If y Is Nothing Then \n                &#39; If x is Nothing and y is Nothing, they&#39;re\n                &#39; equal. \n                Return 0\n            Else\n                &#39; If x is Nothing and y is not Nothing, y\n                &#39; is greater. \n                Return -1\n            End If\n        Else\n            &#39; If x is not Nothing...\n            &#39;\n            If y Is Nothing Then\n                &#39; ...and y is Nothing, x is greater.\n                Return 1\n            Else\n                &#39; ...and y is not Nothing, compare the \n                &#39; lengths of the two strings.\n                &#39;\n                Dim retval As Integer = _\n                    x.Length.CompareTo(y.Length)\n\n                If retval &lt;&gt; 0 Then \n                    &#39; If the strings are not of equal length,\n                    &#39; the longer string is greater.\n                    &#39;\n                    Return retval\n                Else\n                    &#39; If the strings are of equal length,\n                    &#39; sort them with ordinary string comparison.\n                    &#39;\n                    Return x.CompareTo(y)\n                End If\n            End If\n        End If\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Pachycephalosaurus&quot;)\n        dinosaurs.Add(&quot;Parasauralophus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Galimimus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Oviraptor&quot;)\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n\n        Dim herbivores As Integer = 5\n        Display(dinosaurs)\n\n        Dim dc As New DinoComparer\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort a range with the alternate comparer:&quot;)\n        dinosaurs.Sort(0, herbivores, dc)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch a range and Insert &quot;&quot;{0}&quot;&quot;:&quot;, _\n            &quot;Brachiosaurus&quot;)\n\n        Dim index As Integer = _\n            dinosaurs.BinarySearch(0, herbivores, &quot;Brachiosaurus&quot;, dc)\n\n        If index &lt; 0 Then\n            index = index Xor -1\n            dinosaurs.Insert(index, &quot;Brachiosaurus&quot;)\n            herbivores += 1\n        End If\n\n        Display(dinosaurs)\n\n    End Sub\n\n    Private Shared Sub Display(ByVal lis As List(Of String))\n        Console.WriteLine()\n        For Each s As String In lis\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Parasauralophus\n&#39;Amargasaurus\n&#39;Galimimus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Oviraptor\n&#39;Tyrannosaurus\n&#39;\n&#39;Sort a range with the alternate comparer:\n&#39;\n&#39;Galimimus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Parasauralophus\n&#39;Pachycephalosaurus\n&#39;Deinonychus\n&#39;Oviraptor\n&#39;Tyrannosaurus\n&#39;\n&#39;BinarySearch a range and Insert &quot;Brachiosaurus&quot;:\n&#39;\n&#39;Galimimus\n&#39;Amargasaurus\n&#39;Brachiosaurus\n&#39;Mamenchisaurus\n&#39;Parasauralophus\n&#39;Pachycephalosaurus\n&#39;Deinonychus\n&#39;Oviraptor\n&#39;Tyrannosaurus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_SortSearchComparerRange#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class DinoComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        if (x == nullptr)\n        {\n            if (y == nullptr)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == nullptr)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x-&gt;Length.CompareTo(y-&gt;Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x-&gt;CompareTo(y);\n                }\n            }\n        }\n    }\n};\n\nvoid Display(List&lt;String^&gt;^ list)\n{\n    Console::WriteLine();\n    for each(String^ s in list)\n    {\n        Console::WriteLine(s);\n    }\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Pachycephalosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Parasauralophus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Galimimus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Oviraptor&quot;);\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n\n    int herbivores = 5;\n    Display(dinosaurs);\n\n    DinoComparer^ dc = gcnew DinoComparer();\n\n    Console::WriteLine(&quot;<br>Sort a range with the alternate comparer:&quot;);\n    dinosaurs-&gt;Sort(0, herbivores, dc);\n    Display(dinosaurs);\n\n    Console::WriteLine(&quot;<br>BinarySearch a range and Insert \\&quot;{0}\\&quot;:&quot;,\n            &quot;Brachiosaurus&quot;);\n\n    int index = dinosaurs-&gt;BinarySearch(0, herbivores, &quot;Brachiosaurus&quot;, dc);\n\n    if (index &lt; 0)\n    {\n        dinosaurs-&gt;Insert(~index, &quot;Brachiosaurus&quot;);\n        herbivores++;\n    }\n\n    Display(dinosaurs);\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nParasauralophus\nAmargasaurus\nGalimimus\nMamenchisaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n\nSort a range with the alternate comparer:\n\nGalimimus\nAmargasaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n\nBinarySearch a range and Insert &quot;Brachiosaurus&quot;:\n\nGalimimus\nAmargasaurus\nBrachiosaurus\nMamenchisaurus\nParasauralophus\nPachycephalosaurus\nDeinonychus\nOviraptor\nTyrannosaurus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_ToArray\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_ToArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToArray()</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the <span class=\"xref\">stem.Collections.Generic.List`1</span> to a new array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T[] ToArray ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </div>\r\n                  <p>An array containing copies of the elements of the <span class=\"xref\">stem.Collections.Generic.List`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are copied using <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a>, which is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the ToArray method and other methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class that act on ranges. At the end of the example, the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_GetRange_\" data-linktype=\"relative-path\">GetRange</a> method is used to get three items from the list, beginning with index location 2. The ToArray method is called on the resulting <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, creating an array of three elements. The elements of the array are displayed.  </p>\n<pre><code class=\"lang-vb\" name=\"List`1_Ranges#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim input() As String = { &quot;Brachiosaurus&quot;, _\n                                  &quot;Amargasaurus&quot;, _\n                                  &quot;Mamenchisaurus&quot; }\n\n        Dim dinosaurs As New List(Of String)(input)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;AddRange(dinosaurs)&quot;)\n        dinosaurs.AddRange(dinosaurs)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveRange(2, 2)&quot;)\n        dinosaurs.RemoveRange(2, 2)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        input = New String() { &quot;Tyrannosaurus&quot;, _\n                               &quot;Deinonychus&quot;, _\n                               &quot;Velociraptor&quot; }\n\n        Console.WriteLine(vbLf &amp; &quot;InsertRange(3, input)&quot;)\n        dinosaurs.InsertRange(3, input)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;output = dinosaurs.GetRange(2, 3).ToArray&quot;)\n        Dim output() As String = dinosaurs.GetRange(2, 3).ToArray()\n        \n        Console.WriteLine()\n        For Each dinosaur As String In output\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 3\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;AddRange(dinosaurs)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;RemoveRange(2, 2)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;\n&#39;InsertRange(3, input)\n&#39;\n&#39;Brachiosaurus\n&#39;Amargasaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n&#39;Velociraptor\n&#39;Mamenchisaurus\n&#39;\n&#39;output = dinosaurs.GetRange(2, 3).ToArray\n&#39;\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Deinonychus\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_Ranges#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    array&lt;String^&gt;^ input = { &quot;Brachiosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Mamenchisaurus&quot; };\n\n    List&lt;String^&gt;^ dinosaurs = \n        gcnew List&lt;String^&gt;((IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n    dinosaurs-&gt;AddRange(dinosaurs);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n    dinosaurs-&gt;RemoveRange(2, 2);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    input = gcnew array&lt;String^&gt; { &quot;Tyrannosaurus&quot;, \n                                   &quot;Deinonychus&quot;, \n                                   &quot;Velociraptor&quot;};\n\n    Console::WriteLine(&quot;<br>InsertRange(3, (IEnumerable&lt;String^&gt;^) input)&quot;);\n    dinosaurs-&gt;InsertRange(3, (IEnumerable&lt;String^&gt;^) input);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()&quot;);\n    array&lt;String^&gt;^ output = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray();\n        \n    Console::WriteLine();\n    for each(String^ dinosaur in output )\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, (IEnumerable&lt;String^&gt;^) input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs-&gt;GetRange(2, 3)-&gt;ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Ranges#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] input = { &quot;Brachiosaurus&quot;, \n                           &quot;Amargasaurus&quot;, \n                           &quot;Mamenchisaurus&quot; };\n\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;(input);\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>AddRange(dinosaurs)&quot;);\n        dinosaurs.AddRange(dinosaurs);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>RemoveRange(2, 2)&quot;);\n        dinosaurs.RemoveRange(2, 2);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        input = new string[] { &quot;Tyrannosaurus&quot;, \n                               &quot;Deinonychus&quot;, \n                               &quot;Velociraptor&quot;};\n\n        Console.WriteLine(&quot;<br>InsertRange(3, input)&quot;);\n        dinosaurs.InsertRange(3, input);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>output = dinosaurs.GetRange(2, 3).ToArray()&quot;);\n        string[] output = dinosaurs.GetRange(2, 3).ToArray();\n        \n        Console.WriteLine();\n        foreach( string dinosaur in output )\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 3\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nAddRange(dinosaurs)\n\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nAmargasaurus\nMamenchisaurus\n\nRemoveRange(2, 2)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nMamenchisaurus\n\nInsertRange(3, input)\n\nBrachiosaurus\nAmargasaurus\nAmargasaurus\nTyrannosaurus\nDeinonychus\nVelociraptor\nMamenchisaurus\n\noutput = dinosaurs.GetRange(2, 3).ToArray()\n\nAmargasaurus\nTyrannosaurus\nDeinonychus\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_TrimExcess\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_TrimExcess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimExcess()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the capacity to the actual number of elements in the <span class=\"xref\">stem.Collections.Generic.List`1</span>, if that number is less than a threshold value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void TrimExcess ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to minimize a collection&#39;s memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> can be considerable, however, so the TrimExcess method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The current threshold of 90 percent might change in future releases.  </p>\n</div>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> To reset a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> to its initial state, call the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method before calling the TrimExcess method. Trimming an empty <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> to the default capacity.  </p>\n<p> The capacity can also be set using the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to check the capacity and count of a  <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> that contains a simple business object, and illustrates using the TrimExcess method to remove extra capacity.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.List.CapacityCount#1\">using System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify a part \n// but the part name be different for the same Id.\npublic class Part : IEquatable&lt;Part&gt;\n{\n    public string PartName { get; set; }\n    public int PartId { get; set; }\n    public override string ToString()\n    {\n        return &quot;ID: &quot; + PartId + &quot;   Name: &quot; + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public override int GetHashCode()\n    {\n        return base.GetHashCode();\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n\n}\npublic class Example\n{\n\n    public static void Main()\n    {\n        List&lt;Part&gt; parts = new List&lt;Part&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, parts.Capacity);\n\n        parts.Add(new Part() { PartName = &quot;crank arm&quot;, PartId = 1234 });\n        parts.Add(new Part() { PartName = &quot;chain ring&quot;, PartId = 1334 });\n        parts.Add(new Part() { PartName = &quot;seat&quot;, PartId = 1434 });\n        parts.Add(new Part() { PartName = &quot;cassette&quot;, PartId = 1534 });\n        parts.Add(new Part() { PartName = &quot;shift lever&quot;, PartId = 1634 }); ;\n\n        Console.WriteLine();\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n\n        parts.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n\n        parts.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count);\n    }\n    /*\n     This code example produces the following output. \n            Capacity: 0\n\n            ID: 1234   Name: crank arm\n            ID: 1334   Name: chain ring\n            ID: 1434   Name: seat\n            ID: 1534   Name: cassette\n            ID: 1634   Name: shift lever\n\n            Capacity: 8\n            Count: 5\n\n            TrimExcess()\n            Capacity: 5\n            Count: 5\n\n            Clear()\n            Capacity: 5\n            Count: 0\n     */\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.List.CapacityCount#1\">Imports System.Collections.Generic\n&#39; Simple business object. A PartId is used to identify a part \n&#39; but the part name can change.\nPublic Class Part\n    Implements IEquatable(Of Part)\n    Public Property PartName() As String\n        Get\n            Return m_PartName\n        End Get\n        Set(value As String)\n            m_PartName = Value\n        End Set\n    End Property\n    Private m_PartName As String\n    Public Property PartId() As Integer\n        Get\n            Return m_PartId\n        End Get\n        Set(value As Integer)\n            m_PartId = Value\n        End Set\n    End Property\n    Private m_PartId As Integer\n    Public Overrides Function ToString() As String\n        Return &quot;ID: &quot; &amp; PartId &amp; &quot;   Name: &quot; &amp; PartName\n    End Function\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If obj Is Nothing Then\n            Return False\n        End If\n        Dim objAsPart As Part = TryCast(obj, Part)\n        If objAsPart Is Nothing Then\n            Return False\n        Else\n            Return Equals(objAsPart)\n        End If\n    End Function\n    Public Overrides Function GetHashCode() As Integer\n        Return MyBase.GetHashCode()\n    End Function\n    Public Overloads Function Equals(other As Part) As Boolean Implements IEquatable(Of Part).Equals\n        If other Is Nothing Then\n            Return False\n        End If\n        Return (Me.PartId.Equals(other.PartId))\n    End Function\n    &#39; Should also override == and != operators.\n\nEnd Class\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim parts As New List(Of Part)()\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, parts.Capacity)\n\n        &#39; Add parts to the list.\n        parts.Add(New Part() With { _\n             .PartName = &quot;crank arm&quot;, _\n             .PartId = 1234 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;chain ring&quot;, _\n             .PartId = 1334 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;regular seat&quot;, _\n             .PartId = 1434 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;banana seat&quot;, _\n             .PartId = 1444 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;cassette&quot;, _\n             .PartId = 1534 _\n        })\n        parts.Add(New Part() With { _\n             .PartName = &quot;shift lever&quot;, _\n             .PartId = 1634 _\n        })\n\n\n\n        Console.WriteLine()\n        For Each aPart As Part In parts\n            Console.WriteLine(aPart)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n\n        parts.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n\n        parts.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, parts.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, parts.Count)\n    End Sub\n    &#39;\n    &#39;     This code example produces the following output. \n    &#39;            Capacity: 0\n    &#39;\n    &#39;            ID: 1234   Name: crank arm\n    &#39;            ID: 1334   Name: chain ring\n    &#39;            ID: 1434   Name: seat\n    &#39;            ID: 1534   Name: cassette\n    &#39;            ID: 1634   Name: shift lever\n    &#39;\n    &#39;            Capacity: 8\n    &#39;            Count: 6\n    &#39;\n    &#39;            TrimExcess()\n    &#39;            Capacity: 6\n    &#39;            Count: 6\n    &#39;\n    &#39;            Clear()\n    &#39;            Capacity: 6\n    &#39;            Count: 0\n    &#39;     \n\nEnd Class\n</code></pre><p> The following example demonstrates the TrimExcess method. Several properties and methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class are used to add, insert, and remove items from a list of strings. Then the TrimExcess method is used to reduce the capacity to match the count, and the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a> and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> properties are displayed. If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized. Finally, the contents of the list are cleared.  </p>\n<pre><code class=\"lang-cpp\" name=\"List`1_Class#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n\n    dinosaurs-&gt;Add(&quot;Tyrannosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Mamenchisaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    Console::WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n        dinosaurs-&gt;Contains(&quot;Deinonychus&quot;));\n\n    Console::WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Insert(2, &quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n    Console::WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n    dinosaurs-&gt;Remove(&quot;Compsognathus&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    dinosaurs-&gt;TrimExcess();\n    Console::WriteLine(&quot;<br>TrimExcess()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n\n    dinosaurs-&gt;Clear();\n    Console::WriteLine(&quot;<br>Clear()&quot;);\n    Console::WriteLine(&quot;Capacity: {0}&quot;, dinosaurs-&gt;Capacity);\n    Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"List`1_Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Deinonychus\\&quot;): {0}&quot;,\n            dinosaurs.Contains(&quot;Deinonychus&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        // Shows accessing the list using the Item property.\n        Console.WriteLine(&quot;<br>dinosaurs[3]: {0}&quot;, dinosaurs[3]);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Compsognathus&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        dinosaurs.TrimExcess();\n        Console.WriteLine(&quot;<br>TrimExcess()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;<br>Clear()&quot;);\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity);\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n}\n\n/* This code example produces the following output:\n\nCapacity: 0\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nCapacity: 8\nCount: 5\n\nContains(&quot;Deinonychus&quot;): True\n\nInsert(2, &quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\ndinosaurs[3]: Mamenchisaurus\n\nRemove(&quot;Compsognathus&quot;)\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n\nTrimExcess()\nCapacity: 5\nCount: 5\n\nClear()\nCapacity: 5\nCount: 0\n */\n</code></pre><pre><code class=\"lang-fs\" name=\"List`1_Class#1\">\n[&lt;EntryPoint&gt;]\nlet main argv = \n    // We refer to System.Collections.Generic.List&lt;&#39;T&gt; by its type \n    // abbreviation ResizeArray&lt;&#39;T&gt; to avoid conflict with the List module.    \n    // Note: In F# code, F# linked lists are usually preferred over\n    // ResizeArray&lt;&#39;T&gt; when an extendable collection is required.\n    let dinosaurs = ResizeArray&lt;_&gt;()\n \n    // Write out the dinosaurs in the ResizeArray.\n    let printDinosaurs() =\n        printfn &quot;&quot;\n        dinosaurs |&gt; Seq.iter (fun p -&gt; printfn &quot;%O&quot; p) \n \n    \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n \n    dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n    dinosaurs.Add(&quot;Amargasaurus&quot;)\n    dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n    dinosaurs.Add(&quot;Deinonychus&quot;)\n    dinosaurs.Add(&quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    printfn &quot;<br>Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    printfn &quot;<br>Contains(\\&quot;Deinonychus\\&quot;): %b&quot; (dinosaurs.Contains(&quot;Deinonychus&quot;))\n \n    printfn &quot;<br>Insert(2, \\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n \n    printDinosaurs()\n \n    // Shows accessing the list using the Item property.\n    printfn &quot;<br>dinosaurs[3]: %s&quot; dinosaurs.[3]\n \n    printfn &quot;<br>Remove(\\&quot;Compsognathus\\&quot;)&quot;\n    dinosaurs.Remove(&quot;Compsognathus&quot;) |&gt; ignore\n \n    printDinosaurs()\n \n    dinosaurs.TrimExcess()\n    printfn &quot;<br>TrimExcess()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    dinosaurs.Clear()\n    printfn &quot;<br>Clear()&quot;\n    printfn &quot;Capacity: %i&quot; dinosaurs.Capacity\n    printfn &quot;Count: %i&quot; dinosaurs.Count\n \n    0 // return an integer exit code\n \n    (* This code example produces the following output:\n \nCapacity: 0\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nCapacity: 8\nCount: 5\n \nContains(&quot;Deinonychus&quot;): true\n \nInsert(2, &quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nCompsognathus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \ndinosaurs[3]: Mamenchisaurus\n \nRemove(&quot;Compsognathus&quot;)\n \nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nDeinonychus\nCompsognathus\n \nTrimExcess()\nCapacity: 5\nCount: 5\n \nClear()\nCapacity: 5\nCount: 0\n    *)\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_Class#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n        Dim dinosaurs As New List(Of String)\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n\n        dinosaurs.Add(&quot;Tyrannosaurus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Mamenchisaurus&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Deinonychus&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Deinonychus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n        &#39; Shows how to access the list using the Item property.\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(3): {0}&quot;, dinosaurs(3))\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Compsognathus&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Compsognathus&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        dinosaurs.TrimExcess()\n        Console.WriteLine(vbLf &amp; &quot;TrimExcess()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n        dinosaurs.Clear()\n        Console.WriteLine(vbLf &amp; &quot;Clear()&quot;)\n        Console.WriteLine(&quot;Capacity: {0}&quot;, dinosaurs.Capacity)\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Capacity: 0\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;Capacity: 8\n&#39;Count: 5\n&#39;\n&#39;Contains(&quot;Deinonychus&quot;): True\n&#39;\n&#39;Insert(2, &quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Compsognathus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;dinosaurs(3): Mamenchisaurus\n&#39;\n&#39;Remove(&quot;Compsognathus&quot;)\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Compsognathus\n&#39;\n&#39;TrimExcess()\n&#39;Capacity: 5\n&#39;Count: 5\n&#39;\n&#39;Clear()\n&#39;Capacity: 5\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_TrueForAll_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_TrueForAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrueForAll(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether every element in the <span class=\"xref\">stem.Collections.Generic.List`1</span> matches the conditions defined by the specified predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TrueForAll (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions to check against the elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if every element in the <span class=\"xref\">stem.Collections.Generic.List`1</span> matches the conditions defined by the specified predicate; otherwise, <code>false</code>. If the list has no elements, the return value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate, and processing is stopped when the delegate returns <code>false</code> for any element. The elements are processed in order, and all calls are made on a single thread.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the TrueForAll method and several other methods that use <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> generic delegate.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The TrueForAll method traverses the list from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>false</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"List`1_FindEtAl#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        List&lt;string&gt; dinosaurs = new List&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Amargasaurus&quot;);\n        dinosaurs.Add(&quot;Oviraptor&quot;);\n        dinosaurs.Add(&quot;Velociraptor&quot;);\n        dinosaurs.Add(&quot;Deinonychus&quot;);\n        dinosaurs.Add(&quot;Dilophosaurus&quot;);\n        dinosaurs.Add(&quot;Gallimimus&quot;);\n        dinosaurs.Add(&quot;Triceratops&quot;);\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>TrueForAll(EndsWithSaurus): {0}&quot;,\n            dinosaurs.TrueForAll(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>Find(EndsWithSaurus): {0}&quot;, \n            dinosaurs.Find(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>FindLast(EndsWithSaurus): {0}&quot;,\n            dinosaurs.FindLast(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>FindAll(EndsWithSaurus):&quot;);\n        List&lt;string&gt; sublist = dinosaurs.FindAll(EndsWithSaurus);\n\n        foreach(string dinosaur in sublist)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>{0} elements removed by RemoveAll(EndsWithSaurus).&quot;, \n            dinosaurs.RemoveAll(EndsWithSaurus));\n\n        Console.WriteLine(&quot;<br>List now contains:&quot;);\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Exists(EndsWithSaurus): {0}&quot;, \n            dinosaurs.Exists(EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        return s.ToLower().EndsWith(&quot;saurus&quot;);\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nTrueForAll(EndsWithSaurus): False\n\nFind(EndsWithSaurus): Amargasaurus\n\nFindLast(EndsWithSaurus): Dilophosaurus\n\nFindAll(EndsWithSaurus):\nAmargasaurus\nDilophosaurus\n\n2 elements removed by RemoveAll(EndsWithSaurus).\n\nList now contains:\nCompsognathus\nOviraptor\nVelociraptor\nDeinonychus\nGallimimus\nTriceratops\n\nExists(EndsWithSaurus): False\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"List`1_FindEtAl#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    return s-&gt;ToLower()-&gt;EndsWith(&quot;saurus&quot;);\n};\n\nvoid main()\n{\n    List&lt;String^&gt;^ dinosaurs = gcnew List&lt;String^&gt;();\n\n    dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n    dinosaurs-&gt;Add(&quot;Amargasaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Oviraptor&quot;);\n    dinosaurs-&gt;Add(&quot;Velociraptor&quot;);\n    dinosaurs-&gt;Add(&quot;Deinonychus&quot;);\n    dinosaurs-&gt;Add(&quot;Dilophosaurus&quot;);\n    dinosaurs-&gt;Add(&quot;Gallimimus&quot;);\n    dinosaurs-&gt;Add(&quot;Triceratops&quot;);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>TrueForAll(EndsWithSaurus): {0}&quot;,\n        dinosaurs-&gt;TrueForAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Find(EndsWithSaurus): {0}&quot;, \n        dinosaurs-&gt;Find(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>FindLast(EndsWithSaurus): {0}&quot;,\n        dinosaurs-&gt;FindLast(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>FindAll(EndsWithSaurus):&quot;);\n    List&lt;String^&gt;^ sublist = \n        dinosaurs-&gt;FindAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus));\n\n    for each(String^ dinosaur in sublist)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(\n        &quot;<br>{0} elements removed by RemoveAll(EndsWithSaurus).&quot;, \n        dinosaurs-&gt;RemoveAll(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>List now contains:&quot;);\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Exists(EndsWithSaurus): {0}&quot;, \n        dinosaurs-&gt;Exists(gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nTrueForAll(EndsWithSaurus): False\n\nFind(EndsWithSaurus): Amargasaurus\n\nFindLast(EndsWithSaurus): Dilophosaurus\n\nFindAll(EndsWithSaurus):\nAmargasaurus\nDilophosaurus\n\n2 elements removed by RemoveAll(EndsWithSaurus).\n\nList now contains:\nCompsognathus\nOviraptor\nVelociraptor\nDeinonychus\nGallimimus\nTriceratops\n\nExists(EndsWithSaurus): False\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"List`1_FindEtAl#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs As New List(Of String)\n\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Amargasaurus&quot;)\n        dinosaurs.Add(&quot;Oviraptor&quot;)\n        dinosaurs.Add(&quot;Velociraptor&quot;)\n        dinosaurs.Add(&quot;Deinonychus&quot;)\n        dinosaurs.Add(&quot;Dilophosaurus&quot;)\n        dinosaurs.Add(&quot;Gallimimus&quot;)\n        dinosaurs.Add(&quot;Triceratops&quot;)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;TrueForAll(AddressOf EndsWithSaurus: {0}&quot;, _\n            dinosaurs.TrueForAll(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Find(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.Find(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;FindLast(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.FindLast(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;FindAll(AddressOf EndsWithSaurus):&quot;)\n        Dim sublist As List(Of String) = _\n            dinosaurs.FindAll(AddressOf EndsWithSaurus)\n\n        For Each dinosaur As String In sublist\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;{0} elements removed by RemoveAll(AddressOf EndsWithSaurus).&quot;, _\n            dinosaurs.RemoveAll(AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; &quot;List now contains:&quot;)\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Exists(AddressOf EndsWithSaurus): {0}&quot;, _\n            dinosaurs.Exists(AddressOf EndsWithSaurus))\n        \n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        Return s.ToLower().EndsWith(&quot;saurus&quot;)\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;TrueForAll(AddressOf EndsWithSaurus: False\n&#39;\n&#39;Find(AddressOf EndsWithSaurus): Amargasaurus\n&#39;\n&#39;FindLast(AddressOf EndsWithSaurus): Dilophosaurus\n&#39;\n&#39;FindAll(AddressOf EndsWithSaurus):\n&#39;Amargasaurus\n&#39;Dilophosaurus\n&#39;\n&#39;2 elements removed by RemoveAll(AddressOf EndsWithSaurus).\n&#39;\n&#39;List now contains:\n&#39;Compsognathus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Exists(AddressOf EndsWithSaurus): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_Generic_ICollection_T__IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_Generic_ICollection_T__IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only; otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.List`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_Generic_IEnumerable_T__GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_Generic_IEnumerable_T__GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable&lt;T&gt;.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator<t></t></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerator`1</span> that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, the <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> property returns the same object until <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator instance instead.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_ICollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection.CopyTo (Array array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> <code>array</code> does not have zero-based indexing.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  </p>\n<p> -or-  </p>\n<p> The type of the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> If the type of the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> cannot be cast automatically to the type of the destination <code>array</code>, the nongeneric implementations of <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> throw <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>, whereas the generic implementations throw <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n</div>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_ICollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_ICollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe); otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.List`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace are not synchronized.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure.  In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> returns an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. Synchronization is effective only if all threads lock this object before accessing the collection.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_ICollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_ICollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.List`1</span>, this property always returns the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace are not synchronized.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> returns an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property for C#, C++, and Visual Basic.  </p>\n<pre><code class=\"lang-c#\">ICollection ic = ...;  \nlock (ic.SyncRoot)   \n{  \n    // Access the collection.  \n}  \n</code></pre><pre><code class=\"lang-vb#\">Dim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n    &#39; Access the collection.  \nEnd SyncLock  \n</code></pre><pre><code class=\"lang-cpp#\">ICollection^ ic = ...;  \ntry   \n{  \n    Monitor::Enter(ic-&gt;SyncRoot);  \n    // Access the collection.  \n}  \nfinally   \n{  \n    Monitor::Exit(ic-&gt;SyncRoot);  \n}  \n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IList_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IList_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.Add (object item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to add to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The position into which the new element was inserted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>item</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> is less than <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IList_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IList_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> contains a specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IList.Contains (object item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> is found in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IList_IndexOf_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IndexOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines the index of a specific item in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.IndexOf (object item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of <code>item</code> if found in the list; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>item</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IList_Insert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IList_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Insert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Insert (int index, object item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>item</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to insert into the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>item</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>index</code> equals the number of items in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>, then <code>item</code> is appended to the end.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IList_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IList_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IList.IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size; otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.List`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IList_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IList_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IList.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only; otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.List`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IList_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IList_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.IList.Item[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is set and <code>value</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The C# language uses the <a href=\"../Topic/this%20(C%23%20Reference).md\" data-linktype=\"relative-path\">this</a> keyword to define the indexers instead of implementing the IList.Item property. Visual Basic implements IList.Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_List_1_System_Collections_IList_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_List_1_System_Collections_IList_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Remove (object item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to remove from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>item</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.List-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.List-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.AddRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.AsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.BinarySearch\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Capacity\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.ConvertAll&lt;TOutput&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Exists\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Find\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.FindAll\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.FindIndex\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.FindLast\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.FindLastIndex\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.ForEach\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.GetRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.InsertRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.LastIndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.RemoveAll\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.RemoveRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Reverse\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.Sort\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.ICollection&lt;T&gt;.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IEnumerable&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.ICollection.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IList.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IList.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IList.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IList.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IList.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IList.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IList.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.IList.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.ToArray\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.TrimExcess\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.List&lt;T&gt;.TrueForAll\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e625373f-a8e3-c1e6-c1f6-9af3ed41ace4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.  \n To browse the .NET Framework source code for this type, see the Râ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Generic/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.List`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.List-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.List-1.yml","open_to_public_contributors":true,"api_name":["System.Collections.Generic.List<T>","System.Collections.Generic.List<T>..ctor","System.Collections.Generic.List<T>.Add","System.Collections.Generic.List<T>.AddRange","System.Collections.Generic.List<T>.AsReadOnly","System.Collections.Generic.List<T>.BinarySearch","System.Collections.Generic.List<T>.Capacity","System.Collections.Generic.List<T>.Clear","System.Collections.Generic.List<T>.Contains","System.Collections.Generic.List<T>.ConvertAll<TOutput>","System.Collections.Generic.List<T>.CopyTo","System.Collections.Generic.List<T>.Count","System.Collections.Generic.List<T>.Exists","System.Collections.Generic.List<T>.Find","System.Collections.Generic.List<T>.FindAll","System.Collections.Generic.List<T>.FindIndex","System.Collections.Generic.List<T>.FindLast","System.Collections.Generic.List<T>.FindLastIndex","System.Collections.Generic.List<T>.ForEach","System.Collections.Generic.List<T>.GetEnumerator","System.Collections.Generic.List<T>.GetRange","System.Collections.Generic.List<T>.IndexOf","System.Collections.Generic.List<T>.Insert","System.Collections.Generic.List<T>.InsertRange","System.Collections.Generic.List<T>.Item","System.Collections.Generic.List<T>.LastIndexOf","System.Collections.Generic.List<T>.Remove","System.Collections.Generic.List<T>.RemoveAll","System.Collections.Generic.List<T>.RemoveAt","System.Collections.Generic.List<T>.RemoveRange","System.Collections.Generic.List<T>.Reverse","System.Collections.Generic.List<T>.Sort","System.Collections.Generic.List<T>.ICollection<T>.IsReadOnly","System.Collections.Generic.List<T>.IEnumerable<T>.GetEnumerator","System.Collections.Generic.List<T>.ICollection.CopyTo","System.Collections.Generic.List<T>.ICollection.IsSynchronized","System.Collections.Generic.List<T>.ICollection.SyncRoot","System.Collections.Generic.List<T>.IEnumerable.GetEnumerator","System.Collections.Generic.List<T>.IList.Add","System.Collections.Generic.List<T>.IList.Contains","System.Collections.Generic.List<T>.IList.IndexOf","System.Collections.Generic.List<T>.IList.Insert","System.Collections.Generic.List<T>.IList.IsFixedSize","System.Collections.Generic.List<T>.IList.IsReadOnly","System.Collections.Generic.List<T>.IList.Item","System.Collections.Generic.List<T>.IList.Remove","System.Collections.Generic.List<T>.ToArray","System.Collections.Generic.List<T>.TrimExcess","System.Collections.Generic.List<T>.TrueForAll"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.List`1","System::Collections::Generic::List`1","System.Collections.Generic.List`1.#ctor","System::Collections::Generic::List`1::#ctor","System.Collections.Generic.List`1.Add","System::Collections::Generic::List`1::Add","System.Collections.Generic.List`1.AddRange","System::Collections::Generic::List`1::AddRange","System.Collections.Generic.List`1.AsReadOnly","System::Collections::Generic::List`1::AsReadOnly","System.Collections.Generic.List`1.BinarySearch","System::Collections::Generic::List`1::BinarySearch","System.Collections.Generic.List`1.Capacity","System::Collections::Generic::List`1::Capacity","System.Collections.Generic.List`1.Clear","System::Collections::Generic::List`1::Clear","System.Collections.Generic.List`1.Contains","System::Collections::Generic::List`1::Contains","System.Collections.Generic.List`1.ConvertAll``1","System::Collections::Generic::List`1::ConvertAll``1","System.Collections.Generic.List`1.CopyTo","System::Collections::Generic::List`1::CopyTo","System.Collections.Generic.List`1.Count","System::Collections::Generic::List`1::Count","System.Collections.Generic.List`1.Exists","System::Collections::Generic::List`1::Exists","System.Collections.Generic.List`1.Find","System::Collections::Generic::List`1::Find","System.Collections.Generic.List`1.FindAll","System::Collections::Generic::List`1::FindAll","System.Collections.Generic.List`1.FindIndex","System::Collections::Generic::List`1::FindIndex","System.Collections.Generic.List`1.FindLast","System::Collections::Generic::List`1::FindLast","System.Collections.Generic.List`1.FindLastIndex","System::Collections::Generic::List`1::FindLastIndex","System.Collections.Generic.List`1.ForEach","System::Collections::Generic::List`1::ForEach","System.Collections.Generic.List`1.GetEnumerator","System::Collections::Generic::List`1::GetEnumerator","System.Collections.Generic.List`1.GetRange","System::Collections::Generic::List`1::GetRange","System.Collections.Generic.List`1.IndexOf","System::Collections::Generic::List`1::IndexOf","System.Collections.Generic.List`1.Insert","System::Collections::Generic::List`1::Insert","System.Collections.Generic.List`1.InsertRange","System::Collections::Generic::List`1::InsertRange","System.Collections.Generic.List`1.Item","System::Collections::Generic::List`1::Item","System.Collections.Generic.List`1.LastIndexOf","System::Collections::Generic::List`1::LastIndexOf","System.Collections.Generic.List`1.Remove","System::Collections::Generic::List`1::Remove","System.Collections.Generic.List`1.RemoveAll","System::Collections::Generic::List`1::RemoveAll","System.Collections.Generic.List`1.RemoveAt","System::Collections::Generic::List`1::RemoveAt","System.Collections.Generic.List`1.RemoveRange","System::Collections::Generic::List`1::RemoveRange","System.Collections.Generic.List`1.Reverse","System::Collections::Generic::List`1::Reverse","System.Collections.Generic.List`1.Sort","System::Collections::Generic::List`1::Sort","System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly","System::Collections::Generic::List`1::System#Collections#Generic#ICollection{T}#IsReadOnly","System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator","System::Collections::Generic::List`1::System#Collections#Generic#IEnumerable{T}#GetEnumerator","System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo","System::Collections::Generic::List`1::System#Collections#ICollection#CopyTo","System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized","System::Collections::Generic::List`1::System#Collections#ICollection#IsSynchronized","System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot","System::Collections::Generic::List`1::System#Collections#ICollection#SyncRoot","System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator","System::Collections::Generic::List`1::System#Collections#IEnumerable#GetEnumerator","System.Collections.Generic.List`1.System#Collections#IList#Add","System::Collections::Generic::List`1::System#Collections#IList#Add","System.Collections.Generic.List`1.System#Collections#IList#Contains","System::Collections::Generic::List`1::System#Collections#IList#Contains","System.Collections.Generic.List`1.System#Collections#IList#IndexOf","System::Collections::Generic::List`1::System#Collections#IList#IndexOf","System.Collections.Generic.List`1.System#Collections#IList#Insert","System::Collections::Generic::List`1::System#Collections#IList#Insert","System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize","System::Collections::Generic::List`1::System#Collections#IList#IsFixedSize","System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly","System::Collections::Generic::List`1::System#Collections#IList#IsReadOnly","System.Collections.Generic.List`1.System#Collections#IList#Item","System::Collections::Generic::List`1::System#Collections#IList#Item","System.Collections.Generic.List`1.System#Collections#IList#Remove","System::Collections::Generic::List`1::System#Collections#IList#Remove","System.Collections.Generic.List`1.ToArray","System::Collections::Generic::List`1::ToArray","System.Collections.Generic.List`1.TrimExcess","System::Collections::Generic::List`1::TrimExcess","System.Collections.Generic.List`1.TrueForAll","System::Collections::Generic::List`1::TrueForAll"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e625373f-a8e3-c1e6-c1f6-9af3ed41ace4","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Generic/List`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"List<T> class | Microsoft Docs","_op_ogTitle":"List<T> class","description":"Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.  \n To browse the .NET Framework source code for this type, see the Râ€¦","toc_asset_id":"_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.List`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.list-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.list-1","fileRelativePath":"System.Collections.Generic.List-1.html"},"themesRelativePathToOutputRoot":"_themes/"}