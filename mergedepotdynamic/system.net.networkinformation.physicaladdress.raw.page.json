{"content":"    \r\n    <h1 id=\"System_Net_NetworkInformation_PhysicalAddress\">\r\n      <span class=\"lang-csharp\">PhysicalAddress</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the Media Access Control (MAC) address for a network interface (adapter).</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class PhysicalAddress</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">PhysicalAddress</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.  </p>\n<p> Instances of this class are returned by the <a class=\"xref\" href=\"system.net.networkinformation.networkinterface#System_Net_NetworkInformation_NetworkInterface_GetPhysicalAddress_\" data-linktype=\"relative-path\">GetPhysicalAddress</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PhysicalAddress__ctor_System_Byte___\" data-linktype=\"self-bookmark\">PhysicalAddress(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PhysicalAddress_None\" data-linktype=\"self-bookmark\">None</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instance with a zero length address. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PhysicalAddress_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instances.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PhysicalAddress_GetAddressBytes\" data-linktype=\"self-bookmark\">GetAddressBytes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the address of the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PhysicalAddress_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash value of a physical address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PhysicalAddress_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Parses the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and stores its contents as the address bytes of the <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> returned by this method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_PhysicalAddress_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representation of the address of this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PhysicalAddress__ctor_System_Byte___\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PhysicalAddress__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PhysicalAddress(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PhysicalAddress (byte[] address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array containing the address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <a class=\"xref\" href=\"system.net.networkinformation.networkinterface#System_Net_NetworkInformation_NetworkInterface_GetPhysicalAddress_\" data-linktype=\"relative-path\">GetPhysicalAddress</a> method.  </p>\n<p> Note that you can also use the <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress#System_Net_NetworkInformation_PhysicalAddress_Parse_\" data-linktype=\"relative-path\">Parse</a> method to create a new instance of <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLPhysicalAddress#4\">array&lt;PhysicalAddress^&gt;^ StoreNetworkInterfaceAddresses()\n{\n   IPGlobalProperties^ computerProperties = IPGlobalProperties::GetIPGlobalProperties();\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   if ( nics == nullptr || nics-&gt;Length &lt; 1 )\n   {\n      Console::WriteLine( L&quot;  No network interfaces found.&quot; );\n      return nullptr;\n   }\n\n   array&lt;PhysicalAddress^&gt;^ addresses = gcnew array&lt;PhysicalAddress^&gt;(nics-&gt;Length);\n   int i = 0;\n   IEnumerator^ myEnum2 = nics-&gt;GetEnumerator();\n   while ( myEnum2-&gt;MoveNext() )\n   {\n      NetworkInterface^ adapter = safe_cast&lt;NetworkInterface^&gt;(myEnum2-&gt;Current);\n      IPInterfaceProperties^ properties = adapter-&gt;GetIPProperties();\n      PhysicalAddress^ address = adapter-&gt;GetPhysicalAddress();\n      array&lt;Byte&gt;^bytes = address-&gt;GetAddressBytes();\n      PhysicalAddress^ newAddress = gcnew PhysicalAddress( bytes );\n      addresses[ i++ ] = newAddress;\n   }\n\n   return addresses;\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLPhysicalAddress#4\">            public static PhysicalAddress[] StoreNetworkInterfaceAddresses()\n        {\n            IPGlobalProperties computerProperties = IPGlobalProperties.GetIPGlobalProperties();\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            if (nics == null || nics.Length &lt; 1)\n            {\n                Console.WriteLine(&quot;  No network interfaces found.&quot;);\n                return null;\n            }\n                             \n            PhysicalAddress[] addresses = new PhysicalAddress[nics.Length];\n            int i = 0;\n            foreach (NetworkInterface adapter in nics)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                PhysicalAddress address = adapter.GetPhysicalAddress();\n                byte[] bytes = address.GetAddressBytes();\n                PhysicalAddress newAddress =  new PhysicalAddress(bytes);\n                addresses[i++]=newAddress;\n             }\n            return addresses;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PhysicalAddress_None\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">None</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instance with a zero length address. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Net.NetworkInformation.PhysicalAddress None;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress#System_Net_NetworkInformation_PhysicalAddress_Parse_\" data-linktype=\"relative-path\">Parse</a> method returns None if you specify <code>null</code> address.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this field to test the result of parsing an address.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLPhysicalAddress#5\">PhysicalAddress^ StrictParseAddress( String^ address )\n{\n   PhysicalAddress^ newAddress = PhysicalAddress::Parse( address );\n   if ( PhysicalAddress::None-&gt;Equals( newAddress ) )\n      return nullptr;\n\n   return newAddress;\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLPhysicalAddress#5\">        public static PhysicalAddress StrictParseAddress(string address)\n        {\n            PhysicalAddress newAddress = PhysicalAddress.Parse(address);\n            if (PhysicalAddress.None.Equals(newAddress))\n                return null;\n\n            return newAddress;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PhysicalAddress_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PhysicalAddress_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instances.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object comparand);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparand</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> to compare to the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this instance and the specified instance contain the same address; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares two <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instances.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLPhysicalAddress#3\">void ParseTest()\n{\n   PhysicalAddress^ address = PhysicalAddress::Parse( L&quot;AC1EBA22&quot; );\n   Console::WriteLine( L&quot;Address parsed as {0}&quot;, address-&gt;ToString() );\n   PhysicalAddress^ address2 = PhysicalAddress::Parse( L&quot;ac1eba22&quot; );\n   Console::WriteLine( L&quot;Address2 parsed as {0}&quot;, address2-&gt;ToString() );\n   bool test = address-&gt;Equals( address2 );\n   Console::WriteLine( L&quot;Equal? {0}&quot;, test );\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLPhysicalAddress#3\">        public static void ParseTest()\n        {\n            PhysicalAddress address = PhysicalAddress.Parse(&quot;AC1EBA22&quot;);\n            Console.WriteLine(&quot;Address parsed as {0}&quot;, address.ToString());\n            PhysicalAddress address2 = PhysicalAddress.Parse(&quot;ac1eba22&quot;);\n            Console.WriteLine(&quot;Address2 parsed as {0}&quot;, address2.ToString());\n            bool test = address.Equals(address2);\n            Console.WriteLine(&quot;Equal? {0}&quot;, test);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PhysicalAddress_GetAddressBytes\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PhysicalAddress_GetAddressBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAddressBytes()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the address of the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] GetAddressBytes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array containing the address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls this method to retrieve the address of a <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> and formats the address for display.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLPhysicalAddress#2\">void ShowNetworkInterfaces()\n{\n   IPGlobalProperties^ computerProperties = IPGlobalProperties::GetIPGlobalProperties();\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   Console::WriteLine( L&quot;Interface information for {0}.{1}     &quot;, computerProperties-&gt;HostName, computerProperties-&gt;DomainName );\n   if ( nics == nullptr || nics-&gt;Length &lt; 1 )\n   {\n      Console::WriteLine( L&quot;  No network interfaces found.&quot; );\n      return;\n   }\n\n   Console::WriteLine( L&quot;  Number of interfaces .................... : {0}&quot;, (nics-&gt;Length).ToString() );\n   IEnumerator^ myEnum1 = nics-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      NetworkInterface^ adapter = safe_cast&lt;NetworkInterface^&gt;(myEnum1-&gt;Current);\n      IPInterfaceProperties^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      Console::WriteLine( L&quot;  Interface type .......................... : {0}&quot;, adapter-&gt;NetworkInterfaceType );\n      Console::Write( L&quot;  Physical address ........................ : &quot; );\n      PhysicalAddress^ address = adapter-&gt;GetPhysicalAddress();\n      array&lt;Byte&gt;^bytes = address-&gt;GetAddressBytes();\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n      {\n         \n         // Display the physical address in hexadecimal.\n         Console::Write( L&quot;{0}&quot;, bytes[ i ].ToString( L&quot;X2&quot; ) );\n         \n         // Insert a hyphen after each byte, unless we are at the end of the \n         // address.\n         if ( i != bytes-&gt;Length - 1 )\n         {\n            Console::Write( L&quot;-&quot; );\n         }\n\n      }\n      Console::WriteLine();\n   }\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLPhysicalAddress#2\">        public static void ShowNetworkInterfaces()\n        {\n            IPGlobalProperties computerProperties = IPGlobalProperties.GetIPGlobalProperties();\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            Console.WriteLine(&quot;Interface information for {0}.{1}     &quot;,\n                    computerProperties.HostName, computerProperties.DomainName);\n            if (nics == null || nics.Length &lt; 1)\n            {\n                Console.WriteLine(&quot;  No network interfaces found.&quot;);\n                return;\n            }\n                             \n            Console.WriteLine(&quot;  Number of interfaces .................... : {0}&quot;, nics.Length);\n            foreach (NetworkInterface adapter in nics)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties(); //  .GetIPInterfaceProperties();\n                Console.WriteLine();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                Console.WriteLine(&quot;  Interface type .......................... : {0}&quot;, adapter.NetworkInterfaceType);\n                Console.Write(&quot;  Physical address ........................ : &quot;);\n                PhysicalAddress address = adapter.GetPhysicalAddress();\n                byte[] bytes = address.GetAddressBytes();\n                for(int i = 0; i&lt; bytes.Length; i++)\n                {\n                    // Display the physical address in hexadecimal.\n                    Console.Write(&quot;{0}&quot;, bytes[i].ToString(&quot;X2&quot;));\n                    // Insert a hyphen after each byte, unless we are at the end of the \n                    // address.\n                    if (i != bytes.Length -1)\n                    {\n                         Console.Write(&quot;-&quot;);\n                    }\n                }\n                Console.WriteLine();\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PhysicalAddress_GetHashCode\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PhysicalAddress_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash value of a physical address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer hash value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PhysicalAddress_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PhysicalAddress_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Parses the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and stores its contents as the address bytes of the <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> returned by this method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.NetworkInformation.PhysicalAddress Parse (string address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the address that will be used to initialize the <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instance returned by this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instance with the specified address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The <code>address</code> parameter contains an illegal hardware address.  </p>\n<p> This exception also occurs if the <code>address</code> parameter contains a string in the incorrect format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>address</code> parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits. Some examples of string formats that are acceptable are as follows:  </p>\n<p> <code>001122334455</code>  </p>\n<p> <code>00-11-22-33-44-55</code>  </p>\n<p> <code>F0-E1-D2-C3-B4-A5</code>  </p>\n<p> Note that an address that contains <code>f0-e1-d2-c3-b4-a5</code> will fail to parse and throw an exception.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress#System_Net_NetworkInformation_PhysicalAddress_GetAddressBytes_\" data-linktype=\"relative-path\">GetAddressBytes</a> method to retrieve the address from an existing <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instance by calling the Parse method.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLPhysicalAddress#5\">PhysicalAddress^ StrictParseAddress( String^ address )\n{\n   PhysicalAddress^ newAddress = PhysicalAddress::Parse( address );\n   if ( PhysicalAddress::None-&gt;Equals( newAddress ) )\n      return nullptr;\n\n   return newAddress;\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLPhysicalAddress#5\">        public static PhysicalAddress StrictParseAddress(string address)\n        {\n            PhysicalAddress newAddress = PhysicalAddress.Parse(address);\n            if (PhysicalAddress.None.Equals(newAddress))\n                return null;\n\n            return newAddress;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_PhysicalAddress_ToString\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_PhysicalAddress_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> representation of the address of this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the address contained in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the address in a <a class=\"xref\" href=\"system.net.networkinformation.physicaladdress\" data-linktype=\"relative-path\">PhysicalAddress</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLPhysicalAddress#3\">void ParseTest()\n{\n   PhysicalAddress^ address = PhysicalAddress::Parse( L&quot;AC1EBA22&quot; );\n   Console::WriteLine( L&quot;Address parsed as {0}&quot;, address-&gt;ToString() );\n   PhysicalAddress^ address2 = PhysicalAddress::Parse( L&quot;ac1eba22&quot; );\n   Console::WriteLine( L&quot;Address2 parsed as {0}&quot;, address2-&gt;ToString() );\n   bool test = address-&gt;Equals( address2 );\n   Console::WriteLine( L&quot;Equal? {0}&quot;, test );\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLPhysicalAddress#3\">        public static void ParseTest()\n        {\n            PhysicalAddress address = PhysicalAddress.Parse(&quot;AC1EBA22&quot;);\n            Console.WriteLine(&quot;Address parsed as {0}&quot;, address.ToString());\n            PhysicalAddress address2 = PhysicalAddress.Parse(&quot;ac1eba22&quot;);\n            Console.WriteLine(&quot;Address2 parsed as {0}&quot;, address2.ToString());\n            bool test = address.Equals(address2);\n            Console.WriteLine(&quot;Equal? {0}&quot;, test);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.PhysicalAddress.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.PhysicalAddress.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PhysicalAddress\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PhysicalAddress..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PhysicalAddress.Equals\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PhysicalAddress.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PhysicalAddress.None\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PhysicalAddress.Parse\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PhysicalAddress.ToString\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"61d9aaac-4e5f-d7cf-d223-97e21db126cb\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net.NetworkInformation\\PhysicalAddress.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the Media Access Control (MAC) address for a network interface (adapter).\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.NetworkInformation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.PhysicalAddress\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.PhysicalAddress.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.PhysicalAddress.yml","open_to_public_contributors":true,"api_name":["System.Net.NetworkInformation.PhysicalAddress","System.Net.NetworkInformation.PhysicalAddress..ctor","System.Net.NetworkInformation.PhysicalAddress.Equals","System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes","System.Net.NetworkInformation.PhysicalAddress.GetHashCode","System.Net.NetworkInformation.PhysicalAddress.None","System.Net.NetworkInformation.PhysicalAddress.Parse","System.Net.NetworkInformation.PhysicalAddress.ToString"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.PhysicalAddress","System::Net::NetworkInformation::PhysicalAddress","System.Net.NetworkInformation.PhysicalAddress.#ctor","System::Net::NetworkInformation::PhysicalAddress::#ctor","System.Net.NetworkInformation.PhysicalAddress.Equals","System::Net::NetworkInformation::PhysicalAddress::Equals","System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes","System::Net::NetworkInformation::PhysicalAddress::GetAddressBytes","System.Net.NetworkInformation.PhysicalAddress.GetHashCode","System::Net::NetworkInformation::PhysicalAddress::GetHashCode","System.Net.NetworkInformation.PhysicalAddress.None","System::Net::NetworkInformation::PhysicalAddress::None","System.Net.NetworkInformation.PhysicalAddress.Parse","System::Net::NetworkInformation::PhysicalAddress::Parse","System.Net.NetworkInformation.PhysicalAddress.ToString","System::Net::NetworkInformation::PhysicalAddress::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"61d9aaac-4e5f-d7cf-d223-97e21db126cb","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net.NetworkInformation\\PhysicalAddress.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PhysicalAddress class | Microsoft Docs","_op_ogTitle":"PhysicalAddress class","description":"Provides the Media Access Control (MAC) address for a network interface (adapter).\n","toc_asset_id":"_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.PhysicalAddress","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.physicaladdress","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.physicaladdress","fileRelativePath":"System.Net.NetworkInformation.PhysicalAddress.html"},"themesRelativePathToOutputRoot":"_themes/"}