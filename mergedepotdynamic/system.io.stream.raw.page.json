{"content":"    \r\n    <h1 id=\"System_IO_Stream\">\r\n      <span class=\"lang-csharp\">Stream</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a generic view of a sequence of bytes. This is an abstract class.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Stream : MarshalByRefObject, IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Stream</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Stream is the abstract base class of all streams. A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket. The Stream class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.  </p>\n<p> Streams involve three fundamental operations:  </p>\n<ul>\n<li><p>You can read from streams. Reading is the transfer of data from a stream into a data structure, such as an array of bytes.  </p>\n</li>\n<li><p>You can write to streams. Writing is the transfer of data from a data structure into a stream.  </p>\n</li>\n<li><p>Streams can support seeking. Seeking refers to querying and modifying the current position within a stream. Seek capability depends on the kind of backing store a stream has. For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.  </p>\n<p>Some of the more commonly used streams that inherit from Stream are <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>, and <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>.  </p>\n<p>Depending on the underlying data source or repository, streams might support only some of these capabilities. You can query a stream for its capabilities by using the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanRead_\" data-linktype=\"relative-path\">CanRead</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a>, and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanSeek_\" data-linktype=\"relative-path\">CanSeek</a> properties of the Stream class.  </p>\n<p>The <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Read_\" data-linktype=\"relative-path\">Read</a> and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> methods read and write data in a variety of formats. For streams that support seeking, use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Seek_\" data-linktype=\"relative-path\">Seek</a> and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_SetLength_\" data-linktype=\"relative-path\">SetLength</a> methods and the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Position_\" data-linktype=\"relative-path\">Position</a> and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Length_\" data-linktype=\"relative-path\">Length</a> properties to query and modify the current position and length of a stream.  </p>\n<p>This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n<p>Disposing a Stream object flushes any buffered data, and essentially calls the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Flush_\" data-linktype=\"relative-path\">Flush</a> method for you. <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Dispose_\" data-linktype=\"relative-path\">Dispose</a> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering. The <a class=\"xref\" href=\"system.io.bufferedstream\" data-linktype=\"relative-path\">BufferedStream</a> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.  </p>\n<p>Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE -->, the Stream class includes async methods to simplify asynchronous operations. An async method contains <code>Async</code> in its name, such as <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_\" data-linktype=\"relative-path\">ReadAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_\" data-linktype=\"relative-path\">WriteAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_\" data-linktype=\"relative-path\">CopyToAsync</a>, and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync_\" data-linktype=\"relative-path\">FlushAsync</a>. These methods enable you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/desktop-appname-md.md&quot; -->desktop<!--END INCLUDE --> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <code>async</code> and <code>await</code> keywords in Visual Basic and C#.  </p>\n<p>When used in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app, Stream includes two extension methods: &lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt; and &lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;. These methods convert a Stream object to a stream in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/wrt-md.md&quot; -->Windows Runtime<!--END INCLUDE -->. You can also convert a stream in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/wrt-md.md&quot; -->Windows Runtime<!--END INCLUDE --> to a Stream object by using the &lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt; and &lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt; methods. For more information, see <a href=\"../Topic/How%20to:%20Convert%20Between%20.NET%20Framework%20Streams%20and%20Windows%20Runtime%20Streams.md\" data-linktype=\"relative-path\">How to: Convert Between .NET Framework Streams and Windows Runtime Streams</a>  </p>\n<p>Some stream implementations perform local buffering of the underlying data to improve performance. For such streams, you can use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Flush_\" data-linktype=\"relative-path\">Flush</a> or <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync_\" data-linktype=\"relative-path\">FlushAsync</a> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.  </p>\n<p>If you need a stream with no backing store (also known as a bit bucket), use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Null\" data-linktype=\"relative-path\">Null</a> field to retrieve an instance of a stream that is designed for this purpose.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream__ctor\" data-linktype=\"self-bookmark\">Stream()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Null\" data-linktype=\"self-bookmark\">Null</a></div>\r\n          </td>\r\n            <td>\r\n            <p>A <code>Stream</code> with no backing store.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CanRead\" data-linktype=\"self-bookmark\">CanRead</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CanSeek\" data-linktype=\"self-bookmark\">CanSeek</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CanTimeout\" data-linktype=\"self-bookmark\">CanTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that determines whether the current stream can time out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CanWrite\" data-linktype=\"self-bookmark\">CanWrite</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets the length in bytes of the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Position\" data-linktype=\"self-bookmark\">Position</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets or sets the position within the current stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_ReadTimeout\" data-linktype=\"self-bookmark\">ReadTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_WriteTimeout\" data-linktype=\"self-bookmark\">WriteTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_BeginRead_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous read operation. (Consider using <span class=\"xref\">stem.IO.Stream.ReadAsync*</span> instead; see the Remarks section.)</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_BeginWrite_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous write operation. (Consider using <span class=\"xref\">stem.IO.Stream.WriteAsync*</span> instead; see the Remarks section.)</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CopyTo_System_IO_Stream_\" data-linktype=\"self-bookmark\">CopyTo(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the bytes from the current stream and writes them to another stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CopyTo_System_IO_Stream_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Stream,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CopyToAsync_System_IO_Stream_\" data-linktype=\"self-bookmark\">CopyToAsync(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the bytes from the current stream and writes them to another stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_\" data-linktype=\"self-bookmark\">CopyToAsync(Stream,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">CopyToAsync(Stream,Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_CreateWaitHandle\" data-linktype=\"self-bookmark\">CreateWaitHandle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_EndRead_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndRead(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for the pending asynchronous read to complete. (Consider using <span class=\"xref\">stem.IO.Stream.ReadAsync*</span> instead; see the Remarks section.)</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_EndWrite_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndWrite(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous write operation. (Consider using <span class=\"xref\">stem.IO.Stream.WriteAsync*</span> instead; see the Remarks section.)</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_FlushAsync\" data-linktype=\"self-bookmark\">FlushAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_FlushAsync_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">FlushAsync(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_ObjectInvariant\" data-linktype=\"self-bookmark\">ObjectInvariant()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides support for a <a class=\"xref\" href=\"system.diagnostics.contracts.contract\" data-linktype=\"relative-path\">Contract</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Read_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Read(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ReadAsync(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ReadAsync(Byte[],Int32,Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_ReadByte\" data-linktype=\"self-bookmark\">ReadByte()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Seek_System_Int64_System_IO_SeekOrigin_\" data-linktype=\"self-bookmark\">Seek(Int64,SeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, sets the position within the current stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_SetLength_System_Int64_\" data-linktype=\"self-bookmark\">SetLength(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, sets the length of the current stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Synchronized_System_IO_Stream_\" data-linktype=\"self-bookmark\">Synchronized(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a thread-safe (synchronized) wrapper around the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_Write_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Write(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteAsync(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WriteAsync(Byte[],Int32,Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Stream_WriteByte_System_Byte_\" data-linktype=\"self-bookmark\">WriteByte(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream__ctor\">\r\n    \r\n            <a id=\"System_IO_Stream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stream()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Stream ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> is the abstract base class of all streams.  </p>\n<p> Some of the more commonly used streams that inherit from <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> are <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>, and <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Null\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Null</div>        \r\n          </div>\r\n    \r\n            <p>A <code>Stream</code> with no backing store.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.IO.Stream Null;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <code>Null</code> to redirect output to a stream that will not consume any operating system resources. When the methods of <code>Stream</code> that provide writing are invoked on <code>Null</code>, the call simply returns, and no data is written. <code>Null</code> also implements a <code>Read</code> method that returns zero without reading data.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CanRead\">\r\n    \r\n            <a id=\"System_IO_Stream_CanRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanRead</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool CanRead { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the stream supports reading; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a class derived from <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> does not support reading, calls to the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Read_\" data-linktype=\"relative-path\">Read</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadByte_\" data-linktype=\"relative-path\">ReadByte</a>, and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_BeginRead_\" data-linktype=\"relative-path\">BeginRead</a> methods throw a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.  </p>\n<p> If the stream is closed, this property returns <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following is an example of using the <code>CanRead</code> property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic FileStream.CanRead Example#1\">using System;\nusing System.IO;\n \nclass TestRW \n{\n    public static void Main(String[] args)\n    {\n        FileStream fs = new FileStream(&quot;MyFile.txt&quot;, FileMode.OpenOrCreate, FileAccess.Read);\n        if (fs.CanRead &amp;&amp; fs.CanWrite)\n        {\n            Console.WriteLine(&quot;MyFile.txt can be both written to and read from.&quot;);\n        }\n        else if (fs.CanRead)\n        {\n            Console.WriteLine(&quot;MyFile.txt is not writable.&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic FileStream.CanRead Example#1\">using namespace System;\nusing namespace System::IO;\nint main( void )\n{\n   FileStream^ fs = gcnew FileStream( &quot;MyFile.txt&quot;,FileMode::OpenOrCreate,FileAccess::Read );\n   if ( fs-&gt;CanRead &amp;&amp; fs-&gt;CanWrite )\n   {\n      Console::WriteLine( &quot;MyFile.txt can be both written to and read from.&quot; );\n   }\n   else\n   {\n      Console::WriteLine( &quot;MyFile.txt is not writable&quot; );\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FileStream.CanRead Example#1\">Imports System\nImports System.IO\n\nClass TestRW\n\n    Public Shared Sub Main()\n        Dim fs As New FileStream(&quot;MyFile.txt&quot;, FileMode.OpenOrCreate, FileAccess.Read)\n        If fs.CanRead And fs.CanWrite Then\n            Console.WriteLine(&quot;MyFile.txt can be both written to and read from.&quot;)\n        Else\n            If fs.CanRead Then\n                Console.WriteLine(&quot;MyFile.txt is not writable.&quot;)\n            End If\n        End If\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CanSeek\">\r\n    \r\n            <a id=\"System_IO_Stream_CanSeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanSeek</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool CanSeek { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the stream supports seeking; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a class derived from <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> does not support seeking, calls to <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Length_\" data-linktype=\"relative-path\">Length</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_SetLength_\" data-linktype=\"relative-path\">SetLength</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Position_\" data-linktype=\"relative-path\">Position</a>, and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Seek_\" data-linktype=\"relative-path\">Seek</a> throw a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.  </p>\n<p> If the stream is closed, this property returns <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CanTimeout\">\r\n    \r\n            <a id=\"System_IO_Stream_CanTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that determines whether the current stream can time out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CanTimeout { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>A value that determines whether the current stream can time out.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CanTimeout property always returns <code>false</code>. Some stream implementations require different behavior, such as <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a>, which times out if network connectivity is interrupted or lost. If you are implementing a stream that must be able to time out, this property should be overridden to return <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CanWrite\">\r\n    \r\n            <a id=\"System_IO_Stream_CanWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanWrite</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool CanWrite { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the stream supports writing; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a class derived from <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> does not support writing, a call to <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_BeginWrite_\" data-linktype=\"relative-path\">BeginWrite</a>, or <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteByte_\" data-linktype=\"relative-path\">WriteByte</a> throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.  </p>\n<p> If the stream is closed, this property returns <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following is an example of using the <code>CanWrite</code> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Stream.CanWrite Example#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   FileStream^ fs = gcnew FileStream( &quot;MyFile.txt&quot;,FileMode::OpenOrCreate,FileAccess::Write );\n   if ( fs-&gt;CanRead &amp;&amp; fs-&gt;CanWrite )\n   {\n      Console::WriteLine( &quot;MyFile.txt can be both written to and read from.&quot; );\n   }\n   else\n   if ( fs-&gt;CanWrite )\n   {\n      Console::WriteLine( &quot;MyFile.txt is writable.&quot; );\n   }\n}\n\n//This code outputs &quot;MyFile.txt is writable.&quot;\n//To get the output message &quot;MyFile.txt can be both written to and read from.&quot;,\n//change the FileAccess parameter to ReadWrite in the FileStream constructor.\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Stream.CanWrite Example#1\">Imports System\nImports System.IO\n\nClass TestRW    \n\n    Public Shared Sub Main()\n        Dim fs As New FileStream(&quot;MyFile.txt&quot;, FileMode.OpenOrCreate, _\n           FileAccess.Write)\n        If fs.CanRead And fs.CanWrite Then\n            Console.WriteLine(&quot;MyFile.txt can be both written to and read from.&quot;)\n        Else\n            If fs.CanWrite Then\n                Console.WriteLine(&quot;MyFile.txt is writable.&quot;)\n            End If\n        End If\n    End Sub\nEnd Class\n\n&#39;This code outputs &quot;MyFile.txt is writable.&quot;\n&#39;To get the output message &quot;MyFile.txt can be both written to and read from.&quot;,\n&#39;change the FileAccess parameter to ReadWrite in the FileStream constructor.\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Stream.CanWrite Example#1\"> using System;\n using System.IO;\n \n class TestRW \n {\n   public static void Main(String[] args)\n   { \n     FileStream fs = new FileStream(&quot;MyFile.txt&quot;, FileMode.OpenOrCreate,\n        FileAccess.Write);\n     if (fs.CanRead &amp;&amp; fs.CanWrite) {\n         Console.WriteLine(&quot;MyFile.txt can be both written to and read from.&quot;);\n     }\n     else if (fs.CanWrite) {\n         Console.WriteLine(&quot;MyFile.txt is writable.&quot;);\n     }\n   }\n }\n //This code outputs &quot;MyFile.txt is writable.&quot;\n //To get the output message &quot;MyFile.txt can be both written to and read from.&quot;,\n //change the FileAccess parameter to ReadWrite in the FileStream constructor.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Length\">\r\n    \r\n            <a id=\"System_IO_Stream_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets the length in bytes of the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract long Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A long value representing the length of the stream in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>A class derived from <code>Stream</code> does not support seeking.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Position\">\r\n    \r\n            <a id=\"System_IO_Stream_Position_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Position</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets or sets the position within the current stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract long Position { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The current position within the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support seeking.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The stream must support seeking to get or set the position. Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanSeek_\" data-linktype=\"relative-path\">CanSeek</a> property to determine whether the stream supports seeking.  </p>\n<p> Seeking to any location beyond the length of the stream is supported.  </p>\n<p> The <code>Position</code> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_ReadTimeout\">\r\n    \r\n            <a id=\"System_IO_Stream_ReadTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The ReadTimeout method always throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_WriteTimeout\">\r\n    \r\n            <a id=\"System_IO_Stream_WriteTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int WriteTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The WriteTimeout method always throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_BeginRead_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_IO_Stream_BeginRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous read operation. (Consider using <span class=\"xref\">stem.IO.Stream.ReadAsync*</span> instead; see the Remarks section.)</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to read the data into.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte offset in <code>buffer</code> at which to begin writing data read from the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An optional asynchronous callback, to be called when the read is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-provided object that distinguishes this particular asynchronous read request from other requests.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that represents the asynchronous read, which could still be pending.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>Attempted an asynchronous read past the end of the stream, or a disk error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>One or more of the arguments is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current <code>Stream</code> implementation does not support the read operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework 4 and earlier versions, you have to use methods such as BeginRead and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndRead_\" data-linktype=\"relative-path\">EndRead</a> to implement asynchronous I/O operations. These methods are still available in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE --> to support legacy code; however, the new async methods, such as <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_\" data-linktype=\"relative-path\">ReadAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_\" data-linktype=\"relative-path\">WriteAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_\" data-linktype=\"relative-path\">CopyToAsync</a>, and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync_\" data-linktype=\"relative-path\">FlushAsync</a>, help you implement asynchronous I/O operations more easily.  </p>\n<p> The default implementation of <code>BeginRead</code> on a stream calls the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Read_\" data-linktype=\"relative-path\">Read</a> method synchronously, which means that <code>Read</code> might block on some streams. However, instances of classes such as <code>FileStream</code> and <code>NetworkStream</code> fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to <code>BeginRead</code> will not block on those streams. You can override <code>BeginRead</code> (by using async delegates, for example) to provide asynchronous behavior.  </p>\n<p> Pass the <code>IAsyncResult</code> return value to the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndRead_\" data-linktype=\"relative-path\">EndRead</a> method of the stream to determine how many bytes were read and to release operating system resources used for reading. <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndRead_\" data-linktype=\"relative-path\">EndRead</a> must be called once for every call to BeginRead. You can do this either by using the same code that called <code>BeginRead</code> or in a callback passed to <code>BeginRead</code>.  </p>\n<p> The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.  </p>\n<p> Multiple simultaneous asynchronous requests render the request completion order uncertain.  </p>\n<p> Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanRead_\" data-linktype=\"relative-path\">CanRead</a> property to determine whether the current instance supports reading.  </p>\n<p> If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <code>BeginRead</code>. Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <code>EndRead</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_BeginWrite_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_IO_Stream_BeginWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous write operation. (Consider using <span class=\"xref\">stem.IO.Stream.WriteAsync*</span> instead; see the Remarks section.)</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to write data from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte offset in <code>buffer</code> from which to begin writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An optional asynchronous callback, to be called when the write is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-provided object that distinguishes this particular asynchronous write request from other requests.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <code>IAsyncResult</code> that represents the asynchronous write, which could still be pending.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>Attempted an asynchronous write past the end of the stream, or a disk error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>One or more of the arguments is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current <code>Stream</code> implementation does not support the write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework 4 and earlier versions, you have to use methods such as BeginWrite and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndWrite_\" data-linktype=\"relative-path\">EndWrite</a> to implement asynchronous I/O operations. These methods are still available in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE --> to support legacy code; however, the new async methods, such as <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_\" data-linktype=\"relative-path\">ReadAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_\" data-linktype=\"relative-path\">WriteAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_\" data-linktype=\"relative-path\">CopyToAsync</a>, and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync_\" data-linktype=\"relative-path\">FlushAsync</a>, help you implement asynchronous I/O operations more easily.  </p>\n<p> The default implementation of <code>BeginWrite</code> on a stream calls the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> method synchronously, which means that <code>Write</code> might block on some streams. However, instances of classes such as <code>FileStream</code> and <code>NetworkStream</code> fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to <code>BeginWrite</code> will not block on those streams. You can override <code>BeginWrite</code> (by using async delegates, for example) to provide asynchronous behavior.  </p>\n<p> Pass the <code>IAsyncResult</code> returned by the current method to <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndWrite_\" data-linktype=\"relative-path\">EndWrite</a> to ensure that the write completes and frees resources appropriately. <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndWrite_\" data-linktype=\"relative-path\">EndWrite</a> must be called once for every call to BeginWrite. You can do this either by using the same code that called <code>BeginWrite</code> or in a callback passed to <code>BeginWrite</code>. If an error occurs during an asynchronous write, an exception will not be thrown until <code>EndWrite</code> is called with the <code>IAsyncResult</code> returned by this method.  </p>\n<p> If a stream is writable, writing at the end of the stream expands the stream.  </p>\n<p> The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes. Multiple simultaneous asynchronous requests render the request completion order uncertain.  </p>\n<p> Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property to determine whether the current instance supports writing.  </p>\n<p> If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <code>BeginWrite</code>. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <code>EndWrite</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Close\">\r\n    \r\n            <a id=\"System_IO_Stream_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method calls <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Dispose_\" data-linktype=\"relative-path\">Dispose</a>, specifying <code>true</code> to release all resources. You do not have to specifically call the Close method. Instead, ensure that every <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object is properly disposed. You can declare <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> objects within a <code>using</code> block (or <code>Using</code> block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method.  </p>\n<p> Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Flush_\" data-linktype=\"relative-path\">Flush</a> or <code>Close</code>. Setting <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> to <code>true</code> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  </p>\n<p> Attempts to manipulate the stream after the stream has been closed might throw an <a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CopyTo_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_IO_Stream_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the bytes from the current stream and writes them to another stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (System.IO.Stream destination);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the contents of the current stream will be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destination</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current stream does not support reading.  </p>\n<p> -or-  </p>\n<p> <code>destination</code> does not support writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Either the current stream or <code>destination</code> were closed before the CopyTo method was called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies the contents of a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> to a <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Stream.CopyTo#1\">&#39; Create the streams.\nDim destination As New MemoryStream()\n\nUsing source As FileStream = File.Open(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\data.dat&quot;, _\n                                       FileMode.Open)\n    Console.WriteLine(&quot;Source length: {0}&quot;, source.Length.ToString())\n\n    &#39; Copy source to destination.\n    source.CopyTo(destination)\n\nEnd Using\nConsole.WriteLine(&quot;Destination length: {0}&quot;, destination.Length.ToString())\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Stream.CopyTo#1\">// Create the streams.\nMemoryStream destination = new MemoryStream();\n\nusing (FileStream source = File.Open(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\data.dat&quot;,\n    FileMode.Open))\n{\n\n    Console.WriteLine(&quot;Source length: {0}&quot;, source.Length.ToString());\n\n    // Copy source to destination.\n    source.CopyTo(destination);\n}\n\nConsole.WriteLine(&quot;Destination length: {0}&quot;, destination.Length.ToString());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CopyTo_System_IO_Stream_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_Stream_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Stream,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (System.IO.Stream destination, int bufferSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the contents of the current stream will be copied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the buffer. This value must be greater than zero. The default size is 81920.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destination</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>bufferSize</code> is negative or zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current stream does not support reading.  </p>\n<p> -or-  </p>\n<p> <code>destination</code> does not support writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Either the current stream or <code>destination</code> were closed before the <span class=\"xref\">stem.IO.Stream.CopyTo*</span> method was called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CopyToAsync_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_IO_Stream_CopyToAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyToAsync(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the bytes from the current stream and writes them to another stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the contents of the current stream will be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous copy operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destination</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Either the current stream or the destination stream is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current stream does not support reading, or the destination stream does not support writing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CopyToAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/desktop-appname-md.md&quot; -->desktop<!--END INCLUDE --> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <code>async</code> and <code>await</code> keywords in Visual Basic and C#.  </p>\n<p> Copying begins at the current position in the current stream.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use two <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> objects to asynchronously copy the files from one directory to another. The <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> class derives from the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> class.  Notice that the <a class=\"xref\" href=\"system.web.ui.webcontrols.button#System_Web_UI_WebControls_Button_Click\" data-linktype=\"relative-path\">Click</a> event handler for the <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> control is marked with the <code>async</code> modifier because it calls an asynchronous method  </p>\n<pre><code class=\"lang-cs\" name=\"Asynchronous_File_IO_async#1\">using System;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.IO;\n\nnamespace WpfApplication\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private async void Button_Click(object sender, RoutedEventArgs e)\n        {\n            string StartDirectory = @&quot;c:\\Users\\exampleuser\\start&quot;;\n            string EndDirectory = @&quot;c:\\Users\\exampleuser\\end&quot;;\n\n            foreach (string filename in Directory.EnumerateFiles(StartDirectory))\n            {\n                using (FileStream SourceStream = File.Open(filename, FileMode.Open))\n                {\n                    using (FileStream DestinationStream = File.Create(EndDirectory + filename.Substring(filename.LastIndexOf(&#39;\\\\&#39;))))\n                    {\n                        await SourceStream.CopyToAsync(DestinationStream);\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Asynchronous_File_IO_async#1\">Imports System.IO\n\nClass MainWindow\n\n    Private Async Sub Button_Click(sender As Object, e As RoutedEventArgs)\n        Dim StartDirectory As String = &quot;c:\\Users\\exampleuser\\start&quot;\n        Dim EndDirectory As String = &quot;c:\\Users\\exampleuser\\end&quot;\n\n        For Each filename As String In Directory.EnumerateFiles(StartDirectory)\n            Using SourceStream As FileStream = File.Open(filename, FileMode.Open)\n                Using DestinationStream As FileStream = File.Create(EndDirectory + filename.Substring(filename.LastIndexOf(&quot;\\&quot;c)))\n                    Await SourceStream.CopyToAsync(DestinationStream)\n                End Using\n\n            End Using\n        Next\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_Stream_CopyToAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyToAsync(Stream,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the contents of the current stream will be copied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous copy operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destination</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>buffersize</code> is negative or zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Either the current stream or the destination stream is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current stream does not support reading, or the destination stream does not support writing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CopyToAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/desktop-appname-md.md&quot; -->desktop<!--END INCLUDE --> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <code>async</code> and <code>await</code> keywords in Visual Basic and C#.  </p>\n<p> Copying begins at the current position in the current stream.  </p>\n<p> For an example of copying between two streams, see the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_\" data-linktype=\"relative-path\">CopyToAsync(Stream)</a> overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_IO_Stream_CopyToAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyToAsync(Stream,Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the contents of the current stream will be copied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token to monitor for cancellation requests. The default value is <span class=\"xref\">stem.Threading.CancellationToken.None*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous copy operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destination</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>buffersize</code> is negative or zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Either the current stream or the destination stream is disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current stream does not support reading, or the destination stream does not support writing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CopyToAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/desktop-appname-md.md&quot; -->desktop<!--END INCLUDE --> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <code>async</code> and <code>await</code> keywords in Visual Basic and C#.  </p>\n<p> If the operation is canceled before it completes, the returned task contains the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> value for the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property.  </p>\n<p> Copying begins at the current position in the current stream.  </p>\n<p> For an example of copying between two streams, see the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_\" data-linktype=\"relative-path\">CopyToAsync(Stream)</a> overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_CreateWaitHandle\">\r\n    \r\n            <a id=\"System_IO_Stream_CreateWaitHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateWaitHandle()</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Threading.WaitHandle CreateWaitHandle ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></div>\r\n                  </div>\r\n                  <p>A reference to the allocated <code>WaitHandle</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When called for the first time, the current method creates a <code>WaitHandle</code> object and returns it. On subsequent calls, <code>CreateWaitHandle</code> returns a reference to a new wait handle.  </p>\n<p> Use this method if you implement the asynchronous methods and require a way of blocking in <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndRead_\" data-linktype=\"relative-path\">EndRead</a> or <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_EndWrite_\" data-linktype=\"relative-path\">EndWrite</a> until the asynchronous operation is complete.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Dispose\">\r\n    \r\n            <a id=\"System_IO_Stream_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.  </p>\n<p> Calling <code>Dispose</code> allows the resources used by the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> to be reallocated for other purposes. For more information about <code>Dispose</code>, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_Stream_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You should release all resources by specifying <code>true</code> for <code>disposing</code>. When <code>disposing</code> is <code>true</code>, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.  This may not be possible when called from a finalizer due a lack of ordering among finalizers.  </p>\n<p> If your stream is using an operating system handle to communicate with its source, consider using a subclass of <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">SafeHandle</a> for this purpose.  </p>\n<p> This method is called by the public <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_\" data-linktype=\"relative-path\">Dispose</a> invokes the protected Dispose method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes Dispose with <code>disposing</code> set to <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_EndRead_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_IO_Stream_EndRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndRead(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for the pending asynchronous read to complete. (Consider using <span class=\"xref\">stem.IO.Stream.ReadAsync*</span> instead; see the Remarks section.)</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int EndRead (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The reference to the pending asynchronous request to finish.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A handle to the pending read operation is not available.  </p>\n<p> -or-  </p>\n<p> The pending operation does not support reading.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> did not originate from a <span class=\"xref\">stem.IO.Stream.BeginRead*</span> method on the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed or an internal error has occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework 4 and earlier versions, you have to use methods such as <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_BeginRead_\" data-linktype=\"relative-path\">BeginRead</a> and EndRead to implement asynchronous I/O operations. These methods are still available in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE --> to support legacy code; however, the new async methods, such as <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_\" data-linktype=\"relative-path\">ReadAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_\" data-linktype=\"relative-path\">WriteAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_\" data-linktype=\"relative-path\">CopyToAsync</a>, and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync_\" data-linktype=\"relative-path\">FlushAsync</a>, help you implement asynchronous I/O operations more easily.  </p>\n<p> Call <code>EndRead</code> to determine how many bytes were read from the stream.  </p>\n<p> <code>EndRead</code> can be called once on every <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> from <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_BeginRead_\" data-linktype=\"relative-path\">BeginRead</a>.  </p>\n<p> This method blocks until the I/O operation has completed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_EndWrite_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_IO_Stream_EndWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndWrite(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous write operation. (Consider using <span class=\"xref\">stem.IO.Stream.WriteAsync*</span> instead; see the Remarks section.)</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void EndWrite (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to the outstanding asynchronous I/O request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A handle to the pending write operation is not available.  </p>\n<p> -or-  </p>\n<p> The pending operation does not support writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> did not originate from a <span class=\"xref\">stem.IO.Stream.BeginWrite*</span> method on the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed or an internal error has occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework 4 and earlier versions, you have to use methods such as <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_BeginWrite_\" data-linktype=\"relative-path\">BeginWrite</a> and EndWrite to implement asynchronous I/O operations. These methods are still available in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE --> to support legacy code; however, the new async methods, such as <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_\" data-linktype=\"relative-path\">ReadAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_\" data-linktype=\"relative-path\">WriteAsync</a>, <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_\" data-linktype=\"relative-path\">CopyToAsync</a>, and <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync_\" data-linktype=\"relative-path\">FlushAsync</a>, help you implement asynchronous I/O operations more easily.  </p>\n<p> <code>EndWrite</code> must be called exactly once on every <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> from <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_BeginWrite_\" data-linktype=\"relative-path\">BeginWrite</a>.  </p>\n<p> This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to <code>EndWrite</code>. Exceptions thrown by the thread pool thread will not be visible when calling <code>EndWrite</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Flush\">\r\n    \r\n            <a id=\"System_IO_Stream_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Override <code>Flush</code> on streams that implement a buffer. Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both. Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking). For additional information see <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanSeek_\" data-linktype=\"relative-path\">CanSeek</a>.  </p>\n<p> When using the <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> or <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> class, do not flush the base <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object. Instead, use the class&#39;s Flush or <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_FlushAsync\">\r\n    \r\n            <a id=\"System_IO_Stream_FlushAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FlushAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task FlushAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous flush operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a derived class, such as <a class=\"xref\" href=\"system.io.compression.deflatestream\" data-linktype=\"relative-path\">DeflateStream</a> or <a class=\"xref\" href=\"system.io.compression.gzipstream\" data-linktype=\"relative-path\">GZipStream</a>, does not flush the buffer in its implementation of the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Flush_\" data-linktype=\"relative-path\">Flush</a> method, the FlushAsync method will not flush the buffer.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_FlushAsync_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_IO_Stream_FlushAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FlushAsync(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token to monitor for cancellation requests. The default value is <span class=\"xref\">stem.Threading.CancellationToken.None*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous flush operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation is canceled before it completes, the returned task contains the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> value for the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property.  </p>\n<p> If a derived class, such as <a class=\"xref\" href=\"system.io.compression.deflatestream\" data-linktype=\"relative-path\">DeflateStream</a> or <a class=\"xref\" href=\"system.io.compression.gzipstream\" data-linktype=\"relative-path\">GZipStream</a>, does not flush the buffer in its implementation of the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Flush_\" data-linktype=\"relative-path\">Flush</a> method, the FlushAsync method will not flush the buffer.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_ObjectInvariant\">\r\n    \r\n            <a id=\"System_IO_Stream_ObjectInvariant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ObjectInvariant()</div>        \r\n          </div>\r\n    \r\n            <p>Provides support for a <a class=\"xref\" href=\"system.diagnostics.contracts.contract\" data-linktype=\"relative-path\">Contract</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void ObjectInvariant ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Read_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_Stream_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int Read (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based byte offset in <code>buffer</code> at which to begin storing the data read from the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to be read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support reading.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanRead_\" data-linktype=\"relative-path\">CanRead</a> property to determine whether the current instance supports reading. Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_\" data-linktype=\"relative-path\">ReadAsync</a> method to read asynchronously from the current stream.  </p>\n<p> Implementations of this method read a maximum of <code>count</code> bytes from the current stream and store them in <code>buffer</code> beginning at <code>offset</code>. The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged. Implementations return the number of bytes read. The implementation will block until at least one byte of data can be read, in the event that no data is available. Readreturns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  </p>\n<p> Use <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> for reading primitive data types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use Read to read a block of data.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Stream.Read Example#1\">using System;\nusing System.IO;\n\npublic class Block\n{\n    public static void Main()\n    {\n        Stream s = new MemoryStream();\n        for (int i = 0; i &lt; 122; i++)\n        {\n            s.WriteByte((byte)i);\n        }\n        s.Position = 0;\n\n        // Now read s into a byte buffer with a little padding.\n        byte[] bytes = new byte[s.Length + 10];\n        int numBytesToRead = (int)s.Length;\n        int numBytesRead = 0;\n        do\n        {\n            // Read may return anything from 0 to 10.\n            int n = s.Read(bytes, numBytesRead, 10);\n            numBytesRead += n;\n            numBytesToRead -= n;\n        } while (numBytesToRead &gt; 0);\n        s.Close();\n       \n        Console.WriteLine(&quot;number of bytes read: {0:d}&quot;, numBytesRead);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Stream.Read Example#1\">using namespace System;\nusing namespace System::IO;\n\npublic ref class Block\n{\npublic:\n    static void Main()\n    {\n        Stream^ s = gcnew MemoryStream();\n        for (int i = 0; i &lt; 100; i++)\n        {\n            s-&gt;WriteByte((Byte)i);\n        }\n        s-&gt;Position = 0;\n\n        // Now read s into a byte buffer.\n        array&lt;Byte&gt;^ bytes = gcnew array&lt;Byte&gt;(s-&gt;Length);\n        int numBytesToRead = (int) s-&gt;Length;\n        int numBytesRead = 0;\n        while (numBytesToRead &gt; 0)\n        {\n            // Read may return anything from 0 to 10.\n            int n = s-&gt;Read(bytes, numBytesRead, 10);\n            // The end of the file is reached.\n            if (n == 0)\n            {\n                break;\n            }\n            numBytesRead += n;\n            numBytesToRead -= n;\n        }\n        s-&gt;Close();\n        // numBytesToRead should be 0 now, and numBytesRead should\n        // equal 100.\n        Console::WriteLine(&quot;number of bytes read: {0:d}&quot;, numBytesRead);\n    }\n};\n\nint main()\n{\n    Block::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Stream.Read Example#1\">Imports System\nImports System.IO\n\nPublic Class Block\n    Public Shared Sub Main()\n        Dim s As Stream = New MemoryStream()\n        For i As Integer = 0 To 121\n            s.WriteByte(CType(i, Byte))\n        Next i\n        s.Position = 0\n\n        &#39; Now read s into a byte buffer that is padded slightly.\n        Dim bytes(s.Length + 10) As Byte\n        Dim numBytesToRead As Integer = s.Length\n        Dim numBytesRead As Integer = 0\n        Dim n As Integer\n        Do\n            &#39; Read may return anything from 0 to 10.\n            n = s.Read(bytes, numBytesRead, 10)\n            &#39; The end of the file is reached.\n            numBytesRead += n\n            numBytesToRead -= n\n        Loop While numBytesToRead &gt; 0\n\n        s.Close()\n    \n        Console.WriteLine(&quot;number of bytes read: {0:d}&quot;, numBytesRead)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_Stream_ReadAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAsync(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to write the data into.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte offset in <code>buffer</code> at which to begin writing data from the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support reading.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The stream is currently in use by a previous read operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/desktop-appname-md.md&quot; -->desktop<!--END INCLUDE --> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <code>async</code> and <code>await</code> keywords in Visual Basic and C#.  </p>\n<p> Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanRead_\" data-linktype=\"relative-path\">CanRead</a> property to determine whether the current instance supports reading.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to read from a file asynchronously. The example uses the <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> class, which derives from the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Asynchronous_File_IO_async#4\">Imports System.IO\nImports System.Text\n\nClass MainWindow\n    Private Async Sub Button_Click(sender As Object, e As RoutedEventArgs)\n        Dim filename As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\userinputlog.txt&quot;\n\n        Dim result As Byte()\n\n        Using SourceStream As FileStream = File.Open(filename, FileMode.Open)\n            result = New Byte(SourceStream.Length - 1) {}\n            Await SourceStream.ReadAsync(result, 0, CType(SourceStream.Length, Integer))\n        End Using\n\n        UserInput.Text = System.Text.Encoding.ASCII.GetString(result)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Asynchronous_File_IO_async#4\">using System;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.IO;\n\nnamespace WpfApplication1\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private async void Button_Click(object sender, RoutedEventArgs e)\n        {\n            string filename = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\userinputlog.txt&quot;;\n            byte[] result;\n\n            using (FileStream SourceStream = File.Open(filename, FileMode.Open))\n            {\n                result = new byte[SourceStream.Length];\n                await SourceStream.ReadAsync(result, 0, (int)SourceStream.Length);\n            }\n\n            UserInput.Text = System.Text.Encoding.ASCII.GetString(result);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_IO_Stream_ReadAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAsync(Byte[],Int32,Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to write the data into.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte offset in <code>buffer</code> at which to begin writing data from the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token to monitor for cancellation requests. The default value is <span class=\"xref\">stem.Threading.CancellationToken.None*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support reading.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The stream is currently in use by a previous read operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/desktop-appname-md.md&quot; -->desktop<!--END INCLUDE --> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <code>async</code> and <code>await</code> keywords in Visual Basic and C#.  </p>\n<p> Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanRead_\" data-linktype=\"relative-path\">CanRead</a> property to determine whether the current instance supports reading.  </p>\n<p> If the operation is canceled before it completes, the returned task contains the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> value for the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property.  </p>\n<p> For an example, see the [ReadAsync(Byte&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_ReadByte\">\r\n    \r\n            <a id=\"System_IO_Stream_ReadByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadByte()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadByte ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The unsigned byte cast to an <code>Int32</code>, or -1 if at the end of the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support reading.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanRead_\" data-linktype=\"relative-path\">CanRead</a> property to determine whether the current instance supports reading.  </p>\n<p> Attempts to manipulate the stream after the stream has been closed could throw an <a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Seek_System_Int64_System_IO_SeekOrigin_\">\r\n    \r\n            <a id=\"System_IO_Stream_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(Int64,SeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, sets the position within the current stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract long Seek (long offset, System.IO.SeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte offset relative to the <code>origin</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.seekorigin\" data-linktype=\"relative-path\">SeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value of type <a class=\"xref\" href=\"system.io.seekorigin\" data-linktype=\"relative-path\">SeekOrigin</a> indicating the reference point used to obtain the new position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The new position within the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanSeek_\" data-linktype=\"relative-path\">CanSeek</a> property to determine whether the current instance supports seeking.  </p>\n<p> If <code>offset</code> is negative, the new position is required to precede the position specified by <code>origin</code> by the number of bytes specified by <code>offset</code>. If <code>offset</code> is zero (0), the new position is required to be the position specified by <code>origin</code>. If <code>offset</code> is positive, the new position is required to follow the position specified by <code>origin</code> by the number of bytes specified by <code>offset</code>.  </p>\n<p> Classes derived from <code>Stream</code> that support seeking must override this method to provide the functionality described above.  </p>\n<p> Seeking to any location beyond the length of the stream is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_SetLength_System_Int64_\">\r\n    \r\n            <a id=\"System_IO_Stream_SetLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLength(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, sets the length of the current stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void SetLength (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The desired length of the current stream in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the specified value is less than the current length of the stream, the stream is truncated. If the specified value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are not defined.  </p>\n<p> A stream must support both writing and seeking for <code>SetLength</code> to work.  </p>\n<p> Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property to determine whether the current instance supports writing, and the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanSeek_\" data-linktype=\"relative-path\">CanSeek</a> property to determine whether seeking is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Synchronized_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_IO_Stream_Synchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Synchronized(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a thread-safe (synchronized) wrapper around the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Stream Synchronized (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to synchronize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A thread-safe <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns a class that wraps the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object and restricts access to it from multiple threads. All access to the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object will be thread safe.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_Write_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_Stream_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void Write (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes. This method copies <code>count</code> bytes from <code>buffer</code> to the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based byte offset in <code>buffer</code> at which to begin copying bytes to the current stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to be written to the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>offset</code> and <code>count</code> is greater than the buffer length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occured, such as the specified file cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Write was called after the stream was closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property to determine whether the current instance supports writing. Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_\" data-linktype=\"relative-path\">WriteAsync</a> method to write asynchronously to the current stream.  </p>\n<p> If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_Stream_WriteAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAsync(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to write data from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The stream is currently in use by a previous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The WriteAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/desktop-appname-md.md&quot; -->desktop<!--END INCLUDE --> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <code>async</code> and <code>await</code> keywords in Visual Basic and C#.  </p>\n<p> Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property to determine whether the current instance supports writing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write asynchronously to a file. The example uses the <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> class, which derives from the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Asynchronous_File_IO_async#3\">Imports System.IO\nImports System.Text\n\nClass MainWindow\n    Private Async Sub Button_Click(sender As Object, e As RoutedEventArgs)\n        Dim uniencoding As UnicodeEncoding = New UnicodeEncoding()\n        Dim filename As String = &quot;c:\\Users\\exampleuser\\Documents\\userinputlog.txt&quot;\n\n        Dim result As Byte() = uniencoding.GetBytes(UserInput.Text)\n\n        Using SourceStream As FileStream = File.Open(filename, FileMode.OpenOrCreate)\n            SourceStream.Seek(0, SeekOrigin.End)\n            Await SourceStream.WriteAsync(result, 0, result.Length)\n        End Using\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Asynchronous_File_IO_async#3\">using System;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.IO;\n\nnamespace WpfApplication1\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private async void Button_Click(object sender, RoutedEventArgs e)\n        {\n            UnicodeEncoding uniencoding = new UnicodeEncoding();\n            string filename = @&quot;c:\\Users\\exampleuser\\Documents\\userinputlog.txt&quot;;\n           \n            byte[] result = uniencoding.GetBytes(UserInput.Text);\n            \n            using (FileStream SourceStream = File.Open(filename, FileMode.OpenOrCreate))\n            {\n                SourceStream.Seek(0, SeekOrigin.End);\n                await SourceStream.WriteAsync(result, 0, result.Length);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_IO_Stream_WriteAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAsync(Byte[],Int32,Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to write data from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token to monitor for cancellation requests. The default value is <span class=\"xref\">stem.Threading.CancellationToken.None*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the asynchronous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The stream is currently in use by a previous write operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The WriteAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> app or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/desktop-appname-md.md&quot; -->desktop<!--END INCLUDE --> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <code>async</code> and <code>await</code> keywords in Visual Basic and C#.  </p>\n<p> Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property to determine whether the current instance supports writing.  </p>\n<p> If the operation is canceled before it completes, the returned task contains the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> value for the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property.  </p>\n<p> For an example, see the [WriteAsync(Byte&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Stream_WriteByte_System_Byte_\">\r\n    \r\n            <a id=\"System_IO_Stream_WriteByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteByte(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void WriteByte (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte to write to the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support writing, or the stream is already closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>Methods were called after the stream was closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property to determine whether the current instance supports writing.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Stream.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Stream.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.BeginRead\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.BeginWrite\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.CanRead\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.CanSeek\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.CanTimeout\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.CanWrite\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Close\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.CopyToAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.CreateWaitHandle\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Dispose\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.EndRead\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.EndWrite\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Flush\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.FlushAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Length\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Null\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.ObjectInvariant\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Position\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Read\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.ReadAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.ReadByte\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.ReadTimeout\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Seek\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.SetLength\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Synchronized\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.Write\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.WriteAsync\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.WriteByte\">\r\n<meta name=\"APIName\" content=\"System.IO.Stream.WriteTimeout\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"70b9004b-e24a-8427-2874-d8e1373aa7a8\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.IO\\Stream.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a generic view of a sequence of bytes. This is an abstract class.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Stream\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Stream.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Stream.yml","open_to_public_contributors":true,"api_name":["System.IO.Stream","System.IO.Stream..ctor","System.IO.Stream.BeginRead","System.IO.Stream.BeginWrite","System.IO.Stream.CanRead","System.IO.Stream.CanSeek","System.IO.Stream.CanTimeout","System.IO.Stream.CanWrite","System.IO.Stream.Close","System.IO.Stream.CopyTo","System.IO.Stream.CopyToAsync","System.IO.Stream.CreateWaitHandle","System.IO.Stream.Dispose","System.IO.Stream.EndRead","System.IO.Stream.EndWrite","System.IO.Stream.Flush","System.IO.Stream.FlushAsync","System.IO.Stream.Length","System.IO.Stream.Null","System.IO.Stream.ObjectInvariant","System.IO.Stream.Position","System.IO.Stream.Read","System.IO.Stream.ReadAsync","System.IO.Stream.ReadByte","System.IO.Stream.ReadTimeout","System.IO.Stream.Seek","System.IO.Stream.SetLength","System.IO.Stream.Synchronized","System.IO.Stream.Write","System.IO.Stream.WriteAsync","System.IO.Stream.WriteByte","System.IO.Stream.WriteTimeout"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Stream","System::IO::Stream","System.IO.Stream.#ctor","System::IO::Stream::#ctor","System.IO.Stream.BeginRead","System::IO::Stream::BeginRead","System.IO.Stream.BeginWrite","System::IO::Stream::BeginWrite","System.IO.Stream.CanRead","System::IO::Stream::CanRead","System.IO.Stream.CanSeek","System::IO::Stream::CanSeek","System.IO.Stream.CanTimeout","System::IO::Stream::CanTimeout","System.IO.Stream.CanWrite","System::IO::Stream::CanWrite","System.IO.Stream.Close","System::IO::Stream::Close","System.IO.Stream.CopyTo","System::IO::Stream::CopyTo","System.IO.Stream.CopyToAsync","System::IO::Stream::CopyToAsync","System.IO.Stream.CreateWaitHandle","System::IO::Stream::CreateWaitHandle","System.IO.Stream.Dispose","System::IO::Stream::Dispose","System.IO.Stream.EndRead","System::IO::Stream::EndRead","System.IO.Stream.EndWrite","System::IO::Stream::EndWrite","System.IO.Stream.Flush","System::IO::Stream::Flush","System.IO.Stream.FlushAsync","System::IO::Stream::FlushAsync","System.IO.Stream.Length","System::IO::Stream::Length","System.IO.Stream.Null","System::IO::Stream::Null","System.IO.Stream.ObjectInvariant","System::IO::Stream::ObjectInvariant","System.IO.Stream.Position","System::IO::Stream::Position","System.IO.Stream.Read","System::IO::Stream::Read","System.IO.Stream.ReadAsync","System::IO::Stream::ReadAsync","System.IO.Stream.ReadByte","System::IO::Stream::ReadByte","System.IO.Stream.ReadTimeout","System::IO::Stream::ReadTimeout","System.IO.Stream.Seek","System::IO::Stream::Seek","System.IO.Stream.SetLength","System::IO::Stream::SetLength","System.IO.Stream.Synchronized","System::IO::Stream::Synchronized","System.IO.Stream.Write","System::IO::Stream::Write","System.IO.Stream.WriteAsync","System::IO::Stream::WriteAsync","System.IO.Stream.WriteByte","System::IO::Stream::WriteByte","System.IO.Stream.WriteTimeout","System::IO::Stream::WriteTimeout"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"70b9004b-e24a-8427-2874-d8e1373aa7a8","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.IO\\Stream.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/Stream.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Stream class | Microsoft Docs","_op_ogTitle":"Stream class","description":"Provides a generic view of a sequence of bytes. This is an abstract class.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.Stream","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.stream","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.stream","fileRelativePath":"System.IO.Stream.html"},"themesRelativePathToOutputRoot":"_themes/"}