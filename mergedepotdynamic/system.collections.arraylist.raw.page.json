{"content":"    \r\n    <h1 id=\"System_Collections_ArrayList\">\r\n      <span class=\"lang-csharp\">ArrayList</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Implements the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface using an array whose size is dynamically increased as required.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class ArrayList : ICloneable, System.Collections.IList</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ArrayList</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The ArrayList class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:  </p>\n<ul>\n<li><p>For a heterogeneous collection of objects, use the <code>List&lt;Object&gt;</code> (in C#) or <code>List(Of Object)</code> (in Visual Basic) type.  </p>\n</li>\n<li><p>For a homogeneous collection of objects, use the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class.  </p>\n<p>See the &quot;Performance Considerations&quot; section in the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> reference topic for a discussion of the relative performance of these classes.  </p>\n<p>The ArrayList is not guaranteed to be sorted.  You must sort the ArrayList by calling its <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Sort_\" data-linktype=\"relative-path\">Sort</a> method prior to performing operations (such as <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a>) that require the ArrayList to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the <a class=\"xref\" href=\"system.collections.generic.sortedset-1\" data-linktype=\"relative-path\">SortedSet&lt;T&gt;</a> class.  </p>\n<p>The capacity of an ArrayList is the number of elements the ArrayList can hold. As elements are added to an ArrayList, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a> or by setting the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property explicitly.  </p>\n<p>For very large ArrayList objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <code>enabled</code> attribute of the  configuration element to <code>true</code> in the run-time environment.  </p>\n<p>Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  </p>\n<p>The ArrayList collection accepts <code>null</code> as a valid value. It also allows duplicate elements.  </p>\n<p>Using multidimensional arrays as elements in an ArrayList collection is not supported.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList__ctor\" data-linktype=\"self-bookmark\">ArrayList()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class that is empty and has the default initial capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList__ctor_System_Collections_ICollection_\" data-linktype=\"self-bookmark\">ArrayList(ICollection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList__ctor_System_Int32_\" data-linktype=\"self-bookmark\">ArrayList(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class that is empty and has the specified initial capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Capacity\" data-linktype=\"self-bookmark\">Capacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of elements that the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can contain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements actually contained in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_IsFixedSize\" data-linktype=\"self-bookmark\">IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_IsSynchronized\" data-linktype=\"self-bookmark\">IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_SyncRoot\" data-linktype=\"self-bookmark\">SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Adapter_System_Collections_IList_\" data-linktype=\"self-bookmark\">Adapter(IList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper for a specific <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Add_System_Object_\" data-linktype=\"self-bookmark\">Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an object to the end of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_AddRange_System_Collections_ICollection_\" data-linktype=\"self-bookmark\">AddRange(ICollection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the elements of an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to the end of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_BinarySearch_System_Object_\" data-linktype=\"self-bookmark\">BinarySearch(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches the entire sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> for an element using the default comparer and returns the zero-based index of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_BinarySearch_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">BinarySearch(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches the entire sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> for an element using the specified comparer and returns the zero-based index of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_BinarySearch_System_Int32_System_Int32_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">BinarySearch(Int32,Int32,Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches a range of elements in the sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> for an element using the specified comparer and returns the zero-based index of the element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Contains_System_Object_\" data-linktype=\"self-bookmark\">Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an element is in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_CopyTo_System_Array_\" data-linktype=\"self-bookmark\">CopyTo(Array)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the beginning of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_CopyTo_System_Int32_System_Array_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Int32,Array,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a range of elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_FixedSize_System_Collections_ArrayList_\" data-linktype=\"self-bookmark\">FixedSize(ArrayList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper with a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_FixedSize_System_Collections_IList_\" data-linktype=\"self-bookmark\">FixedSize(IList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper with a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator for the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_GetEnumerator_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetEnumerator(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator for a range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_GetRange_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetRange(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> which represents a subset of the elements in the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_IndexOf_System_Object_\" data-linktype=\"self-bookmark\">IndexOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_IndexOf_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that extends from the specified index to the last element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_IndexOf_System_Object_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(Object,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that starts at the specified index and contains the specified number of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Insert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">Insert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an element into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_InsertRange_System_Int32_System_Collections_ICollection_\" data-linktype=\"self-bookmark\">InsertRange(Int32,ICollection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the elements of a collection into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_LastIndexOf_System_Object_\" data-linktype=\"self-bookmark\">LastIndexOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the last occurrence within the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_LastIndexOf_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that extends from the first element to the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_LastIndexOf_System_Object_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(Object,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains the specified number of elements and ends at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_ReadOnly_System_Collections_ArrayList_\" data-linktype=\"self-bookmark\">ReadOnly(ArrayList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a read-only <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_ReadOnly_System_Collections_IList_\" data-linktype=\"self-bookmark\">ReadOnly(IList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a read-only <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Remove_System_Object_\" data-linktype=\"self-bookmark\">Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element at the specified index of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_RemoveRange_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">RemoveRange(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes a range of elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Repeat_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">Repeat(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> whose elements are copies of the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Reverse\" data-linktype=\"self-bookmark\">Reverse()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reverses the order of the elements in the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Reverse_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Reverse(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reverses the order of the elements in the specified range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_SetRange_System_Int32_System_Collections_ICollection_\" data-linktype=\"self-bookmark\">SetRange(Int32,ICollection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of a collection over a range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Sort\" data-linktype=\"self-bookmark\">Sort()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Sort_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Sort(IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> using the specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Sort_System_Int32_System_Int32_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Sort(Int32,Int32,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in a range of elements in <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> using the specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Synchronized_System_Collections_ArrayList_\" data-linktype=\"self-bookmark\">Synchronized(ArrayList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper that is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_Synchronized_System_Collections_IList_\" data-linktype=\"self-bookmark\">Synchronized(IList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper that is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_ToArray\" data-linktype=\"self-bookmark\">ToArray()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a new <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_ToArray_System_Type_\" data-linktype=\"self-bookmark\">ToArray(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a new array of the specified element type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ArrayList_TrimToSize\" data-linktype=\"self-bookmark\">TrimToSize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the capacity to the actual number of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList__ctor\">\r\n    \r\n            <a id=\"System_Collections_ArrayList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayList()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class that is empty and has the default initial capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ArrayList ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can hold. As elements are added to an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList__ctor_System_Collections_ICollection_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayList(ICollection)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ArrayList (System.Collections.ICollection c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> whose elements are copied to the new list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>c</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can hold. As elements are added to an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> The elements are copied onto the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> in the same order they are read by the <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>c</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArrayList(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class that is empty and has the specified initial capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ArrayList (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements that the new list can initially store.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can hold. As elements are added to an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Capacity\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Capacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Capacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of elements that the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can contain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Capacity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements that the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Capacity is set to a value that is less than <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough memory available on the system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Capacity is the number of elements that the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can store. <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> Capacity is always greater than or equal to <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>. If <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a> or by setting the Capacity property explicitly. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is an O(<code>n</code>) operation, where <code>n</code> is the new capacity.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Count\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements actually contained in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements actually contained in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can store. Count is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> is always greater than or equal to Count. If Count exceeds <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a fixed-size wrapper around an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.IsFixedSize Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Create a fixed-size wrapper around the ArrayList.\n       ArrayList myFixedSizeAL = ArrayList.FixedSize( myAL );\n \n       // Display whether the ArrayLists have a fixed size or not.\n       Console.WriteLine( &quot;myAL {0}.&quot;, myAL.IsFixedSize ? &quot;has a fixed size&quot; : &quot;does not have a fixed size&quot; );\n       Console.WriteLine( &quot;myFixedSizeAL {0}.&quot;, myFixedSizeAL.IsFixedSize ? &quot;has a fixed size&quot; : &quot;does not have a fixed size&quot; );\n       Console.WriteLine();\n \n       // Display both ArrayLists.\n       Console.WriteLine( &quot;Initially,&quot; );\n       Console.Write( &quot;Standard  :&quot; );\n       PrintValues( myAL, &#39; &#39; );\n       Console.Write( &quot;Fixed size:&quot; );\n       PrintValues( myFixedSizeAL, &#39; &#39; );\n \n       // Sort is allowed in the fixed-size ArrayList.\n       myFixedSizeAL.Sort();\n \n       // Display both ArrayLists.\n       Console.WriteLine( &quot;After Sort,&quot; );\n       Console.Write( &quot;Standard  :&quot; );\n       PrintValues( myAL, &#39; &#39; );\n       Console.Write( &quot;Fixed size:&quot; );\n       PrintValues( myFixedSizeAL, &#39; &#39; );\n \n       // Reverse is allowed in the fixed-size ArrayList.\n       myFixedSizeAL.Reverse();\n \n       // Display both ArrayLists.\n       Console.WriteLine( &quot;After Reverse,&quot; );\n       Console.Write( &quot;Standard  :&quot; );\n       PrintValues( myAL, &#39; &#39; );\n       Console.Write( &quot;Fixed size:&quot; );\n       PrintValues( myFixedSizeAL, &#39; &#39; );\n \n       // Add an element to the standard ArrayList.\n       myAL.Add( &quot;AddMe&quot; );\n \n       // Display both ArrayLists.\n       Console.WriteLine( &quot;After adding to the standard ArrayList,&quot; );\n       Console.Write( &quot;Standard  :&quot; );\n       PrintValues( myAL, &#39; &#39; );\n       Console.Write( &quot;Fixed size:&quot; );\n       PrintValues( myFixedSizeAL, &#39; &#39; );\n       Console.WriteLine();\n \n       // Adding or inserting elements to the fixed-size ArrayList throws an exception.\n       try  {\n          myFixedSizeAL.Add( &quot;AddMe2&quot; );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n       try  {\n          myFixedSizeAL.Insert( 3, &quot;InsertMe&quot; );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n    }\n \n    public static void PrintValues( IEnumerable myList, char mySeparator )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, obj );\n       Console.WriteLine();\n    }\n\n }\n /*\n This code produces the following output.\n \n myAL does not have a fixed size.\n myFixedSizeAL has a fixed size.\n\n Initially,\n Standard  : The quick brown fox jumped over the lazy dog\n Fixed size: The quick brown fox jumped over the lazy dog\n After Sort,\n Standard  : brown dog fox jumped lazy over quick the The\n Fixed size: brown dog fox jumped lazy over quick the The\n After Reverse,\n Standard  : The the quick over lazy jumped fox dog brown\n Fixed size: The the quick over lazy jumped fox dog brown\n After adding to the standard ArrayList,\n Standard  : The the quick over lazy jumped fox dog brown AddMe\n Fixed size: The the quick over lazy jumped fox dog brown AddMe\n\n Exception: System.NotSupportedException: Collection was of a fixed size.\n    at System.Collections.FixedSizeArrayList.Add(Object obj)\n    at SamplesArrayList.Main()\n Exception: System.NotSupportedException: Collection was of a fixed size.\n    at System.Collections.FixedSizeArrayList.Insert(Int32 index, Object obj)\n    at SamplesArrayList.Main()\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IsFixedSize Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        \n        &#39; Create a fixed-size wrapper around the ArrayList.\n        Dim myFixedSizeAL As ArrayList = ArrayList.FixedSize(myAL)\n        \n        &#39; Display whether the ArrayLists have a fixed size or not.\n        Dim msg As String\n        If myAL.IsFixedSize Then\n            msg = &quot;has a fixed size&quot;\n        Else\n            msg = &quot;does not have a fixed size&quot;\n        End If\n        Console.WriteLine(&quot;myAL {0}.&quot;, msg)\n        If myFixedSizeAL.IsFixedSize Then\n            msg = &quot;has a fixed size&quot;\n        Else\n            msg = &quot;does not have a fixed size&quot;\n        End If\n        Console.WriteLine(&quot;myFixedSizeAL {0}.&quot;, msg)\n        Console.WriteLine()\n        \n        &#39; Display both ArrayLists.\n        Console.WriteLine(&quot;Initially,&quot;)\n        Console.Write(&quot;Standard  :&quot;)\n        PrintValues(myAL, &quot; &quot;c)\n        Console.Write(&quot;Fixed size:&quot;)\n        PrintValues(myFixedSizeAL, &quot; &quot;c)\n        \n        &#39; Sort is allowed in the fixed-size ArrayList.\n        myFixedSizeAL.Sort()\n        \n        &#39; Display both ArrayLists.\n        Console.WriteLine(&quot;After Sort,&quot;)\n        Console.Write(&quot;Standard  :&quot;)\n        PrintValues(myAL, &quot; &quot;c)\n        Console.Write(&quot;Fixed size:&quot;)\n        PrintValues(myFixedSizeAL, &quot; &quot;c)\n        \n        &#39; Reverse is allowed in the fixed-size ArrayList.\n        myFixedSizeAL.Reverse()\n        \n        &#39; Display both ArrayLists.\n        Console.WriteLine(&quot;After Reverse,&quot;)\n        Console.Write(&quot;Standard  :&quot;)\n        PrintValues(myAL, &quot; &quot;c)\n        Console.Write(&quot;Fixed size:&quot;)\n        PrintValues(myFixedSizeAL, &quot; &quot;c)\n        \n        &#39; Add an element to the standard ArrayList.\n        myAL.Add(&quot;AddMe&quot;)\n        \n        &#39; Display both ArrayLists.\n        Console.WriteLine(&quot;After adding to the standard ArrayList,&quot;)\n        Console.Write(&quot;Standard  :&quot;)\n        PrintValues(myAL, &quot; &quot;c)\n        Console.Write(&quot;Fixed size:&quot;)\n        PrintValues(myFixedSizeAL, &quot; &quot;c)\n        Console.WriteLine()\n        \n        &#39; Adding or inserting elements to the fixed-size ArrayList throws an exception.\n        Try\n            myFixedSizeAL.Add(&quot;AddMe2&quot;)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n        Try\n            myFixedSizeAL.Insert(3, &quot;InsertMe&quot;)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myList As IEnumerable, mySeparator As Char)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; myAL does not have a fixed size.\n&#39; myFixedSizeAL has a fixed size.\n&#39; \n&#39; Initially,\n&#39; Standard  : The quick brown fox jumped over the lazy dog\n&#39; Fixed size: The quick brown fox jumped over the lazy dog\n&#39; After Sort,\n&#39; Standard  : brown dog fox jumped lazy over quick the The\n&#39; Fixed size: brown dog fox jumped lazy over quick the The\n&#39; After Reverse,\n&#39; Standard  : The the quick over lazy jumped fox dog brown\n&#39; Fixed size: The the quick over lazy jumped fox dog brown\n&#39; After adding to the standard ArrayList,\n&#39; Standard  : The the quick over lazy jumped fox dog brown AddMe\n&#39; Fixed size: The the quick over lazy jumped fox dog brown AddMe\n&#39; \n&#39; Exception: System.NotSupportedException: Collection was of a fixed size.\n&#39;    at System.Collections.FixedSizeArrayList.Add(Object obj)\n&#39;    at SamplesArrayList.Main()\n&#39; Exception: System.NotSupportedException: Collection was of a fixed size.\n&#39;    at System.Collections.FixedSizeArrayList.Insert(Int32 index, Object obj)\n&#39;    at SamplesArrayList.Main()\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IsFixedSize Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Create a fixed-size wrapper around the ArrayList.\n   ArrayList^ myFixedSizeAL = ArrayList::FixedSize( myAL );\n   \n   // Display whether the ArrayLists have a fixed size or not.\n   Console::WriteLine( &quot;myAL {0}.&quot;, myAL-&gt;IsFixedSize ? (String^)&quot;has a fixed size&quot; : &quot;does not have a fixed size&quot; );\n   Console::WriteLine( &quot;myFixedSizeAL {0}.&quot;, myFixedSizeAL-&gt;IsFixedSize ? (String^)&quot;has a fixed size&quot; : &quot;does not have a fixed size&quot; );\n   Console::WriteLine();\n   \n   // Display both ArrayLists.\n   Console::WriteLine( &quot;Initially,&quot; );\n   Console::Write( &quot;Standard  :&quot; );\n   PrintValues( myAL, &#39; &#39; );\n   Console::Write( &quot;Fixed size:&quot; );\n   PrintValues( myFixedSizeAL, &#39; &#39; );\n   \n   // Sort is allowed in the fixed-size ArrayList.\n   myFixedSizeAL-&gt;Sort();\n   \n   // Display both ArrayLists.\n   Console::WriteLine( &quot;After Sort,&quot; );\n   Console::Write( &quot;Standard  :&quot; );\n   PrintValues( myAL, &#39; &#39; );\n   Console::Write( &quot;Fixed size:&quot; );\n   PrintValues( myFixedSizeAL, &#39; &#39; );\n   \n   // Reverse is allowed in the fixed-size ArrayList.\n   myFixedSizeAL-&gt;Reverse();\n   \n   // Display both ArrayLists.\n   Console::WriteLine( &quot;After Reverse,&quot; );\n   Console::Write( &quot;Standard  :&quot; );\n   PrintValues( myAL, &#39; &#39; );\n   Console::Write( &quot;Fixed size:&quot; );\n   PrintValues( myFixedSizeAL, &#39; &#39; );\n   \n   // Add an element to the standard ArrayList.\n   myAL-&gt;Add( &quot;AddMe&quot; );\n   \n   // Display both ArrayLists.\n   Console::WriteLine( &quot;After adding to the standard ArrayList,&quot; );\n   Console::Write( &quot;Standard  :&quot; );\n   PrintValues( myAL, &#39; &#39; );\n   Console::Write( &quot;Fixed size:&quot; );\n   PrintValues( myFixedSizeAL, &#39; &#39; );\n   Console::WriteLine();\n   \n   // Adding or inserting elements to the fixed-size ArrayList throws an exception.\n   try\n   {\n      myFixedSizeAL-&gt;Add( &quot;AddMe2&quot; );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n   try\n   {\n      myFixedSizeAL-&gt;Insert( 3, &quot;InsertMe&quot; );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n}\n\nvoid PrintValues( IEnumerable^ myList, char mySeparator )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n myAL does not have a fixed size.\n myFixedSizeAL has a fixed size.\n\n Initially,\n Standard  : The quick brown fox jumped over the lazy dog\n Fixed size: The quick brown fox jumped over the lazy dog\n After Sort,\n Standard  : brown dog fox jumped lazy over quick the The\n Fixed size: brown dog fox jumped lazy over quick the The\n After Reverse,\n Standard  : The the quick over lazy jumped fox dog brown\n Fixed size: The the quick over lazy jumped fox dog brown\n After adding to the standard ArrayList,\n Standard  : The the quick over lazy jumped fox dog brown AddMe\n Fixed size: The the quick over lazy jumped fox dog brown AddMe\n\n Exception: System.NotSupportedException: Collection was of a fixed size.\n    at System.Collections.FixedSizeArrayList.Add(Object obj)\n    at SamplesArrayList.Main()\n Exception: System.NotSupportedException: Collection was of a fixed size.\n    at System.Collections.FixedSizeArrayList.Insert(Int32 index, Object obj)\n    at SamplesArrayList.Main()\n\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a read-only wrapper around an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> and how to determine if an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.ReadOnly1 Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;red&quot; );\n       myAL.Add( &quot;orange&quot; );\n       myAL.Add( &quot;yellow&quot; );\n \n       // Creates a read-only copy of the ArrayList.\n       ArrayList myReadOnlyAL = ArrayList.ReadOnly( myAL );\n \n       // Displays whether the ArrayList is read-only or writable.\n       Console.WriteLine( &quot;myAL is {0}.&quot;, myAL.IsReadOnly ? &quot;read-only&quot; : &quot;writable&quot; );\n       Console.WriteLine( &quot;myReadOnlyAL is {0}.&quot;, myReadOnlyAL.IsReadOnly ? &quot;read-only&quot; : &quot;writable&quot; );\n \n       // Displays the contents of both collections.\n       Console.WriteLine( &quot;<br>Initially,&quot; );\n       Console.WriteLine( &quot;The original ArrayList myAL contains:&quot; );\n       foreach ( String myStr in myAL )\n          Console.WriteLine( &quot;   {0}&quot;, myStr );\n       Console.WriteLine( &quot;The read-only ArrayList myReadOnlyAL contains:&quot; );\n       foreach ( String myStr in myReadOnlyAL )\n          Console.WriteLine( &quot;   {0}&quot;, myStr );\n\n       // Adding an element to a read-only ArrayList throws an exception.\n       Console.WriteLine( &quot;<br>Trying to add a new element to the read-only ArrayList:&quot; );\n       try  {\n          myReadOnlyAL.Add(&quot;green&quot;);\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n\n       // Adding an element to the original ArrayList affects the read-only ArrayList.\n       myAL.Add( &quot;blue&quot; );\n\n       // Displays the contents of both collections again.\n       Console.WriteLine( &quot;<br>After adding a new element to the original ArrayList,&quot; );\n       Console.WriteLine( &quot;The original ArrayList myAL contains:&quot; );\n       foreach ( String myStr in myAL )\n          Console.WriteLine( &quot;   {0}&quot;, myStr );\n       Console.WriteLine( &quot;The read-only ArrayList myReadOnlyAL contains:&quot; );\n       foreach ( String myStr in myReadOnlyAL )\n          Console.WriteLine( &quot;   {0}&quot;, myStr );\n\n    }\n\n }\n\n\n/* \nThis code produces the following output.\n\nmyAL is writable.\nmyReadOnlyAL is read-only.\n\nInitially,\nThe original ArrayList myAL contains:\n   red\n   orange\n   yellow\nThe read-only ArrayList myReadOnlyAL contains:\n   red\n   orange\n   yellow\n\nTrying to add a new element to the read-only ArrayList:\nException: System.NotSupportedException: Collection is read-only.\n   at System.Collections.ReadOnlyArrayList.Add(Object obj)\n   at SamplesArrayList.Main()\n\nAfter adding a new element to the original ArrayList,\nThe original ArrayList myAL contains:\n   red\n   orange\n   yellow\n   blue\nThe read-only ArrayList myReadOnlyAL contains:\n   red\n   orange\n   yellow\n   blue\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.ReadOnly1 Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;red&quot; );\n   myAL-&gt;Add( &quot;orange&quot; );\n   myAL-&gt;Add( &quot;yellow&quot; );\n   \n   // Creates a read-only copy of the ArrayList.\n   ArrayList^ myReadOnlyAL = ArrayList::ReadOnly( myAL );\n   \n   // Displays whether the ArrayList is read-only or writable.\n   Console::WriteLine( &quot;myAL is {0}.&quot;, myAL-&gt;IsReadOnly ? (String^)&quot;read-only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myReadOnlyAL is {0}.&quot;, myReadOnlyAL-&gt;IsReadOnly ? (String^)&quot;read-only&quot; : &quot;writable&quot; );\n   \n   // Displays the contents of both collections.\n   Console::WriteLine( &quot;<br>Initially,&quot; );\n   Console::WriteLine( &quot;The original ArrayList myAL contains:&quot; );\n   for ( int i(0); i &lt; myAL-&gt;Count; ++i )\n      Console::WriteLine(  &quot;   {0}&quot;, static_cast&lt;String^&gt;(myAL[ i ]) );\n   Console::WriteLine( &quot;The read-only ArrayList myReadOnlyAL contains:&quot; );\n   for ( int i(0); i &lt; myReadOnlyAL-&gt;Count; ++i )\n      Console::WriteLine( &quot;   {0}&quot;, static_cast&lt;String^&gt;(myReadOnlyAL[ i ]) );\n   \n   // Adding an element to a read-only ArrayList throws an exception.\n   Console::WriteLine( &quot;<br>Trying to add a new element to the read-only ArrayList:&quot; );\n   try\n   {\n      myReadOnlyAL-&gt;Add( &quot;green&quot; );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( String::Concat( &quot;Exception: &quot;, myException-&gt;ToString() ) );\n   }\n\n   \n   // Adding an element to the original ArrayList affects the read-only ArrayList.\n   myAL-&gt;Add( &quot;blue&quot; );\n   \n   // Displays the contents of both collections again.\n   Console::WriteLine( &quot;<br>After adding a new element to the original ArrayList,&quot; );\n   Console::WriteLine( &quot;The original ArrayList myAL contains:&quot; );\n   for ( int i(0); i &lt; myAL-&gt;Count; ++i )\n      Console::WriteLine( &quot;   {0}&quot;, static_cast&lt;String^&gt;(myAL[ i ]) );\n   Console::WriteLine( &quot;The read-only ArrayList myReadOnlyAL contains:&quot; );\n   for ( int i(0); i &lt; myReadOnlyAL-&gt;Count; ++i )\n      Console::WriteLine( &quot;   {0}&quot;, static_cast&lt;String^&gt;(myReadOnlyAL[ i ]) );\n}\n\n/*\nThis code produces the following output.\n\nmyAL is writable.\nmyReadOnlyAL is read-only.\n\nInitially,\nThe original ArrayList myAL contains:\n   red\n   orange\n   yellow\nThe read-only ArrayList myReadOnlyAL contains:\n   red\n   orange\n   yellow\n\nTrying to add a new element to the read-only ArrayList:\nException: System.NotSupportedException: Collection is read-only.\n   at System.Collections.ReadOnlyArrayList.Add(Object obj)\n   at SamplesArrayList.Main()\n\nAfter adding a new element to the original ArrayList,\nThe original ArrayList myAL contains:\n   red\n   orange\n   yellow\n   blue\nThe read-only ArrayList myReadOnlyAL contains:\n   red\n   orange\n   yellow\n   blue\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.ReadOnly1 Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n   Public Shared Sub Main()\n\n      Dim myStr As [String]\n\n      &#39; Creates and initializes a new ArrayList.\n      Dim myAL As New ArrayList()\n      myAL.Add(&quot;red&quot;)\n      myAL.Add(&quot;orange&quot;)\n      myAL.Add(&quot;yellow&quot;)\n\n      &#39; Creates a read-only copy of the ArrayList.\n      Dim myReadOnlyAL As ArrayList = ArrayList.ReadOnly(myAL)\n\n      &#39; Displays whether the ArrayList is read-only or writable.\n      If myAL.IsReadOnly Then\n         Console.WriteLine(&quot;myAL is read-only.&quot;)\n      Else\n         Console.WriteLine(&quot;myAL is writable.&quot;)\n      End If\n      If myReadOnlyAL.IsReadOnly Then\n         Console.WriteLine(&quot;myReadOnlyAL is read-only.&quot;)\n      Else\n         Console.WriteLine(&quot;myReadOnlyAL is writable.&quot;)\n      End If\n\n      &#39; Displays the contents of both collections.\n      Console.WriteLine()\n      Console.WriteLine(&quot;Initially,&quot;)\n      Console.WriteLine(&quot;The original ArrayList myAL contains:&quot;)\n      For Each myStr In  myAL\n         Console.WriteLine(&quot;   {0}&quot;, myStr)\n      Next myStr\n      Console.WriteLine(&quot;The read-only ArrayList myReadOnlyAL contains:&quot;)\n      For Each myStr In  myReadOnlyAL\n         Console.WriteLine(&quot;   {0}&quot;, myStr)\n      Next myStr \n\n      &#39; Adding an element to a read-only ArrayList throws an exception.\n      Console.WriteLine()\n      Console.WriteLine(&quot;Trying to add a new element to the read-only ArrayList:&quot;)\n      Try\n         myReadOnlyAL.Add(&quot;green&quot;)\n      Catch myException As Exception\n         Console.WriteLine((&quot;Exception: &quot; + myException.ToString()))\n      End Try\n\n      &#39; Adding an element to the original ArrayList affects the read-only ArrayList.\n      myAL.Add(&quot;blue&quot;)\n\n      &#39; Displays the contents of both collections again.\n      Console.WriteLine()\n      Console.WriteLine(&quot;After adding a new element to the original ArrayList,&quot;)\n      Console.WriteLine(&quot;The original ArrayList myAL contains:&quot;)\n      For Each myStr In  myAL\n         Console.WriteLine(&quot;   {0}&quot;, myStr)\n      Next myStr\n      Console.WriteLine(&quot;The read-only ArrayList myReadOnlyAL contains:&quot;)\n      For Each myStr In  myReadOnlyAL\n         Console.WriteLine(&quot;   {0}&quot;, myStr)\n      Next myStr \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesArrayList \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;myAL is writable.\n&#39;myReadOnlyAL is read-only.\n&#39;\n&#39;Initially,\n&#39;The original ArrayList myAL contains:\n&#39;   red\n&#39;   orange\n&#39;   yellow\n&#39;The read-only ArrayList myReadOnlyAL contains:\n&#39;   red\n&#39;   orange\n&#39;   yellow\n&#39;\n&#39;Trying to add a new element to the read-only ArrayList:\n&#39;Exception: System.NotSupportedException: Collection is read-only.\n&#39;   at System.Collections.ReadOnlyArrayList.Add(Object obj)\n&#39;   at SamplesArrayList.Main()\n&#39;\n&#39;After adding a new element to the original ArrayList,\n&#39;The original ArrayList myAL contains:\n&#39;   red\n&#39;   orange\n&#39;   yellow\n&#39;   blue\n&#39;The read-only ArrayList myReadOnlyAL contains:\n&#39;   red\n&#39;   orange\n&#39;   yellow\n&#39;   blue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is synchronized (thread safe); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To guarantee the thread safety of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, all operations must be done through the wrapper returned by the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Synchronized_\" data-linktype=\"relative-path\">Synchronized</a> method.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IsSynchronized Example#2\">        ArrayList^ myCollection = gcnew ArrayList();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IsSynchronized Example#2\">        Dim myCollection As New ArrayList()\n\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IsSynchronized Example#2\">        ArrayList myCollection = new ArrayList();\n\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><p> Retrieving the value of this property is an O(1) operation.  </p>\n<p> The following code example shows how to synchronize an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, determine if an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is synchronized and use a synchronized <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic ArrayList.IsSynchronized Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        \n        &#39; Creates a synchronized wrapper around the ArrayList.\n        Dim mySyncdAL As ArrayList = ArrayList.Synchronized(myAL)\n        \n        &#39; Displays the sychronization status of both ArrayLists.\n        Dim str As String\n        If myAL.IsSynchronized Then\n            str = &quot;synchronized&quot;\n        Else\n            str = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;myAL is {0}.&quot;, str)\n        If mySyncdAL.IsSynchronized Then\n            str = &quot;synchronized&quot;\n        Else\n            str = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;mySyncdAL is {0}.&quot;, str)\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myAL is not synchronized.\n&#39; mySyncdAL is synchronized. \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IsSynchronized Example#1\">using namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new ArrayList instance.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   \n   // Creates a synchronized wrapper around the ArrayList.\n   ArrayList^ mySyncdAL = ArrayList::Synchronized( myAL );\n   \n   // Displays the sychronization status of both ArrayLists.\n   String^ szRes = myAL-&gt;IsSynchronized ?  (String^)&quot;synchronized&quot; :  &quot;not synchronized&quot;;\n   Console::WriteLine(  &quot;myAL is {0}.&quot;, szRes );\n   String^ szSyncRes = mySyncdAL-&gt;IsSynchronized ?  (String^)&quot;synchronized&quot; :  &quot;not synchronized&quot;;\n   Console::WriteLine(  &quot;mySyncdAL is {0}.&quot;, szSyncRes );\n}\n\n/* \n This code produces the following output.\n \n myAL is not synchronized.\n mySyncdAL is synchronized.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IsSynchronized Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n \n       // Creates a synchronized wrapper around the ArrayList.\n       ArrayList mySyncdAL = ArrayList.Synchronized( myAL );\n \n       // Displays the sychronization status of both ArrayLists.\n       Console.WriteLine( &quot;myAL is {0}.&quot;, myAL.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n       Console.WriteLine( &quot;mySyncdAL is {0}.&quot;, mySyncdAL.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n    }\n }\n /* \n This code produces the following output.\n \n myAL is not synchronized.\n mySyncdAL is synchronized.\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object this[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Item returns an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, so you may need to cast the returned value to the original type in order to manipulate it. It is important to note that <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is not a strongly-typed collection. For a strongly-typed alternative, see <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ArrayList.Item#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class Example\n{\npublic:\n    static void Main()\n    {\n        // Create an empty ArrayList, and add some elements.\n        ArrayList^ stringList = gcnew ArrayList();\n\n        stringList-&gt;Add(&quot;a&quot;);\n        stringList-&gt;Add(&quot;abc&quot;);\n        stringList-&gt;Add(&quot;abcdef&quot;);\n        stringList-&gt;Add(&quot;abcdefg&quot;);\n\n        // The Item property is an indexer, so the property name is\n        // not required.\n        Console::WriteLine(&quot;Element {0} is \\&quot;{1}\\&quot;&quot;, 2, stringList[2]);\n\n        // Assigning a value to the property changes the value of\n        // the indexed element.\n        stringList[2] = &quot;abcd&quot;;\n        Console::WriteLine(&quot;Element {0} is \\&quot;{1}\\&quot;&quot;, 2, stringList[2]);\n\n        // Accessing an element outside the current element count\n        // causes an exception.\n        Console::WriteLine(&quot;Number of elements in the list: {0}&quot;, \n            stringList-&gt;Count);\n        try\n        {\n            Console::WriteLine(&quot;Element {0} is \\&quot;{1}\\&quot;&quot;, \n                stringList-&gt;Count, stringList[stringList-&gt;Count]);\n        }\n        catch (ArgumentOutOfRangeException^ aoore)\n        {\n            Console::WriteLine(&quot;stringList({0}) is out of range.&quot;, \n                stringList-&gt;Count);\n        }\n\n        // You cannot use the Item property to add new elements.\n        try\n        {\n            stringList[stringList-&gt;Count] = &quot;42&quot;;\n        }\n        catch (ArgumentOutOfRangeException^ aoore)\n        {\n            Console::WriteLine(&quot;stringList({0}) is out of range.&quot;, \n                stringList-&gt;Count);\n        }\n\n        Console::WriteLine();\n        for (int i = 0; i &lt; stringList-&gt;Count; i++)\n        {\n            Console::WriteLine(&quot;Element {0} is \\&quot;{1}\\&quot;&quot;, i, \n                stringList[i]);\n        }\n\n        Console::WriteLine();\n        for each (Object^ o in stringList)\n        {\n            Console::WriteLine(o);\n        }\n    }\n};\n\nint main()\n{\n   Example::Main();\n}\n/*\n This code example produces the following output:\n\nElement 2 is &quot;abcdef&quot;\nElement 2 is &quot;abcd&quot;\nNumber of elements in the list: 4\nstringList(4) is out of range.\nstringList(4) is out of range.\n\nElement 0 is &quot;a&quot;\nElement 1 is &quot;abc&quot;\nElement 2 is &quot;abcd&quot;\nElement 3 is &quot;abcdefg&quot;\n\na\nabc\nabcd\nabcdefg\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ArrayList.Item#1\">using System;\nusing System.Collections;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create an empty ArrayList, and add some elements.\n        ArrayList stringList = new ArrayList();\n\n        stringList.Add(&quot;a&quot;);\n        stringList.Add(&quot;abc&quot;);\n        stringList.Add(&quot;abcdef&quot;);\n        stringList.Add(&quot;abcdefg&quot;);\n\n        // The Item property is an indexer, so the property name is\n        // not required.\n        Console.WriteLine(&quot;Element {0} is \\&quot;{1}\\&quot;&quot;, 2, stringList[2]);\n\n        // Assigning a value to the property changes the value of\n        // the indexed element.\n        stringList[2] = &quot;abcd&quot;;\n        Console.WriteLine(&quot;Element {0} is \\&quot;{1}\\&quot;&quot;, 2, stringList[2]);\n\n        // Accessing an element outside the current element count\n        // causes an exception. \n        Console.WriteLine(&quot;Number of elements in the list: {0}&quot;, \n            stringList.Count);\n        try\n        {\n            Console.WriteLine(&quot;Element {0} is \\&quot;{1}\\&quot;&quot;, \n                stringList.Count, stringList[stringList.Count]);\n        }\n        catch(ArgumentOutOfRangeException aoore)\n        {\n            Console.WriteLine(&quot;stringList({0}) is out of range.&quot;, \n                stringList.Count);\n        }\n\n        // You cannot use the Item property to add new elements.\n        try\n        {\n            stringList[stringList.Count] = &quot;42&quot;;\n        }\n        catch(ArgumentOutOfRangeException aoore)\n        {\n            Console.WriteLine(&quot;stringList({0}) is out of range.&quot;, \n                stringList.Count);\n        }\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; stringList.Count; i++)\n        {\n            Console.WriteLine(&quot;Element {0} is \\&quot;{1}\\&quot;&quot;, i, \n                stringList[i]);\n        }\n\n        Console.WriteLine();\n        foreach (object o in stringList)\n        {\n            Console.WriteLine(o);\n        }\n    }\n}\n/*\n This code example produces the following output:\n\nElement 2 is &quot;abcdef&quot;\nElement 2 is &quot;abcd&quot;\nNumber of elements in the list: 4\nstringList(4) is out of range.\nstringList(4) is out of range.\n\nElement 0 is &quot;a&quot;\nElement 1 is &quot;abc&quot;\nElement 2 is &quot;abcd&quot;\nElement 3 is &quot;abcdefg&quot;\n\na\nabc\nabcd\nabcdefg\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ArrayList.Item#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class Example\n\n    Public Shared Sub Main\n\n        &#39; Create an empty ArrayList, and add some elements.\n        Dim stringList As New ArrayList\n\n        stringList.Add(&quot;a&quot;)\n        stringList.Add(&quot;abc&quot;)\n        stringList.Add(&quot;abcdef&quot;)\n        stringList.Add(&quot;abcdefg&quot;)\n\n        &#39; Item is the default property, so the property name is\n        &#39; not required.\n        Console.WriteLine(&quot;Element {0} is &quot;&quot;{1}&quot;&quot;&quot;, 2, stringList(2))\n\n        &#39; Assigning a value to the property changes the value of\n        &#39; the indexed element.\n        stringList(2) = &quot;abcd&quot;\n        Console.WriteLine(&quot;Element {0} is &quot;&quot;{1}&quot;&quot;&quot;, 2, stringList(2))\n\n        &#39; Accessing an element outside the current element count\n        &#39; causes an exception. The ArrayList index is zero-based,\n        &#39; so the index of the last element is (Count - 1). \n        Console.WriteLine(&quot;Number of elements in the list: {0}&quot;, _\n            stringList.Count)\n        Try\n            Console.WriteLine(&quot;Element {0} is &quot;&quot;{1}&quot;&quot;&quot;, _\n                stringList.Count, _\n                stringList(stringList.Count))\n        Catch aoore As ArgumentOutOfRangeException\n            Console.WriteLine(&quot;stringList({0}) is out of range.&quot;, _\n                stringList.Count)\n        End Try\n\n        &#39; You cannot use the Item property to add new elements.\n        Try\n            stringList(stringList.Count) = &quot;42&quot;\n        Catch aoore As ArgumentOutOfRangeException\n            Console.WriteLine(&quot;stringList({0}) is out of range.&quot;, _\n                stringList.Count)\n        End Try\n\n        Console.WriteLine()\n        For i As Integer = 0 To stringList.Count - 1\n            Console.WriteLine(&quot;Element {0} is &quot;&quot;{1}&quot;&quot;&quot;, i, stringList(i))\n        Next\n\n        Console.WriteLine()\n        For Each o As Object In stringList\n            Console.WriteLine(o)\n        Next\n\n    End Sub\n\nEnd Class\n&#39;\n&#39; This code example produces the following output:\n&#39;\n&#39;Element 2 is &quot;abcdef&quot;\n&#39;Element 2 is &quot;abcd&quot;\n&#39;Number of elements in the list: 4\n&#39;stringList(4) is out of range.\n&#39;stringList(4) is out of range.\n&#39;\n&#39;Element 0 is &quot;a&quot;\n&#39;Element 1 is &quot;abc&quot;\n&#39;Element 2 is &quot;abcd&quot;\n&#39;Element 3 is &quot;abcdefg&quot;\n&#39;\n&#39;a\n&#39;abc\n&#39;abcd\n&#39;abcdefg\n</code></pre><p> The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> and adds a method to scramble the list items.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ArrayList.Item#2\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ScrambleList : public ArrayList\n{\npublic:\n    static void Main()\n    {\n        // Create an empty ArrayList, and add some elements.\n        ScrambleList^ integerList = gcnew ScrambleList();\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            integerList-&gt;Add(i);\n        }\n\n        Console::WriteLine(&quot;Ordered:<br>&quot;);\n        for each (int value in integerList)\n        {\n            Console::Write(&quot;{0}, &quot;, value);\n        }\n        Console::WriteLine(&quot;&lt;end&gt;<br><br>Scrambled:<br>&quot;);\n\n        // Scramble the order of the items in the list.\n        integerList-&gt;Scramble();\n\n        for each (int value in integerList)\n        {\n            Console::Write(&quot;{0}, &quot;, value);\n        }\n        Console::WriteLine(&quot;&lt;end&gt;<br>&quot;);\n    }\n\n    void Scramble()\n    {\n        int limit = this-&gt;Count;\n        int temp;\n        int swapindex;\n        Random^ rnd = gcnew Random();\n        for (int i = 0; i &lt; limit; i++)\n        {\n            // The Item property of ArrayList is the default indexer. Thus,\n            // this-&gt;default[i] and this[i] are used interchangeably.\n            temp = (int)this-&gt;default[i];\n            swapindex = rnd-&gt;Next(0, limit - 1);\n            this[i] = this-&gt;default[swapindex];\n            this[swapindex] = temp;\n        }\n    }\n};\n\nint main()\n{\n    ScrambleList::Main();\n}\n// The program produces output similar to the following:\n//\n// Ordered:\n//\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &lt;end&gt;\n//\n// Scrambled:\n//\n// 5, 2, 8, 9, 6, 1, 7, 0, 4, 3, &lt;end&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ArrayList.Item#2\">Imports System\nImports System.Collections\n\nPublic Class ScrambleList\n    Inherits ArrayList\n\n    Public Shared Sub Main()\n        &#39; Create an empty ArrayList, and add some elements.\n        Dim integerList As New ScrambleList()\n\n        For i As Integer = 0 To 9\n            integerList.Add(i)\n        Next i\n\n        Console.WriteLine(&quot;Ordered:&quot; + vbNewLine)\n        For Each value As Integer In integerList\n            Console.Write(&quot;{0}, &quot;, value)\n        Next value\n        Console.WriteLine(&quot;&lt;end&gt;&quot; + vbNewLine + vbNewLine + &quot;Scrambled:&quot; + vbNewLine)\n\n        &#39; Scramble the order of the items in the list.\n        integerList.Scramble()\n\n        For Each value As Integer In integerList\n            Console.Write(&quot;{0}, &quot;, value)\n        Next value\n        Console.WriteLine(&quot;&lt;end&gt;&quot; + vbNewLine)\n    End Sub\n\n    Public Sub Scramble()\n        Dim limit As Integer = MyClass.Count\n        Dim temp As Integer\n        Dim swapindex As Integer\n        Dim rnd As New Random()\n        For i As Integer = 0 To limit - 1\n            &#39; The Item property of ArrayList is the default indexer. Thus,\n            &#39; Me(i) and MyClass.Item(i) are used interchangeably.\n            temp = CType(Me(i), Integer)\n            swapindex = rnd.Next(0, limit - 1)\n            MyClass.Item(i) = Me(swapindex)\n            MyClass.Item(swapindex) = temp\n        Next i\n    End Sub\nEnd Class\n\n&#39; The program produces output similar to the following:\n&#39;\n&#39; Ordered:\n&#39;\n&#39; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &lt;end&gt;\n&#39;\n&#39; Scrambled:\n&#39;\n&#39; 5, 2, 8, 9, 6, 1, 7, 0, 4, 3, &lt;end&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ArrayList.Item#2\">using System;\nusing System.Collections;\n\npublic class ScrambleList : ArrayList\n{\n    public static void Main()\n    {\n        // Create an empty ArrayList, and add some elements.\n        ScrambleList integerList = new ScrambleList();\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            integerList.Add(i);\n        }\n\n        Console.WriteLine(&quot;Ordered:<br>&quot;);\n        foreach (int value in integerList)\n        {\n            Console.Write(&quot;{0}, &quot;, value);\n        }\n        Console.WriteLine(&quot;&lt;end&gt;<br><br>Scrambled:<br>&quot;);\n        \n        // Scramble the order of the items in the list.\n        integerList.Scramble();\n        \n        foreach (int value in integerList)\n        {\n            Console.Write(&quot;{0}, &quot;, value);\n        }\n        Console.WriteLine(&quot;&lt;end&gt;<br>&quot;);\n    }\n\n    public void Scramble()\n    {\n        int limit = this.Count;\n        int temp;\n        int swapindex;\n        Random rnd = new Random();\n        for (int i = 0; i &lt; limit; i++)\n        {\n            // The Item property of ArrayList is the default indexer. Thus,\n            // this[i] is used instead of Item[i].\n            temp = (int)this[i];\n            swapindex = rnd.Next(0, limit - 1);\n            this[i] = this[swapindex];\n            this[swapindex] = temp;\n        }\n    }\n}\n\n// The program produces output similar to the following:\n//\n// Ordered:\n//\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &lt;end&gt;\n//\n// Scrambled:\n//\n// 5, 2, 8, 9, 6, 1, 7, 0, 4, 3, &lt;end&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To create a synchronized version of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, use the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Synchronized_\" data-linktype=\"relative-path\">Synchronized</a> method. However, derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, not directly on the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IsSynchronized Example#2\">        ArrayList^ myCollection = gcnew ArrayList();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IsSynchronized Example#2\">        Dim myCollection As New ArrayList()\n\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IsSynchronized Example#2\">        ArrayList myCollection = new ArrayList();\n\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Adapter_System_Collections_IList_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Adapter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Adapter(IList)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper for a specific <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.ArrayList Adapter (System.Collections.IList list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> to wrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper around the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Adapter does not copy the contents of <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>. Instead, it only creates an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper around <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>; therefore, changes to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> also affect the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> class provides generic <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Reverse_\" data-linktype=\"relative-path\">Reverse</a>, <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> and <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Sort_\" data-linktype=\"relative-path\">Sort</a> methods. This wrapper can be a means to use those methods on <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<h2 id=\"version-compatibility\">Version Compatibility</h2>\n<p> In the .NET Framework version 1.0 and 1.1, calling the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_GetEnumerator_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetEnumerator(Int32,Int32)</a> method overload on the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count. In the .NET Framework 2.0 the second argument is correctly treated as a count.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an object to the end of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Add (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to be added to the end of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> index at which the <code>value</code> has been added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> already equals <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> is less than <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to add elements to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.Add Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n \n       // Creates and initializes a new Queue.\n       Queue myQueue = new Queue();\n       myQueue.Enqueue( &quot;jumped&quot; );\n       myQueue.Enqueue( &quot;over&quot; );\n       myQueue.Enqueue( &quot;the&quot; );\n       myQueue.Enqueue( &quot;lazy&quot; );\n       myQueue.Enqueue( &quot;dog&quot; );\n \n       // Displays the ArrayList and the Queue.\n       Console.WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n       PrintValues( myAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n       Console.WriteLine( &quot;The Queue initially contains the following:&quot; );\n       PrintValues( myQueue, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n \n       // Copies the Queue elements to the end of the ArrayList.\n       myAL.AddRange( myQueue );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;The ArrayList now contains the following:&quot; );\n       PrintValues( myAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n    }\n \n    public static void PrintValues( IEnumerable myList, char mySeparator )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n     The    quick    brown    fox\n The Queue initially contains the following:\n     jumped    over    the    lazy    dog\n The ArrayList now contains the following:\n     The    quick    brown    fox    jumped    over    the    lazy    dog\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Add Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQueue As New Queue()\n        myQueue.Enqueue(&quot;jumped&quot;)\n        myQueue.Enqueue(&quot;over&quot;)\n        myQueue.Enqueue(&quot;the&quot;)\n        myQueue.Enqueue(&quot;lazy&quot;)\n        myQueue.Enqueue(&quot;dog&quot;)\n        \n        &#39; Displays the ArrayList and the Queue.\n        Console.WriteLine(&quot;The ArrayList initially contains the following:&quot;)\n        PrintValues(myAL, ControlChars.Tab)\n        Console.WriteLine(&quot;The Queue initially contains the following:&quot;)\n        PrintValues(myQueue, ControlChars.Tab)\n        \n        &#39; Copies the Queue elements to the end of the ArrayList.\n        myAL.AddRange(myQueue)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;The ArrayList now contains the following:&quot;)\n        PrintValues(myAL, ControlChars.Tab)\n    End Sub\n\n    Public Shared Sub PrintValues(myList As IEnumerable, mySeparator As Char)\n        Dim obj As [Object]\n        For Each obj In  myList\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, obj )\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following:\n&#39;     The    quick    brown    fox\n&#39; The Queue initially contains the following:\n&#39;     jumped    over    the    lazy    dog\n&#39; The ArrayList now contains the following:\n&#39;     The    quick    brown    fox    jumped    over    the    lazy    dog \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Add Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQueue = gcnew Queue;\n   myQueue-&gt;Enqueue( &quot;jumped&quot; );\n   myQueue-&gt;Enqueue( &quot;over&quot; );\n   myQueue-&gt;Enqueue( &quot;the&quot; );\n   myQueue-&gt;Enqueue( &quot;lazy&quot; );\n   myQueue-&gt;Enqueue( &quot;dog&quot; );\n   \n   // Displays the ArrayList and the Queue.\n   Console::WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n   PrintValues( myAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n   Console::WriteLine( &quot;The Queue initially contains the following:&quot; );\n   PrintValues( myQueue, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n   \n   // Copies the Queue elements to the end of the ArrayList.\n   myAL-&gt;AddRange( myQueue );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;The ArrayList now contains the following:&quot; );\n   PrintValues( myAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n}\n\nvoid PrintValues( IEnumerable^ myList, char mySeparator )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nThe ArrayList initially contains the following:\n    The    quick    brown    fox\nThe Queue initially contains the following:\n    jumped    over    the    lazy    dog\nThe ArrayList now contains the following:\n    The    quick    brown    fox    jumped    over    the    lazy    dog\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_AddRange_System_Collections_ICollection_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(ICollection)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the elements of an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to the end of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AddRange (System.Collections.ICollection c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> whose elements should be added to the end of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The collection itself cannot be <code>null</code>, but it can contain elements that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>c</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> The order of the elements in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is preserved in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> If the new <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> (the current <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> plus the size of the collection) will be greater than <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> can accommodate the new elements without increasing the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements to be added and <code>m</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to add elements to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.Add Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n \n       // Creates and initializes a new Queue.\n       Queue myQueue = new Queue();\n       myQueue.Enqueue( &quot;jumped&quot; );\n       myQueue.Enqueue( &quot;over&quot; );\n       myQueue.Enqueue( &quot;the&quot; );\n       myQueue.Enqueue( &quot;lazy&quot; );\n       myQueue.Enqueue( &quot;dog&quot; );\n \n       // Displays the ArrayList and the Queue.\n       Console.WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n       PrintValues( myAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n       Console.WriteLine( &quot;The Queue initially contains the following:&quot; );\n       PrintValues( myQueue, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n \n       // Copies the Queue elements to the end of the ArrayList.\n       myAL.AddRange( myQueue );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;The ArrayList now contains the following:&quot; );\n       PrintValues( myAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n    }\n \n    public static void PrintValues( IEnumerable myList, char mySeparator )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n     The    quick    brown    fox\n The Queue initially contains the following:\n     jumped    over    the    lazy    dog\n The ArrayList now contains the following:\n     The    quick    brown    fox    jumped    over    the    lazy    dog\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Add Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQueue As New Queue()\n        myQueue.Enqueue(&quot;jumped&quot;)\n        myQueue.Enqueue(&quot;over&quot;)\n        myQueue.Enqueue(&quot;the&quot;)\n        myQueue.Enqueue(&quot;lazy&quot;)\n        myQueue.Enqueue(&quot;dog&quot;)\n        \n        &#39; Displays the ArrayList and the Queue.\n        Console.WriteLine(&quot;The ArrayList initially contains the following:&quot;)\n        PrintValues(myAL, ControlChars.Tab)\n        Console.WriteLine(&quot;The Queue initially contains the following:&quot;)\n        PrintValues(myQueue, ControlChars.Tab)\n        \n        &#39; Copies the Queue elements to the end of the ArrayList.\n        myAL.AddRange(myQueue)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;The ArrayList now contains the following:&quot;)\n        PrintValues(myAL, ControlChars.Tab)\n    End Sub\n\n    Public Shared Sub PrintValues(myList As IEnumerable, mySeparator As Char)\n        Dim obj As [Object]\n        For Each obj In  myList\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, obj )\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following:\n&#39;     The    quick    brown    fox\n&#39; The Queue initially contains the following:\n&#39;     jumped    over    the    lazy    dog\n&#39; The ArrayList now contains the following:\n&#39;     The    quick    brown    fox    jumped    over    the    lazy    dog \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Add Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQueue = gcnew Queue;\n   myQueue-&gt;Enqueue( &quot;jumped&quot; );\n   myQueue-&gt;Enqueue( &quot;over&quot; );\n   myQueue-&gt;Enqueue( &quot;the&quot; );\n   myQueue-&gt;Enqueue( &quot;lazy&quot; );\n   myQueue-&gt;Enqueue( &quot;dog&quot; );\n   \n   // Displays the ArrayList and the Queue.\n   Console::WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n   PrintValues( myAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n   Console::WriteLine( &quot;The Queue initially contains the following:&quot; );\n   PrintValues( myQueue, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n   \n   // Copies the Queue elements to the end of the ArrayList.\n   myAL-&gt;AddRange( myQueue );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;The ArrayList now contains the following:&quot; );\n   PrintValues( myAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n}\n\nvoid PrintValues( IEnumerable^ myList, char mySeparator )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nThe ArrayList initially contains the following:\n    The    quick    brown    fox\nThe Queue initially contains the following:\n    jumped    over    the    lazy    dog\nThe ArrayList now contains the following:\n    The    quick    brown    fox    jumped    over    the    lazy    dog\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_BinarySearch_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches the entire sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> for an element using the default comparer and returns the zero-based index of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int BinarySearch (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of <code>value</code> in the sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Neither <code>value</code> nor the elements of <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not of the same type as the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter and each element of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, which is used for comparisons. The elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation; otherwise, the result might be incorrect.  </p>\n<p> Comparing <code>null</code> with any type is allowed and does not generate an exception when using <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>. When sorting, <code>null</code> is considered to be less than any other object.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, this index should be used as the insertion point to maintain the sort order.  </p>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> to locate a specific object in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.BinarySearch1 Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid FindMyObject( ArrayList^ myList, Object^ myObject );\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList. BinarySearch requires\n   // a sorted ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   for ( int i = 0; i &lt;= 4; i++ )\n      myAL-&gt;Add( i * 2 );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;The Int32 ArrayList contains the following:&quot; );\n   PrintValues( myAL );\n   \n   // Locates a specific object that does not exist in the ArrayList.\n   Object^ myObjectOdd = 3;\n   FindMyObject( myAL, myObjectOdd );\n   \n   // Locates an object that exists in the ArrayList.\n   Object^ myObjectEven = 6;\n   FindMyObject( myAL, myObjectEven );\n}\n\nvoid FindMyObject( ArrayList^ myList, Object^ myObject )\n{\n   int myIndex = myList-&gt;BinarySearch( myObject );\n   if ( myIndex &lt; 0 )\n      Console::WriteLine( &quot;The object to search for ({0}) is not found. The next larger object is at index {1}.&quot;, myObject,  ~myIndex );\n   else\n      Console::WriteLine( &quot;The object to search for ({0}) is at index {1}.&quot;, myObject, myIndex );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The Int32 ArrayList contains the following:\n    0   2   4   6   8\n The object to search for (3) is not found. The next larger object is at index 2.\n The object to search for (6) is at index 3.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.BinarySearch1 Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList. BinarySearch requires\n       // a sorted ArrayList.\n       ArrayList myAL = new ArrayList();\n       for ( int i = 0; i &lt;= 4; i++ )\n          myAL.Add( i*2 );\n\n       // Displays the ArrayList.\n       Console.WriteLine( &quot;The Int32 ArrayList contains the following:&quot; );\n       PrintValues( myAL );\n \n       // Locates a specific object that does not exist in the ArrayList.\n       Object myObjectOdd = 3;\n       FindMyObject( myAL, myObjectOdd );\n \n       // Locates an object that exists in the ArrayList.\n       Object myObjectEven = 6;\n       FindMyObject( myAL, myObjectEven );\n    }\n \n    public static void FindMyObject( ArrayList myList, Object myObject )  {\n       int myIndex=myList.BinarySearch( myObject );\n       if ( myIndex &lt; 0 )\n          Console.WriteLine( &quot;The object to search for ({0}) is not found. The next larger object is at index {1}.&quot;, myObject, ~myIndex );\n       else\n          Console.WriteLine( &quot;The object to search for ({0}) is at index {1}.&quot;, myObject, myIndex );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n The Int32 ArrayList contains the following:\n    0   2   4   6   8\n The object to search for (3) is not found. The next larger object is at index 2.\n The object to search for (6) is at index 3.\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.BinarySearch1 Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList. BinarySearch requires\n        &#39; a sorted ArrayList.\n        Dim myAL As New ArrayList()\n        Dim i As Integer\n        For i = 0 To 4\n            myAL.Add(i * 2)\n        Next i \n\n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;The Int32 ArrayList contains the following:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Locates a specific object that does not exist in the ArrayList.\n        Dim myObjectOdd As Object = 3\n        FindMyObject(myAL, myObjectOdd)\n        \n        &#39; Locates an object that exists in the ArrayList.\n        Dim myObjectEven As Object = 6\n        FindMyObject(myAL, myObjectEven)\n    End Sub    \n    \n    Public Shared Sub FindMyObject(myList As ArrayList, myObject As Object)\n        Dim myIndex As Integer = myList.BinarySearch(myObject)\n        If myIndex &lt; 0 Then\n            Console.WriteLine(&quot;The object to search for ({0}) is not found. &quot; _\n               + &quot;The next larger object is at index {1}.&quot;, myObject, _\n               Not myIndex)\n        Else\n            Console.WriteLine(&quot;The object to search for ({0}) is at index &quot; _\n               + &quot;{1}.&quot;, myObject, myIndex)\n        End If\n    End Sub\n     \n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n    \nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Int32 ArrayList contains the following:\n&#39;     0    2    4    6    8\n&#39; The object to search for (3) is not found. The next larger object is at index 2.\n&#39; The object to search for (6) is at index 3. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_BinarySearch_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Searches the entire sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> for an element using the specified comparer and returns the zero-based index of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int BinarySearch (object value, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default comparer that is the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of <code>value</code> in the sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code> and neither <code>value</code> nor the elements of <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code> and <code>value</code> is not of the same type as the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparer customizes how the elements are compared. For example, you can use a <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a> instance as the comparer to perform case-insensitive string searches.  </p>\n<p> If <code>comparer</code> is provided, the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> are compared to the specified value using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation. The elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> must already be sorted in increasing value according to the sort order defined by <code>comparer</code>; otherwise, the result might be incorrect.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the comparison is done using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the element itself or by the specified value. The elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation; otherwise, the result might be incorrect.  </p>\n<p> Comparing <code>null</code> with any type is allowed and does not generate an exception when using <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>. When sorting, <code>null</code> is considered to be less than any other object.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, this index should be used as the insertion point to maintain the sort order.  </p>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> of colored animals. The provided <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.BinarySearch1 Example#2\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class SimpleStringComparer : public IComparer\n{\n    virtual int Compare(Object^ x, Object^ y) sealed = IComparer::Compare\n    {\n        String^ cmpstr = (String^)x;\n        return cmpstr-&gt;CompareTo((String^)y);\n    }\n};\n\npublic ref class MyArrayList : public ArrayList\n{\npublic:\n    static void Main()\n    {\n        // Creates and initializes a new ArrayList.\n        MyArrayList^ coloredAnimals = gcnew MyArrayList();\n\n        coloredAnimals-&gt;Add(&quot;White Tiger&quot;);\n        coloredAnimals-&gt;Add(&quot;Pink Bunny&quot;);\n        coloredAnimals-&gt;Add(&quot;Red Dragon&quot;);\n        coloredAnimals-&gt;Add(&quot;Green Frog&quot;);\n        coloredAnimals-&gt;Add(&quot;Blue Whale&quot;);\n        coloredAnimals-&gt;Add(&quot;Black Cat&quot;);\n        coloredAnimals-&gt;Add(&quot;Yellow Lion&quot;);\n\n        // BinarySearch requires a sorted ArrayList.\n        coloredAnimals-&gt;Sort();\n\n        // Compare results of an iterative search with a binary search\n        int index = coloredAnimals-&gt;IterativeSearch(&quot;White Tiger&quot;);\n        Console::WriteLine(&quot;Iterative search, item found at index: {0}&quot;, index);\n\n        index = coloredAnimals-&gt;BinarySearch(&quot;White Tiger&quot;, gcnew SimpleStringComparer());\n        Console::WriteLine(&quot;Binary search, item found at index:    {0}&quot;, index);\n    }\n\n    int IterativeSearch(Object^ finditem)\n    {\n        int index = -1;\n\n        for (int i = 0; i &lt; this-&gt;Count; i++)\n        {\n            if (finditem-&gt;Equals(this[i]))\n            {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n};\n\nint main()\n{\n    MyArrayList::Main();\n}\n//\n// This code produces the following output.\n//\n// Iterative search, item found at index: 5\n// Binary search, item found at index:    5\n//\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.BinarySearch1 Example#2\">using System;\nusing System.Collections;\n\npublic class SimpleStringComparer : IComparer\n{\n    int IComparer.Compare(object x, object y)\n    {\n        string cmpstr = (string)x;\n        return cmpstr.CompareTo((string)y);\n    }\n}\n\npublic class MyArrayList : ArrayList\n{\n    public static void Main()\n    {\n        // Creates and initializes a new ArrayList.\n        MyArrayList coloredAnimals = new MyArrayList();\n\n        coloredAnimals.Add(&quot;White Tiger&quot;);\n        coloredAnimals.Add(&quot;Pink Bunny&quot;);\n        coloredAnimals.Add(&quot;Red Dragon&quot;);\n        coloredAnimals.Add(&quot;Green Frog&quot;);\n        coloredAnimals.Add(&quot;Blue Whale&quot;);\n        coloredAnimals.Add(&quot;Black Cat&quot;);\n        coloredAnimals.Add(&quot;Yellow Lion&quot;);\n\n        // BinarySearch requires a sorted ArrayList.\n        coloredAnimals.Sort();\n\n        // Compare results of an iterative search with a binary search\n        int index = coloredAnimals.IterativeSearch(&quot;White Tiger&quot;);\n        Console.WriteLine(&quot;Iterative search, item found at index: {0}&quot;, index);\n\n        index = coloredAnimals.BinarySearch(&quot;White Tiger&quot;, new SimpleStringComparer());\n        Console.WriteLine(&quot;Binary search, item found at index:    {0}&quot;, index);\n    }\n\n    public int IterativeSearch(object finditem)\n    {\n        int index = -1;\n\n        for (int i = 0; i &lt; this.Count; i++)\n        {\n            if (finditem.Equals(this[i]))\n            {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n}\n//\n// This code produces the following output.\n//\n// Iterative search, item found at index: 5\n// Binary search, item found at index:    5\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.BinarySearch1 Example#2\">Imports System\nImports System.Collections\n\nPublic Class SimpleStringComparer\n    Implements IComparer\n\n    Function Compare(x As Object, y As Object) As Integer Implements IComparer.Compare\n          Dim cmpstr As String = CType(x, String)\n          Return cmpstr.CompareTo(CType(y, String))\n    End Function\nEnd Class\n\nPublic Class MyArrayList\n    Inherits ArrayList\n\n    Public Shared Sub Main()\n        &#39; Creates and initializes a new ArrayList.\n        Dim coloredAnimals As New MyArrayList()\n\n        coloredAnimals.Add(&quot;White Tiger&quot;)\n        coloredAnimals.Add(&quot;Pink Bunny&quot;)\n        coloredAnimals.Add(&quot;Red Dragon&quot;)\n        coloredAnimals.Add(&quot;Green Frog&quot;)\n        coloredAnimals.Add(&quot;Blue Whale&quot;)\n        coloredAnimals.Add(&quot;Black Cat&quot;)\n        coloredAnimals.Add(&quot;Yellow Lion&quot;)\n\n        &#39; BinarySearch requires a sorted ArrayList.\n        coloredAnimals.Sort()\n\n        &#39; Compare results of an iterative search with a binary search\n        Dim index As Integer = coloredAnimals.IterativeSearch(&quot;White Tiger&quot;)\n        Console.WriteLine(&quot;Iterative search, item found at index: {0}&quot;, index)\n\n        index = coloredAnimals.BinarySearch(&quot;White Tiger&quot;, New SimpleStringComparer())\n        Console.WriteLine(&quot;Binary search, item found at index:    {0}&quot;, index)\n    End Sub\n\n    Public Function IterativeSearch(finditem As Object) As Integer\n        Dim index As Integer = -1\n\n        For i As Integer = 0 To MyClass.Count - 1\n            If finditem.Equals(MyClass.Item(i))\n                index = i\n                Exit For\n            End If\n        Next i\n        Return index\n    End Function\nEnd Class\n&#39;\n&#39; This code produces the following output.\n&#39;\n&#39; Iterative search, item found at index: 5\n&#39; Binary search, item found at index:    5\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_BinarySearch_System_Int32_System_Int32_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(Int32,Int32,Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Searches a range of elements in the sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> for an element using the specified comparer and returns the zero-based index of the element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default comparer that is the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of <code>value</code> in the sorted <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, if <code>value</code> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not denote a valid range in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> -or-  </p>\n<p> <code>comparer</code> is <code>null</code> and neither <code>value</code> nor the elements of <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code> and <code>value</code> is not of the same type as the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparer customizes how the elements are compared. For example, you can use a <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a> instance as the comparer to perform case-insensitive string searches.  </p>\n<p> If <code>comparer</code> is provided, the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> are compared to the specified value using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation. The elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> must already be sorted in increasing value according to the sort order defined by <code>comparer</code>; otherwise, the result might be incorrect.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the comparison is done using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the element itself or by the specified value. The elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation; otherwise, the result might be incorrect.  </p>\n<p> Comparing <code>null</code> with any type is allowed and does not generate an exception when using <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>. When sorting, <code>null</code> is considered to be less than any other object.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, this index should be used as the insertion point to maintain the sort order.  </p>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Clear\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> remains unchanged.  To reset the capacity of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, call <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a> or set the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property directly. Trimming an empty <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to trim the unused portions of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> and how to clear the values of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.Clear Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;Initially,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n \n       // Trim the ArrayList.\n       myAL.TrimToSize();\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;After TrimToSize,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n \n       // Clear the ArrayList.\n       myAL.Clear();\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;After Clear,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n \n       // Trim the ArrayList again.\n       myAL.TrimToSize();\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;After the second TrimToSize,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Capacity : 16\n    Values:    The    quick    brown    fox    jumped\n After TrimToSize,\n    Count    : 5\n    Capacity : 5\n    Values:    The    quick    brown    fox    jumped\n After Clear,\n    Count    : 0\n    Capacity : 5\n    Values:\n After the second TrimToSize,\n    Count    : 0\n    Capacity : 16\n    Values:\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Clear Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;Initially,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n   \n   // Trim the ArrayList.\n   myAL-&gt;TrimToSize();\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;After TrimToSize,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n   \n   // Clear the ArrayList.\n   myAL-&gt;Clear();\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;After Clear,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n   \n   // Trim the ArrayList again.\n   myAL-&gt;TrimToSize();\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;After the second TrimToSize,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Capacity : 16\n    Values:    The    quick    brown    fox    jumped\n After TrimToSize,\n    Count    : 5\n    Capacity : 5\n    Values:    The    quick    brown    fox    jumped\n After Clear,\n    Count    : 0\n    Capacity : 5\n    Values:\n After the second TrimToSize,\n    Count    : 0\n    Capacity : 16\n    Values:\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Clear Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        \n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;Initially,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Trim the ArrayList.\n        myAL.TrimToSize()\n        \n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;After TrimToSize,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Clear the ArrayList.\n        myAL.Clear()\n        \n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;After Clear,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Trim the ArrayList again.\n        myAL.TrimToSize()\n        \n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;After the second TrimToSize,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n    End Sub\n\n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initially,\n&#39;    Count    : 5\n&#39;    Capacity : 16\n&#39;    Values:    The    quick    brown    fox    jumped\n&#39; After TrimToSize,\n&#39;    Count    : 5\n&#39;    Capacity : 5\n&#39;    Values:    The    quick    brown    fox    jumped\n&#39; After Clear,\n&#39;    Count    : 0\n&#39;    Capacity : 5\n&#39;    Values:\n&#39; After the second TrimToSize,\n&#39;    Count    : 0\n&#39;    Capacity : 16\n&#39;    Values:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Clone\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A shallow copy of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  </p>\n<p> In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an element is in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Contains (object item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> is found in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_CopyTo_System_Array_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the beginning of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void CopyTo (Array array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is greater than the number of elements that the destination <code>array</code> can contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> into a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">System.Array</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.CopyTo Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes the source ArrayList.\n       ArrayList mySourceList = new ArrayList();\n       mySourceList.Add( &quot;three&quot; );\n       mySourceList.Add( &quot;napping&quot; );\n       mySourceList.Add( &quot;cats&quot; );\n       mySourceList.Add( &quot;in&quot; );\n       mySourceList.Add( &quot;the&quot; );\n       mySourceList.Add( &quot;barn&quot; );\n \n       // Creates and initializes the one-dimensional target Array.\n       String[] myTargetArray = new String[15];\n       myTargetArray[0] = &quot;The&quot;;\n       myTargetArray[1] = &quot;quick&quot;;\n       myTargetArray[2] = &quot;brown&quot;;\n       myTargetArray[3] = &quot;fox&quot;;\n       myTargetArray[4] = &quot;jumped&quot;;\n       myTargetArray[5] = &quot;over&quot;;\n       myTargetArray[6] = &quot;the&quot;;\n       myTargetArray[7] = &quot;lazy&quot;;\n       myTargetArray[8] = &quot;dog&quot;;\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the second element from the source ArrayList to the target Array starting at index 7.\n       mySourceList.CopyTo( 1, myTargetArray, 7, 1 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source ArrayList to the target Array starting at index 6.\n       mySourceList.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source ArrayList to the target Array starting at index 0.\n       mySourceList.CopyTo( myTargetArray );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n    }\n \n    public static void PrintValues( String[] myArr, char mySeparator )  {\n       for ( int i = 0; i &lt; myArr.Length; i++ )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myArr[i] );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over the napping dog\n  The quick brown fox jumped over three napping cats in the barn\n  three napping cats in the barn three napping cats in the barn\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.CopyTo Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes the source ArrayList.\n        Dim mySourceList As New ArrayList()\n        mySourceList.Add(&quot;three&quot;)\n        mySourceList.Add(&quot;napping&quot;)\n        mySourceList.Add(&quot;cats&quot;)\n        mySourceList.Add(&quot;in&quot;)\n        mySourceList.Add(&quot;the&quot;)\n        mySourceList.Add(&quot;barn&quot;)\n        \n        &#39; Creates and initializes the one-dimensional target Array.\n        Dim myTargetArray(14) As String\n        myTargetArray(0) = &quot;The&quot;\n        myTargetArray(1) = &quot;quick&quot;\n        myTargetArray(2) = &quot;brown&quot;\n        myTargetArray(3) = &quot;fox&quot;\n        myTargetArray(4) = &quot;jumped&quot;\n        myTargetArray(5) = &quot;over&quot;\n        myTargetArray(6) = &quot;the&quot;\n        myTargetArray(7) = &quot;lazy&quot;\n        myTargetArray(8) = &quot;dog&quot;\n        \n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target Array contains the following &quot; _\n           + &quot;(before and after copying):&quot;)\n        PrintValues(myTargetArray, &quot; &quot;c)\n        \n        &#39; Copies the second element from the source ArrayList to the target\n        &#39; Array starting at index 7.\n        mySourceList.CopyTo(1, myTargetArray, 7, 1)\n        \n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n        \n        &#39; Copies the entire source ArrayList to the target Array starting\n        &#39; at index 6.\n        mySourceList.CopyTo(myTargetArray, 6)\n        \n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n        \n        &#39; Copies the entire source ArrayList to the target Array starting\n        &#39; at index 0.\n        mySourceList.CopyTo(myTargetArray)\n        \n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n    End Sub    \n    \n    Public Shared Sub PrintValues(myArr() As String, mySeparator As Char)\n        Dim i As Integer\n        For i = 0 To myArr.Length - 1\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n    \nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The target Array contains the following (before and after copying):\n&#39;  The quick brown fox jumped over the lazy dog      \n&#39;  The quick brown fox jumped over the napping dog      \n&#39;  The quick brown fox jumped over three napping cats in the barn   \n&#39;  three napping cats in the barn three napping cats in the barn\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.CopyTo Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( array&lt;String^&gt;^myArr, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes the source ArrayList.\n   ArrayList^ mySourceList = gcnew ArrayList;\n   mySourceList-&gt;Add( &quot;three&quot; );\n   mySourceList-&gt;Add( &quot;napping&quot; );\n   mySourceList-&gt;Add( &quot;cats&quot; );\n   mySourceList-&gt;Add( &quot;in&quot; );\n   mySourceList-&gt;Add( &quot;the&quot; );\n   mySourceList-&gt;Add( &quot;barn&quot; );\n   \n   // Creates and initializes the one-dimensional target Array.\n   array&lt;String^&gt;^myTargetArray = gcnew array&lt;String^&gt;(15);\n   myTargetArray[ 0 ] = &quot;The&quot;;\n   myTargetArray[ 1 ] = &quot;quick&quot;;\n   myTargetArray[ 2 ] = &quot;brown&quot;;\n   myTargetArray[ 3 ] = &quot;fox&quot;;\n   myTargetArray[ 4 ] = &quot;jumped&quot;;\n   myTargetArray[ 5 ] = &quot;over&quot;;\n   myTargetArray[ 6 ] = &quot;the&quot;;\n   myTargetArray[ 7 ] = &quot;lazy&quot;;\n   myTargetArray[ 8 ] = &quot;dog&quot;;\n   \n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the second element from the source ArrayList to the target ArrayList starting at index 7.\n   mySourceList-&gt;CopyTo( 1, myTargetArray, 7, 1 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the entire source ArrayList to the target ArrayList starting at index 6.\n   mySourceList-&gt;CopyTo( myTargetArray, 6 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the entire source ArrayList to the target ArrayList starting at index 0.\n   mySourceList-&gt;CopyTo( myTargetArray );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n}\n\nvoid PrintValues( array&lt;String^&gt;^myArr, char mySeparator )\n{\n   for ( int i = 0; i &lt; myArr-&gt;Length; i++ )\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, myArr[ i ] );\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over the napping dog\n  The quick brown fox jumped over three napping cats in the barn\n  three napping cats in the barn three napping cats in the barn\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void CopyTo (Array array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> into a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">System.Array</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.CopyTo1 Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( array&lt;String^&gt;^myArr, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes the source ArrayList.\n   ArrayList^ mySourceList = gcnew ArrayList;\n   mySourceList-&gt;Add( &quot;three&quot; );\n   mySourceList-&gt;Add( &quot;napping&quot; );\n   mySourceList-&gt;Add( &quot;cats&quot; );\n   mySourceList-&gt;Add( &quot;in&quot; );\n   mySourceList-&gt;Add( &quot;the&quot; );\n   mySourceList-&gt;Add( &quot;barn&quot; );\n   \n   // Creates and initializes the one-dimensional target Array.\n   array&lt;String^&gt;^myTargetArray = gcnew array&lt;String^&gt;(15);\n   myTargetArray[ 0 ] = &quot;The&quot;;\n   myTargetArray[ 1 ] = &quot;quick&quot;;\n   myTargetArray[ 2 ] = &quot;brown&quot;;\n   myTargetArray[ 3 ] = &quot;fox&quot;;\n   myTargetArray[ 4 ] = &quot;jumped&quot;;\n   myTargetArray[ 5 ] = &quot;over&quot;;\n   myTargetArray[ 6 ] = &quot;the&quot;;\n   myTargetArray[ 7 ] = &quot;lazy&quot;;\n   myTargetArray[ 8 ] = &quot;dog&quot;;\n   \n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the second element from the source ArrayList to the target Array, starting at index 7.\n   mySourceList-&gt;CopyTo( 1, myTargetArray, 7, 1 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the entire source ArrayList to the target Array, starting at index 6.\n   mySourceList-&gt;CopyTo( myTargetArray, 6 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the entire source ArrayList to the target Array, starting at index 0.\n   mySourceList-&gt;CopyTo( myTargetArray );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n}\n\nvoid PrintValues( array&lt;String^&gt;^myArr, char mySeparator )\n{\n   for ( int i = 0; i &lt; myArr-&gt;Length; i++ )\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, myArr[ i ] );\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over the napping dog\n  The quick brown fox jumped over three napping cats in the barn\n  three napping cats in the barn three napping cats in the barn\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.CopyTo1 Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes the source ArrayList.\n       ArrayList mySourceList = new ArrayList();\n       mySourceList.Add( &quot;three&quot; );\n       mySourceList.Add( &quot;napping&quot; );\n       mySourceList.Add( &quot;cats&quot; );\n       mySourceList.Add( &quot;in&quot; );\n       mySourceList.Add( &quot;the&quot; );\n       mySourceList.Add( &quot;barn&quot; );\n \n       // Creates and initializes the one-dimensional target Array.\n       String[] myTargetArray = new String[15];\n       myTargetArray[0] = &quot;The&quot;;\n       myTargetArray[1] = &quot;quick&quot;;\n       myTargetArray[2] = &quot;brown&quot;;\n       myTargetArray[3] = &quot;fox&quot;;\n       myTargetArray[4] = &quot;jumped&quot;;\n       myTargetArray[5] = &quot;over&quot;;\n       myTargetArray[6] = &quot;the&quot;;\n       myTargetArray[7] = &quot;lazy&quot;;\n       myTargetArray[8] = &quot;dog&quot;;\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the second element from the source ArrayList to the target Array, starting at index 7.\n       mySourceList.CopyTo( 1, myTargetArray, 7, 1 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source ArrayList to the target Array, starting at index 6.\n       mySourceList.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source ArrayList to the target Array, starting at index 0.\n       mySourceList.CopyTo( myTargetArray );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n\n    }\n \n    public static void PrintValues( String[] myArr, char mySeparator )  {\n       for ( int i = 0; i &lt; myArr.Length; i++ )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myArr[i] );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over the napping dog\n  The quick brown fox jumped over three napping cats in the barn\n  three napping cats in the barn three napping cats in the barn\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.CopyTo1 Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes the source ArrayList.\n        Dim mySourceList As New ArrayList()\n        mySourceList.Add(&quot;three&quot;)\n        mySourceList.Add(&quot;napping&quot;)\n        mySourceList.Add(&quot;cats&quot;)\n        mySourceList.Add(&quot;in&quot;)\n        mySourceList.Add(&quot;the&quot;)\n        mySourceList.Add(&quot;barn&quot;)\n\n        &#39; Creates and initializes the one-dimensional target Array.\n        Dim myTargetArray(14) As String\n        myTargetArray(0) = &quot;The&quot;\n        myTargetArray(1) = &quot;quick&quot;\n        myTargetArray(2) = &quot;brown&quot;\n        myTargetArray(3) = &quot;fox&quot;\n        myTargetArray(4) = &quot;jumped&quot;\n        myTargetArray(5) = &quot;over&quot;\n        myTargetArray(6) = &quot;the&quot;\n        myTargetArray(7) = &quot;lazy&quot;\n        myTargetArray(8) = &quot;dog&quot;\n\n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target Array contains the following (before and after copying):&quot;)\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the second element from the source ArrayList to the target Array, starting at index 7.\n        mySourceList.CopyTo(1, myTargetArray, 7, 1)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the entire source ArrayList to the target Array, starting at index 6.\n        mySourceList.CopyTo(myTargetArray, 6)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the entire source ArrayList to the target Array, starting at index 0.\n        mySourceList.CopyTo(myTargetArray)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myArr() As String, mySeparator As Char)\n        Dim i As Integer\n        For i = 0 To myArr.Length - 1\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesArrayList \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The target Array contains the following (before and after copying):\n&#39;  The quick brown fox jumped over the lazy dog\n&#39;  The quick brown fox jumped over the napping dog\n&#39;  The quick brown fox jumped over three napping cats in the barn\n&#39;  three napping cats in the barn three napping cats in the barn\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_CopyTo_System_Int32_System_Array_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Int32,Array,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a range of elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void CopyTo (int index, Array array, int arrayIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> at which copying begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>arrayIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than the <span class=\"xref\">stem.Collections.ArrayList.Count*</span> of the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> -or-  </p>\n<p> The number of elements from <code>index</code> to the end of the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> into a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">System.Array</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.CopyTo1 Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( array&lt;String^&gt;^myArr, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes the source ArrayList.\n   ArrayList^ mySourceList = gcnew ArrayList;\n   mySourceList-&gt;Add( &quot;three&quot; );\n   mySourceList-&gt;Add( &quot;napping&quot; );\n   mySourceList-&gt;Add( &quot;cats&quot; );\n   mySourceList-&gt;Add( &quot;in&quot; );\n   mySourceList-&gt;Add( &quot;the&quot; );\n   mySourceList-&gt;Add( &quot;barn&quot; );\n   \n   // Creates and initializes the one-dimensional target Array.\n   array&lt;String^&gt;^myTargetArray = gcnew array&lt;String^&gt;(15);\n   myTargetArray[ 0 ] = &quot;The&quot;;\n   myTargetArray[ 1 ] = &quot;quick&quot;;\n   myTargetArray[ 2 ] = &quot;brown&quot;;\n   myTargetArray[ 3 ] = &quot;fox&quot;;\n   myTargetArray[ 4 ] = &quot;jumped&quot;;\n   myTargetArray[ 5 ] = &quot;over&quot;;\n   myTargetArray[ 6 ] = &quot;the&quot;;\n   myTargetArray[ 7 ] = &quot;lazy&quot;;\n   myTargetArray[ 8 ] = &quot;dog&quot;;\n   \n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the second element from the source ArrayList to the target Array, starting at index 7.\n   mySourceList-&gt;CopyTo( 1, myTargetArray, 7, 1 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the entire source ArrayList to the target Array, starting at index 6.\n   mySourceList-&gt;CopyTo( myTargetArray, 6 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the entire source ArrayList to the target Array, starting at index 0.\n   mySourceList-&gt;CopyTo( myTargetArray );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n}\n\nvoid PrintValues( array&lt;String^&gt;^myArr, char mySeparator )\n{\n   for ( int i = 0; i &lt; myArr-&gt;Length; i++ )\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, myArr[ i ] );\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over the napping dog\n  The quick brown fox jumped over three napping cats in the barn\n  three napping cats in the barn three napping cats in the barn\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.CopyTo1 Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes the source ArrayList.\n       ArrayList mySourceList = new ArrayList();\n       mySourceList.Add( &quot;three&quot; );\n       mySourceList.Add( &quot;napping&quot; );\n       mySourceList.Add( &quot;cats&quot; );\n       mySourceList.Add( &quot;in&quot; );\n       mySourceList.Add( &quot;the&quot; );\n       mySourceList.Add( &quot;barn&quot; );\n \n       // Creates and initializes the one-dimensional target Array.\n       String[] myTargetArray = new String[15];\n       myTargetArray[0] = &quot;The&quot;;\n       myTargetArray[1] = &quot;quick&quot;;\n       myTargetArray[2] = &quot;brown&quot;;\n       myTargetArray[3] = &quot;fox&quot;;\n       myTargetArray[4] = &quot;jumped&quot;;\n       myTargetArray[5] = &quot;over&quot;;\n       myTargetArray[6] = &quot;the&quot;;\n       myTargetArray[7] = &quot;lazy&quot;;\n       myTargetArray[8] = &quot;dog&quot;;\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the second element from the source ArrayList to the target Array, starting at index 7.\n       mySourceList.CopyTo( 1, myTargetArray, 7, 1 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source ArrayList to the target Array, starting at index 6.\n       mySourceList.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source ArrayList to the target Array, starting at index 0.\n       mySourceList.CopyTo( myTargetArray );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n\n    }\n \n    public static void PrintValues( String[] myArr, char mySeparator )  {\n       for ( int i = 0; i &lt; myArr.Length; i++ )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myArr[i] );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over the napping dog\n  The quick brown fox jumped over three napping cats in the barn\n  three napping cats in the barn three napping cats in the barn\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.CopyTo1 Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes the source ArrayList.\n        Dim mySourceList As New ArrayList()\n        mySourceList.Add(&quot;three&quot;)\n        mySourceList.Add(&quot;napping&quot;)\n        mySourceList.Add(&quot;cats&quot;)\n        mySourceList.Add(&quot;in&quot;)\n        mySourceList.Add(&quot;the&quot;)\n        mySourceList.Add(&quot;barn&quot;)\n\n        &#39; Creates and initializes the one-dimensional target Array.\n        Dim myTargetArray(14) As String\n        myTargetArray(0) = &quot;The&quot;\n        myTargetArray(1) = &quot;quick&quot;\n        myTargetArray(2) = &quot;brown&quot;\n        myTargetArray(3) = &quot;fox&quot;\n        myTargetArray(4) = &quot;jumped&quot;\n        myTargetArray(5) = &quot;over&quot;\n        myTargetArray(6) = &quot;the&quot;\n        myTargetArray(7) = &quot;lazy&quot;\n        myTargetArray(8) = &quot;dog&quot;\n\n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target Array contains the following (before and after copying):&quot;)\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the second element from the source ArrayList to the target Array, starting at index 7.\n        mySourceList.CopyTo(1, myTargetArray, 7, 1)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the entire source ArrayList to the target Array, starting at index 6.\n        mySourceList.CopyTo(myTargetArray, 6)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the entire source ArrayList to the target Array, starting at index 0.\n        mySourceList.CopyTo(myTargetArray)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myArr() As String, mySeparator As Char)\n        Dim i As Integer\n        For i = 0 To myArr.Length - 1\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesArrayList \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The target Array contains the following (before and after copying):\n&#39;  The quick brown fox jumped over the lazy dog\n&#39;  The quick brown fox jumped over the napping dog\n&#39;  The quick brown fox jumped over three napping cats in the barn\n&#39;  three napping cats in the barn three napping cats in the barn\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_FixedSize_System_Collections_ArrayList_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_FixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FixedSize(ArrayList)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper with a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to wrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper with a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This wrapper can be used to prevent additions to and deletions from the original <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The elements can still be modified or replaced.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a fixed-size wrapper around an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.IsFixedSize Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Create a fixed-size wrapper around the ArrayList.\n       ArrayList myFixedSizeAL = ArrayList.FixedSize( myAL );\n \n       // Display whether the ArrayLists have a fixed size or not.\n       Console.WriteLine( &quot;myAL {0}.&quot;, myAL.IsFixedSize ? &quot;has a fixed size&quot; : &quot;does not have a fixed size&quot; );\n       Console.WriteLine( &quot;myFixedSizeAL {0}.&quot;, myFixedSizeAL.IsFixedSize ? &quot;has a fixed size&quot; : &quot;does not have a fixed size&quot; );\n       Console.WriteLine();\n \n       // Display both ArrayLists.\n       Console.WriteLine( &quot;Initially,&quot; );\n       Console.Write( &quot;Standard  :&quot; );\n       PrintValues( myAL, &#39; &#39; );\n       Console.Write( &quot;Fixed size:&quot; );\n       PrintValues( myFixedSizeAL, &#39; &#39; );\n \n       // Sort is allowed in the fixed-size ArrayList.\n       myFixedSizeAL.Sort();\n \n       // Display both ArrayLists.\n       Console.WriteLine( &quot;After Sort,&quot; );\n       Console.Write( &quot;Standard  :&quot; );\n       PrintValues( myAL, &#39; &#39; );\n       Console.Write( &quot;Fixed size:&quot; );\n       PrintValues( myFixedSizeAL, &#39; &#39; );\n \n       // Reverse is allowed in the fixed-size ArrayList.\n       myFixedSizeAL.Reverse();\n \n       // Display both ArrayLists.\n       Console.WriteLine( &quot;After Reverse,&quot; );\n       Console.Write( &quot;Standard  :&quot; );\n       PrintValues( myAL, &#39; &#39; );\n       Console.Write( &quot;Fixed size:&quot; );\n       PrintValues( myFixedSizeAL, &#39; &#39; );\n \n       // Add an element to the standard ArrayList.\n       myAL.Add( &quot;AddMe&quot; );\n \n       // Display both ArrayLists.\n       Console.WriteLine( &quot;After adding to the standard ArrayList,&quot; );\n       Console.Write( &quot;Standard  :&quot; );\n       PrintValues( myAL, &#39; &#39; );\n       Console.Write( &quot;Fixed size:&quot; );\n       PrintValues( myFixedSizeAL, &#39; &#39; );\n       Console.WriteLine();\n \n       // Adding or inserting elements to the fixed-size ArrayList throws an exception.\n       try  {\n          myFixedSizeAL.Add( &quot;AddMe2&quot; );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n       try  {\n          myFixedSizeAL.Insert( 3, &quot;InsertMe&quot; );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n    }\n \n    public static void PrintValues( IEnumerable myList, char mySeparator )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, obj );\n       Console.WriteLine();\n    }\n\n }\n /*\n This code produces the following output.\n \n myAL does not have a fixed size.\n myFixedSizeAL has a fixed size.\n\n Initially,\n Standard  : The quick brown fox jumped over the lazy dog\n Fixed size: The quick brown fox jumped over the lazy dog\n After Sort,\n Standard  : brown dog fox jumped lazy over quick the The\n Fixed size: brown dog fox jumped lazy over quick the The\n After Reverse,\n Standard  : The the quick over lazy jumped fox dog brown\n Fixed size: The the quick over lazy jumped fox dog brown\n After adding to the standard ArrayList,\n Standard  : The the quick over lazy jumped fox dog brown AddMe\n Fixed size: The the quick over lazy jumped fox dog brown AddMe\n\n Exception: System.NotSupportedException: Collection was of a fixed size.\n    at System.Collections.FixedSizeArrayList.Add(Object obj)\n    at SamplesArrayList.Main()\n Exception: System.NotSupportedException: Collection was of a fixed size.\n    at System.Collections.FixedSizeArrayList.Insert(Int32 index, Object obj)\n    at SamplesArrayList.Main()\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IsFixedSize Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        \n        &#39; Create a fixed-size wrapper around the ArrayList.\n        Dim myFixedSizeAL As ArrayList = ArrayList.FixedSize(myAL)\n        \n        &#39; Display whether the ArrayLists have a fixed size or not.\n        Dim msg As String\n        If myAL.IsFixedSize Then\n            msg = &quot;has a fixed size&quot;\n        Else\n            msg = &quot;does not have a fixed size&quot;\n        End If\n        Console.WriteLine(&quot;myAL {0}.&quot;, msg)\n        If myFixedSizeAL.IsFixedSize Then\n            msg = &quot;has a fixed size&quot;\n        Else\n            msg = &quot;does not have a fixed size&quot;\n        End If\n        Console.WriteLine(&quot;myFixedSizeAL {0}.&quot;, msg)\n        Console.WriteLine()\n        \n        &#39; Display both ArrayLists.\n        Console.WriteLine(&quot;Initially,&quot;)\n        Console.Write(&quot;Standard  :&quot;)\n        PrintValues(myAL, &quot; &quot;c)\n        Console.Write(&quot;Fixed size:&quot;)\n        PrintValues(myFixedSizeAL, &quot; &quot;c)\n        \n        &#39; Sort is allowed in the fixed-size ArrayList.\n        myFixedSizeAL.Sort()\n        \n        &#39; Display both ArrayLists.\n        Console.WriteLine(&quot;After Sort,&quot;)\n        Console.Write(&quot;Standard  :&quot;)\n        PrintValues(myAL, &quot; &quot;c)\n        Console.Write(&quot;Fixed size:&quot;)\n        PrintValues(myFixedSizeAL, &quot; &quot;c)\n        \n        &#39; Reverse is allowed in the fixed-size ArrayList.\n        myFixedSizeAL.Reverse()\n        \n        &#39; Display both ArrayLists.\n        Console.WriteLine(&quot;After Reverse,&quot;)\n        Console.Write(&quot;Standard  :&quot;)\n        PrintValues(myAL, &quot; &quot;c)\n        Console.Write(&quot;Fixed size:&quot;)\n        PrintValues(myFixedSizeAL, &quot; &quot;c)\n        \n        &#39; Add an element to the standard ArrayList.\n        myAL.Add(&quot;AddMe&quot;)\n        \n        &#39; Display both ArrayLists.\n        Console.WriteLine(&quot;After adding to the standard ArrayList,&quot;)\n        Console.Write(&quot;Standard  :&quot;)\n        PrintValues(myAL, &quot; &quot;c)\n        Console.Write(&quot;Fixed size:&quot;)\n        PrintValues(myFixedSizeAL, &quot; &quot;c)\n        Console.WriteLine()\n        \n        &#39; Adding or inserting elements to the fixed-size ArrayList throws an exception.\n        Try\n            myFixedSizeAL.Add(&quot;AddMe2&quot;)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n        Try\n            myFixedSizeAL.Insert(3, &quot;InsertMe&quot;)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myList As IEnumerable, mySeparator As Char)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; myAL does not have a fixed size.\n&#39; myFixedSizeAL has a fixed size.\n&#39; \n&#39; Initially,\n&#39; Standard  : The quick brown fox jumped over the lazy dog\n&#39; Fixed size: The quick brown fox jumped over the lazy dog\n&#39; After Sort,\n&#39; Standard  : brown dog fox jumped lazy over quick the The\n&#39; Fixed size: brown dog fox jumped lazy over quick the The\n&#39; After Reverse,\n&#39; Standard  : The the quick over lazy jumped fox dog brown\n&#39; Fixed size: The the quick over lazy jumped fox dog brown\n&#39; After adding to the standard ArrayList,\n&#39; Standard  : The the quick over lazy jumped fox dog brown AddMe\n&#39; Fixed size: The the quick over lazy jumped fox dog brown AddMe\n&#39; \n&#39; Exception: System.NotSupportedException: Collection was of a fixed size.\n&#39;    at System.Collections.FixedSizeArrayList.Add(Object obj)\n&#39;    at SamplesArrayList.Main()\n&#39; Exception: System.NotSupportedException: Collection was of a fixed size.\n&#39;    at System.Collections.FixedSizeArrayList.Insert(Int32 index, Object obj)\n&#39;    at SamplesArrayList.Main()\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IsFixedSize Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Create a fixed-size wrapper around the ArrayList.\n   ArrayList^ myFixedSizeAL = ArrayList::FixedSize( myAL );\n   \n   // Display whether the ArrayLists have a fixed size or not.\n   Console::WriteLine( &quot;myAL {0}.&quot;, myAL-&gt;IsFixedSize ? (String^)&quot;has a fixed size&quot; : &quot;does not have a fixed size&quot; );\n   Console::WriteLine( &quot;myFixedSizeAL {0}.&quot;, myFixedSizeAL-&gt;IsFixedSize ? (String^)&quot;has a fixed size&quot; : &quot;does not have a fixed size&quot; );\n   Console::WriteLine();\n   \n   // Display both ArrayLists.\n   Console::WriteLine( &quot;Initially,&quot; );\n   Console::Write( &quot;Standard  :&quot; );\n   PrintValues( myAL, &#39; &#39; );\n   Console::Write( &quot;Fixed size:&quot; );\n   PrintValues( myFixedSizeAL, &#39; &#39; );\n   \n   // Sort is allowed in the fixed-size ArrayList.\n   myFixedSizeAL-&gt;Sort();\n   \n   // Display both ArrayLists.\n   Console::WriteLine( &quot;After Sort,&quot; );\n   Console::Write( &quot;Standard  :&quot; );\n   PrintValues( myAL, &#39; &#39; );\n   Console::Write( &quot;Fixed size:&quot; );\n   PrintValues( myFixedSizeAL, &#39; &#39; );\n   \n   // Reverse is allowed in the fixed-size ArrayList.\n   myFixedSizeAL-&gt;Reverse();\n   \n   // Display both ArrayLists.\n   Console::WriteLine( &quot;After Reverse,&quot; );\n   Console::Write( &quot;Standard  :&quot; );\n   PrintValues( myAL, &#39; &#39; );\n   Console::Write( &quot;Fixed size:&quot; );\n   PrintValues( myFixedSizeAL, &#39; &#39; );\n   \n   // Add an element to the standard ArrayList.\n   myAL-&gt;Add( &quot;AddMe&quot; );\n   \n   // Display both ArrayLists.\n   Console::WriteLine( &quot;After adding to the standard ArrayList,&quot; );\n   Console::Write( &quot;Standard  :&quot; );\n   PrintValues( myAL, &#39; &#39; );\n   Console::Write( &quot;Fixed size:&quot; );\n   PrintValues( myFixedSizeAL, &#39; &#39; );\n   Console::WriteLine();\n   \n   // Adding or inserting elements to the fixed-size ArrayList throws an exception.\n   try\n   {\n      myFixedSizeAL-&gt;Add( &quot;AddMe2&quot; );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n   try\n   {\n      myFixedSizeAL-&gt;Insert( 3, &quot;InsertMe&quot; );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n}\n\nvoid PrintValues( IEnumerable^ myList, char mySeparator )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n myAL does not have a fixed size.\n myFixedSizeAL has a fixed size.\n\n Initially,\n Standard  : The quick brown fox jumped over the lazy dog\n Fixed size: The quick brown fox jumped over the lazy dog\n After Sort,\n Standard  : brown dog fox jumped lazy over quick the The\n Fixed size: brown dog fox jumped lazy over quick the The\n After Reverse,\n Standard  : The the quick over lazy jumped fox dog brown\n Fixed size: The the quick over lazy jumped fox dog brown\n After adding to the standard ArrayList,\n Standard  : The the quick over lazy jumped fox dog brown AddMe\n Fixed size: The the quick over lazy jumped fox dog brown AddMe\n\n Exception: System.NotSupportedException: Collection was of a fixed size.\n    at System.Collections.FixedSizeArrayList.Add(Object obj)\n    at SamplesArrayList.Main()\n Exception: System.NotSupportedException: Collection was of a fixed size.\n    at System.Collections.FixedSizeArrayList.Insert(Int32 index, Object obj)\n    at SamplesArrayList.Main()\n\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_FixedSize_System_Collections_IList_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_FixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FixedSize(IList)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper with a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.IList FixedSize (System.Collections.IList list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> to wrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper with a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This wrapper can be used to prevent additions to and deletions from the original <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>. The elements can still be modified or replaced.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator for the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the enumerator for an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, and the enumerator for a range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Collections.ArrayList.GetEnumerator#1\">using System;\nusing System.Collections;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ArrayList colors = new ArrayList();\n        colors.Add(&quot;red&quot;);\n        colors.Add(&quot;blue&quot;);\n        colors.Add(&quot;green&quot;);\n        colors.Add(&quot;yellow&quot;);\n        colors.Add(&quot;beige&quot;);\n        colors.Add(&quot;brown&quot;);\n        colors.Add(&quot;magenta&quot;);\n        colors.Add(&quot;purple&quot;);\n\n        IEnumerator e = colors.GetEnumerator();\n        while (e.MoveNext())\n        {\n            Object obj = e.Current;\n            Console.WriteLine(obj);\n        }\n\n        Console.WriteLine();\n\n        IEnumerator e2 = colors.GetEnumerator(2, 4);\n        while (e2.MoveNext())\n        {\n            Object obj = e2.Current;\n            Console.WriteLine(obj);\n        }\n    }\n}\n\n/* This code example produces\n   the following ouput:\n    red\n    blue\n    green\n    yellow\n    beige\n    brown\n    magenta\n    purple\n\n    green\n    yellow\n    beige\n    brown\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Collections.ArrayList.GetEnumerator#1\">Imports System\nImports System.Collections\n\nClass Program\n    Private Shared Sub Main(ByVal args As String())\n        Dim colors As New ArrayList()\n        colors.Add(&quot;red&quot;)\n        colors.Add(&quot;blue&quot;)\n        colors.Add(&quot;green&quot;)\n        colors.Add(&quot;yellow&quot;)\n        colors.Add(&quot;beige&quot;)\n        colors.Add(&quot;brown&quot;)\n        colors.Add(&quot;magenta&quot;)\n        colors.Add(&quot;purple&quot;)\n        \n        Dim e As IEnumerator = colors.GetEnumerator()\n        While e.MoveNext()\n            Dim obj As [Object] = e.Current\n            Console.WriteLine(obj)\n        End While\n        \n        Console.WriteLine()\n        \n        Dim e2 As IEnumerator = colors.GetEnumerator(2, 4)\n        While e2.MoveNext()\n            Dim obj As [Object] = e2.Current\n            Console.WriteLine(obj)\n        End While\n    End Sub\nEnd Class\n\n&#39; This code example produces\n&#39; the following ouput:\n&#39; red\n&#39; blue\n&#39; green\n&#39; yellow\n&#39; beige\n&#39; brown\n&#39; magenta\n&#39; purple\n&#39;\n&#39; green\n&#39; yellow\n&#39; beige\n&#39; brown\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_GetEnumerator_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator for a range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> section that the enumerator should refer to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> section that the enumerator should refer to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the specified range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not specify a valid range in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual C++, <code>For Each</code> Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.  </p>\n<h2 id=\"version-compatibility\">Version Compatibility</h2>\n<p> In the .NET Framework versions 1.0 and 1.1, the enumerator for an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper returned by the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Adapter_\" data-linktype=\"relative-path\">Adapter</a> method treated the second argument as an upper bound rather than as a count. In the .NET Framework 2.0 the second argument is correctly treated as a count.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the enumerator for an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, and the enumerator for a range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Collections.ArrayList.GetEnumerator#1\">using System;\nusing System.Collections;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ArrayList colors = new ArrayList();\n        colors.Add(&quot;red&quot;);\n        colors.Add(&quot;blue&quot;);\n        colors.Add(&quot;green&quot;);\n        colors.Add(&quot;yellow&quot;);\n        colors.Add(&quot;beige&quot;);\n        colors.Add(&quot;brown&quot;);\n        colors.Add(&quot;magenta&quot;);\n        colors.Add(&quot;purple&quot;);\n\n        IEnumerator e = colors.GetEnumerator();\n        while (e.MoveNext())\n        {\n            Object obj = e.Current;\n            Console.WriteLine(obj);\n        }\n\n        Console.WriteLine();\n\n        IEnumerator e2 = colors.GetEnumerator(2, 4);\n        while (e2.MoveNext())\n        {\n            Object obj = e2.Current;\n            Console.WriteLine(obj);\n        }\n    }\n}\n\n/* This code example produces\n   the following ouput:\n    red\n    blue\n    green\n    yellow\n    beige\n    brown\n    magenta\n    purple\n\n    green\n    yellow\n    beige\n    brown\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Collections.ArrayList.GetEnumerator#1\">Imports System\nImports System.Collections\n\nClass Program\n    Private Shared Sub Main(ByVal args As String())\n        Dim colors As New ArrayList()\n        colors.Add(&quot;red&quot;)\n        colors.Add(&quot;blue&quot;)\n        colors.Add(&quot;green&quot;)\n        colors.Add(&quot;yellow&quot;)\n        colors.Add(&quot;beige&quot;)\n        colors.Add(&quot;brown&quot;)\n        colors.Add(&quot;magenta&quot;)\n        colors.Add(&quot;purple&quot;)\n        \n        Dim e As IEnumerator = colors.GetEnumerator()\n        While e.MoveNext()\n            Dim obj As [Object] = e.Current\n            Console.WriteLine(obj)\n        End While\n        \n        Console.WriteLine()\n        \n        Dim e2 As IEnumerator = colors.GetEnumerator(2, 4)\n        While e2.MoveNext()\n            Dim obj As [Object] = e2.Current\n            Console.WriteLine(obj)\n        End While\n    End Sub\nEnd Class\n\n&#39; This code example produces\n&#39; the following ouput:\n&#39; red\n&#39; blue\n&#39; green\n&#39; yellow\n&#39; beige\n&#39; brown\n&#39; magenta\n&#39; purple\n&#39;\n&#39; green\n&#39; yellow\n&#39; beige\n&#39; brown\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_GetRange_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_GetRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRange(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> which represents a subset of the elements in the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.ArrayList GetRange (int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> index at which the range starts.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> which represents a subset of the elements in the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not denote a valid range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not create copies of the elements. The new <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is only a view window into the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. However, all subsequent changes to the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> must be done through this view window <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. If changes are made directly to the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, the view window <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is invalidated and any operations on it will return an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to set and get a range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.SetRange Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Creates and initializes the source ICollection.\n       Queue mySourceList = new Queue();\n       mySourceList.Enqueue( &quot;big&quot; );\n       mySourceList.Enqueue( &quot;gray&quot; );\n       mySourceList.Enqueue( &quot;wolf&quot; );\n \n       // Displays the values of five elements starting at index 0.\n       ArrayList mySubAL = myAL.GetRange( 0, 5 );\n       Console.WriteLine( &quot;Index 0 through 4 contains:&quot; );\n       PrintValues( mySubAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n \n       // Replaces the values of five elements starting at index 1 with the values in the ICollection.\n       myAL.SetRange( 1, mySourceList );\n \n       // Displays the values of five elements starting at index 0.\n       mySubAL = myAL.GetRange( 0, 5 );\n       Console.WriteLine( &quot;Index 0 through 4 now contains:&quot; );\n       PrintValues( mySubAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n\n    }\n \n    public static void PrintValues( IEnumerable myList, char mySeparator )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n Index 0 through 4 contains:\n         The     quick   brown   fox     jumped\n Index 0 through 4 now contains:\n         The     big     gray    wolf    jumped\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.SetRange Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Creates and initializes the source ICollection.\n   Queue^ mySourceList = gcnew Queue;\n   mySourceList-&gt;Enqueue( &quot;big&quot; );\n   mySourceList-&gt;Enqueue( &quot;gray&quot; );\n   mySourceList-&gt;Enqueue( &quot;wolf&quot; );\n   \n   // Displays the values of five elements starting at index 0.\n   ArrayList^ mySubAL = myAL-&gt;GetRange( 0, 5 );\n   Console::WriteLine( &quot;Index 0 through 4 contains:&quot; );\n   PrintValues( mySubAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n   \n   // Replaces the values of five elements starting at index 1 with the values in the ICollection.\n   myAL-&gt;SetRange( 1, mySourceList );\n   \n   // Displays the values of five elements starting at index 0.\n   mySubAL = myAL-&gt;GetRange( 0, 5 );\n   Console::WriteLine( &quot;Index 0 through 4 now contains:&quot; );\n   PrintValues( mySubAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n}\n\nvoid PrintValues( IEnumerable^ myList, char mySeparator )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Index 0 through 4 contains:\n         The     quick   brown   fox     jumped\n Index 0 through 4 now contains:\n         The     big     gray    wolf    jumped\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.SetRange Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n\n        &#39; Creates and initializes the source ICollection.\n        Dim mySourceList As New Queue()\n        mySourceList.Enqueue(&quot;big&quot;)\n        mySourceList.Enqueue(&quot;gray&quot;)\n        mySourceList.Enqueue(&quot;wolf&quot;)\n\n        &#39; Displays the values of five elements starting at index 0.\n        Dim mySubAL As ArrayList = myAL.GetRange(0, 5)\n        Console.WriteLine(&quot;Index 0 through 4 contains:&quot;)\n        PrintValues(mySubAL, vbTab)\n\n        &#39; Replaces the values of five elements starting at index 1 with the values in the ICollection.\n        myAL.SetRange(1, mySourceList)\n\n        &#39; Displays the values of five elements starting at index 0.\n        mySubAL = myAL.GetRange(0, 5)\n        Console.WriteLine(&quot;Index 0 through 4 now contains:&quot;)\n        PrintValues(mySubAL, vbTab)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myList As IEnumerable, mySeparator As Char)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesArrayList \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Index 0 through 4 contains:\n&#39;         The     quick   brown   fox     jumped\n&#39; Index 0 through 4 now contains:\n&#39;         The     big     gray    wolf    jumped\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_IndexOf_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> within the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is searched forward starting at the first element and ending at the last element.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the first occurrence of a specified element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IndexOf Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList with three elements of the same value.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   myAL-&gt;Add( &quot;in&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;barn&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Search for the first occurrence of the duplicated value.\n   String^ myString = &quot;the&quot;;\n   int myIndex = myAL-&gt;IndexOf( myString );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n   \n   // Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n   myIndex = myAL-&gt;IndexOf( myString, 4 );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex );\n   \n   // Search for the first occurrence of the duplicated value in a section of the ArrayList.\n   myIndex = myAL-&gt;IndexOf( myString, 6, 6 );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The first occurrence of &quot;the&quot; is at index 0.\n The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n The first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IndexOf Example#1\">using System;\nusing System.Collections;\npublic class SamplesArrayList\n{\n\n    public static void Main()  \n    {\n \n        // Creates and initializes a new ArrayList with three elements of the same value.\n        ArrayList myAL = new ArrayList();\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;quick&quot; );\n        myAL.Add( &quot;brown&quot; );\n        myAL.Add( &quot;fox&quot; );\n        myAL.Add( &quot;jumps&quot; );\n        myAL.Add( &quot;over&quot; );\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;lazy&quot; );\n        myAL.Add( &quot;dog&quot; );\n        myAL.Add( &quot;in&quot; );\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;barn&quot; );\n\n        // Displays the values of the ArrayList.\n        Console.WriteLine( &quot;The ArrayList contains the following values:&quot; );\n        PrintIndexAndValues( myAL );\n\n        // Search for the first occurrence of the duplicated value.\n        String myString = &quot;the&quot;;\n        int myIndex = myAL.IndexOf( myString );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 4 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in a section of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 6, 6 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in a small section at the end of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 11 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 11 and the end is at index {1}.&quot;, myString, myIndex );\n    }\n\n    public static void PrintIndexAndValues(IEnumerable myList)\n    {\n        int i = 0;\n        foreach (Object obj in myList)\n            Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i++, obj);\n        Console.WriteLine();\n    }\n\n}\n/* \nThis code produces output similar to the following:\n \nThe ArrayList contains the following values:\n   [0]:    the\n   [1]:    quick\n   [2]:    brown\n   [3]:    fox\n   [4]:    jumps\n   [5]:    over\n   [6]:    the\n   [7]:    lazy\n   [8]:    dog\n   [9]:    in\n   [10]:    the\n   [11]:    barn\n\nThe first occurrence of &quot;the&quot; is at index 0.\nThe first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\nThe first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\nThe first occurrence of &quot;the&quot; between index 11 and the end is at index -1.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IndexOf Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new ArrayList with three elements of the same value.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumps&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        myAL.Add(&quot;in&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;barn&quot;)\n\n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;The ArrayList contains the following values:&quot;)\n        PrintIndexAndValues(myAL)\n\n        &#39; Search for the first occurrence of the duplicated value.\n        Dim myString As [String] = &quot;the&quot;\n        Dim myIndex As Integer = myAL.IndexOf(myString)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 4)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in a section of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 6, 6)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in a small section at the end of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 11)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 11 and the end is at index {1}.&quot;, myString, myIndex)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(ByVal myList As IEnumerable)\n        Dim i As Integer\n        Dim obj As [Object]\n        For Each obj In myList\n            Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i, obj)\n            i = i + 1\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n&#39; This code produces the following output.\n&#39;\n&#39; The ArrayList contains the following values:\n&#39; \t[0]:\tthe\n&#39; \t[1]:\tquick\n&#39; \t[2]:\tbrown\n&#39; \t[3]:\tfox\n&#39; \t[4]:\tjumps\n&#39; \t[5]:\tover\n&#39; \t[6]:\tthe\n&#39; \t[7]:\tlazy\n&#39; \t[8]:\tdog\n&#39; \t[9]:\tin\n&#39; \t[10]:\tthe\n&#39; \t[11]:\tbarn\n&#39; \n&#39; The first occurrence of &quot;the&quot; is at index 0.\n&#39; The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n&#39; The first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\n&#39; The first occurrence of &quot;the&quot; between index 11 and the end is at index -1.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_IndexOf_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that extends from the specified index to the last element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (object value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that extends from <code>startIndex</code> to the last element, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is searched forward starting at <code>startIndex</code> and ending at the last element.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from <code>startIndex</code> to the end of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the first occurrence of a specified element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IndexOf Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList with three elements of the same value.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   myAL-&gt;Add( &quot;in&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;barn&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Search for the first occurrence of the duplicated value.\n   String^ myString = &quot;the&quot;;\n   int myIndex = myAL-&gt;IndexOf( myString );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n   \n   // Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n   myIndex = myAL-&gt;IndexOf( myString, 4 );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex );\n   \n   // Search for the first occurrence of the duplicated value in a section of the ArrayList.\n   myIndex = myAL-&gt;IndexOf( myString, 6, 6 );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The first occurrence of &quot;the&quot; is at index 0.\n The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n The first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IndexOf Example#1\">using System;\nusing System.Collections;\npublic class SamplesArrayList\n{\n\n    public static void Main()  \n    {\n \n        // Creates and initializes a new ArrayList with three elements of the same value.\n        ArrayList myAL = new ArrayList();\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;quick&quot; );\n        myAL.Add( &quot;brown&quot; );\n        myAL.Add( &quot;fox&quot; );\n        myAL.Add( &quot;jumps&quot; );\n        myAL.Add( &quot;over&quot; );\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;lazy&quot; );\n        myAL.Add( &quot;dog&quot; );\n        myAL.Add( &quot;in&quot; );\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;barn&quot; );\n\n        // Displays the values of the ArrayList.\n        Console.WriteLine( &quot;The ArrayList contains the following values:&quot; );\n        PrintIndexAndValues( myAL );\n\n        // Search for the first occurrence of the duplicated value.\n        String myString = &quot;the&quot;;\n        int myIndex = myAL.IndexOf( myString );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 4 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in a section of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 6, 6 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in a small section at the end of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 11 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 11 and the end is at index {1}.&quot;, myString, myIndex );\n    }\n\n    public static void PrintIndexAndValues(IEnumerable myList)\n    {\n        int i = 0;\n        foreach (Object obj in myList)\n            Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i++, obj);\n        Console.WriteLine();\n    }\n\n}\n/* \nThis code produces output similar to the following:\n \nThe ArrayList contains the following values:\n   [0]:    the\n   [1]:    quick\n   [2]:    brown\n   [3]:    fox\n   [4]:    jumps\n   [5]:    over\n   [6]:    the\n   [7]:    lazy\n   [8]:    dog\n   [9]:    in\n   [10]:    the\n   [11]:    barn\n\nThe first occurrence of &quot;the&quot; is at index 0.\nThe first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\nThe first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\nThe first occurrence of &quot;the&quot; between index 11 and the end is at index -1.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IndexOf Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new ArrayList with three elements of the same value.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumps&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        myAL.Add(&quot;in&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;barn&quot;)\n\n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;The ArrayList contains the following values:&quot;)\n        PrintIndexAndValues(myAL)\n\n        &#39; Search for the first occurrence of the duplicated value.\n        Dim myString As [String] = &quot;the&quot;\n        Dim myIndex As Integer = myAL.IndexOf(myString)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 4)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in a section of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 6, 6)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in a small section at the end of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 11)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 11 and the end is at index {1}.&quot;, myString, myIndex)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(ByVal myList As IEnumerable)\n        Dim i As Integer\n        Dim obj As [Object]\n        For Each obj In myList\n            Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i, obj)\n            i = i + 1\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n&#39; This code produces the following output.\n&#39;\n&#39; The ArrayList contains the following values:\n&#39; \t[0]:\tthe\n&#39; \t[1]:\tquick\n&#39; \t[2]:\tbrown\n&#39; \t[3]:\tfox\n&#39; \t[4]:\tjumps\n&#39; \t[5]:\tover\n&#39; \t[6]:\tthe\n&#39; \t[7]:\tlazy\n&#39; \t[8]:\tdog\n&#39; \t[9]:\tin\n&#39; \t[10]:\tthe\n&#39; \t[11]:\tbarn\n&#39; \n&#39; The first occurrence of &quot;the&quot; is at index 0.\n&#39; The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n&#39; The first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\n&#39; The first occurrence of &quot;the&quot; between index 11 and the end is at index -1.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_IndexOf_System_Object_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Object,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that starts at the specified index and contains the specified number of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOf (object value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that starts at <code>startIndex</code> and contains <code>count</code> number of elements, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is searched forward starting at <code>startIndex</code> and ending at <code>startIndex</code> plus <code>count</code> minus 1, if <code>count</code> is greater than 0.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the first occurrence of a specified element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IndexOf Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList with three elements of the same value.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   myAL-&gt;Add( &quot;in&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;barn&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Search for the first occurrence of the duplicated value.\n   String^ myString = &quot;the&quot;;\n   int myIndex = myAL-&gt;IndexOf( myString );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n   \n   // Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n   myIndex = myAL-&gt;IndexOf( myString, 4 );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex );\n   \n   // Search for the first occurrence of the duplicated value in a section of the ArrayList.\n   myIndex = myAL-&gt;IndexOf( myString, 6, 6 );\n   Console::WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The first occurrence of &quot;the&quot; is at index 0.\n The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n The first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IndexOf Example#1\">using System;\nusing System.Collections;\npublic class SamplesArrayList\n{\n\n    public static void Main()  \n    {\n \n        // Creates and initializes a new ArrayList with three elements of the same value.\n        ArrayList myAL = new ArrayList();\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;quick&quot; );\n        myAL.Add( &quot;brown&quot; );\n        myAL.Add( &quot;fox&quot; );\n        myAL.Add( &quot;jumps&quot; );\n        myAL.Add( &quot;over&quot; );\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;lazy&quot; );\n        myAL.Add( &quot;dog&quot; );\n        myAL.Add( &quot;in&quot; );\n        myAL.Add( &quot;the&quot; );\n        myAL.Add( &quot;barn&quot; );\n\n        // Displays the values of the ArrayList.\n        Console.WriteLine( &quot;The ArrayList contains the following values:&quot; );\n        PrintIndexAndValues( myAL );\n\n        // Search for the first occurrence of the duplicated value.\n        String myString = &quot;the&quot;;\n        int myIndex = myAL.IndexOf( myString );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 4 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in a section of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 6, 6 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex );\n\n        // Search for the first occurrence of the duplicated value in a small section at the end of the ArrayList.\n        myIndex = myAL.IndexOf( myString, 11 );\n        Console.WriteLine( &quot;The first occurrence of \\&quot;{0}\\&quot; between index 11 and the end is at index {1}.&quot;, myString, myIndex );\n    }\n\n    public static void PrintIndexAndValues(IEnumerable myList)\n    {\n        int i = 0;\n        foreach (Object obj in myList)\n            Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i++, obj);\n        Console.WriteLine();\n    }\n\n}\n/* \nThis code produces output similar to the following:\n \nThe ArrayList contains the following values:\n   [0]:    the\n   [1]:    quick\n   [2]:    brown\n   [3]:    fox\n   [4]:    jumps\n   [5]:    over\n   [6]:    the\n   [7]:    lazy\n   [8]:    dog\n   [9]:    in\n   [10]:    the\n   [11]:    barn\n\nThe first occurrence of &quot;the&quot; is at index 0.\nThe first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\nThe first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\nThe first occurrence of &quot;the&quot; between index 11 and the end is at index -1.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IndexOf Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new ArrayList with three elements of the same value.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumps&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        myAL.Add(&quot;in&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;barn&quot;)\n\n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;The ArrayList contains the following values:&quot;)\n        PrintIndexAndValues(myAL)\n\n        &#39; Search for the first occurrence of the duplicated value.\n        Dim myString As [String] = &quot;the&quot;\n        Dim myIndex As Integer = myAL.IndexOf(myString)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in the last section of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 4)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 4 and the end is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in a section of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 6, 6)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 6 and index 11 is at index {1}.&quot;, myString, myIndex)\n\n        &#39; Search for the first occurrence of the duplicated value in a small section at the end of the ArrayList.\n        myIndex = myAL.IndexOf(myString, 11)\n        Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 11 and the end is at index {1}.&quot;, myString, myIndex)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(ByVal myList As IEnumerable)\n        Dim i As Integer\n        Dim obj As [Object]\n        For Each obj In myList\n            Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i, obj)\n            i = i + 1\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n&#39; This code produces the following output.\n&#39;\n&#39; The ArrayList contains the following values:\n&#39; \t[0]:\tthe\n&#39; \t[1]:\tquick\n&#39; \t[2]:\tbrown\n&#39; \t[3]:\tfox\n&#39; \t[4]:\tjumps\n&#39; \t[5]:\tover\n&#39; \t[6]:\tthe\n&#39; \t[7]:\tlazy\n&#39; \t[8]:\tdog\n&#39; \t[9]:\tin\n&#39; \t[10]:\tthe\n&#39; \t[11]:\tbarn\n&#39; \n&#39; The first occurrence of &quot;the&quot; is at index 0.\n&#39; The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n&#39; The first occurrence of &quot;the&quot; between index 6 and index 11 is at index 6.\n&#39; The first occurrence of &quot;the&quot; between index 11 and the end is at index -1.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Insert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an element into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Insert (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>value</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to insert. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> already equals <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>, <code>value</code> is added to the end of <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to insert elements into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.Insert Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList using Insert instead of Add.\n       ArrayList myAL = new ArrayList();\n       myAL.Insert( 0, &quot;The&quot; );\n       myAL.Insert( 1, &quot;fox&quot; );\n       myAL.Insert( 2, &quot;jumps&quot; );\n       myAL.Insert( 3, &quot;over&quot; );\n       myAL.Insert( 4, &quot;the&quot; );\n       myAL.Insert( 5, &quot;dog&quot; );\n \n       // Creates and initializes a new Queue.\n       Queue myQueue = new Queue();\n       myQueue.Enqueue( &quot;quick&quot; );\n       myQueue.Enqueue( &quot;brown&quot; );\n \n       // Displays the ArrayList and the Queue.\n       Console.WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n       PrintValues( myAL );\n       Console.WriteLine( &quot;The Queue initially contains the following:&quot; );\n       PrintValues( myQueue );\n \n       // Copies the Queue elements to the ArrayList at index 1.\n       myAL.InsertRange( 1, myQueue );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;After adding the Queue, the ArrayList now contains:&quot; );\n       PrintValues( myAL );\n \n       // Search for &quot;dog&quot; and add &quot;lazy&quot; before it.\n       myAL.Insert( myAL.IndexOf( &quot;dog&quot; ), &quot;lazy&quot; );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;After adding \\&quot;lazy\\&quot;, the ArrayList now contains:&quot; );\n       PrintValues( myAL );\n \n       // Add &quot;!!!&quot; at the end.\n       myAL.Insert( myAL.Count, &quot;!!!&quot; );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;After adding \\&quot;!!!\\&quot;, the ArrayList now contains:&quot; );\n       PrintValues( myAL );\n \n       // Inserting an element beyond Count throws an exception.\n       try  {\n          myAL.Insert( myAL.Count+1, &quot;anystring&quot; );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   fox   jumps   over   the   dog\n The Queue initially contains the following:\n    quick   brown\n After adding the Queue, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   dog\n After adding &quot;lazy&quot;, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   lazy   dog\n After adding &quot;!!!&quot;, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   lazy   dog   !!!\n Exception: System.ArgumentOutOfRangeException: Insertion index was out of range.  Must be non-negative and less than or equal to size.\n Parameter name: index\n    at System.Collections.ArrayList.Insert(Int32 index, Object value)\n    at SamplesArrayList.Main()\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Insert Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList using Insert instead of Add.\n        Dim myAL As New ArrayList()\n        myAL.Insert(0, &quot;The&quot;)\n        myAL.Insert(1, &quot;fox&quot;)\n        myAL.Insert(2, &quot;jumps&quot;)\n        myAL.Insert(3, &quot;over&quot;)\n        myAL.Insert(4, &quot;the&quot;)\n        myAL.Insert(5, &quot;dog&quot;)\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQueue As New Queue()\n        myQueue.Enqueue(&quot;quick&quot;)\n        myQueue.Enqueue(&quot;brown&quot;)\n        \n        &#39; Displays the ArrayList and the Queue.\n        Console.WriteLine(&quot;The ArrayList initially contains the following:&quot;)\n        PrintValues(myAL)\n        Console.WriteLine(&quot;The Queue initially contains the following:&quot;)\n        PrintValues(myQueue)\n        \n        &#39; Copies the Queue elements to the ArrayList at index 1.\n        myAL.InsertRange(1, myQueue)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;After adding the Queue, the ArrayList now contains:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Search for &quot;dog&quot; and add &quot;lazy&quot; before it.\n        myAL.Insert(myAL.IndexOf(&quot;dog&quot;), &quot;lazy&quot;)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;After adding &quot;&quot;lazy&quot;&quot;, the ArrayList now contains:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Add &quot;!!!&quot; at the end.\n        myAL.Insert(myAL.Count, &quot;!!!&quot;)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;After adding &quot;&quot;!!!&quot;&quot;, the ArrayList now contains:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Inserting an element beyond Count throws an exception.\n        Try\n            myAL.Insert(myAL.Count + 1, &quot;anystring&quot;)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n    End Sub    \n    \n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following:\n&#39;     The    fox    jumps    over    the    dog\n&#39; The Queue initially contains the following:\n&#39;     quick    brown\n&#39; After adding the Queue, the ArrayList now contains:\n&#39;     The    quick    brown    fox    jumps    over    the    dog\n&#39; After adding &quot;lazy&quot;, the ArrayList now contains:\n&#39;     The    quick    brown    fox    jumps    over    the    lazy    dog\n&#39; After adding &quot;!!!&quot;, the ArrayList now contains:\n&#39;     The    quick    brown    fox    jumps    over    the    lazy    dog    !!!\n&#39; Exception: System.ArgumentOutOfRangeException: Insertion index was out of range.  Must be non-negative and less than or equal to size.\n&#39; Parameter name: index\n&#39;    at System.Collections.ArrayList.Insert(Int32 index, Object value)\n&#39;    at SamplesArrayList.Main()\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Insert Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList using Insert instead of Add.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Insert( 0, &quot;The&quot; );\n   myAL-&gt;Insert( 1, &quot;fox&quot; );\n   myAL-&gt;Insert( 2, &quot;jumps&quot; );\n   myAL-&gt;Insert( 3, &quot;over&quot; );\n   myAL-&gt;Insert( 4, &quot;the&quot; );\n   myAL-&gt;Insert( 5, &quot;dog&quot; );\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQueue = gcnew Queue;\n   myQueue-&gt;Enqueue( &quot;quick&quot; );\n   myQueue-&gt;Enqueue( &quot;brown&quot; );\n   \n   // Displays the ArrayList and the Queue.\n   Console::WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n   PrintValues( myAL );\n   Console::WriteLine( &quot;The Queue initially contains the following:&quot; );\n   PrintValues( myQueue );\n   \n   // Copies the Queue elements to the ArrayList at index 1.\n   myAL-&gt;InsertRange( 1, myQueue );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;After adding the Queue, the ArrayList now contains:&quot; );\n   PrintValues( myAL );\n   \n   // Search for &quot;dog&quot; and add &quot;lazy&quot; before it.\n   myAL-&gt;Insert( myAL-&gt;IndexOf( &quot;dog&quot; ), &quot;lazy&quot; );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;After adding \\&quot;lazy\\&quot;, the ArrayList now contains:&quot; );\n   PrintValues( myAL );\n   \n   // Add &quot;!!!&quot; at the end.\n   myAL-&gt;Insert( myAL-&gt;Count, &quot;!!!&quot; );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;After adding \\&quot;!!!\\&quot;, the ArrayList now contains:&quot; );\n   PrintValues( myAL );\n   \n   // Inserting an element beyond Count throws an exception.\n   try\n   {\n      myAL-&gt;Insert( myAL-&gt;Count + 1, &quot;anystring&quot; );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   fox   jumps   over   the   dog\n The Queue initially contains the following:\n    quick   brown\n After adding the Queue, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   dog\n After adding &quot;lazy&quot;, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   lazy   dog\n After adding &quot;!!!&quot;, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   lazy   dog   !!!\n Exception: System.ArgumentOutOfRangeException: Insertion index was out of range.  Must be non-negative and less than or equal to size.\n Parameter name: index\n    at System.Collections.ArrayList.Insert(Int32 index, Object value)\n    at SamplesArrayList.Main()\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_InsertRange_System_Int32_System_Collections_ICollection_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_InsertRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InsertRange(Int32,ICollection)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the elements of a collection into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void InsertRange (int index, System.Collections.ICollection c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which the new elements should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> whose elements should be inserted into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The collection itself cannot be <code>null</code>, but it can contain elements that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>c</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> If the new <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> (the current <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> plus the size of the collection) will be greater than <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>, the elements are added to the end of <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> The order of the elements in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is preserved in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements to be added and <code>m</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to insert elements into the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.Insert Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList using Insert instead of Add.\n       ArrayList myAL = new ArrayList();\n       myAL.Insert( 0, &quot;The&quot; );\n       myAL.Insert( 1, &quot;fox&quot; );\n       myAL.Insert( 2, &quot;jumps&quot; );\n       myAL.Insert( 3, &quot;over&quot; );\n       myAL.Insert( 4, &quot;the&quot; );\n       myAL.Insert( 5, &quot;dog&quot; );\n \n       // Creates and initializes a new Queue.\n       Queue myQueue = new Queue();\n       myQueue.Enqueue( &quot;quick&quot; );\n       myQueue.Enqueue( &quot;brown&quot; );\n \n       // Displays the ArrayList and the Queue.\n       Console.WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n       PrintValues( myAL );\n       Console.WriteLine( &quot;The Queue initially contains the following:&quot; );\n       PrintValues( myQueue );\n \n       // Copies the Queue elements to the ArrayList at index 1.\n       myAL.InsertRange( 1, myQueue );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;After adding the Queue, the ArrayList now contains:&quot; );\n       PrintValues( myAL );\n \n       // Search for &quot;dog&quot; and add &quot;lazy&quot; before it.\n       myAL.Insert( myAL.IndexOf( &quot;dog&quot; ), &quot;lazy&quot; );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;After adding \\&quot;lazy\\&quot;, the ArrayList now contains:&quot; );\n       PrintValues( myAL );\n \n       // Add &quot;!!!&quot; at the end.\n       myAL.Insert( myAL.Count, &quot;!!!&quot; );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;After adding \\&quot;!!!\\&quot;, the ArrayList now contains:&quot; );\n       PrintValues( myAL );\n \n       // Inserting an element beyond Count throws an exception.\n       try  {\n          myAL.Insert( myAL.Count+1, &quot;anystring&quot; );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   fox   jumps   over   the   dog\n The Queue initially contains the following:\n    quick   brown\n After adding the Queue, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   dog\n After adding &quot;lazy&quot;, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   lazy   dog\n After adding &quot;!!!&quot;, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   lazy   dog   !!!\n Exception: System.ArgumentOutOfRangeException: Insertion index was out of range.  Must be non-negative and less than or equal to size.\n Parameter name: index\n    at System.Collections.ArrayList.Insert(Int32 index, Object value)\n    at SamplesArrayList.Main()\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Insert Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList using Insert instead of Add.\n        Dim myAL As New ArrayList()\n        myAL.Insert(0, &quot;The&quot;)\n        myAL.Insert(1, &quot;fox&quot;)\n        myAL.Insert(2, &quot;jumps&quot;)\n        myAL.Insert(3, &quot;over&quot;)\n        myAL.Insert(4, &quot;the&quot;)\n        myAL.Insert(5, &quot;dog&quot;)\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQueue As New Queue()\n        myQueue.Enqueue(&quot;quick&quot;)\n        myQueue.Enqueue(&quot;brown&quot;)\n        \n        &#39; Displays the ArrayList and the Queue.\n        Console.WriteLine(&quot;The ArrayList initially contains the following:&quot;)\n        PrintValues(myAL)\n        Console.WriteLine(&quot;The Queue initially contains the following:&quot;)\n        PrintValues(myQueue)\n        \n        &#39; Copies the Queue elements to the ArrayList at index 1.\n        myAL.InsertRange(1, myQueue)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;After adding the Queue, the ArrayList now contains:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Search for &quot;dog&quot; and add &quot;lazy&quot; before it.\n        myAL.Insert(myAL.IndexOf(&quot;dog&quot;), &quot;lazy&quot;)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;After adding &quot;&quot;lazy&quot;&quot;, the ArrayList now contains:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Add &quot;!!!&quot; at the end.\n        myAL.Insert(myAL.Count, &quot;!!!&quot;)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;After adding &quot;&quot;!!!&quot;&quot;, the ArrayList now contains:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Inserting an element beyond Count throws an exception.\n        Try\n            myAL.Insert(myAL.Count + 1, &quot;anystring&quot;)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n    End Sub    \n    \n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following:\n&#39;     The    fox    jumps    over    the    dog\n&#39; The Queue initially contains the following:\n&#39;     quick    brown\n&#39; After adding the Queue, the ArrayList now contains:\n&#39;     The    quick    brown    fox    jumps    over    the    dog\n&#39; After adding &quot;lazy&quot;, the ArrayList now contains:\n&#39;     The    quick    brown    fox    jumps    over    the    lazy    dog\n&#39; After adding &quot;!!!&quot;, the ArrayList now contains:\n&#39;     The    quick    brown    fox    jumps    over    the    lazy    dog    !!!\n&#39; Exception: System.ArgumentOutOfRangeException: Insertion index was out of range.  Must be non-negative and less than or equal to size.\n&#39; Parameter name: index\n&#39;    at System.Collections.ArrayList.Insert(Int32 index, Object value)\n&#39;    at SamplesArrayList.Main()\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Insert Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList using Insert instead of Add.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Insert( 0, &quot;The&quot; );\n   myAL-&gt;Insert( 1, &quot;fox&quot; );\n   myAL-&gt;Insert( 2, &quot;jumps&quot; );\n   myAL-&gt;Insert( 3, &quot;over&quot; );\n   myAL-&gt;Insert( 4, &quot;the&quot; );\n   myAL-&gt;Insert( 5, &quot;dog&quot; );\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQueue = gcnew Queue;\n   myQueue-&gt;Enqueue( &quot;quick&quot; );\n   myQueue-&gt;Enqueue( &quot;brown&quot; );\n   \n   // Displays the ArrayList and the Queue.\n   Console::WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n   PrintValues( myAL );\n   Console::WriteLine( &quot;The Queue initially contains the following:&quot; );\n   PrintValues( myQueue );\n   \n   // Copies the Queue elements to the ArrayList at index 1.\n   myAL-&gt;InsertRange( 1, myQueue );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;After adding the Queue, the ArrayList now contains:&quot; );\n   PrintValues( myAL );\n   \n   // Search for &quot;dog&quot; and add &quot;lazy&quot; before it.\n   myAL-&gt;Insert( myAL-&gt;IndexOf( &quot;dog&quot; ), &quot;lazy&quot; );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;After adding \\&quot;lazy\\&quot;, the ArrayList now contains:&quot; );\n   PrintValues( myAL );\n   \n   // Add &quot;!!!&quot; at the end.\n   myAL-&gt;Insert( myAL-&gt;Count, &quot;!!!&quot; );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;After adding \\&quot;!!!\\&quot;, the ArrayList now contains:&quot; );\n   PrintValues( myAL );\n   \n   // Inserting an element beyond Count throws an exception.\n   try\n   {\n      myAL-&gt;Insert( myAL-&gt;Count + 1, &quot;anystring&quot; );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   fox   jumps   over   the   dog\n The Queue initially contains the following:\n    quick   brown\n After adding the Queue, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   dog\n After adding &quot;lazy&quot;, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   lazy   dog\n After adding &quot;!!!&quot;, the ArrayList now contains:\n    The   quick   brown   fox   jumps   over   the   lazy   dog   !!!\n Exception: System.ArgumentOutOfRangeException: Insertion index was out of range.  Must be non-negative and less than or equal to size.\n Parameter name: index\n    at System.Collections.ArrayList.Insert(Int32 index, Object value)\n    at SamplesArrayList.Main()\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_LastIndexOf_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the last occurrence within the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code> within the entire the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is searched backward starting at the last element and ending at the first element.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the last occurrence of a specified element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.LastIndexOf Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList with three elements of the same value.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   myAL-&gt;Add( &quot;in&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;barn&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Searches for the last occurrence of the duplicated value.\n   String^ myString = &quot;the&quot;;\n   int myIndex = myAL-&gt;LastIndexOf( myString );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n   \n   // Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n   myIndex = myAL-&gt;LastIndexOf( myString, 8 );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n   \n   // Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n   myIndex = myAL-&gt;LastIndexOf( myString, 10, 6 );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.LastIndexOf Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList with three elements of the same value.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumps&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n       myAL.Add( &quot;in&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;barn&quot; );\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;The ArrayList contains the following values:&quot; );\n       PrintIndexAndValues( myAL );\n \n       // Searches for the last occurrence of the duplicated value.\n       String myString = &quot;the&quot;;\n       int myIndex = myAL.LastIndexOf( myString );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n       myIndex = myAL.LastIndexOf( myString, 8 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n       myIndex = myAL.LastIndexOf( myString, 10, 6 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex );\n    }\n \n    public static void PrintIndexAndValues( IEnumerable myList )  {\n       int i = 0;\n       foreach ( Object obj in myList )\n          Console.WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /*\n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.LastIndexOf Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a new ArrayList with three elements of the same value.\n      Dim myAL As New ArrayList()\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;quick&quot;)\n      myAL.Add(&quot;brown&quot;)\n      myAL.Add(&quot;fox&quot;)\n      myAL.Add(&quot;jumps&quot;)\n      myAL.Add(&quot;over&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;lazy&quot;)\n      myAL.Add(&quot;dog&quot;)\n      myAL.Add(&quot;in&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;barn&quot;)\n      \n      &#39; Displays the values of the ArrayList.\n      Console.WriteLine(&quot;The ArrayList contains the following values:&quot;)\n      PrintIndexAndValues(myAL)\n      \n      &#39; Searches for the last occurrence of the duplicated value.\n      Dim myString As [String] = &quot;the&quot;\n      Dim myIndex As Integer = myAL.LastIndexOf(myString)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myString, myIndex)\n      \n      &#39; Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n      myIndex = myAL.LastIndexOf(myString, 8)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex)\n      \n      &#39; Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n      myIndex = myAL.LastIndexOf(myString, 10, 6)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex)\n   End Sub &#39;Main\n   \n   \n   Public Shared Sub PrintIndexAndValues(myList As IEnumerable)\n      Dim i as Integer\n      Dim obj As [Object]\n      For Each obj In  myList\n         Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i, obj)\n         i = i + 1\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n&#39; This code produces the following output.\n&#39;\n&#39; The ArrayList contains the following values:\n&#39;    [0]:    the\n&#39;    [1]:    quick\n&#39;    [2]:    brown\n&#39;    [3]:    fox\n&#39;    [4]:    jumps\n&#39;    [5]:    over\n&#39;    [6]:    the\n&#39;    [7]:    lazy\n&#39;    [8]:    dog\n&#39;    [9]:    in\n&#39;    [10]:    the\n&#39;    [11]:    barn\n&#39;\n&#39; The last occurrence of &quot;the&quot; is at index 10.\n&#39; The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n&#39; The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_LastIndexOf_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that extends from the first element to the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (object value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code> within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that extends from the first element to <code>startIndex</code>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is searched backward starting at <code>startIndex</code> and ending at the first element.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from the beginning of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to <code>startIndex</code>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the last occurrence of a specified element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.LastIndexOf Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList with three elements of the same value.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   myAL-&gt;Add( &quot;in&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;barn&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Searches for the last occurrence of the duplicated value.\n   String^ myString = &quot;the&quot;;\n   int myIndex = myAL-&gt;LastIndexOf( myString );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n   \n   // Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n   myIndex = myAL-&gt;LastIndexOf( myString, 8 );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n   \n   // Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n   myIndex = myAL-&gt;LastIndexOf( myString, 10, 6 );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.LastIndexOf Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList with three elements of the same value.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumps&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n       myAL.Add( &quot;in&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;barn&quot; );\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;The ArrayList contains the following values:&quot; );\n       PrintIndexAndValues( myAL );\n \n       // Searches for the last occurrence of the duplicated value.\n       String myString = &quot;the&quot;;\n       int myIndex = myAL.LastIndexOf( myString );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n       myIndex = myAL.LastIndexOf( myString, 8 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n       myIndex = myAL.LastIndexOf( myString, 10, 6 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex );\n    }\n \n    public static void PrintIndexAndValues( IEnumerable myList )  {\n       int i = 0;\n       foreach ( Object obj in myList )\n          Console.WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /*\n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.LastIndexOf Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a new ArrayList with three elements of the same value.\n      Dim myAL As New ArrayList()\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;quick&quot;)\n      myAL.Add(&quot;brown&quot;)\n      myAL.Add(&quot;fox&quot;)\n      myAL.Add(&quot;jumps&quot;)\n      myAL.Add(&quot;over&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;lazy&quot;)\n      myAL.Add(&quot;dog&quot;)\n      myAL.Add(&quot;in&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;barn&quot;)\n      \n      &#39; Displays the values of the ArrayList.\n      Console.WriteLine(&quot;The ArrayList contains the following values:&quot;)\n      PrintIndexAndValues(myAL)\n      \n      &#39; Searches for the last occurrence of the duplicated value.\n      Dim myString As [String] = &quot;the&quot;\n      Dim myIndex As Integer = myAL.LastIndexOf(myString)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myString, myIndex)\n      \n      &#39; Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n      myIndex = myAL.LastIndexOf(myString, 8)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex)\n      \n      &#39; Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n      myIndex = myAL.LastIndexOf(myString, 10, 6)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex)\n   End Sub &#39;Main\n   \n   \n   Public Shared Sub PrintIndexAndValues(myList As IEnumerable)\n      Dim i as Integer\n      Dim obj As [Object]\n      For Each obj In  myList\n         Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i, obj)\n         i = i + 1\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n&#39; This code produces the following output.\n&#39;\n&#39; The ArrayList contains the following values:\n&#39;    [0]:    the\n&#39;    [1]:    quick\n&#39;    [2]:    brown\n&#39;    [3]:    fox\n&#39;    [4]:    jumps\n&#39;    [5]:    over\n&#39;    [6]:    the\n&#39;    [7]:    lazy\n&#39;    [8]:    dog\n&#39;    [9]:    in\n&#39;    [10]:    the\n&#39;    [11]:    barn\n&#39;\n&#39; The last occurrence of &quot;the&quot; is at index 10.\n&#39; The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n&#39; The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_LastIndexOf_System_Object_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Object,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains the specified number of elements and ends at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LastIndexOf (object value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code> within the range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains <code>count</code> number of elements and ends at <code>startIndex</code>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> minus <code>count</code> plus 1, if <code>count</code> is greater than 0.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the last occurrence of a specified element. Note that <code>LastIndexOf</code> is a backward search; therefore, <code>count</code> must be less than or equal to <code>startIndex</code> + 1.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.LastIndexOf Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList with three elements of the same value.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   myAL-&gt;Add( &quot;in&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;barn&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Searches for the last occurrence of the duplicated value.\n   String^ myString = &quot;the&quot;;\n   int myIndex = myAL-&gt;LastIndexOf( myString );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n   \n   // Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n   myIndex = myAL-&gt;LastIndexOf( myString, 8 );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n   \n   // Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n   myIndex = myAL-&gt;LastIndexOf( myString, 10, 6 );\n   Console::WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.LastIndexOf Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList with three elements of the same value.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumps&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n       myAL.Add( &quot;in&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;barn&quot; );\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;The ArrayList contains the following values:&quot; );\n       PrintIndexAndValues( myAL );\n \n       // Searches for the last occurrence of the duplicated value.\n       String myString = &quot;the&quot;;\n       int myIndex = myAL.LastIndexOf( myString );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n       myIndex = myAL.LastIndexOf( myString, 8 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n       myIndex = myAL.LastIndexOf( myString, 10, 6 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex );\n    }\n \n    public static void PrintIndexAndValues( IEnumerable myList )  {\n       int i = 0;\n       foreach ( Object obj in myList )\n          Console.WriteLine( &quot;   [{0}]:    {1}&quot;, i++, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /*\n This code produces the following output.\n \n The ArrayList contains the following values:\n    [0]:    the\n    [1]:    quick\n    [2]:    brown\n    [3]:    fox\n    [4]:    jumps\n    [5]:    over\n    [6]:    the\n    [7]:    lazy\n    [8]:    dog\n    [9]:    in\n    [10]:    the\n    [11]:    barn\n\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.LastIndexOf Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a new ArrayList with three elements of the same value.\n      Dim myAL As New ArrayList()\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;quick&quot;)\n      myAL.Add(&quot;brown&quot;)\n      myAL.Add(&quot;fox&quot;)\n      myAL.Add(&quot;jumps&quot;)\n      myAL.Add(&quot;over&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;lazy&quot;)\n      myAL.Add(&quot;dog&quot;)\n      myAL.Add(&quot;in&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;barn&quot;)\n      \n      &#39; Displays the values of the ArrayList.\n      Console.WriteLine(&quot;The ArrayList contains the following values:&quot;)\n      PrintIndexAndValues(myAL)\n      \n      &#39; Searches for the last occurrence of the duplicated value.\n      Dim myString As [String] = &quot;the&quot;\n      Dim myIndex As Integer = myAL.LastIndexOf(myString)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myString, myIndex)\n      \n      &#39; Searches for the last occurrence of the duplicated value in the first section of the ArrayList.\n      myIndex = myAL.LastIndexOf(myString, 8)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex)\n      \n      &#39; Searches for the last occurrence of the duplicated value in a section of the ArrayList.  Note that the start index is greater than the end index because the search is done backward.\n      myIndex = myAL.LastIndexOf(myString, 10, 6)\n      Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between index 10 and index 5 is at index {1}.&quot;, myString, myIndex)\n   End Sub &#39;Main\n   \n   \n   Public Shared Sub PrintIndexAndValues(myList As IEnumerable)\n      Dim i as Integer\n      Dim obj As [Object]\n      For Each obj In  myList\n         Console.WriteLine(&quot;   [{0}]:    {1}&quot;, i, obj)\n         i = i + 1\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n&#39; This code produces the following output.\n&#39;\n&#39; The ArrayList contains the following values:\n&#39;    [0]:    the\n&#39;    [1]:    quick\n&#39;    [2]:    brown\n&#39;    [3]:    fox\n&#39;    [4]:    jumps\n&#39;    [5]:    over\n&#39;    [6]:    the\n&#39;    [7]:    lazy\n&#39;    [8]:    dog\n&#39;    [9]:    in\n&#39;    [10]:    the\n&#39;    [11]:    barn\n&#39;\n&#39; The last occurrence of &quot;the&quot; is at index 10.\n&#39; The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n&#39; The last occurrence of &quot;the&quot; between index 10 and index 5 is at index 10.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_ReadOnly_System_Collections_ArrayList_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_ReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnly(ArrayList)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a read-only <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to wrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper around <code>list</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To prevent any modifications to <code>list</code>, expose <code>list</code> only through this wrapper.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a read-only wrapper around an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> and how to determine if an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.ReadOnly1 Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;red&quot; );\n       myAL.Add( &quot;orange&quot; );\n       myAL.Add( &quot;yellow&quot; );\n \n       // Creates a read-only copy of the ArrayList.\n       ArrayList myReadOnlyAL = ArrayList.ReadOnly( myAL );\n \n       // Displays whether the ArrayList is read-only or writable.\n       Console.WriteLine( &quot;myAL is {0}.&quot;, myAL.IsReadOnly ? &quot;read-only&quot; : &quot;writable&quot; );\n       Console.WriteLine( &quot;myReadOnlyAL is {0}.&quot;, myReadOnlyAL.IsReadOnly ? &quot;read-only&quot; : &quot;writable&quot; );\n \n       // Displays the contents of both collections.\n       Console.WriteLine( &quot;<br>Initially,&quot; );\n       Console.WriteLine( &quot;The original ArrayList myAL contains:&quot; );\n       foreach ( String myStr in myAL )\n          Console.WriteLine( &quot;   {0}&quot;, myStr );\n       Console.WriteLine( &quot;The read-only ArrayList myReadOnlyAL contains:&quot; );\n       foreach ( String myStr in myReadOnlyAL )\n          Console.WriteLine( &quot;   {0}&quot;, myStr );\n\n       // Adding an element to a read-only ArrayList throws an exception.\n       Console.WriteLine( &quot;<br>Trying to add a new element to the read-only ArrayList:&quot; );\n       try  {\n          myReadOnlyAL.Add(&quot;green&quot;);\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n\n       // Adding an element to the original ArrayList affects the read-only ArrayList.\n       myAL.Add( &quot;blue&quot; );\n\n       // Displays the contents of both collections again.\n       Console.WriteLine( &quot;<br>After adding a new element to the original ArrayList,&quot; );\n       Console.WriteLine( &quot;The original ArrayList myAL contains:&quot; );\n       foreach ( String myStr in myAL )\n          Console.WriteLine( &quot;   {0}&quot;, myStr );\n       Console.WriteLine( &quot;The read-only ArrayList myReadOnlyAL contains:&quot; );\n       foreach ( String myStr in myReadOnlyAL )\n          Console.WriteLine( &quot;   {0}&quot;, myStr );\n\n    }\n\n }\n\n\n/* \nThis code produces the following output.\n\nmyAL is writable.\nmyReadOnlyAL is read-only.\n\nInitially,\nThe original ArrayList myAL contains:\n   red\n   orange\n   yellow\nThe read-only ArrayList myReadOnlyAL contains:\n   red\n   orange\n   yellow\n\nTrying to add a new element to the read-only ArrayList:\nException: System.NotSupportedException: Collection is read-only.\n   at System.Collections.ReadOnlyArrayList.Add(Object obj)\n   at SamplesArrayList.Main()\n\nAfter adding a new element to the original ArrayList,\nThe original ArrayList myAL contains:\n   red\n   orange\n   yellow\n   blue\nThe read-only ArrayList myReadOnlyAL contains:\n   red\n   orange\n   yellow\n   blue\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.ReadOnly1 Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;red&quot; );\n   myAL-&gt;Add( &quot;orange&quot; );\n   myAL-&gt;Add( &quot;yellow&quot; );\n   \n   // Creates a read-only copy of the ArrayList.\n   ArrayList^ myReadOnlyAL = ArrayList::ReadOnly( myAL );\n   \n   // Displays whether the ArrayList is read-only or writable.\n   Console::WriteLine( &quot;myAL is {0}.&quot;, myAL-&gt;IsReadOnly ? (String^)&quot;read-only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myReadOnlyAL is {0}.&quot;, myReadOnlyAL-&gt;IsReadOnly ? (String^)&quot;read-only&quot; : &quot;writable&quot; );\n   \n   // Displays the contents of both collections.\n   Console::WriteLine( &quot;<br>Initially,&quot; );\n   Console::WriteLine( &quot;The original ArrayList myAL contains:&quot; );\n   for ( int i(0); i &lt; myAL-&gt;Count; ++i )\n      Console::WriteLine(  &quot;   {0}&quot;, static_cast&lt;String^&gt;(myAL[ i ]) );\n   Console::WriteLine( &quot;The read-only ArrayList myReadOnlyAL contains:&quot; );\n   for ( int i(0); i &lt; myReadOnlyAL-&gt;Count; ++i )\n      Console::WriteLine( &quot;   {0}&quot;, static_cast&lt;String^&gt;(myReadOnlyAL[ i ]) );\n   \n   // Adding an element to a read-only ArrayList throws an exception.\n   Console::WriteLine( &quot;<br>Trying to add a new element to the read-only ArrayList:&quot; );\n   try\n   {\n      myReadOnlyAL-&gt;Add( &quot;green&quot; );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( String::Concat( &quot;Exception: &quot;, myException-&gt;ToString() ) );\n   }\n\n   \n   // Adding an element to the original ArrayList affects the read-only ArrayList.\n   myAL-&gt;Add( &quot;blue&quot; );\n   \n   // Displays the contents of both collections again.\n   Console::WriteLine( &quot;<br>After adding a new element to the original ArrayList,&quot; );\n   Console::WriteLine( &quot;The original ArrayList myAL contains:&quot; );\n   for ( int i(0); i &lt; myAL-&gt;Count; ++i )\n      Console::WriteLine( &quot;   {0}&quot;, static_cast&lt;String^&gt;(myAL[ i ]) );\n   Console::WriteLine( &quot;The read-only ArrayList myReadOnlyAL contains:&quot; );\n   for ( int i(0); i &lt; myReadOnlyAL-&gt;Count; ++i )\n      Console::WriteLine( &quot;   {0}&quot;, static_cast&lt;String^&gt;(myReadOnlyAL[ i ]) );\n}\n\n/*\nThis code produces the following output.\n\nmyAL is writable.\nmyReadOnlyAL is read-only.\n\nInitially,\nThe original ArrayList myAL contains:\n   red\n   orange\n   yellow\nThe read-only ArrayList myReadOnlyAL contains:\n   red\n   orange\n   yellow\n\nTrying to add a new element to the read-only ArrayList:\nException: System.NotSupportedException: Collection is read-only.\n   at System.Collections.ReadOnlyArrayList.Add(Object obj)\n   at SamplesArrayList.Main()\n\nAfter adding a new element to the original ArrayList,\nThe original ArrayList myAL contains:\n   red\n   orange\n   yellow\n   blue\nThe read-only ArrayList myReadOnlyAL contains:\n   red\n   orange\n   yellow\n   blue\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.ReadOnly1 Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n   Public Shared Sub Main()\n\n      Dim myStr As [String]\n\n      &#39; Creates and initializes a new ArrayList.\n      Dim myAL As New ArrayList()\n      myAL.Add(&quot;red&quot;)\n      myAL.Add(&quot;orange&quot;)\n      myAL.Add(&quot;yellow&quot;)\n\n      &#39; Creates a read-only copy of the ArrayList.\n      Dim myReadOnlyAL As ArrayList = ArrayList.ReadOnly(myAL)\n\n      &#39; Displays whether the ArrayList is read-only or writable.\n      If myAL.IsReadOnly Then\n         Console.WriteLine(&quot;myAL is read-only.&quot;)\n      Else\n         Console.WriteLine(&quot;myAL is writable.&quot;)\n      End If\n      If myReadOnlyAL.IsReadOnly Then\n         Console.WriteLine(&quot;myReadOnlyAL is read-only.&quot;)\n      Else\n         Console.WriteLine(&quot;myReadOnlyAL is writable.&quot;)\n      End If\n\n      &#39; Displays the contents of both collections.\n      Console.WriteLine()\n      Console.WriteLine(&quot;Initially,&quot;)\n      Console.WriteLine(&quot;The original ArrayList myAL contains:&quot;)\n      For Each myStr In  myAL\n         Console.WriteLine(&quot;   {0}&quot;, myStr)\n      Next myStr\n      Console.WriteLine(&quot;The read-only ArrayList myReadOnlyAL contains:&quot;)\n      For Each myStr In  myReadOnlyAL\n         Console.WriteLine(&quot;   {0}&quot;, myStr)\n      Next myStr \n\n      &#39; Adding an element to a read-only ArrayList throws an exception.\n      Console.WriteLine()\n      Console.WriteLine(&quot;Trying to add a new element to the read-only ArrayList:&quot;)\n      Try\n         myReadOnlyAL.Add(&quot;green&quot;)\n      Catch myException As Exception\n         Console.WriteLine((&quot;Exception: &quot; + myException.ToString()))\n      End Try\n\n      &#39; Adding an element to the original ArrayList affects the read-only ArrayList.\n      myAL.Add(&quot;blue&quot;)\n\n      &#39; Displays the contents of both collections again.\n      Console.WriteLine()\n      Console.WriteLine(&quot;After adding a new element to the original ArrayList,&quot;)\n      Console.WriteLine(&quot;The original ArrayList myAL contains:&quot;)\n      For Each myStr In  myAL\n         Console.WriteLine(&quot;   {0}&quot;, myStr)\n      Next myStr\n      Console.WriteLine(&quot;The read-only ArrayList myReadOnlyAL contains:&quot;)\n      For Each myStr In  myReadOnlyAL\n         Console.WriteLine(&quot;   {0}&quot;, myStr)\n      Next myStr \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesArrayList \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;myAL is writable.\n&#39;myReadOnlyAL is read-only.\n&#39;\n&#39;Initially,\n&#39;The original ArrayList myAL contains:\n&#39;   red\n&#39;   orange\n&#39;   yellow\n&#39;The read-only ArrayList myReadOnlyAL contains:\n&#39;   red\n&#39;   orange\n&#39;   yellow\n&#39;\n&#39;Trying to add a new element to the read-only ArrayList:\n&#39;Exception: System.NotSupportedException: Collection is read-only.\n&#39;   at System.Collections.ReadOnlyArrayList.Add(Object obj)\n&#39;   at SamplesArrayList.Main()\n&#39;\n&#39;After adding a new element to the original ArrayList,\n&#39;The original ArrayList myAL contains:\n&#39;   red\n&#39;   orange\n&#39;   yellow\n&#39;   blue\n&#39;The read-only ArrayList myReadOnlyAL contains:\n&#39;   red\n&#39;   orange\n&#39;   yellow\n&#39;   blue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_ReadOnly_System_Collections_IList_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_ReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnly(IList)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a read-only <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.IList ReadOnly (System.Collections.IList list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> to wrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper around <code>list</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To prevent any modifications to <code>list</code>, expose <code>list</code> only through this wrapper.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Remove (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to remove from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> does not contain the specified object, the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> remains unchanged. No exception is thrown.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to remove elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Remove Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n   PrintValues( myAL );\n   \n   // Removes the element containing &quot;lazy&quot;.\n   myAL-&gt;Remove( &quot;lazy&quot; );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n   PrintValues( myAL );\n   \n   // Removes the element at index 5.\n   myAL-&gt;RemoveAt( 5 );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing the element at index 5:&quot; );\n   PrintValues( myAL );\n   \n   // Removes three elements starting at index 4.\n   myAL-&gt;RemoveRange( 4, 3 );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing three elements starting at index 4:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   quick   brown   fox   jumped   over   the   lazy   dog\n After removing &quot;lazy&quot;:\n    The   quick   brown   fox   jumped   over   the   dog\n After removing the element at index 5:\n    The   quick   brown   fox   jumped   the   dog\n After removing three elements starting at index 4:\n    The   quick   brown   fox\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Remove Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;The ArrayList initially contains the following:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes the element containing &quot;lazy&quot;.\n        myAL.Remove(&quot;lazy&quot;)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing &quot;&quot;lazy&quot;&quot;:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes the element at index 5.\n        myAL.RemoveAt(5)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing the element at index 5:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes three elements starting at index 4.\n        myAL.RemoveRange(4, 3)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing three elements starting at index 4:&quot;)\n        PrintValues(myAL)\n    End Sub\n    \n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following:\n&#39;    The   quick   brown   fox   jumped   over   the   lazy   dog\n&#39; After removing &quot;lazy&quot;:\n&#39;    The   quick   brown   fox   jumped   over   the   dog\n&#39; After removing the element at index 5:\n&#39;    The   quick   brown   fox   jumped   the   dog\n&#39; After removing three elements starting at index 4:\n&#39;    The   quick   brown   fox\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.Remove Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n       PrintValues( myAL );\n \n       // Removes the element containing &quot;lazy&quot;.\n       myAL.Remove( &quot;lazy&quot; );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n       PrintValues( myAL );\n \n       // Removes the element at index 5.\n       myAL.RemoveAt( 5 );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing the element at index 5:&quot; );\n       PrintValues( myAL );\n \n       // Removes three elements starting at index 4.\n       myAL.RemoveRange( 4, 3 );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing three elements starting at index 4:&quot; );\n       PrintValues( myAL );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   quick   brown   fox   jumped   over   the   lazy   dog\n After removing &quot;lazy&quot;:\n    The   quick   brown   fox   jumped   over   the   dog\n After removing the element at index 5:\n    The   quick   brown   fox   jumped   the   dog\n After removing three elements starting at index 4:\n    The   quick   brown   fox\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element at the specified index of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After the element is removed, the size of the collection is adjusted and the value of the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a> property is decreased by one.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to remove elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Remove Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n   PrintValues( myAL );\n   \n   // Removes the element containing &quot;lazy&quot;.\n   myAL-&gt;Remove( &quot;lazy&quot; );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n   PrintValues( myAL );\n   \n   // Removes the element at index 5.\n   myAL-&gt;RemoveAt( 5 );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing the element at index 5:&quot; );\n   PrintValues( myAL );\n   \n   // Removes three elements starting at index 4.\n   myAL-&gt;RemoveRange( 4, 3 );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing three elements starting at index 4:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   quick   brown   fox   jumped   over   the   lazy   dog\n After removing &quot;lazy&quot;:\n    The   quick   brown   fox   jumped   over   the   dog\n After removing the element at index 5:\n    The   quick   brown   fox   jumped   the   dog\n After removing three elements starting at index 4:\n    The   quick   brown   fox\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Remove Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;The ArrayList initially contains the following:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes the element containing &quot;lazy&quot;.\n        myAL.Remove(&quot;lazy&quot;)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing &quot;&quot;lazy&quot;&quot;:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes the element at index 5.\n        myAL.RemoveAt(5)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing the element at index 5:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes three elements starting at index 4.\n        myAL.RemoveRange(4, 3)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing three elements starting at index 4:&quot;)\n        PrintValues(myAL)\n    End Sub\n    \n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following:\n&#39;    The   quick   brown   fox   jumped   over   the   lazy   dog\n&#39; After removing &quot;lazy&quot;:\n&#39;    The   quick   brown   fox   jumped   over   the   dog\n&#39; After removing the element at index 5:\n&#39;    The   quick   brown   fox   jumped   the   dog\n&#39; After removing three elements starting at index 4:\n&#39;    The   quick   brown   fox\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.Remove Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n       PrintValues( myAL );\n \n       // Removes the element containing &quot;lazy&quot;.\n       myAL.Remove( &quot;lazy&quot; );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n       PrintValues( myAL );\n \n       // Removes the element at index 5.\n       myAL.RemoveAt( 5 );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing the element at index 5:&quot; );\n       PrintValues( myAL );\n \n       // Removes three elements starting at index 4.\n       myAL.RemoveRange( 4, 3 );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing three elements starting at index 4:&quot; );\n       PrintValues( myAL );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   quick   brown   fox   jumped   over   the   lazy   dog\n After removing &quot;lazy&quot;:\n    The   quick   brown   fox   jumped   over   the   dog\n After removing the element at index 5:\n    The   quick   brown   fox   jumped   the   dog\n After removing three elements starting at index 4:\n    The   quick   brown   fox\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_RemoveRange_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_RemoveRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveRange(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes a range of elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void RemoveRange (int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the range of elements to remove.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not denote a valid range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to remove elements from the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Remove Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n   PrintValues( myAL );\n   \n   // Removes the element containing &quot;lazy&quot;.\n   myAL-&gt;Remove( &quot;lazy&quot; );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n   PrintValues( myAL );\n   \n   // Removes the element at index 5.\n   myAL-&gt;RemoveAt( 5 );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing the element at index 5:&quot; );\n   PrintValues( myAL );\n   \n   // Removes three elements starting at index 4.\n   myAL-&gt;RemoveRange( 4, 3 );\n   \n   // Displays the current state of the ArrayList.\n   Console::WriteLine( &quot;After removing three elements starting at index 4:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   quick   brown   fox   jumped   over   the   lazy   dog\n After removing &quot;lazy&quot;:\n    The   quick   brown   fox   jumped   over   the   dog\n After removing the element at index 5:\n    The   quick   brown   fox   jumped   the   dog\n After removing three elements starting at index 4:\n    The   quick   brown   fox\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Remove Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        \n        &#39; Displays the ArrayList.\n        Console.WriteLine(&quot;The ArrayList initially contains the following:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes the element containing &quot;lazy&quot;.\n        myAL.Remove(&quot;lazy&quot;)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing &quot;&quot;lazy&quot;&quot;:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes the element at index 5.\n        myAL.RemoveAt(5)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing the element at index 5:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Removes three elements starting at index 4.\n        myAL.RemoveRange(4, 3)\n        \n        &#39; Displays the current state of the ArrayList.\n        Console.WriteLine(&quot;After removing three elements starting at index 4:&quot;)\n        PrintValues(myAL)\n    End Sub\n    \n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following:\n&#39;    The   quick   brown   fox   jumped   over   the   lazy   dog\n&#39; After removing &quot;lazy&quot;:\n&#39;    The   quick   brown   fox   jumped   over   the   dog\n&#39; After removing the element at index 5:\n&#39;    The   quick   brown   fox   jumped   the   dog\n&#39; After removing three elements starting at index 4:\n&#39;    The   quick   brown   fox\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.Remove Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Displays the ArrayList.\n       Console.WriteLine( &quot;The ArrayList initially contains the following:&quot; );\n       PrintValues( myAL );\n \n       // Removes the element containing &quot;lazy&quot;.\n       myAL.Remove( &quot;lazy&quot; );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n       PrintValues( myAL );\n \n       // Removes the element at index 5.\n       myAL.RemoveAt( 5 );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing the element at index 5:&quot; );\n       PrintValues( myAL );\n \n       // Removes three elements starting at index 4.\n       myAL.RemoveRange( 4, 3 );\n \n       // Displays the current state of the ArrayList.\n       Console.WriteLine( &quot;After removing three elements starting at index 4:&quot; );\n       PrintValues( myAL );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following:\n    The   quick   brown   fox   jumped   over   the   lazy   dog\n After removing &quot;lazy&quot;:\n    The   quick   brown   fox   jumped   over   the   dog\n After removing the element at index 5:\n    The   quick   brown   fox   jumped   the   dog\n After removing three elements starting at index 4:\n    The   quick   brown   fox\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Repeat_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Repeat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Repeat(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> whose elements are copies of the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.ArrayList Repeat (object value, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to copy multiple times in the new <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of times <code>value</code> should be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> with <code>count</code> number of elements, all of which are copies of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and initialize a new <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> with the same value.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Repeat Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates a new ArrayList with five elements and initialize each element with a null value.\n   ArrayList^ myAL = ArrayList::Repeat( 0, 5 );\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;ArrayList with five elements with a null value&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n   \n   // Creates a new ArrayList with seven elements and initialize each element with the string &quot;abc&quot;.\n   myAL = ArrayList::Repeat( &quot;abc&quot;, 7 );\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;ArrayList with seven elements with a string value&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n ArrayList with five elements with a null value\n    Count    : 5\n    Capacity : 16\n    Values:\n ArrayList with seven elements with a string value\n    Count    : 7\n    Capacity : 16\n    Values:   abc   abc   abc   abc   abc   abc   abc\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.Repeat Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates a new ArrayList with five elements and initialize each element with a null value.\n       ArrayList myAL = ArrayList.Repeat( null, 5 );\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;ArrayList with five elements with a null value&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n \n       // Creates a new ArrayList with seven elements and initialize each element with the string &quot;abc&quot;.\n       myAL = ArrayList.Repeat( &quot;abc&quot;, 7 );\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;ArrayList with seven elements with a string value&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n\n    }\n\n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n ArrayList with five elements with a null value\n    Count    : 5\n    Capacity : 16\n    Values:\n ArrayList with seven elements with a string value\n    Count    : 7\n    Capacity : 16\n    Values:   abc   abc   abc   abc   abc   abc   abc\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Repeat Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n\n    Public Shared Sub Main()\n\n        &#39; Creates a new ArrayList with five elements and initialize each\n        &#39; element with a null value.\n        Dim myAL As ArrayList = ArrayList.Repeat(Nothing, 5)\n\n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;ArrayList with five elements with a null value&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n\n        &#39; Creates a new ArrayList with seven elements and initialize each\n        &#39; element with the string &quot;abc&quot;.\n        myAL = ArrayList.Repeat(&quot;abc&quot;, 7)\n\n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;ArrayList with seven elements with a string value&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; ArrayList with five elements with a null value\n&#39;    Count    : 5\n&#39;    Capacity : 16\n&#39;    Values:\t\t\t\t\t\n&#39; ArrayList with seven elements with a string value\n&#39;    Count    : 7\n&#39;    Capacity : 16\n&#39;    Values:\tabc\tabc\tabc\tabc\tabc\tabc\tabc\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Reverse\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Reverse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reverse()</div>        \r\n          </div>\r\n    \r\n            <p>Reverses the order of the elements in the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Reverse ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Reverse_\" data-linktype=\"relative-path\">Reverse</a> to reverse the order of the elements, such that the element at <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> [i], where i is any index within the range, moves to <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> [j], where j equals <code>index</code> + <code>index</code> + <code>count</code> - i - 1.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to reverse the sort order of the values in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.Reverse Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumps&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n       PrintValues( myAL );\n \n       // Reverses the sort order of the values of the ArrayList.\n       myAL.Reverse();\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;After reversing:&quot; );\n       PrintValues( myAL );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.WriteLine( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following values:\n    The\n    quick\n    brown\n    fox\n    jumps\n    over\n    the\n    lazy\n    dog\n\n After reversing:\n    dog\n    lazy\n    the\n    over\n    jumps\n    fox\n    brown\n    quick\n    The\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Reverse Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n   PrintValues( myAL );\n   \n   // Reverses the sort order of the values of the ArrayList.\n   myAL-&gt;Reverse();\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;After reversing:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList initially contains the following values:\n    The\n    quick\n    brown\n    fox\n    jumps\n    over\n    the\n    lazy\n    dog\n\n After reversing:\n    dog\n    lazy\n    the\n    over\n    jumps\n    fox\n    brown\n    quick\n    The\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Reverse Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumps&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n        \n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;The ArrayList initially contains the &quot; _\n           + &quot;following values:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Reverses the sort order of the values of the ArrayList.\n        myAL.Reverse()\n        \n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;After reversing:&quot;)\n        PrintValues(myAL)\n    End Sub\n    \n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.WriteLine(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following values:\n&#39;    The\n&#39;    quick\n&#39;    brown\n&#39;    fox\n&#39;    jumps\n&#39;    over\n&#39;    the\n&#39;    lazy\n&#39;    dog\n&#39;\n&#39; After reversing:\n&#39;    dog\n&#39;    lazy\n&#39;    the\n&#39;    over\n&#39;    jumps\n&#39;    fox\n&#39;    brown\n&#39;    quick\n&#39;    The\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Reverse_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Reverse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reverse(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reverses the order of the elements in the specified range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Reverse (int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the range to reverse.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to reverse.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not denote a valid range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Reverse_\" data-linktype=\"relative-path\">Reverse</a> to reverse the order of the elements, such that the element at <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> [i], where i is any index within the range, moves to <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> [j], where j equals <code>index</code> + <code>index</code> + <code>count</code> - i - 1.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to reverse the sort order of the values in a range of elements in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Reverse1 Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;QUICK&quot; );\n   myAL-&gt;Add( &quot;BROWN&quot; );\n   myAL-&gt;Add( &quot;FOX&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n   PrintValues( myAL );\n   \n   // Reverses the sort order of the values of the ArrayList.\n   myAL-&gt;Reverse( 1, 3 );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;After reversing:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The ArrayList initially contains the following values:\n    The\n    QUICK\n    BROWN\n    FOX\n    jumps\n    over\n    the\n    lazy\n    dog\n\n After reversing:\n    The\n    FOX\n    BROWN\n    QUICK\n    jumps\n    over\n    the\n    lazy\n    dog\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.Reverse1 Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;QUICK&quot; );\n       myAL.Add( &quot;BROWN&quot; );\n       myAL.Add( &quot;FOX&quot; );\n       myAL.Add( &quot;jumps&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n       PrintValues( myAL );\n \n       // Reverses the sort order of the values of the ArrayList.\n       myAL.Reverse( 1, 3 );\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;After reversing:&quot; );\n       PrintValues( myAL );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.WriteLine( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The ArrayList initially contains the following values:\n    The\n    QUICK\n    BROWN\n    FOX\n    jumps\n    over\n    the\n    lazy\n    dog\n\n After reversing:\n    The\n    FOX\n    BROWN\n    QUICK\n    jumps\n    over\n    the\n    lazy\n    dog\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Reverse1 Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;QUICK&quot;)\n        myAL.Add(&quot;BROWN&quot;)\n        myAL.Add(&quot;FOX&quot;)\n        myAL.Add(&quot;jumps&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n\n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;The ArrayList initially contains the following values:&quot;)\n        PrintValues(myAL)\n\n        &#39; Reverses the sort order of the values of the ArrayList.\n        myAL.Reverse(1, 3)\n\n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;After reversing:&quot;)\n        PrintValues(myAL)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.WriteLine(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesArrayList\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The ArrayList initially contains the following values:\n&#39;    The\n&#39;    QUICK\n&#39;    BROWN\n&#39;    FOX\n&#39;    jumps\n&#39;    over\n&#39;    the\n&#39;    lazy\n&#39;    dog\n&#39;\n&#39; After reversing:\n&#39;    The\n&#39;    FOX\n&#39;    BROWN\n&#39;    QUICK\n&#39;    jumps\n&#39;    over\n&#39;    the\n&#39;    lazy\n&#39;    dog\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_SetRange_System_Int32_System_Collections_ICollection_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_SetRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetRange(Int32,ICollection)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of a collection over a range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void SetRange (int index, System.Collections.ICollection c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> index at which to start copying the elements of <code>c</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> whose elements to copy to the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. The collection itself cannot be <code>null</code>, but it can contain elements that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> plus the number of elements in <code>c</code> is greater than <span class=\"xref\">stem.Collections.ArrayList.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>c</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> The order of the elements in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is preserved in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<p> This method is an O(<code>n</code> + 1) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to set and get a range of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.SetRange Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Creates and initializes the source ICollection.\n       Queue mySourceList = new Queue();\n       mySourceList.Enqueue( &quot;big&quot; );\n       mySourceList.Enqueue( &quot;gray&quot; );\n       mySourceList.Enqueue( &quot;wolf&quot; );\n \n       // Displays the values of five elements starting at index 0.\n       ArrayList mySubAL = myAL.GetRange( 0, 5 );\n       Console.WriteLine( &quot;Index 0 through 4 contains:&quot; );\n       PrintValues( mySubAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n \n       // Replaces the values of five elements starting at index 1 with the values in the ICollection.\n       myAL.SetRange( 1, mySourceList );\n \n       // Displays the values of five elements starting at index 0.\n       mySubAL = myAL.GetRange( 0, 5 );\n       Console.WriteLine( &quot;Index 0 through 4 now contains:&quot; );\n       PrintValues( mySubAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n\n    }\n \n    public static void PrintValues( IEnumerable myList, char mySeparator )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n Index 0 through 4 contains:\n         The     quick   brown   fox     jumped\n Index 0 through 4 now contains:\n         The     big     gray    wolf    jumped\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.SetRange Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Creates and initializes the source ICollection.\n   Queue^ mySourceList = gcnew Queue;\n   mySourceList-&gt;Enqueue( &quot;big&quot; );\n   mySourceList-&gt;Enqueue( &quot;gray&quot; );\n   mySourceList-&gt;Enqueue( &quot;wolf&quot; );\n   \n   // Displays the values of five elements starting at index 0.\n   ArrayList^ mySubAL = myAL-&gt;GetRange( 0, 5 );\n   Console::WriteLine( &quot;Index 0 through 4 contains:&quot; );\n   PrintValues( mySubAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n   \n   // Replaces the values of five elements starting at index 1 with the values in the ICollection.\n   myAL-&gt;SetRange( 1, mySourceList );\n   \n   // Displays the values of five elements starting at index 0.\n   mySubAL = myAL-&gt;GetRange( 0, 5 );\n   Console::WriteLine( &quot;Index 0 through 4 now contains:&quot; );\n   PrintValues( mySubAL, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; );\n}\n\nvoid PrintValues( IEnumerable^ myList, char mySeparator )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Index 0 through 4 contains:\n         The     quick   brown   fox     jumped\n Index 0 through 4 now contains:\n         The     big     gray    wolf    jumped\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.SetRange Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n\n        &#39; Creates and initializes the source ICollection.\n        Dim mySourceList As New Queue()\n        mySourceList.Enqueue(&quot;big&quot;)\n        mySourceList.Enqueue(&quot;gray&quot;)\n        mySourceList.Enqueue(&quot;wolf&quot;)\n\n        &#39; Displays the values of five elements starting at index 0.\n        Dim mySubAL As ArrayList = myAL.GetRange(0, 5)\n        Console.WriteLine(&quot;Index 0 through 4 contains:&quot;)\n        PrintValues(mySubAL, vbTab)\n\n        &#39; Replaces the values of five elements starting at index 1 with the values in the ICollection.\n        myAL.SetRange(1, mySourceList)\n\n        &#39; Displays the values of five elements starting at index 0.\n        mySubAL = myAL.GetRange(0, 5)\n        Console.WriteLine(&quot;Index 0 through 4 now contains:&quot;)\n        PrintValues(mySubAL, vbTab)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myList As IEnumerable, mySeparator As Char)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesArrayList \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Index 0 through 4 contains:\n&#39;         The     quick   brown   fox     jumped\n&#39; Index 0 through 4 now contains:\n&#39;         The     big     gray    wolf    jumped\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Sort\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort()</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Sort ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a>, which uses the QuickSort algorithm. The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a &quot;less than or equal to&quot; comparison operation determines which of two elements should occur first in the final sorted list. However, if two elements are equal, their original order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface to use with the other overloads of this method.  </p>\n<p> On average, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>; in the worst case it is an O(<code>n</code>^2) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sort the values in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.Sort Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumps&quot; );\n       myAL.Add( &quot;over&quot; );\n       myAL.Add( &quot;the&quot; );\n       myAL.Add( &quot;lazy&quot; );\n       myAL.Add( &quot;dog&quot; );\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n       PrintValues( myAL );\n \n       // Sorts the values of the ArrayList.\n       myAL.Sort();\n \n       // Displays the values of the ArrayList.\n       Console.WriteLine( &quot;After sorting:&quot; );\n       PrintValues( myAL );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.WriteLine( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n\n The ArrayList initially contains the following values:\n    The\n    quick\n    brown\n    fox\n    jumps\n    over\n    the\n    lazy\n    dog\n\n After sorting:\n    brown\n    dog\n    fox\n    jumps\n    lazy\n    over\n    quick\n    the\n    The\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Sort Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumps&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n\n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;The ArrayList initially contains the following values:&quot;)\n        PrintValues(myAL)\n\n        &#39; Sorts the values of the ArrayList.\n        myAL.Sort()\n\n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;After sorting:&quot;)\n        PrintValues(myAL)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.WriteLine(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesArrayList \n\n\n&#39; This code produces the following output.\n&#39;\n&#39; The ArrayList initially contains the following values:\n&#39;    The\n&#39;    quick\n&#39;    brown\n&#39;    fox\n&#39;    jumps\n&#39;    over\n&#39;    the\n&#39;    lazy\n&#39;    dog\n&#39;\n&#39; After sorting:\n&#39;    brown\n&#39;    dog\n&#39;    fox\n&#39;    jumps\n&#39;    lazy\n&#39;    over\n&#39;    quick\n&#39;    the\n&#39;    The\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Sort Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n   PrintValues( myAL );\n   \n   // Sorts the values of the ArrayList.\n   myAL-&gt;Sort();\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;After sorting:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n\n The ArrayList initially contains the following values:\n    The\n    quick\n    brown\n    fox\n    jumps\n    over\n    the\n    lazy\n    dog\n\n After sorting:\n    brown\n    dog\n    fox\n    jumps\n    lazy\n    over\n    quick\n    the\n    The\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Sort_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in the entire <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> using the specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Sort (System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic) to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while comparing two elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>null</code> is passed for <code>comparer</code>, and the elements in the list do not implement <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Sort method to  sort a list of objects with a custom comparer that implements the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface. If you pass <code>null</code> for <code>comparer</code>, this method uses the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element. In this case, you must make sure that the objects contained in the list implement the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface or an exception will occur.  </p>\n<p> In addition, using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.  </p>\n<p> On average, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>; in the worst case it is an O(<code>n</code>^2) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sort the values in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> using the default comparer and a custom comparer that reverses the sort order.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ArrayList.Sort_2#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nref class myReverserClass: public IComparer\n{\nprivate:\n\n   // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n   virtual int Compare( Object^ x, Object^ y ) sealed = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare( y, x ));\n   }\n\n};\n\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumps&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Sorts the values of the ArrayList using the default comparer.\n   myAL-&gt;Sort();\n   Console::WriteLine( &quot;After sorting with the default comparer:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n   IComparer^ myComparer = gcnew myReverserClass;\n   myAL-&gt;Sort( myComparer );\n   Console::WriteLine( &quot;After sorting with the reverse case-insensitive comparer:&quot; );\n   PrintIndexAndValues( myAL );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\nThe ArrayList initially contains the following values:\n        [0]:    The\n        [1]:    quick\n        [2]:    brown\n        [3]:    fox\n        [4]:    jumps\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nAfter sorting with the default comparer:\n        [0]:    brown\n        [1]:    dog\n        [2]:    fox\n        [3]:    jumps\n        [4]:    lazy\n        [5]:    over\n        [6]:    quick\n        [7]:    the\n        [8]:    The\n\nAfter sorting with the reverse case-insensitive comparer:\n        [0]:    the\n        [1]:    The\n        [2]:    quick\n        [3]:    over\n        [4]:    lazy\n        [5]:    jumps\n        [6]:    fox\n        [7]:    dog\n        [8]:    brown \n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ArrayList.Sort_2#1\">using System;\nusing System.Collections;\n\npublic class SamplesArrayList  {\n \n   public class myReverserClass : IComparer  {\n\n      // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      int IComparer.Compare( Object x, Object y )  {\n          return( (new CaseInsensitiveComparer()).Compare( y, x ) );\n      }\n\n   }\n\n   public static void Main()  {\n \n      // Creates and initializes a new ArrayList.\n      ArrayList myAL = new ArrayList();\n      myAL.Add( &quot;The&quot; );\n      myAL.Add( &quot;quick&quot; );\n      myAL.Add( &quot;brown&quot; );\n      myAL.Add( &quot;fox&quot; );\n      myAL.Add( &quot;jumps&quot; );\n      myAL.Add( &quot;over&quot; );\n      myAL.Add( &quot;the&quot; );\n      myAL.Add( &quot;lazy&quot; );\n      myAL.Add( &quot;dog&quot; );\n \n      // Displays the values of the ArrayList.\n      Console.WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n      PrintIndexAndValues( myAL );\n \n      // Sorts the values of the ArrayList using the default comparer.\n      myAL.Sort();\n      Console.WriteLine( &quot;After sorting with the default comparer:&quot; );\n      PrintIndexAndValues( myAL );\n\n      // Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n      IComparer myComparer = new myReverserClass();\n      myAL.Sort( myComparer );\n      Console.WriteLine( &quot;After sorting with the reverse case-insensitive comparer:&quot; );\n      PrintIndexAndValues( myAL );\n\n   }\n \n   public static void PrintIndexAndValues( IEnumerable myList )  {\n      int i = 0;\n      foreach ( Object obj in myList )\n         Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, obj );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\nThe ArrayList initially contains the following values:\n        [0]:    The\n        [1]:    quick\n        [2]:    brown\n        [3]:    fox\n        [4]:    jumps\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nAfter sorting with the default comparer:\n        [0]:    brown\n        [1]:    dog\n        [2]:    fox\n        [3]:    jumps\n        [4]:    lazy\n        [5]:    over\n        [6]:    quick\n        [7]:    the\n        [8]:    The\n\nAfter sorting with the reverse case-insensitive comparer:\n        [0]:    the\n        [1]:    The\n        [2]:    quick\n        [3]:    over\n        [4]:    lazy\n        [5]:    jumps\n        [6]:    fox\n        [7]:    dog\n        [8]:    brown \n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ArrayList.Sort_2#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n\n   Public Class myReverserClass\n      Implements IComparer\n\n      &#39; Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      Public Function Compare( ByVal x As Object, ByVal y As Object) As Integer _\n         Implements IComparer.Compare\n         Return New CaseInsensitiveComparer().Compare(y, x)\n      End Function &#39;IComparer.Compare\n\n   End Class &#39;myReverserClass\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new ArrayList.\n      Dim myAL As New ArrayList()\n      myAL.Add(&quot;The&quot;)\n      myAL.Add(&quot;quick&quot;)\n      myAL.Add(&quot;brown&quot;)\n      myAL.Add(&quot;fox&quot;)\n      myAL.Add(&quot;jumps&quot;)\n      myAL.Add(&quot;over&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;lazy&quot;)\n      myAL.Add(&quot;dog&quot;)\n\n      &#39; Displays the values of the ArrayList.\n      Console.WriteLine(&quot;The ArrayList initially contains the following values:&quot;)\n      PrintIndexAndValues(myAL)\n\n      &#39; Sorts the values of the ArrayList using the default comparer.\n      myAL.Sort()\n      Console.WriteLine(&quot;After sorting with the default comparer:&quot;)\n      PrintIndexAndValues(myAL)\n\n      &#39; Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n      Dim myComparer = New myReverserClass()\n      myAL.Sort(myComparer)\n      Console.WriteLine(&quot;After sorting with the reverse case-insensitive comparer:&quot;)\n      PrintIndexAndValues(myAL)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintIndexAndValues(myList As IEnumerable)\n      Dim i As Integer = 0\n      Dim obj As [Object]\n      For Each obj In  myList\n         Console.WriteLine(vbTab + &quot;[{0}]:&quot; + vbTab + &quot;{1}&quot;, i, obj)\n         i = i + 1\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n\n&#39;This code produces the following output.\n&#39;The ArrayList initially contains the following values:\n&#39;        [0]:    The\n&#39;        [1]:    quick\n&#39;        [2]:    brown\n&#39;        [3]:    fox\n&#39;        [4]:    jumps\n&#39;        [5]:    over\n&#39;        [6]:    the\n&#39;        [7]:    lazy\n&#39;        [8]:    dog\n&#39;\n&#39;After sorting with the default comparer:\n&#39;        [0]:    brown\n&#39;        [1]:    dog\n&#39;        [2]:    fox\n&#39;        [3]:    jumps\n&#39;        [4]:    lazy\n&#39;        [5]:    over\n&#39;        [6]:    quick\n&#39;        [7]:    the\n&#39;        [8]:    The\n&#39;\n&#39;After sorting with the reverse case-insensitive comparer:\n&#39;        [0]:    the\n&#39;        [1]:    The\n&#39;        [2]:    quick\n&#39;        [3]:    over\n&#39;        [4]:    lazy\n&#39;        [5]:    jumps\n&#39;        [6]:    fox\n&#39;        [7]:    dog\n&#39;        [8]:    brown\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Sort_System_Int32_System_Int32_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Int32,Int32,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in a range of elements in <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> using the specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Sort (int index, int count, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic) to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>count</code> do not specify a valid range in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while comparing two elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is set to <code>null</code>, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.  </p>\n<p> On average, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>count</code>; in the worst case it is an O(n^2) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sort the values in a range of elements in an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> using the default comparer and a custom comparer that reverses the sort order.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ArrayList.Sort_3#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myList );\nref class myReverserClass: public IComparer\n{\nprivate:\n\n   // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n   virtual int Compare( Object^ x, Object^ y ) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare( y, x ));\n   }\n\n};\n\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;QUICK&quot; );\n   myAL-&gt;Add( &quot;BROWN&quot; );\n   myAL-&gt;Add( &quot;FOX&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n   \n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Sorts the values of the ArrayList using the default comparer.\n   myAL-&gt;Sort( 1, 3, nullptr );\n   Console::WriteLine( &quot;After sorting from index 1 to index 3 with the default comparer:&quot; );\n   PrintIndexAndValues( myAL );\n   \n   // Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n   IComparer^ myComparer = gcnew myReverserClass;\n   myAL-&gt;Sort( 1, 3, myComparer );\n   Console::WriteLine( &quot;After sorting from index 1 to index 3 with the reverse case-insensitive comparer:&quot; );\n   PrintIndexAndValues( myAL );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\nThe ArrayList initially contains the following values:\n        [0]:    The\n        [1]:    QUICK\n        [2]:    BROWN\n        [3]:    FOX\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nAfter sorting from index 1 to index 3 with the default comparer:\n        [0]:    The\n        [1]:    BROWN\n        [2]:    FOX\n        [3]:    QUICK\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nAfter sorting from index 1 to index 3 with the reverse case-insensitive comparer:\n        [0]:    The\n        [1]:    QUICK\n        [2]:    FOX\n        [3]:    BROWN\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ArrayList.Sort_3#1\">using System;\nusing System.Collections;\n\npublic class SamplesArrayList  {\n\n   public class myReverserClass : IComparer  {\n\n      // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      int IComparer.Compare( Object x, Object y )  {\n          return( (new CaseInsensitiveComparer()).Compare( y, x ) );\n      }\n\n   }\n\n   public static void Main()  {\n \n      // Creates and initializes a new ArrayList.\n      ArrayList myAL = new ArrayList();\n      myAL.Add( &quot;The&quot; );\n      myAL.Add( &quot;QUICK&quot; );\n      myAL.Add( &quot;BROWN&quot; );\n      myAL.Add( &quot;FOX&quot; );\n      myAL.Add( &quot;jumped&quot; );\n      myAL.Add( &quot;over&quot; );\n      myAL.Add( &quot;the&quot; );\n      myAL.Add( &quot;lazy&quot; );\n      myAL.Add( &quot;dog&quot; );\n \n      // Displays the values of the ArrayList.\n      Console.WriteLine( &quot;The ArrayList initially contains the following values:&quot; );\n      PrintIndexAndValues( myAL );\n\n      // Sorts the values of the ArrayList using the default comparer.\n      myAL.Sort( 1, 3, null );\n      Console.WriteLine( &quot;After sorting from index 1 to index 3 with the default comparer:&quot; );\n      PrintIndexAndValues( myAL );\n\n      // Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n      IComparer myComparer = new myReverserClass();\n      myAL.Sort( 1, 3, myComparer );\n      Console.WriteLine( &quot;After sorting from index 1 to index 3 with the reverse case-insensitive comparer:&quot; );\n      PrintIndexAndValues( myAL );\n\n   }\n \n   public static void PrintIndexAndValues( IEnumerable myList )  {\n      int i = 0;\n      foreach ( Object obj in myList )\n         Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, obj );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\nThe ArrayList initially contains the following values:\n        [0]:    The\n        [1]:    QUICK\n        [2]:    BROWN\n        [3]:    FOX\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nAfter sorting from index 1 to index 3 with the default comparer:\n        [0]:    The\n        [1]:    BROWN\n        [2]:    FOX\n        [3]:    QUICK\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nAfter sorting from index 1 to index 3 with the reverse case-insensitive comparer:\n        [0]:    The\n        [1]:    QUICK\n        [2]:    FOX\n        [3]:    BROWN\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ArrayList.Sort_3#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList\n\n   Public Class myReverserClass\n      Implements IComparer\n\n      &#39; Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      Public Function Compare( ByVal x As Object, ByVal y As Object) As Integer _\n         Implements IComparer.Compare\n         Return New CaseInsensitiveComparer().Compare(y, x)\n      End Function &#39;IComparer.Compare\n\n   End Class &#39;myReverserClass\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new ArrayList.\n      Dim myAL As New ArrayList()\n      myAL.Add(&quot;The&quot;)\n      myAL.Add(&quot;QUICK&quot;)\n      myAL.Add(&quot;BROWN&quot;)\n      myAL.Add(&quot;FOX&quot;)\n      myAL.Add(&quot;jumped&quot;)\n      myAL.Add(&quot;over&quot;)\n      myAL.Add(&quot;the&quot;)\n      myAL.Add(&quot;lazy&quot;)\n      myAL.Add(&quot;dog&quot;)\n\n      &#39; Displays the values of the ArrayList.\n      Console.WriteLine(&quot;The ArrayList initially contains the following values:&quot;)\n      PrintIndexAndValues(myAL)\n\n      &#39; Sorts the values of the ArrayList using the default comparer.\n      myAL.Sort(1, 3, Nothing)\n      Console.WriteLine(&quot;After sorting from index 1 to index 3 with the default comparer:&quot;)\n      PrintIndexAndValues(myAL)\n\n      &#39; Sorts the values of the ArrayList using the reverse case-insensitive comparer.\n      Dim myComparer = New myReverserClass()\n      myAL.Sort(1, 3, myComparer)\n      Console.WriteLine(&quot;After sorting from index 1 to index 3 with the reverse case-insensitive comparer:&quot;)\n      PrintIndexAndValues(myAL)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintIndexAndValues(myList As IEnumerable)\n      Dim i As Integer = 0\n      Dim obj As [Object]\n      For Each obj In  myList\n         Console.WriteLine(vbTab + &quot;[{0}]:&quot; + vbTab + &quot;{1}&quot;, i, obj)\n         i = i + 1\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList \n\n\n&#39;This code produces the following output.\n&#39;The ArrayList initially contains the following values:\n&#39;        [0]:    The\n&#39;        [1]:    QUICK\n&#39;        [2]:    BROWN\n&#39;        [3]:    FOX\n&#39;        [4]:    jumped\n&#39;        [5]:    over\n&#39;        [6]:    the\n&#39;        [7]:    lazy\n&#39;        [8]:    dog\n&#39;\n&#39;After sorting from index 1 to index 3 with the default comparer:\n&#39;        [0]:    The\n&#39;        [1]:    BROWN\n&#39;        [2]:    FOX\n&#39;        [3]:    QUICK\n&#39;        [4]:    jumped\n&#39;        [5]:    over\n&#39;        [6]:    the\n&#39;        [7]:    lazy\n&#39;        [8]:    dog\n&#39;\n&#39;After sorting from index 1 to index 3 with the reverse case-insensitive comparer:\n&#39;        [0]:    The\n&#39;        [1]:    QUICK\n&#39;        [2]:    FOX\n&#39;        [3]:    BROWN\n&#39;        [4]:    jumped\n&#39;        [5]:    over\n&#39;        [6]:    the\n&#39;        [7]:    lazy\n&#39;        [8]:    dog\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Synchronized_System_Collections_ArrayList_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Synchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Synchronized(ArrayList)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper that is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to synchronize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> wrapper that is synchronized (thread safe).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To guarantee the thread safety of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, all operations must be done through this wrapper.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IsSynchronized Example#2\">        ArrayList^ myCollection = gcnew ArrayList();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IsSynchronized Example#2\">        Dim myCollection As New ArrayList()\n\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IsSynchronized Example#2\">        ArrayList myCollection = new ArrayList();\n\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><p> This method is an O(1) operation.  </p>\n<p> The following code example shows how to synchronize an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, determine if an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is synchronized and use a synchronized <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic ArrayList.IsSynchronized Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        \n        &#39; Creates a synchronized wrapper around the ArrayList.\n        Dim mySyncdAL As ArrayList = ArrayList.Synchronized(myAL)\n        \n        &#39; Displays the sychronization status of both ArrayLists.\n        Dim str As String\n        If myAL.IsSynchronized Then\n            str = &quot;synchronized&quot;\n        Else\n            str = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;myAL is {0}.&quot;, str)\n        If mySyncdAL.IsSynchronized Then\n            str = &quot;synchronized&quot;\n        Else\n            str = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;mySyncdAL is {0}.&quot;, str)\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myAL is not synchronized.\n&#39; mySyncdAL is synchronized. \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IsSynchronized Example#1\">using namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new ArrayList instance.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   \n   // Creates a synchronized wrapper around the ArrayList.\n   ArrayList^ mySyncdAL = ArrayList::Synchronized( myAL );\n   \n   // Displays the sychronization status of both ArrayLists.\n   String^ szRes = myAL-&gt;IsSynchronized ?  (String^)&quot;synchronized&quot; :  &quot;not synchronized&quot;;\n   Console::WriteLine(  &quot;myAL is {0}.&quot;, szRes );\n   String^ szSyncRes = mySyncdAL-&gt;IsSynchronized ?  (String^)&quot;synchronized&quot; :  &quot;not synchronized&quot;;\n   Console::WriteLine(  &quot;mySyncdAL is {0}.&quot;, szSyncRes );\n}\n\n/* \n This code produces the following output.\n \n myAL is not synchronized.\n mySyncdAL is synchronized.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IsSynchronized Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n \n       // Creates a synchronized wrapper around the ArrayList.\n       ArrayList mySyncdAL = ArrayList.Synchronized( myAL );\n \n       // Displays the sychronization status of both ArrayLists.\n       Console.WriteLine( &quot;myAL is {0}.&quot;, myAL.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n       Console.WriteLine( &quot;mySyncdAL is {0}.&quot;, mySyncdAL.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n    }\n }\n /* \n This code produces the following output.\n \n myAL is not synchronized.\n mySyncdAL is synchronized.\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_Synchronized_System_Collections_IList_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_Synchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Synchronized(IList)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper that is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.IList Synchronized (System.Collections.IList list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> to synchronize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> wrapper that is synchronized (thread safe).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To guarantee the thread safety of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, all operations must be done through this wrapper.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ArrayList.IsSynchronized Example#2\">        ArrayList^ myCollection = gcnew ArrayList();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.IsSynchronized Example#2\">        Dim myCollection As New ArrayList()\n\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ArrayList.IsSynchronized Example#2\">        ArrayList myCollection = new ArrayList();\n\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_ToArray\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_ToArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToArray()</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a new <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object[] ToArray ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array containing copies of the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are copied using <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a>, which is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_ToArray_System_Type_\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_ToArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToArray(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a new array of the specified element type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Array ToArray (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The element <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the destination array to create and copy elements to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </div>\r\n                  <p>An array of the specified element type containing copies of the elements of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> cannot be cast automatically to the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All of the objects in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> object will be cast to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> specified in the <code>type</code> parameter.  </p>\n<p> The elements are copied using <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a>, which is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following copy example shows how to copy the elements of an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to a string array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.ArrayList.ToArray#1\">using System;\nusing System.Collections;\n\npublic class SamplesArrayList  {\n \n   public static void Main()  {\n \n      // Creates and initializes a new ArrayList.\n      ArrayList myAL = new ArrayList();\n      myAL.Add( &quot;The&quot; );\n      myAL.Add( &quot;quick&quot; );\n      myAL.Add( &quot;brown&quot; );\n      myAL.Add( &quot;fox&quot; );\n      myAL.Add( &quot;jumped&quot; );\n      myAL.Add( &quot;over&quot; );\n      myAL.Add( &quot;the&quot; );\n      myAL.Add( &quot;lazy&quot; );\n      myAL.Add( &quot;dog&quot; );\n \n      // Displays the values of the ArrayList.\n      Console.WriteLine( &quot;The ArrayList contains the following values:&quot; );\n      PrintIndexAndValues( myAL );\n \n      // Copies the elements of the ArrayList to a string array.\n      String[] myArr = (String[]) myAL.ToArray( typeof( string ) );\n\n      // Displays the contents of the string array.\n      Console.WriteLine( &quot;The string array contains the following values:&quot; );\n      PrintIndexAndValues( myArr );\n\n   }\n \n   public static void PrintIndexAndValues( ArrayList myList )  {\n      int i = 0;\n      foreach ( Object o in myList )\n         Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, o );\n      Console.WriteLine();\n   }\n\n   public static void PrintIndexAndValues( String[] myArr )  {\n      for ( int i = 0; i &lt; myArr.Length; i++ )\n         Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArr[i] );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nThe ArrayList contains the following values:\n        [0]:    The\n        [1]:    quick\n        [2]:    brown\n        [3]:    fox\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nThe string array contains the following values:\n        [0]:    The\n        [1]:    quick\n        [2]:    brown\n        [3]:    fox\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.ArrayList.ToArray#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( ArrayList^ myList );\nvoid PrintIndexAndValues( array&lt;String^&gt;^myArr );\nint main()\n{\n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   myAL-&gt;Add( &quot;over&quot; );\n   myAL-&gt;Add( &quot;the&quot; );\n   myAL-&gt;Add( &quot;lazy&quot; );\n   myAL-&gt;Add( &quot;dog&quot; );\n\n   // Displays the values of the ArrayList.\n   Console::WriteLine( &quot;The ArrayList contains the following values:&quot; );\n   PrintIndexAndValues( myAL );\n\n   // Copies the elements of the ArrayList to a string array.\n   array&lt;String^&gt;^myArr = reinterpret_cast&lt;array&lt;String^&gt;^&gt;(myAL-&gt;ToArray( String::typeid ));\n\n   // Displays the contents of the string array.\n   Console::WriteLine( &quot;The string array contains the following values:&quot; );\n   PrintIndexAndValues( myArr );\n}\n\nvoid PrintIndexAndValues( ArrayList^ myList )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ o = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, o );\n   }\n\n   Console::WriteLine();\n}\n\nvoid PrintIndexAndValues( array&lt;String^&gt;^myArr )\n{\n   for ( int i = 0; i &lt; myArr-&gt;Length; i++ )\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArr[ i ] );\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nThe ArrayList contains the following values:\n        [0]:    The\n        [1]:    quick\n        [2]:    brown\n        [3]:    fox\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\nThe string array contains the following values:\n        [0]:    The\n        [1]:    quick\n        [2]:    brown\n        [3]:    fox\n        [4]:    jumped\n        [5]:    over\n        [6]:    the\n        [7]:    lazy\n        [8]:    dog\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ArrayList.ToArray#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArrayList\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        myAL.Add(&quot;over&quot;)\n        myAL.Add(&quot;the&quot;)\n        myAL.Add(&quot;lazy&quot;)\n        myAL.Add(&quot;dog&quot;)\n\n        &#39; Displays the values of the ArrayList.\n        Console.WriteLine(&quot;The ArrayList contains the following values:&quot;)\n        PrintIndexAndValues(myAL)\n\n        &#39; Copies the elements of the ArrayList to a string array.\n        Dim myArr As String() = CType(myAL.ToArray(GetType(String)), String())\n\n        &#39; Displays the contents of the string array.\n        Console.WriteLine(&quot;The string array contains the following values:&quot;)\n        PrintIndexAndValues(myArr)\n\n    End Sub &#39;Main\n\n    Overloads Public Shared Sub PrintIndexAndValues(myList As ArrayList)\n        Dim i As Integer = 0\n        Dim o As [Object]\n        For Each o In  myList\n            Console.WriteLine(&quot;        [{0}]:    {1}&quot;, i, o)\n            i = i + 1\n        Next o\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n    Overloads Public Shared Sub PrintIndexAndValues(myArr() As String)\n        Dim i As Integer\n        For i = 0 To myArr.Length - 1\n            Console.WriteLine(&quot;        [{0}]:    {1}&quot;, i, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArrayList\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The ArrayList contains the following values:\n&#39;        [0]:    The\n&#39;        [1]:    quick\n&#39;        [2]:    brown\n&#39;        [3]:    fox\n&#39;        [4]:    jumped\n&#39;        [5]:    over\n&#39;        [6]:    the\n&#39;        [7]:    lazy\n&#39;        [8]:    dog\n&#39;\n&#39;The string array contains the following values:\n&#39;        [0]:    The\n&#39;        [1]:    quick\n&#39;        [2]:    brown\n&#39;        [3]:    fox\n&#39;        [4]:    jumped\n&#39;        [5]:    over\n&#39;        [6]:    the\n&#39;        [7]:    lazy\n&#39;        [8]:    dog\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ArrayList_TrimToSize\">\r\n    \r\n            <a id=\"System_Collections_ArrayList_TrimToSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimToSize()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the capacity to the actual number of elements in the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void TrimToSize ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to minimize a collection&#39;s memory overhead if no new elements will be added to the collection.  </p>\n<p> To reset a <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to its initial state, call the <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Clear_\" data-linktype=\"relative-path\">Clear</a> method before calling TrimToSize. Trimming an empty <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to trim the unused portions of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> and how to clear the values of the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ArrayList.Clear Example#1\"> using System;\n using System.Collections;\n public class SamplesArrayList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new ArrayList.\n       ArrayList myAL = new ArrayList();\n       myAL.Add( &quot;The&quot; );\n       myAL.Add( &quot;quick&quot; );\n       myAL.Add( &quot;brown&quot; );\n       myAL.Add( &quot;fox&quot; );\n       myAL.Add( &quot;jumped&quot; );\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;Initially,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n \n       // Trim the ArrayList.\n       myAL.TrimToSize();\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;After TrimToSize,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n \n       // Clear the ArrayList.\n       myAL.Clear();\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;After Clear,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n \n       // Trim the ArrayList again.\n       myAL.TrimToSize();\n \n       // Displays the count, capacity and values of the ArrayList.\n       Console.WriteLine( &quot;After the second TrimToSize,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myAL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, myAL.Capacity );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myAL );\n    }\n \n    public static void PrintValues( IEnumerable myList )  {\n       foreach ( Object obj in myList )\n          Console.Write( &quot;   {0}&quot;, obj );\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Capacity : 16\n    Values:    The    quick    brown    fox    jumped\n After TrimToSize,\n    Count    : 5\n    Capacity : 5\n    Values:    The    quick    brown    fox    jumped\n After Clear,\n    Count    : 0\n    Capacity : 5\n    Values:\n After the second TrimToSize,\n    Count    : 0\n    Capacity : 16\n    Values:\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ArrayList.Clear Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList );\nint main()\n{\n   \n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;The&quot; );\n   myAL-&gt;Add( &quot;quick&quot; );\n   myAL-&gt;Add( &quot;brown&quot; );\n   myAL-&gt;Add( &quot;fox&quot; );\n   myAL-&gt;Add( &quot;jumped&quot; );\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;Initially,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n   \n   // Trim the ArrayList.\n   myAL-&gt;TrimToSize();\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;After TrimToSize,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n   \n   // Clear the ArrayList.\n   myAL-&gt;Clear();\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;After Clear,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n   \n   // Trim the ArrayList again.\n   myAL-&gt;TrimToSize();\n   \n   // Displays the count, capacity and values of the ArrayList.\n   Console::WriteLine( &quot;After the second TrimToSize,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myAL-&gt;Count );\n   Console::WriteLine( &quot;   Capacity : {0}&quot;, myAL-&gt;Capacity );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myAL );\n}\n\nvoid PrintValues( IEnumerable^ myList )\n{\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Capacity : 16\n    Values:    The    quick    brown    fox    jumped\n After TrimToSize,\n    Count    : 5\n    Capacity : 5\n    Values:    The    quick    brown    fox    jumped\n After Clear,\n    Count    : 0\n    Capacity : 5\n    Values:\n After the second TrimToSize,\n    Count    : 0\n    Capacity : 16\n    Values:\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ArrayList.Clear Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArrayList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;The&quot;)\n        myAL.Add(&quot;quick&quot;)\n        myAL.Add(&quot;brown&quot;)\n        myAL.Add(&quot;fox&quot;)\n        myAL.Add(&quot;jumped&quot;)\n        \n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;Initially,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Trim the ArrayList.\n        myAL.TrimToSize()\n        \n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;After TrimToSize,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Clear the ArrayList.\n        myAL.Clear()\n        \n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;After Clear,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n        \n        &#39; Trim the ArrayList again.\n        myAL.TrimToSize()\n        \n        &#39; Displays the count, capacity and values of the ArrayList.\n        Console.WriteLine(&quot;After the second TrimToSize,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myAL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, myAL.Capacity)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myAL)\n    End Sub\n\n    Public Shared Sub PrintValues(myList As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myList\n            Console.Write(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initially,\n&#39;    Count    : 5\n&#39;    Capacity : 16\n&#39;    Values:    The    quick    brown    fox    jumped\n&#39; After TrimToSize,\n&#39;    Count    : 5\n&#39;    Capacity : 5\n&#39;    Values:    The    quick    brown    fox    jumped\n&#39; After Clear,\n&#39;    Count    : 0\n&#39;    Capacity : 5\n&#39;    Values:\n&#39; After the second TrimToSize,\n&#39;    Count    : 0\n&#39;    Capacity : 16\n&#39;    Values:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.ArrayList.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.ArrayList.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Adapter\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.AddRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.BinarySearch\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Capacity\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Clone\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.FixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.GetRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.InsertRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.LastIndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.ReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.RemoveRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Repeat\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Reverse\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.SetRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Sort\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.Synchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.ToArray\">\r\n<meta name=\"APIName\" content=\"System.Collections.ArrayList.TrimToSize\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"15fdb750-d757-3102-59e9-ae6d5d78bb33\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements the  interface using an array whose size is dynamically increased as required.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.ArrayList\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.ArrayList.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.ArrayList.yml","open_to_public_contributors":true,"api_name":["System.Collections.ArrayList","System.Collections.ArrayList..ctor","System.Collections.ArrayList.Adapter","System.Collections.ArrayList.Add","System.Collections.ArrayList.AddRange","System.Collections.ArrayList.BinarySearch","System.Collections.ArrayList.Capacity","System.Collections.ArrayList.Clear","System.Collections.ArrayList.Clone","System.Collections.ArrayList.Contains","System.Collections.ArrayList.CopyTo","System.Collections.ArrayList.Count","System.Collections.ArrayList.FixedSize","System.Collections.ArrayList.GetEnumerator","System.Collections.ArrayList.GetRange","System.Collections.ArrayList.IndexOf","System.Collections.ArrayList.Insert","System.Collections.ArrayList.InsertRange","System.Collections.ArrayList.IsFixedSize","System.Collections.ArrayList.IsReadOnly","System.Collections.ArrayList.IsSynchronized","System.Collections.ArrayList.Item","System.Collections.ArrayList.LastIndexOf","System.Collections.ArrayList.ReadOnly","System.Collections.ArrayList.Remove","System.Collections.ArrayList.RemoveAt","System.Collections.ArrayList.RemoveRange","System.Collections.ArrayList.Repeat","System.Collections.ArrayList.Reverse","System.Collections.ArrayList.SetRange","System.Collections.ArrayList.Sort","System.Collections.ArrayList.Synchronized","System.Collections.ArrayList.SyncRoot","System.Collections.ArrayList.ToArray","System.Collections.ArrayList.TrimToSize"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.ArrayList","System::Collections::ArrayList","System.Collections.ArrayList.#ctor","System::Collections::ArrayList::#ctor","System.Collections.ArrayList.Adapter","System::Collections::ArrayList::Adapter","System.Collections.ArrayList.Add","System::Collections::ArrayList::Add","System.Collections.ArrayList.AddRange","System::Collections::ArrayList::AddRange","System.Collections.ArrayList.BinarySearch","System::Collections::ArrayList::BinarySearch","System.Collections.ArrayList.Capacity","System::Collections::ArrayList::Capacity","System.Collections.ArrayList.Clear","System::Collections::ArrayList::Clear","System.Collections.ArrayList.Clone","System::Collections::ArrayList::Clone","System.Collections.ArrayList.Contains","System::Collections::ArrayList::Contains","System.Collections.ArrayList.CopyTo","System::Collections::ArrayList::CopyTo","System.Collections.ArrayList.Count","System::Collections::ArrayList::Count","System.Collections.ArrayList.FixedSize","System::Collections::ArrayList::FixedSize","System.Collections.ArrayList.GetEnumerator","System::Collections::ArrayList::GetEnumerator","System.Collections.ArrayList.GetRange","System::Collections::ArrayList::GetRange","System.Collections.ArrayList.IndexOf","System::Collections::ArrayList::IndexOf","System.Collections.ArrayList.Insert","System::Collections::ArrayList::Insert","System.Collections.ArrayList.InsertRange","System::Collections::ArrayList::InsertRange","System.Collections.ArrayList.IsFixedSize","System::Collections::ArrayList::IsFixedSize","System.Collections.ArrayList.IsReadOnly","System::Collections::ArrayList::IsReadOnly","System.Collections.ArrayList.IsSynchronized","System::Collections::ArrayList::IsSynchronized","System.Collections.ArrayList.Item","System::Collections::ArrayList::Item","System.Collections.ArrayList.LastIndexOf","System::Collections::ArrayList::LastIndexOf","System.Collections.ArrayList.ReadOnly","System::Collections::ArrayList::ReadOnly","System.Collections.ArrayList.Remove","System::Collections::ArrayList::Remove","System.Collections.ArrayList.RemoveAt","System::Collections::ArrayList::RemoveAt","System.Collections.ArrayList.RemoveRange","System::Collections::ArrayList::RemoveRange","System.Collections.ArrayList.Repeat","System::Collections::ArrayList::Repeat","System.Collections.ArrayList.Reverse","System::Collections::ArrayList::Reverse","System.Collections.ArrayList.SetRange","System::Collections::ArrayList::SetRange","System.Collections.ArrayList.Sort","System::Collections::ArrayList::Sort","System.Collections.ArrayList.Synchronized","System::Collections::ArrayList::Synchronized","System.Collections.ArrayList.SyncRoot","System::Collections::ArrayList::SyncRoot","System.Collections.ArrayList.ToArray","System::Collections::ArrayList::ToArray","System.Collections.ArrayList.TrimToSize","System::Collections::ArrayList::TrimToSize"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"15fdb750-d757-3102-59e9-ae6d5d78bb33","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/ArrayList.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ArrayList class | Microsoft Docs","_op_ogTitle":"ArrayList class","description":"Implements the  interface using an array whose size is dynamically increased as required.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.ArrayList","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.arraylist","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.arraylist","fileRelativePath":"System.Collections.ArrayList.html"},"themesRelativePathToOutputRoot":"_themes/"}