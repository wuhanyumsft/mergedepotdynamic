{"content":"    \r\n    <h1 id=\"System_Byte\">\r\n      <span class=\"lang-csharp\">Byte</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an 8-bit unsigned integer.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct Byte : IComparable, IComparable&lt;byte&gt;, IConvertible, IEquatable&lt;byte&gt;, IFormattable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Byte</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Byte is an immutable value type that represents unsigned integers with values that range from 0 (which is represented by the <a class=\"xref\" href=\"system.byte#System_Byte_MinValue\" data-linktype=\"relative-path\">System.Byte.MinValue</a> constant) to 255 (which is represented by the <a class=\"xref\" href=\"system.byte#System_Byte_MaxValue\" data-linktype=\"relative-path\">System.Byte.MaxValue</a> constant). The .NET Framework also includes a signed 8-bit integer value type, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, which represents values that range from -128 to 127.  </p>\n<h2 id=\"instantiating-a-byte-value\">Instantiating a Byte Value</h2>\n<p> You can instantiate a Byte value in several ways:  </p>\n<ul>\n<li><p>You can declare a Byte variable and assign it a literal integer value that is within the range of the Byte data type. The following example declares two Byte variables and assigns them values in this way.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Byte.Instantiation#1\">      Dim value1 As Byte = 64\n      Dim value2 As Byte = 255\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.Instantiation#1\">      byte value1 = 64;\n      byte value2 = 255;\n</code></pre></li>\n<li><p>You can assign a non-byte numeric value to a byte. This is a narrowing conversion, so it requires a cast operator in C# and a conversion method in Visual Basic if <code>Option``Strict</code> is on. If the non-byte value is a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, or <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value that includes a fractional component, the handling of its fractional part depends on the compiler performing the conversion. The following example assigns several numeric values to Byte variables.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Byte.Instantiation#2\">      Dim int1 As Integer = 128\n      Try\n         Dim value1 As Byte = CByte(int1)\n         Console.WriteLine(value1)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is out of range of a byte.&quot;, int1)\n      End Try\n      \n      Dim dbl2 As Double = 3.997\n      Try\n         Dim value2 As Byte = CByte(dbl2)\n         Console.WriteLine(value2)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is out of range of a byte.&quot;, dbl2)\n      End Try   \n      &#39; The example displays the following output:\n      &#39;       128\n      &#39;       4\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.Instantiation#2\">      int int1 = 128;\n      try {\n         byte value1 = (byte) int1;\n         Console.WriteLine(value1);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is out of range of a byte.&quot;, int1);\n      }\n\n      double dbl2 = 3.997;\n      try {\n         byte value2 = (byte) dbl2;\n         Console.WriteLine(value2);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is out of range of a byte.&quot;, dbl2);\n      }\n      // The example displays the following output:\n      //       128\n      //       3\n</code></pre></li>\n<li><p>You can call a method of the <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> class to convert any supported type to a Byte value. This is possible because Byte supports the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The following example illustrates the conversion of an array of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to Byte values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#4\">      int[] numbers = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue };\n      byte result;\n      foreach (int number in numbers)\n      {\n         try {\n            result = Convert.ToByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       The Int32 value -2147483648 is outside the range of the Byte type.\n      //       The Int32 value -1 is outside the range of the Byte type.\n      //       Converted the Int32 value 0 to the Byte value 0.\n      //       Converted the Int32 value 121 to the Byte value 121.\n      //       The Int32 value 340 is outside the range of the Byte type.\n      //       The Int32 value 2147483647 is outside the range of the Byte type.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#4\">      Dim numbers() As Integer = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue }\n      Dim result As Byte\n      For Each number As Integer In numbers\n         Try\n            result = Convert.ToByte(number)\n            Console.WriteLIne(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       The Int32 value -2147483648 is outside the range of the Byte type.\n      &#39;       The Int32 value -1 is outside the range of the Byte type.\n      &#39;       Converted the Int32 value 0 to the Byte value 0.\n      &#39;       Converted the Int32 value 121 to the Byte value 121.\n      &#39;       The Int32 value 340 is outside the range of the Byte type.\n      &#39;       The Int32 value 2147483647 is outside the range of the Byte type.      \n</code></pre></li>\n<li><p>You can call the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_\" data-linktype=\"relative-path\">Parse</a> or <a class=\"xref\" href=\"system.byte#System_Byte_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method to convert the string representation of a Byte value to a Byte. The string can contain either decimal or hexadecimal digits. The following example illustrates the parse operation by using both a decimal and a hexadecimal string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Byte.Instantiation#3\">      Dim string1 As String = &quot;244&quot;\n      Try\n         Dim byte1 As Byte = Byte.Parse(string1)\n         Console.WriteLine(byte1)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a byte.&quot;, string1)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a byte.&quot;, string1)\n      End Try\n\n      Dim string2 As String = &quot;F9&quot;\n      Try\n         Dim byte2 As Byte = Byte.Parse(string2,\n                                   System.Globalization.NumberStyles.HexNumber)\n         Console.WriteLine(byte2)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a byte.&quot;, string2)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a byte.&quot;, string2)\n      End Try\n      &#39; The example displays the following output:\n      &#39;       244\n      &#39;       249\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.Instantiation#3\">      string string1 = &quot;244&quot;;\n      try {\n         byte byte1 = Byte.Parse(string1);\n         Console.WriteLine(byte1);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a byte.&quot;, string1);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a byte.&quot;, string1);\n      }\n   \n      string string2 = &quot;F9&quot;;\n      try {\n         byte byte2 = Byte.Parse(string2, \n                                 System.Globalization.NumberStyles.HexNumber);\n         Console.WriteLine(byte2);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a byte.&quot;, string2);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is out of range of a byte.&quot;, string2);\n      }\n      // The example displays the following output:\n      //       244\n      //       249\n</code></pre></li>\n</ul>\n<h2 id=\"performing-operations-on-byte-values\">Performing Operations on Byte Values</h2>\n<p> The Byte type supports standard mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation. Like the other integral types, the Byte type also supports the bitwise <code>AND</code>, <code>OR</code>, <code>XOR</code>, left shift, and right shift operators.  </p>\n<p> You can use the standard numeric operators to compare two Byte values, or you can call the <a class=\"xref\" href=\"system.byte#System_Byte_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> or <a class=\"xref\" href=\"system.byte#System_Byte_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<p> You can also call the members of the <a class=\"xref\" href=\"system.math\" data-linktype=\"relative-path\">Math</a> class to perform a wide range of numeric operations, including getting the absolute value of a number, calculating the quotient and remainder from integral division, determining the maximum or minimum value of two integers, getting the sign of a number, and rounding a number.  </p>\n<h2 id=\"representing-a-byte-as-a-string\">Representing a Byte as a String</h2>\n<p> The Byte type provides full support for standard and custom numeric format strings. (For more information, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>, <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a>, and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.) However, most commonly, byte values are represented as one-digit to three-digit values without any additional formatting, or as two-digit hexadecimal values.  </p>\n<p> To format a Byte value as an integral string with no leading zeros, you can call the parameterless <a class=\"xref\" href=\"system.byte#System_Byte_ToString\" data-linktype=\"relative-path\">ToString()</a> method. By using the &quot;D&quot; format specifier, you can also include a specified number of leading zeros in the string representation. By using the &quot;X&quot; format specifier, you can represent a Byte value as a hexadecimal string. The following example formats the elements in an array of Byte values in these three ways.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Byte.Formatting#1\">      byte[] numbers = { 0, 16, 104, 213 };\n      foreach (byte number in numbers) {\n         // Display value using default formatting.\n         Console.Write(&quot;{0,-3}  --&gt;   &quot;, number.ToString());\n         // Display value with 3 digits and leading zeros.\n         Console.Write(number.ToString(&quot;D3&quot;) + &quot;   &quot;);\n         // Display value with hexadecimal.\n         Console.Write(number.ToString(&quot;X2&quot;) + &quot;   &quot;);\n         // Display value with four hexadecimal digits.\n         Console.WriteLine(number.ToString(&quot;X4&quot;));\n      }   \n      // The example displays the following output:\n      //       0    --&gt;   000   00   0000\n      //       16   --&gt;   016   10   0010\n      //       104  --&gt;   104   68   0068\n      //       213  --&gt;   213   D5   00D5      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.Formatting#1\">      Dim numbers() As Byte = { 0, 16, 104, 213 }\n      For Each number As Byte In numbers\n         &#39; Display value using default formatting.\n         Console.Write(&quot;{0,-3}  --&gt;   &quot;, number.ToString())\n         &#39; Display value with 3 digits and leading zeros.\n         Console.Write(number.ToString(&quot;D3&quot;) + &quot;   &quot;)\n         &#39; Display value with hexadecimal.\n         Console.Write(number.ToString(&quot;X2&quot;) + &quot;   &quot;)\n         &#39; Display value with four hexadecimal digits.\n         Console.WriteLine(number.ToString(&quot;X4&quot;))\n      Next   \n      &#39; The example displays the following output:\n      &#39;       0    --&gt;   000   00   0000\n      &#39;       16   --&gt;   016   10   0010\n      &#39;       104  --&gt;   104   68   0068\n      &#39;       213  --&gt;   213   D5   00D5      \n</code></pre><p> You can also format a Byte value as a binary, octal, decimal, or hexadecimal string by calling the <a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Byte_System_Int32_\" data-linktype=\"relative-path\">ToString(Byte,Int32)</a> method and supplying the base as the method&#39;s second parameter. The following example calls this method to display the binary, octal, and hexadecimal representations of an array of byte values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Byte.Formatting#2\">      byte[] numbers ={ 0, 16, 104, 213 };\n      Console.WriteLine(&quot;{0}   {1,8}   {2,5}   {3,5}&quot;,\n                        &quot;Value&quot;, &quot;Binary&quot;, &quot;Octal&quot;, &quot;Hex&quot;);\n      foreach (byte number in numbers) {\n         Console.WriteLine(&quot;{0,5}   {1,8}   {2,5}   {3,5}&quot;,\n                           number, Convert.ToString(number, 2),\n                           Convert.ToString(number, 8),\n                           Convert.ToString(number, 16));\n      }      \n      // The example displays the following output:\n      //       Value     Binary   Octal     Hex\n      //           0          0       0       0\n      //          16      10000      20      10\n      //         104    1101000     150      68\n      //         213   11010101     325      d5      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.Formatting#2\">      Dim numbers() As Byte = { 0, 16, 104, 213 }\n      Console.WriteLine(&quot;{0}   {1,8}   {2,5}   {3,5}&quot;, _\n                        &quot;Value&quot;, &quot;Binary&quot;, &quot;Octal&quot;, &quot;Hex&quot;)\n      For Each number As Byte In numbers\n         Console.WriteLine(&quot;{0,5}   {1,8}   {2,5}   {3,5}&quot;, _\n                           number, Convert.ToString(number, 2), _\n                           Convert.ToString(number, 8), _\n                           Convert.ToString(number, 16))\n      Next      \n      &#39; The example displays the following output:\n      &#39;       Value     Binary   Octal     Hex\n      &#39;           0          0       0       0\n      &#39;          16      10000      20      10\n      &#39;         104    1101000     150      68\n      &#39;         213   11010101     325      d5      \n</code></pre><h2 id=\"working-with-non-decimal-byte-values\">Working with Non-Decimal Byte Values</h2>\n<p> In addition to working with individual bytes as decimal values, you may want to perform bitwise operations with byte values, or work with byte arrays or with the binary or hexadecimal representations of byte values. For example, overloads of the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method can convert each of the primitive data types to a byte array, and the <a class=\"xref\" href=\"system.numerics.biginteger#System_Numerics_BigInteger_ToByteArray_\" data-linktype=\"relative-path\">ToByteArray</a> method converts a <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> value to a byte array.  </p>\n<p> Byte values are represented in 8 bits by their magnitude only, without a sign bit. This is important to keep in mind when you perform bitwise operations on Byte values or when you work with individual bits. In order to perform a numeric, Boolean, or comparison operation on any two non-decimal values, both values must use the same representation.  </p>\n<p> When an operation is performed on two Byte values, the values share the same representation, so the result is accurate. This is illustrated in the following example, which masks the lowest-order bit of a Byte value to ensure that it is even.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Byte.Bitwise#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { Convert.ToString(12, 16), \n                          Convert.ToString(123, 16), \n                          Convert.ToString(245, 16) };\n      \n      byte mask = 0xFE;\n      foreach (string value in values) {\n         Byte byteValue = Byte.Parse(value, NumberStyles.AllowHexSpecifier);\n         Console.WriteLine(&quot;{0} And {1} = {2}&quot;, byteValue, mask,  \n                           byteValue &amp; mask);\n      }\n   }\n}\n// The example displays the following output:\n//       12 And 254 = 12\n//       123 And 254 = 122\n//       245 And 254 = 244\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.Bitwise#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim values() As String = { Convert.ToString(12, 16), _\n                                 Convert.ToString(123, 16), _\n                                 Convert.ToString(245, 16) }\n      \n      Dim mask As Byte = &amp;hFE\n      For Each value As String In values\n         Dim byteValue As Byte = Byte.Parse(value, NumberStyles.AllowHexSpecifier)\n         Console.WriteLine(&quot;{0} And {1} = {2}&quot;, byteValue, mask, _ \n                           byteValue And mask)\n      Next         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       12 And 254 = 12\n&#39;       123 And 254 = 122\n&#39;       245 And 254 = 244\n</code></pre><p> On the other hand, when you work with both unsigned and signed bits, bitwise operations are complicated by the fact that the <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> values use sign-and-magnitude representation for positive values, and two&#39;s complement representation for negative values. In order to perform a meaningful bitwise operation, the values must be converted to two equivalent representations, and information about the sign bit must be preserved. The following example does this to mask out bits 2 and 4 of an array of 8-bit signed and unsigned values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Byte.Bitwise#2\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\n\npublic struct ByteString\n{\n   public string Value;\n   public int Sign;\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      ByteString[] values = CreateArray(-15, 123, 245);\n      \n      byte mask = 0x14;        // Mask all bits but 2 and 4.\n      \n      foreach (ByteString strValue in values) {\n         byte byteValue = Byte.Parse(strValue.Value, NumberStyles.AllowHexSpecifier);\n         Console.WriteLine(&quot;{0} ({1}) And {2} ({3}) = {4} ({5})&quot;, \n                           strValue.Sign * byteValue, \n                           Convert.ToString(byteValue, 2), \n                           mask, Convert.ToString(mask, 2), \n                           (strValue.Sign &amp; Math.Sign(mask)) * (byteValue &amp; mask), \n                           Convert.ToString(byteValue &amp; mask, 2));\n      }\n   }\n   \n   private static ByteString[] CreateArray(params int[] values)\n   {\n      List&lt;ByteString&gt; byteStrings = new List&lt;ByteString&gt;();\n\n      foreach (object value in values) {\n         ByteString temp = new ByteString();\n         int sign = Math.Sign((int) value);\n         temp.Sign = sign;\n\n         // Change two&#39;s complement to magnitude-only representation.\n         temp.Value = Convert.ToString(((int) value) * sign, 16);\n\n         byteStrings.Add(temp);\n      }\n      return byteStrings.ToArray();\n   }\n}\n// The example displays the following output:\n//       -15 (1111) And 20 (10100) = 4 (100)\n//       123 (1111011) And 20 (10100) = 16 (10000)\n//       245 (11110101) And 20 (10100) = 20 (10100)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.Bitwise#2\">Imports System.Collections.Generic\nImports System.Globalization\n\nPublic Structure ByteString\n   Public Value As String\n   Public Sign As Integer\nEnd Structure\n\nModule Example\n   Public Sub Main()\n      Dim values() As ByteString = CreateArray(-15, 123, 245)\n      \n      Dim mask As Byte = &amp;h14        &#39; Mask all bits but 2 and 4.\n      \n      For Each strValue As ByteString In values\n         Dim byteValue As Byte = Byte.Parse(strValue.Value, NumberStyles.AllowHexSpecifier)\n         Console.WriteLine(&quot;{0} ({1}) And {2} ({3}) = {4} ({5})&quot;, _ \n                           strValue.Sign * byteValue, _ \n                           Convert.ToString(byteValue, 2), _\n                           mask, Convert.ToString(mask, 2), _\n                           (strValue.Sign And Math.Sign(mask)) * (byteValue And mask), _\n                           Convert.ToString(byteValue And mask, 2))\n      Next         \n   End Sub\n   \n   Private Function CreateArray(ParamArray values() As Object) As ByteString()\n      Dim byteStrings As New List(Of ByteString)\n      For Each value As Object In values\n         Dim temp As New ByteString()\n         Dim sign As Integer = Math.Sign(value)\n         temp.Sign = sign\n         &#39; Change two&#39;s complement to magnitude-only representation.\n         value = value * sign\n\n         temp.Value = Convert.ToString(value, 16)\n         byteStrings.Add(temp)\n      Next\n      Return byteStrings.ToArray()\n   End Function   \nEnd Module\n&#39; The example displays the following output:\n&#39;       -15 (1111) And 20 (10100) = 4 (100)\n&#39;       123 (1111011) And 20 (10100) = 16 (10000)\n&#39;       245 (11110101) And 20 (10100) = 20 (10100)\n</code></pre>\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_MaxValue\" data-linktype=\"self-bookmark\">MaxValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the largest possible value of a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_MinValue\" data-linktype=\"self-bookmark\">MinValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the smallest possible value of a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_CompareTo_System_Byte_\" data-linktype=\"self-bookmark\">CompareTo(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified 8-bit unsigned integer and returns an indication of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified object and returns an indication of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_Equals_System_Byte_\" data-linktype=\"self-bookmark\">Equals(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance and a specified <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object represent the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_GetTypeCode\" data-linktype=\"self-bookmark\">GetTypeCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"self-bookmark\">Parse(String,NumberStyles)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_Parse_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified culture-specific format to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,NumberStyles,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object to its equivalent string representation using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object to its equivalent string representation using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object to its equivalent string representation using the specified format and culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_TryParse_System_String_System_Byte__\" data-linktype=\"self-bookmark\">TryParse(String,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to convert the string representation of a number to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Byte__\" data-linktype=\"self-bookmark\">TryParse(String,NumberStyles,IFormatProvider,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToBoolean_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToBoolean(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToChar_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToChar(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToDateTime_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDateTime(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToDecimal_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDecimal(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToDouble_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDouble(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToSByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToSingle_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSingle(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToType_System_Type_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToType(Type,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToUInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToUInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Byte_System_IConvertible_ToUInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_MaxValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the largest possible value of a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const byte MaxValue = 255;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is 255 (hexadecimal 0xFF).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the MaxValue field to screen variable inputs for values that are outside the range of possible byte values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte Examples#1\">public:\n   void MinMaxFields( Int32 numberToSet )\n   {\n      if ( numberToSet &lt;= (Int32)Byte::MaxValue &amp;&amp; numberToSet &gt;= (Int32)Byte::MinValue )\n      {\n         \n         // You must explicitly convert an integer to a byte.\n         MemberByte = (Byte)numberToSet;\n         \n         // Displays MemberByte using the ToString() method.\n         Console::WriteLine(  &quot;The MemberByte value is {0}&quot;, MemberByte.ToString() );\n      }\n      else\n      {\n         Console::WriteLine(  &quot;The value {0} is outside of the range of possible Byte values&quot;, numberToSet.ToString() );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte Examples#1\">      public void MinMaxFields(int numberToSet)\n      {\n         if(numberToSet &lt;= (int)Byte.MaxValue &amp;&amp; numberToSet &gt;= (int)Byte.MinValue)\n         {\n            // You must explicitly convert an integer to a byte.\n            MemberByte = (Byte)numberToSet;\n\n            // Displays MemberByte using the ToString() method.\n            Console.WriteLine(&quot;The MemberByte value is {0}&quot;, MemberByte.ToString());\n         }\n         else\n         {\n            Console.WriteLine(&quot;The value {0} is outside of the range of possible Byte values&quot;, numberToSet.ToString());\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte Examples#1\">      Public Sub MinMaxFields(ByVal numberToSet As Integer)\n         If numberToSet &lt;= CInt([Byte].MaxValue) And numberToSet &gt;= CInt([Byte].MinValue) Then\n            &#39; You must explicitly convert an integer to a byte.\n            MemberByte = CType(numberToSet, [Byte])\n\n            &#39; Displays MemberByte using the ToString() method.\n            Console.WriteLine(&quot;The MemberByte value is {0}.&quot;, MemberByte.ToString())\n         Else\n            Console.WriteLine(&quot;The value {0} is outside of the range of possible Byte values.&quot;, numberToSet.ToString())\n         End If\n      End Sub &#39;MinMaxFields\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_MinValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the smallest possible value of a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const byte MinValue = 0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is 0.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the MinValue field to screen variable inputs for values that are outside the range of possible byte values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte Examples#1\">public:\n   void MinMaxFields( Int32 numberToSet )\n   {\n      if ( numberToSet &lt;= (Int32)Byte::MaxValue &amp;&amp; numberToSet &gt;= (Int32)Byte::MinValue )\n      {\n         \n         // You must explicitly convert an integer to a byte.\n         MemberByte = (Byte)numberToSet;\n         \n         // Displays MemberByte using the ToString() method.\n         Console::WriteLine(  &quot;The MemberByte value is {0}&quot;, MemberByte.ToString() );\n      }\n      else\n      {\n         Console::WriteLine(  &quot;The value {0} is outside of the range of possible Byte values&quot;, numberToSet.ToString() );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte Examples#1\">      public void MinMaxFields(int numberToSet)\n      {\n         if(numberToSet &lt;= (int)Byte.MaxValue &amp;&amp; numberToSet &gt;= (int)Byte.MinValue)\n         {\n            // You must explicitly convert an integer to a byte.\n            MemberByte = (Byte)numberToSet;\n\n            // Displays MemberByte using the ToString() method.\n            Console.WriteLine(&quot;The MemberByte value is {0}&quot;, MemberByte.ToString());\n         }\n         else\n         {\n            Console.WriteLine(&quot;The value {0} is outside of the range of possible Byte values&quot;, numberToSet.ToString());\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte Examples#1\">      Public Sub MinMaxFields(ByVal numberToSet As Integer)\n         If numberToSet &lt;= CInt([Byte].MaxValue) And numberToSet &gt;= CInt([Byte].MinValue) Then\n            &#39; You must explicitly convert an integer to a byte.\n            MemberByte = CType(numberToSet, [Byte])\n\n            &#39; Displays MemberByte using the ToString() method.\n            Console.WriteLine(&quot;The MemberByte value is {0}.&quot;, MemberByte.ToString())\n         Else\n            Console.WriteLine(&quot;The value {0} is outside of the range of possible Byte values.&quot;, numberToSet.ToString())\n         End If\n      End Sub &#39;MinMaxFields\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_CompareTo_System_Byte_\">\r\n    \r\n            <a id=\"System_Byte_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified 8-bit unsigned integer and returns an indication of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An 8-bit unsigned integer to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative order of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is less than <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is greater than <code>value</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.byte#System_Byte_CompareTo_System_Object_\" data-linktype=\"relative-path\">System.Byte.CompareTo(Object)</a> method because it does not have to convert the <code>value</code> parameter to an object.  </p>\n<p> Depending on your programming language, it might be possible to code a <a class=\"xref\" href=\"system.byte#System_Byte_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  </p>\n<p> For example, suppose the instance type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and the parameter type is <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, then generates a <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method that compares the values of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance and the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> parameter representation.  </p>\n<p> Consult your programming language&#39;s documentation to determine whether its compiler performs implicit widening conversions on numeric types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates generic and non-generic versions of the <code>CompareTo</code> method for several value and reference types.  </p>\n<pre><code class=\"lang-vb\" name=\"T.CompareTo#1\">&#39; This example demonstrates the generic and non-generic versions of the \n&#39; CompareTo method for several base types.\n&#39; The non-generic version takes a parameter of type Object, while the generic\n&#39; version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim nl As String = Environment.NewLine\n      Dim msg As String = _\n          &quot;{0}The following is the result of using the generic and non-generic{0}&quot; &amp; _\n          &quot;versions of the CompareTo method for several base types:{0}&quot;\n      \n      Dim now As DateTime = DateTime.Now\n      &#39; Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n      Dim tsX As New TimeSpan(11, 22, 33, 44)\n      &#39; Version = 1.2.333.4\n      Dim versX As New Version(&quot;1.2.333.4&quot;)\n      &#39; Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n      Dim guidX As New Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;)\n      \n      Dim a1 As [Boolean] = True,    a2 As [Boolean] = True\n      Dim b1 As [Byte] = 1,          b2 As [Byte] = 1\n      Dim c1 As Int16 = -2,          c2 As Int16 = 2\n      Dim d1 As Int32 = 3,           d2 As Int32 = 3\n      Dim e1 As Int64 = 4,           e2 As Int64 = -4\n      Dim f1 As [Decimal] = -5.5D,   f2 As [Decimal] = 5.5D\n      Dim g1 As [Single] = 6.6F,     g2 As [Single] = 6.6F\n      Dim h1 As [Double] = 7.7,      h2 As [Double] = -7.7\n      Dim i1 As [Char] = &quot;A&quot;c,       i2 As [Char] = &quot;A&quot;c\n      Dim j1 As String = &quot;abc&quot;,      j2 As String = &quot;abc&quot;\n      Dim k1 As DateTime = now,      k2 As DateTime = now\n      Dim l1 As TimeSpan = tsX,      l2 As TimeSpan = tsX\n      Dim m1 As Version = versX,     m2 As New Version(&quot;2.0&quot;)\n      Dim n1 As Guid = guidX,        n2 As Guid = guidX\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; SByte, UInt16, UInt32, UInt64\n\n      Console.WriteLine(msg, nl)\n      Try\n         &#39; The second and third Show method call parameters are automatically boxed because\n         &#39; the second and third Show method declaration arguments expect type Object.\n\n         Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo(CObj(a2)))\n         Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo(CObj(b2)))\n         Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo(CObj(c2)))\n         Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo(CObj(d2)))\n         Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo(CObj(e2)))\n         Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo(CObj(f2)))\n         Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo(CObj(g2)))\n         Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo(CObj(h2)))\n         Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo(CObj(i2)))\n         Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo(CObj(j2)))\n         Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo(CObj(k2)))\n         Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo(CObj(l2)))\n         Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo(CObj(m2)))\n         Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo(CObj(n2)))\n         &#39;\n         Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl)\n         Console.WriteLine(&quot;SByte, UInt16, UInt32, UInt64&quot;)\n\n      Catch e As Exception\n         Console.WriteLine(e)\n      End Try\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(caption As String, var1 As [Object], var2 As [Object], _\n                          resultGeneric As Integer, resultNonGeneric As Integer)\n      Dim relation As String\n      \n      Console.Write(caption)\n      If resultGeneric = resultNonGeneric Then\n         If resultGeneric &lt; 0 Then\n            relation = &quot;less than&quot;\n         ElseIf resultGeneric &gt; 0 Then\n            relation = &quot;greater than&quot;\n         Else\n            relation = &quot;equal to&quot;\n         End If\n         Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2)\n      \n      &#39; The following condition will never occur because the generic and non-generic\n      &#39; CompareTo methods are equivalent.\n\n      Else\n         Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, _\n                            resultGeneric, resultNonGeneric)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The following is the result of using the generic and non-generic versions of the\n&#39;CompareTo method for several base types:\n&#39;\n&#39;Boolean:  True is equal to True\n&#39;Byte:     1 is equal to 1\n&#39;Int16:    -2 is less than 2\n&#39;Int32:    3 is equal to 3\n&#39;Int64:    4 is greater than -4\n&#39;Decimal:  -5.5 is less than 5.5\n&#39;Single:   6.6 is equal to 6.6\n&#39;Double:   7.7 is greater than -7.7\n&#39;Char:     A is equal to A\n&#39;String:   abc is equal to abc\n&#39;DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n&#39;TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n&#39;Version:  1.2.333.4 is less than 2.0\n&#39;Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n&#39;aa0057b223\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;SByte, UInt16, UInt32, UInt64\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"T.CompareTo#1\">// This example demonstrates the two versions of the \n// CompareTo method for several base types.\n// The general version takes a parameter of type Object, while the specific\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\nusing namespace System;\n\nvoid Show( String^ caption, Object^ var1, Object^ var2, int resultGeneric, int resultNonGeneric )\n{\n   String^ relation;\n   Console::Write( caption );\n   if ( resultGeneric == resultNonGeneric )\n   {\n      if ( resultGeneric &lt; 0 )\n            relation = &quot;less than&quot;;\n      else\n      if ( resultGeneric &gt; 0 )\n            relation = &quot;greater than&quot;;\n      else\n            relation = &quot;equal to&quot;;\n      Console::WriteLine( &quot;{0} is {1} {2}&quot;, var1, relation, var2 );\n   }\n   // The following condition will never occur because the generic and non-generic\n   // CompareTo methods are equivalent.\n   else\n   {\n      Console::WriteLine( &quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, resultGeneric, resultNonGeneric );\n   }\n}\n\nint main()\n{\n   String^ nl = Environment::NewLine;\n   String^ msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot;\n   &quot;versions of the CompareTo method for several base types:{0}&quot;;\n   Object^ obj; // An Object used to insure CompareTo(Object) is called.\n\n   DateTime now = DateTime::Now;\n   \n   // Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n   TimeSpan tsX = TimeSpan(11,22,33,44);\n   \n   // Version = 1.2.333.4\n   Version^ versX = gcnew Version(  &quot;1.2.333.4&quot; );\n   \n   // Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n   Guid guidX = Guid( &quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n   Boolean a1 = true,a2 = true;\n   Byte b1 = 1,b2 = 1;\n   Int16 c1 = -2,c2 = 2;\n   Int32 d1 = 3,d2 = 3;\n   Int64 e1 = 4,e2 = -4;\n   Decimal f1 = Decimal(-5.5), f2 = Decimal(5.5);\n   Single g1 = 6.6f,g2 = 6.6f;\n   Double h1 = 7.7,h2 = -7.7;\n   Char i1 = &#39;A&#39;,i2 = &#39;A&#39;;\n   String^ j1 = &quot;abc&quot;, ^j2 = &quot;abc&quot;;\n   DateTime k1 = now,k2 = now;\n   TimeSpan l1 = tsX,l2 = tsX;\n   Version^ m1 = versX, ^m2 = gcnew Version(  &quot;2.0&quot; );\n   Guid n1 = guidX,n2 = guidX;\n   \n   // The following types are not CLS-compliant.\n   SByte w1 = 8,w2 = 8;\n   UInt16 x1 = 9,x2 = 9;\n   UInt32 y1 = 10,y2 = 10;\n   UInt64 z1 = 11,z2 = 11;\n   \n   //\n   Console::WriteLine( msg, nl );\n   try\n   {\n      Show( &quot;Boolean: &quot;, a1, a2, a1.CompareTo( a2 ), a1.CompareTo( a2 ) );\n      Show( &quot;Byte:    &quot;, b1, b2, b1.CompareTo( b2 ), b1.CompareTo( b2 ) );\n      Show( &quot;Int16:   &quot;, c1, c2, c1.CompareTo( c2 ), c1.CompareTo( c2 ) );\n      Show( &quot;Int32:   &quot;, d1, d2, d1.CompareTo( d2 ), d1.CompareTo( d2 ) );\n      Show( &quot;Int64:   &quot;, e1, e2, e1.CompareTo( e2 ), e1.CompareTo( e2 ) );\n      Show( &quot;Decimal: &quot;, f1, f2, f1.CompareTo( f2 ), f1.CompareTo( f2 ) );\n      Show( &quot;Single:  &quot;, g1, g2, g1.CompareTo( g2 ), g1.CompareTo( g2 ) );\n      Show( &quot;Double:  &quot;, h1, h2, h1.CompareTo( h2 ), h1.CompareTo( h2 ) );\n      Show( &quot;Char:    &quot;, i1, i2, i1.CompareTo( i2 ), i1.CompareTo( i2 ) );\n      \n      // Use an anonymous object to hide the String object.\n      obj = j2;\n      Show( &quot;String:  &quot;, j1, j2, j1-&gt;CompareTo( j2 ), j1-&gt;CompareTo( obj ) );\n      Show( &quot;DateTime:&quot;, k1, k2, k1.CompareTo( k2 ), k1.CompareTo( k2 ) );\n      Show(  &quot;TimeSpan: &quot;, l1, l2, l1.CompareTo( l2 ), l1.CompareTo( l2 ) );\n      \n      // Use an anonymous object to hide the Version object.\n      obj = m2;\n      Show(  &quot;Version:  &quot;, m1, m2, m1-&gt;CompareTo( m2 ), m1-&gt;CompareTo( obj ) );\n      Show(  &quot;Guid:     &quot;, n1, n2, n1.CompareTo( n2 ), n1.CompareTo( n2 ) );\n      \n      //\n      Console::WriteLine( &quot;{0}The following types are not CLS-compliant:&quot;, nl );\n      Show( &quot;SByte:   &quot;, w1, w2, w1.CompareTo( w2 ), w1.CompareTo( w2 ) );\n      Show( &quot;UInt16:  &quot;, x1, x2, x1.CompareTo( x2 ), x1.CompareTo( x2 ) );\n      Show( &quot;UInt32:  &quot;, y1, y2, y1.CompareTo( y2 ), y1.CompareTo( y2 ) );\n      Show( &quot;UInt64:  &quot;, z1, z2, z1.CompareTo( z2 ), z1.CompareTo( z2 ) );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n}\n//     This example displays the following output:\n//     \n//     The following is the result of using the generic and non-generic versions of the\n//     CompareTo method for several base types:\n//     \n//     Boolean:  True is equal to True\n//     Byte:     1 is equal to 1\n//     Int16:    -2 is less than 2\n//     Int32:    3 is equal to 3\n//     Int64:    4 is greater than -4\n//     Decimal:  -5.5 is less than 5.5\n//     Single:   6.6 is equal to 6.6\n//     Double:   7.7 is greater than -7.7\n//     Char:     A is equal to A\n//     String:   abc is equal to abc\n//     DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n//     TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n//     Version:  1.2.333.4 is less than 2.0\n//     Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n//     aa0057b223\n//     \n//     The following types are not CLS-compliant:\n//     SByte:    8 is equal to 8\n//     UInt16:   9 is equal to 9\n//     UInt32:   10 is equal to 10\n//     UInt64:   11 is equal to 11\n</code></pre><pre><code class=\"lang-cs\" name=\"T.CompareTo#1\">// This example demonstrates the generic and non-generic versions of the \n// CompareTo method for several base types.\n// The non-generic version takes a parameter of type Object, while the generic\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string    nl = Environment.NewLine;\n    string    msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot; +\n                    &quot;versions of the CompareTo method for several base types:{0}&quot;;\n\n    DateTime  now = DateTime.Now;\n// Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); \n// Version = 1.2.333.4\n    Version   versX = new Version(&quot;1.2.333.4&quot;);  \n// Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n    Guid      guidX = new Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n\n    Boolean  a1 = true,  a2 = true;\n    Byte     b1 = 1,     b2 = 1;\n    Int16    c1 = -2,    c2 = 2;\n    Int32    d1 = 3,     d2 = 3;\n    Int64    e1 = 4,     e2 = -4;\n    Decimal  f1 = -5.5m, f2 = 5.5m;\n    Single   g1 = 6.6f,  g2 = 6.6f;\n    Double   h1 = 7.7d,  h2 = -7.7d;\n    Char     i1 = &#39;A&#39;,   i2 = &#39;A&#39;;\n    String   j1 = &quot;abc&quot;, j2 = &quot;abc&quot;;\n    DateTime k1 = now,   k2 = now;\n    TimeSpan l1 = tsX,   l2 = tsX;\n    Version  m1 = versX, m2 = new Version(&quot;2.0&quot;);\n    Guid     n1 = guidX, n2 = guidX;\n\n// The following types are not CLS-compliant.\n    SByte    w1 = 8,     w2 = 8;\n    UInt16   x1 = 9,     x2 = 9;\n    UInt32   y1 = 10,    y2 = 10;\n    UInt64   z1 = 11,    z2 = 11;\n//\n    Console.WriteLine(msg, nl);\n    try \n        {\n// The second and third Show method call parameters are automatically boxed because\n// the second and third Show method declaration arguments expect type Object.\n\n        Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));\n        Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));\n        Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));\n        Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));\n        Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));\n        Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));\n        Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));\n        Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));\n        Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));\n        Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));\n        Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));\n        Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));\n        Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));\n        Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));\n//\n        Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl);\n        Show(&quot;SByte:    &quot;, w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));\n        Show(&quot;UInt16:   &quot;, x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));\n        Show(&quot;UInt32:   &quot;, y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));\n        Show(&quot;UInt64:   &quot;, z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));\n        }\n    catch (Exception e)\n        {\n        Console.WriteLine(e);\n        }\n    }\n\n    public static void Show(string caption, Object var1, Object var2, \n                            int resultGeneric, int resultNonGeneric)\n    {\n    string relation;\n\n    Console.Write(caption);\n    if (resultGeneric == resultNonGeneric) \n        {\n        if      (resultGeneric &lt; 0) relation = &quot;less than&quot;;\n        else if (resultGeneric &gt; 0) relation = &quot;greater than&quot;;\n        else                        relation = &quot;equal to&quot;;\n        Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2);\n        }\n\n// The following condition will never occur because the generic and non-generic\n// CompareTo methods are equivalent.\n\n    else\n        {\n        Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, \n                           resultGeneric, resultNonGeneric);\n        }\n   }\n}\n/*\nThis example produces the following results:\n\nThe following is the result of using the generic and non-generic versions of the\nCompareTo method for several base types:\n\nBoolean:  True is equal to True\nByte:     1 is equal to 1\nInt16:    -2 is less than 2\nInt32:    3 is equal to 3\nInt64:    4 is greater than -4\nDecimal:  -5.5 is less than 5.5\nSingle:   6.6 is equal to 6.6\nDouble:   7.7 is greater than -7.7\nChar:     A is equal to A\nString:   abc is equal to abc\nDateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\nTimeSpan: 11.22:33:44 is equal to 11.22:33:44\nVersion:  1.2.333.4 is less than 2.0\nGuid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\naa0057b223\n\nThe following types are not CLS-compliant:\nSByte:    8 is equal to 8\nUInt16:   9 is equal to 9\nUInt32:   10 is equal to 10\nUInt64:   11 is equal to 11\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Byte_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified object and returns an indication of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative order of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is less than <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is greater than <code>value</code>.<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>value</code> must be <code>null</code> or an instance of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>; otherwise, an exception is thrown.  </p>\n<p> Any instance of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, regardless of its value, is considered greater than <code>null</code>.  </p>\n<p> This method is implemented to support the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the CompareTo method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte Examples#3\">public:\n   void Compare( Byte myByte )\n   {\n      Int32 myCompareResult;\n\n      myCompareResult = MemberByte.CompareTo( myByte );\n\n      if ( myCompareResult &gt; 0 )\n      {\n         Console::WriteLine(  &quot;{0} is less than the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString() );\n      }\n      else\n      {\n         if ( myCompareResult &lt; 0 )\n            Console::WriteLine(  &quot;{0} is greater than the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString() );\n         else\n            Console::WriteLine(  &quot;{0} is equal to the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString() );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte Examples#3\">      public void Compare(Byte myByte)\n      {\n         int myCompareResult;\n  \n         myCompareResult = MemberByte.CompareTo(myByte);\n\n         if(myCompareResult &gt; 0)\n         {\n            Console.WriteLine(&quot;{0} is less than the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString());\n         }\n         else if(myCompareResult &lt; 0)\n         {\n            Console.WriteLine(&quot;{0} is greater than the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString());\n         }\n         else\n         {\n            Console.WriteLine(&quot;{0} is equal to the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString());\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte Examples#3\">      Public Sub Compare(ByVal myByte As [Byte])\n         Dim myCompareResult As Integer\n\n         myCompareResult = MemberByte.CompareTo(myByte)\n\n         If myCompareResult &gt; 0 Then\n            Console.WriteLine(&quot;{0} is less than the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString())\n         Else\n            If myCompareResult &lt; 0 Then\n               Console.WriteLine(&quot;{0} is greater than the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString())\n            Else\n               Console.WriteLine(&quot;{0} is equal to the MemberByte value {1}&quot;, myByte.ToString(), MemberByte.ToString())\n            End If\n         End If\n      End Sub &#39;Compare \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_Equals_System_Byte_\">\r\n    \r\n            <a id=\"System_Byte_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance and a specified <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object represent the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (byte obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is equal to this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">System.IEquatable&lt;T&gt;</a> interface, and performs slightly better than <a class=\"xref\" href=\"system.byte#System_Byte_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a> because it does not have to convert the <code>obj</code> parameter to an object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the first <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value is equal to the second <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value, and whether the first <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value is equal to the boxed version of the second <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"system.byte.equals#1\">// This code example demonstrates the System.Byte.Equals(Object) and\n// System.Byte.Equals(Byte) methods.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    byte   byteVal1 = 0x7f;\n    byte   byteVal2 = 127;\n    object objectVal3 = byteVal2;\n//\n    Console.WriteLine(&quot;byteVal1 = {0}, byteVal2 = {1}, objectVal3 = {2}<br>&quot;,\n                       byteVal1, byteVal2, objectVal3);\n    Console.WriteLine(&quot;byteVal1 equals byteVal2?: {0}&quot;, byteVal1.Equals(byteVal2));\n    Console.WriteLine(&quot;byteVal1 equals objectVal3?: {0}&quot;, byteVal1.Equals(objectVal3));\n    }\n}\n\n/*\nThis code example produces the following results:\n\nbyteVal1 = 127, byteVal2 = 127, objectVal3 = 127\n\nbyteVal1 equals byteVal2?: True\nbyteVal1 equals objectVal3?: True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.byte.equals#1\">&#39; This code example demonstrates the System.Byte.Equals(Object) and\n&#39; System.Byte.Equals(Byte) methods.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim byteVal1 As Byte = &amp;H7F\n        Dim byteVal2 As Byte = 127\n        Dim objectVal3 As Object = byteVal2\n        &#39;\n        Console.WriteLine(&quot;byteVal1 = {0}, byteVal2 = {1}, objectVal3 = {2}&quot; &amp; vbCrLf, _\n                          byteVal1, byteVal2, objectVal3)\n        Console.WriteLine(&quot;byteVal1 equals byteVal2?: {0}&quot;, byteVal1.Equals(byteVal2))\n        Console.WriteLine(&quot;byteVal1 equals objectVal3?: {0}&quot;, byteVal1.Equals(objectVal3))\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;byteVal1 = 127, byteVal2 = 127, objectVal3 = 127\n&#39;\n&#39;byteVal1 equals byteVal2?: True\n&#39;byteVal1 equals objectVal3?: True\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"system.byte.equals#1\">using namespace System;\n\nvoid main()\n{\n    Byte   byteVal1 = 0x7f;\n    Byte   byteVal2 = 127;\n    Object^ objectVal3 = byteVal2;\n\n    Console::WriteLine(&quot;byteVal1 = {0}, byteVal2 = {1}, objectVal3 = {2}<br>&quot;,\n                       byteVal1, byteVal2, objectVal3);\n    Console::WriteLine(&quot;byteVal1 equals byteVal2?: {0}&quot;, byteVal1.Equals(byteVal2));\n    Console::WriteLine(&quot;byteVal1 equals objectVal3?: {0}&quot;, byteVal1.Equals(objectVal3));\n}\n/*\nThis example displays the following output:\n      byteVal1 = 127, byteVal2 = 127, objectVal3 = 127\n\n      byteVal1 equals byteVal2?: True\n      byteVal1 equals objectVal3?: True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Byte_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is an instance of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> and equals the value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether the first <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value is equal to the second <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value, and whether the first <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value is equal to the boxed version of the second <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"system.byte.equals#1\">// This code example demonstrates the System.Byte.Equals(Object) and\n// System.Byte.Equals(Byte) methods.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    byte   byteVal1 = 0x7f;\n    byte   byteVal2 = 127;\n    object objectVal3 = byteVal2;\n//\n    Console.WriteLine(&quot;byteVal1 = {0}, byteVal2 = {1}, objectVal3 = {2}<br>&quot;,\n                       byteVal1, byteVal2, objectVal3);\n    Console.WriteLine(&quot;byteVal1 equals byteVal2?: {0}&quot;, byteVal1.Equals(byteVal2));\n    Console.WriteLine(&quot;byteVal1 equals objectVal3?: {0}&quot;, byteVal1.Equals(objectVal3));\n    }\n}\n\n/*\nThis code example produces the following results:\n\nbyteVal1 = 127, byteVal2 = 127, objectVal3 = 127\n\nbyteVal1 equals byteVal2?: True\nbyteVal1 equals objectVal3?: True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.byte.equals#1\">&#39; This code example demonstrates the System.Byte.Equals(Object) and\n&#39; System.Byte.Equals(Byte) methods.\n\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim byteVal1 As Byte = &amp;H7F\n        Dim byteVal2 As Byte = 127\n        Dim objectVal3 As Object = byteVal2\n        &#39;\n        Console.WriteLine(&quot;byteVal1 = {0}, byteVal2 = {1}, objectVal3 = {2}&quot; &amp; vbCrLf, _\n                          byteVal1, byteVal2, objectVal3)\n        Console.WriteLine(&quot;byteVal1 equals byteVal2?: {0}&quot;, byteVal1.Equals(byteVal2))\n        Console.WriteLine(&quot;byteVal1 equals objectVal3?: {0}&quot;, byteVal1.Equals(objectVal3))\n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;byteVal1 = 127, byteVal2 = 127, objectVal3 = 127\n&#39;\n&#39;byteVal1 equals byteVal2?: True\n&#39;byteVal1 equals objectVal3?: True\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"system.byte.equals#1\">using namespace System;\n\nvoid main()\n{\n    Byte   byteVal1 = 0x7f;\n    Byte   byteVal2 = 127;\n    Object^ objectVal3 = byteVal2;\n\n    Console::WriteLine(&quot;byteVal1 = {0}, byteVal2 = {1}, objectVal3 = {2}<br>&quot;,\n                       byteVal1, byteVal2, objectVal3);\n    Console::WriteLine(&quot;byteVal1 equals byteVal2?: {0}&quot;, byteVal1.Equals(byteVal2));\n    Console::WriteLine(&quot;byteVal1 equals objectVal3?: {0}&quot;, byteVal1.Equals(objectVal3));\n}\n/*\nThis example displays the following output:\n      byteVal1 = 127, byteVal2 = 127, objectVal3 = 127\n\n      byteVal1 equals byteVal2?: True\n      byteVal1 equals objectVal3?: True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_GetHashCode\">\r\n    \r\n            <a id=\"System_Byte_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_GetTypeCode\">\r\n    \r\n            <a id=\"System_Byte_GetTypeCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeCode GetTypeCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </div>\r\n                  <p>The enumerated constant, <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Byte_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte Parse (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert. The string is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> style.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>A byte value that is equivalent to the number contained in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not of the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>s</code> parameter contains a number of the form:  </p>\n<p> [ws][sign]digits[ws]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional positive or negative sign.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. In addition to the byte value&#39;s decimal digits, only leading and trailing spaces together with a leading sign are allowed. (If the sign is present, it must be a positive sign or the method throws an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>.) To explicitly define the style elements that can be present in <code>s</code>, use either the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">System.Byte.Parse(String,NumberStyles)</a> or the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Byte.Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that is initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>. To parse a string using the formatting information of some other culture, use the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Byte.Parse(String,NumberStyles,IFormatProvider)</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to convert a string value into a byte value using the Parse method. The resulting byte value is then displayed to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte.Parse#1\">   String^ stringToConvert = &quot; 162&quot;;\n   Byte byteValue;\n   try\n   {\n      byteValue = Byte::Parse(stringToConvert);\n      Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue);\n   }   \n   catch (FormatException^)\n   {\n      Console::WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert);\n   }\n   catch (OverflowException^)\n   {\n      Console::WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, \n                        stringToConvert, Byte::MaxValue, Byte::MinValue);\n   }  \n   // The example displays the following output to the console:\n   //       Converted &#39; 162&#39; to 162.         \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.Parse#1\">      Dim stringToConvert As String = &quot; 162&quot;\n      Dim byteValue As Byte\n      Try\n         byteValue = Byte.Parse(stringToConvert)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, _\n                           stringToConvert, Byte.MaxValue, Byte.MinValue)\n      End Try  \n      &#39; The example displays the following output to the console:\n      &#39;       Converted &#39; 162&#39; to 162.         \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.Parse#1\">      string stringToConvert = &quot; 162&quot;;\n      byte byteValue;\n      try\n      {\n         byteValue = Byte.Parse(stringToConvert);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue);\n      }   \n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, \n                           stringToConvert, Byte.MaxValue, Byte.MinValue);\n      }  \n      // The example displays the following output to the console:\n      //       Converted &#39; 162&#39; to 162.         \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_Parse_System_String_System_Globalization_NumberStyles_\">\r\n    \r\n            <a id=\"System_Byte_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,NumberStyles)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte Parse (string s, System.Globalization.NumberStyles style);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert. The string is interpreted using the style specified by <code>style</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>A byte value that is equivalent to the number contained in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not of the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.  </p>\n<p> -or-  </p>\n<p> <code>s</code> includes non-zero, fractional digits.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is not a combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>style</code> parameter defines the style elements (such as white space or the positive sign) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. Depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p> [ws][$][sign]digits[.fractional_digits][e[sign]digits][ws]  </p>\n<p> Or, if <code>style</code> includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>:  </p>\n<p> [ws]hexdigits[ws]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, or at the end of s if style includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> property of the current culture. The current culture&#39;s currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional positive sign. (The method throws an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> if a negative sign is present in <code>s</code>.) The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, or at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits from 0 through 9.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The current culture&#39;s decimal point symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional_digits</em></td>\n<td>One or more occurrences of the digit 0. Fractional digits can appear in <code>s</code> only if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The e or E character, which indicates that the value is represented in exponential notation. The <code>s</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with decimal digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be but are not required to be present in this input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Non-composite NumberStyles values</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Decimal digits only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>.</em> and <em>fractional_digits</em> elements. However, <em>fractional_digits</em> must consist of only one or more 0 digits or an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A positive sign can appear before <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A positive sign can appear after <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Although this flag is supported, the use of parentheses in <code>s</code> results in an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Although the group separator symbol can appear in <code>s</code>, it can be preceded by only one or more 0 digits.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n</tbody>\n</table>\n<p> If the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag is used, <code>s</code> must be a hexadecimal value without a prefix. For example, &quot;F3&quot; parses successfully, but &quot;0xF3&quot; does not. The only other flags that can be combined with it are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration includes a composite number style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>, that includes both white space flags.)  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that is initialized for the current system culture. To use the formatting information of some other culture, call the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Byte.Parse(String,NumberStyles,IFormatProvider)</a> overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses string representations of <code>Byte</code> values with the Parse method. The current culture for the example is en-US.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte.Parse#3\">   String^ value;\n   NumberStyles style;\n   Byte number;\n\n   // Parse value with no styles allowed.\n   style = NumberStyles::None;\n   value = &quot; 241 &quot;;\n   try\n   {\n      number = Byte::Parse(value, style);\n      Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n   }\n   catch (FormatException^) {\n      Console::WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value); }   \n\n   // Parse value with trailing sign.\n   style = NumberStyles::Integer | NumberStyles::AllowTrailingSign;\n   value = &quot; 163+&quot;;\n   number = Byte::Parse(value, style);\n   Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n\n   // Parse value with leading sign.\n   value = &quot;   +253  &quot;;\n   number = Byte::Parse(value, style);\n   Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n   // This example displays the following output to the console:\n   //       Unable to parse &#39; 241 &#39;.\n   //       Converted &#39; 163+&#39; to 163.\n   //       Converted &#39;   +253  &#39; to 253.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.Parse#3\">      Dim value As String\n      Dim style As NumberStyles\n      Dim number As Byte\n      \n      &#39; Parse value with no styles allowed.\n      style = NumberStyles.None\n      value = &quot; 241 &quot;\n      Try\n         number = Byte.Parse(value, style)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)   \n      End Try\n        \n      &#39; Parse value with trailing sign.\n      style = NumberStyles.Integer Or NumberStyles.AllowTrailingSign\n      value = &quot; 163+&quot;\n      number = Byte.Parse(value, style)\n      Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      \n      &#39; Parse value with leading sign.\n      value = &quot;   +253  &quot;\n      number = Byte.Parse(value, style)\n      Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      &#39; This example displays the following output to the console:\n      &#39;       Unable to parse &#39; 241 &#39;.\n      &#39;       Converted &#39; 163+&#39; to 163.\n      &#39;       Converted &#39;   +253  &#39; to 253.            \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.Parse#3\">      string value;\n      NumberStyles style;\n      byte number;\n      \n      // Parse value with no styles allowed.\n      style = NumberStyles.None;\n      value = &quot; 241 &quot;;\n      try\n      {\n         number = Byte.Parse(value, style);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value); }   \n        \n      // Parse value with trailing sign.\n      style = NumberStyles.Integer | NumberStyles.AllowTrailingSign;\n      value = &quot; 163+&quot;;\n      number = Byte.Parse(value, style);\n      Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      \n      // Parse value with leading sign.\n      value = &quot;   +253  &quot;;\n      number = Byte.Parse(value, style);\n      Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      // This example displays the following output to the console:\n      //       Unable to parse &#39; 241 &#39;.\n      //       Converted &#39; 163+&#39; to 163.\n      //       Converted &#39;   +253  &#39; to 253.            \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_Parse_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified culture-specific format to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte Parse (string s, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert. The string is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> style.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific parsing information about <code>s</code>. If <code>provider</code> is <code>null</code>, the thread current culture is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>A byte value that is equivalent to the number contained in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not of the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>s</code> parameter contains a number of the form:  </p>\n<p> [ws][sign]digits[ws]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional positive sign.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> style. In addition to the byte value&#39;s decimal digits, only leading and trailing spaces together with a leading sign are allowed. (If the sign is present, it must be a positive sign or the method throws an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>.) To explicitly define the style elements together with the culture-specific formatting information that can be present in <code>s</code>, use the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Byte.Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object supplied by <code>provider</code>. The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation such as a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in parsing. If <code>provider</code> is <code>null</code>, the thread current culture is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses string representations of <code>Byte</code> values with the Parse method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte.Parse#2\">   String^ stringToConvert; \n   Byte byteValue;\n\n   stringToConvert = &quot; 214 &quot;;\n   try {\n      byteValue = Byte::Parse(stringToConvert, CultureInfo::InvariantCulture);\n      Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue);\n   }\n   catch (FormatException^) {\n      Console::WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert); }\n   catch (OverflowException^) {\n      Console::WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, \n                        stringToConvert, Byte::MaxValue, Byte::MinValue); }\n\n   stringToConvert = &quot; + 214 &quot;;\n   try {\n      byteValue = Byte::Parse(stringToConvert, CultureInfo::InvariantCulture);\n      Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue);\n   }\n   catch (FormatException^) {\n      Console::WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert); }\n   catch (OverflowException^) {\n      Console::WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, \n                        stringToConvert, Byte::MaxValue, Byte::MinValue); }\n\n   stringToConvert = &quot; +214 &quot;;\n   try {\n      byteValue = Byte::Parse(stringToConvert, CultureInfo::InvariantCulture);\n      Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue);\n   }\n   catch (FormatException^) {\n      Console::WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert); }\n   catch (OverflowException^) {\n      Console::WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, \n                        stringToConvert, Byte::MaxValue, Byte::MinValue); }\n   // The example displays the following output to the console:\n   //       Converted &#39; 214 &#39; to 214.\n   //       Unable to parse &#39; + 214 &#39;.\n   //       Converted &#39; +214 &#39; to 214.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.Parse#2\">      Dim stringToConvert As String \n      Dim byteValue As Byte\n      \n      stringToConvert = &quot; 214 &quot;\n      Try\n         byteValue = Byte.Parse(stringToConvert, CultureInfo.InvariantCulture)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, _\n                           stringToConvert, Byte.MaxValue, Byte.MinValue)\n      End Try  \n      \n      stringToConvert = &quot; + 214 &quot;\n      Try\n         byteValue = Byte.Parse(stringToConvert, CultureInfo.InvariantCulture)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, _\n                           stringToConvert, Byte.MaxValue, Byte.MinValue)\n      End Try  \n      \n      stringToConvert = &quot; +214 &quot;\n      Try\n         byteValue = Byte.Parse(stringToConvert, CultureInfo.InvariantCulture)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, _\n                           stringToConvert, Byte.MaxValue, Byte.MinValue)\n      End Try\n      &#39; The example displays the following output to the console:\n      &#39;       Converted &#39; 214 &#39; to 214.\n      &#39;       Unable to parse &#39; + 214 &#39;.\n      &#39;       Converted &#39; +214 &#39; to 214.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.Parse#2\">      string stringToConvert; \n      byte byteValue;\n      \n      stringToConvert = &quot; 214 &quot;;\n      try {\n         byteValue = Byte.Parse(stringToConvert, CultureInfo.InvariantCulture);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert); }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, \n                           stringToConvert, Byte.MaxValue, Byte.MinValue); }\n      \n      stringToConvert = &quot; + 214 &quot;;\n      try {\n         byteValue = Byte.Parse(stringToConvert, CultureInfo.InvariantCulture);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert); }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, \n                           stringToConvert, Byte.MaxValue, Byte.MinValue); }\n      \n      stringToConvert = &quot; +214 &quot;;\n      try {\n         byteValue = Byte.Parse(stringToConvert, CultureInfo.InvariantCulture);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, stringToConvert, byteValue);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, stringToConvert); }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is greater than {1} or less than {2}.&quot;, \n                           stringToConvert, Byte.MaxValue, Byte.MinValue); }\n      // The example displays the following output to the console:\n      //       Converted &#39; 214 &#39; to 214.\n      //       Unable to parse &#39; + 214 &#39;.\n      //       Converted &#39; +214 &#39; to 214.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,NumberStyles,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert. The string is interpreted using the style specified by <code>style</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific information about the format of <code>s</code>. If <code>provider</code> is <code>null</code>, the thread current culture is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>A byte value that is equivalent to the number contained in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not of the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.  </p>\n<p> -or-  </p>\n<p> <code>s</code> includes non-zero, fractional digits.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is not a combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>style</code> parameter defines the style elements (such as white space or the positive sign) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. Depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p> [ws][$][sign]digits[.fractional_digits][e[sign]digits][ws]  </p>\n<p> Or, if the <code>style</code> parameter includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>:  </p>\n<p> [ws]hexdigits[ws]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, or at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> property of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of the <code>provider</code> parameter. The currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional positive sign. (The method throws an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> if a negative sign is present in <code>s</code>.) The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, or at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits from 0 through 9.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The decimal point symbol of the culture specified by <code>provider</code> can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional_digits</em></td>\n<td>One or more occurrences of the digit 0. Fractional digits can appear in <code>s</code> only if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The e or E character, which indicates that the value is represented in exponential notation. The s parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with decimal digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be but are not required to be present in this input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Non-composite NumberStyles values</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Decimal digits only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>.</em> and <em>fractional_digits</em> elements. However, <em>fractional_digits</em> must consist of only one or more 0 digits or an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A positive sign can appear before <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A positive sign can appear after <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Although this flag is supported, the use of parentheses in <code>s</code> results in an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Although the group separator symbol can appear in <code>s</code>, it can be preceded by only one or more 0 digits.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n</tbody>\n</table>\n<p> If the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag is used, <code>s</code> must be a hexadecimal value without a prefix. For example, &quot;F3&quot; parses successfully, but &quot;0xF3&quot; does not. The only other flags that can be present in <code>style</code> are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration has a composite number style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>, that includes both white space flags.)  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation, such as a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in parsing. If <code>provider</code> is <code>null</code>, the thread current culture is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example parses string representations of <code>Byte</code> values with this overload of the Parse method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte.Parse#4\">   NumberStyles style;\n   CultureInfo^ culture;\n   String^ value;\n   Byte number;\n\n   // Parse number with decimals.\n   // NumberStyles.Float includes NumberStyles.AllowDecimalPoint.\n   style = NumberStyles::Float;     \n   culture = CultureInfo::CreateSpecificCulture(&quot;fr-FR&quot;);\n   value = &quot;12,000&quot;;\n\n   number = Byte::Parse(value, style, culture);\n   Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n\n   culture = CultureInfo::CreateSpecificCulture(&quot;en-GB&quot;);\n   try\n   {\n      number = Byte::Parse(value, style, culture);\n      Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n   }\n   catch (FormatException^) {\n      Console::WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value); }   \n\n   value = &quot;12.000&quot;;\n   number = Byte::Parse(value, style, culture);\n   Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n   // The example displays the following output to the console:\n   //       Converted &#39;12,000&#39; to 12.\n   //       Unable to parse &#39;12,000&#39;.\n   //       Converted &#39;12.000&#39; to 12.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.Parse#4\">      Dim style As NumberStyles\n      Dim culture As CultureInfo\n      Dim value As String\n      Dim number As Byte\n      \n      &#39; Parse number with decimals.\n      &#39; NumberStyles.Float includes NumberStyles.AllowDecimalPoint.\n      style = NumberStyles.Float       \n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      value = &quot;12,000&quot;\n\n      number = Byte.Parse(value, style, culture)\n      Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)\n      Try\n         number = Byte.Parse(value, style, culture)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)   \n      End Try      \n\n      value = &quot;12.000&quot;\n      number = Byte.Parse(value, style, culture)\n      Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      &#39; The example displays the following output to the console:\n      &#39;       Converted &#39;12,000&#39; to 12.\n      &#39;       Unable to parse &#39;12,000&#39;.\n      &#39;       Converted &#39;12.000&#39; to 12.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.Parse#4\">      NumberStyles style;\n      CultureInfo culture;\n      string value;\n      byte number;\n      \n      // Parse number with decimals.\n      // NumberStyles.Float includes NumberStyles.AllowDecimalPoint.\n      style = NumberStyles.Float;     \n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      value = &quot;12,000&quot;;\n\n      number = Byte.Parse(value, style, culture);\n      Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;);\n      try\n      {\n         number = Byte.Parse(value, style, culture);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value); }   \n\n      value = &quot;12.000&quot;;\n      number = Byte.Parse(value, style, culture);\n      Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      // The example displays the following output to the console:\n      //       Converted &#39;12,000&#39; to 12.\n      //       Unable to parse &#39;12,000&#39;.\n      //       Converted &#39;12.000&#39; to 12.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_ToString\">\r\n    \r\n            <a id=\"System_Byte_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is formatted with the general numeric format specifier (&quot;G&quot;) and the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the thread current culture. To define the formatting of the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value&#39;s string representation, call the <a class=\"xref\" href=\"system.byte#System_Byte_ToString_\" data-linktype=\"relative-path\">ToString</a> method. To define both the format specifiers and culture used to create the string representation of a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value, call the <a class=\"xref\" href=\"system.byte#System_Byte_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>For information about the thread current culture, see <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays an array of byte values. Note that the ToString method is not called explicitly in the example. Instead, it is called implicitly, because of the use of the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting</a> feature.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte.ToString#2\">   array&lt;Byte&gt;^ bytes = gcnew array&lt;Byte&gt; {0, 1, 14, 168, 255};\n   for each (Byte byteValue in bytes)\n      Console::WriteLine(byteValue);\n   // The example displays the following output to the console if the current\n   // culture is en-US:\n   //       0\n   //       1\n   //       14\n   //       168\n   //       255\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.ToString#2\">      byte[] bytes = {0, 1, 14, 168, 255};\n      foreach (byte byteValue in bytes)\n         Console.WriteLine(byteValue);\n      // The example displays the following output to the console if the current\n      // culture is en-US:\n      //       0\n      //       1\n      //       14\n      //       168\n      //       255\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.ToString#2\">      Dim bytes() As Byte = {0, 1, 14, 168, 255}\n      For Each byteValue As Byte In Bytes\n         Console.WriteLine(byteValue)\n      Next   \n      &#39; The example displays the following output to the console if the current\n      &#39; culture is en-US:\n      &#39;       0\n      &#39;       1\n      &#39;       14\n      &#39;       168\n      &#39;       255      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object to its equivalent string representation using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this object in the format specified by the <code>provider</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is formatted with the general numeric format specifier (&quot;G&quot;).  </p>\n<p> The <code>provider</code> parameter is an object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of the string that is returned by this method. The object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting rules are to be used.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that contains specific numeric formatting information for this value.  </p>\n</li>\n<li><p>A custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>.  </p>\n<p>If <code>provider</code> is <code>null</code> or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object cannot be obtained from <code>provider</code>, the return value is formatted using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the thread current culture. For information about the thread current culture, see <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a>.  </p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example iterates an array of byte values and displays each of them to the console by calling the ToString method with different format providers.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte.ToString#3\">   array&lt;Byte&gt;^ bytes = gcnew array&lt;Byte&gt; {0, 1, 14, 168, 255};\n   array&lt;CultureInfo^&gt;^ providers = {gcnew CultureInfo(&quot;en-us&quot;), \n                                     gcnew CultureInfo(&quot;fr-fr&quot;), \n                                     gcnew CultureInfo(&quot;de-de&quot;), \n                                     gcnew CultureInfo(&quot;es-es&quot;)};\n   for each (Byte byteValue in bytes)\n   {\n      for each (CultureInfo^ provider in providers)\n         Console::Write(&quot;{0,3} ({1})      &quot;, \n                       byteValue.ToString(provider), provider-&gt;Name);\n\n      Console::WriteLine();                                        \n   }\n   // The example displays the following output to the console:\n   //      0 (en-US)        0 (fr-FR)        0 (de-DE)        0 (es-ES)\n   //      1 (en-US)        1 (fr-FR)        1 (de-DE)        1 (es-ES)\n   //     14 (en-US)       14 (fr-FR)       14 (de-DE)       14 (es-ES)\n   //    168 (en-US)      168 (fr-FR)      168 (de-DE)      168 (es-ES)\n   //    255 (en-US)      255 (fr-FR)      255 (de-DE)      255 (es-ES)            \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.ToString#3\">      byte[] bytes = {0, 1, 14, 168, 255};\n      CultureInfo[] providers = {new CultureInfo(&quot;en-us&quot;), \n                                 new CultureInfo(&quot;fr-fr&quot;), \n                                 new CultureInfo(&quot;de-de&quot;), \n                                 new CultureInfo(&quot;es-es&quot;)};\n      foreach (byte byteValue in bytes)\n      {\n         foreach (CultureInfo provider in providers)\n            Console.Write(&quot;{0,3} ({1})      &quot;, \n                          byteValue.ToString(provider), provider.Name);\n\n         Console.WriteLine();                                        \n      }\n      // The example displays the following output to the console:\n      //      0 (en-US)        0 (fr-FR)        0 (de-DE)        0 (es-ES)\n      //      1 (en-US)        1 (fr-FR)        1 (de-DE)        1 (es-ES)\n      //     14 (en-US)       14 (fr-FR)       14 (de-DE)       14 (es-ES)\n      //    168 (en-US)      168 (fr-FR)      168 (de-DE)      168 (es-ES)\n      //    255 (en-US)      255 (fr-FR)      255 (de-DE)      255 (es-ES)            \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.ToString#3\">      Dim bytes() As Byte = {0, 1, 14, 168, 255}\n      Dim providers() As CultureInfo = {New CultureInfo(&quot;en-us&quot;), _\n                                        New CultureInfo(&quot;fr-fr&quot;), _\n                                        New CultureInfo(&quot;de-de&quot;), _\n                                        New CultureInfo(&quot;es-es&quot;)}\n      For Each byteValue As Byte In bytes\n         For Each provider As CultureInfo In providers\n            Console.Write(&quot;{0,3} ({1})      &quot;, byteValue.ToString(provider), provider.Name)\n         Next\n         Console.WriteLine()                                        \n      Next\n      &#39; The example displays the following output to the console:\n      &#39;      0 (en-US)        0 (fr-FR)        0 (de-DE)        0 (es-ES)\n      &#39;      1 (en-US)        1 (fr-FR)        1 (de-DE)        1 (es-ES)\n      &#39;     14 (en-US)       14 (fr-FR)       14 (de-DE)       14 (es-ES)\n      &#39;    168 (en-US)      168 (fr-FR)      168 (de-DE)      168 (es-ES)\n      &#39;    255 (en-US)      255 (fr-FR)      255 (de-DE)      255 (es-ES)            \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_ToString_System_String_\">\r\n    \r\n            <a id=\"System_Byte_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object to its equivalent string representation using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A numeric format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object, formatted as specified by the <code>format</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>format</code> parameter can be either a standard or a custom numeric format string. All standard numeric format strings other than &quot;R&quot; (or &quot;r&quot;) are supported, as are all custom numeric format characters. If <code>format</code> is <code>null</code> or an empty string (&quot;&quot;), the return value is formatted with the general numeric format specifier (&quot;G&quot;).  </p>\n<p> The return value of this function is formatted using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the thread current culture. For information about the thread current culture, see <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a>. To provide formatting information for cultures other than the current culture, call the <a class=\"xref\" href=\"system.byte#System_Byte_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Byte.ToString(String,IFormatProvider)</a> method.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example initializes a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value and displays it to the console using each of the supported standard format strings and a custom format string. The example is run with en-US as the current culture.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte.ToString#4\">   array&lt;String^&gt;^ formats = gcnew array&lt;String^&gt; {&quot;C3&quot;, &quot;D4&quot;, &quot;e1&quot;, &quot;E2&quot;, &quot;F1&quot;, &quot;G&quot;, &quot;N1&quot;, \n                                                   &quot;P0&quot;, &quot;X4&quot;, &quot;0000.0000&quot;};\n   Byte number = 240;\n   for each (String^ format in formats)\n      Console::WriteLine(&quot;&#39;{0}&#39; format specifier: {1}&quot;, \n                        format, number.ToString(format));\n\n   // The example displays the following output to the console if the\n   // current culture is en-us:\n   //       &#39;C3&#39; format specifier: $240.000\n   //       &#39;D4&#39; format specifier: 0240\n   //       &#39;e1&#39; format specifier: 2.4e+002\n   //       &#39;E2&#39; format specifier: 2.40E+002\n   //       &#39;F1&#39; format specifier: 240.0\n   //       &#39;G&#39; format specifier: 240\n   //       &#39;N1&#39; format specifier: 240.0\n   //       &#39;P0&#39; format specifier: 24,000 %\n   //       &#39;X4&#39; format specifier: 00F0\n   //       &#39;0000.0000&#39; format specifier: 0240.0000           \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.ToString#4\">      string[] formats = {&quot;C3&quot;, &quot;D4&quot;, &quot;e1&quot;, &quot;E2&quot;, &quot;F1&quot;, &quot;G&quot;, &quot;N1&quot;, \n                          &quot;P0&quot;, &quot;X4&quot;, &quot;0000.0000&quot;};\n      byte number = 240;\n      foreach (string format in formats)\n         Console.WriteLine(&quot;&#39;{0}&#39; format specifier: {1}&quot;, \n                           format, number.ToString(format));\n\n      // The example displays the following output to the console if the\n      // current culture is en-us:\n      //       &#39;C3&#39; format specifier: $240.000\n      //       &#39;D4&#39; format specifier: 0240\n      //       &#39;e1&#39; format specifier: 2.4e+002\n      //       &#39;E2&#39; format specifier: 2.40E+002\n      //       &#39;F1&#39; format specifier: 240.0\n      //       &#39;G&#39; format specifier: 240\n      //       &#39;N1&#39; format specifier: 240.0\n      //       &#39;P0&#39; format specifier: 24,000 %\n      //       &#39;X4&#39; format specifier: 00F0\n      //       &#39;0000.0000&#39; format specifier: 0240.0000           \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.ToString#4\">      Dim formats() As String = {&quot;C3&quot;, &quot;D4&quot;, &quot;e1&quot;, &quot;E2&quot;, &quot;F1&quot;, &quot;G&quot;, _\n                                 &quot;N1&quot;, &quot;P0&quot;, &quot;X4&quot;, &quot;0000.0000&quot;}\n      Dim number As Byte = 240\n      For Each format As String In formats\n         Console.WriteLine(&quot;&#39;{0}&#39; format specifier: {1}&quot;, _\n                           format, number.ToString(format))\n      Next  \n      &#39; The example displays the following output to the console if the\n      &#39; current culture is en-us:\n      &#39;       &#39;C3&#39; format specifier: $240.000\n      &#39;       &#39;D4&#39; format specifier: 0240\n      &#39;       &#39;e1&#39; format specifier: 2.4e+002\n      &#39;       &#39;E2&#39; format specifier: 2.40E+002\n      &#39;       &#39;F1&#39; format specifier: 240.0       \n      &#39;       &#39;G&#39; format specifier: 240\n      &#39;       &#39;N1&#39; format specifier: 240.0\n      &#39;       &#39;P0&#39; format specifier: 24,000 %\n      &#39;       &#39;X4&#39; format specifier: 00F0\n      &#39;       &#39;0000.0000&#39; format specifier: 0240.0000           \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object to its equivalent string representation using the specified format and culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom numeric format string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object, formatted as specified by the <code>format</code> and <code>provider</code> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value in a specified format of a specified culture. To format a number by using the default (&quot;G&quot;) format of the current culture, call the <a class=\"xref\" href=\"system.byte#System_Byte_ToString\" data-linktype=\"relative-path\">ToString()</a> method. To format a number by using a specified format of the current culture, call the <a class=\"xref\" href=\"system.byte#System_Byte_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a> method.  </p>\n<p> The <code>format</code> parameter can be either a standard or a custom numeric format string. All standard numeric format strings other than &quot;R&quot; (or &quot;r&quot;) are supported, as are all custom numeric format characters. If <code>format</code> is <code>null</code> or an empty string (&quot;&quot;), the return value of this method is formatted with the general numeric format specifier (&quot;G&quot;).  </p>\n<p> The <code>provider</code> parameter is an object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of the string that is returned by this method. The object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting rules are to be used.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that contains specific numeric formatting information for this value.  </p>\n</li>\n<li><p>A custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>.  </p>\n<p>If <code>provider</code> is <code>null</code> or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object cannot be obtained from <code>provider</code>, the return value is formatted using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the thread current culture. For information about the thread current culture, see <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a>.  </p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the standard &quot;N&quot; format string and four different <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects to display the string representation of a byte value to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Byte.ToString#5\">   Byte byteValue = 250;\n   array&lt;CultureInfo^&gt;^ providers = gcnew array&lt;CultureInfo^&gt; { gcnew CultureInfo(&quot;en-us&quot;), \n                                                                gcnew CultureInfo(&quot;fr-fr&quot;), \n                                                                gcnew CultureInfo(&quot;es-es&quot;), \n                                                                gcnew CultureInfo(&quot;de-de&quot;)}; \n\n   for each (CultureInfo^ provider in providers) \n      Console::WriteLine(&quot;{0} ({1})&quot;, \n                        byteValue.ToString(&quot;N2&quot;, provider), provider-&gt;Name);\n   // The example displays the following output to the console:\n   //       250.00 (en-US)\n   //       250,00 (fr-FR)\n   //       250,00 (es-ES)\n   //       250,00 (de-DE)  \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Byte.ToString#5\">      byte byteValue = 250;\n      CultureInfo[] providers = {new CultureInfo(&quot;en-us&quot;), \n                                 new CultureInfo(&quot;fr-fr&quot;), \n                                 new CultureInfo(&quot;es-es&quot;), \n                                 new CultureInfo(&quot;de-de&quot;)}; \n      \n      foreach (CultureInfo provider in providers) \n         Console.WriteLine(&quot;{0} ({1})&quot;, \n                           byteValue.ToString(&quot;N2&quot;, provider), provider.Name);\n      // The example displays the following output to the console:\n      //       250.00 (en-US)\n      //       250,00 (fr-FR)\n      //       250,00 (es-ES)\n      //       250,00 (de-DE)      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.ToString#5\">      Dim byteValue As Byte = 250\n      Dim providers() As CultureInfo = {New CultureInfo(&quot;en-us&quot;), _\n                                        New CultureInfo(&quot;fr-fr&quot;), _\n                                        New CultureInfo(&quot;es-es&quot;), _\n                                        New CultureInfo(&quot;de-de&quot;)} \n      For Each provider As CultureInfo In providers \n         Console.WriteLine(&quot;{0} ({1})&quot;, _\n                           byteValue.ToString(&quot;N2&quot;, provider), provider.Name)\n      Next   \n      &#39; The example displays the following output to the console:\n      &#39;       250.00 (en-US)\n      &#39;       250,00 (fr-FR)\n      &#39;       250,00 (es-ES)\n      &#39;       250,00 (de-DE)      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_TryParse_System_String_System_Byte__\">\r\n    \r\n            <a id=\"System_Byte_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to convert the string representation of a number to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, out byte result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert. The string is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> style.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value equivalent to the number contained in <code>s</code> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized; any value originally supplied in <code>result</code> will be overwritten.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The conversion fails and the method returns <code>false</code> if the <code>s</code> parameter is not in the correct format, if it is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, or if it represents a number less than <a class=\"xref\" href=\"system.byte#System_Byte_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.byte#System_Byte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> The TryParse method is similar to the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_\" data-linktype=\"relative-path\">System.Byte.Parse(String)</a> method, except that TryParse does not throw an exception if the conversion fails.  </p>\n<p> The <code>s</code> parameter should be the string representation of a number in the following form:  </p>\n<pre><code>[ws][sign]digits[ws]  \n</code></pre><p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional positive sign, as specified by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveSign_\" data-linktype=\"relative-path\">PositiveSign</a> property of the current culture.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of decimal digits that range from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> style. In addition to the byte value&#39;s decimal digits, only leading and trailing spaces together with a leading sign are allowed. (If the sign is present, it must be a positive sign or the method throws an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>.) To explicitly define the style elements together with the culture-specific formatting information that can be present in <code>s</code>, use the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Byte.Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>.  </p>\n<p> This overload of the TryParse method interprets all digits in the <code>s</code> parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <a class=\"xref\" href=\"system.byte#System_Byte_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Byte__\" data-linktype=\"relative-path\">System.Byte.TryParse(String,NumberStyles,IFormatProvider,Byte)</a> overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the TryParse method with a number of different string values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Byte.TryParse#1\">using System;\n\npublic class ByteConversion\n{\n   public static void Main()\n   {\n      string byteString = null;\n      CallTryParse(byteString);\n      \n      byteString = String.Empty;\n      CallTryParse(byteString);\n      \n      byteString = &quot;1024&quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;100.1&quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;100&quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;+100&quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;-100&quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;000000000000000100&quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;00,100&quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;   20   &quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;FF&quot;;\n      CallTryParse(byteString);\n      \n      byteString = &quot;0x1F&quot;;\n      CallTryParse(byteString);\n   }\n\n   private static void CallTryParse(string stringToConvert)\n   {  \n      byte byteValue; \n      bool result = Byte.TryParse(stringToConvert, out byteValue);\n      if (result)\n      {\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, \n                        stringToConvert, byteValue);\n      }\n      else\n      {\n         if (stringToConvert == null) stringToConvert = &quot;&quot;;\n         Console.WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, \n                           stringToConvert.ToString());\n      }\n   }    \n}\n// The example displays the following output to the console:\n//       Attempted conversion of &#39;&#39; failed.\n//       Attempted conversion of &#39;&#39; failed.\n//       Attempted conversion of &#39;1024&#39; failed.\n//       Attempted conversion of &#39;100.1&#39; failed.\n//       Converted &#39;100&#39; to 100\n//       Converted &#39;+100&#39; to 100\n//       Attempted conversion of &#39;-100&#39; failed.\n//       Converted &#39;000000000000000100&#39; to 100\n//       Attempted conversion of &#39;00,100&#39; failed.\n//       Converted &#39;   20   &#39; to 20\n//       Attempted conversion of &#39;FF&#39; failed.\n//       Attempted conversion of &#39;0x1F&#39; failed.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Byte.TryParse#1\">using namespace System;\n\nvoid main()\n{\n   array&lt;String^&gt;^ byteStrings = gcnew array&lt;String^&gt; { nullptr, String::Empty, \n                                                        &quot;1024&quot;, &quot;100.1&quot;, &quot;100&quot;, \n                                                        &quot;+100&quot;, &quot;-100&quot;, &quot;000000000000000100&quot;, \n                                                        &quot;00,100&quot;, &quot;   20   &quot;, &quot;FF&quot;, &quot;0x1F&quot; };\n   Byte byteValue;\n   for each (String^ byteString in byteStrings) {\n      bool result = Byte::TryParse(byteString, byteValue);\n      if (result)\n         Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, \n                            byteString, byteValue);\n      else\n         Console::WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, \n                            byteString);\n   }\n}\n// The example displays the following output:\n//       Attempted conversion of &#39;&#39; failed.\n//       Attempted conversion of &#39;&#39; failed.`\n//       Attempted conversion of &#39;1024&#39; failed.\n//       Attempted conversion of &#39;100.1&#39; failed.\n//       Converted &#39;100&#39; to 100\n//       Converted &#39;+100&#39; to 100\n//       Attempted conversion of &#39;-100&#39; failed.\n//       Converted &#39;000000000000000100&#39; to 100\n//       Attempted conversion of &#39;00,100&#39; failed.\n//       Converted &#39;   20   &#39; to 20\n//       Attempted conversion of &#39;FF&#39; failed.\n//       Attempted conversion of &#39;0x1F&#39; failed.}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.TryParse#1\">Module ByteConversion\n   Public Sub Main()\n      Dim byteString As String = Nothing\n      CallTryParse(byteString)\n      \n      byteString = String.Empty\n      CallTryParse(byteString)\n      \n      byteString = &quot;1024&quot;\n      CallTryParse(byteString)\n      \n      byteString = &quot;100.1&quot;\n      CallTryParse(byteString)\n      \n      byteString = &quot;100&quot;\n      CallTryParse(byteString)\n      \n      byteString = &quot;+100&quot;\n      CallTryParse(byteString)\n      \n      byteString = &quot;-100&quot;\n      CallTryParse(byteString)\n      \n      byteString = &quot;000000000000000100&quot;\n      CallTryParse(byteString)\n      \n      byteString = &quot;00,100&quot;      \n      CallTryParse(byteString)\n      \n      byteString = &quot;   20   &quot;\n      CallTryParse(byteString)\n      \n      byteString = &quot;FF&quot;\n      CallTryParse(byteString)\n      \n      byteString = &quot;0x1F&quot;\n      CallTryParse(byteString)\n   End Sub\n   \n   Private Sub CallTryParse(stringToConvert As String)  \n      Dim byteValue As Byte\n      Dim result As Boolean = Byte.TryParse(stringToConvert, byteValue)\n      If result Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, _\n                        stringToConvert, byteValue)\n      Else\n         If stringToConvert Is Nothing Then stringToConvert = &quot;&quot;\n         Console.WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, _\n                           stringToConvert.ToString())\n      End If                        \n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Attempted conversion of &#39;&#39; failed.\n&#39;       Attempted conversion of &#39;&#39; failed.\n&#39;       Attempted conversion of &#39;1024&#39; failed.\n&#39;       Attempted conversion of &#39;100.1&#39; failed.\n&#39;       Converted &#39;100&#39; to 100\n&#39;       Converted &#39;+100&#39; to 100\n&#39;       Attempted conversion of &#39;-100&#39; failed.\n&#39;       Converted &#39;000000000000000100&#39; to 100\n&#39;       Attempted conversion of &#39;00,100&#39; failed.\n&#39;       Converted &#39;   20   &#39; to 20\n&#39;       Attempted conversion of &#39;FF&#39; failed.\n&#39;       Attempted conversion of &#39;0x1F&#39; failed.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Byte__\">\r\n    \r\n            <a id=\"System_Byte_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,NumberStyles,IFormatProvider,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out byte result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing a number to convert. The string is interpreted using the style specified by <code>style</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information about <code>s</code>. If <code>provider</code> is <code>null</code>, the thread current culture is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the 8-bit unsigned integer value equivalent to the number contained in <code>s</code> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <code>s</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, is not of the correct format, or represents a number less than <a class=\"xref\" href=\"system.byte#System_Byte_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.byte#System_Byte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>. This parameter is passed uninitialized; any value originally supplied in <code>result</code> will be overwritten.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is not a combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.byte#System_Byte_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method is like the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_\" data-linktype=\"relative-path\">Parse</a> method, except the TryParse method does not throw an exception if the conversion fails.  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object supplied by the <code>provider</code> parameter.  </p>\n<p> The style parameter defines the style elements (such as white space or the positive sign) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. Depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p> [ws][$][sign]digits[.fractional_digits][e[sign]digits][ws]  </p>\n<p> Or, if the <code>style</code> parameter includes <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>:  </p>\n<p> [ws]hexdigits[ws]  </p>\n<p> Elements in square brackets ( [ and ] ) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, or at the end of s if style includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> property of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of the <code>provider</code> parameter. The currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional positive sign. (The parse operation fails if a negative sign is present in <code>s</code>.) The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, or at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits from 0 through 9.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The decimal point symbol of the culture specified by <code>provider</code> can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional_digits</em></td>\n<td>One or more occurrences of the digit 0. Fractional digits can appear in <code>s</code> only if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The e or E character, which indicates that the value is represented in exponential notation. The <code>s</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>hexdigits</em></td>\n<td>A sequence of hexadecimal digits from 0 through f, or 0 through F.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with decimal digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. Most of the remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be but are not required to be present in this input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Non-composite NumberStyles values</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Decimal digits only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>.</em> and <em>fractional_digits</em> elements. However, <em>fractional_digits</em> must consist of only one or more 0 digits or the method returns <code>false</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation. If <code>s</code> represents a number in exponential notation, it must represent an integer within the range of the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> data type without a non-zero, fractional component.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A positive sign can appear before <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>A positive sign can appear after <em>digits</em>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Although this flag is supported, the method returns <code>false</code> if parentheses are present in <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>Although the group separator symbol can appear in <code>s</code>, it can be preceded by only one or more 0 digits.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n</tbody>\n</table>\n<p> If the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag is used, <code>s</code> must be a hexadecimal value without a prefix. For example, &quot;F3&quot; parses successfully, but &quot;0xF3&quot; does not. The only other flags that can be present in <code>style</code> are <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>. (The <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration has a composite number style, <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>, that includes both white space flags.)  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation, such as a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object, whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>s</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the TryParse method with a number of different string values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Byte.TryParse#2\">using System;\nusing System.Globalization;\n\npublic class ByteConversion2\n{\n   public static void Main()\n   {\n      string byteString; \n      NumberStyles styles;\n      \n      byteString = &quot;1024&quot;;\n      styles = NumberStyles.Integer;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;100.1&quot;;\n      styles = NumberStyles.Integer | NumberStyles.AllowDecimalPoint;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;100.0&quot;;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;+100&quot;;\n      styles = NumberStyles.Integer | NumberStyles.AllowLeadingSign \n               | NumberStyles.AllowTrailingSign;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;-100&quot;;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;000000000000000100&quot;;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;00,100&quot;;\n      styles = NumberStyles.Integer | NumberStyles.AllowThousands;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;2E+3   &quot;;\n      styles = NumberStyles.Integer | NumberStyles.AllowExponent;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;FF&quot;;\n      styles = NumberStyles.HexNumber;\n      CallTryParse(byteString, styles);\n      \n      byteString = &quot;0x1F&quot;;\n      CallTryParse(byteString, styles);\n   }\n\n   private static void CallTryParse(string stringToConvert, NumberStyles styles)\n   {  \n      Byte byteValue;\n      bool result = Byte.TryParse(stringToConvert, styles, \n                                  null as IFormatProvider, out byteValue);\n      if (result)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, \n                        stringToConvert, byteValue);\n      else\n         Console.WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, \n                           stringToConvert.ToString());\n   }\n}\n// The example displays the following output to the console:\n//       Attempted conversion of &#39;1024&#39; failed.\n//       Attempted conversion of &#39;100.1&#39; failed.\n//       Converted &#39;100.0&#39; to 100\n//       Converted &#39;+100&#39; to 100\n//       Attempted conversion of &#39;-100&#39; failed.\n//       Converted &#39;000000000000000100&#39; to 100\n//       Converted &#39;00,100&#39; to 100\n//       Attempted conversion of &#39;2E+3   &#39; failed.\n//       Converted &#39;FF&#39; to 255\n//       Attempted conversion of &#39;0x1F&#39; failed.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Byte.TryParse#2\">using namespace System;\nusing namespace System::Globalization;\n\nvoid CallTryParse(String^ byteString, NumberStyles styles);\n\nvoid main()\n{\n   String^ byteString; \n   NumberStyles styles;\n\n   byteString = &quot;1024&quot;;\n   styles = NumberStyles::Integer;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;100.1&quot;;\n   styles = NumberStyles::Integer | NumberStyles::AllowDecimalPoint;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;100.0&quot;;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;+100&quot;;\n   styles = NumberStyles::Integer | NumberStyles::AllowLeadingSign \n            | NumberStyles::AllowTrailingSign;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;-100&quot;;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;000000000000000100&quot;;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;00,100&quot;;\n   styles = NumberStyles::Integer | NumberStyles::AllowThousands;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;2E+3   &quot;;\n   styles = NumberStyles::Integer | NumberStyles::AllowExponent;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;FF&quot;;\n   styles = NumberStyles::HexNumber;\n   CallTryParse(byteString, styles);\n\n   byteString = &quot;0x1F&quot;;\n   CallTryParse(byteString, styles);\n}\n\nvoid CallTryParse(String^ stringToConvert, NumberStyles styles)\n{  \n   Byte byteValue;\n   bool result = Byte::TryParse(stringToConvert, styles, \n                                 (IFormatProvider^) nullptr , byteValue);\n   if (result)\n      Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, \n                     stringToConvert, byteValue);\n   else\n      Console::WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, \n                        stringToConvert);\n}\n// The example displays the following output:\n//       Attempted conversion of &#39;1024&#39; failed.\n//       Attempted conversion of &#39;100.1&#39; failed.\n//       Converted &#39;100.0&#39; to 100\n//       Converted &#39;+100&#39; to 100\n//       Attempted conversion of &#39;-100&#39; failed.\n//       Converted &#39;000000000000000100&#39; to 100\n//       Converted &#39;00,100&#39; to 100\n//       Attempted conversion of &#39;2E+3   &#39; failed.\n//       Converted &#39;FF&#39; to 255\n//       Attempted conversion of &#39;0x1F&#39; failed.}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Byte.TryParse#2\">Imports System.Globalization\n\nModule ByteConversion2\n   Public Sub Main()\n      Dim byteString As String \n      Dim styles As NumberStyles\n      \n      byteString = &quot;1024&quot;\n      styles = NumberStyles.Integer\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;100.1&quot;\n      styles = NumberStyles.Integer Or NumberStyles.AllowDecimalPoint\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;100.0&quot;\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;+100&quot;\n      styles = NumberStyles.Integer Or NumberStyles.AllowLeadingSign _\n               Or NumberStyles.AllowTrailingSign\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;-100&quot;\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;000000000000000100&quot;\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;00,100&quot;      \n      styles = NumberStyles.Integer Or NumberStyles.AllowThousands\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;2E+3   &quot;\n      styles = NumberStyles.Integer Or NumberStyles.AllowExponent\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;FF&quot;\n      styles = NumberStyles.HexNumber\n      CallTryParse(byteString, styles)\n      \n      byteString = &quot;0x1F&quot;\n      CallTryParse(byteString, styles)\n   End Sub\n   \n   Private Sub CallTryParse(stringToConvert As String, styles As NumberStyles)  \n      Dim byteValue As Byte\n      Dim result As Boolean = Byte.TryParse(stringToConvert, styles, Nothing, _\n                                            byteValue)\n      If result Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, _\n                        stringToConvert, byteValue)\n      Else\n         If stringToConvert Is Nothing Then stringToConvert = &quot;&quot;\n         Console.WriteLine(&quot;Attempted conversion of &#39;{0}&#39; failed.&quot;, _\n                           stringToConvert.ToString())\n      End If                        \n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Attempted conversion of &#39;1024&#39; failed.\n&#39;       Attempted conversion of &#39;100.1&#39; failed.\n&#39;       Converted &#39;100.0&#39; to 100\n&#39;       Converted &#39;+100&#39; to 100\n&#39;       Attempted conversion of &#39;-100&#39; failed.\n&#39;       Converted &#39;000000000000000100&#39; to 100\n&#39;       Converted &#39;00,100&#39; to 100\n&#39;       Attempted conversion of &#39;2E+3   &#39; failed.\n&#39;       Converted &#39;FF&#39; to 255\n&#39;       Attempted conversion of &#39;0x1F&#39; failed.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of the current instance is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToChar_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToChar(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDecimal_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToDecimal(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDouble_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToDouble(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToInt16(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToInt32(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToInt64(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToSByte(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSingle_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToSingle(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to which to convert this <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that supplies information about the format of the returned value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The requested type conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToUInt16(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToUInt32(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Byte_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Byte_System_IConvertible_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_System_Byte_\" data-linktype=\"relative-path\">System.Convert.ToUInt64(Byte)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Byte.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Byte.yml\">\r\n<meta name=\"APIName\" content=\"System.Byte\">\r\n<meta name=\"APIName\" content=\"System.Byte.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Byte.Equals\">\r\n<meta name=\"APIName\" content=\"System.Byte.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Byte.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.Byte.MaxValue\">\r\n<meta name=\"APIName\" content=\"System.Byte.MinValue\">\r\n<meta name=\"APIName\" content=\"System.Byte.Parse\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Byte.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.Byte.ToString\">\r\n<meta name=\"APIName\" content=\"System.Byte.TryParse\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"fd5900a0-5bec-a4e7-5471-49d6b3270e2c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an 8-bit unsigned integer.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Byte\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Byte.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Byte.yml","open_to_public_contributors":true,"api_name":["System.Byte","System.Byte.CompareTo","System.Byte.Equals","System.Byte.GetHashCode","System.Byte.GetTypeCode","System.Byte.MaxValue","System.Byte.MinValue","System.Byte.Parse","System.Byte.IConvertible.ToBoolean","System.Byte.IConvertible.ToByte","System.Byte.IConvertible.ToChar","System.Byte.IConvertible.ToDateTime","System.Byte.IConvertible.ToDecimal","System.Byte.IConvertible.ToDouble","System.Byte.IConvertible.ToInt16","System.Byte.IConvertible.ToInt32","System.Byte.IConvertible.ToInt64","System.Byte.IConvertible.ToSByte","System.Byte.IConvertible.ToSingle","System.Byte.IConvertible.ToType","System.Byte.IConvertible.ToUInt16","System.Byte.IConvertible.ToUInt32","System.Byte.IConvertible.ToUInt64","System.Byte.ToString","System.Byte.TryParse"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Byte","System::Byte","System.Byte.CompareTo","System::Byte::CompareTo","System.Byte.Equals","System::Byte::Equals","System.Byte.GetHashCode","System::Byte::GetHashCode","System.Byte.GetTypeCode","System::Byte::GetTypeCode","System.Byte.MaxValue","System::Byte::MaxValue","System.Byte.MinValue","System::Byte::MinValue","System.Byte.Parse","System::Byte::Parse","System.Byte.System#IConvertible#ToBoolean","System::Byte::System#IConvertible#ToBoolean","System.Byte.System#IConvertible#ToByte","System::Byte::System#IConvertible#ToByte","System.Byte.System#IConvertible#ToChar","System::Byte::System#IConvertible#ToChar","System.Byte.System#IConvertible#ToDateTime","System::Byte::System#IConvertible#ToDateTime","System.Byte.System#IConvertible#ToDecimal","System::Byte::System#IConvertible#ToDecimal","System.Byte.System#IConvertible#ToDouble","System::Byte::System#IConvertible#ToDouble","System.Byte.System#IConvertible#ToInt16","System::Byte::System#IConvertible#ToInt16","System.Byte.System#IConvertible#ToInt32","System::Byte::System#IConvertible#ToInt32","System.Byte.System#IConvertible#ToInt64","System::Byte::System#IConvertible#ToInt64","System.Byte.System#IConvertible#ToSByte","System::Byte::System#IConvertible#ToSByte","System.Byte.System#IConvertible#ToSingle","System::Byte::System#IConvertible#ToSingle","System.Byte.System#IConvertible#ToType","System::Byte::System#IConvertible#ToType","System.Byte.System#IConvertible#ToUInt16","System::Byte::System#IConvertible#ToUInt16","System.Byte.System#IConvertible#ToUInt32","System::Byte::System#IConvertible#ToUInt32","System.Byte.System#IConvertible#ToUInt64","System::Byte::System#IConvertible#ToUInt64","System.Byte.ToString","System::Byte::ToString","System.Byte.TryParse","System::Byte::TryParse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"fd5900a0-5bec-a4e7-5471-49d6b3270e2c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Byte.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Byte struct | Microsoft Docs","_op_ogTitle":"Byte struct","description":"Represents an 8-bit unsigned integer.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Byte","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.byte","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.byte","fileRelativePath":"System.Byte.html"},"themesRelativePathToOutputRoot":"_themes/"}