{"content":"    \r\n    <h1 id=\"System_Collections_IStructuralComparable\">\r\n      <span class=\"lang-csharp\">IStructuralComparable</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Supports the structural comparison of collection objects.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IStructuralComparable</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The IStructuralComparable interface enables you to implement customized comparisons for collection members. That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object. You can then specify that this definition be used with a collection type that accepts the IStructuralComparable interface.  </p>\n<p> The interface has a single member, <a class=\"xref\" href=\"system.collections.istructuralcomparable#System_Collections_IStructuralComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order. The actual comparison of the members or elements in the current instance with those in a second object is performed by an <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface implementation, which contains the definition of your custom comparison.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The IStructuralComparable interface supports only structural comparisons for sorting or ordering. The <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface supports custom comparisons for structural equality.  </p>\n</div>\n<p> The .NET Framework provides two default comparers. One is returned by the <a class=\"xref\" href=\"system.collections.structuralcomparisons#System_Collections_StructuralComparisons_StructuralComparer_\" data-linktype=\"relative-path\">StructuralComparer</a> property; the other is returned by the <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> property.  </p>\n<p> The generic tuple classes (<a class=\"xref\" href=\"system.tuple-1\" data-linktype=\"relative-path\">Tuple&lt;T1&gt;</a>, <a class=\"xref\" href=\"system.tuple-2\" data-linktype=\"relative-path\">Tuple&lt;T1,T2&gt;</a>, <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a>, and so on) and the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> class provide explicit implementations of the IStructuralComparable interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an IStructuralComparable interface value and providing your <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation as an argument to the <a class=\"xref\" href=\"system.collections.istructuralcomparable#System_Collections_IStructuralComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method, you can define a custom sort order for the array or collection. However, you do not call the <a class=\"xref\" href=\"system.collections.istructuralcomparable#System_Collections_IStructuralComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method directly in most cases. Instead, the <a class=\"xref\" href=\"system.collections.istructuralcomparable#System_Collections_IStructuralComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method is called by sorting methods such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">Sort(Array,IComparer)</a>. In this case, you define your <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation and pass it as an argument to a sorting method or collection object&#39;s class constructor. The <a class=\"xref\" href=\"system.collections.istructuralcomparable#System_Collections_IStructuralComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method with your custom comparer is then called automatically whenever the collection is sorted.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">CompareTo(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_IStructuralComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that compares members of the current collection object with the corresponding members of <code>other</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that indicates the relationship of the current collection object to <code>other</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> -1<br>\n </td><td> The current instance precedes <code>other</code>.<br>\n </td></tr><tr><td> 0<br>\n </td><td> The current instance and <code>other</code> are equal.<br>\n </td></tr><tr><td> 1<br>\n </td><td> The current instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>This instance and <code>other</code> are not the same type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CompareTo method supports custom structural comparison and sorting of array and tuple objects. The CompareTo method calls the <code>comparer</code> object&#39;s <a class=\"xref\" href=\"system.collections.icomparer#System_Collections_IComparer_Compare_\" data-linktype=\"relative-path\">Compare</a> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <a class=\"xref\" href=\"system.collections.icomparer#System_Collections_IComparer_Compare_\" data-linktype=\"relative-path\">Compare</a> end and the CompareTo method returns a value when one of the following conditions becomes true:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.collections.icomparer#System_Collections_IComparer_Compare_\" data-linktype=\"relative-path\">Compare</a> method returns -1.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.collections.icomparer#System_Collections_IComparer_Compare_\" data-linktype=\"relative-path\">Compare</a> method returns 1.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.collections.icomparer#System_Collections_IComparer_Compare_\" data-linktype=\"relative-path\">Compare</a> method is called for the last element or component in the collection object.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-6\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6&gt;</a> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple&#39;s first component is the city name. The remaining five components represent the population at ten-year intervals from 1960 to 2000.  </p>\n<p> The <code>PopulationComparer</code> class provides an <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the <code>PopulationComparer</code> class in its constructor: the position of the component that defines the sort order, and a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the tuple objects should be sorted in ascending or descending order.  </p>\n<p> The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them. Note that the example does not directly call the CompareTo implementation. The method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">Sort(Array,IComparer)</a> method for each tuple object in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`6.CompareTo#2\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class PopulationComparer&lt;T1, T2, T3, T4, T5, T6&gt; : IComparer\n{\n   private int itemPosition;\n   private int multiplier = -1;\n\n   public PopulationComparer(int component) : this(component, true)\n   { }\n\n   public PopulationComparer(int component, bool descending)\n   {\n      if (! descending) multiplier = 1;\n\n      if (component &lt;= 0 || component &gt; 6)\n         throw new ArgumentException(&quot;The component argument is out of range.&quot;);\n\n      itemPosition = component;\n   }\n\n   public int Compare(object x, object y)\n   {\n      var tX = x as Tuple&lt;T1, T2, T3, T4, T5, T6&gt;;\n      if (tX == null)\n      {\n         return 0;\n      }\n      else\n      {\n         var tY = y as Tuple&lt;T1, T2, T3, T4, T5, T6&gt;;\n         switch (itemPosition)\n         {\n            case 1:\n               return Comparer&lt;T1&gt;.Default.Compare(tX.Item1, tY.Item1) * multiplier;\n            case 2:\n               return Comparer&lt;T2&gt;.Default.Compare(tX.Item2, tY.Item2) * multiplier;\n            case 3:\n               return Comparer&lt;T3&gt;.Default.Compare(tX.Item3, tY.Item3) * multiplier;\n            case 4:\n               return Comparer&lt;T4&gt;.Default.Compare(tX.Item4, tY.Item4) * multiplier;\n            case 5:\n               return Comparer&lt;T5&gt;.Default.Compare(tX.Item5, tY.Item5) * multiplier;\n            case 6:\n               return Comparer&lt;T6&gt;.Default.Compare(tX.Item6, tY.Item6) * multiplier;\n            default:\n               return Comparer&lt;T1&gt;.Default.Compare(tX.Item1, tY.Item1) * multiplier;\n         }\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create array of sextuple with population data for three U.S.\n      // cities, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;Los Angeles&quot;, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;New York&quot;, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Chicago&quot;, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display array in unsorted order.\n      Console.WriteLine(&quot;In unsorted order:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n      Console.WriteLine();\n\n      Array.Sort(cities, new PopulationComparer&lt;string, int, int, int, int, int&gt;(3));\n\n      // Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 1970:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n      Console.WriteLine();\n\n      Array.Sort(cities, new PopulationComparer&lt;string, int, int, int, int, int&gt;(6));\n\n      // Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 2000:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n   }\n}\n// The example displays the following output:\n//    In unsorted order:\n//    (Los Angeles, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    (New York, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Chicago, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    \n//    Sorted by population in 1970:\n//    (New York, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Chicago, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    (Los Angeles, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    \n//    Sorted by population in 2000:\n//    (New York, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Los Angeles, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    (Chicago, 3550904, 3366957, 3005072, 2783726, 2896016)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`6.CompareTo#2\">Imports System.Collections\nImports System.Collections.Generic\n\nPublic Class PopulationComparer(Of T1, T2, T3, T4, T5, T6) : Implements IComparer\n   Private itemPosition As Integer\n   Private multiplier As Integer = -1\n      \n   Public Sub New(component As Integer)\n      Me.New(component, True)\n   End Sub\n   \n   Public Sub New(component As Integer, descending As Boolean)\n      If Not descending Then multiplier = 1\n      \n      If component &lt;= 0 Or component &gt; 6 Then \n         Throw New ArgumentException(&quot;The component argument is out of range.&quot;)\n      End If\n      itemPosition = component\n   End Sub \n   \n   Public Function Compare(x As Object, y As Object) As Integer _\n                   Implements IComparer.Compare\n \n      Dim tX = TryCast(x, Tuple(Of T1, T2, T3, T4, T5, T6))\n      If tX Is Nothing Then\n         Return 0\n      Else\n         Dim tY = DirectCast(y, Tuple(Of T1, T2, T3, T4, T5, T6))\n         Select Case itemPosition\n            Case 1\n               Return Comparer(Of T1).Default.Compare(tX.Item1, tY.Item1) * multiplier\n            Case 2\n               Return Comparer(Of T2).Default.Compare(tX.Item2, tY.Item2) * multiplier\n            Case 3\n               Return Comparer(Of T3).Default.Compare(tX.Item3, tY.Item3) * multiplier\n            Case 4\n               Return Comparer(Of T4).Default.Compare(tX.Item4, tY.Item4) * multiplier\n            Case 5\n               Return Comparer(Of T5).Default.Compare(tX.Item5, tY.Item5) * multiplier\n            Case 6\n               Return Comparer(Of T6).Default.Compare(tX.Item6, tY.Item6) * multiplier\n            &#39; This should never happen.\n            Case Else\n               Return 0\n         End Select      \n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      &#39; Create array of sextuple with population data for three U.S. \n      &#39; cities, 1960-2000.\n      Dim cities() = \n          { Tuple.Create(&quot;Los Angeles&quot;, 2479015, 2816061, 2966850, 3485398, 3694820),\n            Tuple.Create(&quot;New York&quot;, 7781984, 7894862, 7071639, 7322564, 8008278),  \n            Tuple.Create(&quot;Chicago&quot;, 3550904, 3366957, 3005072, 2783726, 2896016) } \n      \n      &#39; Display array in unsorted order.\n      Console.WriteLine(&quot;In unsorted order:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n      Console.WriteLine()\n      \n      Array.Sort(cities, New PopulationComparer(Of String, Integer, Integer, Integer, Integer, Integer)(3)) \n                           \n      &#39; Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 1970:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n      Console.WriteLine()\n      \n      Array.Sort(cities, New PopulationComparer(Of String, Integer, Integer, Integer, Integer, Integer)(6))\n                           \n      &#39; Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 2000:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    In unsorted order:\n&#39;    (Los Angeles, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    (New York, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Chicago, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    \n&#39;    Sorted by population in 1970:\n&#39;    (New York, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Chicago, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    (Los Angeles, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    \n&#39;    Sorted by population in 2000:\n&#39;    (New York, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Los Angeles, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    (Chicago, 3550904, 3366957, 3005072, 2783726, 2896016)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IStructuralComparable.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IStructuralComparable.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.IStructuralComparable\">\r\n<meta name=\"APIName\" content=\"System.Collections.IStructuralComparable.CompareTo\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"73ebdae4-bd26-6b17-525f-414c44f768f3\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Supports the structural comparison of collection objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.IStructuralComparable\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IStructuralComparable.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IStructuralComparable.yml","open_to_public_contributors":true,"api_name":["System.Collections.IStructuralComparable","System.Collections.IStructuralComparable.CompareTo"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.IStructuralComparable","System::Collections::IStructuralComparable","System.Collections.IStructuralComparable.CompareTo","System::Collections::IStructuralComparable::CompareTo"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"73ebdae4-bd26-6b17-525f-414c44f768f3","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/IStructuralComparable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IStructuralComparable interface | Microsoft Docs","_op_ogTitle":"IStructuralComparable interface","description":"Supports the structural comparison of collection objects.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.IStructuralComparable","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.istructuralcomparable","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.istructuralcomparable","fileRelativePath":"System.Collections.IStructuralComparable.html"},"themesRelativePathToOutputRoot":"_themes/"}