{"content":"    \r\n    <h1 id=\"System_Device_Location_ICivicAddressResolver\">\r\n      <span class=\"lang-csharp\">ICivicAddressResolver</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a method that when implemented, resolves a latitude/longitude location to a civic address.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface ICivicAddressResolver</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To resolve a <a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a> to a <a class=\"xref\" href=\"system.device.location.civicaddress\" data-linktype=\"relative-path\">CivicAddress</a> asynchronously, implement <a class=\"xref\" href=\"system.device.location.icivicaddressresolver#System_Device_Location_ICivicAddressResolver_ResolveAddressAsync_\" data-linktype=\"relative-path\">ResolveAddressAsync</a>, and provide the civic address data to the <a class=\"xref\" href=\"system.device.location.icivicaddressresolver#System_Device_Location_ICivicAddressResolver_ResolveAddressCompleted\" data-linktype=\"relative-path\">ResolveAddressCompleted</a> event.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Device_Location_ICivicAddressResolver_ResolveAddress_System_Device_Location_GeoCoordinate_\" data-linktype=\"self-bookmark\">ResolveAddress(GeoCoordinate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resolves a <a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a> to a civic address synchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Device_Location_ICivicAddressResolver_ResolveAddressAsync_System_Device_Location_GeoCoordinate_\" data-linktype=\"self-bookmark\">ResolveAddressAsync(GeoCoordinate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates a request to resolve a latitude/longitude location to an address.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Device_Location_ICivicAddressResolver_ResolveAddressCompleted\" data-linktype=\"self-bookmark\">ResolveAddressCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an asynchronous request using <span class=\"xref\">stem.Device.Location.ICivicAddressResolver.ResolveAddressAsync*</span> to resolve a latitude/longitude to a civic address is complete.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Device_Location_ICivicAddressResolver_ResolveAddress_System_Device_Location_GeoCoordinate_\">\r\n    \r\n            <a id=\"System_Device_Location_ICivicAddressResolver_ResolveAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveAddress(GeoCoordinate)</div>        \r\n          </div>\r\n    \r\n            <p>Resolves a <a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a> to a civic address synchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Device.Location.CivicAddress ResolveAddress (System.Device.Location.GeoCoordinate coordinate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>coordinate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The latitude/longitude location to resolve to an address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.device.location.civicaddress\" data-linktype=\"relative-path\">CivicAddress</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to call ResolveAddress.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Device.Location.ResolveCivicAddressSync#1\">using System;\nusing System.Device.Location;\nnamespace ResolveAddressSync\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ResolveAddressSync();\n        }\n        static void ResolveAddressSync()\n        {\n            GeoCoordinateWatcher watcher = new GeoCoordinateWatcher(GeoPositionAccuracy.High);\n            watcher.MovementThreshold = 1.0; // set to one meter\n            watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));\n\n            CivicAddressResolver resolver = new CivicAddressResolver();\n\n            if (watcher.Position.Location.IsUnknown == false)\n            {\n                CivicAddress address = resolver.ResolveAddress(watcher.Position.Location);\n\n                if (!address.IsUnknown)\n                {\n                    Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                            address.CountryRegion,\n                            address.PostalCode);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Address unknown.&quot;);\n                }\n            }\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Device.Location.ResolveCivicAddressSync#1\">Imports System.Device.Location\nModule ResolveAddressSync\n\n    Public Sub ResolveAddressSync()\n        Dim watcher As GeoCoordinateWatcher\n        watcher = New System.Device.Location.GeoCoordinateWatcher(GeoPositionAccuracy.High)\n        Dim started As Boolean = False\n        watcher.MovementThreshold = 1.0     &#39;set to one meter\n        started = watcher.TryStart(False, TimeSpan.FromMilliseconds(1000))\n\n        Dim resolver As CivicAddressResolver = New CivicAddressResolver()\n        If started Then\n            If Not watcher.Position.Location.IsUnknown Then\n                Dim address As CivicAddress = resolver.ResolveAddress(watcher.Position.Location)\n                If Not address.IsUnknown Then\n                    Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                                address.CountryRegion,\n                                address.PostalCode)\n                Else\n                    Console.WriteLine(&quot;Address unknown.&quot;)\n                End If\n            End If\n        Else\n            Console.WriteLine(&quot;GeoCoordinateWatcher timed out on start.&quot;)\n        End If\n    End Sub\n\n\n    Public Sub Main()\n\n        ResolveAddressSync()\n        Console.WriteLine(&quot;Enter any key to quit.&quot;)\n        Console.ReadLine()\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Device_Location_ICivicAddressResolver_ResolveAddressAsync_System_Device_Location_GeoCoordinate_\">\r\n    \r\n            <a id=\"System_Device_Location_ICivicAddressResolver_ResolveAddressAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveAddressAsync(GeoCoordinate)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates a request to resolve a latitude/longitude location to an address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResolveAddressAsync (System.Device.Location.GeoCoordinate coordinate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>coordinate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.device.location.geocoordinate\" data-linktype=\"relative-path\">GeoCoordinate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The latitude/longitude location to resolve to an address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to call ResolveAddressAsync.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Device.Location.ResolveCivicAddressAsync#2\">static void ResolveAddressAsync()\n{\n    GeoCoordinateWatcher watcher = new GeoCoordinateWatcher(GeoPositionAccuracy.High);\n    bool started = false;\n    watcher.MovementThreshold = 1.0; // set to one meter\n    started = watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));\n\n    if (started)\n    {\n        CivicAddressResolver resolver = new CivicAddressResolver();\n\n        resolver.ResolveAddressCompleted += new EventHandler&lt;ResolveAddressCompletedEventArgs&gt;(resolver_ResolveAddressCompleted);\n\n        if (watcher.Position.Location.IsUnknown == false)\n        {\n            resolver.ResolveAddressAsync(watcher.Position.Location);\n        }\n    }\n\n}\n\nstatic void resolver_ResolveAddressCompleted(object sender, ResolveAddressCompletedEventArgs e)\n{\n    if (!e.Address.IsUnknown)\n    {\n        Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                   e.Address.CountryRegion,\n                   e.Address.PostalCode);\n    }\n    else\n    {\n        Console.WriteLine(&quot;Unknown address.&quot;);\n    }\n}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Device.Location.ResolveCivicAddressAsync#2\">\nPublic Sub ResolveCivicAddressAsync()\n    Dim watcher As GeoCoordinateWatcher\n    watcher = New System.Device.Location.GeoCoordinateWatcher(GeoPositionAccuracy.High)\n    Dim started As Boolean = False\n    watcher.MovementThreshold = 1.0     &#39;set to one meter\n    started = watcher.TryStart(False, TimeSpan.FromMilliseconds(1000))\n    If started Then\n        Dim resolver As CivicAddressResolver = New CivicAddressResolver()\n        AddHandler resolver.ResolveAddressCompleted, AddressOf resolver_ResolveAddressCompleted\n        If Not watcher.Position.Location.IsUnknown Then\n            resolver.ResolveAddressAsync(watcher.Position.Location)\n        End If\n    End If\n\n    watcher.Start()\n\nEnd Sub\n\nSub resolver_ResolveAddressCompleted(ByVal sender As Object, ByVal e As ResolveAddressCompletedEventArgs)\n    If Not e.Address.IsUnknown Then\n        Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                       e.Address.CountryRegion,\n                       e.Address.PostalCode)\n    Else\n        Console.WriteLine(&quot;Unknown address.&quot;)\n    End If\nEnd Sub\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Device_Location_ICivicAddressResolver_ResolveAddressCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveAddressCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an asynchronous request using <span class=\"xref\">stem.Device.Location.ICivicAddressResolver.ResolveAddressAsync*</span> to resolve a latitude/longitude to a civic address is complete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Device.Location.ResolveAddressCompletedEventArgs&gt; ResolveAddressCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to call <a class=\"xref\" href=\"system.device.location.icivicaddressresolver#System_Device_Location_ICivicAddressResolver_ResolveAddressAsync_\" data-linktype=\"relative-path\">ResolveAddressAsync</a> and handle the ResolveAddressCompleted event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Device.Location.ResolveCivicAddressAsync#2\">static void ResolveAddressAsync()\n{\n    GeoCoordinateWatcher watcher = new GeoCoordinateWatcher(GeoPositionAccuracy.High);\n    bool started = false;\n    watcher.MovementThreshold = 1.0; // set to one meter\n    started = watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));\n\n    if (started)\n    {\n        CivicAddressResolver resolver = new CivicAddressResolver();\n\n        resolver.ResolveAddressCompleted += new EventHandler&lt;ResolveAddressCompletedEventArgs&gt;(resolver_ResolveAddressCompleted);\n\n        if (watcher.Position.Location.IsUnknown == false)\n        {\n            resolver.ResolveAddressAsync(watcher.Position.Location);\n        }\n    }\n\n}\n\nstatic void resolver_ResolveAddressCompleted(object sender, ResolveAddressCompletedEventArgs e)\n{\n    if (!e.Address.IsUnknown)\n    {\n        Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                   e.Address.CountryRegion,\n                   e.Address.PostalCode);\n    }\n    else\n    {\n        Console.WriteLine(&quot;Unknown address.&quot;);\n    }\n}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Device.Location.ResolveCivicAddressAsync#2\">\nPublic Sub ResolveCivicAddressAsync()\n    Dim watcher As GeoCoordinateWatcher\n    watcher = New System.Device.Location.GeoCoordinateWatcher(GeoPositionAccuracy.High)\n    Dim started As Boolean = False\n    watcher.MovementThreshold = 1.0     &#39;set to one meter\n    started = watcher.TryStart(False, TimeSpan.FromMilliseconds(1000))\n    If started Then\n        Dim resolver As CivicAddressResolver = New CivicAddressResolver()\n        AddHandler resolver.ResolveAddressCompleted, AddressOf resolver_ResolveAddressCompleted\n        If Not watcher.Position.Location.IsUnknown Then\n            resolver.ResolveAddressAsync(watcher.Position.Location)\n        End If\n    End If\n\n    watcher.Start()\n\nEnd Sub\n\nSub resolver_ResolveAddressCompleted(ByVal sender As Object, ByVal e As ResolveAddressCompletedEventArgs)\n    If Not e.Address.IsUnknown Then\n        Console.WriteLine(&quot;Country: {0}, Zip: {1}&quot;,\n                       e.Address.CountryRegion,\n                       e.Address.PostalCode)\n    Else\n        Console.WriteLine(&quot;Unknown address.&quot;)\n    End If\nEnd Sub\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Device.Location.ICivicAddressResolver.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Device.Location.ICivicAddressResolver.yml\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.ICivicAddressResolver\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.ICivicAddressResolver.ResolveAddress\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.ICivicAddressResolver.ResolveAddressAsync\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.ICivicAddressResolver.add_ResolveAddressCompleted\">\r\n<meta name=\"APIName\" content=\"System.Device.Location.ICivicAddressResolver.remove_ResolveAddressCompleted\">\r\n<meta name=\"APILocation\" content=\"System.Device.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"32709782-2e1a-55ce-2b27-7a6e87c204ef\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Device.Location\\ICivicAddressResolver.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a method that when implemented, resolves a latitude/longitude location to a civic address.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Device.Location/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Device.Location.ICivicAddressResolver\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Device.Location.ICivicAddressResolver.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Device.Location.ICivicAddressResolver.yml","open_to_public_contributors":true,"api_name":["System.Device.Location.ICivicAddressResolver","System.Device.Location.ICivicAddressResolver.ResolveAddress","System.Device.Location.ICivicAddressResolver.ResolveAddressAsync","System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted","System.Device.Location.ICivicAddressResolver.add_ResolveAddressCompleted","System.Device.Location.ICivicAddressResolver.remove_ResolveAddressCompleted"],"api_location":["System.Device.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Device.Location.ICivicAddressResolver","System::Device::Location::ICivicAddressResolver","System.Device.Location.ICivicAddressResolver.ResolveAddress","System::Device::Location::ICivicAddressResolver::ResolveAddress","System.Device.Location.ICivicAddressResolver.ResolveAddressAsync","System::Device::Location::ICivicAddressResolver::ResolveAddressAsync","System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted","System::Device::Location::ICivicAddressResolver::ResolveAddressCompleted"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"32709782-2e1a-55ce-2b27-7a6e87c204ef","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Device.Location\\ICivicAddressResolver.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Device.Location/ICivicAddressResolver.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ICivicAddressResolver interface | Microsoft Docs","_op_ogTitle":"ICivicAddressResolver interface","description":"Provides a method that when implemented, resolves a latitude/longitude location to a civic address.\n","toc_asset_id":"_splitted/System.Device.Location/toc.json","toc_rel":"_splitted/System.Device.Location/toc.json","source_url":"","ms.assetid":"System.Device.Location.ICivicAddressResolver","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.device.location.icivicaddressresolver","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.device.location.icivicaddressresolver","fileRelativePath":"System.Device.Location.ICivicAddressResolver.html"},"themesRelativePathToOutputRoot":"_themes/"}