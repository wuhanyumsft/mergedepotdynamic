{"content":"    \r\n    <h1 id=\"System_Collections_IDictionary\">\r\n      <span class=\"lang-csharp\">IDictionary</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a nongeneric collection of key/value pairs.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IDictionary : System.Collections.ICollection</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The IDictionary interface is the base interface for nongeneric collections of key/value pairs. For the generic version of this interface, see <a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;</a>.  </p>\n<p> Each element is a key/value pair stored in a <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> object.  </p>\n<p> Each pair must have a unique key. Implementations can vary in whether they allow the key to be null.  The value can be null and does not have to be unique. The IDictionary interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.  </p>\n<p> IDictionary implementations fall into three categories: read-only, fixed-size, variable-size. A read-only IDictionary object cannot be modified. A fixed-size IDictionary object does not allow the addition or removal of elements, but does allow the modification of existing elements. A variable-size IDictionary object allows the addition, removal, and modification of elements.  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>For Each</code> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the IDictionary object is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a>. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"Dictionary#14\">        foreach (DictionaryEntry de in myDictionary)\n        {\n            //...\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dictionary#14\">        for each (DictionaryEntry de in myDictionary)\n        {\n            //...\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#14\">        For Each de As DictionaryEntry In myDictionary\n            &#39;...\n        Next de\n</code></pre><p> The <code>foreach</code> statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_IsFixedSize\" data-linktype=\"self-bookmark\">IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_Item_System_Object_\" data-linktype=\"self-bookmark\">Item(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_Keys\" data-linktype=\"self-bookmark\">Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_Values\" data-linktype=\"self-bookmark\">Values</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_Add_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Add(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an element with the provided key and value to the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_Contains_System_Object_\" data-linktype=\"self-bookmark\">Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object contains an element with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IDictionary_Remove_System_Object_\" data-linktype=\"self-bookmark\">Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object has a fixed size; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the IsFixedSize property. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#6\">public:\n    virtual property bool IsFixedSize\n    {\n        bool get()\n        {\n            return false;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#6\">    public bool IsFixedSize { get { return false; } }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#6\">    Public ReadOnly Property IsFixedSize() As Boolean Implements IDictionary.IsFixedSize\n        Get\n            Return False\n        End Get\n    End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the IsReadOnly property. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#4\">public:\n    property virtual bool IsReadOnly\n    {\n        bool get()\n        {\n            return false;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#4\">    public bool IsReadOnly { get { return false; } }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#4\">    Public ReadOnly Property IsReadOnly() As Boolean Implements IDictionary.IsReadOnly\n        Get\n            Return False\n        End Get\n    End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_Item_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object this[object key] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The element with the specified key, or <code>null</code> if the key does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The property is set and the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> The property is set, <code>key</code> does not exist in the collection, and the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.  </p>\n<p> You can also use the Item property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>). However, if the specified key already exists in the dictionary, setting the Item property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> Implementations can vary in whether they allow the key to be <code>null</code>.  </p>\n<p> The C# language uses the <code>this</code><a href=\"../Topic/this%20(C%23%20Reference).md\" data-linktype=\"relative-path\">this</a> keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Item property. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#13\">public:\n    virtual property Object^ default[Object^]\n    {\n        Object^ get(Object^ key)\n        {\n            // If this key is in the dictionary, return its value.\n            int index;\n            if (TryGetIndexOfKey(key, &amp;index))\n            {\n                // The key was found; return its value.\n                return items[index]-&gt;Value;\n            }\n            else\n            {\n                // The key was not found; return null.\n                return nullptr;\n            }\n        }\n\n        void set(Object^ key, Object^ value)\n        {\n            // If this key is in the dictionary, change its value.\n            int index;\n            if (TryGetIndexOfKey(key, &amp;index))\n            {\n                // The key was found; change its value.\n                items[index]-&gt;Value = value;\n            }\n            else\n            {\n                // This key is not in the dictionary; add this\n                // key/value pair.\n                Add(key, value);\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#13\">    public object this[object key]\n    {\n        get\n        {   \n            // If this key is in the dictionary, return its value.\n            Int32 index;\n            if (TryGetIndexOfKey(key, out index))\n            {\n                // The key was found; return its value.\n                return items[index].Value;\n            } \n            else\n            {\n                // The key was not found; return null.\n                return null;\n            }\n        }\n\n        set\n        {\n            // If this key is in the dictionary, change its value. \n            Int32 index;\n            if (TryGetIndexOfKey(key, out index))\n            {\n                // The key was found; change its value.\n                items[index].Value = value;\n            } \n            else\n            {\n                // This key is not in the dictionary; add this key/value pair.\n                Add(key, value);\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#13\">    Public Property Item(ByVal key As Object) As Object Implements IDictionary.Item\n        Get\n\n            &#39; If this key is in the dictionary, return its value.\n            Dim index As Integer\n            If TryGetIndexOfKey(key, index) Then\n\n                &#39; The key was found return its value.\n                Return items(index).Value\n            Else\n\n                &#39; The key was not found return null.\n                Return Nothing\n            End If\n        End Get\n\n        Set(ByVal value As Object)\n            &#39; If this key is in the dictionary, change its value. \n            Dim index As Integer\n            If TryGetIndexOfKey(key, index) Then\n\n                &#39; The key was found change its value.\n                items(index).Value = value\n            Else\n\n                &#39; This key is not in the dictionary add this key/value pair.\n                Add(key, value)\n            End If\n        End Set\n    End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_Keys\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.ICollection Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the keys in the returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> returned by the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Values_\" data-linktype=\"relative-path\">Values</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Keys property. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#10\">public:\n    virtual property ICollection^ Keys\n    {\n        ICollection^ get()\n        {\n            // Return an array where each item is a key.\n            array&lt;Object^&gt;^ keys = gcnew array&lt;Object^&gt;(itemsInUse);\n            for (int i = 0; i &lt; itemsInUse; i++)\n            {\n                keys[i] = items[i]-&gt;Key;\n            }\n            return keys;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#10\">    public ICollection Keys\n    {\n        get\n        {\n            // Return an array where each item is a key.\n            Object[] keys = new Object[ItemsInUse];\n            for (Int32 n = 0; n &lt; ItemsInUse; n++)\n                keys[n] = items[n].Key;\n            return keys;\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#10\">    Public ReadOnly Property Keys() As ICollection Implements IDictionary.Keys\n        Get\n\n            &#39; Return an array where each item is a key.\n            &#39; Note: Declaring keyArray() to have a size of ItemsInUse - 1\n            &#39;       ensures that the array is properly sized, in VB.NET\n            &#39;       declaring an array of size N creates an array with\n            &#39;       0 through N elements, including N, as opposed to N - 1\n            &#39;       which is the default behavior in C# and C++.\n            Dim keyArray() As Object = New Object(ItemsInUse - 1) {}\n            Dim n As Integer\n            For n = 0 To ItemsInUse - 1\n                keyArray(n) = items(n).Key\n            Next n\n\n            Return keyArray\n        End Get\n    End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_Values\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Values</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.ICollection Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the values in the returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> returned by the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Keys_\" data-linktype=\"relative-path\">Keys</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Values property. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#11\">public:\n    virtual property ICollection^ Values\n    {\n        ICollection^ get()\n        {\n            // Return an array where each item is a value.\n            array&lt;Object^&gt;^ values = gcnew array&lt;Object^&gt;(itemsInUse);\n            for (int i = 0; i &lt; itemsInUse; i++)\n            {\n                values[i] = items[i]-&gt;Value;\n            }\n            return values;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#11\">    public ICollection Values\n    {\n        get\n        {\n            // Return an array where each item is a value.\n            Object[] values = new Object[ItemsInUse];\n            for (Int32 n = 0; n &lt; ItemsInUse; n++)\n                values[n] = items[n].Value;\n            return values;\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#11\">    Public ReadOnly Property Values() As ICollection Implements IDictionary.Values\n        Get\n            &#39; Return an array where each item is a value.\n            Dim valueArray() As Object = New Object(ItemsInUse - 1) {}\n            Dim n As Integer\n            For n = 0 To ItemsInUse - 1\n                valueArray(n) = items(n).Value\n            Next n\n\n            Return valueArray\n        End Get\n    End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_Add_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an element with the provided key and value to the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to use as the key of the element to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to use as the value of the element to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element with the same key already exists in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also use the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>). However, if the specified key already exists in the dictionary, setting the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the Add method does not modify existing elements.  </p>\n<p> Implementations can vary in whether they allow the key to be <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Add method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#9\">public:\n    virtual void Add(Object^ key, Object^ value)\n    {\n        // Add the new key/value pair even if this key already exists\n        // in the dictionary.\n        if (itemsInUse == items-&gt;Length)\n        {\n            throw gcnew InvalidOperationException\n                (&quot;The dictionary cannot hold any more items.&quot;);\n        }\n        items[itemsInUse++] = gcnew DictionaryEntry(key, value);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#9\">    public void Add(object key, object value) \n    {\n        // Add the new key/value pair even if this key already exists in the dictionary.\n        if (ItemsInUse == items.Length)\n            throw new InvalidOperationException(&quot;The dictionary cannot hold any more items.&quot;);\n        items[ItemsInUse++] = new DictionaryEntry(key, value);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#9\">    Public Sub Add(ByVal key As Object, ByVal value As Object) Implements IDictionary.Add\n\n        &#39; Add the new key/value pair even if this key already exists in the dictionary.\n        If ItemsInUse = items.Length Then\n            Throw New InvalidOperationException(&quot;The dictionary cannot hold any more items.&quot;)\n        End If\n        items(ItemsInUse) = New DictionaryEntry(key, value)\n        ItemsInUse = ItemsInUse + 1\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_Clear\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Clear method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#8\">public:\n    virtual void Clear()\n    {\n        itemsInUse = 0;\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#8\">    public void Clear() { ItemsInUse = 0; }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#8\">    Public Sub Clear() Implements IDictionary.Clear\n        ItemsInUse = 0\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object contains an element with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> contains an element with the key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Implementations can vary in whether they allow the key to be <code>null</code>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether <code>item</code> exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Contains method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#5\">public:\n    virtual bool Contains(Object^ key)\n    {\n        int index;\n        return TryGetIndexOfKey(key, &amp;index);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#5\">    public bool Contains(object key)\n    {\n       Int32 index;\n       return TryGetIndexOfKey(key, out index);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#5\">    Public Function Contains(ByVal key As Object) As Boolean Implements IDictionary.Contains\n        Dim index As Integer\n        Return TryGetIndexOfKey(key, index)\n    End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IDictionaryEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IDictionary_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IDictionary_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object does not contain an element with the specified key, the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> remains unchanged. No exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Remove method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dictionary#7\">public:\n    virtual void Remove(Object^ key)\n    {\n        if (key == nullptr)\n        {\n            throw gcnew ArgumentNullException(&quot;key&quot;);\n        }\n        // Try to find the key in the DictionaryEntry array\n        int index;\n        if (TryGetIndexOfKey(key, &amp;index))\n        {\n            // If the key is found, slide all the items down.\n            Array::Copy(items, index + 1, items, index, itemsInUse -\n                index - 1);\n            itemsInUse--;\n        }\n        else\n        {\n            // If the key is not in the dictionary, just return.\n            return;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"Dictionary#7\">    public void Remove(object key)\n    {\n        if (key == null) throw new ArgumentNullException(&quot;key&quot;);\n        // Try to find the key in the DictionaryEntry array\n        Int32 index;\n        if (TryGetIndexOfKey(key, out index))\n        {\n            // If the key is found, slide all the items up.\n            Array.Copy(items, index + 1, items, index, ItemsInUse - index - 1);\n            ItemsInUse--;\n        } \n        else\n        {\n            // If the key is not in the dictionary, just return. \n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Dictionary#7\">    Public Sub Remove(ByVal key As Object) Implements IDictionary.Remove\n        If key = Nothing Then\n            Throw New ArgumentNullException(&quot;key&quot;)\n        End If\n        &#39; Try to find the key in the DictionaryEntry array\n        Dim index As Integer\n        If TryGetIndexOfKey(key, index) Then\n\n            &#39; If the key is found, slide all the items up.\n            Array.Copy(items, index + 1, items, index, (ItemsInUse - index) - 1)\n            ItemsInUse = ItemsInUse - 1\n        Else\n\n            &#39; If the key is not in the dictionary, just return. \n        End If\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IDictionary.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IDictionary.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.IDictionary.Values\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"1ce8989f-79d7-94dc-4d43-5401dc8499a1\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections\\IDictionary.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a nongeneric collection of key/value pairs.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.IDictionary\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IDictionary.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IDictionary.yml","open_to_public_contributors":true,"api_name":["System.Collections.IDictionary","System.Collections.IDictionary.Add","System.Collections.IDictionary.Clear","System.Collections.IDictionary.Contains","System.Collections.IDictionary.GetEnumerator","System.Collections.IDictionary.IsFixedSize","System.Collections.IDictionary.IsReadOnly","System.Collections.IDictionary.Item","System.Collections.IDictionary.Keys","System.Collections.IDictionary.Remove","System.Collections.IDictionary.Values"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.IDictionary","System::Collections::IDictionary","System.Collections.IDictionary.Add","System::Collections::IDictionary::Add","System.Collections.IDictionary.Clear","System::Collections::IDictionary::Clear","System.Collections.IDictionary.Contains","System::Collections::IDictionary::Contains","System.Collections.IDictionary.GetEnumerator","System::Collections::IDictionary::GetEnumerator","System.Collections.IDictionary.IsFixedSize","System::Collections::IDictionary::IsFixedSize","System.Collections.IDictionary.IsReadOnly","System::Collections::IDictionary::IsReadOnly","System.Collections.IDictionary.Item","System::Collections::IDictionary::Item","System.Collections.IDictionary.Keys","System::Collections::IDictionary::Keys","System.Collections.IDictionary.Remove","System::Collections::IDictionary::Remove","System.Collections.IDictionary.Values","System::Collections::IDictionary::Values"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"1ce8989f-79d7-94dc-4d43-5401dc8499a1","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections\\IDictionary.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/IDictionary.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDictionary interface | Microsoft Docs","_op_ogTitle":"IDictionary interface","description":"Represents a nongeneric collection of key/value pairs.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.IDictionary","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.idictionary","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.idictionary","fileRelativePath":"System.Collections.IDictionary.html"},"themesRelativePathToOutputRoot":"_themes/"}