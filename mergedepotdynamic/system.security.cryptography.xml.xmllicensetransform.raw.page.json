{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_Xml_XmlLicenseTransform\">\r\n      <span class=\"lang-csharp\">XmlLicenseTransform</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the license transform algorithm used to normalize XrML licenses for signatures.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlLicenseTransform : System.Security.Cryptography.Xml.Transform</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform\" data-linktype=\"relative-path\">System.Security.Cryptography.Xml.Transform</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlLicenseTransform</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Algorithm\" data-linktype=\"relative-path\">Algorithm</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Context\" data-linktype=\"relative-path\">Context</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetDigestedOutput_System_Security_Cryptography_HashAlgorithm_\" data-linktype=\"relative-path\">GetDigestedOutput(HashAlgorithm)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetXml\" data-linktype=\"relative-path\">GetXml()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_PropagatedNamespaces\" data-linktype=\"relative-path\">PropagatedNamespaces</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Resolver\" data-linktype=\"relative-path\">Resolver</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The XmlLicenseTransform class represents the license transform algorithm as defined in the MPEG Rights Extension Language (MPEG REL).  </p>\n<p> Use the XmlLicenseTransform class to transform XrML licenses for signatures.  </p>\n<p> The Uniform Resource Identifier (URI) that describes the XmlLicenseTransform class is defined by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlLicenseTransformUrl\" data-linktype=\"relative-path\">XmlLicenseTransformUrl</a> field.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform__ctor\" data-linktype=\"self-bookmark\">XmlLicenseTransform()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform_Decryptor\" data-linktype=\"self-bookmark\">Decryptor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the decryptor of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform_InputTypes\" data-linktype=\"self-bookmark\">InputTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of types that are valid inputs to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform_OutputTypes\" data-linktype=\"self-bookmark\">OutputTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of types that are valid outputs from the OutputTypes method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform_GetInnerXml\" data-linktype=\"self-bookmark\">GetInnerXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an XML representation of the parameters of an <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object that are suitable to be included as subelements of an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform_GetOutput\" data-linktype=\"self-bookmark\">GetOutput()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the output of an <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform_GetOutput_System_Type_\" data-linktype=\"self-bookmark\">GetOutput(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the output of an <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform_LoadInnerXml_System_Xml_XmlNodeList_\" data-linktype=\"self-bookmark\">LoadInnerXml(XmlNodeList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Parses the specified <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object as transform-specific content of a <code>&lt;Transform&gt;</code> element; this method is not supported because the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object has no inner XML elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlLicenseTransform_LoadInput_System_Object_\" data-linktype=\"self-bookmark\">LoadInput(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the specified input into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlLicenseTransform()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlLicenseTransform ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_Decryptor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_Decryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decryptor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the decryptor of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.Xml.IRelDecryptor Decryptor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.ireldecryptor\" data-linktype=\"relative-path\">IRelDecryptor</a></div>\r\n                  </div>\r\n                  <p>The decryptor of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object uses an <a class=\"xref\" href=\"system.security.cryptography.xml.ireldecryptor\" data-linktype=\"relative-path\">IRelDecryptor</a> interface to decrypt <code>&lt;encryptedGrant&gt;</code> elements from the current <code>&lt;license&gt;</code> element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to validate an XML digital signature using the <a class=\"xref\" href=\"system.security.cryptography.xml.ireldecryptor\" data-linktype=\"relative-path\">IRelDecryptor</a> interface and the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML.XmlLicenseTransform#2\">        public static void CheckSignatureWithEncryptedGrant(string fileName, IRelDecryptor decryptor)\n        {\n            // Create a new XML document.\n            XmlDocument xmlDocument = new XmlDocument();\n            XmlNamespaceManager nsManager = new XmlNamespaceManager(xmlDocument.NameTable);\n\n            // Format using whitespaces.\n            xmlDocument.PreserveWhitespace = true;\n\n            // Load the passed XML file into the document. \n            xmlDocument.Load(fileName);\n            nsManager.AddNamespace(&quot;dsig&quot;, SignedXml.XmlDsigNamespaceUrl);\n\n            // Find the &quot;Signature&quot; node and create a new XmlNodeList object.\n            XmlNodeList nodeList = xmlDocument.SelectNodes(&quot;//dsig:Signature&quot;, nsManager);\n\n            for (int i = 0, count = nodeList.Count; i &lt; count; i++)\n            {\n                XmlDocument clone = xmlDocument.Clone() as XmlDocument;\n                XmlNodeList signatures = clone.SelectNodes(&quot;//dsig:Signature&quot;, nsManager);\n\n                // Create a new SignedXml object and pass into it the XML document clone.\n                SignedXml signedXml = new SignedXml(clone);\n\n                // Load the signature node.\n                signedXml.LoadXml((XmlElement)signatures[i]);\n\n                // Set the context for license transform\n                Transform trans = ((Reference)signedXml.SignedInfo.References[0]).TransformChain[0];\n\n                if (trans is XmlLicenseTransform)\n                {\n\n                    // Decryptor is used to decrypt encryptedGrant elements.\n                    if (decryptor != null)\n                        (trans as XmlLicenseTransform).Decryptor = decryptor;\n                }\n\n                // Check the signature and display the result.\n                bool result = signedXml.CheckSignature();\n\n                if (result)\n                    Console.WriteLine(&quot;SUCCESS: CheckSignatureWithEncryptedGrant - issuer index #&quot; +\n                                                    i.ToString());\n                else\n                    Console.WriteLine(&quot;FAILURE: CheckSignatureWithEncryptedGrant - issuer index #&quot; +\n                                                    i.ToString());\n            }\n\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.XML.XmlLicenseTransform#2\">void CheckSignatureWithEncryptedGrant(\n    String^ fileName, IRelDecryptor^ decryptor)\n{\n    // Create a new XML document.\n    XmlDocument^ sourceDocument = gcnew XmlDocument();\n    XmlNamespaceManager^ namespaceManager =\n        gcnew XmlNamespaceManager(sourceDocument-&gt;NameTable);\n\n    // Format using whitespaces.\n    sourceDocument-&gt;PreserveWhitespace = true;\n\n    // Load the passed XML file into the document.\n    sourceDocument-&gt;Load(fileName);\n    namespaceManager-&gt;AddNamespace(&quot;dsig&quot;,\n        SignedXml::XmlDsigNamespaceUrl);\n\n    // Find the &quot;Signature&quot; node and create a new\n    // XmlNodeList object.\n    XmlNodeList^ nodeList = \n        sourceDocument-&gt;SelectNodes(&quot;//dsig:Signature&quot;, namespaceManager);\n\n    for (int i = 0, count = nodeList-&gt;Count; i &lt; count; i++)\n    {\n        XmlDocument^ clone = (XmlDocument^) sourceDocument-&gt;Clone();\n        XmlNodeList^ signatures =\n            clone-&gt;SelectNodes(&quot;//dsig:Signature&quot;, namespaceManager);\n\n        // Create a new SignedXml object and pass into it the\n        // XML document clone.\n        SignedXml^ signedDocument = gcnew SignedXml(clone);\n\n        // Load the signature node.\n        signedDocument-&gt;LoadXml((XmlElement^)signatures[i]);\n\n        // Set the context for license transform\n        Transform^ licenseTransform = ((Reference^)signedDocument-&gt;\n            SignedInfo-&gt;References[0])-&gt;TransformChain[0];\n\n        if ((licenseTransform::typeid == XmlLicenseTransform::typeid) \n            &amp;&amp; (decryptor != nullptr))\n        {\n            // Decryptor is used to decrypt encryptedGrant\n            // elements.\n            ((XmlLicenseTransform^) licenseTransform)-&gt;Decryptor = decryptor;\n        }\n\n        // Check the signature and display the result.\n        if (signedDocument-&gt;CheckSignature())\n        {\n            Console::WriteLine(&quot;SUCCESS: &quot; +\n                &quot;CheckSignatureWithEncryptedGrant - issuer index #&quot; + i);\n        }\n        else\n        {\n            Console::WriteLine(&quot;FAILURE: &quot; +\n                &quot;CheckSignatureWithEncryptedGrant - issuer index #&quot; + i);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.XmlLicenseTransform#2\">    Public Shared Sub CheckSignatureWithEncryptedGrant(ByVal fileName As String, ByVal decryptor As IRelDecryptor)\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n        Dim nsManager As New XmlNamespaceManager(xmlDocument.NameTable)\n\n        &#39; Format using whitespaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(fileName)\n        nsManager.AddNamespace(&quot;dsig&quot;, SignedXml.XmlDsigNamespaceUrl)\n\n        &#39; Find the &quot;Signature&quot; node and create a new XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.SelectNodes(&quot;//dsig:Signature&quot;, nsManager)\n\n        Dim count = nodeList.Count\n        Dim i As Integer\n\n        For i = 0 To count\n            Dim clone As XmlDocument = xmlDocument.Clone()\n           \n            Dim signatures As XmlNodeList = clone.SelectNodes(&quot;//dsig:Signature&quot;, nsManager)\n\n            &#39; Create a new SignedXml object and pass into it the XML document clone.\n            Dim signedXml As New SignedXml(clone)\n\n            &#39; Load the signature node.\n            signedXml.LoadXml(CType(signatures(i), XmlElement))\n\n            &#39; Set the context for license transform\n            Dim trans As Transform = CType(signedXml.SignedInfo.References(0), Reference).TransformChain(0)\n\n            If TypeOf trans Is XmlLicenseTransform Then\n\n                &#39; Decryptor is used to decrypt encryptedGrant elements.\n                If Not (decryptor Is Nothing) Then\n                    CType(trans, XmlLicenseTransform).Decryptor = decryptor\n                End If\n\n            End If\n\n            &#39; Check the signature and display the result.\n            Dim result As Boolean = signedXml.CheckSignature()\n\n            If result Then\n                Console.WriteLine(&quot;SUCCESS: CheckSignatureWithEncryptedGrant - issuer index #&quot; + i.ToString())\n            Else\n                Console.WriteLine(&quot;FAILURE: CheckSignatureWithEncryptedGrant - issuer index #&quot; + i.ToString())\n            End If\n        Next i\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_InputTypes\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_InputTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputTypes</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of types that are valid inputs to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] InputTypes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of types that are valid inputs to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object; you can pass only objects of one of these types to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The only valid input type to the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> class is <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_OutputTypes\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_OutputTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutputTypes</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of types that are valid outputs from the OutputTypes method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] OutputTypes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of valid output types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object; only objects of one of these types are returned from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The only valid output type to the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> class is <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_GetInnerXml\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_GetInnerXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInnerXml()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an XML representation of the parameters of an <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object that are suitable to be included as subelements of an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Xml.XmlNodeList GetInnerXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </div>\r\n                  <p>A list of the XML nodes that represent the transform-specific content needed to describe the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object in an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_GetOutput\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_GetOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOutput()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the output of an <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object GetOutput ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The output of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The type of the returned object must be <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_GetOutput_System_Type_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_GetOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOutput(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the output of an <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object GetOutput (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the output to return. <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> is the only valid type for this parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The output of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>type</code> parameter is not an <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_LoadInnerXml_System_Xml_XmlNodeList_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_LoadInnerXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadInnerXml(XmlNodeList)</div>        \r\n          </div>\r\n    \r\n            <p>Parses the specified <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object as transform-specific content of a <code>&lt;Transform&gt;</code> element; this method is not supported because the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object has no inner XML elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void LoadInnerXml (System.Xml.XmlNodeList nodeList);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nodeList</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object that encapsulates the transform to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_LoadInput_System_Object_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlLicenseTransform_LoadInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadInput(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the specified input into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void LoadInput (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> object. The type of the input object must be <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The context was not set before this transform was invoked.  </p>\n<p> -or-  </p>\n<p> The <code>&lt;issuer&gt;</code> element was not set before this transform was invoked.  </p>\n<p> -or-  </p>\n<p> The <code>&lt;license&gt;</code> element was not set before this transform was invoked.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*</span> property was not set before this transform was invoked.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.XmlLicenseTransform.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.XmlLicenseTransform.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2c84d856-c001-ec67-fa66-c17bb8bee426\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Security.Cryptography.Xml\\XmlLicenseTransform.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the license transform algorithm used to normalize XrML licenses for signatures.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography.Xml/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.XmlLicenseTransform\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.XmlLicenseTransform.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.XmlLicenseTransform.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.Xml.XmlLicenseTransform","System.Security.Cryptography.Xml.XmlLicenseTransform..ctor","System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor","System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml","System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput","System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes","System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml","System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput","System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.XmlLicenseTransform","System::Security::Cryptography::Xml::XmlLicenseTransform","System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor","System::Security::Cryptography::Xml::XmlLicenseTransform::#ctor","System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor","System::Security::Cryptography::Xml::XmlLicenseTransform::Decryptor","System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml","System::Security::Cryptography::Xml::XmlLicenseTransform::GetInnerXml","System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput","System::Security::Cryptography::Xml::XmlLicenseTransform::GetOutput","System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes","System::Security::Cryptography::Xml::XmlLicenseTransform::InputTypes","System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml","System::Security::Cryptography::Xml::XmlLicenseTransform::LoadInnerXml","System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput","System::Security::Cryptography::Xml::XmlLicenseTransform::LoadInput","System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes","System::Security::Cryptography::Xml::XmlLicenseTransform::OutputTypes"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2c84d856-c001-ec67-fa66-c17bb8bee426","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Security.Cryptography.Xml\\XmlLicenseTransform.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography.Xml/XmlLicenseTransform.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlLicenseTransform class | Microsoft Docs","_op_ogTitle":"XmlLicenseTransform class","description":"Represents the license transform algorithm used to normalize XrML licenses for signatures.\n","toc_asset_id":"_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.XmlLicenseTransform","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.xmllicensetransform","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.xmllicensetransform","fileRelativePath":"System.Security.Cryptography.Xml.XmlLicenseTransform.html"},"themesRelativePathToOutputRoot":"_themes/"}