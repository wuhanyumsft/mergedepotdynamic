{"content":"    \r\n    <h1 id=\"System_Tuple_5\">\r\n      <span class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a 5-tuple, or quintuple.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Tuple&lt;T1,T2,T3,T4,T5&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT1\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s first component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT2\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s second component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT3\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s third component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT4\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s fourth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT5\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s fifth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents a 5-tuple, or quintuple, which is a tuple that has five components.  </p>\n<p> You can instantiate a Tuple(T1, object by calling either the <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> constructor or the static <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__5___0___1___2___3___4_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4,T5&gt;(T1,T2,T3,T4,T5)</a> method. You can retrieve the value of the tuple&#39;s components by using the read-only <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item3_\" data-linktype=\"relative-path\">Item3</a>, <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item4_\" data-linktype=\"relative-path\">Item4</a>, and <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item5_\" data-linktype=\"relative-path\">Item5</a> instance properties.  </p>\n<p> Tuples are commonly used in four different ways:  </p>\n<ul>\n<li><p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  </p>\n</li>\n<li><p>To provide easy access to, and manipulation of, a data set. The following example defines an array of Tuple(T1, objects that contain the names of running backs in American football, the number of games in which they played, and the number of carries, total yards gained, and touchdowns scored during those games. The array is passed to the <code>ComputeStatistics</code> method, which calculates each running back&#39;s number of carries per game, average yards per game, average yards per carry, and average number of touchdowns per attempt.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`5.Class#1\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      &#39; Organization of runningBacks 5-tuple:\n      &#39;    Component 1: Player name\n      &#39;    Component 2: Number of games played\n      &#39;    Component 3: Number of attempts (carries)\n      &#39;    Component 4: Number of yards gained \n      &#39;    Component 5: Number of touchdowns   \n      Dim runningBacks() =\n          { Tuple.Create(&quot;Payton, Walter&quot;, 190, 3838, 16726, 110),  \n            Tuple.Create(&quot;Sanders, Barry&quot;, 153, 3062, 15269, 99),            \n            Tuple.Create(&quot;Brown, Jim&quot;, 118, 2359, 12312, 106),            \n            Tuple.Create(&quot;Dickerson, Eric&quot;, 144, 2996, 13259, 90),            \n            Tuple.Create(&quot;Faulk, Marshall&quot;, 176, 2836, 12279, 100) } \n      &#39; Calculate statistics.\n      &#39; Organization of runningStats 5-tuple:\n      &#39;    Component 1: Player name\n      &#39;    Component 2: Number of attempts per game\n      &#39;    Component 3: Number of yards per game\n      &#39;    Component 4: Number of yards per attempt \n      &#39;    Component 5: Number of touchdowns per attempt   \n      Dim runningStats() = ComputeStatistics(runningBacks)\n\n      &#39; Display the result.          \n      Console.WriteLine(&quot;{0,-16} {1,5} {2,6} {3,7} {4,7} {5,7} {6,7} {7,5} {8,7}&quot;, \n                        &quot;Name&quot;, &quot;Games&quot;, &quot;Att&quot;, &quot;Att/Gm&quot;, &quot;Yards&quot;, &quot;Yds/Gm&quot;,\n                        &quot;Yds/Att&quot;, &quot;TD&quot;, &quot;TD/Att&quot;)\n      Console.WriteLine()\n      For ctr As Integer = 0 To runningBacks.Length - 1\n         Console.WriteLine(&quot;{0,-16} {1,5} {2,6:N0} {3,7:N1} {4,7:N0} {5,7:N1} {6,7:N2} {7,5} {8,7:N3}&quot;, \n                           runningBacks(ctr).Item1, runningBacks(ctr).Item2, runningBacks(ctr).Item3, \n                           runningStats(ctr).Item2, runningBacks(ctr).Item4, runningStats(ctr).Item3, \n                           runningStats(ctr).Item4, runningBacks(ctr).Item5, runningStats(ctr).Item5)\n         Console.WriteLine()  \n      Next     \n   End Sub\n\n   Private Function ComputeStatistics(players() As Tuple(Of String, Integer, Integer, Integer, Integer)) _\n                    As Tuple(Of String, Double, Double, Double, Double)()\n\n      Dim result As Tuple(Of String, Double, Double, Double, Double)\n      Dim list As New List(Of Tuple(Of String, Double, Double, Double, Double))()\n      \n      For Each player In players\n         &#39; Create result object containing player name and statistics.\n         result = Tuple.Create(player.Item1,  \n                            player.Item3/player.Item2, player.Item4/player.Item2,\n                            player.Item4/player.Item3, player.Item5/player.Item3)\n         list.Add(result)         \n      Next\n      Return list.ToArray()  \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    Name             Games    Att  Att/Gm   Yards  Yds/Gm Yds/Att    TD  TD/Att\n&#39;    \n&#39;    Payton, Walter     190  3,838    20.2  16,726    88.0    4.36   110   0.029\n&#39;    \n&#39;    Sanders, Barry     153  3,062    20.0  15,269    99.8    4.99    99   0.032\n&#39;    \n&#39;    Brown, Jim         118  2,359    20.0  12,312   104.3    5.22   106   0.045\n&#39;    \n&#39;    Dickerson, Eric    144  2,996    20.8  13,259    92.1    4.43    90   0.030\n&#39;    \n&#39;    Faulk, Marshall    176  2,836    16.1  12,279    69.8    4.33   100   0.035\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`5.Class#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Organization of runningBacks 5-tuple:\n      //    Component 1: Player name\n      //    Component 2: Number of games played\n      //    Component 3: Number of attempts (carries)\n      //    Component 4: Number of yards gained \n      //    Component 5: Number of touchdowns   \n      Tuple&lt;string, int, int, int, int&gt;[] runningBacks =\n           { Tuple.Create(&quot;Payton, Walter&quot;, 190, 3838, 16726, 110),  \n             Tuple.Create(&quot;Sanders, Barry&quot;, 153, 3062, 15269, 99),            \n             Tuple.Create(&quot;Brown, Jim&quot;, 118, 2359, 12312, 106),            \n             Tuple.Create(&quot;Dickerson, Eric&quot;, 144, 2996, 13259, 90),            \n             Tuple.Create(&quot;Faulk, Marshall&quot;, 176, 2836, 12279, 100) }; \n      // Calculate statistics.\n      // Organization of runningStats 5-tuple:\n      //    Component 1: Player name\n      //    Component 2: Number of attempts per game\n      //    Component 3: Number of yards per game\n      //    Component 4: Number of yards per attempt \n      //    Component 5: Number of touchdowns per attempt   \n      Tuple&lt;string, double, double, double, double&gt;[] runningStats  = \n          ComputeStatistics(runningBacks);\n\n      // Display the result.          \n      Console.WriteLine(&quot;{0,-16} {1,5} {2,6} {3,7} {4,7} {5,7} {6,7} {7,5} {8,7}\\n&quot;, \n                        &quot;Name&quot;, &quot;Games&quot;, &quot;Att&quot;, &quot;Att/Gm&quot;, &quot;Yards&quot;, &quot;Yds/Gm&quot;,\n                        &quot;Yds/Att&quot;, &quot;TD&quot;, &quot;TD/Att&quot;);\n      for (int ctr = 0; ctr &lt; runningBacks.Length; ctr++)\n         Console.WriteLine(&quot;{0,-16} {1,5} {2,6:N0} {3,7:N1} {4,7:N0} {5,7:N1} {6,7:N2} {7,5} {8,7:N3}\\n&quot;, \n                           runningBacks[ctr].Item1, runningBacks[ctr].Item2, runningBacks[ctr].Item3, \n                           runningStats[ctr].Item2, runningBacks[ctr].Item4, runningStats[ctr].Item3, \n                           runningStats[ctr].Item4, runningBacks[ctr].Item5, runningStats[ctr].Item5);\n   }\n\n   private static Tuple&lt;string, double, double, double, double&gt;[] ComputeStatistics(\n                Tuple&lt;string, int, int, int, int&gt;[] players) \n   {\n      Tuple&lt;string, double, double, double, double&gt; result; \n      var list = new List&lt;Tuple&lt;string, double, double, double, double&gt;&gt;();\n      \n      foreach (var player in players)\n      {\n         // Create result object containing player name and statistics.\n         result = Tuple.Create(player.Item1,  \n                               player.Item3/((double)player.Item2), \n                               player.Item4/((double)player.Item2),\n                               player.Item4/((double)player.Item3), \n                               player.Item5/((double)player.Item3));\n         list.Add(result);         \n      }\n      return list.ToArray();  \n   }\n}\n// The example displays the following output:\n//    Name             Games    Att  Att/Gm   Yards  Yds/Gm Yds/Att    TD  TD/Att\n//    \n//    Payton, Walter     190  3,838    20.2  16,726    88.0    4.36   110   0.029\n//    \n//    Sanders, Barry     153  3,062    20.0  15,269    99.8    4.99    99   0.032\n//    \n//    Brown, Jim         118  2,359    20.0  12,312   104.3    5.22   106   0.045\n//    \n//    Dickerson, Eric    144  2,996    20.8  13,259    92.1    4.43    90   0.030\n//    \n//    Faulk, Marshall    176  2,836    16.1  12,279    69.8    4.33   100   0.035\n</code></pre></li>\n<li><p>To return multiple values from a method without the use of <code>out</code> parameters (in C#) or <code>ByRef</code> parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the name of the player, in an array of Tuple(T1, objects.  </p>\n</li>\n<li><p>To pass multiple values to a method through a single parameter. For example, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">System.Threading.Thread.Start(Object)</a> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a Tuple(T1, object as the method argument, you can supply the threadâ€™s startup routine with five items of data.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5__ctor__0__1__2__3__4_\" data-linktype=\"self-bookmark\">Tuple&lt;T1,T2,T3,T4,T5&gt;(T1,T2,T3,T4,T5)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`5</span> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_Item1\" data-linktype=\"self-bookmark\">Item1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s first component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_Item2\" data-linktype=\"self-bookmark\">Item2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s second component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_Item3\" data-linktype=\"self-bookmark\">Item3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s third component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_Item4\" data-linktype=\"self-bookmark\">Item4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s fourth component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_Item5\" data-linktype=\"self-bookmark\">Item5</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s fifth component.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`5</span> object is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`5</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`5</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">IStructuralComparable.CompareTo(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`5</span> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`5</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.GetHashCode(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`5</span> object by using a specified computation method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_5_System_IComparable_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">IComparable.CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`5</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5__ctor__0__1__2__3__4_\">\r\n    \r\n            <a id=\"System_Tuple_5__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5&gt;(T1,T2,T3,T4,T5)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`5</span> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s first component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s second component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s third component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item4</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T4</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s fourth component</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item5</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T5</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s fifth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also use the static <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__5___0___1___2___3___4_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4,T5&gt;(T1,T2,T3,T4,T5)</a> method to instantiate a 5-tuple object without having to explicitly specify the types of its components. The following example uses the <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__5___0___1___2___3___4_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4,T5&gt;(T1,T2,T3,T4,T5)</a> method to instantiate a 5-tuple whose first component is of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and its remaining four components are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#9\">            var tuple5 = Tuple.Create(&quot;New York&quot;, 1990, 7322564, 2000, 8008278);\n            Console.WriteLine(&quot;{0}: {1:N0} in {2}, {3:N0} in {4}&quot;,\n                              tuple5.Item1, tuple5.Item3, tuple5.Item2,\n                              tuple5.Item5, tuple5.Item4);\n            // Displays New York: 7,322,564 in 1990, 8,008,278 in 2000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#9\">        Dim tuple5 = Tuple.Create(&quot;New York&quot;, 1990, 7322564, 2000, \n                                  8008278)\n        Console.WriteLine(&quot;{0}: {1:N0} in {2}, {3:N0} in {4}&quot;,\n                          tuple5.Item1, tuple5.Item3, tuple5.Item2,\n                          tuple5.Item5, tuple5.Item4)\n        &#39; Displays New York: 7,322,564 in 1990, 8,008,278 in 2000\n</code></pre><p> This is equivalent to the following call to the Tuple(T1, class constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#10\">            var tuple5 = new Tuple&lt;string, int, int, int, int&gt;\n                                  (&quot;New York&quot;, 1990, 7322564, 2000, 8008278);\n            Console.WriteLine(&quot;{0}: {1:N0} in {2}, {3:N0} in {4}&quot;,\n                              tuple5.Item1, tuple5.Item3, tuple5.Item2,\n                              tuple5.Item5, tuple5.Item4);\n            // Displays New York: 7,322,564 in 1990, 8,008,278 in 2000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#10\">        Dim tuple5 = New Tuple(Of String, Integer, Integer, \n                               Integer, Integer) _\n                               (&quot;New York&quot;, 1990, 7322564, 2000, 8008278)\n        Console.WriteLine(&quot;{0}: {1:N0} in {2}, {3:N0} in {4}&quot;,\n                          tuple5.Item1, tuple5.Item3, tuple5.Item2,\n                          tuple5.Item5, tuple5.Item4)\n        &#39; Displays New York: 7,322,564 in 1990, 8,008,278 in 2000\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_Item1\">\r\n    \r\n            <a id=\"System_Tuple_5_Item1_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item1</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s first component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T1 Item1 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s first component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item1 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item1 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> object, and retrieving the first element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.Item1#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define array of tuples reflecting population change by state, 1990-2000.\n      Tuple&lt;string, int, int, int, double&gt;[] statesData = \n         { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n           Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n           Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) };\n\n      // Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}<br>&quot;, &quot;State&quot;, \n                        &quot;Population 1990&quot;, &quot;Population 2000&quot;, &quot;Change&quot;, \n                        &quot;% Change&quot;);\n      foreach(Tuple&lt;string, int, int, int, double&gt; stateData in statesData)\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, \n                           stateData.Item1, stateData.Item2, \n                           stateData.Item3, stateData.Item4, stateData.Item5/100);      \n   }\n}\n// The example displays the following output:\n//    State          Population 1990   Population 2000         Change    % Change\n//    \n//    California          29,760,021        33,871,648      4,111,627      13.8 %\n//    Illinois            11,430,602        12,419,293        988,691       8.6 %\n//    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Define array of tuples reflecting population change by state, 1990-2000.\n      Dim statesData() = \n          { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n            Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n            Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) }\n      &#39; Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}&quot;, &quot;State&quot;, &quot;Population 1990&quot;, _\n                        &quot;Population 2000&quot;, &quot;Change&quot;, &quot;% Change&quot;)\n      Console.WriteLine()\n      For Each stateData As Tuple(Of String, Integer, Integer, Integer, Double) In statesData\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, _\n                           stateData.Item1, stateData.Item2, _\n                           stateData.Item3, stateData.Item4, stateData.Item5/100)      \n      Next                                                                    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    State          Population 1990   Population 2000         Change    % Change\n&#39;    \n&#39;    California          29,760,021        33,871,648      4,111,627      13.8 %\n&#39;    Illinois            11,430,602        12,419,293        988,691       8.6 %\n&#39;    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_Item2\">\r\n    \r\n            <a id=\"System_Tuple_5_Item2_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item2</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s second component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T2 Item2 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s second component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.Item1#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define array of tuples reflecting population change by state, 1990-2000.\n      Tuple&lt;string, int, int, int, double&gt;[] statesData = \n         { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n           Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n           Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) };\n\n      // Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}<br>&quot;, &quot;State&quot;, \n                        &quot;Population 1990&quot;, &quot;Population 2000&quot;, &quot;Change&quot;, \n                        &quot;% Change&quot;);\n      foreach(Tuple&lt;string, int, int, int, double&gt; stateData in statesData)\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, \n                           stateData.Item1, stateData.Item2, \n                           stateData.Item3, stateData.Item4, stateData.Item5/100);      \n   }\n}\n// The example displays the following output:\n//    State          Population 1990   Population 2000         Change    % Change\n//    \n//    California          29,760,021        33,871,648      4,111,627      13.8 %\n//    Illinois            11,430,602        12,419,293        988,691       8.6 %\n//    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Define array of tuples reflecting population change by state, 1990-2000.\n      Dim statesData() = \n          { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n            Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n            Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) }\n      &#39; Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}&quot;, &quot;State&quot;, &quot;Population 1990&quot;, _\n                        &quot;Population 2000&quot;, &quot;Change&quot;, &quot;% Change&quot;)\n      Console.WriteLine()\n      For Each stateData As Tuple(Of String, Integer, Integer, Integer, Double) In statesData\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, _\n                           stateData.Item1, stateData.Item2, _\n                           stateData.Item3, stateData.Item4, stateData.Item5/100)      \n      Next                                                                    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    State          Population 1990   Population 2000         Change    % Change\n&#39;    \n&#39;    California          29,760,021        33,871,648      4,111,627      13.8 %\n&#39;    Illinois            11,430,602        12,419,293        988,691       8.6 %\n&#39;    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_Item3\">\r\n    \r\n            <a id=\"System_Tuple_5_Item3_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item3</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s third component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T3 Item3 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s third component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.Item1#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define array of tuples reflecting population change by state, 1990-2000.\n      Tuple&lt;string, int, int, int, double&gt;[] statesData = \n         { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n           Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n           Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) };\n\n      // Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}<br>&quot;, &quot;State&quot;, \n                        &quot;Population 1990&quot;, &quot;Population 2000&quot;, &quot;Change&quot;, \n                        &quot;% Change&quot;);\n      foreach(Tuple&lt;string, int, int, int, double&gt; stateData in statesData)\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, \n                           stateData.Item1, stateData.Item2, \n                           stateData.Item3, stateData.Item4, stateData.Item5/100);      \n   }\n}\n// The example displays the following output:\n//    State          Population 1990   Population 2000         Change    % Change\n//    \n//    California          29,760,021        33,871,648      4,111,627      13.8 %\n//    Illinois            11,430,602        12,419,293        988,691       8.6 %\n//    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Define array of tuples reflecting population change by state, 1990-2000.\n      Dim statesData() = \n          { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n            Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n            Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) }\n      &#39; Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}&quot;, &quot;State&quot;, &quot;Population 1990&quot;, _\n                        &quot;Population 2000&quot;, &quot;Change&quot;, &quot;% Change&quot;)\n      Console.WriteLine()\n      For Each stateData As Tuple(Of String, Integer, Integer, Integer, Double) In statesData\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, _\n                           stateData.Item1, stateData.Item2, _\n                           stateData.Item3, stateData.Item4, stateData.Item5/100)      \n      Next                                                                    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    State          Population 1990   Population 2000         Change    % Change\n&#39;    \n&#39;    California          29,760,021        33,871,648      4,111,627      13.8 %\n&#39;    Illinois            11,430,602        12,419,293        988,691       8.6 %\n&#39;    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_Item4\">\r\n    \r\n            <a id=\"System_Tuple_5_Item4_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item4</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s fourth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T4 Item4 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T4</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s fourth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.Item1#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define array of tuples reflecting population change by state, 1990-2000.\n      Tuple&lt;string, int, int, int, double&gt;[] statesData = \n         { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n           Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n           Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) };\n\n      // Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}<br>&quot;, &quot;State&quot;, \n                        &quot;Population 1990&quot;, &quot;Population 2000&quot;, &quot;Change&quot;, \n                        &quot;% Change&quot;);\n      foreach(Tuple&lt;string, int, int, int, double&gt; stateData in statesData)\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, \n                           stateData.Item1, stateData.Item2, \n                           stateData.Item3, stateData.Item4, stateData.Item5/100);      \n   }\n}\n// The example displays the following output:\n//    State          Population 1990   Population 2000         Change    % Change\n//    \n//    California          29,760,021        33,871,648      4,111,627      13.8 %\n//    Illinois            11,430,602        12,419,293        988,691       8.6 %\n//    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Define array of tuples reflecting population change by state, 1990-2000.\n      Dim statesData() = \n          { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n            Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n            Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) }\n      &#39; Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}&quot;, &quot;State&quot;, &quot;Population 1990&quot;, _\n                        &quot;Population 2000&quot;, &quot;Change&quot;, &quot;% Change&quot;)\n      Console.WriteLine()\n      For Each stateData As Tuple(Of String, Integer, Integer, Integer, Double) In statesData\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, _\n                           stateData.Item1, stateData.Item2, _\n                           stateData.Item3, stateData.Item4, stateData.Item5/100)      \n      Next                                                                    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    State          Population 1990   Population 2000         Change    % Change\n&#39;    \n&#39;    California          29,760,021        33,871,648      4,111,627      13.8 %\n&#39;    Illinois            11,430,602        12,419,293        988,691       8.6 %\n&#39;    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_Item5\">\r\n    \r\n            <a id=\"System_Tuple_5_Item5_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item5</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s fifth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T5 Item5 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T5</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`5</span> object&#39;s fifth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the <a class=\"xref\" href=\"system.tuple-4#System_Tuple_4_Item2_\" data-linktype=\"relative-path\">Item2</a> property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects whose components contain the name of a state in the United Dates, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.Item1#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define array of tuples reflecting population change by state, 1990-2000.\n      Tuple&lt;string, int, int, int, double&gt;[] statesData = \n         { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n           Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n           Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) };\n\n      // Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}<br>&quot;, &quot;State&quot;, \n                        &quot;Population 1990&quot;, &quot;Population 2000&quot;, &quot;Change&quot;, \n                        &quot;% Change&quot;);\n      foreach(Tuple&lt;string, int, int, int, double&gt; stateData in statesData)\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, \n                           stateData.Item1, stateData.Item2, \n                           stateData.Item3, stateData.Item4, stateData.Item5/100);      \n   }\n}\n// The example displays the following output:\n//    State          Population 1990   Population 2000         Change    % Change\n//    \n//    California          29,760,021        33,871,648      4,111,627      13.8 %\n//    Illinois            11,430,602        12,419,293        988,691       8.6 %\n//    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Define array of tuples reflecting population change by state, 1990-2000.\n      Dim statesData() = \n          { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n            Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n            Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) }\n      &#39; Display the items of each tuple\n      Console.WriteLine(&quot;{0,-12}{1,18}{2,18}{3,15}{4,12}&quot;, &quot;State&quot;, &quot;Population 1990&quot;, _\n                        &quot;Population 2000&quot;, &quot;Change&quot;, &quot;% Change&quot;)\n      Console.WriteLine()\n      For Each stateData As Tuple(Of String, Integer, Integer, Integer, Double) In statesData\n         Console.WriteLine(&quot;{0,-12}{1,18:N0}{2,18:N0}{3,15:N0}{4,12:P1}&quot;, _\n                           stateData.Item1, stateData.Item2, _\n                           stateData.Item3, stateData.Item4, stateData.Item5/100)      \n      Next                                                                    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    State          Population 1990   Population 2000         Change    % Change\n&#39;    \n&#39;    California          29,760,021        33,871,648      4,111,627      13.8 %\n&#39;    Illinois            11,430,602        12,419,293        988,691       8.6 %\n&#39;    Washington           4,866,692         5,894,121      1,027,429      21.1 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_5_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`5</span> object is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>obj</code> parameter is considered to be equal to the current instance under the following conditions:  </p>\n<ul>\n<li><p>It is a <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> object.  </p>\n</li>\n<li><p>Its five components are of the same types as the current instance.  </p>\n</li>\n<li><p>Its five components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of 5-tuple objects that contain data about the temperatures of patients in two test groups. The first component of the array provides the number of the test group, and the second through fifth components provide the temperatures of a patient at hourly intervals. The Equals method is called to compare every <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> object with every other <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> object. The output illustrates that the Equals method returns <code>true</code> only when all five components of the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects have equal values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`5.Equals#1\">Module Example\n   Public Sub Main()\n      Dim temperatureInfos() = \n             { Tuple.Create(2, 97.9, 97.8, 98.0, 98.2), \n               Tuple.Create(1, 98.6, 98.8, 98.8, 99.0),  \n               Tuple.Create(2, 98.6, 98.6, 98.6, 98.4), \n               Tuple.Create(1, 98.4, 98.6, 99.0, 99.2), \n               Tuple.Create(2, 98.6, 98.6, 98.6, 98.4), \n               Tuple.Create(1, 98.6, 98.8, 98.8, 99.0) } \n      &#39; Compare each item with every other item for equality.\n      For ctr As Integer = 0 To temperatureInfos.Length - 1\n         Dim temperatureInfo = temperatureInfos(ctr)\n         For ctr2 As Integer = ctr + 1 To temperatureInfos.Length - 1\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, temperatureInfo, temperatureInfos(ctr2), \n                                                temperatureInfo.Equals(temperatureInfos(ctr2)))\n         Next  \n         Console.WriteLine()                                               \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    (2, 97.9, 97.8, 98, 98.2) = (1, 98.6, 98.8, 98.8, 99): False\n&#39;    (2, 97.9, 97.8, 98, 98.2) = (2, 98.6, 98.6, 98.6, 98.4): False\n&#39;    (2, 97.9, 97.8, 98, 98.2) = (1, 98.4, 98.6, 99, 99.2): False\n&#39;    (2, 97.9, 97.8, 98, 98.2) = (2, 98.6, 98.6, 98.6, 98.4): False\n&#39;    (2, 97.9, 97.8, 98, 98.2) = (1, 98.6, 98.8, 98.8, 99): False\n&#39;    \n&#39;    (1, 98.6, 98.8, 98.8, 99) = (2, 98.6, 98.6, 98.6, 98.4): False\n&#39;    (1, 98.6, 98.8, 98.8, 99) = (1, 98.4, 98.6, 99, 99.2): False\n&#39;    (1, 98.6, 98.8, 98.8, 99) = (2, 98.6, 98.6, 98.6, 98.4): False\n&#39;    (1, 98.6, 98.8, 98.8, 99) = (1, 98.6, 98.8, 98.8, 99): True\n&#39;    \n&#39;    (2, 98.6, 98.6, 98.6, 98.4) = (1, 98.4, 98.6, 99, 99.2): False\n&#39;    (2, 98.6, 98.6, 98.6, 98.4) = (2, 98.6, 98.6, 98.6, 98.4): True\n&#39;    (2, 98.6, 98.6, 98.6, 98.4) = (1, 98.6, 98.8, 98.8, 99): False\n&#39;    \n&#39;    (1, 98.4, 98.6, 99, 99.2) = (2, 98.6, 98.6, 98.6, 98.4): False\n&#39;    (1, 98.4, 98.6, 99, 99.2) = (1, 98.6, 98.8, 98.8, 99): False\n&#39;    \n&#39;    (2, 98.6, 98.6, 98.6, 98.4) = (1, 98.6, 98.8, 98.8, 99): False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`5.Equals#1\">using System;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      Tuple&lt;int, double, double, double, double&gt;[] temperatureInfos = \n                           { Tuple.Create(2, 97.9, 97.8, 98.0, 98.2),\n                             Tuple.Create(1, 98.6, 98.8, 98.8, 99.0), \n                             Tuple.Create(2, 98.6, 98.6, 98.6, 98.4),\n                             Tuple.Create(1, 98.4, 98.6, 99.0, 99.2),\n                             Tuple.Create(2, 98.6, 98.6, 98.6, 98.4),\n                             Tuple.Create(1, 98.6, 98.8, 98.8, 99.0) }; \n      // Compare each item with every other item for equality.\n      for (int ctr = 0; ctr &lt; temperatureInfos.Length; ctr++)\n      {\n         var temperatureInfo = temperatureInfos[ctr];\n         for (int ctr2 = ctr + 1; ctr2 &lt; temperatureInfos.Length; ctr2++)\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, temperatureInfo, temperatureInfos[ctr2], \n                                                temperatureInfo.Equals(temperatureInfos[ctr2]));\n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output:\n//    (2, 97.9, 97.8, 98, 98.2) = (1, 98.6, 98.8, 98.8, 99): False\n//    (2, 97.9, 97.8, 98, 98.2) = (2, 98.6, 98.6, 98.6, 98.4): False\n//    (2, 97.9, 97.8, 98, 98.2) = (1, 98.4, 98.6, 99, 99.2): False\n//    (2, 97.9, 97.8, 98, 98.2) = (2, 98.6, 98.6, 98.6, 98.4): False\n//    (2, 97.9, 97.8, 98, 98.2) = (1, 98.6, 98.8, 98.8, 99): False\n//    \n//    (1, 98.6, 98.8, 98.8, 99) = (2, 98.6, 98.6, 98.6, 98.4): False\n//    (1, 98.6, 98.8, 98.8, 99) = (1, 98.4, 98.6, 99, 99.2): False\n//    (1, 98.6, 98.8, 98.8, 99) = (2, 98.6, 98.6, 98.6, 98.4): False\n//    (1, 98.6, 98.8, 98.8, 99) = (1, 98.6, 98.8, 98.8, 99): True\n//    \n//    (2, 98.6, 98.6, 98.6, 98.4) = (1, 98.4, 98.6, 99, 99.2): False\n//    (2, 98.6, 98.6, 98.6, 98.4) = (2, 98.6, 98.6, 98.6, 98.4): True\n//    (2, 98.6, 98.6, 98.6, 98.4) = (1, 98.6, 98.8, 98.8, 99): False\n//    \n//    (1, 98.4, 98.6, 99, 99.2) = (2, 98.6, 98.6, 98.6, 98.4): False\n//    (1, 98.4, 98.6, 99, 99.2) = (1, 98.6, 98.8, 98.8, 99): False\n//    \n//    (2, 98.6, 98.6, 98.6, 98.4) = (1, 98.6, 98.8, 98.8, 99): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_GetHashCode\">\r\n    \r\n            <a id=\"System_Tuple_5_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`5</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_ToString\">\r\n    \r\n            <a id=\"System_Tuple_5_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`5</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of this <span class=\"xref\">stem.Tuple`5</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string returned by this method takes the form (<em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>, <code>Item5</code>), where <em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>, and <code>Item5</code> represent the values of the <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item3_\" data-linktype=\"relative-path\">Item3</a>, <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item4_\" data-linktype=\"relative-path\">Item4</a>, and <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item5_\" data-linktype=\"relative-path\">Item5</a> properties, respectively. If any of the property values is <code>null</code>, it is represented as <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the ToString method. It displays an array of 5-tuple objects that contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the annual rate of population change.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.ToString#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define array of tuples reflecting population change by state, 1990-2000.\n      Tuple&lt;string, int, int, int, double&gt;[] populationChanges = \n           { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8), \n             Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6), \n             Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) };\n      // Display each tuple.\n      foreach (var item in populationChanges)\n         Console.WriteLine(item.ToString());\n   }\n}\n// The example displays the following output:\n//       (California, 29760021, 33871648, 4111627, 13.8)\n//       (Illinois, 11430602, 12419293, 988691, 8.6)\n//       (Washington, 4866692, 5894121, 1027429, 21.1)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.ToString#1\">Module Example\n   Public Sub Main()\n      &#39; Define array of tuples reflecting population change by state, 1990-2000.\n      Dim populationChanges() = \n            { Tuple.Create(&quot;California&quot;, 29760021, 33871648, 4111627, 13.8),\n              Tuple.Create(&quot;Illinois&quot;, 11430602, 12419293, 988691, 8.6),\n              Tuple.Create(&quot;Washington&quot;, 4866692, 5894121, 1027429, 21.1) }\n      &#39; Display each tuple.\n      For Each item In populationChanges\n         Console.WriteLine(item.ToString())\n      Next                                                                    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (California, 29760021, 33871648, 4111627, 13.8)\n&#39;       (Illinois, 11430602, 12419293, 988691, 8.6)\n&#39;       (Washington, 4866692, 5894121, 1027429, 21.1)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Tuple_5_System_Collections_IStructuralComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralComparable.CompareTo(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`5</span> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides custom rules for comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>other</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is not a <span class=\"xref\">stem.Tuple`5</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralcomparable\" data-linktype=\"relative-path\">IStructuralComparable</a> interface.  </p>\n<p> Although this method can be called directly, it is most commonly called by collection-sorting methods that include <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> parameters to order the members of a collection. For example, it is called by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method and the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a> method of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object that is instantiated by using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList__ctor_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Collections.SortedList.SortedList(IComparer)</a> constructor.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"relative-path\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects that contain career statistical data for running backs in American professional football. The 5-tuple&#39;s components consist of the player&#39;s name, the number of games in which he played, the number of carries or attempts, the total number of yards gained, and the number of touchdowns scored. The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_ToString_\" data-linktype=\"relative-path\">ToString</a> to display each tuple in sorted order. To sort the array, the example defines a generic <code>YardsGained</code> class that implements the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface and sorts the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects in descending order by the value of their fourth component (yards gained) rather than by their first component. Note that the example does not directly call the IStructuralComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.CompareTo#2\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class YardsGained&lt;T1, T2, T3, T4, T5&gt; : IComparer\n{\n   public int Compare(object x, object y)\n   {\n      Tuple&lt;T1, T2, T3, T4, T5&gt; tX = x as Tuple&lt;T1, T2, T3, T4, T5&gt;;\n      if (tX == null)\n      { \n         return 0;\n      }   \n      else\n      {\n         Tuple&lt;T1, T2, T3, T4, T5&gt; tY = y as Tuple&lt;T1, T2, T3, T4, T5&gt;;\n         return -1 * Comparer&lt;T4&gt;.Default.Compare(tX.Item4, tY.Item4);             \n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Organization of runningBacks 5-tuple:\n      //    Component 1: Player name\n      //    Component 2: Number of games played\n      //    Component 3: Number of attempts (carries)\n      //    Component 4: Number of yards gained \n      //    Component 5: Number of touchdowns   \n      Tuple&lt;string, int, int, int, int&gt;[] runningBacks =\n           { Tuple.Create(&quot;Payton, Walter&quot;, 190, 3838, 16726, 110),  \n             Tuple.Create(&quot;Sanders, Barry&quot;, 153, 3062, 15269, 99),            \n             Tuple.Create(&quot;Brown, Jim&quot;, 118, 2359, 12312, 106),            \n             Tuple.Create(&quot;Dickerson, Eric&quot;, 144, 2996, 13259, 90),            \n             Tuple.Create(&quot;Faulk, Marshall&quot;, 176, 2836, 12279, 100) }; \n\n      // Display the array in unsorted order.\n      Console.WriteLine(&quot;The values in unsorted order:&quot;);\n      foreach (var runningBack in runningBacks)\n         Console.WriteLine(runningBack.ToString());\n      Console.WriteLine();\n      \n      // Sort the array\n      Array.Sort(runningBacks, new YardsGained&lt;string, int, int, int, int&gt;());\n      \n      // Display the array in sorted order.\n      Console.WriteLine(&quot;The values in sorted order:&quot;);\n      foreach (var runningBack in runningBacks)\n         Console.WriteLine(runningBack.ToString());\n   }\n}\n// The example displays the following output:\n//       The values in unsorted order:\n//       (Payton, Walter, 190, 3838, 16726, 110)\n//       (Sanders, Barry, 153, 3062, 15269, 99)\n//       (Brown, Jim, 118, 2359, 12312, 106)\n//       (Dickerson, Eric, 144, 2996, 13259, 90)\n//       (Faulk, Marshall, 176, 2836, 12279, 100)\n//       \n//       The values in sorted order:\n//       (Brown, Jim, 118, 2359, 12312, 106)\n//       (Dickerson, Eric, 144, 2996, 13259, 90)\n//       (Faulk, Marshall, 176, 2836, 12279, 100)\n//       (Payton, Walter, 190, 3838, 16726, 110)\n//       (Sanders, Barry, 153, 3062, 15269, 99)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.CompareTo#2\">Imports System.Collections\nImports System.Collections.Generic\n\nPublic Class YardsGained(Of T1, T2, T3, T4, T5) : Implements IComparer\n   Public Function Compare(x As Object, y As Object) As Integer _\n                   Implements IComparer.Compare\n      Dim tX As Tuple(Of T1, T2, T3, T4, T5) = TryCast(x, Tuple(Of T1, T2, T3, T4, T5))\n      If tX Is Nothing Then\n         Return 0\n      Else\n         Dim tY As Tuple(Of T1, T2, T3, T4, T5) = DirectCast(y, Tuple(Of T1, T2, T3, T4, T5))\n         Return -1 * Comparer(Of T4).Default.Compare(tx.Item4, tY.Item4)             \n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      &#39; Organization of runningBacks 5-tuple:\n      &#39;    Component 1: Player name\n      &#39;    Component 2: Number of games played\n      &#39;    Component 3: Number of attempts (carries)\n      &#39;    Component 4: Number of yards gained \n      &#39;    Component 5: Number of touchdowns   \n      Dim runningBacks() =\n          { Tuple.Create(&quot;Payton, Walter&quot;, 190, 3838, 16726, 110),  \n            Tuple.Create(&quot;Sanders, Barry&quot;, 153, 3062, 15269, 99),            \n            Tuple.Create(&quot;Brown, Jim&quot;, 118, 2359, 12312, 106),            \n            Tuple.Create(&quot;Dickerson, Eric&quot;, 144, 2996, 13259, 90),            \n            Tuple.Create(&quot;Faulk, Marshall&quot;, 176, 2836, 12279, 100) } \n\n      &#39; Display the array in unsorted order.\n      Console.WriteLine(&quot;The values in unsorted order:&quot;)\n      For Each runningBack In runningBacks\n         Console.WriteLine(runningBack.ToString())\n      Next\n      Console.WriteLine()\n      \n      &#39; Sort the array\n      Array.Sort(runningBacks, New YardsGained(Of String, Integer, Integer, Integer, Integer)())\n      \n      &#39; Display the array in sorted order.\n      Console.WriteLine(&quot;The values in sorted order:&quot;)\n      For Each runningBack In runningBacks\n         Console.WriteLine(runningBack.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The values in unsorted order:\n&#39;       (Payton, Walter, 190, 3838, 16726, 110)\n&#39;       (Sanders, Barry, 153, 3062, 15269, 99)\n&#39;       (Brown, Jim, 118, 2359, 12312, 106)\n&#39;       (Dickerson, Eric, 144, 2996, 13259, 90)\n&#39;       (Faulk, Marshall, 176, 2836, 12279, 100)\n&#39;       \n&#39;       The values in sorted order:\n&#39;       (Payton, Walter, 190, 3838, 16726, 110)\n&#39;       (Sanders, Barry, 153, 3062, 15269, 99)\n&#39;       (Dickerson, Eric, 144, 2996, 13259, 90)\n&#39;       (Brown, Jim, 118, 2359, 12312, 106)\n&#39;       (Faulk, Marshall, 176, 2836, 12279, 100)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_5_System_Collections_IStructuralEquatable_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.Equals(Object,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`5</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation is called only if <code>other</code> is not <code>null</code>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> object whose components are of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item1_\" data-linktype=\"relative-path\">Item1</a> values of the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects to be compared to the <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation. If this method call returns <code>true</code>, the method is called again and passed the <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item2_\" data-linktype=\"relative-path\">Item2</a> values of the two <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects. This continues until the method call returns <code>false</code> when it compares a specific pair of <code>Item</code> values, or the two <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Item5_\" data-linktype=\"relative-path\">Item5</a> values are passed to the method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>DoubleComparer</code> class that implements the <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> interface. The example instantiates two <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects by using a random number generator to populate their second through fifth components, casts the first instance to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface, and then uses a <code>DoubleComparer</code> object to test the two <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects for approximate equality.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.Equals#2\">using System;\nusing System.Collections;\n\npublic class DoubleComparer&lt;T1, T2, T3, T4, T5&gt; : IEqualityComparer\n{\n   private double difference;\n   private int argument = 0;\n   \n   public DoubleComparer(double difference)\n   {\n      this.difference = difference;\n   }\n   \n   new public bool Equals(object x, object y)\n   { \n      argument += 1;\n      \n      // Return true for Item1.\n      if (argument == 1) return true;\n\n      double d1 = (double) x;\n      double d2 = (double) y;\n\n      if (d1 - d2 &lt; d1 * difference)\n         return true;\n      else            \n         return false;\n   }\n   \n   public int GetHashCode(object obj)\n   {\n      if (obj is T1)\n         return ((T1) obj).GetHashCode();\n      else if (obj is T2)\n         return ((T2) obj).GetHashCode();\n      else if (obj is T3)\n         return ((T3) obj).GetHashCode();\n      else if (obj is T4)\n         return ((T4) obj).GetHashCode();\n      else\n         return ((T5) obj).GetHashCode();   \n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var value1 = GetValues(1);\n      var value2 = GetValues(2);\n      IStructuralEquatable iValue1 = value1;\n      Console.WriteLine(&quot;{0} =<br>{1} :<br>{2}&quot;, value1, value2, \n                        iValue1.Equals(value2, \n                        new DoubleComparer&lt;int, double, double, double, double&gt;(.01)));\n   }\n\n   private static Tuple&lt;int, double, double, double, double&gt; GetValues(int ctr)\n   {\n      // Generate four random numbers between 0 and 1\n      Random rnd = new Random((int)DateTime.Now.Ticks &gt;&gt; 32 &gt;&gt; ctr);\n      return Tuple.Create(ctr, rnd.NextDouble(), rnd.NextDouble(), \n                          rnd.NextDouble(), rnd.NextDouble());\n   }                                   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.Equals#2\">Imports System.Collections\n\nPublic Class DoubleComparer(Of T1, T2, T3, T4, T5) : Implements IEqualityComparer\n   Private difference As Double\n   Private argument As Integer = 0\n   \n   Public Sub New(difference As Double)\n      Me.difference = difference\n   End Sub\n   \n   Public Overloads Function Equals(x As Object, y As Object) As Boolean _\n                   Implements IEqualityComparer.Equals\n      argument += 1\n      \n      &#39; Return true for Item1.\n      If argument = 1 Then\n         Return True\n      Else\n         Dim d1 As Double = CDbl(x)\n         Dim d2 As Double = CDbl(y)\n         If d1 - d2 &lt; d1 * difference Then\n            Return True\n         Else            \n            Return False\n         End If\n      End If\n   End Function\n   \n   Public Overloads Function GetHashCode(obj As Object) As Integer _\n                    Implements IEqualityComparer.GetHashCode\n      If TypeOf obj Is T1 Then\n         Return CType(obj, T1).GetHashCode()\n      ElseIf TypeOf obj Is T2 Then\n         Return CType(obj, T2).GetHashCode()\n      ElseIf TypeOf obj Is T3 Then\n         Return CType(Obj, T3).GetHashCode()\n      ElseIf TypeOf obj Is T4 Then\n         Return CType(Obj, T4).GetHashCode()\n      Else\t\n         Return CType(obj, T5).GetHashCode()\n      End If\n   End Function                \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim value1 = GetValues(1)\n      Dim value2 = GetValues(2)\n      Dim iValue1 As IStructuralEquatable = value1\n      Console.WriteLine(&quot;{0} ={3}{1} :{3}{2}&quot;, value1, value2, _\n                        iValue1.Equals(value2, _\n                        New DoubleComparer(Of Integer, Double, Double, Double, Double)(.01)), _\n                        vbCrLf)\n   End Sub\n   \n   Private Function GetValues(ctr As Integer) As Tuple(Of Integer, Double, Double, Double, Double)\n      &#39; Generate four random numbers between 0 and 1\n      Dim rnd As New Random(CInt((DateTime.Now.Ticks &gt;&gt; 32) &gt;&gt; ctr))\n      Return Tuple.Create(ctr, rnd.NextDouble(), rnd.NextDouble(), \n                          rnd.NextDouble(), rnd.NextDouble)\n   End Function                                   \nEnd Module\n&#39; The example displays output like the following:\n&#39;    (1, 0.910850029862882, 0.894596965934428, 0.319678635019659, 0.801647342649124) =\n&#39;    (2, 0.818546649915421, 0.355961162762698, 0.0438506622071614, 0.679904267042831) :\n&#39;    False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_5_System_Collections_IStructuralEquatable_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.GetHashCode(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`5</span> object by using a specified computation method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose <span class=\"xref\">stem.Collections.IEqualityComparer.GetHashCode*</span> method calculates the hash code of the current <span class=\"xref\">stem.Tuple`5</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The method simply wraps a call to the <code>comparer</code> object&#39;s <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> implementation.  </p>\n<p> The algorithm used to compute the hash code should return the same hash code for two <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects that are considered to be equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_5_System_IComparable_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_5_System_IComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IComparable.CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`5</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IComparable.CompareTo (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>obj</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>obj</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>obj</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a <span class=\"xref\">stem.Tuple`5</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> This method provides the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> implementation for the <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> class. Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> and <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a>, to order the members of a collection.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_Equals_System_Object_\" data-linktype=\"relative-path\">System.Tuple&lt;T1,T2,T3,T4,T5&gt;.Equals(Object)</a> method.  </p>\n</div>\n<p> The IComparable.CompareTo method uses the default object  comparer to compare each component.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-5\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5&gt;</a> objects that contain career statistics for running backs in American professional football. The five components consist of the player&#39;s name, the number of games in which he played, the number of carries or attempts, the total number of yards gained, and the number of touchdowns scored. The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <a class=\"xref\" href=\"system.tuple-5#System_Tuple_5_ToString_\" data-linktype=\"relative-path\">ToString</a> to display each tuple in sorted order. The output shows that the array has been sorted by name, which is the first component. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">Sort(Array)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`5.CompareTo#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Organization of runningBacks 5-tuple:\n      //    Component 1: Player name\n      //    Component 2: Number of games played\n      //    Component 3: Number of attempts (carries)\n      //    Component 4: Number of yards gained \n      //    Component 5: Number of touchdowns   \n      Tuple&lt;string, int, int, int, int&gt;[] runningBacks =\n           { Tuple.Create(&quot;Payton, Walter&quot;, 190, 3838, 16726, 110),  \n             Tuple.Create(&quot;Sanders, Barry&quot;, 153, 3062, 15269, 99),            \n             Tuple.Create(&quot;Brown, Jim&quot;, 118, 2359, 12312, 106),            \n             Tuple.Create(&quot;Dickerson, Eric&quot;, 144, 2996, 13259, 90),            \n             Tuple.Create(&quot;Faulk, Marshall&quot;, 176, 2836, 12279, 100) }; \n\n      // Display the array in unsorted order.\n      Console.WriteLine(&quot;The values in unsorted order:&quot;);\n      foreach (var runningBack in runningBacks)\n         Console.WriteLine(runningBack.ToString());\n      Console.WriteLine();\n      \n      // Sort the array\n      Array.Sort(runningBacks);\n      \n      // Display the array in sorted order.\n      Console.WriteLine(&quot;The values in sorted order:&quot;);\n      foreach (var runningBack in runningBacks)\n         Console.WriteLine(runningBack.ToString());\n   }\n}\n// The example displays the following output:\n//       The values in unsorted order:\n//       (Payton, Walter, 190, 3838, 16726, 110)\n//       (Sanders, Barry, 153, 3062, 15269, 99)\n//       (Brown, Jim, 118, 2359, 12312, 106)\n//       (Dickerson, Eric, 144, 2996, 13259, 90)\n//       (Faulk, Marshall, 176, 2836, 12279, 100)\n//       \n//       The values in sorted order:\n//       (Brown, Jim, 118, 2359, 12312, 106)\n//       (Dickerson, Eric, 144, 2996, 13259, 90)\n//       (Faulk, Marshall, 176, 2836, 12279, 100)\n//       (Payton, Walter, 190, 3838, 16726, 110)\n//       (Sanders, Barry, 153, 3062, 15269, 99)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`5.CompareTo#1\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      &#39; Organization of runningBacks 5-tuple:\n      &#39;    Component 1: Player name\n      &#39;    Component 2: Number of games played\n      &#39;    Component 3: Number of attempts (carries)\n      &#39;    Component 4: Number of yards gained \n      &#39;    Component 5: Number of touchdowns   \n      Dim runningBacks() =\n          { Tuple.Create(&quot;Payton, Walter&quot;, 190, 3838, 16726, 110),  \n            Tuple.Create(&quot;Sanders, Barry&quot;, 153, 3062, 15269, 99),            \n            Tuple.Create(&quot;Brown, Jim&quot;, 118, 2359, 12312, 106),            \n            Tuple.Create(&quot;Dickerson, Eric&quot;, 144, 2996, 13259, 90),            \n            Tuple.Create(&quot;Faulk, Marshall&quot;, 176, 2836, 12279, 100) } \n\n      &#39; Display the array in unsorted order.\n      Console.WriteLine(&quot;The values in unsorted order:&quot;)\n      For Each runningBack In runningBacks\n         Console.WriteLine(runningBack.ToString())\n      Next\n      Console.WriteLine()\n      \n      &#39; Sort the array\n      Array.Sort(runningBacks)\n      \n      &#39; Display the array in sorted order.\n      Console.WriteLine(&quot;The values in sorted order:&quot;)\n      For Each runningBack In runningBacks\n         Console.WriteLine(runningBack.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The values in unsorted order:\n&#39;       (Payton, Walter, 190, 3838, 16726, 110)\n&#39;       (Sanders, Barry, 153, 3062, 15269, 99)\n&#39;       (Brown, Jim, 118, 2359, 12312, 106)\n&#39;       (Dickerson, Eric, 144, 2996, 13259, 90)\n&#39;       (Faulk, Marshall, 176, 2836, 12279, 100)\n&#39;       \n&#39;       The values in sorted order:\n&#39;       (Brown, Jim, 118, 2359, 12312, 106)\n&#39;       (Dickerson, Eric, 144, 2996, 13259, 90)\n&#39;       (Faulk, Marshall, 176, 2836, 12279, 100)\n&#39;       (Payton, Walter, 190, 3838, 16726, 110)\n&#39;       (Sanders, Barry, 153, 3062, 15269, 99)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-5.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-5.yml\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.Item1\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.Item2\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.Item3\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.Item4\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.Item5\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.IStructuralComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.IStructuralEquatable.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.IStructuralEquatable.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.IComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5&gt;.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bfda106a-4ba4-577e-6b52-c65b8fcab072\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Tuple`5.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a 5-tuple, or quintuple.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Tuple`5\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-5.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-5.yml","open_to_public_contributors":true,"api_name":["System.Tuple<T1,T2,T3,T4,T5>","System.Tuple<T1,T2,T3,T4,T5>..ctor","System.Tuple<T1,T2,T3,T4,T5>.Equals","System.Tuple<T1,T2,T3,T4,T5>.GetHashCode","System.Tuple<T1,T2,T3,T4,T5>.Item1","System.Tuple<T1,T2,T3,T4,T5>.Item2","System.Tuple<T1,T2,T3,T4,T5>.Item3","System.Tuple<T1,T2,T3,T4,T5>.Item4","System.Tuple<T1,T2,T3,T4,T5>.Item5","System.Tuple<T1,T2,T3,T4,T5>.IStructuralComparable.CompareTo","System.Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.Equals","System.Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.GetHashCode","System.Tuple<T1,T2,T3,T4,T5>.IComparable.CompareTo","System.Tuple<T1,T2,T3,T4,T5>.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Tuple`5","System::Tuple`5","System.Tuple`5.#ctor","System::Tuple`5::#ctor","System.Tuple`5.Equals","System::Tuple`5::Equals","System.Tuple`5.GetHashCode","System::Tuple`5::GetHashCode","System.Tuple`5.Item1","System::Tuple`5::Item1","System.Tuple`5.Item2","System::Tuple`5::Item2","System.Tuple`5.Item3","System::Tuple`5::Item3","System.Tuple`5.Item4","System::Tuple`5::Item4","System.Tuple`5.Item5","System::Tuple`5::Item5","System.Tuple`5.System#Collections#IStructuralComparable#CompareTo","System::Tuple`5::System#Collections#IStructuralComparable#CompareTo","System.Tuple`5.System#Collections#IStructuralEquatable#Equals","System::Tuple`5::System#Collections#IStructuralEquatable#Equals","System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode","System::Tuple`5::System#Collections#IStructuralEquatable#GetHashCode","System.Tuple`5.System#IComparable#CompareTo","System::Tuple`5::System#IComparable#CompareTo","System.Tuple`5.ToString","System::Tuple`5::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bfda106a-4ba4-577e-6b52-c65b8fcab072","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Tuple`5.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Tuple`5.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Tuple<T1,T2,T3,T4,T5> class | Microsoft Docs","_op_ogTitle":"Tuple<T1,T2,T3,T4,T5> class","description":"Represents a 5-tuple, or quintuple.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Tuple`5","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-5","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-5","fileRelativePath":"System.Tuple-5.html"},"themesRelativePathToOutputRoot":"_themes/"}