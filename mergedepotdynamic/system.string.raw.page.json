{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">String</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents text as a sequence of UTF-16 code units.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class String : ICloneable, IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">String</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> A string is a sequential collection of characters that is used to represent text. A String object is a sequential collection of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">System.Char</a> objects that represent a string; a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">System.Char</a> object corresponds to a UTF-16 code unit. The value of the String object is the content of the sequential collection of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">System.Char</a> objects, and that value is immutable (that is, it is read-only). For more information about the immutability of strings, see the <a href=\"#Immutability\" data-linktype=\"self-bookmark\">Immutability and the StringBuilder class</a> section later in this topic. The maximum size of a String object in memory is 2GB, or about 1 billion characters.  </p>\n<p> In this section:  </p>\n<p> <a href=\"#Instantiation\" data-linktype=\"self-bookmark\">Instantiating a String object</a><br> <a href=\"#Characters\" data-linktype=\"self-bookmark\">Char objects and Unicode characters</a><br> <a href=\"#Unicode\" data-linktype=\"self-bookmark\">Strings and The Unicode Standard</a><br> <a href=\"#EmbeddedNulls\" data-linktype=\"self-bookmark\">Strings and embedded null characters</a><br> <a href=\"#Indexes\" data-linktype=\"self-bookmark\">Strings and indexes</a><br> <a href=\"#Nulls\" data-linktype=\"self-bookmark\">Null strings and empty strings</a><br> <a href=\"#Immutability\" data-linktype=\"self-bookmark\">Immutability and the StringBuilder class</a><br> <a href=\"#CultureSensitive\" data-linktype=\"self-bookmark\">Ordinal vs. culture-sensitive operations</a><br> <a href=\"#Normalization\" data-linktype=\"self-bookmark\">Normalization</a><br> <a href=\"#ByCategory\" data-linktype=\"self-bookmark\">String operations by category</a>  </p>\n<p><a name=\"Instantiation\"></a>   </p>\n<h2 id=\"instantiating-a-string-object\">Instantiating a String object</h2>\n<p> You can instantiate a String object in the following ways:  </p>\n<ul>\n<li><p>By assigning a string literal to a String variable. This is the most commonly used method for creating a string. The following example uses assignment to create several strings. Note that in C#, because the backslash (\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#1\">      Dim string1 As String = &quot;This is a string created by assignment.&quot;\n      Console.WriteLine(string1)\n      Dim string2 As String = &quot;The path is C:\\PublicDocuments\\Report1.doc&quot;\n      Console.WriteLine(string2)\n      &#39; The example displays the following output:\n      &#39;       This is a string created by assignment.\n      &#39;       The path is C:\\PublicDocuments\\Report1.doc      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#1\">string string1 = &quot;This is a string created by assignment.&quot;;\nConsole.WriteLine(string1);\nstring string2a = &quot;The path is C:\\\\PublicDocuments\\\\Report1.doc&quot;;\nConsole.WriteLine(string2a);\nstring string2b = @&quot;The path is C:\\PublicDocuments\\Report1.doc&quot;;\nConsole.WriteLine(string2b);\n// The example displays the following output:\n//       This is a string created by assignment.\n//       The path is C:\\PublicDocuments\\Report1.doc\n//       The path is C:\\PublicDocuments\\Report1.doc      \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#1\">using namespace System;\n\nvoid main()\n{\n   String^ string1 = &quot;This is a string created by assignment.&quot;;\n   Console::WriteLine(string1);\n   String^ string2a = &quot;The path is C:\\\\PublicDocuments\\\\Report1.doc&quot;;\n   Console::WriteLine(string2a);\n}\n// The example displays the following output: \n//       This is a string created by assignment. \n//       The path is C:\\PublicDocuments\\Report1.doc \n</code></pre></li>\n<li><p>By calling a String class constructor. The following example instantiates strings by calling several class constructors. Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters. Visual Basic does not support calls to these constructors. For detailed information about String constructors, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#2\">      Dim chars() As Char = { &quot;w&quot;c, &quot;o&quot;c, &quot;r&quot;c, &quot;d&quot;c }\n      \n      &#39; Create a string from a character array.\n      Dim string1 As New String(chars)\n      Console.WriteLine(string1)\n      \n      &#39; Create a string that consists of a character repeated 20 times.\n      Dim string2 As New String(&quot;c&quot;c, 20)\n      Console.WriteLine(string2)\n      &#39; The example displays the following output:\n      &#39;       word\n      &#39;       cccccccccccccccccccc      \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#2\">using namespace System;\n\nvoid main()\n{\n   wchar_t chars[5] = L&quot;word&quot;;\n   char bytes[6] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x00 };\n\n   // Create a string from a character array. \n   String^ string1 = gcnew String(chars);\n   Console::WriteLine(string1);\n\n   // Create a string that consists of a character repeated 20 times. \n   String^ string2 = gcnew String(&#39;c&#39;, 20);\n   Console::WriteLine(string2);\n\n   String^ stringFromBytes = nullptr;\n   String^ stringFromChars = nullptr;\n\n   char * pbytes = &amp;bytes[0];\n   // Create a string from a pointer to a signed byte array.\n   stringFromBytes = gcnew String(pbytes);\n\n   wchar_t* pchars =  &amp;chars[0];\n   // Create a string from a pointer to a character array.\n   stringFromChars = gcnew String(pchars);\n\n   Console::WriteLine(stringFromBytes);\n   Console::WriteLine(stringFromChars);\n   Console::ReadLine();\n}\n// The example displays the following output: \n//       word \n//       cccccccccccccccccccc \n//       ABCDE \n//       word  \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#2\">char[] chars = { &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;d&#39; };\nsbyte[] bytes = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x00 };\n\n// Create a string from a character array.\nstring string1 = new string(chars);\nConsole.WriteLine(string1);\n\n// Create a string that consists of a character repeated 20 times.\nstring string2 = new string(&#39;c&#39;, 20);\nConsole.WriteLine(string2);\n\nstring stringFromBytes = null;\nstring stringFromChars = null;\nunsafe\n{\n   fixed (sbyte* pbytes = bytes)\n   {\n      // Create a string from a pointer to a signed byte array.\n      stringFromBytes = new string(pbytes);\n   }\n   fixed (char* pchars = chars)\n   {\n      // Create a string from a pointer to a character array.\n      stringFromChars = new string(pchars);\n   }\n}\nConsole.WriteLine(stringFromBytes);\nConsole.WriteLine(stringFromChars);\n// The example displays the following output:\n//       word\n//       cccccccccccccccccccc\n//       ABCDE\n//       word  \n</code></pre></li>\n<li><p>By using the string concatenation operator (+ in C# and &amp; or + in Visual Basic) to create a single string from any combination of String instances and string literals. The following example illustrates the use of the string concatenation operator.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#3\">      Dim string1 As String = &quot;Today is &quot; + Date.Now.ToString(&quot;D&quot;) + &quot;.&quot;  \n      Console.WriteLine(string1)\n      Dim string2 As String = &quot;This is one sentence. &quot; + &quot;This is a second. &quot;\n      string2 += &quot;This is a third sentence.&quot;\n      Console.WriteLine(string2)      \n      &#39; The example displays output like the following:\n      &#39;    Today is Tuesday, July 06, 2011.\n      &#39;    This is one sentence. This is a second. This is a third sentence.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#3\">string string1 = &quot;Today is &quot; + DateTime.Now.ToString(&quot;D&quot;) + &quot;.&quot;;\nConsole.WriteLine(string1);\n\nstring string2 = &quot;This is one sentence. &quot; + &quot;This is a second. &quot;;\nstring2 += &quot;This is a third sentence.&quot;;\nConsole.WriteLine(string2);\n// The example displays output like the following:\n//    Today is Tuesday, July 06, 2011.\n//    This is one sentence. This is a second. This is a third sentence.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#3\">   String^ string1 = &quot;Today is &quot; + DateTime::Now.ToString(&quot;D&quot;) + &quot;.&quot;;\n   Console::WriteLine(string1);\n\n   String^ string2 = &quot;This is one sentence. &quot; + &quot;This is a second. &quot;;\n   string2 += &quot;This is a third sentence.&quot;;\n   Console::WriteLine(string2);\n   // The example displays output like the following: \n   //    Today is Tuesday, July 06, 2011. \n   //    This is one sentence. This is a second. This is a third sentence.\n</code></pre></li>\n<li><p>By retrieving a property or calling a method that returns a string. The following example uses the methods of the String class to extract a substring from a larger string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#4\">      Dim sentence As String = &quot;This sentence has five words.&quot;\n      &#39; Extract the second word.\n      Dim startPosition As Integer = sentence.IndexOf(&quot; &quot;) + 1\n      Dim word2 As String = sentence.Substring(startPosition, \n                                               sentence.IndexOf(&quot; &quot;, startPosition) - startPosition) \n      Console.WriteLine(&quot;Second word: &quot; + word2)\n      &#39; The example displays the following output:\n      &#39;       Second word: sentence\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#4\">string sentence = &quot;This sentence has five words.&quot;;\n// Extract the second word.\nint startPosition = sentence.IndexOf(&quot; &quot;) + 1;\nstring word2 = sentence.Substring(startPosition,\n                                  sentence.IndexOf(&quot; &quot;, startPosition) - startPosition);\nConsole.WriteLine(&quot;Second word: &quot; + word2);\n// The example displays the following output:\n//       Second word: sentence\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#4\">   String^ sentence = &quot;This sentence has five words.&quot;;\n   // Extract the second word.\n   int startPosition = sentence-&gt;IndexOf(&quot; &quot;) + 1;\n   String^ word2 = sentence-&gt;Substring(startPosition, \n                                       sentence-&gt;IndexOf(&quot; &quot;, startPosition) - startPosition);\n   Console::WriteLine(&quot;Second word: &quot; + word2);\n</code></pre></li>\n<li><p>By calling a formatting method to convert a value or object to its string representation. The following example uses the                <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting</a> feature to embed the string representation of two objects into a string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#5\">      Dim dateAndTime As DateTime = #07/06/2011 7:32:00AM#\n      Dim temperature As Double = 68.3\n      Dim result As String = String.Format(&quot;At {0:t} on {0:D}, the temperature was {1:F1} degrees Fahrenheit.&quot;,\n                                           dateAndTime, temperature)\n      Console.WriteLine(result)\n      &#39; The example displays the following output:\n      &#39;       At 7:32 AM on Wednesday, July 06, 2011, the temperature was 68.3 degrees Fahrenheit.      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#5\">DateTime dateAndTime = new DateTime(2011, 7, 6, 7, 32, 0);\ndouble temperature = 68.3;\nstring result = String.Format(&quot;At {0:t} on {0:D}, the temperature was {1:F1} degrees Fahrenheit.&quot;,\n                              dateAndTime, temperature);\nConsole.WriteLine(result);\n// The example displays the following output:\n//       At 7:32 AM on Wednesday, July 06, 2011, the temperature was 68.3 degrees Fahrenheit.      \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#5\">   DateTime^ dateAndTime = gcnew DateTime(2011, 7, 6, 7, 32, 0);\n   Double temperature = 68.3;\n   String^ result = String::Format(&quot;At {0:t} on {0:D}, the temperature was {1:F1} degrees Fahrenheit.&quot;,\n                                  dateAndTime, temperature);\n   Console::WriteLine(result);\n   // The example displays the following output: \n   //       At 7:32 AM on Wednesday, July 06, 2011, the temperature was 68.3 degrees Fahrenheit.      \n</code></pre></li>\n</ul>\n<p><a name=\"Characters\"></a>   </p>\n<h2 id=\"char-objects-and-unicode-characters\">Char objects and Unicode characters</h2>\n<p> Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character. Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Note that, because a String instance consists of a sequential collection of UTF-16 code units, it is possible to create a String object that is not a well-formed Unicode string. For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate. Although some methods, such as the methods of encoding and decoding objects in the <a class=\"xref\" href=\"system.text\" data-linktype=\"relative-path\">System.Text</a> namespace, may performs checks to ensure that strings are well-formed, String class members do not ensure that a string is well-formed.  </p>\n</div>\n<p> A single <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object usually represents a single code point; that is, the numeric value of the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> equals the code point. For example, the code point for the character &quot;a&quot; is U+0061. However, a code point might require more than one encoded element (more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object). The Unicode standard defines two types of characters that correspond to multiple <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.  </p>\n<ul>\n<li><p>A grapheme is represented by a base character followed by one or more combining characters. For example, the character ä is represented by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object whose code point is U+0061 followed by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object whose code point is U+0308. This character can also be defined by a single <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object that has a code point of U+00E4. As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not. However, if the two strings are normalized, an ordinal comparison also indicates that they are equal. (For more information on normalizing strings, see the <a href=\"#Normalization\" data-linktype=\"self-bookmark\">Normalization</a> section.)  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#2\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::IO;\n\nvoid main()\n{\n   StreamWriter^ sw = gcnew StreamWriter(&quot;.\\\\graphemes.txt&quot;);\n   String^ grapheme = L&quot;a&quot; + L&quot;\\u0308&quot;;\n   sw-&gt;WriteLine(grapheme);\n\n   String^ singleChar = &quot;\\u00e4&quot;;\n   sw-&gt;WriteLine(singleChar);\n\n   sw-&gt;WriteLine(&quot;{0} = {1} (Culture-sensitive): {2}&quot;, grapheme, singleChar, \n                  String::Equals(grapheme, singleChar, \n                              StringComparison::CurrentCulture));\n   sw-&gt;WriteLine(&quot;{0} = {1} (Ordinal): {2}&quot;, grapheme, singleChar, \n                  String::Equals(grapheme, singleChar, \n                              StringComparison::Ordinal));\n   sw-&gt;WriteLine(&quot;{0} = {1} (Normalized Ordinal): {2}&quot;, grapheme, singleChar, \n                  String::Equals(grapheme-&gt;Normalize(), \n                              singleChar-&gt;Normalize(), \n                              StringComparison::Ordinal));\n   sw-&gt;Close(); \n}\n// The example produces the following output: \n//       ä \n//       &#228; \n//       ä = &#228; (Culture-sensitive): True \n//       ä = &#228; (Ordinal): False \n//       ä = &#228; (Normalized Ordinal): True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#2\">using System;\nusing System.Globalization;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(@&quot;.\\graphemes.txt&quot;);\n      string grapheme = &quot;\\u0061\\u0308&quot;;\n      sw.WriteLine(grapheme);\n      \n      string singleChar = &quot;\\u00e4&quot;;\n      sw.WriteLine(singleChar);\n            \n      sw.WriteLine(&quot;{0} = {1} (Culture-sensitive): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme, singleChar, \n                                 StringComparison.CurrentCulture));\n      sw.WriteLine(&quot;{0} = {1} (Ordinal): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme, singleChar, \n                                 StringComparison.Ordinal));\n      sw.WriteLine(&quot;{0} = {1} (Normalized Ordinal): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme.Normalize(), \n                                 singleChar.Normalize(), \n                                 StringComparison.Ordinal));\n      sw.Close(); \n   }\n}\n// The example produces the following output:\n//       ä\n//       &#228;\n//       ä = &#228; (Culture-sensitive): True\n//       ä = &#228; (Ordinal): False\n//       ä = &#228; (Normalized Ordinal): True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#2\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;.\\graphemes.txt&quot;)\n      Dim grapheme As String = ChrW(&amp;H0061) + ChrW(&amp;h0308)\n      sw.WriteLine(grapheme)\n      \n      Dim singleChar As String = ChrW(&amp;h00e4)\n      sw.WriteLine(singleChar)\n            \n      sw.WriteLine(&quot;{0} = {1} (Culture-sensitive): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme, singleChar, \n                                 StringComparison.CurrentCulture))\n      sw.WriteLine(&quot;{0} = {1} (Ordinal): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme, singleChar, \n                                 StringComparison.Ordinal))\n      sw.WriteLine(&quot;{0} = {1} (Normalized Ordinal): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme.Normalize(), \n                                 singleChar.Normalize(), \n                                 StringComparison.Ordinal))\n      sw.Close() \n   End Sub\nEnd Module\n&#39; The example produces the following output:\n&#39;       ä\n&#39;       &#228;\n&#39;       ä = &#228; (Culture-sensitive): True\n&#39;       ä = &#228; (Ordinal): False\n&#39;       ä = &#228; (Normalized Ordinal): True\n</code></pre></li>\n<li><p>A Unicode supplementary code point (a surrogate pair) is represented by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object whose code point is a high surrogate followed by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object whose code point is a low surrogate. The code units of high surrogates range from U+D800 to U+DBFF. The code units of low surrogates range from U+DC00 to U+DFFF. Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes. The following example creates a surrogate character and passes it to the <a class=\"xref\" href=\"system.char#System_Char_IsSurrogatePair_System_Char_System_Char_\" data-linktype=\"relative-path\">System.Char.IsSurrogatePair(Char,Char)</a> method to determine whether it is a surrogate pair.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#3\">using namespace System;\n\nvoid main()\n{\n   String^ surrogate =  L&quot;\\xD800\\xDC03&quot; ;\n   for (int ctr = 0; ctr &lt; surrogate-&gt;Length; ctr++)\n      Console::Write(&quot;U+{0:X4} &quot;, Convert::ToUInt16(surrogate[ctr]));\n\n   Console::WriteLine();\n   Console::WriteLine(&quot;   Is Surrogate Pair: {0}&quot;, \n                      Char::IsSurrogatePair(surrogate[0], surrogate[1]));\n   Console::ReadLine();\n}\n// The example displays the following output: \n//       U+D800 U+DC03 \n//          Is Surrogate Pair: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string surrogate = &quot;\\uD800\\uDC03&quot;;\n      for (int ctr = 0; ctr &lt; surrogate.Length; ctr++) \n         Console.Write(&quot;U+{0:X2} &quot;, Convert.ToUInt16(surrogate[ctr]));\n\n      Console.WriteLine();\n      Console.WriteLine(&quot;   Is Surrogate Pair: {0}&quot;, \n                        Char.IsSurrogatePair(surrogate[0], surrogate[1]));\n   }\n}\n// The example displays the following output:\n//       U+D800 U+DC03\n//          Is Surrogate Pair: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#3\">Module Example\n   Public Sub Main()\n      Dim surrogate As String = ChrW(&amp;hD800) + ChrW(&amp;hDC03)\n      For ctr As Integer = 0 To surrogate.Length - 1\n         Console.Write(&quot;U+{0:X2} &quot;, Convert.ToUInt16(surrogate(ctr)))\n      Next   \n      Console.WriteLine()\n      Console.WriteLine(&quot;   Is Surrogate Pair: {0}&quot;, \n                        Char.IsSurrogatePair(surrogate(0), surrogate(1)))\n   End Sub\nEnd Module\n\n&#39; The example displays the following output:\n&#39;       U+D800 U+DC03\n&#39;          Is Surrogate Pair: True\n</code></pre></li>\n</ul>\n<p><a name=\"Unicode\"></a>   </p>\n<h2 id=\"strings-and-the-unicode-standard\">Strings and The Unicode Standard</h2>\n<p> Characters in a string are represented by UTF-16 encoded code units, which correspond to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values.  </p>\n<p> Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> enumeration. The category of a character or a surrogate pair can be determined by calling the <a class=\"xref\" href=\"system.globalization.charunicodeinfo#System_Globalization_CharUnicodeInfo_GetUnicodeCategory_\" data-linktype=\"relative-path\">GetUnicodeCategory</a> method.  </p>\n<p> The .NET Framework maintains its own table of characters and their corresponding categories, which ensures that a version of the .NET Framework running on different platforms returns identical character category information. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which their character categories are based.  </p>\n<table>\n<thead>\n<tr>\n<th>.NET Framework version</th>\n<th>Version of the Unicode Standard</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.NET Framework 1.1</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode4.0.0/\" data-linktype=\"external\">The Unicode Standard, Version 4.0.0</a></td>\n</tr>\n<tr>\n<td>The .NET Framework 2.0</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td> .NET Framework 3.5 </td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5.1</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5.2</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.6</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.6.1</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.6.2</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode8.0.0/\" data-linktype=\"external\">The Unicode Standard, Version 8.0.0</a></td>\n</tr>\n</tbody>\n</table>\n<p> In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard. In versions of the .NET Framework through the .NET Framework 4, the .NET Framework maintains its own table of string data. This is also true of versions of the .NET Framework starting with the .NET Framework 4.5 running on Windows 7. Starting with the .NET Framework 4.5 running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.  </p>\n<table>\n<thead>\n<tr>\n<th>.NET Framework version</th>\n<th>Version of the Unicode Standard</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.NET Framework 1.1</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode4.0.0/\" data-linktype=\"external\">The Unicode Standard, Version 4.0.0</a></td>\n</tr>\n<tr>\n<td>The .NET Framework 2.0</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td> .NET Framework 3.5 </td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5 and later on Windows 7</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5 and later on Windows 8 and later Windows operating systems</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"EmbeddedNulls\"></a>   </p>\n<h2 id=\"strings-and-embedded-null-characters\">Strings and embedded null characters</h2>\n<p> In the .NET Framework, a String object can include embedded null characters, which count as a part of the string&#39;s length. However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string&#39;s length. This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to String objects:  </p>\n<ul>\n<li><p>The value returned by the <code>strlen</code> or <code>wcslen</code> functions does not necessarily equal <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a>.  </p>\n</li>\n<li><p>The string created by the <code>strcpy_s</code> or <code>wcscpy_s</code> functions is not necessarily identical to the string created by the <a class=\"xref\" href=\"system.string#System_String_Copy_\" data-linktype=\"relative-path\">Copy</a> method.  </p>\n<p>You should ensure that native C and C++ code that instantiates String objects, and code that is passed String objects through platform invoke, do not assume that an embedded null character marks the end of the string.  </p>\n<p>Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched. Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture. They are considered only for ordinal or case-insensitive ordinal comparisons. On the other hand, embedded null characters are always considered when searching a string with methods such as <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a>, and <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>.  </p>\n</li>\n</ul>\n<p><a name=\"Indexes\"></a>   </p>\n<h2 id=\"strings-and-indexes\">Strings and indexes</h2>\n<p> An index is the position of a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object (not a Unicode character) in a String. An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero. A number of search methods, such as <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, return the index of a character or substring in the string instance.  </p>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Chars_\" data-linktype=\"relative-path\">Chars</a> property lets you access individual <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects by their index position in the string. Because the <a class=\"xref\" href=\"system.string#System_String_Chars_\" data-linktype=\"relative-path\">Chars</a> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in a string by using code such as the following. This code looks for white space or punctuation characters in a string to determine how many words the string contains.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#4\">using namespace System;\n\nvoid main()\n{\n   String^ s1 = &quot;This string consists of a single short sentence.&quot;;\n   int nWords = 0;\n\n   s1 = s1-&gt;Trim();      \n   for (int ctr = 0; ctr &lt; s1-&gt;Length; ctr++) {\n         if (Char::IsPunctuation(s1[ctr]) | Char::IsWhiteSpace(s1[ctr]))\n            nWords++;              \n   }\n   Console::WriteLine(&quot;The sentence\\n   {0}\\nhas {1} words.&quot;,\n                     s1, nWords);           \n}\n// The example displays the following output: \n//       The sentence \n//          This string consists of a single short sentence. \n//       has 8 words.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string s1 = &quot;This string consists of a single short sentence.&quot;;\n      int nWords = 0;\n\n      s1 = s1.Trim();      \n      for (int ctr = 0; ctr &lt; s1.Length; ctr++) {\n         if (Char.IsPunctuation(s1[ctr]) | Char.IsWhiteSpace(s1[ctr]))\n            nWords++;              \n      }\n      Console.WriteLine(&quot;The sentence\\n   {0}\\nhas {1} words.&quot;,\n                        s1, nWords);                                                                     \n   }\n}\n// The example displays the following output:\n//       The sentence\n//          This string consists of a single short sentence.\n//       has 8 words.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#4\">Module Example\n   Public Sub Main()\n      Dim s1 As String = &quot;This string consists of a single short sentence.&quot;\n      Dim nWords As Integer = 0\n\n      s1 = s1.Trim()      \n      For ctr As Integer = 0 To s1.Length - 1\n         If Char.IsPunctuation(s1(ctr)) Or Char.IsWhiteSpace(s1(ctr)) \n            nWords += 1              \n         End If   \n      Next\n      Console.WriteLine(&quot;The sentence{2}   {0}{2}has {1} words.&quot;,\n                        s1, nWords, vbCrLf)                                                                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The sentence\n&#39;          This string consists of a single short sentence.\n&#39;       has 8 words.\n</code></pre><p> Because the String class implements the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface, you can also iterate through the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in a string by using a <code>foreach</code> construct, as the following example shows.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#5\">using namespace System;\n\nvoid main()\n{\n   String^ s1 = &quot;This string consists of a single short sentence.&quot;;\n   int nWords = 0;\n\n   s1 = s1-&gt;Trim();      \n   for each (Char ch in s1)\n   {\n      if (Char::IsPunctuation(ch) | Char::IsWhiteSpace(ch))\n         nWords++;              \n   }\n   Console::WriteLine(&quot;The sentence\\n   {0}\\nhas {1} words.&quot;,\n                      s1, nWords);  \n   Console::ReadLine();\n}\n// The example displays the following output: \n//       The sentence \n//          This string consists of a single short sentence. \n//       has 8 words.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#5\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string s1 = &quot;This string consists of a single short sentence.&quot;;\n      int nWords = 0;\n\n      s1 = s1.Trim();      \n      foreach (var ch in s1) {\n         if (Char.IsPunctuation(ch) | Char.IsWhiteSpace(ch))\n            nWords++;              \n      }\n      Console.WriteLine(&quot;The sentence\\n   {0}\\nhas {1} words.&quot;,\n                        s1, nWords);                                                                     \n   }\n}\n// The example displays the following output:\n//       The sentence\n//          This string consists of a single short sentence.\n//       has 8 words.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#5\">Module Example\n   Public Sub Main()\n      Dim s1 As String = &quot;This string consists of a single short sentence.&quot;\n      Dim nWords As Integer = 0\n\n      s1 = s1.Trim()      \n      For Each ch In s1\n         If Char.IsPunctuation(ch) Or Char.IsWhiteSpace(ch) Then \n            nWords += 1              \n         End If   \n      Next\n      Console.WriteLine(&quot;The sentence{2}   {0}{2}has {1} words.&quot;,\n                        s1, nWords, vbCrLf)                                                                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The sentence\n&#39;          This string consists of a single short sentence.\n&#39;       has 8 words.\n</code></pre><p> Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object. In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs. To work with Unicode characters instead of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects, use the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">System.Globalization.StringInfo</a> and <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> classes. The following example illustrates the difference between code that works with <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects and code that works with Unicode characters. It compares the number of characters or text elements in each word of a sentence. The string includes two sequences of a base character followed by a combining character.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#6\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\n\nvoid main()\n{\n   // First sentence of The Mystery of the Yellow Room, by Leroux. \n   String^ opening = L&quot;Ce n&#39;est pas sans une certaine émotion que &quot;+\n                     L&quot;je commence à raconter ici les aventures &quot; +\n                     L&quot;extraordinaires de Joseph Rouletabille.&quot;; \n  \n   // Character counters. \n   int nChars = 0;\n   // Objects to store word count.\n   List&lt;int&gt;^ chars = gcnew List&lt;int&gt;();\n   List&lt;int&gt;^ elements = gcnew List&lt;int&gt;();\n\n   for each (Char ch in opening) {\n      // Skip the &#39; character. \n      if (ch == &#39;\\x0027&#39;) continue;\n\n      if (Char::IsWhiteSpace(ch) | (Char::IsPunctuation(ch))) {\n         chars-&gt;Add(nChars);\n         nChars = 0;\n      }\n      else {\n         nChars++;\n      }\n   }\n\n   TextElementEnumerator^ te = StringInfo::GetTextElementEnumerator(opening);\n   while (te-&gt;MoveNext()) {\n      String^ s = te-&gt;GetTextElement();   \n      // Skip the &#39; character. \n      if (s == &quot;\\x0027&quot;) continue;\n      if ( String::IsNullOrEmpty(s-&gt;Trim()) | (s-&gt;Length == 1 &amp;&amp; Char::IsPunctuation(Convert::ToChar(s)))) {\n         elements-&gt;Add(nChars);         \n         nChars = 0;\n      }\n      else {\n         nChars++;\n      }\n   }\n\n   // Display character counts.\n   Console::WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                      &quot;Word #&quot;, &quot;Char Objects&quot;, &quot;Characters&quot;); \n   for (int ctr = 0; ctr &lt; chars-&gt;Count; ctr++) \n      Console::WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                         ctr, chars[ctr], elements[ctr]); \n   Console::ReadLine();\n}\n// The example displays the following output:\n//      Word #         Char Objects           Characters\n//           0                    2                    2\n//           1                    4                    4\n//           2                    3                    3\n//           3                    4                    4\n//           4                    3                    3\n//           5                    8                    8\n//           6                    8                    7\n//           7                    3                    3\n//           8                    2                    2\n//           9                    8                    8\n//          10                    2                    1\n//          11                    8                    8\n//          12                    3                    3\n//          13                    3                    3\n//          14                    9                    9\n//          15                   15                   15\n//          16                    2                    2\n//          17                    6                    6\n//          18                   12                   12\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#6\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // First sentence of The Mystery of the Yellow Room, by Leroux.\n      string opening = &quot;Ce n&#39;est pas sans une certaine émotion que &quot;+\n                       &quot;je commence à raconter ici les aventures &quot; +\n                       &quot;extraordinaires de Joseph Rouletabille.&quot;; \n      // Character counters.\n      int nChars = 0;\n      // Objects to store word count.\n      List&lt;int&gt; chars = new List&lt;int&gt;();\n      List&lt;int&gt; elements = new List&lt;int&gt;();\n      \n      foreach (var ch in opening) {\n         // Skip the &#39; character.\n         if (ch == &#39;\\u0027&#39;) continue;\n              \n         if (Char.IsWhiteSpace(ch) | (Char.IsPunctuation(ch))) {\n            chars.Add(nChars);\n            nChars = 0;\n         }\n         else {\n            nChars++;\n         }\n      }\n\n      TextElementEnumerator te = StringInfo.GetTextElementEnumerator(opening);\n      while (te.MoveNext()) {\n         string s = te.GetTextElement();   \n         // Skip the &#39; character.\n         if (s == &quot;\\u0027&quot;) continue;\n         if ( String.IsNullOrEmpty(s.Trim()) | (s.Length == 1 &amp;&amp; Char.IsPunctuation(Convert.ToChar(s)))) {\n            elements.Add(nChars);         \n            nChars = 0;\n         }\n         else {\n            nChars++;\n         }\n      }\n\n      // Display character counts.\n      Console.WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                        &quot;Word #&quot;, &quot;Char Objects&quot;, &quot;Characters&quot;); \n      for (int ctr = 0; ctr &lt; chars.Count; ctr++) \n         Console.WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                           ctr, chars[ctr], elements[ctr]); \n   }\n}\n// The example displays the following output:\n//       Word #         Char Objects           Characters\n//            0                    2                    2\n//            1                    4                    4\n//            2                    3                    3\n//            3                    4                    4\n//            4                    3                    3\n//            5                    8                    8\n//            6                    8                    7\n//            7                    3                    3\n//            8                    2                    2\n//            9                    8                    8\n//           10                    2                    1\n//           11                    8                    8\n//           12                    3                    3\n//           13                    3                    3\n//           14                    9                    9\n//           15                   15                   15\n//           16                    2                    2\n//           17                    6                    6\n//           18                   12                   12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#6\">Imports System.Collections.Generic\nImports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; First sentence of The Mystery of the Yellow Room, by Leroux.\n      Dim opening As String = &quot;Ce n&#39;est pas sans une certaine émotion que &quot;+\n                              &quot;je commence à raconter ici les aventures &quot; +\n                              &quot;extraordinaires de Joseph Rouletabille.&quot; \n      &#39; Character counters.\n      Dim nChars As Integer = 0\n      &#39; Objects to store word count.\n      Dim chars As New List(Of Integer)()\n      Dim elements As New List(Of Integer)()\n      \n      For Each ch In opening\n         &#39; Skip the &#39; character.\n         If ch = ChrW(&amp;h0027) Then Continue For\n              \n         If Char.IsWhiteSpace(ch) Or Char.IsPunctuation(ch) Then\n            chars.Add(nChars)\n            nChars = 0\n         Else \n            nChars += 1\n         End If\n      Next\n\n      Dim te As TextElementEnumerator = StringInfo.GetTextElementEnumerator(opening)\n      Do While te.MoveNext()\n         Dim s As String = te.GetTextElement()   \n         &#39; Skip the &#39; character.\n         If s = ChrW(&amp;h0027) Then Continue Do\n         If String.IsNullOrEmpty(s.Trim()) Or (s.Length = 1 AndAlso Char.IsPunctuation(Convert.ToChar(s))) \n            elements.Add(nChars)         \n            nChars = 0\n         Else \n            nChars += 1\n         End If\n      Loop\n\n      &#39; Display character counts.\n      Console.WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                        &quot;Word #&quot;, &quot;Char Objects&quot;, &quot;Characters&quot;) \n      For ctr As Integer = 0 To chars.Count - 1 \n         Console.WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                           ctr, chars(ctr), elements(ctr)) \n      Next                        \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Word #         Char Objects           Characters\n&#39;         0                    2                    2\n&#39;         1                    4                    4\n&#39;         2                    3                    3\n&#39;         3                    4                    4\n&#39;         4                    3                    3\n&#39;         5                    8                    8\n&#39;         6                    8                    7\n&#39;         7                    3                    3\n&#39;         8                    2                    2\n&#39;         9                    8                    8\n&#39;        10                    2                    1\n&#39;        11                    8                    8\n&#39;        12                    3                    3\n&#39;        13                    3                    3\n&#39;        14                    9                    9\n&#39;        15                   15                   15\n&#39;        16                    2                    2\n&#39;        17                    6                    6\n&#39;        18                   12                   12\n</code></pre><p> This example works with text elements by using the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_GetTextElementEnumerator_\" data-linktype=\"relative-path\">GetTextElementEnumerator</a> method and the <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> class to enumerate all the text elements in a string. You can also retrieve an array that contains the starting index of each text element by calling the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_ParseCombiningCharacters_\" data-linktype=\"relative-path\">ParseCombiningCharacters</a> method.  </p>\n<p> For more information about working with units of text rather than individual <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values, see the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class.  </p>\n<p><a name=\"Nulls\"></a>   </p>\n<h2 id=\"null-strings-and-empty-strings\">Null strings and empty strings</h2>\n<p> A string that has been declared but has not been assigned a value is <code>null</code>. Attempting to call methods on that string throws a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a>. A null string is different from an empty string, which is a string whose value is &quot;&quot; or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. In some cases, passing either a null string or an empty string as an argument in a method call throws an exception. For example, passing a null string to the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_\" data-linktype=\"relative-path\">Parse</a> method throws an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a>, and passing an empty string throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>. In other cases, a method argument can be either a null string or an empty string. For example, if you are providing an <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> implementation for a class, you want to equate both a null string and an empty string with the general (&quot;G&quot;) format specifier.  </p>\n<p> The String class includes the following two convenience methods that enable you to test whether a string is <code>null</code> or empty:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a>, which indicates whether a string is either <code>null</code> or is equal to  <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. This method eliminates the need to use code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Null#1\">      If str Is Nothing OrElse str.Equals(String.Empty) Then\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Null#1\">      if (str == null || str.Equals(String.Empty))\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Null#1\">   if (str == nullptr || str-&gt;Equals(String::Empty))\n</code></pre></li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_IsNullOrWhiteSpace_\" data-linktype=\"relative-path\">IsNullOrWhiteSpace</a>, which indicates whether a string is <code>null</code>, equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, or consists exclusively of white-space characters. This method eliminates the need to use code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Null#2\">      If str Is Nothing OrElse str.Equals(String.Empty) OrElse str.Trim().Equals(String.Empty)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Null#2\">      if (str == null || str.Equals(String.Empty) || str.Trim().Equals(String.Empty))\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Null#2\">   if (str == nullptr || str-&gt;Equals(String::Empty) || str-&gt;Trim()-&gt;Equals(String::Empty))\n</code></pre><p>The following example uses the <a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a> method in the <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a> implementation of a custom <code>Temperature</code> class. The method supports the &quot;G&quot;, &quot;C&quot;, &quot;F&quot;, and &quot;K&quot; format strings. If an empty format string or a format string whose value is <code>null</code> is passed to the method, its value is changed to the &quot;G&quot; format string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Null#3\">   Public Overloads Function ToString(fmt As String, provider As IFormatProvider) As String _\n                   Implements IFormattable.ToString\n      If String.IsNullOrEmpty(fmt) Then fmt = &quot;G&quot;  \n      If provider Is Nothing Then provider = CultureInfo.CurrentCulture\n      \n      Select Case fmt.ToUpperInvariant()\n         &#39; Return degrees in Celsius.    \n         Case &quot;G&quot;, &quot;C&quot;\n            Return temp.ToString(&quot;F2&quot;, provider) + &quot;&#176;C&quot;\n         &#39; Return degrees in Fahrenheit.\n         Case &quot;F&quot; \n            Return (temp * 9 / 5 + 32).ToString(&quot;F2&quot;, provider) + &quot;&#176;F&quot;\n         &#39; Return degrees in Kelvin.\n         Case &quot;K&quot;   \n            Return (temp + 273.15).ToString()\n         Case Else\n            Throw New FormatException(\n                  String.Format(&quot;The {0} format string is not supported.&quot;, \n                                fmt))\n       End Select                                   \n   End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Null#3\">   public string ToString(string format, IFormatProvider provider) \n   {\n      if (String.IsNullOrEmpty(format)) format = &quot;G&quot;;  \n      if (provider == null) provider = CultureInfo.CurrentCulture;\n      \n      switch (format.ToUpperInvariant())\n      {\n         // Return degrees in Celsius.    \n         case &quot;G&quot;:\n         case &quot;C&quot;:\n            return temp.ToString(&quot;F2&quot;, provider) + &quot;&#176;C&quot;;\n         // Return degrees in Fahrenheit.\n         case &quot;F&quot;: \n            return (temp * 9 / 5 + 32).ToString(&quot;F2&quot;, provider) + &quot;&#176;F&quot;;\n         // Return degrees in Kelvin.\n         case &quot;K&quot;:   \n            return (temp + 273.15).ToString();\n         default:\n            throw new FormatException(\n                  String.Format(&quot;The {0} format string is not supported.&quot;, \n                                format));\n      }                                   \n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Null#3\">public:\n   virtual String^ ToString(String^ format, IFormatProvider^ provider) \n   {\n      if (String::IsNullOrEmpty(format)) format = &quot;G&quot;;  \n      if (provider == nullptr) provider = CultureInfo::CurrentCulture;\n      \n      switch (Convert::ToUInt16(format-&gt;ToUpperInvariant()))\n      {\n         // Return degrees in Celsius.    \n         case &#39;G&#39;:\n         case &#39;C&#39;:\n            return temp.ToString(&quot;F2&quot;, provider) + L&quot;�C&quot;;\n         // Return degrees in Fahrenheit.\n         case &#39;F&#39;: \n            return (temp * 9 / 5 + 32).ToString(&quot;F2&quot;, provider) + L&quot;�F&quot;;\n         // Return degrees in Kelvin.\n         case &#39;K&#39;:   \n            return (temp + 273.15).ToString();\n         default:\n            throw gcnew FormatException(\n                  String::Format(&quot;The {0} format string is not supported.&quot;, \n                                 format));\n      }                                   \n   }\n</code></pre></li>\n</ul>\n<p><a name=\"Immutability\"></a>   </p>\n<h2 id=\"immutability-and-the-stringbuilder-class\">Immutability and the StringBuilder class</h2>\n<p> A String object is called immutable (read-only), because its value cannot be modified after it has been created. Methods that appear to modify a String object actually return a new String object that contains the modification.  </p>\n<p> Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty. For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F. Although the code appears to use string concatenation to append a new character to the existing string named <code>str</code>, it actually creates a new String object for each concatenation operation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Class#15\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      \n      string str = String.Empty;\n      StreamWriter sw = new StreamWriter(@&quot;.\\StringFile.txt&quot;, \n                           false, Encoding.Unicode);\n\n      for (int ctr = 0; ctr &lt;= 1000; ctr++) {\n         str += Convert.ToChar(rnd.Next(1, 0x0530)); \n         if (str.Length % 60 == 0)\n            str += Environment.NewLine;          \n      }                    \n      sw.Write(str);\n      sw.Close();\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class#15\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nvoid main()\n{\n   Random^ rnd = gcnew Random();\n\n   String^ str = String::Empty;\n   StreamWriter^ sw = gcnew StreamWriter(&quot;.\\\\StringFile.txt&quot;, \n                        false, Encoding::Unicode);\n\n   for (int ctr = 0; ctr &lt;= 1000; ctr++) {\n      str += Convert::ToChar(rnd-&gt;Next(1, 0x0530)); \n      if (str-&gt;Length % 60 == 0)\n         str += Environment::NewLine;          \n   }                    \n   sw-&gt;Write(str);\n   sw-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#15\">Imports System.IO\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      \n      Dim str As String = String.Empty\n      Dim sw As New StreamWriter(&quot;.\\StringFile.txt&quot;, \n                           False, Encoding.Unicode)\n\n      For ctr As Integer = 0 To 1000\n         str += ChrW(rnd.Next(1, &amp;h0530)) \n         If str.Length Mod 60 = 0 Then str += vbCrLf          \n      Next                    \n      sw.Write(str)\n      sw.Close()\n   End Sub\nEnd Module\n</code></pre><p> You can use the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class instead of the String class for operations that make multiple changes to the value of a string. Unlike instances of the String class, <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string. When you have finished modifying the value of a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, you can call its <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method to convert it to a string. The following example replaces the String used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#16\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nvoid main()\n{\n   Random^ rnd = gcnew Random();\n\n   StringBuilder^ sb = gcnew StringBuilder();\n   StreamWriter^ sw = gcnew StreamWriter(&quot;.\\\\StringFile.txt&quot;, \n                        false, Encoding::Unicode);\n\n   for (int ctr = 0; ctr &lt;= 1000; ctr++) {\n      sb-&gt;Append(Convert::ToChar(rnd-&gt;Next(1, 0x0530))); \n      if (sb-&gt;Length % 60 == 0)\n         sb-&gt;AppendLine();          \n   }                    \n   sw-&gt;Write(sb-&gt;ToString());\n   sw-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#16\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      StringBuilder sb = new StringBuilder();\n      StreamWriter sw = new StreamWriter(@&quot;.\\StringFile.txt&quot;, \n                                         false, Encoding.Unicode);\n\n      for (int ctr = 0; ctr &lt;= 1000; ctr++) {\n         sb.Append(Convert.ToChar(rnd.Next(1, 0x0530))); \n         if (sb.Length % 60 == 0)\n            sb.AppendLine();          \n      }                    \n      sw.Write(sb.ToString());\n      sw.Close();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#16\">Imports System.IO\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      Dim sb As New StringBuilder()\n      Dim sw As New StreamWriter(&quot;.\\StringFile.txt&quot;, \n                                 False, Encoding.Unicode)\n\n      For ctr As Integer = 0 To 1000\n         sb.Append(ChrW(rnd.Next(1, &amp;h0530))) \n         If sb.Length Mod 60 = 0 Then sb.AppendLine()          \n      Next                    \n      sw.Write(sb.ToString())\n      sw.Close()\n   End Sub\nEnd Module\n</code></pre><p><a name=\"CultureSensitive\"></a>   </p>\n<h2 id=\"ordinal-vs-culture-sensitive-operations\">Ordinal vs. culture-sensitive operations</h2>\n<p> Members of the String class perform either ordinal or culture-sensitive (linguistic) operations on a String object. An ordinal operation acts on the numeric value of each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object. A culture-sensitive operation acts on the value of the Stringobject, and takes culture-specific casing, sorting, formatting, and parsing rules into account. Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture. The two kinds of operations can produce very different results when they are performed on the same string.  </p>\n<p> The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>), which is loosely based on the culture settings of the English language independent of region. Unlike other <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">System.Globalization.CultureInfo</a> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework. The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison. This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Most methods that perform string operations include an overload that has a parameter of type <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation. In general, you should call this overload to make the intent of your method call clear. For best practices and guidance for using ordinal and culture-sensitive operations on strings, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> Operations for <a href=\"#casing\" data-linktype=\"self-bookmark\">casing</a>, <a href=\"#parsing\" data-linktype=\"self-bookmark\">parsing and formatting</a>, <a href=\"#comparison\" data-linktype=\"self-bookmark\">comparison and sorting</a>, and <a href=\"#equality\" data-linktype=\"self-bookmark\">testing for equality</a> can be either ordinal or culture-sensitive. The following sections discuss each category of operation.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> You should always call a method overload that makes the intent of your method call clear. For example, instead of calling the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_\" data-linktype=\"relative-path\">Compare(String,String)</a> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method with a value of <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> for the <code>comparisonType</code> argument. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p><a name=\"casing\"></a>   </p>\n<h3 id=\"casing\">Casing</h3>\n<p> Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase. Often, a casing operation is performed before a string comparison. For example, a string might be converted to uppercase so that it can be compared with another uppercase string. You can convert the characters in a string to lowercase by calling the <a class=\"xref\" href=\"system.string#System_String_ToLower_\" data-linktype=\"relative-path\">ToLower</a> or <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> method, and you can convert them to uppercase by calling the <a class=\"xref\" href=\"system.string#System_String_ToUpper_\" data-linktype=\"relative-path\">ToUpper</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> method. In addition, you can use the <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_ToTitleCase_\" data-linktype=\"relative-path\">ToTitleCase</a> method to convert a string to title case.  </p>\n<p> Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture. Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture. The actual differences in casing are of three kinds:  </p>\n<ul>\n<li><p>Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131). In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE. In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.  </p>\n<p> The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison. (The casing conventions of the invariant culture should have been used.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Class#17\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   const string disallowed = &quot;file&quot;;\n   \n   public static void Main()\n   {\n      IsAccessAllowed(@&quot;FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt&quot;);\n   }\n\n   private static void IsAccessAllowed(String resource)\n   {\n      CultureInfo[] cultures = { CultureInfo.CreateSpecificCulture(&quot;en-US&quot;),\n                                 CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;) };\n      String scheme = null;\n      int index = resource.IndexOfAny( new Char[] { &#39;\\\\&#39;, &#39;/&#39; } );\n      if (index &gt; 0) \n         scheme = resource.Substring(0, index - 1);\n\n      // Change the current culture and perform the comparison.\n      foreach (var culture in cultures) {\n         Thread.CurrentThread.CurrentCulture = culture;\n         Console.WriteLine(&quot;Culture: {0}&quot;, CultureInfo.CurrentCulture.DisplayName);\n         Console.WriteLine(resource);\n         Console.WriteLine(&quot;Access allowed: {0}&quot;, \n                           ! String.Equals(disallowed, scheme, StringComparison.CurrentCultureIgnoreCase));      \n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output:\n//       Culture: English (United States)\n//       FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt\n//       Access allowed: False\n//       \n//       Culture: Turkish (Turkey)\n//       FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt\n//       Access allowed: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#17\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Const disallowed = &quot;file&quot;\n   \n   Public Sub Main()\n      IsAccessAllowed(&quot;FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt&quot;)\n   End Sub\n\n   Private Sub IsAccessAllowed(resource As String)\n      Dim cultures() As CultureInfo = { CultureInfo.CreateSpecificCulture(&quot;en-US&quot;),\n                                        CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;) }\n      Dim scheme As String = Nothing\n      Dim index As Integer = resource.IndexOfAny( {&quot;\\&quot;c, &quot;/&quot;c })\n      If index &gt; 0 Then scheme = resource.Substring(0, index - 1)\n\n      &#39; Change the current culture and perform the comparison.\n      For Each culture In cultures\n         Thread.CurrentThread.CurrentCulture = culture\n         Console.WriteLine(&quot;Culture: {0}&quot;, CultureInfo.CurrentCulture.DisplayName)\n         Console.WriteLine(resource)\n         Console.WriteLine(&quot;Access allowed: {0}&quot;, \n                           Not String.Equals(disallowed, scheme, StringComparison.CurrentCultureIgnoreCase))      \n         Console.WriteLine()\n      Next   \n   End Sub      \nEnd Module\n&#39; The example displays the following output:\n&#39;       Culture: English (United States)\n&#39;       FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt\n&#39;       Access allowed: False\n&#39;       \n&#39;       Culture: Turkish (Turkey)\n&#39;       FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt\n&#39;       Access allowed: True\n</code></pre></li>\n<li><p>Differences in case mappings between the invariant culture and all other cultures. In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character. For all other cultures, it returns a different character. Some of the affected characters are listed in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>If changed to</th>\n<th>Returns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MICRON SIGN (U+00B5)</td>\n<td>Uppercase</td>\n<td>GREEK CAPITAL LETTER MU (U+-39C)</td>\n</tr>\n<tr>\n<td>LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</td>\n<td>Lowercase</td>\n<td>LATIN SMALL LETTER I (U+0069)</td>\n</tr>\n<tr>\n<td>LATIN SMALL LETTER DOTLESS I (U+0131)</td>\n<td>Uppercase</td>\n<td>LATIN CAPITAL LETTER I (U+0049)</td>\n</tr>\n<tr>\n<td>LATIN SMALL LETTER LONG S (U+017F)</td>\n<td>Uppercase</td>\n<td>LATIN CAPITAL LETTER S (U+0053)</td>\n</tr>\n<tr>\n<td>LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)</td>\n<td>Lowercase</td>\n<td>LATIN SMALL LETTER DZ WITH CARON (U+01C6)</td>\n</tr>\n<tr>\n<td>COMBINING GREEK YPOGEGRAMMENI (U+0345)</td>\n<td>Uppercase</td>\n<td>GREEK CAPITAL LETTER IOTA (U+0399)</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Differences in case mappings of two-letter mixed-case pairs in the ASCII character range. In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair. This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:  </p>\n<ul>\n<li><p>&quot;lJ&quot; and &quot;nJ&quot; in the hr-HR (Croatian (Croatia)) culture.  </p>\n</li>\n<li><p>&quot;cH&quot; in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.  </p>\n</li>\n<li><p>&quot;aA&quot; in the da-DK (Danish (Denmark)) culture.  </p>\n</li>\n<li><p>&quot;cS&quot;, &quot;dZ&quot;, &quot;dZS&quot;, &quot;nY&quot;, &quot;sZ&quot;, &quot;tY&quot;, and &quot;zS&quot; in the hu-HU (Hungarian (Hungary)) culture.  </p>\n</li>\n<li><p>&quot;cH&quot; and &quot;lL&quot; in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.  </p>\n</li>\n<li><p>&quot;cH&quot;, &quot;gI&quot;, &quot;kH&quot;, &quot;nG&quot; &quot;nH&quot;, &quot;pH&quot;, &quot;qU&#39;, &quot;tH&quot;, and &quot;tR&quot; in the vi-VN (Vietnamese (Vietnam)) culture.  </p>\n<p>However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.  </p>\n</li>\n</ul>\n<p>The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#7\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::IO;\n\nString^ ShowHexValue(String^ s);\n\nvoid main()\n{\n   StreamWriter^ sw = gcnew StreamWriter(&quot;.\\\\case.txt&quot;);   \n   array&lt;String^&gt;^ words = gcnew array&lt;String^&gt; { L&quot;file&quot;, L&quot;sıfır&quot;, L&quot;ǅenana&quot; };\n   array&lt;CultureInfo^&gt;^ cultures = gcnew array&lt;CultureInfo^&gt; { CultureInfo::InvariantCulture, \n                                                               gcnew CultureInfo(&quot;en-US&quot;),  \n                                                               gcnew CultureInfo(&quot;tr-TR&quot;) };\n\n   for each (String^ word in words) {\n      sw-&gt;WriteLine(&quot;{0}:&quot;, word);\n      for each (CultureInfo^ culture in cultures) {\n         String^ name = String::IsNullOrEmpty(culture-&gt;Name) ? \n                              &quot;Invariant&quot; : culture-&gt;Name;\n         String^ upperWord = word-&gt;ToUpper(culture);\n         sw-&gt;WriteLine(&quot;   {0,10}: {1,7} {2, 38}&quot;, name, \n                        upperWord, ShowHexValue(upperWord));\n\n      }\n      sw-&gt;WriteLine();  \n   }\n   sw-&gt;Close();\n}\n\nString^ ShowHexValue(String^ s)\n{\n   String^ retval = nullptr;\n   for each (Char ch in s) {\n      array&lt;Byte&gt;^ bytes = BitConverter::GetBytes(ch);\n      retval += String::Format(&quot;{0:X2} {1:X2} &quot;, bytes[1], bytes[0]);     \n   }\n   return retval;\n} \n// The example displays the following output: \n//    file: \n//        Invariant:    FILE               00 46 00 49 00 4C 00 45  \n//            en-US:    FILE               00 46 00 49 00 4C 00 45  \n//            tr-TR:    FİLE               00 46 01 30 00 4C 00 45  \n//     \n//    sıfır: \n//        Invariant:   SıFıR         00 53 01 31 00 46 01 31 00 52  \n//            en-US:   SIFIR         00 53 00 49 00 46 00 49 00 52  \n//            tr-TR:   SIFIR         00 53 00 49 00 46 00 49 00 52  \n//     \n//    ǅenana: \n//        Invariant:  ǅENANA   01 C5 00 45 00 4E 00 41 00 4E 00 41  \n//            en-US:  ǄENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41  \n//            tr-TR:  ǄENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41 \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#7\">using System;\nusing System.Globalization;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(@&quot;.\\case.txt&quot;);   \n      string[] words = { &quot;file&quot;, &quot;sıfır&quot;, &quot;ǅenana&quot; };\n      CultureInfo[] cultures = { CultureInfo.InvariantCulture, \n                                 new CultureInfo(&quot;en-US&quot;),  \n                                 new CultureInfo(&quot;tr-TR&quot;) };\n\n      foreach (var word in words) {\n         sw.WriteLine(&quot;{0}:&quot;, word);\n         foreach (var culture in cultures) {\n            string name = String.IsNullOrEmpty(culture.Name) ? \n                                 &quot;Invariant&quot; : culture.Name;\n            string upperWord = word.ToUpper(culture);\n            sw.WriteLine(&quot;   {0,10}: {1,7} {2, 38}&quot;, name, \n                         upperWord, ShowHexValue(upperWord));\n     \n         }\n         sw.WriteLine();  \n      }\n      sw.Close();\n   }\n\n   private static string ShowHexValue(string s)\n   {\n      string retval = null;\n      foreach (var ch in s) {\n         byte[] bytes = BitConverter.GetBytes(ch);\n         retval += String.Format(&quot;{0:X2} {1:X2} &quot;, bytes[1], bytes[0]);     \n      }\n      return retval;\n   } \n}\n// The example displays the following output:\n//    file:\n//        Invariant:    FILE               00 46 00 49 00 4C 00 45 \n//            en-US:    FILE               00 46 00 49 00 4C 00 45 \n//            tr-TR:    FİLE               00 46 01 30 00 4C 00 45 \n//    \n//    sıfır:\n//        Invariant:   SıFıR         00 53 01 31 00 46 01 31 00 52 \n//            en-US:   SIFIR         00 53 00 49 00 46 00 49 00 52 \n//            tr-TR:   SIFIR         00 53 00 49 00 46 00 49 00 52 \n//    \n//    ǅenana:\n//        Invariant:  ǅENANA   01 C5 00 45 00 4E 00 41 00 4E 00 41 \n//            en-US:  ǄENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41 \n//            tr-TR:  ǄENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41 \n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#7\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;.\\case.txt&quot;)   \n      Dim words As String() = { &quot;file&quot;, &quot;sıfır&quot;, &quot;ǅenana&quot; }\n      Dim cultures() As CultureInfo = { CultureInfo.InvariantCulture, \n                                        New CultureInfo(&quot;en-US&quot;),  \n                                        New CultureInfo(&quot;tr-TR&quot;) }\n\n      For Each word In words\n         sw.WriteLine(&quot;{0}:&quot;, word)\n         For Each culture In cultures\n            Dim name As String = If(String.IsNullOrEmpty(culture.Name),  \n                                 &quot;Invariant&quot;, culture.Name)\n            Dim upperWord As String = word.ToUpper(culture)\n            sw.WriteLine(&quot;   {0,10}: {1,7} {2, 38}&quot;, name, \n                         upperWord, ShowHexValue(upperWord))\n     \n         Next\n         sw.WriteLine()  \n      Next\n      sw.Close()\n   End Sub\n\n   Private Function ShowHexValue(s As String) As String\n      Dim retval As String = Nothing\n      For Each ch In s\n         Dim bytes() As Byte = BitConverter.GetBytes(ch)\n         retval += String.Format(&quot;{0:X2} {1:X2} &quot;, bytes(1), bytes(0))     \n      Next\n      Return retval\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    file:\n&#39;        Invariant:    FILE               00 46 00 49 00 4C 00 45 \n&#39;            en-US:    FILE               00 46 00 49 00 4C 00 45 \n&#39;            tr-TR:    FİLE               00 46 01 30 00 4C 00 45 \n&#39;    \n&#39;    sıfır:\n&#39;        Invariant:   SıFıR         00 53 01 31 00 46 01 31 00 52 \n&#39;            en-US:   SIFIR         00 53 00 49 00 46 00 49 00 52 \n&#39;            tr-TR:   SIFIR         00 53 00 49 00 46 00 49 00 52 \n&#39;    \n&#39;    ǅenana:\n&#39;        Invariant:  ǅENANA   01 C5 00 45 00 4E 00 41 00 4E 00 41 \n&#39;            en-US:  ǄENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41 \n&#39;            tr-TR:  ǄENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41  \n</code></pre></li>\n</ul>\n<p><a name=\"parsing\"></a>   </p>\n<h3 id=\"parsing-and-formatting\">Parsing and formatting</h3>\n<p> Formatting and parsing are inverse operations. Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time. Both formatting and parsing rules are dependent on cultural conventions. The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string. Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#8\">using namespace System;\nusing namespace System::Globalization;\n\nvoid main()\n{\n   DateTime^ date = gcnew DateTime(2011, 3, 1);\n   array&lt;CultureInfo^&gt;^ cultures = gcnew array&lt;CultureInfo^&gt; { CultureInfo::InvariantCulture, \n                                                               gcnew CultureInfo(&quot;en-US&quot;), \n                                                               gcnew CultureInfo(&quot;fr-FR&quot;) };\n\n   for each (CultureInfo^ culture in cultures)\n      Console::WriteLine(&quot;{0,-12} {1}&quot;, String::IsNullOrEmpty(culture-&gt;Name) ?\n                        &quot;Invariant&quot; : culture-&gt;Name, \n                        date-&gt;ToString(&quot;d&quot;, culture));                                    \n}\n// The example displays the following output: \n//       Invariant    03/01/2011 \n//       en-US        3/1/2011 \n//       fr-FR        01/03/2011\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#8\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date = new DateTime(2011, 3, 1);\n      CultureInfo[] cultures = { CultureInfo.InvariantCulture, \n                                 new CultureInfo(&quot;en-US&quot;), \n                                 new CultureInfo(&quot;fr-FR&quot;) };\n\n      foreach (var culture in cultures)\n         Console.WriteLine(&quot;{0,-12} {1}&quot;, String.IsNullOrEmpty(culture.Name) ?\n                           &quot;Invariant&quot; : culture.Name, \n                           date.ToString(&quot;d&quot;, culture));                                    \n   }\n}\n// The example displays the following output:\n//       Invariant    03/01/2011\n//       en-US        3/1/2011\n//       fr-FR        01/03/2011\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#8\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dat As Date = #3/1/2011#\n      Dim cultures() As CultureInfo = { CultureInfo.InvariantCulture, \n                                        New CultureInfo(&quot;en-US&quot;), \n                                        New CultureInfo(&quot;fr-FR&quot;) }\n\n      For Each culture In cultures\n         Console.WriteLine(&quot;{0,-12} {1}&quot;, If(String.IsNullOrEmpty(culture.Name), \n                           &quot;Invariant&quot;, culture.Name), \n                           dat.ToString(&quot;d&quot;, culture))\n      Next                                                         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Invariant    03/01/2011\n&#39;       en-US        3/1/2011\n&#39;       fr-FR        01/03/2011\n</code></pre><p> Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class#9\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateString As String = &quot;07/10/2011&quot;\n      Dim cultures() As CultureInfo = { CultureInfo.InvariantCulture, \n                                        CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;), \n                                        CultureInfo.CreateSpecificCulture(&quot;en-US&quot;) }\n      Console.WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}&quot;, &quot;Date String&quot;, &quot;Culture&quot;, \n                                                 &quot;Month&quot;, &quot;Day&quot;)\n      Console.WriteLine()                                                 \n      For Each culture In cultures\n         Dim dat As Date = DateTime.Parse(dateString, culture)\n         Console.WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}&quot;, dateString, \n                           If(String.IsNullOrEmpty(culture.Name), \n                           &quot;Invariant&quot;, culture.Name), \n                           dat.Month, dat.Day)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Date String     Culture    Month      Day\n&#39;       \n&#39;       07/10/2011    Invariant        7       10\n&#39;       07/10/2011        en-GB       10        7\n&#39;       07/10/2011        en-US        7       10\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class#9\">using namespace System;\nusing namespace System::Globalization;\n\nvoid main()\n{\n   String^ dateString = &quot;07/10/2011&quot;;\n   array&lt;CultureInfo^&gt;^ cultures = gcnew array&lt;CultureInfo^&gt; { CultureInfo::InvariantCulture, \n                                                               CultureInfo::CreateSpecificCulture(&quot;en-GB&quot;), \n                                                               CultureInfo::CreateSpecificCulture(&quot;en-US&quot;) };\n   Console::WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}\\n&quot;, &quot;Date String&quot;, &quot;Culture&quot;, \n                                                &quot;Month&quot;, &quot;Day&quot;);\n   for each (CultureInfo^ culture in cultures) {\n      DateTime date = DateTime::Parse(dateString, culture);\n      Console::WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}&quot;, dateString, \n                        String::IsNullOrEmpty(culture-&gt;Name) ?\n                        &quot;Invariant&quot; : culture-&gt;Name, \n                        date.Month, date.Day);\n   }                      \n}\n// The example displays the following output: \n//       Date String     Culture    Month      Day \n//        \n//       07/10/2011    Invariant        7       10 \n//       07/10/2011        en-GB       10        7 \n//       07/10/2011        en-US        7       10\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#9\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string dateString = &quot;07/10/2011&quot;;\n      CultureInfo[] cultures = { CultureInfo.InvariantCulture, \n                                 CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;), \n                                 CultureInfo.CreateSpecificCulture(&quot;en-US&quot;) };\n      Console.WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}\\n&quot;, &quot;Date String&quot;, &quot;Culture&quot;, \n                                                 &quot;Month&quot;, &quot;Day&quot;);\n      foreach (var culture in cultures) {\n         DateTime date = DateTime.Parse(dateString, culture);\n         Console.WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}&quot;, dateString, \n                           String.IsNullOrEmpty(culture.Name) ?\n                           &quot;Invariant&quot; : culture.Name, \n                           date.Month, date.Day);\n      }                      \n   }\n}\n// The example displays the following output:\n//       Date String     Culture    Month      Day\n//       \n//       07/10/2011    Invariant        7       10\n//       07/10/2011        en-GB       10        7\n//       07/10/2011        en-US        7       10\n</code></pre><p><a name=\"comparison\"></a>   </p>\n<h3 id=\"string-comparison-and-sorting\">String comparison and sorting</h3>\n<p> Conventions for comparing and sorting strings vary from culture to culture. For example, the sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an &quot;Æ&quot; character that it sorts after &quot;Z&quot; in the alphabet. In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture. Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.  </p>\n<p> Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other. For example, the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">System.String.Compare(String,String,StringComparison)</a> method compares two strings based on the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter. If the parameter value is <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, the method performs an ordinal comparison. Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">System.String.Compare(String,String,StringComparison)</a> method (using culture-sensitive comparison) considers &quot;a&quot; less than &quot;A&quot;, but the second call to the same method (using ordinal comparison) considers &quot;a&quot; greater than &quot;A&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#10\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nvoid main()\n{\n   Thread::CurrentThread-&gt;CurrentCulture = CultureInfo::CreateSpecificCulture(&quot;en-US&quot;);\n   Console::WriteLine(String::Compare(&quot;A&quot;, &quot;a&quot;, StringComparison::CurrentCulture));\n   Console::WriteLine(String::Compare(&quot;A&quot;, &quot;a&quot;, StringComparison::Ordinal));\n}\n// The example displays the following output: \n//       1 \n//       -32\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#10\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Console.WriteLine(String.Compare(&quot;A&quot;, &quot;a&quot;, StringComparison.CurrentCulture))\n      Console.WriteLine(String.Compare(&quot;A&quot;, &quot;a&quot;, StringComparison.Ordinal))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1                                                                                     \n&#39;       -32\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#10\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      Console.WriteLine(String.Compare(&quot;A&quot;, &quot;a&quot;, StringComparison.CurrentCulture));\n      Console.WriteLine(String.Compare(&quot;A&quot;, &quot;a&quot;, StringComparison.Ordinal));\n   }\n}\n// The example displays the following output:\n//       1\n//       -32\n</code></pre><p> The .NET Framework supports word, string, and ordinal sort rules:  </p>\n<ul>\n<li><p>A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them. For example, the hyphen (-) might have a very small weight assigned to it so that &quot;coop&quot; and &quot;co-op&quot; appear next to each other in a sorted list. For a list of the Stringmethods that compare two strings using word sort rules, see the <a href=\"#ByCategory\" data-linktype=\"self-bookmark\">String operations by category</a> section.  </p>\n</li>\n<li><p>A string sort also performs a culture-sensitive comparison. It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters. Two strings can be compared using string sort rules by calling the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method overloads that have an <code>options</code> parameter that is supplied a value of <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>. Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.  </p>\n</li>\n<li><p>An ordinal sort compares strings based on the numeric value of each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object in the string. An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points. However, if case is not important, you can specify an ordinal comparison that ignores case. This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result. For a list of the String methods that compare two strings using ordinal sort rules, see the <a href=\"#ByCategory\" data-linktype=\"self-bookmark\">String operations by category</a> section.  </p>\n<p>A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object, including the invariant culture that is specified by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property. The implicit culture is the current culture, which is specified by the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> properties. There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <a class=\"xref\" href=\"system.char#System_Char_IsLetter_\" data-linktype=\"relative-path\">IsLetter</a> property returns <code>true</code>) across cultures. You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object to a string comparison method such as <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_Globalization_CultureInfo_System_Globalization_CompareOptions_\" data-linktype=\"relative-path\">Compare(String,String,CultureInfo,CompareOptions)</a>. You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, or any member of the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> enumeration other than <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> to an appropriate overload of the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method. A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not. An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.  </p>\n<p>The following example illustrates the difference between culture-sensitive and ordinal comparison. The example evaluates three strings, &quot;Apple&quot;, &quot;Æble&quot;, and &quot;AEble&quot;, using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method is called). Because the Danish language treats the character &quot;Æ&quot; as an individual letter and sorts it after &quot;Z&quot; in the alphabet, the string &quot;Æble&quot; is greater than &quot;Apple&quot;. However, &quot;Æble&quot; is not considered equivalent to &quot;AEble&quot;, so &quot;Æble&quot; is also greater than &quot;AEble&quot;. The en-US culture doesn&#39;t include the letter&quot;Æ&quot; but treats it as equivalent to &quot;AE&quot;, which explains why  &quot;Æble&quot; is less than &quot;Apple&quot; but equal to &quot;AEble&quot;. Ordinal comparison, on the other hand, considers &quot;Apple&quot; to be less than &quot;Æble&quot;, and &quot;Æble&quot; to be greater than &quot;AEble&quot;.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class#21\">Imports System.Globalization\nImports System.Threading\n\nPublic Module Example\n   Public Sub Main()\n      Dim str1 As String = &quot;Apple&quot;\n      Dim str2 As String = &quot;&#198;ble&quot;\n      Dim str3 As String = &quot;AEble&quot;\n      \n      &#39; Set the current culture to Danish in Denmark.\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;da-DK&quot;)\n      Console.WriteLine(&quot;Current culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, String.Compare(str1, str2))\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str2, str3, String.Compare(str2, str3))\n      Console.WriteLine()\n      \n      &#39; Set the current culture to English in the U.S.\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n      Console.WriteLine(&quot;Current culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, String.Compare(str1, str2))\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str2, str3, String.Compare(str2, str3))\n      Console.WriteLine()\n      \n      &#39; Perform an ordinal comparison.\n      Console.WriteLine(&quot;Ordinal comparison&quot;)\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, \n                        String.Compare(str1, str2, StringComparison.Ordinal))\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str2, str3, \n                        String.Compare(str2, str3, StringComparison.Ordinal))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Current culture: da-DK\n&#39;       Comparison of Apple with &#198;ble: -1\n&#39;       Comparison of &#198;ble with AEble: 1\n&#39;       \n&#39;       Current culture: en-US\n&#39;       Comparison of Apple with &#198;ble: 1\n&#39;       Comparison of &#198;ble with AEble: 0\n&#39;       \n&#39;       Ordinal comparison\n&#39;       Comparison of Apple with &#198;ble: -133\n&#39;       Comparison of &#198;ble with AEble: 133\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#21\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class CompareStringSample\n{\n   public static void Main()\n   {\n      string str1 = &quot;Apple&quot;;\n      string str2 = &quot;&#198;ble&quot;; \n      string str3 = &quot;AEble&quot;;\n      \n      // Set the current culture to Danish in Denmark.\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;da-DK&quot;);\n      Console.WriteLine(&quot;Current culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, String.Compare(str1, str2));\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}\\n&quot;, \n                        str2, str3, String.Compare(str2, str3));\n      \n      // Set the current culture to English in the U.S.\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n      Console.WriteLine(&quot;Current culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, String.Compare(str1, str2));\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}\\n&quot;, \n                        str2, str3, String.Compare(str2, str3));\n      \n      // Perform an ordinal comparison.\n      Console.WriteLine(&quot;Ordinal comparison&quot;);\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, \n                        String.Compare(str1, str2, StringComparison.Ordinal));\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str2, str3, \n                        String.Compare(str2, str3, StringComparison.Ordinal));\n   }\n}\n// The example displays the following output:\n//       Current culture: da-DK\n//       Comparison of Apple with &#198;ble: -1\n//       Comparison of &#198;ble with AEble: 1\n//       \n//       Current culture: en-US\n//       Comparison of Apple with &#198;ble: 1\n//       Comparison of &#198;ble with AEble: 0\n//       \n//       Ordinal comparison\n//       Comparison of Apple with &#198;ble: -133\n//       Comparison of &#198;ble with AEble: 133\n</code></pre><p>Use the following general guidelines to choose an appropriate sorting or string comparison method:  </p>\n</li>\n<li><p>If you want the strings to be ordered based on the user&#39;s culture, you should order them based on the conventions of the current culture. If the user&#39;s culture changes, the order of sorted strings will also change accordingly. For example, a thesaurus application should always sort words based on the user&#39;s culture.  </p>\n</li>\n<li><p>If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents that culture to a comparison method. For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.  </p>\n</li>\n<li><p>If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison. For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.  </p>\n</li>\n<li><p>For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework. In the .NET Framework 4.5 running on the Windows 8 operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard. On other operating systems, it conforms to the Unicode 5.0 standard.  </p>\n</div>\n<p> For more information about word, string, and ordinal sort rules, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> topic. For additional recommendations on when to use each rule, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n<p> Ordinarily, you do not call string comparison methods such as <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> directly to determine the sort order of strings. Instead, comparison methods are called by sorting methods such as <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> or <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_\" data-linktype=\"relative-path\">Sort</a>. The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use. Note that each type of sort produces a unique ordering of strings in its array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#12\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\n\n// IComparer&lt;String&gt; implementation to perform string sort. \nref class SCompare : System::Collections::Generic::IComparer&lt;String^&gt;\n{\npublic:\n   SCompare() {};\n\n   virtual int Compare(String^ x, String^ y)\n   {\n      return CultureInfo::CurrentCulture-&gt;CompareInfo-&gt;Compare(x, y, CompareOptions::StringSort);\n   }\n};\n\nvoid main()\n{\n   array&lt;String^&gt;^ strings = gcnew array&lt;String^&gt; { &quot;coop&quot;, &quot;co-op&quot;, &quot;cooperative&quot;, \n                                                    L&quot;co\\x00ADoperative&quot;, L&quot;c�ur&quot;, &quot;coeur&quot; };\n\n   // Perform a word sort using the current (en-US) culture. \n   array&lt;String^&gt;^ current = gcnew array&lt;String^&gt;(strings-&gt;Length); \n   strings-&gt;CopyTo(current, 0); \n   Array::Sort(current, StringComparer::CurrentCulture);\n\n   // Perform a word sort using the invariant culture. \n   array&lt;String^&gt;^ invariant = gcnew array&lt;String^&gt;(strings-&gt;Length);\n   strings-&gt;CopyTo(invariant, 0); \n   Array::Sort(invariant, StringComparer::InvariantCulture);\n\n   // Perform an ordinal sort. \n   array&lt;String^&gt;^ ordinal = gcnew array&lt;String^&gt;(strings-&gt;Length);\n   strings-&gt;CopyTo(ordinal, 0); \n   Array::Sort(ordinal, StringComparer::Ordinal);\n\n   // Perform a string sort using the current culture. \n   array&lt;String^&gt;^ stringSort = gcnew array&lt;String^&gt;(strings-&gt;Length);\n   strings-&gt;CopyTo(stringSort, 0); \n   Array::Sort(stringSort, gcnew SCompare());\n\n   // Display array values\n   Console::WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}\\n&quot;, \n                     &quot;Original&quot;, &quot;Word Sort&quot;, &quot;Invariant Word&quot;, \n                     &quot;Ordinal Sort&quot;, &quot;String Sort&quot;);\n   for (int ctr = 0; ctr &lt; strings-&gt;Length; ctr++)\n      Console::WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}&quot;, \n                         strings[ctr], current[ctr], invariant[ctr], \n                         ordinal[ctr], stringSort[ctr] );          \n}\n// The example displays the following output: \n//         Original     Word Sort  Invariant Word  Ordinal Sort   String Sort \n//     \n//             coop          c�ur            c�ur         co-op         co-op \n//            co-op         coeur           coeur         coeur          c�ur \n//      cooperative          coop            coop          coop         coeur \n//      co�operative         co-op           co-op   cooperative          coop \n//             c�ur   cooperative     cooperative   co�operative   cooperative \n//            coeur   co�operative     co�operative          c�ur   co�operative\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#12\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\n \npublic class Example\n{\n   public static void Main()\n   {\n      string[] strings = { &quot;coop&quot;, &quot;co-op&quot;, &quot;cooperative&quot;, \n                           &quot;co\\u00ADoperative&quot;, &quot;cœur&quot;, &quot;coeur&quot; };\n\n      // Perform a word sort using the current (en-US) culture.\n      string[] current = new string[strings.Length]; \n      strings.CopyTo(current, 0); \n      Array.Sort(current, StringComparer.CurrentCulture);\n\n      // Perform a word sort using the invariant culture.\n      string[] invariant = new string[strings.Length];\n      strings.CopyTo(invariant, 0); \n      Array.Sort(invariant, StringComparer.InvariantCulture);\n\n      // Perform an ordinal sort.\n      string[] ordinal = new string[strings.Length];\n      strings.CopyTo(ordinal, 0); \n      Array.Sort(ordinal, StringComparer.Ordinal);\n\n      // Perform a string sort using the current culture.\n      string[] stringSort = new string[strings.Length];\n      strings.CopyTo(stringSort, 0); \n      Array.Sort(stringSort, new SCompare());\n\n      // Display array values\n      Console.WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}\\n&quot;, \n                        &quot;Original&quot;, &quot;Word Sort&quot;, &quot;Invariant Word&quot;, \n                        &quot;Ordinal Sort&quot;, &quot;String Sort&quot;);\n      for (int ctr = 0; ctr &lt; strings.Length; ctr++)\n         Console.WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}&quot;, \n                           strings[ctr], current[ctr], invariant[ctr], \n                           ordinal[ctr], stringSort[ctr] );          \n   }\n}\n\n// IComparer&lt;String&gt; implementation to perform string sort.\ninternal class SCompare : IComparer&lt;String&gt;\n{\n   public int Compare(string x, string y)\n   {\n      return CultureInfo.CurrentCulture.CompareInfo.Compare(x, y, CompareOptions.StringSort);\n   }\n}\n// The example displays the following output:\n//         Original     Word Sort  Invariant Word  Ordinal Sort   String Sort\n//    \n//             coop          cœur            cœur         co-op         co-op\n//            co-op         coeur           coeur         coeur          cœur\n//      cooperative          coop            coop          coop         coeur\n//     co&#173;operative         co-op           co-op   cooperative          coop\n//             cœur   cooperative     cooperative  co&#173;operative   cooperative\n//            coeur  co&#173;operative    co&#173;operative          cœur  co&#173;operative\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#12\">Imports System.Collections\nImports System.Collections.Generic\nImports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim strings() As String = { &quot;coop&quot;, &quot;co-op&quot;, &quot;cooperative&quot;, \n                                  &quot;co&quot; + ChrW(&amp;h00AD) + &quot;operative&quot;, \n                                  &quot;cœur&quot;, &quot;coeur&quot; }\n\n      &#39; Perform a word sort using the current (en-US) culture.\n      Dim current(strings.Length - 1) As String  \n      strings.CopyTo(current, 0) \n      Array.Sort(current, StringComparer.CurrentCulture)\n\n      &#39; Perform a word sort using the invariant culture.\n      Dim invariant(strings.Length - 1) As String\n      strings.CopyTo(invariant, 0) \n      Array.Sort(invariant, StringComparer.InvariantCulture)\n\n      &#39; Perform an ordinal sort.\n      Dim ordinal(strings.Length - 1) As String\n      strings.CopyTo(ordinal, 0) \n      Array.Sort(ordinal, StringComparer.Ordinal)\n\n      &#39; Perform a string sort using the current culture.\n      Dim stringSort(strings.Length - 1) As String\n      strings.CopyTo(stringSort, 0) \n      Array.Sort(stringSort, new SCompare())\n\n      &#39; Display array values\n      Console.WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}&quot;, \n                        &quot;Original&quot;, &quot;Word Sort&quot;, &quot;Invariant Word&quot;, \n                        &quot;Ordinal Sort&quot;, &quot;String Sort&quot;)\n      Console.WriteLine()\n                                                      \n      For ctr As Integer = 0 To strings.Length - 1\n         Console.WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}&quot;, \n                           strings(ctr), current(ctr), invariant(ctr), \n                           ordinal(ctr), stringSort(ctr))   \n      Next                                  \n   End Sub\nEnd Module\n\n&#39; IComparer&lt;String&gt; implementation to perform string sort.\nFriend Class SCompare : Implements IComparer(Of String)\n   Public Function Compare(x As String, y As String) As Integer _\n                   Implements IComparer(Of String).Compare\n      Return CultureInfo.CurrentCulture.CompareInfo.Compare(x, y, CompareOptions.StringSort)\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;         Original     Word Sort  Invariant Word  Ordinal Sort   String Sort\n&#39;    \n&#39;             coop          cœur            cœur         co-op         co-op\n&#39;            co-op         coeur           coeur         coeur          cœur\n&#39;      cooperative          coop            coop          coop         coeur\n&#39;     co&#173;operative         co-op           co-op   cooperative          coop\n&#39;             cœur   cooperative     cooperative  co&#173;operative   cooperative\n&#39;            coeur  co&#173;operative    co&#173;operative          cœur  co&#173;operative\n</code></pre><div class=\"TIP\"><h5>Tip</h5><p> Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison. Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic. A sort key, represented by the <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> class, provides a repository of these weights for a particular string. If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses. When a sort or comparison operation is required, you use the sort keys instead of the strings. For more information, see the <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> class.  </p>\n</div>\n<p> If you don&#39;t specify a string comparison convention, sorting methods such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> perform a culture-sensitive, case-sensitive sort on strings. The following example illustrates how changing the current culture affects the order of sorted strings in an array. It creates an array of three strings. First, it sets the <code>System.Threading.Thread.CurrentThread.CurrentCulture</code> property to en-US and calls the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> method. The resulting sort order is based on sorting conventions for the English (United States) culture. Next, the example sets the <code>System.Threading.Thread.CurrentThread.CurrentCulture</code> property to da-DK and calls the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method again. Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).  </p>\n<pre><code class=\"lang-cs\" name=\"Conceptual.Strings.Comparing#3\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class ArraySort \n{\n   public static void Main(String[] args) \n   {\n      // Create and initialize a new array to store the strings.\n      string[] stringArray = { &quot;Apple&quot;, &quot;&#198;ble&quot;, &quot;Zebra&quot;};\n\n      // Display the values of the array.\n      Console.WriteLine( &quot;The original string array:&quot;);\n      PrintIndexAndValues(stringArray);\n\n      // Set the CurrentCulture to &quot;en-US&quot;.\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n      // Sort the values of the array.\n      Array.Sort(stringArray);\n\n      // Display the values of the array.\n      Console.WriteLine(&quot;After sorting for the culture \\&quot;en-US\\&quot;:&quot;);\n      PrintIndexAndValues(stringArray); \n\n      // Set the CurrentCulture to &quot;da-DK&quot;.\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;da-DK&quot;);\n      // Sort the values of the Array.\n      Array.Sort(stringArray);\n\n      // Display the values of the array.\n      Console.WriteLine(&quot;After sorting for the culture \\&quot;da-DK\\&quot;:&quot;);\n      PrintIndexAndValues(stringArray); \n   }\n   public static void PrintIndexAndValues(string[] myArray)  \n   {\n      for (int i = myArray.GetLowerBound(0); i &lt;= \n            myArray.GetUpperBound(0); i++ )\n         Console.WriteLine(&quot;[{0}]: {1}&quot;, i, myArray[i]);\n      Console.WriteLine();      \n   }\n}\n// The example displays the following output:\n//       The original string array:\n//       [0]: Apple\n//       [1]: &#198;ble\n//       [2]: Zebra\n//       \n//       After sorting for the &quot;en-US&quot; culture:\n//       [0]: &#198;ble\n//       [1]: Apple\n//       [2]: Zebra\n//       \n//       After sorting for the culture &quot;da-DK&quot;:\n//       [0]: Apple\n//       [1]: Zebra\n//       [2]: &#198;ble\n</code></pre><pre><code class=\"lang-vb\" name=\"Conceptual.Strings.Comparing#3\">Imports System.Globalization\nImports System.IO\nImports System.Threading\n\nPublic Class TextToFile   \n   Public Shared Sub Main()\n      &#39; Creates and initializes a new array to store \n      &#39; these date/time objects.\n      Dim stringArray() As String = { &quot;Apple&quot;, &quot;&#198;ble&quot;, &quot;Zebra&quot;}\n      \n      &#39; Displays the values of the array.\n      Console.WriteLine(&quot;The original string array:&quot;)\n      PrintIndexAndValues(stringArray)\n      \n      &#39; Set the CurrentCulture to &quot;en-US&quot;.\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n      &#39; Sort the values of the Array.\n      Array.Sort(stringArray)\n      \n      &#39; Display the values of the array.\n      Console.WriteLine(&quot;After sorting for the &quot;&quot;en-US&quot;&quot; culture:&quot;)\n      PrintIndexAndValues(stringArray)\n      \n      &#39; Set the CurrentCulture to &quot;da-DK&quot;.\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;da-DK&quot;)\n      &#39; Sort the values of the Array.\n      Array.Sort(stringArray)\n      \n      &#39; Displays the values of the Array.\n      Console.WriteLine(&quot;After sorting for the culture &quot;&quot;da-DK&quot;&quot;:&quot;)\n      PrintIndexAndValues(stringArray)\n   End Sub\n\n   Public Shared Sub PrintIndexAndValues(myArray() As String)\n      For i As Integer = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n         Console.WriteLine(&quot;[{0}]: {1}&quot;, i, myArray(i))\n      Next\n      Console.WriteLine()\n   End Sub \nEnd Class\n&#39; The example displays the following output:\n&#39;       The original string array:\n&#39;       [0]: Apple\n&#39;       [1]: &#198;ble\n&#39;       [2]: Zebra\n&#39;       \n&#39;       After sorting for the &quot;en-US&quot; culture:\n&#39;       [0]: &#198;ble\n&#39;       [1]: Apple\n&#39;       [2]: Zebra\n&#39;       \n&#39;       After sorting for the culture &quot;da-DK&quot;:\n&#39;       [0]: Apple\n&#39;       [1]: Zebra\n&#39;       [2]: &#198;ble\n</code></pre><div class=\"WARNING\"><h5>Warning</h5><p> If your primary purpose in comparing strings is to determine whether they are equal, you should call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method. Typically, you should use <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> to perform an ordinal comparison. The <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method is intended primarily to sort strings.  </p>\n</div>\n<p> String search methods, such as <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a> and <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, also can perform culture-sensitive or ordinal string comparisons. The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. A culture-sensitive search in which the current culture is English (United States) considers the substring &quot;oe&quot; to match the ligature &quot;œ&quot;. Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and finds a match at the beginning of the string. An ordinal search, on the other hand, does not find a match in either case.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#13\">using namespace System;\n\nvoid FindInString(String^ s, String^ substring, StringComparison options);\n\nvoid main()\n{\n   // Search for &quot;oe&quot; and &quot;�u&quot; in &quot;�ufs&quot; and &quot;oeufs&quot;.\n   String^ s1 = L&quot;�ufs&quot;;\n   String^ s2 = L&quot;oeufs&quot;;\n   FindInString(s1, &quot;oe&quot;, StringComparison::CurrentCulture);\n   FindInString(s1, &quot;oe&quot;, StringComparison::Ordinal);\n   FindInString(s2, &quot;�u&quot;, StringComparison::CurrentCulture);\n   FindInString(s2, &quot;�u&quot;, StringComparison::Ordinal);\n   Console::WriteLine();\n\n   String^ s3 = L&quot;co\\x00ADoperative&quot;;\n   FindInString(s3, L&quot;\\x00AD&quot;, StringComparison::CurrentCulture);\n   FindInString(s3, L&quot;\\x00AD&quot;, StringComparison::Ordinal);\n}\n\nvoid FindInString(String^ s, String^ substring, StringComparison options)\n{\n   int result = s-&gt;IndexOf(substring, options);\n   if (result != -1)\n      Console::WriteLine(&quot;&#39;{0}&#39; found in {1} at position {2}&quot;, \n                        substring, s, result);\n   else\n      Console::WriteLine(&quot;&#39;{0}&#39; not found in {1}&quot;, \n                        substring, s);                                                  \n}\n// The example displays the following output:\n//      &#39;oe&#39; found in oufs at position 0\n//      &#39;oe&#39; not found in oufs\n//      &#39;ou&#39; found in oeufs at position 0\n//      &#39;ou&#39; not found in oeufs\n//\n//      &#39;-&#39; found in co-operative at position 0\n//      &#39;-&#39; found in co-operative at position 2\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#13\">Module Example\n   Public Sub Main()\n      &#39; Search for &quot;oe&quot; and &quot;œu&quot; in &quot;œufs&quot; and &quot;oeufs&quot;.\n      Dim s1 As String = &quot;œufs&quot;\n      Dim s2 As String = &quot;oeufs&quot;\n      FindInString(s1, &quot;oe&quot;, StringComparison.CurrentCulture)\n      FindInString(s1, &quot;oe&quot;, StringComparison.Ordinal)\n      FindInString(s2, &quot;œu&quot;, StringComparison.CurrentCulture)\n      FindInString(s2, &quot;œu&quot;, StringComparison.Ordinal)\n      Console.WriteLine()\n      \n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      Dim s3 As String = &quot;co&quot; + softHyphen + &quot;operative&quot;\n      FindInString(s3, softHyphen, StringComparison.CurrentCulture)\n      FindInString(s3, softHyphen, StringComparison.Ordinal)\n   End Sub\n\n   Private Sub FindInString(s As String, substring As String, \n                            options As StringComparison)\n      Dim result As Integer = s.IndexOf(substring, options)\n      If result &lt;&gt; -1\n         Console.WriteLine(&quot;&#39;{0}&#39; found in {1} at position {2}&quot;, \n                           substring, s, result)\n      Else\n         Console.WriteLine(&quot;&#39;{0}&#39; not found in {1}&quot;, \n                           substring, s)\n      End If                                                                          \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;oe&#39; found in œufs at position 0\n&#39;       &#39;oe&#39; not found in œufs\n&#39;       &#39;œu&#39; found in oeufs at position 0\n&#39;       &#39;œu&#39; not found in oeufs\n&#39;       \n&#39;       &#39;&#173;&#39; found in co&#173;operative at position 0\n&#39;       &#39;&#173;&#39; found in co&#173;operative at position 2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#13\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Search for &quot;oe&quot; and &quot;œu&quot; in &quot;œufs&quot; and &quot;oeufs&quot;.\n      string s1 = &quot;œufs&quot;;\n      string s2 = &quot;oeufs&quot;;\n      FindInString(s1, &quot;oe&quot;, StringComparison.CurrentCulture);\n      FindInString(s1, &quot;oe&quot;, StringComparison.Ordinal);\n      FindInString(s2, &quot;œu&quot;, StringComparison.CurrentCulture);\n      FindInString(s2, &quot;œu&quot;, StringComparison.Ordinal);\n      Console.WriteLine();\n      \n      string s3 = &quot;co\\u00ADoperative&quot;;\n      FindInString(s3, &quot;\\u00AD&quot;, StringComparison.CurrentCulture);\n      FindInString(s3, &quot;\\u00AD&quot;, StringComparison.Ordinal);\n   }\n\n   private static void FindInString(string s, string substring, StringComparison options)\n   {\n      int result = s.IndexOf(substring, options);\n      if (result != -1)\n         Console.WriteLine(&quot;&#39;{0}&#39; found in {1} at position {2}&quot;, \n                           substring, s, result);\n      else\n         Console.WriteLine(&quot;&#39;{0}&#39; not found in {1}&quot;, \n                           substring, s);                                                  \n   }\n}\n// The example displays the following output:\n//       &#39;oe&#39; found in œufs at position 0\n//       &#39;oe&#39; not found in œufs\n//       &#39;œu&#39; found in oeufs at position 0\n//       &#39;œu&#39; not found in oeufs\n//       \n//       &#39;&#173;&#39; found in co&#173;operative at position 0\n//       &#39;&#173;&#39; found in co&#173;operative at position 2\n</code></pre><h3 id=\"searching-strings\">Searching Strings</h3>\n<p> String search methods, such as <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a> and <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.  </p>\n<p> The search methods in the String class that search for an individual character, such as the<a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, or one of a set of characters,   such as the <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, all perform an ordinal search. To perform a culture-sensitive search for a character, you must call a <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> method such as <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.IndexOf(String,Char)</a> or <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.LastIndexOf(String,Char)</a>. Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different. For example, a search for a precomposed Unicode character such as the ligature &quot;Æ&quot; (U+00C6) might match any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+041U+0045), depending on the culture. The following example illustrates the difference between the <a class=\"xref\" href=\"system.string#System_String_IndexOf_System_Char_\" data-linktype=\"relative-path\">System.String.IndexOf(Char)</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.IndexOf(String,Char)</a> methods when searching for an individual character. The ligature &quot;æ&quot; (U+00E6) is found in the string &quot;aerial&quot; when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Class#22\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] cultureNames = { &quot;da-DK&quot;, &quot;en-US&quot; };\n      CompareInfo ci;\n      String str = &quot;aerial&quot;;\n      Char ch = &#39;&#230;&#39;;  // U+00E6\n      \n      Console.Write(&quot;Ordinal comparison -- &quot;);\n      Console.WriteLine(&quot;Position of &#39;{0}&#39; in {1}: {2}&quot;, ch, str,\n                        str.IndexOf(ch));\n      \n      foreach (var cultureName in cultureNames) {\n         ci = CultureInfo.CreateSpecificCulture(cultureName).CompareInfo;\n         Console.Write(&quot;{0} cultural comparison -- &quot;, cultureName);\n         Console.WriteLine(&quot;Position of &#39;{0}&#39; in {1}: {2}&quot;, ch, str,\n                           ci.IndexOf(str, ch));\n      }\n   }\n}\n// The example displays the following output:\n//       Ordinal comparison -- Position of &#39;&#230;&#39; in aerial: -1\n//       da-DK cultural comparison -- Position of &#39;&#230;&#39; in aerial: -1\n//       en-US cultural comparison -- Position of &#39;&#230;&#39; in aerial: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#22\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cultureNames() As String = { &quot;da-DK&quot;, &quot;en-US&quot; }\n      Dim ci As CompareInfo\n      Dim str As String = &quot;aerial&quot;\n      Dim ch As Char = &quot;&#230;&quot;c  &#39; U+00E6\n      \n      Console.Write(&quot;Ordinal comparison -- &quot;)\n      Console.WriteLine(&quot;Position of &#39;{0}&#39; in {1}: {2}&quot;, ch, str,\n                        str.IndexOf(ch))\n      \n      For Each cultureName In cultureNames\n         ci = CultureInfo.CreateSpecificCulture(cultureName).CompareInfo\n         Console.Write(&quot;{0} cultural comparison -- &quot;, cultureName)\n         Console.WriteLine(&quot;Position of &#39;{0}&#39; in {1}: {2}&quot;, ch, str,\n                           ci.IndexOf(str, ch))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Ordinal comparison -- Position of &#39;&#230;&#39; in aerial: -1\n&#39;       da-DK cultural comparison -- Position of &#39;&#230;&#39; in aerial: -1\n&#39;       en-US cultural comparison -- Position of &#39;&#230;&#39; in aerial: 0\n</code></pre><p> On the other hand, String class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a>. The sole exception is <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, which performs an ordinal search.  </p>\n<p><a name=\"equality\"></a>   </p>\n<h3 id=\"testing-for-equality\">Testing for equality</h3>\n<p> Use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine the relationship of two strings in the sort order. Typically, this is a culture-sensitive operation. In contrast, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method to test for equality. Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> It is possible to test for equality by calling the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method and determining whether the return value is zero. However, this practice is not recommended. To determine whether two strings are equal, you should call one of the overloads of the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method. The preferred overload to call is either the instance <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Equals(String,StringComparison)</a> method or the static <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Equals(String,String,StringComparison)</a> method, because both methods include a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> parameter that explicitly specifies the type of comparison.  </p>\n</div>\n<p> The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead. In this case, the intent of the code is to prohibit file system access from URLs that begin with &quot;FILE://&quot; or &quot;file://&quot; by performing a case-insensitive comparison of the beginning of a URL with the string &quot;FILE://&quot;. However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with &quot;file://&quot;, the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase &quot;i&quot; is &quot;İ&quot; instead of &quot;I&quot;. As a result, file system access is inadvertently permitted. On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#11\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nbool TestForEquality(String^ str, StringComparison cmp);\n\nvoid main()\n{\n   Thread::CurrentThread-&gt;CurrentCulture = CultureInfo::CreateSpecificCulture(&quot;tr-TR&quot;);      \n\n   String^ filePath = &quot;file://c:/notes.txt&quot;;\n\n   Console::WriteLine(&quot;Culture-sensitive test for equality:&quot;);\n   if (! TestForEquality(filePath, StringComparison::CurrentCultureIgnoreCase))\n      Console::WriteLine(&quot;Access to {0} is allowed.&quot;, filePath);\n   else\n      Console::WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath);\n\n   Console::WriteLine(&quot;\\nOrdinal test for equality:&quot;);\n   if (! TestForEquality(filePath, StringComparison::OrdinalIgnoreCase))\n      Console::WriteLine(&quot;Access to {0} is allowed.&quot;, filePath);\n   else\n      Console::WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath);\n}\n\nbool TestForEquality(String^ str, StringComparison cmp)\n{\n      int position = str-&gt;IndexOf(&quot;://&quot;);\n      if (position &lt; 0) return false;\n\n      String^ substring = str-&gt;Substring(0, position);  \n      return substring-&gt;Equals(&quot;FILE&quot;, cmp);\n}\n// The example displays the following output: \n//       Culture-sensitive test for equality: \n//       Access to file://c:/notes.txt is allowed. \n//        \n//       Ordinal test for equality: \n//       Access to file://c:/notes.txt is not allowed.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#11\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;);      \n\n      string filePath = &quot;file://c:/notes.txt&quot;;\n      \n      Console.WriteLine(&quot;Culture-sensitive test for equality:&quot;);\n      if (! TestForEquality(filePath, StringComparison.CurrentCultureIgnoreCase))\n         Console.WriteLine(&quot;Access to {0} is allowed.&quot;, filePath);\n      else\n         Console.WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath);\n      \n      Console.WriteLine(&quot;\\nOrdinal test for equality:&quot;);\n      if (! TestForEquality(filePath, StringComparison.OrdinalIgnoreCase))\n         Console.WriteLine(&quot;Access to {0} is allowed.&quot;, filePath);\n      else\n         Console.WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath);\n   }\n\n   private static bool TestForEquality(string str, StringComparison cmp)\n   {\n      int position = str.IndexOf(&quot;://&quot;);\n      if (position &lt; 0) return false;\n\n      string substring = str.Substring(0, position);  \n      return substring.Equals(&quot;FILE&quot;, cmp);\n   }\n}\n// The example displays the following output:\n//       Culture-sensitive test for equality:\n//       Access to file://c:/notes.txt is allowed.\n//       \n//       Ordinal test for equality:\n//       Access to file://c:/notes.txt is not allowed.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#11\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;)      \n\n      Dim filePath As String = &quot;file://c:/notes.txt&quot;\n      \n      Console.WriteLine(&quot;Culture-sensitive test for equality:&quot;)\n      If Not TestForEquality(filePath, StringComparison.CurrentCultureIgnoreCase) Then\n         Console.WriteLine(&quot;Access to {0} is allowed.&quot;, filePath)\n      Else\n         Console.WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath)\n      End If       \n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Ordinal test for equality:&quot;)\n      If Not TestForEquality(filePath, StringComparison.OrdinalIgnoreCase) Then\n         Console.WriteLine(&quot;Access to {0} is allowed.&quot;, filePath)\n      Else\n         Console.WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath)\n      End If       \n   End Sub\n   \n   Private Function TestForEquality(str As String, cmp As StringComparison) As Boolean\n      Dim position As Integer = str.IndexOf(&quot;://&quot;)\n      If position &lt; 0 Then Return False\n\n      Dim substring As String = str.Substring(0, position)  \n      Return substring.Equals(&quot;FILE&quot;, cmp)\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Culture-sensitive test for equality:\n&#39;       Access to file://c:/notes.txt is allowed.\n&#39;       \n&#39;       Ordinal test for equality:\n&#39;       Access to file://c:/notes.txt is not allowed.\n</code></pre><p><a name=\"Normalization\"></a>   </p>\n<h2 id=\"normalization\">Normalization</h2>\n<p> Some Unicode characters have multiple representations. For example, any of the following code points can represent the letter &quot;ắ&quot;:  </p>\n<ul>\n<li><p>U+1EAF  </p>\n</li>\n<li><p>U+0103 U+0301  </p>\n</li>\n<li><p>U+0061 U+0306 U+0301  </p>\n<p>Multiple representations for a single character complicate searching, sorting, matching, and other string operations.  </p>\n<p>The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations. Normalization can use several algorithms, called normalization forms, that follow different rules. The .NET Framework supports Unicode normalization forms C, D, KC, and KD. When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.  </p>\n<p>An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in each string. TheString class includes a number of methods that can perform an ordinal comparison, including the following:  </p>\n</li>\n<li><p>Any overload of the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a>, <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a>, <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a>,  <a class=\"xref\" href=\"system.string#System_String_EndsWith_\" data-linktype=\"relative-path\">EndsWith</a>, <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>,and <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> methods that includes a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter. The method performs an ordinal comparison if you supply a value of <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> for this parameter.  </p>\n</li>\n<li><p>The overloads of the <a class=\"xref\" href=\"system.string#System_String_CompareOrdinal_\" data-linktype=\"relative-path\">CompareOrdinal</a> method.  </p>\n</li>\n<li><p>Methods that use ordinal comparison by default, such as <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.string#System_String_Replace_\" data-linktype=\"relative-path\">Replace</a>, and <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a>.  </p>\n</li>\n<li><p>Methods that search for a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>value or for the elements in a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> arrayin a string instance. Such methods include <a class=\"xref\" href=\"system.string#System_String_IndexOf_System_Char_\" data-linktype=\"relative-path\">IndexOf(Char)</a> and [Split(Char&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;.  </p>\n<p>You can determine whether a string is normalized to normalization form C by calling the <a class=\"xref\" href=\"system.string#System_String_IsNormalized\" data-linktype=\"relative-path\">System.String.IsNormalized()</a> method, or you can call the <a class=\"xref\" href=\"system.string#System_String_IsNormalized_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">System.String.IsNormalized(NormalizationForm)</a> method to determine whether a string is normalized to a specified normalization form. You can also call the <a class=\"xref\" href=\"system.string#System_String_Normalize\" data-linktype=\"relative-path\">System.String.Normalize()</a> method to convert a string to normalization form C, or you can call the <a class=\"xref\" href=\"system.string#System_String_Normalize_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">System.String.Normalize(NormalizationForm)</a> method to convert a string to a specified normalization form. For step-by-step information about normalizing and comparing strings, see the <a class=\"xref\" href=\"system.string#System_String_Normalize\" data-linktype=\"relative-path\">Normalize()</a> and <a class=\"xref\" href=\"system.string#System_String_Normalize_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">Normalize(NormalizationForm)</a> methods.  </p>\n<p>The following simple example illustrates string normalization. It defines the letter &quot;ố&quot; in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings. It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form. In each case, the second test for equality shows that the strings are equal.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#14\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::IO;\nusing namespace System::Text;\n\npublic ref class Example\n{\nprivate:\n   StreamWriter^ sw;\n\n   void TestForEquality(... array&lt;String^&gt;^  words)\n   {\n      for (int ctr = 0; ctr &lt;= words-&gt;Length - 2; ctr++)\n         for (int ctr2 = ctr + 1; ctr2 &lt;= words-&gt;Length - 1; ctr2++) \n            sw-&gt;WriteLine(&quot;{0} ({1}) = {2} ({3}): {4}&quot;, \n                         words[ctr], ShowBytes(words[ctr]),\n                         words[ctr2], ShowBytes(words[ctr2]),\n                         words[ctr]-&gt;Equals(words[ctr2], StringComparison::Ordinal));\n   }\n\n   String^ ShowBytes(String^ str)\n   {\n      String^ result = nullptr;\n      for each (Char ch in str)\n         result += String::Format(&quot;{0} &quot;, Convert::ToUInt16(ch).ToString(&quot;X4&quot;)); \n      return result-&gt;Trim();            \n   } \n\n   array&lt;String^&gt;^ NormalizeStrings(NormalizationForm nf, ... array&lt;String^&gt;^ words)\n   {\n      for (int ctr = 0; ctr &lt; words-&gt;Length; ctr++)\n         if (! words[ctr]-&gt;IsNormalized(nf))\n            words[ctr] = words[ctr]-&gt;Normalize(nf); \n      return words;   \n   }\n\npublic: \n   void Execute()\n   {\n      sw = gcnew StreamWriter(&quot;.\\\\TestNorm1.txt&quot;);\n\n      // Define three versions of the same word.  \n      String^ s1 = L&quot;sống&quot;;        // create word with U+1ED1 \n      String^ s2 = L&quot;s\\x00F4\\x0301ng&quot;;\n      String^ s3 = L&quot;so\\x0302\\x0301ng&quot;;\n\n      TestForEquality(s1, s2, s3);      \n      sw-&gt;WriteLine();\n\n      // Normalize and compare strings using each normalization form. \n      for each (String^ formName in Enum::GetNames(NormalizationForm::typeid))\n      {\n         sw-&gt;WriteLine(&quot;Normalization {0}:\\n&quot;, formName); \n         NormalizationForm nf = (NormalizationForm) Enum::Parse(NormalizationForm::typeid, formName);\n         array&lt;String^&gt;^ sn = NormalizeStrings(nf, s1, s2, s3 );\n         TestForEquality(sn);           \n         sw-&gt;WriteLine(&quot;\\n&quot;);                                        \n      }\n\n      sw-&gt;Close(); \n   }\n};\n\nvoid main()\n{\n   Example^ ex = gcnew Example();\n   ex-&gt;Execute();\n}\n// The example produces the following output:\n// The example displays the following output: \n//       sống (0073 1ED1 006E 0067) = s&#244;́ng (0073 00F4 0301 006E 0067): False \n//       sống (0073 1ED1 006E 0067) = sống (0073 006F 0302 0301 006E 0067): False \n//       s&#244;́ng (0073 00F4 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): False \n//        \n//       Normalization FormC: \n//        \n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True \n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True \n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True \n//        \n//        \n//       Normalization FormD: \n//        \n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True \n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True \n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True \n//        \n//        \n//       Normalization FormKC: \n//        \n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True \n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True \n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True \n//        \n//        \n//       Normalization FormKD: \n//        \n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True \n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True \n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#14\">using System;\nusing System.Globalization;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   private static StreamWriter sw;\n   \n   public static void Main()\n   {\n      sw = new StreamWriter(@&quot;.\\TestNorm1.txt&quot;);\n\n      // Define three versions of the same word. \n      string s1 = &quot;sống&quot;;        // create word with U+1ED1\n      string s2 = &quot;s\\u00F4\\u0301ng&quot;;\n      string s3 = &quot;so\\u0302\\u0301ng&quot;;\n\n      TestForEquality(s1, s2, s3);      \n      sw.WriteLine();\n\n      // Normalize and compare strings using each normalization form.\n      foreach (string formName in Enum.GetNames(typeof(NormalizationForm)))\n      {\n         sw.WriteLine(&quot;Normalization {0}:\\n&quot;, formName); \n         NormalizationForm nf = (NormalizationForm) Enum.Parse(typeof(NormalizationForm), formName);\n         string[] sn = NormalizeStrings(nf, s1, s2, s3);\n         TestForEquality(sn);           \n         sw.WriteLine(&quot;\\n&quot;);                                        \n      }\n      \n      sw.Close();   \n   }\n\n   private static void TestForEquality(params string[] words)\n   {\n      for (int ctr = 0; ctr &lt;= words.Length - 2; ctr++)\n         for (int ctr2 = ctr + 1; ctr2 &lt;= words.Length - 1; ctr2++) \n            sw.WriteLine(&quot;{0} ({1}) = {2} ({3}): {4}&quot;, \n                         words[ctr], ShowBytes(words[ctr]),\n                         words[ctr2], ShowBytes(words[ctr2]),\n                         words[ctr].Equals(words[ctr2], StringComparison.Ordinal));\n   }\n\n   private static string ShowBytes(string str)\n   {\n      string result = null;\n      foreach (var ch in str)\n         result += String.Format(&quot;{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;)); \n      return result.Trim();            \n   } \n   \n   private static string[] NormalizeStrings(NormalizationForm nf, params string[] words)\n   {\n      for (int ctr = 0; ctr &lt; words.Length; ctr++)\n         if (! words[ctr].IsNormalized(nf))\n            words[ctr] = words[ctr].Normalize(nf); \n      return words;   \n   }\n}\n// The example displays the following output:\n//       sống (0073 1ED1 006E 0067) = s&#244;́ng (0073 00F4 0301 006E 0067): False\n//       sống (0073 1ED1 006E 0067) = sống (0073 006F 0302 0301 006E 0067): False\n//       s&#244;́ng (0073 00F4 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): False\n//       \n//       Normalization FormC:\n//       \n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n//       \n//       \n//       Normalization FormD:\n//       \n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n//       \n//       \n//       Normalization FormKC:\n//       \n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n//       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n//       \n//       \n//       Normalization FormKD:\n//       \n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n//       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#14\">Imports System.Globalization\nImports System.IO\nImports System.Text\n\nModule Example\n   Private sw As StreamWriter\n       \n   Public Sub Main()\n      sw = New StreamWriter(&quot;.\\TestNorm1.txt&quot;)\n\n      &#39; Define three versions of the same word. \n      Dim s1 As String = &quot;sống&quot;        &#39; create word with U+1ED1\n      Dim s2 AS String = &quot;s&quot; + ChrW(&amp;h00F4) + ChrW(&amp;h0301) + &quot;ng&quot;\n      Dim s3 As String = &quot;so&quot; + ChrW(&amp;h0302) + ChrW(&amp;h0301) + &quot;ng&quot;\n\n      TestForEquality(s1, s2, s3)      \n      sw.WriteLine()\n\n      &#39; Normalize and compare strings using each normalization form.\n      For Each formName In [Enum].GetNames(GetType(NormalizationForm))\n         sw.WriteLine(&quot;Normalization {0}:&quot;, formName) \n         Dim nf As NormalizationForm = CType([Enum].Parse(GetType(NormalizationForm), formName),  \n                                             NormalizationForm)\n         Dim sn() As String = NormalizeStrings(nf, s1, s2, s3)\n         TestForEquality(sn)           \n         sw.WriteLine(vbCrLf)                                        \n      Next\n      \n      sw.Close()   \n   End Sub\n\n   Private Sub TestForEquality(ParamArray words As String())\n      For ctr As Integer = 0 To words.Length - 2\n         For ctr2 As Integer = ctr + 1 To words.Length - 1 \n            sw.WriteLine(&quot;{0} ({1}) = {2} ({3}): {4}&quot;, \n                         words(ctr), ShowBytes(words(ctr)),\n                         words(ctr2), ShowBytes(words(ctr2)),\n                         words(ctr).Equals(words(ctr2), StringComparison.Ordinal))\n         Next                \n      Next   \n   End Sub\n\n   Private Function ShowBytes(str As String) As String\n      Dim result As String = Nothing\n      For Each ch In str\n         result += String.Format(&quot;{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;)) \n      Next\n      Return result.Trim()            \n   End Function  \n   \n   Private Function NormalizeStrings(nf As NormalizationForm, ParamArray words() As String) As String()\n      For ctr As Integer = 0 To words.Length - 1\n         If Not words(ctr).IsNormalized(nf) Then\n            words(ctr) = words(ctr).Normalize(nf)\n         End If    \n      Next\n      Return words   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       sống (0073 1ED1 006E 0067) = s&#244;́ng (0073 00F4 0301 006E 0067): False\n&#39;       sống (0073 1ED1 006E 0067) = sống (0073 006F 0302 0301 006E 0067): False\n&#39;       s&#244;́ng (0073 00F4 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): False\n&#39;       \n&#39;       Normalization FormC:\n&#39;       \n&#39;       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n&#39;       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n&#39;       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n&#39;       \n&#39;       \n&#39;       Normalization FormD:\n&#39;       \n&#39;       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n&#39;       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n&#39;       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n&#39;       \n&#39;       \n&#39;       Normalization FormKC:\n&#39;       \n&#39;       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n&#39;       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n&#39;       sống (0073 1ED1 006E 0067) = sống (0073 1ED1 006E 0067): True\n&#39;       \n&#39;       \n&#39;       Normalization FormKD:\n&#39;       \n&#39;       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n&#39;       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n&#39;       sống (0073 006F 0302 0301 006E 0067) = sống (0073 006F 0302 0301 006E 0067): True\n</code></pre><p>For more information about normalization and normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>, as well as <a href=\"http://unicode.org/reports/tr15/\" data-linktype=\"external\">Unicode Standard Annex #15: Unicode Normalization Forms</a> and the <a href=\"http://www.unicode.org/faq/normalization.html\" data-linktype=\"external\">Normalization FAQ</a> on the unicode.org website.  </p>\n</li>\n</ul>\n<p><a name=\"ByCategory\"></a>   </p>\n<h2 id=\"string-operations-by-category\">String operations by category</h2>\n<p> The String class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.  </p>\n<h3 id=\"comparing-strings\">Comparing strings</h3>\n<p> You can compare strings to determine their relative position in the sort order by using the following Stringmethods:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> returns an integer that indicates the relationship of one string to a second string in the sort order.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_CompareOrdinal_\" data-linktype=\"relative-path\">CompareOrdinal</a> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> returns an integer that indicates the relationship of the current string instance to a second string in the sort order. The <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method provides the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> and <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementations for the String class.  </p>\n</li>\n</ul>\n<h3 id=\"testing-strings-for-equality\">Testing strings for equality</h3>\n<p> You call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method to determine whether two strings are equal. The instance <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Equals(String,String,StringComparison)</a> and the static <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Equals(String,StringComparison)</a> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored. Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.  </p>\n<h3 id=\"finding-characters-in-a-string\">Finding characters in a string</h3>\n<p> The String class includes two kinds of search methods:  </p>\n<ul>\n<li><p>Methods that return a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value to indicate whether a particular substring is present in a string instance. These include the <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.string#System_String_EndsWith_\" data-linktype=\"relative-path\">EndsWith</a>, and <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a> methods.  </p>\n</li>\n<li><p>Methods that indicate the starting position of a substring in a string instance. These include the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a>, <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, and <a class=\"xref\" href=\"system.string#System_String_LastIndexOfAny_\" data-linktype=\"relative-path\">LastIndexOfAny</a> methods.  </p>\n</li>\n</ul>\n<div class=\"WARNING\"><h5>Warning</h5><p> If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions. For more information, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a>.  </p>\n</div>\n<h3 id=\"modifying-a-string\">Modifying a string</h3>\n<p> The String class includes the following methods that appear to modify the value of a string:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Insert_\" data-linktype=\"relative-path\">Insert</a> inserts a string into the current String instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_PadLeft_\" data-linktype=\"relative-path\">PadLeft</a> inserts one or more occurrences of a specified character at the beginning of a string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_PadRight_\" data-linktype=\"relative-path\">PadRight</a> inserts one or more occurrences of a specified character at the beginning of a string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Remove_\" data-linktype=\"relative-path\">Remove</a> deletes a substring from the current String instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Replace_\" data-linktype=\"relative-path\">Replace</a> replaces a substring with another substring in the current String instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_ToLower_\" data-linktype=\"relative-path\">ToLower</a> and <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> convert all the characters in a string to lowercase.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_ToUpper_\" data-linktype=\"relative-path\">ToUpper</a> and <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> convert all the characters in a string to uppercase.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Trim_\" data-linktype=\"relative-path\">Trim</a> removes all occurrences of a character from the beginning and end of a string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_TrimEnd_\" data-linktype=\"relative-path\">TrimEnd</a> removes all occurrences of a character from the end of a string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> removes all occurrences of a character from the beginning of a string.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> All string modification methods return a new String object. They do not modify the value of the current instance.  </p>\n</div>\n<h3 id=\"extracting-substrings-from-a-string\">Extracting substrings from a string</h3>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method separates a single string into multiple strings. Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.  </p>\n<h3 id=\"combining-strings\">Combining strings</h3>\n<p> The following String methods can be used for string concatenation:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> combines one or more substrings into a single string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Join_\" data-linktype=\"relative-path\">Join</a> concatenates one or more substrings into a single element and adds a separator between each substring.  </p>\n</li>\n</ul>\n<h3 id=\"formatting-values\">Formatting values</h3>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value. The <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> method is often used to do the following:  </p>\n<ul>\n<li><p>To embed the string representation of a numeric value in a string.  </p>\n</li>\n<li><p>To embed the string representation of a date and time value in a string.  </p>\n</li>\n<li><p>To embed the string representation of an enumeration value in a string.  </p>\n</li>\n<li><p>To embed the string representation of some object that supports the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface in a string.  </p>\n</li>\n<li><p>To right-justify or left-justify a substring in a field within a larger string.  </p>\n<p>For detailed information about formatting operations and examples, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.  </p>\n</li>\n</ul>\n<h3 id=\"copying-a-string\">Copying a string</h3>\n<p> You can call the following String methods to make a copy of a string:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Clone_\" data-linktype=\"relative-path\">Clone</a> returns a reference to an existing String object.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Copy_\" data-linktype=\"relative-path\">Copy</a> creates a copy of an existing string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> copies a portion of a string to a character array.  </p>\n</li>\n</ul>\n<h3 id=\"normalizing-a-string\">Normalizing a string</h3>\n<p> In Unicode, a single character can have multiple code points. Normalization converts these equivalent characters into the same binary representation. The <a class=\"xref\" href=\"system.string#System_String_Normalize_\" data-linktype=\"relative-path\">Normalize</a> method performs the normalization, and the <a class=\"xref\" href=\"system.string#System_String_IsNormalized_\" data-linktype=\"relative-path\">IsNormalized</a> method determines whether a string is normalized.  </p>\n<p> For more information and an example, see the <a href=\"#Normalization\" data-linktype=\"self-bookmark\">Normalization</a> section earlier in this topic.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String__ctor_System_Char__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">String(Char*)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of Unicode characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public String (char* value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to a null-terminated array of Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current process does not have read access to all the addressed characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> specifies an address less than 64000.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code>constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String__ctor_System_Char___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">String(Char[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by an array of Unicode characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public String (char[] value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String__ctor_System_SByte__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">String(SByte*)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a pointer to an array of 8-bit signed integers.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public String (sbyte* value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to a null-terminated array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <span class=\"xref\">stem.Text.Encoding.Default*</span>).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The length of the new string to initialize, which is determined by the null termination character of <code>value</code>, is too large to allocate.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> specifies an invalid address.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String__ctor_System_Char_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">String(Char,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified Unicode character repeated a specified number of times.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public String (char c, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>c</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of times <code>c</code> occurs.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String__ctor_System_Char__System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">String(Char*,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public String (char* value, int startIndex, int length);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to an array of Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position within <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters within <code>value</code> to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> or <code>length</code> is less than zero, <code>value</code> + <code>startIndex</code> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> + <code>startIndex</code> specifies an address less than 64000.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String__ctor_System_Char___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">String(Char[],Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public String (char[] value, int startIndex, int length);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position within <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters within <code>value</code> to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The sum of <code>startIndex</code> and <code>length</code> is greater than the number of elements in <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String__ctor_System_SByte__System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">String(SByte*,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public String (sbyte* value, int startIndex, int length);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to an array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <span class=\"xref\">stem.Text.Encoding.Default*</span>).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position within <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters within <code>value</code> to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed.  </p>\n<p> -or-  </p>\n<p> The length of the new string to initialize is too large to allocate.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The address specified by <code>value</code> + <code>startIndex</code> is less than 64K.  </p>\n<p> -or-  </p>\n<p> A new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String__ctor_System_SByte__System_Int32_System_Int32_System_Text_Encoding_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">String(SByte*,Int32,Int32,Encoding)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to an array of 8-bit signed integers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position within <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters within <code>value</code> to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>enc</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that specifies how the array referenced by <code>value</code> is encoded. If <code>enc</code> is <code>null</code>, ANSI encoding is assumed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed.  </p>\n<p> -or-  </p>\n<p> The length of the new string to initialize is too large to allocate.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The address specified by <code>value</code> + <code>startIndex</code> is less than 64K.  </p>\n<p> -or-  </p>\n<p> A new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded as specified by <code>enc</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Empty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Empty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Represents the empty string. This field is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly string Empty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The value of this field is the zero-length string, &quot;&quot;.  </p>\n<p> In application code, this field is most commonly used in assignments to initialize a string variable to an empty string. To test whether the value of a string is either <code>null</code> or Empty, use the <a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Chars_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Chars(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at a specified position in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public char this[int index] { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A position in the current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object at position <code>index</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>index</code> is greater than or equal to the length of this object or less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>index</code> parameter is zero-based.  </p>\n<p> This property returns the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at the position specified by the <code>index</code> parameter. However, a Unicode character might be represented by more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. Use the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">System.Globalization.StringInfo</a> class to work with Unicode characters instead of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects. For more information, see the &quot;Char Objects and Unicode Characters&quot; section in the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class overview.  </p>\n<p> In C#, the Chars property is an indexer. In Visual Basic, it is the default property of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class. Each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object in the string can be accessed by using code such as the following.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Chars#1\">      string str1 = &quot;Test&quot;;\n      for (int ctr = 0; ctr &lt;= str1.Length - 1; ctr++ )\n         Console.Write(&quot;{0} &quot;, str1[ctr]);\n      // The example displays the following output:\n      //      T e s t         \n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Chars#1\">      Dim str1 As String = &quot;Test&quot;\n      For ctr As Integer = 0 to str1.Length - 1\n         Console.Write(&quot;{0} &quot;, str1(ctr))\n      Next   \n      &#39; The example displays the following output:\n      &#39;      T e s t         \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Length\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Length</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the number of characters in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Length { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters in the current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Length property returns the number of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in this instance, not the number of Unicode characters. The reason is that a Unicode character might be represented by more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. Use the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">System.Globalization.StringInfo</a> class to work with each Unicode character instead of each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.  </p>\n<p> In some languages, such as C and C++, a null character indicates the end of a string. In the .NET Framework, a null character can be embedded in a string. When a string includes one or more null characters, they are included in the length of the total string. For example, in the following string, the substrings &quot;abc&quot; and &quot;def&quot; are separated by a null character. The Length property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class#1\">Imports System.Text\n\nModule Example\n\n   Public Sub Main()\n      Dim characters As String = &quot;abc&quot; + ChrW(0) + &quot;def&quot;\n      Console.WriteLine(characters.Length)       &#39; Displays 7\n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#1\">using System;\nusing System.Text;\n\npublic class StringClassTest\n{\n   public static void Main()\n   {\n      string characters = &quot;abc\\u0000def&quot;;\n      Console.WriteLine(characters.Length);    // Displays 7\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class#1\">using namespace System;\nusing namespace System::Text;\n\nvoid main()\n{\n   String^ characters = &quot;abc&quot; + L&#39;0&#39; + &quot;def&quot;;\n   Console::WriteLine(characters-&gt;Length);        // Displays 7\n}\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Clone\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Clone()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a reference to this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object Clone ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The return value is not an independent copy of this instance; it is simply another view of the same data. Use the <a class=\"xref\" href=\"system.string#System_String_Copy_\" data-linktype=\"relative-path\">Copy</a> or <a class=\"xref\" href=\"system.string#System_String_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method to create a separate <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object with the same value as this instance.  </p>\n<p> Because the Clone method simply returns the existing string instance, there is little reason to call it directly.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects and returns an integer that indicates their relative position in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, string strB);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> When comparing strings, you should call the<a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#10\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#10\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#10\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#11\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#11\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#11\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_String_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,String,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, string strB, bool ignoreCase);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ignoreCase</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> When comparing strings, you should call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#12\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#12\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#12\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#13\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#13\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#13\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_String_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,String,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, string strB, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> is in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>comparisonType</code> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.  </p>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#16\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#16\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#16\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#17\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#17\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#17\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_String_System_Boolean_System_Globalization_CultureInfo_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,String,Boolean,CultureInfo)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ignoreCase</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>culture</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific comparison information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>culture</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The comparison uses the <code>culture</code> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#14\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#14\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#14\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#15\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#15\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#15\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_String_System_Globalization_CultureInfo_System_Globalization_CompareOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,String,CultureInfo,CompareOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>culture</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The culture that supplies culture-specific comparison information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Options to use when performing the comparison (such as ignoring case or symbols).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates the lexical relationship between <code>strA</code> and <code>strB</code>, as shown in the following table  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>culture</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The comparison uses the <code>culture</code> parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The Compare method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> The comparison can be further specified by the <code>options</code> parameter, which consists of one or more members of the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> values have no effect.  </p>\n<p> Either or both comparands can be <code>null</code>. By definition, any string, including <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, compares greater than a null reference, and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects and returns an integer that indicates their relative position in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, int indexA, string strB, int indexB, int length);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position of the substring within <code>strA</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position of the substring within <code>strB</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters in the substrings to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>indexA</code> or <code>indexB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The substrings to compare start in <code>strA</code> at <code>indexA</code> and in <code>strB</code> at <code>indexB</code>. Both <code>indexA</code> and <code>indexB</code> are zero-based; that is, the first character in <code>strA</code> and <code>strB</code> is at position zero. The length of the first substring is equal to the length of <code>strA</code> minus <code>indexA</code> plus one. The length of the second substring is equal to the length of <code>strB</code> minus <code>indexB</code> plus one.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> When comparing strings, you should call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,Int32,String,Int32,Int32,StringComparison)</a> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#2\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#2\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#2\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#3\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#3\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#3\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position of the substring within <code>strA</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position of the substring within <code>strB</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters in the substrings to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ignoreCase</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>indexA</code> or <code>indexB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The substrings to compare start in <code>strA</code> at <code>indexA</code>, and in <code>strB</code> at <code>indexB</code>. Both <code>indexA</code> and <code>indexB</code> are zero-based; that is, the first character in <code>strA</code> and <code>strB</code> is at position zero. The length of the first substring is equal to the length of <code>strA</code> minus <code>indexA</code> plus one. The length of the second substring is equal to the length of <code>strB</code> minus <code>indexB</code> plus one.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> When comparing strings, you should call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,Int32,String,Int32,Int32,StringComparison)</a> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#4\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#4\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#4\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> The path name needs to be compared in an invariant manner. The correct code to do this is as follows.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#5\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#5\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#5\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position of the substring within <code>strA</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position of the substring within <code>strB</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters in the substrings to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or the <code>length</code> parameter is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follllows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>indexA</code> or <code>indexB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The substrings to compare start in <code>strA</code> at <code>indexA</code> and in <code>strB</code> at <code>indexB</code>. Both <code>indexA</code> and <code>indexB</code> are zero-based; that is, the first character in <code>strA</code> and <code>strB</code> is at position zero, not position one. The length of the first substring is equal to the length of <code>strA</code> minus <code>indexA</code> plus one. The length of the second substring is equal to the length of <code>strB</code> minus <code>indexB</code> plus one.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The <code>comparisonType</code> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.  </p>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#8\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#8\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#8\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#9\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#9\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#9\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Boolean_System_Globalization_CultureInfo_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32,Boolean,CultureInfo)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position of the substring within <code>strA</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position of the substring within <code>strB</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters in the substrings to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ignoreCase</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>culture</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific comparison information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>strA</code> or <code>strB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>culture</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The substrings to compare start in <code>strA</code> at <code>indexA</code>, and in <code>strB</code> at <code>indexB</code>. Both <code>indexA</code> and <code>indexB</code> are zero-based; that is, the first character in <code>strA</code> and <code>strB</code> is at position zero, not position one. The length of the first substring is equal to the length of <code>strA</code> minus <code>indexA</code> plus one. The length of the second substring is equal to the length of <code>strB</code> minus <code>indexB</code> plus one.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The comparison uses the <code>culture</code> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#6\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#6\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#6\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#7\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#7\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#7\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Globalization_CultureInfo_System_Globalization_CompareOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32,CultureInfo,CompareOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position of the substring within <code>strA</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position of the substring within <code>strB</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters in the substrings to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>culture</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific comparison information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Options to use when performing the comparison (such as ignoring case or symbols).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer that indicates the lexical relationship between the two substrings, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>indexA</code> is greater than <code>strA</code><code>.Length</code>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code><code>.Length</code>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>strA</code> or <code>strB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>culture</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The substrings to compare start in <code>strA</code> at position <code>indexA</code> and in <code>strB</code> at position <code>indexB</code>. The length of the first substring is the length of <code>strA</code> minus <code>indexA</code>. The length of the second substring is the length of <code>strB</code> minus <code>indexB</code>.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The comparison uses the <code>culture</code> parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The Compare method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> One or both of <code>strA</code> and <code>strB</code> can be <code>null</code>. By definition, any string, including <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, compares greater than a null reference, and two null references compare equal to each other.  </p>\n<p> The comparison can be further specified by the <code>options</code> parameter, which consists of one or more members of the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> values have no effect.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater. The return value is the result of the last comparison performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_CompareOrdinal_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareOrdinal(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects by evaluating the numeric values of the corresponding <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in each string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int CompareOrdinal (string strA, string strB);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> is less than <code>strB</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> and <code>strB</code> are equal.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> is greater than <code>strB</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>. To perform a case-insensitive comparison using ordinal sort rules, call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method with the <code>comparisonType</code> argument set to <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>.  </p>\n<p> Because CompareOrdinalis a static method, <code>strA</code> and <code>strB</code> can be <code>null</code>. If both values are <code>null</code>, the method returns 0 (zero), which indicates that <code>strA</code> and <code>strB</code> are equal. If only one of the values is <code>null</code>, the method considers the non-null value to be greater.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_CompareOrdinal_System_String_System_Int32_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareOrdinal(String,Int32,String,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects by evaluating the numeric values of the corresponding <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in each substring.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexA</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting index of the substring in <code>strA</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to use in the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>indexB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting index of the substring in <code>strB</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters in the substrings to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> is less than the substring in <code>strB</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings are equal, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> is greater than the substring in <code>strB</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>strA</code> is not <code>null</code> and <code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>strB</code> is not <code>null</code> and<code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The number of characters compared is the lesser of the length of <code>strA</code> less <code>indexA</code>, the length of <code>strB</code> less <code>indexB</code>, and <code>length</code>.  </p>\n<p> This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>. To perform a case-insensitive comparison using ordinal sort rules, call the<a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,Int32,String,Int32,Int32,StringComparison)</a>method with the <code>comparisonType</code> argument set to<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>.  </p>\n<p> Because <a class=\"xref\" href=\"system.string#System_String_CompareOrdinal_System_String_System_String_\" data-linktype=\"relative-path\">CompareOrdinal(String,String)</a> is a static method, <code>strA</code> and <code>strB</code> can be <code>null</code>. If both values are <code>null</code>, the method returns 0 (zero), which indicates that <code>strA</code> and <code>strB</code> are equal. If only one of the values is <code>null</code>, the method considers the non-null value to be greater.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_CompareTo_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares this instance with a specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that evaluates to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>value</code> parameter.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance precedes <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance has the same position in the sort order as <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance follows <code>value</code>.<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is not a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>value</code> must be a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The CompareTo method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<p> For more information about the behavior of this method, see the Remarks section of the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_\" data-linktype=\"relative-path\">System.String.Compare(String,String)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_CompareTo_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares this instance with a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (string strB);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>strB</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare with this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>strB</code> parameter.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance precedes <code>strB</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance has the same position in the sort order as <code>strB</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance follows <code>strB</code>.<br>\n -or-<br>\n <code>strB</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The <a class=\"xref\" href=\"system.string#System_String_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> For more information about the behavior of this method, see the Remarks section of the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_\" data-linktype=\"relative-path\">Compare(String,String)</a> method.  </p>\n<p> This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_Object_\" data-linktype=\"relative-path\">System.String.CompareTo(Object)</a> method, because it does not have to determine whether the <code>strB</code> argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>to a<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_Collections_Generic_IEnumerable_System_String__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(IEnumerable&lt;String&gt;)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the members of a constructed <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> collection of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (System.Collections.Generic.IEnumerable&lt;string&gt; values);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>values</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection object that implements <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and whose generic type argument is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenated strings in <code>values</code>, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>values</code> is an empty <code>IEnumerable(Of String)</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>values</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates each object in <code>values</code>; it does not add any delimiters. To specify a delimiter between each member of <code>values</code>, call the <a class=\"xref\" href=\"system.string#System_String_Join_System_String_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"relative-path\">Join(String,IEnumerable&lt;String&gt;)</a> method.  </p>\n<p> An <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> string is used in place of any null element in <code>values</code>.  </p>\n<p> If <code>values</code> is an empty <code>IEnumerable(Of String)</code>, the method returns <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If <code>values</code> is <code>null</code>, the method throws an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> exception.  </p>\n<p> Concat is a convenience method that lets you concatenate each element in an <code>IEnumerable(Of String)</code> collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a <code>List(Of String)</code> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is &quot;M&quot;). The <code>IEnumerable(Of String)</code> collection that is returned by the &lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt; method is passed to the Concat method to display the result as a single string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Concat#3\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string output = String.Concat( GetAlphabet(true).Where( letter =&gt; \n                      letter.CompareTo(&quot;M&quot;) &gt;= 0));\n      Console.WriteLine(output);  \n   }\n\n   private static List&lt;string&gt; GetAlphabet(bool upper)\n   {\n      List&lt;string&gt; alphabet = new List&lt;string&gt;();\n      int charValue = upper ? 65 : 97;\n      for (int ctr = 0; ctr &lt;= 25; ctr++)\n         alphabet.Add(Convert.ToChar(charValue + ctr).ToString());\n      return alphabet; \n   }\n}\n// The example displays the following output:\n//      MNOPQRSTUVWXYZ\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Concat#3\">Imports System.Collections.Generic\nImports System.Linq\n\nModule modMain\n   Public Sub Main()\n      Dim output As String = String.Concat(GetAlphabet(true).Where(Function(letter) _\n                                                         letter &gt;= &quot;M&quot;))\n        \n      Console.WriteLine(output)                                     \n   End Sub\n   \n   Private Function GetAlphabet(upper As Boolean) As List(Of String)\n      Dim alphabet As New List(Of String)\n      Dim charValue As Integer = CInt(IIf(upper, 65, 97))\n      For ctr As Integer = 0 To 25\n         alphabet.Add(ChrW(charValue + ctr).ToString())\n      Next\n      Return alphabet \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       MNOPQRSTUVWXYZ\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates the string  representation of a specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (object arg0);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to represent, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string representation of the value of <code>arg0</code>, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>arg0</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Concat method represents <code>arg0</code> as a string by calling its parameterless <code>ToString</code> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the string representations of the elements in a specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (object[] args);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>args</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object array that contains the elements to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenated string representations of the values of the elements in <code>args</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>args</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Out of memory.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates each object in <code>args</code> by calling the parameterless <code>ToString</code> method of that object; it does not add any delimiters.  </p>\n<p> <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> is used in place of any null object in the array.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_String___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(String[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the elements of a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (string[] values);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>values</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of string instances.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenated elements of <code>values</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>values</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Out of memory.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates each object in <code>values</code>; it does not add any delimiters.  </p>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null object in the array.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the string representations of two specified objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (object arg0, object arg1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenated string representations of the values of <code>arg0</code> and <code>arg1</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates <code>arg0</code> and <code>arg1</code>by calling the parameterless <code>ToString</code> method of <code>arg0</code> and <code>arg1</code>; it does not add any delimiters.  </p>\n<p> <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> is used in place of any null argument.  </p>\n<p> If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, &quot;System.String[]&quot;).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates two specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (string str0, string str1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenation of <code>str0</code> and <code>str1</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates <code>str0</code> and <code>str1</code>; it does not add any delimiters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can also use your language&#39;s string concatenation operator, such as <code>+</code> in C#, or <code>&amp;</code> and <code>+</code> in Visual Basic)  </p>\n<p> , to concatenate strings.  </p>\n</div>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null argument.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_Object_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(Object,Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the string representations of three specified objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (object arg0, object arg1, object arg2);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The third object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenated string representations of the values of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates <code>arg0</code>, <code>arg1</code>, and <code>arg2</code> by calling the parameterless <code>ToString</code> method of each object; it does not add any delimiters.  </p>\n<p> <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> is used in place of any null argument.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_String_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(String,String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates three specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (string str0, string str1, string str2);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The third string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenation of <code>str0</code>, <code>str1</code>, and <code>str2</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates <code>str0</code>, <code>str1</code>, and <code>str2</code>; it does not add any delimiters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can also use your language&#39;s string concatenation operator, such as <code>+</code> in C#, or <code>&amp;</code> and <code>+</code> in Visual Basic)  </p>\n<p> , to concatenate strings.  </p>\n</div>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null argument.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_Object_System_Object_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(Object,Object,Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (object arg0, object arg1, object arg2, object arg3);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The third object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg3</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The fourth object to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenated string representation of each value in the parameter list.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This API is not CLS-compliant. The CLS-compliant alternative is [String.Concat(Object&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName&gt;. The C# and Visual Basic compilers automatically resolve a call to this method as a call to [String.Concat(Object&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName&gt;.  </p>\n</div>\n<p> The method concatenates each object in the parameter list by calling its parameterless <code>ToString</code> method; it does not add any delimiters.  </p>\n<p> <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> is used in place of any null argument.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The last parameter of the  Concat method is an optional comma-delimited list of one or more additional objects to concatenate.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat_System_String_System_String_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat(String,String,String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates four specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat (string str0, string str1, string str2, string str3);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The third string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str3</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The fourth string to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenation of <code>str0</code>, <code>str1</code>, <code>str2</code>, and <code>str3</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates <code>str0</code>, <code>str1</code>, <code>str2</code>, and <code>str3</code>; it does not add any delimiters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can also use your language&#39;s string concatenation operator, such as <code>+</code> in C#, or <code>&amp;</code> and <code>+</code> in Visual Basic)  </p>\n<p> , to concatenate strings.  </p>\n</div>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null object in the array.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Concat__1_System_Collections_Generic_IEnumerable___0__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Concat&lt;T&gt;(IEnumerable&lt;T&gt;)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the members of an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Concat&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; values);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>values</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection object that implements the <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> interface.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenated members in <code>values</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>values</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method concatenates each object in <code>values</code>; it does not add any delimiters.  </p>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null argument.  </p>\n<p> Concat(T) is a convenience method that lets you concatenate each element in an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection without first converting the elements to strings. It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates. The string representation of each object in the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection is derived by calling that object&#39;s <code>ToString</code> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Contains_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Contains(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value indicating whether a specified substring occurs within this string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Contains (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter occurs within this string, or if <code>value</code> is the empty string (&quot;&quot;); otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.  </p>\n<p> To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method. The following example illustrates one such approach. It defines a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> extension method  that includes a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter and indicates whether a string contains a substring when using the specified form of string comparison.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Contains#1\">using System;\n\npublic static class StringExtensions\n{\n   public static bool Contains(this String str, String substring, \n                               StringComparison comp)\n   {                            \n      if (substring == null)\n         throw new ArgumentNullException(&quot;substring&quot;, \n                                         &quot;substring cannot be null.&quot;);\n      else if (! Enum.IsDefined(typeof(StringComparison), comp))\n         throw new ArgumentException(&quot;comp is not a member of StringComparison&quot;,\n                                     &quot;comp&quot;);\n\n      return str.IndexOf(substring, comp) &gt;= 0;                      \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Contains#1\">Imports System.Runtime.CompilerServices\n\nModule StringExtensions\n   &lt;Extension()&gt;\n   Public Function Contains(str As String, substring As String, \n                            comp As StringComparison) As Boolean\n      If substring Is Nothing Then\n         Throw New ArgumentNullException(&quot;substring&quot;, \n                                         &quot;substring cannot be null.&quot;)\n      Else If Not [Enum].IsDefined(GetType(StringComparison), comp)\n         Throw New ArgumentException(&quot;comp is not a member of StringComparison&quot;,\n                                     &quot;comp&quot;)\n      End If                               \n      Return str.IndexOf(substring, comp) &gt;= 0                      \n   End Function\nEnd Module\n</code></pre><p> The following example then calls the <code>Contains</code> extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Contains#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;This is a string.&quot;;\n      String sub1 = &quot;this&quot;;\n      Console.WriteLine(&quot;Does &#39;{0}&#39; contain &#39;{1}&#39;?&quot;, s, sub1);\n      StringComparison comp = StringComparison.Ordinal;\n      Console.WriteLine(&quot;   {0:G}: {1}&quot;, comp, s.Contains(sub1, comp));\n      \n      comp = StringComparison.OrdinalIgnoreCase;\n      Console.WriteLine(&quot;   {0:G}: {1}&quot;, comp, s.Contains(sub1, comp));\n   }\n}\n// The example displays the following output:\n//       Does &#39;This is a string.&#39; contain &#39;this&#39;?\n//          Ordinal: False\n//          OrdinalIgnoreCase: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Contains#2\">Public Module Example\n   Public Sub Main\n      Dim s As String = &quot;This is a string.&quot;\n      Dim sub1 As String = &quot;this&quot;\n      Console.WriteLine(&quot;Does &#39;{0}&#39; contain &#39;{1}&#39;?&quot;, s, sub1)\n      Dim comp As StringComparison = StringComparison.Ordinal\n      Console.WriteLine(&quot;   {0:G}: {1}&quot;, comp, s.Contains(sub1, comp))\n      \n      comp = StringComparison.OrdinalIgnoreCase\n      Console.WriteLine(&quot;   {0:G}: {1}&quot;, comp, s.Contains(sub1, comp))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Does &#39;This is a string.&#39; contain &#39;this&#39;?\n&#39;          Ordinal: False\n&#39;          OrdinalIgnoreCase: True\n</code></pre><p> If you are interested in the position of the substring <code>value</code> in the current instance, you can call the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to get the starting position of its first occurrence, or you can call the <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method to get the starting position of its last occurrence. The example includes a call to the <a class=\"xref\" href=\"system.string#System_String_IndexOf_System_String_\" data-linktype=\"relative-path\">IndexOf(String)</a> method if a substring is found in a string instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Copy_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Copy(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> with the same value as a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Copy (string str);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to copy.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string with the same value as <code>str</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>str</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>TheCopy method returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object that has the same value as the original string but represents a different object reference. It differs from an assignment operation, which assigns an existing string reference to an additional object variable. The example illustrates the difference.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_CopyTo_System_Int32_System_Char___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CopyTo(Int32,Char[],Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>sourceIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first character in this instance to copy.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>destination</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of Unicode characters to which characters in this instance are copied.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>destinationIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index in <code>destination</code> at which the copy operation begins.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters in this instance to copy to <code>destination</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>destination</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code> is negative  </p>\n<p> -or-  </p>\n<p> <code>sourceIndex</code> does not identify a position in the current instance.  </p>\n<p> -or-  </p>\n<p> <code>destinationIndex</code> does not identify a valid index in the <code>destination</code> array.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of the substring from <code>startIndex</code> to the end of this instance  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of the subarray from <code>destinationIndex</code> to the end of the <code>destination</code> array.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method copies <code>count</code> characters from the <code>sourceIndex</code> position of this instance to the <code>destinationIndex</code> position of <code>destination</code> character array. This method does not resize the <code>destination</code> character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>.  </p>\n<p> <code>sourceIndex</code> and <code>destinationIndex</code> are zero-based.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_EndsWith_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EndsWith(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the end of this string instance matches the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool EndsWith (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare to the substring at the end of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> matches the end of this instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method compares <code>value</code> to the substring at the end of this instance that is the same length as <code>value</code>, and returns an indication whether they are equal. To be equal, <code>value</code> must be a reference to this same instance or match the end of this instance.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_EndsWith_System_String_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EndsWith(String,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool EndsWith (string value, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare to the substring at the end of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that determines how this string and <code>value</code> are compared.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter matches the end of this string; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The EndsWith method compares the <code>value</code> parameter to the substring at the end of this string and returns a value that indicates whether they are equal. To be equal, <code>value</code> must be a reference to this same string, must be the empty string (&quot;&quot;), or must match the end of this string. The type of comparison performed by the EndsWith method depends on the value of the <code>comparisonType</code>parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_EndsWith_System_String_System_Boolean_System_Globalization_CultureInfo_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EndsWith(String,Boolean,CultureInfo)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the end of this string instance matches the specified string when compared using the specified culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare to the substring at the end of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ignoreCase</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>culture</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Cultural information that determines how this instance and <code>value</code> are compared. If <code>culture</code> is <code>null</code>, the current culture is used.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter matches the end of this string; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method compares the <code>value</code> parameter to the substring at the end of this string that is the same length as <code>value</code>, and returns a value that indicates whether they are equal. To be equal, <code>value</code> must be a reference to this same instance or match the end of this string.  </p>\n<p> This method performs a word (culture-sensitive) comparison using the specified casing and culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether this instance and a specified object, which must also be a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object, have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>obj</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and its value is the same as this instance; otherwise, <code>false</code>.  If <code>obj</code> is <code>null</code>, the method returns <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Equals_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether this instance and another specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of the <code>value</code> parameter is the same as the value of this instance; otherwise, <code>false</code>. If <code>value</code> is <code>null</code>, the method returns <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Equals_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool Equals (string a, string b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, <code>false</code>. If both <code>a</code> and <code>b</code> are <code>null</code>, the method returns <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Equals_System_String_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(String,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether this string and a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (string value, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies how the strings will be compared.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of the <code>value</code> parameter is the same as this string; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>comparisonType</code> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Equals_System_String_System_String_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(String,String,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool Equals (string a, string b, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules for the comparison.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of the <code>a</code> parameter is equal to the value of the <code>b</code> parameter; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>comparisonType</code> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Format_System_String_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Format(String,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces one or more format items in a specified string with the string representation of a specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Format (string format, object arg0);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A copy of <code>format</code> in which any format items are replaced by the string representation of <code>arg0</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The format item in <code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is not zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Format_System_String_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Format(String,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Format (string format, object[] args);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>args</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object array that contains zero or more objects to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> or <code>args</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Format_System_IFormatProvider_System_String_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Format(IFormatProvider,String,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Format (IFormatProvider provider, string format, object arg0);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A copy of <code>format</code> in which the format item or items have been replaced by the string representation of <code>arg0</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> or <code>arg0</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to one.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Format_System_IFormatProvider_System_String_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Format(IFormatProvider,String,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Format (IFormatProvider provider, string format, object[] args);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>args</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object array that contains zero or more objects to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> or <code>args</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Format_System_String_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Format(String,Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces the format items in a specified string with the string representation of two specified objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Format (string format, object arg0, object arg1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is not zero or one.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Format_System_IFormatProvider_System_String_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Format(IFormatProvider,String,Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Format (IFormatProvider provider, string format, object arg0, object arg1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code>, <code>arg0</code>, or <code>arg1</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to two.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Format_System_String_System_Object_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Format(String,Object,Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces the format items in a specified string with the string representation of three specified objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Format (string format, object arg0, object arg1, object arg2);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The third object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than two.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Format_System_IFormatProvider_System_String_System_Object_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Format(IFormatProvider,String,Object,Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Format (IFormatProvider provider, string format, object arg0, object arg1, object arg2);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>format</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg0</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The third object to format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code>, <code>arg0</code>, <code>arg1</code>, or <code>arg2</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to three.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_GetEnumerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEnumerator()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves an object that can iterate through the individual characters in this string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CharEnumerator GetEnumerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumerator object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"TIP\"><h5>Tip</h5><p> Rather than calling the GetEnumerator method to retrieve a <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object that you then use to enumerate a string, you should instead use your language&#39;s iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).                  <a href=\"../Topic/foreach,%20in%20(C%23%20Reference).md\" data-linktype=\"relative-path\">foreach</a> in C#,                  <a href=\"../Topic/for%20each,%20in.md\" data-linktype=\"relative-path\">for each</a> in C++/CLR, and                  <a href=\"../Topic/For%20Each...Next%20Statement%20(Visual%20Basic).md\" data-linktype=\"relative-path\">For Each</a> in Visual Basic).  </p>\n</div>\n<p> This method enables you to iterate the individual characters in a string. For example, the Visual Basic <code>For Each</code> and C# <code>foreach</code> statements invoke this method to return a <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object that can provide read-only access to the characters in this string instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for this string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The behavior of GetHashCode is dependent on its implementation, which might change from one version of the common language runtime to another. A reason why this might happen is to improve the performance of GetHashCode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If two string objects are equal, the GetHashCode method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.  </p>\n<p> The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain.  </p>\n<p> As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.  </p>\n<p> Finally, do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash. For cryptographic hashes, use a class derived from the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">System.Security.Cryptography.HashAlgorithm</a> or <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">System.Security.Cryptography.KeyedHashAlgorithm</a> class.  </p>\n<p> For more information about hash codes, see <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n</div>\n<p> In desktop apps, you can use the             <a href=\"../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md\" data-linktype=\"relative-path\">&lt;UseRandomizedStringHashAlgorithm&gt; element</a> to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the                <a href=\"../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md\" data-linktype=\"relative-path\">&lt;UseRandomizedStringHashAlgorithm&gt; element</a>. It defines a  to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the . It defines a <code>DisplayString</code> class that includes a private string constant, <code>s</code>, whose value is &quot;This is a string.&quot; It also includes a <code>ShowStringHashCode</code> method that displays the string value and its hash code along with the name of the application domain in which the method is executing.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.GetHashCode#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Show hash code in current domain.\n      DisplayString display = new DisplayString();\n      display.ShowStringHashCode();\n      \n      // Create a new app domain and show string hash code.\n      AppDomain domain = AppDomain.CreateDomain(&quot;NewDomain&quot;);\n      var display2 = (DisplayString) domain.CreateInstanceAndUnwrap(typeof(Example).Assembly.FullName, \n                                                          &quot;DisplayString&quot;);   \n      display2.ShowStringHashCode();\n   }\n}\n\npublic class DisplayString : MarshalByRefObject\n{\n   private String s = &quot;This is a string.&quot;;\n   \n   public override bool Equals(Object obj)\n   {\n      String s2 = obj as String; \n      if (s2 == null)\n         return false;\n      else\n         return s == s2; \n   }\n\n   public bool Equals(String str)\n   {\n      return s == str;\n   }    \n   \n   public override int GetHashCode()\n   {\n      return s.GetHashCode();\n   }\n   \n   public override String ToString() \n   {\n      return s;\n   }\n\n   public void ShowStringHashCode()\n   {\n      Console.WriteLine(&quot;String &#39;{0}&#39; in domain &#39;{1}&#39;: {2:X8}&quot;,\n                        s, AppDomain.CurrentDomain.FriendlyName, \n                        s.GetHashCode());\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.GetHashCode#2\">Module Example\n   Public Sub Main()\n      &#39; Show hash code in current domain.\n      Dim display As New DisplayString()\n      display.ShowStringHashCode()\n      \n      &#39; Create a new app domain and show string hash code.\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;NewDomain&quot;)\n      Dim display2 = CType(domain.CreateInstanceAndUnwrap(GetType(Example).Assembly.FullName, \n                                                          &quot;DisplayString&quot;), DisplayString)   \n      display2.ShowStringHashCode()\n   End Sub\nEnd Module\n\nPublic Class DisplayString : Inherits MarshalByRefObject\n\n   Private s As String = &quot;This is a string.&quot;\n   \n   Public Overrides Function Equals(obj As Object) As Boolean\n      Dim s2 As String = TryCast(obj, String)\n      If s2 Is Nothing Then\n         Return False\n      Else\n         Return s = s2 \n      End If\n   End Function\n\n   Public Overloads Function Equals(str As String) As Boolean\n      Return s = str\n   End Function    \n   \n   Public Overrides Function GetHashCode() As Integer\n      Return s.GetHashCode()\n   End Function\n   \n   Public Overrides Function ToString() As String\n      Return s\n   End Function\n\n   Public Sub ShowStringHashCode()\n      Console.WriteLine(&quot;String &#39;{0}&#39; in domain &#39;{1}&#39;: {2:X8}&quot;,\n                        s, AppDomain.CurrentDomain.FriendlyName, \n                        s.GetHashCode())\n   End Sub\nEnd Class\n</code></pre><p> When you run the example without supplying a configuration file, it displays output similar to the following. Note that the hash codes for the string are identical in the two application domains.  </p>\n<pre><code>\nString &#39;This is a string.&#39; in domain &#39;PerDomain.exe&#39;: 941BCEAC  \nString &#39;This is a string.&#39; in domain &#39;NewDomain&#39;: 941BCEAC  \n</code></pre><p> However, if you add the following configuration file to the example&#39;s directory and then run the example, the hash codes for the same string will differ by application domain.  </p>\n<pre><code>\n&lt;?xml version =&quot;1.0&quot;?&gt;  \n&lt;configuration&gt;  \n   &lt;runtime&gt;  \n      &lt;UseRandomizedStringHashAlgorithm enabled=&quot;1&quot; /&gt;  \n   &lt;/runtime&gt;  \n&lt;/configuration&gt;  \n</code></pre><p> When the configuration file is present, the example displays the following output:  </p>\n<pre><code>\nString &#39;This is a string.&#39; in domain &#39;PerDomain.exe&#39;: 5435776D  \nString &#39;This is a string.&#39; in domain &#39;NewDomain&#39;: 75CC8236  \n</code></pre><div class=\"IMPORTANT\"><h5>Important</h5><p> Hash codes are used to insert and retrieve keyed objects from hash tables efficiently. However, hash codes do not uniquely identify strings. Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings. In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain. Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.  </p>\n</div>\n<p> For additional information about the use of hash codes and the <code>GetHashCode</code> method, see <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_GetTypeCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetTypeCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for class <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TypeCode GetTypeCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The enumerated constant, <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_Char_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(Char)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (char value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> if that character is found, or -1 if it is not.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified string in this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this instance and continues until the last character position.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, theIndexOf method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance. In the following example, the IndexOf method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by &quot;n&quot;, and a soft hyphen followed by &quot;m&quot;) in two strings. Only one of the strings contains a soft hyphen. If the example is run on the .NET Framework 4 or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <code>value</code>. When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.IndexOf#21\">Module Example\n   Public Sub Main()\n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      Dim s1 As String = &quot;ani&quot; + softHyphen + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n      \n      &#39; Find the index of the soft hyphen.\n      Console.WriteLine(s1.IndexOf(softHyphen))\n      Console.WriteLine(s2.IndexOf(softHyphen))\n      \n      &#39; Find the index of the soft hyphen followed by &quot;n&quot;.\n      Console.WriteLine(s1.IndexOf(softHyphen + &quot;n&quot;))\n      Console.WriteLine(s2.IndexOf(softHyphen + &quot;n&quot;))\n      \n      &#39; Find the index of the soft hyphen followed by &quot;m&quot;.\n      Console.WriteLine(s1.IndexOf(softHyphen + &quot;m&quot;))\n      Console.WriteLine(s2.IndexOf(softHyphen + &quot;m&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output \n&#39; if run under the .NET Framework 4 or later:\n&#39;       0\n&#39;       0\n&#39;       1\n&#39;       1\n&#39;       4\n&#39;       3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IndexOf#21\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string s1 = &quot;ani\\u00ADmal&quot;;\n      string s2 = &quot;animal&quot;;\n      \n      // Find the index of the soft hyphen.\n      Console.WriteLine(s1.IndexOf(&quot;\\u00AD&quot;));\n      Console.WriteLine(s2.IndexOf(&quot;\\u00AD&quot;));\n      \n      // Find the index of the soft hyphen followed by &quot;n&quot;.\n      Console.WriteLine(s1.IndexOf(&quot;\\u00ADn&quot;));\n      Console.WriteLine(s2.IndexOf(&quot;\\u00ADn&quot;));\n      \n      // Find the index of the soft hyphen followed by &quot;m&quot;.\n      Console.WriteLine(s1.IndexOf(&quot;\\u00ADm&quot;));\n      Console.WriteLine(s2.IndexOf(&quot;\\u00ADm&quot;));\n   }\n}\n// The example displays the following output\n// if run under the .NET Framework 4 or later:\n//       0\n//       0\n//       1\n//       1\n//       4\n//       3\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_Char_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(Char,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (char value, int startIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> is less than 0 (zero) or greater than the length of the string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from 0. The <code>startIndex</code> parameter can range from 0 to the length of the string instance. If <code>startIndex</code> equals the length of the string instance, the method returns -1.  </p>\n<p> The search ranges from <code>startIndex</code> to the end of the string.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_String_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(String,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (string value, int startIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> is less than 0 (zero) or greater than the length of this string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from 0. The <code>startIndex</code> parameter can range from 0 to the length of the string instance. If <code>startIndex</code> equals the length of the string instance, the method returns -1.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the <code>startIndex</code> character position of this instance and continues until the last character position.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the IndexOf method always returns <code>startIndex</code>, which is the character position at which the search begins. In the following example, the IndexOf method is used to find the position of a soft hyphen (U+00AD) followed by an &quot;m&quot; in two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of &quot;m&quot; in the string. Note that in the case of the first string, which includes the soft hyphen followed by an &quot;m&quot;, the method fails to return the index of the soft hyphen but instead returns the index of the &quot;m&quot;.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.IndexOf#22\">Module Example\n   Public Sub Main()\n      Dim searchString As String = Chrw(&amp;h00AD) + &quot;m&quot;\n      Dim s1 As String = &quot;ani&quot; + ChrW(&amp;h00AD) + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n\n      Console.WriteLine(s1.IndexOf(searchString, 2))\n      Console.WriteLine(s2.IndexOf(searchString, 2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       4\n&#39;       3 \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IndexOf#22\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string searchString = &quot;\\u00ADm&quot;;\n      string s1 = &quot;ani\\u00ADmal&quot; ;\n      string s2 = &quot;animal&quot;;\n\n      Console.WriteLine(s1.IndexOf(searchString, 2));\n      Console.WriteLine(s2.IndexOf(searchString, 2));\n   }\n}\n// The example displays the following output:\n//       4\n//       3\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_String_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(String,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. A parameter specifies the type of search to use for the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (string value, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_Char_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(Char,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (char value, int startIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of character positions to examine.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than the length of this string.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of this string minus <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The search begins at <code>startIndex</code> and continues to <code>startIndex</code> + <code>count</code> -1. The character at <code>startIndex</code> + <code>count</code> is not included in the search.  </p>\n<p> Index numbering starts from 0 (zero). The <code>startIndex</code> parameter can range from 0 to the length of the string instance.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(String,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (string value, int startIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of character positions to examine.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than the length of this string.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of this string minus <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from 0 (zero). The <code>startIndex</code> parameter can range from 0 to the length of the string instance.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at <code>startIndex</code> and continues to <code>startIndex</code> + <code>count</code> -1. The character at <code>startIndex</code> + <code>count</code> is not included in the search.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the IndexOf method always returns <code>startIndex</code>, which is the character position at which the search begins. In the following example, the IndexOf method is used to find the position of a soft hyphen (U+00AD) followed by an &quot;m&quot; starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of &quot;m&quot; in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an &quot;m&quot;, the method fails to return the index of the soft hyphen but instead returns the index of the &quot;m&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.IndexOf#23\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string searchString = &quot;\\u00ADm&quot;;\n      string s1 = &quot;ani\\u00ADmal&quot; ;\n      string s2 = &quot;animal&quot;;\n\n      Console.WriteLine(s1.IndexOf(searchString, 2, 4));\n      Console.WriteLine(s2.IndexOf(searchString, 2, 4));\n   }\n}\n// The example displays the following output:\n//       4\n//       3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IndexOf#23\">Module Example\n   Public Sub Main()\n      Dim searchString As String = Chrw(&amp;h00AD) + &quot;m&quot;\n      Dim s1 As String = &quot;ani&quot; + ChrW(&amp;h00AD) + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n\n      Console.WriteLine(s1.IndexOf(searchString, 2, 4))\n      Console.WriteLine(s2.IndexOf(searchString, 2, 4))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       4\n&#39;       3\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_String_System_Int32_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(String,Int32,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (string value, int startIndex, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> is less than 0 (zero) or greater than the length of this string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from 0. The <code>startIndex</code> parameter can range from 0 to the length of the string instance. If <code>startIndex</code> equals the length of the string instance, the method returns -1.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOf_System_String_System_Int32_System_Int32_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOf(String,Int32,Int32,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of character positions to examine.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of this string minus <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from 0 (zero). The <code>startIndex</code> parameter can range from 0 to the length of the string instance.  </p>\n<p> The search begins at <code>startIndex</code> and continues to <code>startIndex</code> + <code>count</code> -1. The character at <code>startIndex</code> + <code>count</code> is not included in the search.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOfAny_System_Char___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOfAny(Char[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOfAny (char[] anyOf);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>anyOf</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character array containing one or more characters to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>anyOf</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero.  </p>\n<p> The search for <code>anyOf</code> is case-sensitive. If <code>anyOf</code> is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOfAny_System_Char___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOfAny(Char[],Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOfAny (char[] anyOf, int startIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>anyOf</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character array containing one or more characters to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>anyOf</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than the number of characters in this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. The <code>startIndex</code> parameter can range from 0 to one less than the length of the string instance.  </p>\n<p> The search ranges from <code>startIndex</code> to the end of the string.  </p>\n<p> The search for <code>anyOf</code> is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IndexOfAny_System_Char___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IndexOfAny(Char[],Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int IndexOfAny (char[] anyOf, int startIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>anyOf</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character array containing one or more characters to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of character positions to examine.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>anyOf</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>count</code> + <code>startIndex</code> is greater than the number of characters in this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The search begins at <code>startIndex</code> and continues to <code>startIndex</code> + <code>count</code> -1. The character at <code>startIndex</code> + <code>count</code> is not included in the search.  </p>\n<p> Index numbering starts from zero. The <code>startIndex</code> parameter can range from 0 to one less than the length of the string instance.  </p>\n<p> The search for <code>anyOf</code> is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Insert_System_Int32_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Insert(Int32,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string in which a specified string is inserted at a specified index position in this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Insert (int startIndex, string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of the insertion.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to insert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is equivalent to this instance, but with <code>value</code> inserted at position <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> is negative or greater than the length of this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>startIndex</code> is equal to the length of this instance, <code>value</code> is appended to the end of this instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which <code>value</code> is inserted into the current instance.  </p>\n</div>\n<p> For example, the return value of <code>&quot;abc&quot;.Insert(2, &quot;XYZ&quot;)</code> is &quot;abXYZc&quot;.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Intern_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Intern(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the system&#39;s reference to the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Intern (string str);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string to search for in the intern pool.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The system&#39;s reference to <code>str</code>, if it is interned; otherwise, a new reference to a string with the value of <code>str</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>str</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.  </p>\n<p> For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.  </p>\n<p> The Intern method uses the intern pool to search for a string equal to the value of <code>str</code>. If such a string exists, its reference in the intern pool is returned. If the string does not exist, a reference to <code>str</code> is added to the intern pool, then that reference is returned.  </p>\n<p> In the following example, the string s1, which has a value of &quot;MyTest&quot;, is already interned because it is a literal in the program. The <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">System.Text.StringBuilder</a> class generates a new string object that has the same value as s1. A reference to that string is assigned to s2. The Intern method searches for a string that has the same value as s2. Because such a string exists, the method returns the same reference that is assigned to s1. That reference is then assigned to s3. References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Intern#1\">      string s1 = &quot;MyTest&quot;; \n      string s2 = new StringBuilder().Append(&quot;My&quot;).Append(&quot;Test&quot;).ToString(); \n      string s3 = String.Intern(s2); \n      Console.WriteLine((Object)s2==(Object)s1); // Different references.\n      Console.WriteLine((Object)s3==(Object)s1); // The same reference.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Intern#1\">      Dim s1 As String = &quot;MyTest&quot; \n      Dim s2 As String = New StringBuilder().Append(&quot;My&quot;).Append(&quot;Test&quot;).ToString() \n      Dim s3 As String = String.Intern(s2) \n      Console.WriteLine(CObj(s2) Is CObj(s1))      &#39; Different references.\n      Console.WriteLine(CObj(s3) Is CObj(s1))      &#39; The same reference.\n</code></pre><p> Compare this method to the <a class=\"xref\" href=\"system.string#System_String_IsInterned_\" data-linktype=\"relative-path\">IsInterned</a> method.  </p>\n<h2 id=\"version-considerations\">Version Considerations</h2>\n<p> In the .NET Framework 3.5 Service Pack 1, the Intern method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string. In the following example, the variable <code>str1</code> is assigned a reference to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and the variable <code>str2</code> is assigned the reference to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> that is returned by calling the Intern method after converting a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object whose value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> to a string. Then the references contained in <code>str1</code> and <code>str2</code> are compared for equality.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Intern#2\">\t\tstring str1 = String.Empty;\n\t\tstring str2 = String.Empty;\n\n\t\tStringBuilder sb = new StringBuilder().Append(String.Empty);\n\t\tstr2 = String.Intern(sb.ToString());\t\n\t\t\n\t\tif((object)str1==(object)str2)\n\t\t\tConsole.WriteLine(&quot;The strings are equal.&quot;);\n\t\telse\n\t\t\tConsole.WriteLine(&quot;The strings are not equal.&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Intern#2\">\t\tDim str1 As String = String.Empty\n\t\tDim str2 As String = String.Empty\n\n\t\tDim sb As StringBuilder = New StringBuilder().Append(String.Empty)\n\t\tstr2 = String.Intern(sb.ToString())\t\n\t\t\n\t\tIf CObj(str1) Is CObj(str2) Then\n\t\t\tConsole.WriteLine(&quot;The strings are equal.&quot;)\n\t\tElse\n\t\t\tConsole.WriteLine(&quot;The strings are not equal.&quot;)\n\t\tEnd If\t\n</code></pre><p> In the .NET Framework 1.0, .NET Framework 1.1, and .NET Framework 3.5 SP1, <code>str1</code> and <code>str2</code> are equal. In the .NET Framework 2.0 Service Pack 1 and .NET Framework 3.0, <code>str1</code> and <code>str2</code> are not equal.  </p>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects. First, the memory allocated for interned <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects is not likely be released until the common language runtime (CLR) terminates. The reason is that the CLR&#39;s reference to the interned <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object can persist after your application, or even your application domain, terminates. Second, to intern a string, you must first create the string. The memory used by the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object must still be allocated, even though the memory will eventually be garbage collected.  </p>\n<p> The .NET Framework version 2.0 introduces the <a class=\"xref\" href=\"system.runtime.compilerservices.compilationrelaxations\" data-linktype=\"relative-path\">System.Runtime.CompilerServices.CompilationRelaxations</a>enumeration member. The <a class=\"xref\" href=\"system.runtime.compilerservices.compilationrelaxations\" data-linktype=\"relative-path\">CompilationRelaxations</a> member marks an assembly as not requiring string-literal interning. You can apply <a class=\"xref\" href=\"system.runtime.compilerservices.compilationrelaxations\" data-linktype=\"relative-path\">CompilationRelaxations</a> to an assembly using the <a class=\"xref\" href=\"system.runtime.compilerservices.compilationrelaxationsattribute\" data-linktype=\"relative-path\">CompilationRelaxationsAttribute</a> attribute. Also, when you use the <a href=\"../Topic/Ngen.exe%20(Native%20Image%20Generator).md\" data-linktype=\"relative-path\">Ngen.exe (Native Image Generator)</a> to compile an assembly in advance of run time, strings are not interned across modules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IsInterned_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsInterned(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves a reference to a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string IsInterned (string str);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for in the intern pool.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to <code>str</code> if it is in the common language runtime intern pool; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>str</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> you add programmatically by calling the <a class=\"xref\" href=\"system.string#System_String_Intern_\" data-linktype=\"relative-path\">Intern</a> method.  </p>\n<p> The intern pool conserves string storage. If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that have identical values.  </p>\n<p> This method looks up <code>str</code> in the intern pool. If <code>str</code> has already been interned, a reference to that instance is returned; otherwise, <code>null</code> is returned.  </p>\n<p> Compare this method to the <a class=\"xref\" href=\"system.string#System_String_Intern_\" data-linktype=\"relative-path\">Intern</a> method.  </p>\n<p> This method does not return a Boolean value. If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.IsInterned#1\">Module Example\n   Public Sub Main()\n      Dim str1 As String = &quot;a&quot;\n      Dim str2 As String = str1 + &quot;b&quot;\n      Dim str3 As String = str2 + &quot;c&quot;\n      Dim strings() As String = { &quot;value&quot;, &quot;part1&quot; + &quot;_&quot; + &quot;part2&quot;, str3, \n                                  String.Empty, Nothing }\n      For Each value In strings\n         If value Is Nothing Then Continue For\n         \n         Dim interned As Boolean = (String.IsInterned(value) IsNot Nothing)\n         If interned Then\n            Console.WriteLine(&quot;&#39;{0}&#39; is in the string intern pool.&quot;, \n                              value)\n         Else\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the string intern pool.&quot;,\n                              value)                      \n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;value&#39; is in the string intern pool.\n&#39;       &#39;part1_part2&#39; is in the string intern pool.\n&#39;       &#39;abc&#39; is not in the string intern pool.\n&#39;       &#39;&#39; is in the string intern pool.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsInterned#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string str1 = &quot;a&quot;;\n      string str2 = str1 + &quot;b&quot;;\n      string str3 = str2 + &quot;c&quot;;\n      string[] strings = { &quot;value&quot;, &quot;part1&quot; + &quot;_&quot; + &quot;part2&quot;, str3, \n                           String.Empty, null };\n      foreach (var value in strings) {\n         if (value == null) continue;\n         \n         bool interned = String.IsInterned(value) != null;\n         if (interned)\n            Console.WriteLine(&quot;&#39;{0}&#39; is in the string intern pool.&quot;, \n                              value);\n         else\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the string intern pool.&quot;,\n                              value);                      \n      }\n   }\n}\n// The example displays the following output:\n//       &#39;value&#39; is in the string intern pool.\n//       &#39;part1_part2&#39; is in the string intern pool.\n//       &#39;abc&#39; is not in the string intern pool.\n//       &#39;&#39; is in the string intern pool.\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the <a href=\"../Topic/Ngen.exe%20(Native%20Image%20Generator).md\" data-linktype=\"relative-path\">Ngen.exe (Native Image Generator)</a> to install an assembly to the native image cache on a local computer. For more information, see Performance Considerations in the Remarks section for the <a class=\"xref\" href=\"system.string#System_String_Intern_\" data-linktype=\"relative-path\">Intern</a> property.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IsNormalized\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsNormalized()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether this string is in Unicode normalization form C.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsNormalized ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this string is in normalization form C; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance contains invalid Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  </p>\n<p> The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.  </p>\n<p> For a description of supported Unicode normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IsNormalized_System_Text_NormalizationForm_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsNormalized(NormalizationForm)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether this string is in the specified Unicode normalization form.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsNormalized (System.Text.NormalizationForm normalizationForm);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>normalizationForm</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode normalization form.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this string is in the normalization form specified by the <code>normalizationForm</code> parameter; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance contains invalid Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  </p>\n<p> The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.  </p>\n<p> For a description of supported Unicode normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IsNullOrEmpty_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsNullOrEmpty(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the specified string is <code>null</code> or an <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsNullOrEmpty (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to test.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter is <code>null</code> or an empty string (&quot;&quot;); otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>IsNullOrEmpty is a convenience method that enables you to simultaneously test whether a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> is <code>null</code> or its value is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. It is equivalent to the following code:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.IsNullOrEmpty#1\">      result = s == nullptr || s == String::Empty;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsNullOrEmpty#1\">      result = s == null || s == String.Empty;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IsNullOrEmpty#1\">      result = s Is Nothing OrElse s = String.Empty\n</code></pre><p> You can use the <a class=\"xref\" href=\"system.string#System_String_IsNullOrWhiteSpace_\" data-linktype=\"relative-path\">IsNullOrWhiteSpace</a> method to test whether a string is <code>null</code>, its value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>,  or it consists only of white-space characters.  </p>\n<h2 id=\"what-is-a-null-string\">What is a null string?</h2>\n<p> A string is <code>null</code> if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of <code>null</code>. Although the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting</a> feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.IsNullOrEmpty#2\">using namespace System;\n\nvoid main()\n{\n   String^ s;\n  \n   Console::WriteLine(&quot;The value of the string is &#39;{0}&#39;&quot;, s);\n\n   try {\n      Console::WriteLine(&quot;String length is {0}&quot;, s-&gt;Length);\n   }\n   catch (NullReferenceException^ e) {\n      Console::WriteLine(e-&gt;Message);\n   }   \n}\n// The example displays the following output:\n//     The value of the string is &#39;&#39;\n//     Object reference not set to an instance of an object.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsNullOrEmpty#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = null;\n      \n      Console.WriteLine(&quot;The value of the string is &#39;{0}&#39;&quot;, s);\n\n      try {\n         Console.WriteLine(&quot;String length is {0}&quot;, s.Length);\n      }\n      catch (NullReferenceException e) {\n         Console.WriteLine(e.Message);\n      }\n   }\n}\n// The example displays the following output:\n//     The value of the string is &#39;&#39;\n//     Object reference not set to an instance of an object.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IsNullOrEmpty#2\">Module Example\n   Public Sub Main()\n      Dim s As String\n\n      Console.WriteLine(&quot;The value of the string is &#39;{0}&#39;&quot;, s)\n\n      Try \n         Console.WriteLine(&quot;String length is {0}&quot;, s.Length)\n      Catch e As NullReferenceException\n         Console.WriteLine(e.Message)\n      End Try   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The value of the string is &#39;&#39;\n&#39;     Object reference not set to an instance of an object.\n</code></pre><h2 id=\"what-is-an-empty-string\">What is an empty string?</h2>\n<p> A string is empty if it  is explicitly assigned an empty string (&quot;&quot;) or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. An empty string has a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 0.  The following example creates an empty string and displays its value and its length.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.IsNullOrEmpty#3\">   String^ s = &quot;&quot;;\n   Console::WriteLine(&quot;The length of &#39;{0}&#39; is {1}.&quot;, s, s-&gt;Length);\n   // The example displays the following output:\n   //       The length of &#39;&#39; is 0.      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsNullOrEmpty#3\">      String s = &quot;&quot;;\n      Console.WriteLine(&quot;The length of &#39;{0}&#39; is {1}.&quot;, s, s.Length);\n      // The example displays the following output:\n      //       The length of &#39;&#39; is 0.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IsNullOrEmpty#3\">      Dim s As String = &quot;&quot;\n      Console.WriteLine(&quot;The length of &#39;{0}&#39; is {1}.&quot;, s, s.Length)\n      &#39; The example displays the following output:\n      &#39;        The length of &#39;&#39; is 0.      \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_IsNullOrWhiteSpace_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsNullOrWhiteSpace(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether a specified string is <code>null</code>, empty, or consists only of white-space characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsNullOrWhiteSpace (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to test.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, or if <code>value</code> consists exclusively of white-space characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>IsNullOrWhiteSpace is a convenience method that is similar to the following  code, except that it offers superior performance:  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.IsNullOrWhitespace#2\">      return String.IsNullOrEmpty(value) || value.Trim().Length == 0;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IsNullOrWhitespace#2\">      Return String.IsNullOrEmpty(value) OrElse value.Trim().Length = 0\n</code></pre><p> White-space characters are defined by the Unicode standard. The IsNullOrWhiteSpace method interprets any character that returns a value of <code>true</code> when it is passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method as a white-space character.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Join_System_String_System_Collections_Generic_IEnumerable_System_String__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Join(String,IEnumerable&lt;String&gt;)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the members of a constructed <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> collection of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, using the specified separator between each member.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Join (string separator, System.Collections.Generic.IEnumerable&lt;string&gt; values);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>values</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection that contains the strings to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>values</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>separator</code> is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. If any member of <code>values</code> is <code>null</code>, an empty string is used instead.  </p>\n<p> Join is a convenience method that lets you concatenate each element in an <code>IEnumerable(Of String)</code> collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a <code>List(Of String)</code> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is &quot;M&quot;). The <code>IEnumerable(Of String)</code> collection returned by the &lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt; method is passed to the Join method to display the result as a single string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Join#4\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string output = String.Join(&quot; &quot;, GetAlphabet(true).Where( letter =&gt; \n                      letter.CompareTo(&quot;M&quot;) &gt;= 0));\n      Console.WriteLine(output);  \n   }\n\n   private static List&lt;string&gt; GetAlphabet(bool upper)\n   {\n      List&lt;string&gt; alphabet = new List&lt;string&gt;();\n      int charValue = upper ? 65 : 97;\n      for (int ctr = 0; ctr &lt;= 25; ctr++)\n         alphabet.Add(Convert.ToChar(charValue + ctr).ToString());\n      return alphabet; \n   }\n}\n// The example displays the following output:\n//      M N O P Q R S T U V W X Y Z\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Join#4\">Imports System.Collections.Generic\nImports System.Linq\n\nModule modMain\n   Public Sub Main()\n      Dim output As String = String.Join(&quot; &quot;, GetAlphabet(True).Where(Function(letter) _\n                                                         letter &gt;= &quot;M&quot;))\n        \n      Console.WriteLine(output)                                     \n   End Sub\n   \n   Private Function GetAlphabet(upper As Boolean) As List(Of String)\n      Dim alphabet As New List(Of String)\n      Dim charValue As Integer = CInt(IIf(upper, 65, 97))\n      For ctr As Integer = 0 To 25\n         alphabet.Add(ChrW(charValue + ctr).ToString())\n      Next\n      Return alphabet \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;      M N O P Q R S T U V W X Y Z\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Join_System_String_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Join(String,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the elements of an object array, using the specified separator between each element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Join (string separator, object[] values);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to use as a separator. <code>separator</code> is included in the returned string only if <code>values</code> has more than one element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>values</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that contains the elements to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that consists of the elements of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> is an empty array, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>values</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>separator</code> is <code>null</code> or if any element of <code>values</code> other than the first element is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. See the Notes for Callers section if the first element of <code>values</code> is <code>null</code>.  </p>\n<p> Join is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings. The string representation of each object in the array is derived by calling that object&#39;s <code>ToString</code> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Join_System_String_System_String___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Join(String,String[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates all the elements of a string array, using the specified separator between each element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Join (string separator, string[] value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that contains the elements to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that consists of the elements in <code>value</code> delimited by the <code>separator</code> string. If <code>value</code> is an empty array, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For example, if <code>separator</code> is &quot;, &quot; and the elements of <code>value</code> are &quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;, and &quot;pear&quot;, <code>Join(separator, value)</code> returns &quot;apple, orange, grape, pear&quot;.  </p>\n<p> If <code>separator</code> is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. If any element in <code>value</code> is <code>null</code>, an empty string is used instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Join_System_String_System_String___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Join(String,String[],Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the specified elements of a string array, using the specified separator between each element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Join (string separator, string[] value, int startIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that contains the elements to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first element in <code>value</code> to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of elements of <code>value</code> to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that consists of the strings in <code>value</code> delimited by the <code>separator</code> string.  </p>\n<p> -or-  </p>\n<p> <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>count</code> is zero, <code>value</code> has no elements, or <code>separator</code> and all the elements of <code>value</code> are <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> or <code>count</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>count</code> is greater than the number of elements in <code>value</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Out of memory.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For example, if <code>separator</code> is &quot;, &quot; and the elements of <code>value</code> are &quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;, and &quot;pear&quot;, <code>Join(separator, value, 1, 2)</code> returns &quot;orange, grape&quot;.  </p>\n<p> If <code>separator</code> is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. If any element in <code>value</code> is <code>null</code>, an empty string is used instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Join__1_System_String_System_Collections_Generic_IEnumerable___0__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Join&lt;T&gt;(String,IEnumerable&lt;T&gt;)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concatenates the members of a collection, using the specified separator between each member.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Join&lt;T&gt; (string separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>values</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection that contains the objects to concatenate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>values</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>separator</code> is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. If any member of <code>values</code> is <code>null</code>, an empty string is used instead.  </p>\n<p> Join(T) is a convenience method that lets you concatenate each member of an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection without first converting them to strings. The string representation of each object in the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection is derived by calling that object&#39;s <code>ToString</code> method.  </p>\n<p> This method is particular useful with Language-Integrated Query (LINQ) query expressions. For example, the following code defines a very simple <code>Animal</code> class that contains the name of an animal and the order to which it belongs. It then defines a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object that contains a number of <code>Animal</code> objects. The &lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt; extension method is called to extract the <code>Animal</code> objects whose <code>Order</code> property equals &quot;Rodent&quot;. The result is passed to the Join(T) method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Join#5\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Animal\n{\n   public string Kind;\n   public string Order;\n   \n   public Animal(string kind, string order)\n   {\n      this.Kind = kind;\n      this.Order = order;\n   }\n   \n   public override string ToString()\n   {\n      return this.Kind;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      List&lt;Animal&gt; animals = new List&lt;Animal&gt;();\n      animals.Add(new Animal(&quot;Squirrel&quot;, &quot;Rodent&quot;));\n      animals.Add(new Animal(&quot;Gray Wolf&quot;, &quot;Carnivora&quot;));\n      animals.Add(new Animal(&quot;Capybara&quot;, &quot;Rodent&quot;));\n      string output = String.Join(&quot; &quot;, animals.Where( animal =&gt; \n                      (animal.Order == &quot;Rodent&quot;)));\n      Console.WriteLine(output);  \n   }\n}\n// The example displays the following output:\n//      Squirrel Capybara\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Join#5\">Imports System.Collections.Generic\n\nPublic Class Animal\n   Public Kind As String\n   Public Order As String\n   \n   Public Sub New(kind As String, order As String)\n      Me.Kind = kind\n      Me.Order = order\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.Kind\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim animals As New List(Of Animal)\n      animals.Add(New Animal(&quot;Squirrel&quot;, &quot;Rodent&quot;))\n      animals.Add(New Animal(&quot;Gray Wolf&quot;, &quot;Carnivora&quot;))\n      animals.Add(New Animal(&quot;Capybara&quot;, &quot;Rodent&quot;)) \n      Dim output As String = String.Join(&quot; &quot;, animals.Where(Function(animal) _\n                                           animal.Order = &quot;Rodent&quot;))\n      Console.WriteLine(output)                                           \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      Squirrel Capybara\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_Char_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(Char)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (char value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The Unicode character to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> if that character is found, or -1 if it is not.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or the first character position has been examined. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence of a specified string within this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the last index position in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the last character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or the first character position has been examined.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the LastIndexOf method always returns <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> – 1, which represents the last index position in the current instance. In the following example, the LastIndexOf method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by &quot;n&quot;, and a soft hyphen followed by &quot;m&quot;) in two strings. Only one of the strings contains a soft hyphen. If the example is run on the .NET Framework 4 or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <code>value</code>. When searching for a soft hyphen only, the method returns 6 and 5. These values correspond to the index of the last character in the two strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.LastIndexOf#21\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string s1 = &quot;ani\\u00ADmal&quot;;\n      string s2 = &quot;animal&quot;;\n      \n      // Find the index of the last soft hyphen.\n      Console.WriteLine(s1.LastIndexOf(&quot;\\u00AD&quot;));\n      Console.WriteLine(s2.LastIndexOf(&quot;\\u00AD&quot;));\n      \n      // Find the index of the last soft hyphen followed by &quot;n&quot;.\n      Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADn&quot;));\n      Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADn&quot;));\n      \n      // Find the index of the last soft hyphen followed by &quot;m&quot;.\n      Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADm&quot;));\n      Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADm&quot;));\n   }\n}\n// The example displays the following output:\n//       6\n//       5\n//       1\n//       1\n//       4\n//       3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.LastIndexOf#21\">Module Example\n   Public Sub Main()\n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      Dim s1 As String = &quot;ani&quot; + softHyphen + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n      \n      &#39; Find the index of the last soft hyphen.\n      Console.WriteLine(s1.LastIndexOf(softHyphen))\n      Console.WriteLine(s2.LastIndexOf(softHyphen))\n      \n      &#39; Find the index of the last soft hyphen followed by &quot;n&quot;.\n      Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;n&quot;))\n      Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;n&quot;))\n      \n      &#39; Find the index of the last soft hyphen followed by &quot;m&quot;.\n      Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;m&quot;))\n      Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;m&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       6\n&#39;       5\n&#39;       1\n&#39;       1\n&#39;       4\n&#39;       3\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_Char_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(Char,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (char value, int startIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The Unicode character to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.This method begins searching at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning of the current instance until either <code>value</code> is found or the first character position has been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches every character from the last character in the string to the beginning. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_String_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(String,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (string value, int startIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is less than zero or greater than the length of the current instance.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is less than -1 or greater than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or the first character position has been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches every character from the last character in the string to the beginning.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the LastIndexOf method always returns <code>startIndex</code>, which is the character position at which the search begins. In the following example, the LastIndexOf method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final &quot;m&quot; in a string. If the example is run on the .NET Framework 4 or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and &quot;m&quot; returns the position of the &quot;m&quot; in the string, whereas calling it to find a substring that consists of the soft hyphen and &quot;n&quot; returns the position of the &quot;n&quot;. When the search string contains only the soft hyphen, the method returns the index of the &quot;m&quot;, which represents the value of <code>startIndex</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.LastIndexOf#22\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int position = 0;\n      string s1 = &quot;ani\\u00ADmal&quot;;\n      string s2 = &quot;animal&quot;;\n      \n      // Find the index of the soft hyphen.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00AD&quot;, position));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00AD&quot;, position));\n      \n      // Find the index of the soft hyphen followed by &quot;n&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADn&quot;, position));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADn&quot;, position));\n      \n      // Find the index of the soft hyphen followed by &quot;m&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADm&quot;, position));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADm&quot;, position));\n   }\n}\n// The example displays the following output:\n//       &#39;m&#39; at position 4\n//       4\n//       &#39;m&#39; at position 3\n//       3\n//       &#39;m&#39; at position 4\n//       1\n//       &#39;m&#39; at position 3\n//       1\n//       &#39;m&#39; at position 4\n//       4\n//       &#39;m&#39; at position 3\n//       3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.LastIndexOf#22\">Module Example\n   Public Sub Main()\n      Dim position As Integer\n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      Dim s1 As String = &quot;ani&quot; + softHyphen + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n      \n      &#39; Find the index of the soft hyphen.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen, position))\n      End If\n         \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen, position))\n      End If\n      \n      &#39; Find the index of the soft hyphen followed by &quot;n&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;n&quot;, position))\n      End If\n         \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;n&quot;, position))\n      End If\n      \n      &#39; Find the index of the soft hyphen followed by &quot;m&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;m&quot;, position))\n      End If\n      \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;m&quot;, position))\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;m&#39; at position 4\n&#39;       4\n&#39;       &#39;m&#39; at position 3\n&#39;       3\n&#39;       &#39;m&#39; at position 4\n&#39;       1\n&#39;       &#39;m&#39; at position 3\n&#39;       1\n&#39;       &#39;m&#39; at position 4\n&#39;       4\n&#39;       &#39;m&#39; at position 3\n&#39;       3\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_String_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(String,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the last occurrence of a specified string within the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. A parameter specifies the type of search to use for the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (string value, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the last index position in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.  </p>\n<p> The search begins at the last character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or the first character position has been examined.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_Char_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(Char,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (char value, int startIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The Unicode character to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of character positions to examine.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> - <code>count</code> + 1 is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> This method begins searching at the <code>startIndex</code> character position and proceeds backward toward the beginning of this instance until either <code>value</code> is found or <code>count</code> character positions have been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches backward <code>count</code> characters from the last character in the string. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(String,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (string value, int startIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of character positions to examine.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> - <code>count</code>+ 1 specifies a position that is not within this instance.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and <code>start</code> is less than -1 or greater than zero.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and <code>count</code> is greater than 1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or <code>count</code> character positions have been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches backward <code>count</code> characters from the last character in the string.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the LastIndexOf method always returns <code>startIndex</code>, which is the character position at which the search begins. In the following example, the LastIndexOf method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final &quot;m&quot; of two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of &quot;m&quot; in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an &quot;m&quot;, the method fails to return the index of the soft hyphen but instead returns the index of the &quot;m&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.LastIndexOf#23\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int position = 0;\n      string s1 = &quot;ani\\u00ADmal&quot;;\n      string s2 = &quot;animal&quot;;\n      \n      // Find the index of the soft hyphen.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00AD&quot;, position, position + 1));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00AD&quot;, position, position + 1));\n      \n      // Find the index of the soft hyphen followed by &quot;n&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADn&quot;, position, position + 1));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADn&quot;, position, position + 1));\n      \n      // Find the index of the soft hyphen followed by &quot;m&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADm&quot;, position, position + 1));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADm&quot;, position, position + 1));\n   }\n}\n// The example displays the following output:\n//       &#39;m&#39; at position 4\n//       4\n//       &#39;m&#39; at position 3\n//       3\n//       &#39;m&#39; at position 4\n//       1\n//       &#39;m&#39; at position 3\n//       1\n//       &#39;m&#39; at position 4\n//       4\n//       &#39;m&#39; at position 3\n//       3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.LastIndexOf#23\">Module Example\n   Public Sub Main()\n      Dim position As Integer\n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      \n      Dim s1 As String = &quot;ani&quot; + softHyphen + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n      \n      &#39; Find the index of the soft hyphen.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen, position, position + 1))\n      End If\n         \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen, position, position + 1))\n      End If\n      \n      &#39; Find the index of the soft hyphen followed by &quot;n&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;n&quot;, position, position + 1))\n      End If\n         \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;n&quot;, position, position + 1))\n      End If\n      \n      &#39; Find the index of the soft hyphen followed by &quot;m&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;m&quot;, position, position + 1))\n      End If\n      \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;m&quot;, position, position + 1))\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;m&#39; at position 4\n&#39;       4\n&#39;       &#39;m&#39; at position 3\n&#39;       3\n&#39;       &#39;m&#39; at position 4\n&#39;       1\n&#39;       &#39;m&#39; at position 3\n&#39;       1\n&#39;       &#39;m&#39; at position 4\n&#39;       4\n&#39;       &#39;m&#39; at position 3\n&#39;       3\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_String_System_Int32_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(String,Int32,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index of the last occurrence of a specified string within the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is less than zero or greater than the length of the current instance.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is less than -1 or greater than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the <code>startIndex</code> character position and proceeds backward until either <code>value</code> is found or the first character position has been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches every character from the last character in the string to the beginning.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOf_System_String_System_Int32_System_Int32_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOf(String,Int32,Int32,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of character positions to examine.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> + 1 - <code>count</code> specifies a position that is not within this instance.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and <code>start</code> is less than -1 or greater than zero.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and <code>count</code> is greater than 1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the <code>startIndex</code> character position and proceeds backward until either <code>value</code> is found or <code>count</code> character positions have been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches backward <code>count</code> characters from the last character in the string.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOfAny_System_Char___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOfAny(Char[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOfAny (char[] anyOf);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>anyOf</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character array containing one or more characters to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>anyOf</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero.  </p>\n<p> This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in <code>anyOf</code> is found or the first character position has been examined. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOfAny_System_Char___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOfAny(Char[],Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOfAny (char[] anyOf, int startIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>anyOf</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character array containing one or more characters to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>anyOf</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> specifies a position that is not within this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero.  </p>\n<p> This method begins searching at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning until either a character in <code>anyOf</code> is found or the first character position has been examined. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_LastIndexOfAny_System_Char___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LastIndexOfAny(Char[],Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int LastIndexOfAny (char[] anyOf, int startIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>anyOf</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character array containing one or more characters to seek.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of character positions to examine.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>anyOf</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> minus <code>count</code> + 1 is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Index numbering starts from zero.  </p>\n<p> This method begins searching at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning until either a character in <code>anyOf</code> is found or <code>count</code> character positions have been examined. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Æ&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Normalize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Normalize()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Normalize ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance contains invalid Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. For example, any of the following code points can represent the letter &quot;ắ&quot;:  </p>\n<ul>\n<li><p>U+1EAF  </p>\n</li>\n<li><p>U+0103 U+0301  </p>\n</li>\n<li><p>U+0061 U+0306 U+0301  </p>\n<p>The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  </p>\n<p>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.  </p>\n<p>To normalize and compare two strings, do the following:  </p>\n</li>\n</ul>\n<ol>\n<li><p>Obtain the strings to be compared from an input source, such as a file or a user input device.  </p>\n</li>\n<li><p>Call the Normalize method to normalize the strings to normalization form C.  </p>\n</li>\n<li><p>To compare two strings, call a method that supports ordinal string comparison, such as the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method, and supply a value of <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>as the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> argument. To sort an array of normalized strings, pass a <code>comparer</code> value of <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Ordinal_\" data-linktype=\"relative-path\">Ordinal</a> or <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_OrdinalIgnoreCase_\" data-linktype=\"relative-path\">OrdinalIgnoreCase</a> to an appropriate overload of <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a>.  </p>\n</li>\n<li><p>Emit the strings in the sorted output based on the order indicated by the previous step.  </p>\n<p>For a description of supported Unicode normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>.</p>\n</li>\n</ol>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Normalize_System_Text_NormalizationForm_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Normalize(NormalizationForm)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Normalize (System.Text.NormalizationForm normalizationForm);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>normalizationForm</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode normalization form.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <code>normalizationForm</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current instance contains invalid Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  </p>\n<p> The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.  </p>\n<p> To normalize and compare two strings, do the following:  </p>\n<ol>\n<li><p>Obtain the strings to be compared from an input source, such as a file or a user input device.  </p>\n</li>\n<li><p>Call the Normalize method to normalize the strings to a specified normalization form.  </p>\n</li>\n<li><p>To compare two strings, call a method that supports ordinal string comparison, such as the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method, and supply a value of <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> as the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> argument. To sort an array of normalized strings, pass a <code>comparer</code> value of <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Ordinal_\" data-linktype=\"relative-path\">Ordinal</a> or <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_OrdinalIgnoreCase_\" data-linktype=\"relative-path\">OrdinalIgnoreCase</a> to an appropriate overload of <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a>.  </p>\n</li>\n<li><p>Emit the strings in the sorted output based on the order indicated by the previous step.  </p>\n<p>For a description of supported Unicode normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>.</p>\n</li>\n</ol>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_PadLeft_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PadLeft(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string PadLeft (int totalWidth);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>totalWidth</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>totalWidth</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A Unicode space is defined as hexadecimal 0x0020.  </p>\n<p> The PadLeft method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the PadLeftmethod pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading white space so that its total length is <code>totalWidth</code> characters.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_PadLeft_System_Int32_System_Char_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PadLeft(Int32,Char)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string PadLeft (int totalWidth, char paddingChar);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>totalWidth</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>paddingChar</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode padding character.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>totalWidth</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The PadLeft method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.string#System_String_PadLeft_\" data-linktype=\"relative-path\">PadLeft</a> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading <code>paddingChar</code> characters so that its total length is <code>totalWidth</code> characters.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_PadRight_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PadRight(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string PadRight (int totalWidth);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>totalWidth</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>totalWidth</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A Unicode space is defined as hexadecimal 0x0020.  </p>\n<p> The PadRight method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If thePadRight method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing white space so that its total length is <code>totalWidth</code> characters.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_PadRight_System_Int32_System_Char_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PadRight(Int32,Char)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string PadRight (int totalWidth, char paddingChar);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>totalWidth</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>paddingChar</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode padding character.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>totalWidth</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The PadRight method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.string#System_String_PadRight_\" data-linktype=\"relative-path\">PadRight</a> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing <code>paddingChar</code> characters so that its total length is <code>totalWidth</code> characters.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Remove_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Remove(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Remove (int startIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based position to begin deleting characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is equivalent to this string except for the removed characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> specifies a position that is not within this string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In the .NET Framework, strings are zero-based. The value of the <code>startIndex</code> parameter can range from zero to one less than the length of the string instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters from position <code>startIndex</code> to the end of the original string have been removed.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Remove_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Remove(Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Remove (int startIndex, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based position to begin deleting characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to delete.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is equivalent to this instance except for the removed characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Either <code>startIndex</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>count</code> specify a position outside this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In the .NET Framework, strings are zero-based. The value of the <code>startIndex</code> parameter can range from zero to one less than the length of the string instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which the number of characters specified by the <code>count</code> parameter have been removed. The characters are removed at the position specified by <code>startIndex</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Replace_System_Char_System_Char_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(Char,Char)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Replace (char oldChar, char newChar);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>oldChar</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The Unicode character to be replaced.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>newChar</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The Unicode character to replace all occurrences of <code>oldChar</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that is equivalent to this instance except that all instances of <code>oldChar</code> are replaced with <code>newChar</code>. If <code>oldChar</code> is not found in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method performs an ordinal (case-sensitive and culture-insensitive) search to find <code>oldChar</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of <code>oldChar</code> are replaced by <code>newChar</code>.  </p>\n</div>\n<p> Because this method returns the modified string, you can chain together successive calls to the Replace method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Replace#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = new String(&#39;a&#39;, 3);\n      Console.WriteLine(&quot;The initial string: &#39;{0}&#39;&quot;, s);\n      s = s.Replace(&#39;a&#39;, &#39;b&#39;).Replace(&#39;b&#39;, &#39;c&#39;).Replace(&#39;c&#39;, &#39;d&#39;);\n      Console.WriteLine(&quot;The final string: &#39;{0}&#39;&quot;, s);\n   }\n}\n// The example displays the following output:\n//       The initial string: &#39;aaa&#39;\n//       The final string: &#39;ddd&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Replace#2\">Module Example\n   Public Sub Main()\n      Dim s As New String(&quot;a&quot;c, 3)\n      Console.WriteLine(&quot;The initial string: &#39;{0}&#39;&quot;, s)\n      s = s.Replace(&quot;a&quot;c, &quot;b&quot;c).Replace(&quot;b&quot;c, &quot;c&quot;c).Replace(&quot;c&quot;c, &quot;d&quot;c)\n      Console.WriteLine(&quot;The final string: &#39;{0}&#39;&quot;, s)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The initial string: &#39;aaa&#39;\n&#39;       The final string: &#39;ddd&#39;\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Replace_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Replace (string oldValue, string newValue);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>oldValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to be replaced.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>newValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to replace all occurrences of <code>oldValue</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that is equivalent to the current string except that all instances of <code>oldValue</code> are replaced with <code>newValue</code>. If <code>oldValue</code> is not found in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>oldValue</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>oldValue</code> is the empty string (&quot;&quot;).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>newValue</code> is <code>null</code>, all occurrences of <code>oldValue</code> are removed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of <code>oldValue</code> are replaced by <code>newValue</code>.  </p>\n</div>\n<p> This method performs an ordinal (case-sensitive and culture-insensitive) search to find <code>oldValue</code>.  </p>\n<p> Because this method returns the modified string, you can chain together successive calls to the <a class=\"xref\" href=\"system.string#System_String_Replace_\" data-linktype=\"relative-path\">Replace</a> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Replace#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;aaa&quot;;\n      Console.WriteLine(&quot;The initial string: &#39;{0}&#39;&quot;, s);\n      s = s.Replace(&quot;a&quot;, &quot;b&quot;).Replace(&quot;b&quot;, &quot;c&quot;).Replace(&quot;c&quot;, &quot;d&quot;);\n      Console.WriteLine(&quot;The final string: &#39;{0}&#39;&quot;, s);\n   }\n}\n// The example displays the following output:\n//       The initial string: &#39;aaa&#39;\n//       The final string: &#39;ddd&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Replace#1\">Module Example\n   Public Sub Main()\n      Dim s As String = &quot;aaa&quot;\n      Console.WriteLine(&quot;The initial string: &#39;{0}&#39;&quot;, s)\n      s = s.Replace(&quot;a&quot;, &quot;b&quot;).Replace(&quot;b&quot;, &quot;c&quot;).Replace(&quot;c&quot;, &quot;d&quot;)\n      Console.WriteLine(&quot;The final string: &#39;{0}&#39;&quot;, s)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The initial string: &#39;aaa&#39;\n&#39;       The final string: &#39;ddd&#39;\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Split_System_Char___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(Char[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits a string into substrings that are based on the characters in an array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (char[] separator);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When a string is delimited by a known set of characters, you can use the Split method to separate it into substrings. For other ways to extract substrings from a string, see the <a href=\"#Alternatives\" data-linktype=\"self-bookmark\">Alternatives to String.Split</a> section.  </p>\n<h2 id=\"return-value-details\">Return value details</h2>\n<p> Delimiter characters are not included in the elements of the returned array. For example, if the separator array includes the character &quot;-&quot; and the value of the current string instance is &quot;aa-bb-cc&quot;, the method returns an array that contains three elements: &quot;aa&quot;, &quot;bb&quot;, and &quot;cc&quot;.  </p>\n<p> If this instance does not contain any of the characters in <code>separator</code>, the returned array consists of a single element that contains this instance.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. Here are some examples:  </p>\n<table>\n<thead>\n<tr>\n<th>String value</th>\n<th>Separator</th>\n<th>Returned array</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;42, 12, 19&quot;</td>\n<td>new Char[] {&#39;,&#39;, &#39; &#39;} (C#)<br><br> Char() = {&quot;,&quot;c, &quot; &quot;c}) (Visual Basic)</td>\n<td>{&quot;42&quot;, &quot;&quot;, &quot;12&quot;, &quot;&quot;, &quot;19&quot;}</td>\n</tr>\n<tr>\n<td>&quot;42..12..19&quot;</td>\n<td>new Char[] {&#39;.&#39;} (C#)<br><br> Char() = {&quot;.&quot;c} (Visual Basic)</td>\n<td>{&quot;42&quot;, &quot;&quot;, &quot;12&quot;, &quot;&quot;, &quot;19&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Banana&quot;</td>\n<td>new Char[] {&#39;.&#39;} (C#)<br><br> Char() = {&quot;.&quot;c} (Visual Basic)</td>\n<td>{&quot;Banana&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>new Char[] {} (C#)<br><br> Char() = {} (Visual Basic)</td>\n<td>{&quot;Darb&quot;, &quot;Smarba&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>null (C#)<br><br> Nothing (Visual Basic)</td>\n<td>{&quot;Darb&quot;, &quot;Smarba&quot;}</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"the-separator-array\">The separator array</h2>\n<p> Each element of separator defines a separate delimiter that consists of a single character. If the <code>separator</code> argument is <code>null</code> or contains no characters, the method treats white-space characters as the delimiters. White-space characters are defined by the Unicode standard; they return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.  </p>\n<h2 id=\"stringsplitchar-and-compiler-overload-resolution\">String.Split(Char[]) and compiler overload resolution</h2>\n<p> Although the single parameter for this overload of <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> is a character array, you can call it with a single character, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#12\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String value = &quot;This is a short string.&quot;;\n      Char delimiter = &#39;s&#39;;\n      String[] substrings = value.Split(delimiter);\n      foreach (var substring in substrings)\n         Console.WriteLine(substring);\n   }\n}\n// The example displays the following output:\n//     Thi\n//      i\n//      a\n//     hort\n//     tring.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#12\">Module Example\n   Public Sub Main()\n      Dim value As String = &quot;This is a short string.&quot;\n      Dim delimiter As Char = &quot;s&quot;c\n      Dim substrings() As String = value.Split(delimiter)\n      For Each substring In substrings\n         Console.WriteLine(substring)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Thi\n&#39;      i\n&#39;      a\n&#39;     hort\n&#39;     tring.\n</code></pre><p> Because the <code>separator</code> parameter is decorated  with the <a class=\"xref\" href=\"system.paramarrayattribute\" data-linktype=\"relative-path\">ParamArrayAttribute</a> attribute, compilers will interpret a single character as a single-element character array. This is not the case for other <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> overloads that include a <code>separator</code> parameter; you must explicitly pass these overloads a character array as the <code>separator</code> argument.  </p>\n<h2 id=\"comparison-details\">Comparison details</h2>\n<p> The Split method extracts the substrings in this string that are delimited by one or more of the characters in the <code>separator</code> array, and returns those substrings as elements of an array.  </p>\n<p> The Split method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration.  </p>\n<p><a name=\"Alternatives\"></a>   </p>\n<h2 id=\"alternatives-to-stringsplit\">Alternatives to String.Split</h2>\n<p> The Split method is not always the best way to break a delimited string into substrings. If you don&#39;t want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.  </p>\n<h3 id=\"regular-expressions\">Regular expressions</h3>\n<p> If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements. For example, if strings take the form &quot;<em>number</em> <em>operand</em> <em>number</em>&quot; you can use a <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">regular expression</a> to extract and handle the string&#39;s elements. Here&#39;s an example:  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#8\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] expressions = { &quot;16 + 21&quot;, &quot;31 * 3&quot;, &quot;28 / 3&quot;,\n                               &quot;42 - 18&quot;, &quot;12 * 7&quot;,\n                               &quot;2, 4, 6, 8&quot; };\n      String pattern = @&quot;(\\d+)\\s+([-+*/])\\s+(\\d+)&quot;;\n      foreach (var expression in expressions)\n         foreach (Match m in Regex.Matches(expression, pattern)) {\n            int value1 = Int32.Parse(m.Groups[1].Value);\n            int value2 = Int32.Parse(m.Groups[3].Value);\n            switch (m.Groups[2].Value)\n            {\n               case &quot;+&quot;:\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 + value2);\n                  break;\n               case &quot;-&quot;:\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 - value2);\n                  break;\n               case &quot;*&quot;:\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 * value2);\n                  break;\n               case &quot;/&quot;:\n                  Console.WriteLine(&quot;{0} = {1:N2}&quot;, m.Value, value1 / value2);\n                  break;\n            }\n         }\n   }\n}\n// The example displays the following output:\n//       16 + 21 = 37\n//       31 * 3 = 93\n//       28 / 3 = 9.33\n//       42 - 18 = 24\n//       12 * 7 = 84\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#8\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim expressions() As String = { &quot;16 + 21&quot;, &quot;31 * 3&quot;, &quot;28 / 3&quot;,\n                                      &quot;42 - 18&quot;, &quot;12 * 7&quot;,\n                                      &quot;2, 4, 6, 8&quot; }\n\n      Dim pattern As String = &quot;(\\d+)\\s+([-+*/])\\s+(\\d+)&quot;\n      For Each expression In expressions\n         For Each m As Match in Regex.Matches(expression, pattern)\n            Dim value1 As Integer = Int32.Parse(m.Groups(1).Value)\n            Dim value2 As Integer = Int32.Parse(m.Groups(3).Value)\n            Select Case m.Groups(2).Value\n               Case &quot;+&quot;\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 + value2)\n               Case &quot;-&quot;\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 - value2)\n               Case &quot;*&quot;\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 * value2)\n               Case &quot;/&quot;\n                  Console.WriteLine(&quot;{0} = {1:N2}&quot;, m.Value, value1 / value2)\n            End Select\n         Next\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16 + 21 = 37\n&#39;       31 * 3 = 93\n&#39;       28 / 3 = 9.33\n&#39;       42 - 18 = 24\n&#39;       12 * 7 = 84\n</code></pre><p> The regular expression pattern <code>(\\d+)\\s+([-+*/])\\s+(\\d+)</code> is defined like this:  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(\\d+)</code></td>\n<td>Match one or more decimal digits. This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>\\s+</code></td>\n<td>Match one or more whitespace characters.</td>\n</tr>\n<tr>\n<td><code>([-+*/])</code></td>\n<td>Match an arithmetic operator sign (+, -, *, or /). This is the second capturing group.</td>\n</tr>\n<tr>\n<td><code>\\s+</code></td>\n<td>Match one or more whitespace characters.</td>\n</tr>\n<tr>\n<td><code>(\\d+)</code></td>\n<td>Match one or more decimal digits. This is the third capturing group.</td>\n</tr>\n</tbody>\n</table>\n<p> You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters. This is a common scenario when either of these conditions occurs:  </p>\n<ul>\n<li><p>One or more of the delimiter characters does not always serve as a delimiter in the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance.  </p>\n</li>\n<li><p>The sequence and number of delimiter characters is variable or unknown.  </p>\n<p>For example, the Split method cannot be used to split the following string, because the number of <code>\\n</code> (in C#) or <code>vbCrLf</code> (in Visual Basic) characters is variable, and they do not always serve as delimiters.  </p>\n</li>\n</ul>\n<pre><code>\n[This is captured\\ntext.]\\n\\n[\\n[This is more captured text.]\\n]  \n\\n[Some more captured text:\\n   Option1\\n   Option2][Terse text.]  \n</code></pre><p> A regular expression can split this string easily, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#9\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String input = &quot;[This is captured\\ntext.]\\n\\n[\\n&quot; +\n                     &quot;[This is more captured text.]\\n]\\n&quot; +\n                     &quot;[Some more captured text:\\n   Option1&quot; +\n                     &quot;\\n   Option2][Terse text.]&quot;;\n      String pattern = @&quot;\\[([^\\[\\]]+)\\]&quot;;\n      int ctr = 0;\n      foreach (Match m in Regex.Matches(input, pattern))\n         Console.WriteLine(&quot;{0}: {1}&quot;, ++ctr, m.Groups[1].Value);\n   }\n}\n// The example displays the following output:\n//       1: This is captured\n//       text.\n//       2: This is more captured text.\n//       3: Some more captured text:\n//          Option1\n//          Option2\n//       4: Terse text.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#9\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = String.Format(&quot;[This is captured{0}text.]&quot; +\n                                          &quot;{0}{0}[{0}[This is more &quot; +\n                                          &quot;captured text.]{0}{0}&quot; +\n                                          &quot;[Some more captured text:&quot; +\n                                          &quot;{0}   Option1&quot; +\n                                          &quot;{0}   Option2][Terse text.]&quot;,\n                                          vbCrLf)\n      Dim pattern As String = &quot;\\[([^\\[\\]]+)\\]&quot;\n      Dim ctr As Integer = 0\n      For Each m As Match In Regex.Matches(input, pattern)\n         ctr += 1\n         Console.WriteLine(&quot;{0}: {1}&quot;, ctr, m.Groups(1).Value)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1: This is captured\n&#39;       text.\n&#39;       2: This is more captured text.\n&#39;       3: Some more captured text:\n&#39;          Option1\n&#39;          Option2\n&#39;       4: Terse text.\n</code></pre><p> The regular expression pattern <code>\\[([^\\[\\]]+)\\]</code> is defined like this:  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\[</code></td>\n<td>Match an opening bracket.</td>\n</tr>\n<tr>\n<td><code>([^\\[\\]]+)</code></td>\n<td>Match any character that is not an opening or a closing bracket one or more times. This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>\\]</code></td>\n<td>Match a closing bracket.</td>\n</tr>\n</tbody>\n</table>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> method is almost identical to Split, except that it splits a string based on a regular expression pattern instead of a fixed character set. For example, the following example uses the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a>method to split a string that contains substrings delimited by various combinations of hyphens and other characters.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#10\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;abacus -- alabaster - * - atrium -+- &quot; +\n                            &quot;any -*- actual - + - armoir - - alarm&quot;\n      Dim pattern As String = &quot;\\s-\\s?[+*]?\\s?-\\s&quot;\n      Dim elements() As String = Regex.Split(input, pattern)\n      For Each element In elements\n         Console.WriteLine(element)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       abacus\n&#39;       alabaster\n&#39;       atrium\n&#39;       any\n&#39;       actual\n&#39;       armoir\n&#39;       alarm\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#10\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String input = &quot;abacus -- alabaster - * - atrium -+- &quot; +\n                     &quot;any -*- actual - + - armoir - - alarm&quot;;\n      String pattern = @&quot;\\s-\\s?[+*]?\\s?-\\s&quot;;\n      String[] elements = Regex.Split(input, pattern);\n      foreach (var element in elements)\n         Console.WriteLine(element);\n   }\n}\n// The example displays the following output:\n//       abacus\n//       alabaster\n//       atrium\n//       any\n//       actual\n//       armoir\n//       alarm\n</code></pre><p> The regular expression pattern <code>\\s-\\s?[+*]?\\s?-\\s</code> is defined like this:  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\s-</code></td>\n<td>Match a whitespace character followed by a hyphen.</td>\n</tr>\n<tr>\n<td><code>\\s?</code></td>\n<td>Match zero or one whitespace character.</td>\n</tr>\n<tr>\n<td><code>[+*]?</code></td>\n<td>Match zero or one occurrence of either the + or * character.</td>\n</tr>\n<tr>\n<td><code>\\s?</code></td>\n<td>Match zero or one whitespace character.</td>\n</tr>\n<tr>\n<td><code>-\\s</code></td>\n<td>Match a hyphen followed by a whitespace character.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"search-methods-and-the-substring-method\">Search methods and the Substring method</h3>\n<p> If you aren&#39;t interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins. You can then call the <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a> method to extract the substring that you want. The string comparison methods include:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, which returns the zero-based index of the first occurrence of a character or string in a string instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, which returns the zero-based index of the last occurrence of a character or string in a string instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_LastIndexOfAny_\" data-linktype=\"relative-path\">LastIndexOfAny</a>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.  </p>\n<p>The following example uses the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the periods in a string. It then uses the <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a> method to return full sentences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#11\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String value = &quot;This is the first sentence in a string. &quot; +\n                     &quot;More sentences will follow. For example, &quot; +\n                     &quot;this is the third sentence. This is the &quot; +\n                     &quot;fourth. And this is the fifth and final &quot; +\n                     &quot;sentence.&quot;;\n      var sentences = new List&lt;String&gt;();\n      int position = 0;\n      int start = 0;\n      // Extract sentences from the string.\n      do {\n         position = value.IndexOf(&#39;.&#39;, start);\n         if (position &gt;= 0) {\n            sentences.Add(value.Substring(start, position - start + 1).Trim());\n            start = position + 1;\n         }\n      } while (position &gt; 0);\n\n      // Display the sentences.\n      foreach (var sentence in sentences)\n         Console.WriteLine(sentence);\n   }\n}\n// The example displays the following output:\n//       This is the first sentence in a string.\n//       More sentences will follow.\n//       For example, this is the third sentence.\n//       This is the fourth.\n//       And this is the fifth and final sentence.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#11\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim value As String = &quot;This is the first sentence in a string. &quot; +\n                            &quot;More sentences will follow. For example, &quot; +\n                            &quot;this is the third sentence. This is the &quot; +\n                            &quot;fourth. And this is the fifth and final &quot; +\n                            &quot;sentence.&quot;\n      Dim sentences As New List(Of String)\n      Dim position As Integer = 0\n      Dim start As Integer = 0\n      &#39; Extract sentences from the string.\n      Do\n         position = value.IndexOf(&quot;.&quot;c, start)\n         If position &gt;= 0 Then\n            sentences.Add(value.Substring(start, position - start + 1).Trim())\n            start = position + 1\n         End If\n      Loop While position &gt; 0\n      \n      &#39; Display the sentences.\n      For Each sentence In sentences\n         Console.WriteLine(sentence)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       This is the first sentence in a string.\n&#39;       More sentences will follow.\n&#39;       For example, this is the third sentence.\n&#39;       This is the fourth.\n&#39;       And this is the fifth and final sentence.\n</code></pre></li>\n</ul>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method. You also have the option of using the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to locate a substring within a string.  </p>\n<p> To split a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. To split a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Split_System_Char___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(Char[],Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (char[] separator, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of substrings to return.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is negative.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Delimiter characters are not included in the elements of the returned array.  </p>\n<p> If this instance does not contain any of the characters in <code>separator</code>, the returned array consists of a single element that contains this instance. If <code>count</code> is zero, an empty array is returned.  </p>\n<p> If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.  </p>\n<p> If there are more than <code>count</code> substrings in this instance, the first <code>count</code> minus 1 substrings are returned in the first <code>count</code> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  </p>\n<p> If <code>count</code> is greater than the number of substrings, the available substrings are returned and no exception is thrown.  </p>\n<p> The following table provides examples.  </p>\n<table>\n<thead>\n<tr>\n<th>String value</th>\n<th>Separator</th>\n<th>Count</th>\n<th>Returned array</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;42, 12, 19&quot;</td>\n<td>new Char[] {&#39;,&#39;, &#39; &#39;} (C#)<br><br> Char() = {&quot;,&quot;c, &quot; &quot;c} (Visual Basic)</td>\n<td>2</td>\n<td>{&quot;42&quot;, &quot; 12, 19&quot;}</td>\n</tr>\n<tr>\n<td>&quot;42..12..19&quot;</td>\n<td>new Char[] {&#39;.&#39;} (C#)<br><br> Char() = {&quot;.&quot;c} (Visual Basic)</td>\n<td>4</td>\n<td>{&quot;42&quot;, &quot;&quot;, &quot;12&quot;, &quot;.19&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Banana&quot;</td>\n<td>new Char[] {&#39;.&#39;} (C#)<br><br> Char() = {&quot;.&quot;c} (Visual Basic)</td>\n<td>2</td>\n<td>{&quot;Banana&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>new Char[] {} (C#)<br><br> Char() = {} (Visual Basic)</td>\n<td>1</td>\n<td>{&quot;Darb\\nSmarba&quot;} (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>new Char[] null (C#)<br><br> Char() = Nothing</td>\n<td>2</td>\n<td>{&quot;Darb&quot;, &quot;Smarba&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>new Char[] null (C#)<br><br> Char() = Nothing</td>\n<td>100</td>\n<td>{&quot;Darb&quot;, &quot;Smarba&quot;}</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Split_System_Char___System_StringSplitOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(Char[],StringSplitOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (char[] separator, StringSplitOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to omit empty array elements from the array returned; or <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to include empty array elements in the array returned.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not one of the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<h2 id=\"return-value-details\">Return value details</h2>\n<p> Delimiter characters (the characters in the <code>separator</code> array) are not included in the elements of the returned array. For example, if the <code>separator</code> array includes the character &quot;-&quot; and the value of the current string instance is &quot;aa-bb-cc&quot;, the method returns an array that contains three elements: &quot;aa&quot;, &quot;bb&quot;, and &quot;cc&quot;.  </p>\n<p> If this instance does not contain any of the characters in <code>separator</code>, the returned array consists of a single element that contains this instance.  </p>\n<p> If the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> and the length of this instance is zero, the method returns an empty array.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter that consists of a single character. If the <code>options</code> argument is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>. For example, if <code>separator</code> includes  two elements, &quot;-&quot; and &quot;<em>&quot;, the value of the string instance is &quot;-_aa-\\</em>&quot;, and the value of   the <code>options</code> argument is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, the method returns a string array with the following five elements:  </p>\n<ol>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that precedes the &quot;-&quot; character at index 0.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string between the &quot;-&quot; character at index 0 and the &quot;_&quot; character at index 1.  </p>\n</li>\n<li><p>&quot;aa&quot;,  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that follows the &quot;_&quot; character at index 4.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that follows the &quot;-&quot; character at index 5.  </p>\n</li>\n</ol>\n<h2 id=\"the-separator-array\">The separator array</h2>\n<p> If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.  </p>\n<p> If the <code>separator</code> parameter in the call to this method overload is <code>null</code>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the <code>null</code>. The following example shows several ways to unambiguously identify this overload.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#5\">      Dim phrase As String = &quot;The quick brown fox&quot;\n      Dim words() As String\n      \n      words = phrase.Split(TryCast(Nothing, Char()),  \n                             StringSplitOptions.RemoveEmptyEntries)\n      \n      words = phrase.Split(New Char() {}, \n                           StringSplitOptions.RemoveEmptyEntries)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#5\">      string phrase = &quot;The quick  brown fox&quot;;\n      string[] words;\n      \n      words = phrase.Split(default(Char[]), StringSplitOptions.RemoveEmptyEntries);\n\n      words = phrase.Split((char[]) null, StringSplitOptions.RemoveEmptyEntries);\n      \n      words = phrase.Split(null as char[], StringSplitOptions.RemoveEmptyEntries);\n</code></pre><h2 id=\"comparison-details\">Comparison details</h2>\n<p> The Split method extracts the substrings in this string that are delimited by one or more of the characters in the <code>separator</code> parameter, and returns those substrings as elements of an array.  </p>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration.  </p>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Split_System_String___System_StringSplitOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(String[],StringSplitOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (string[] separator, StringSplitOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to omit empty array elements from the array returned; or <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to include empty array elements in the array returned.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not one of the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When a string is delimited by a known set of strings, you can use the Split method to separate it into substrings.  </p>\n<h2 id=\"return-value-details\">Return value details</h2>\n<p> Delimiter strings are not included in the elements of the returned array. For example, if the <code>separator</code> array includes the string &quot;--&quot; and the value of the current string instance is &quot;aa--bb-cc&quot;, the method returns an array that contains three elements: &quot;aa&quot;, &quot;bb&quot;, and &quot;cc&quot;.  </p>\n<p> If this instance does not contain any of the strings in <code>separator</code>, the returned array consists of a single element that contains this instance.  </p>\n<p> If the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> and the length of this instance is zero, the method returns an empty array.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter that consists of one or more characters. If the <code>options</code> argument is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>. For example, if <code>separator</code> includes  two elements, &quot;-&quot; and &quot;<em>&quot;, the value of the string instance is &quot;-_aa-\\</em>&quot;, and the value of   the <code>options</code> argument is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, the method returns a sting array with the following five elements:  </p>\n<ol>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that precedes the &quot;-&quot; substring at index 0.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string between the &quot;-&quot; substring at index 0 and the &quot;_&quot; substring at index 1.  </p>\n</li>\n<li><p>&quot;aa&quot;,  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that follows the &quot;_&quot; substring at index 4.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that follows the &quot;-&quot; substring at index 5.  </p>\n</li>\n</ol>\n<h2 id=\"the-separator-array\">The separator array</h2>\n<p> If any of the elements in <code>separator</code> consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in <code>separator</code> is &quot;10&quot;, attempting to split the string &quot;This10is10a10string.&quot; returns the following four-element array: { &quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string.&quot; }.  </p>\n<p> If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.  </p>\n<p> If the <code>separator</code> parameter in the call to this method overload is <code>null</code>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the <code>null</code>. The following example shows several ways to unambiguously identify this overload.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#6\">      Dim phrase As String = &quot;The quick brown fox&quot;\n      Dim words() As String\n      \n      words = phrase.Split(TryCast(Nothing, String()),  \n                             StringSplitOptions.RemoveEmptyEntries)\n      \n      words = phrase.Split(New String() {},\n                           StringSplitOptions.RemoveEmptyEntries)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#6\">      string phrase = &quot;The quick  brown fox&quot;;\n      string[] words;\n      \n      words = phrase.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);\n\n      words = phrase.Split((string[]) null, StringSplitOptions.RemoveEmptyEntries);\n      \n      words = phrase.Split(null as string[], StringSplitOptions.RemoveEmptyEntries);\n</code></pre><h2 id=\"comparison-details\">Comparison details</h2>\n<p> The Split method extracts the substrings in this string that are delimited by one or more of the strings in the <code>separator</code> parameter, and returns those substrings as elements of an array.  </p>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration.  </p>\n<p> The Split method ignores any element of <code>separator</code> whose value is <code>null</code> or the empty string (&quot;&quot;).  </p>\n<p> To avoid ambiguous results when strings in <code>separator</code> have characters in common, the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in <code>separator</code> that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in <code>separator</code>.  </p>\n<p> For example, consider an instance whose value is &quot;abcdef&quot;. If the first element in <code>separator</code> was &quot;ef&quot; and the second element was &quot;bcde&quot;, the result of the split operation would be a string array that contains two elements, &quot;a&quot; and &quot;f&quot;. This is because the substring in the instance, &quot;bcde&quot;, is encountered and matches an element in <code>separator</code> before the substring &quot;f&quot; is encountered.  </p>\n<p> However, if the first element of <code>separator</code> was &quot;bcd&quot; and the second element was &quot;bc&quot;, the result of the split operation would be a string array that contains two elements, &quot;a&quot; and &quot;ef&quot;. This is because &quot;bcd&quot; is the first delimiter in <code>separator</code> that matches a delimiter in the instance. If the order of the separators was reversed so the first element was &quot;bc&quot; and the second element was &quot;bcd&quot;, the result would be a string array that contains two elements,  &quot;a&quot; and &quot;def&quot;.  </p>\n<h2 id=\"performance-considerations\">Performance considerations</h2>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Split_System_Char___System_Int32_System_StringSplitOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(Char[],Int32,StringSplitOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits a string into a maximum number of substrings based on the characters in an array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (char[] separator, int count, StringSplitOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of substrings to return.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to omit empty array elements from the array returned; or <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to include empty array elements in the array returned.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is negative.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not one of the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Delimiter characters are not included in the elements of the returned array.  </p>\n<p> If this instance does not contain any of the characters in <code>separator</code>, or the <code>count</code> parameter is 1, the returned array consists of a single element that contains this instance. If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method. However, if the <code>separator</code> parameter in the call to this method overload is <code>null</code>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the null. The following example shows several ways to unambiguously identify this overload.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#3\">      Dim phrase As String = &quot;The quick brown fox&quot;\n      Dim words() As String\n      \n      words = phrase.Split(TryCast(Nothing, Char()), 3, \n                             StringSplitOptions.RemoveEmptyEntries)\n      \n      words = phrase.Split(New Char() {}, 3,\n                           StringSplitOptions.RemoveEmptyEntries)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#3\">      string phrase = &quot;The quick  brown fox&quot;;\n      string[] words;\n      \n      words = phrase.Split(default(Char[]), 3, StringSplitOptions.RemoveEmptyEntries);\n\n      words = phrase.Split((char[]) null, 3, StringSplitOptions.RemoveEmptyEntries);\n      \n      words = phrase.Split(null as char[], 3, StringSplitOptions.RemoveEmptyEntries);\n</code></pre><p> If the <code>count</code> parameter is zero, or the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> and the length of this instance is zero, an empty array is returned.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter character. If the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.  </p>\n<p> If there are more than <code>count</code> substrings in this instance, the first <code>count</code> minus 1 substrings are returned in the first <code>count</code> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  </p>\n<p> If <code>count</code> is greater than the number of substrings, the available substrings are returned and no exception is thrown.  </p>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Split_System_String___System_Int32_System_StringSplitOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(String[],Int32,StringSplitOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (string[] separator, int count, StringSplitOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>separator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of substrings to return.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to omit empty array elements from the array returned; or <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to include empty array elements in the array returned.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is negative.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not one of the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<h2 id=\"return-value-details\">Return value details</h2>\n<p> Delimiter strings are not included in the elements of the returned array.  </p>\n<p> If this instance does not contain any of the strings in <code>separator</code>, or the <code>count</code> parameter is 1, the returned array consists of a single element that contains this instance. If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method. However, if the <code>separator</code> parameter in the call to this method overload is <code>null</code>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the <code>null</code>. The following example shows several ways to unambiguously identify this overload.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#4\">      Dim phrase As String = &quot;The quick brown fox&quot;\n      Dim words() As String\n      \n      words = phrase.Split(TryCast(Nothing, String()), 3, \n                             StringSplitOptions.RemoveEmptyEntries)\n      \n      words = phrase.Split(New String() {}, 3,\n                           StringSplitOptions.RemoveEmptyEntries)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#4\">      string phrase = &quot;The quick  brown fox&quot;;\n      string[] words;\n      \n      words = phrase.Split(default(string[]), 3, StringSplitOptions.RemoveEmptyEntries);\n\n      words = phrase.Split((string[]) null, 3, StringSplitOptions.RemoveEmptyEntries);\n      \n      words = phrase.Split(null as string[], 3, StringSplitOptions.RemoveEmptyEntries);\n</code></pre><p> If the <code>count</code> parameter is zero, or the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> and the length of this instance is zero, an empty array is returned.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter that consists of one or more characters. If the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.  </p>\n<p> If there are more than <code>count</code> substrings in this instance, the first <code>count</code> minus 1 substrings are returned in the first <code>count</code> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  </p>\n<p> If <code>count</code> is greater than the number of substrings, the available substrings are returned and no exception is thrown.  </p>\n<h2 id=\"the-separator-array\">The separator array</h2>\n<p> If any of the elements in <code>separator</code> consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in <code>separator</code> is &quot;10&quot;, attempting to split the string &quot;This10is10a10string.&quot; returns this four-element array: { &quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string.&quot; }.  </p>\n<h2 id=\"comparison-details\">Comparison details</h2>\n<p> The Split method extracts the substrings in this string that are delimited by one or more of the strings in the <code>separator</code> parameter, and returns those substrings as elements of an array.  </p>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration.  </p>\n<p> The Split method ignores any element of <code>separator</code> whose value is <code>null</code> or the empty string (&quot;&quot;).  </p>\n<p> To avoid ambiguous results when strings in <code>separator</code> have characters in common, the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method proceeds from the beginning to the end of the value of the instance, and matches the first element in <code>separator</code> that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in <code>separator</code>.  </p>\n<p> For example, consider an instance whose value is &quot;abcdef&quot;. If the first element in <code>separator</code> was &quot;ef&quot; and the second element was &quot;bcde&quot;, the result of the split operation would be &quot;a&quot; and &quot;f&quot;. This is because the substring in the instance, &quot;bcde&quot;, is encountered and matches an element in <code>separator</code> before the substring &quot;f&quot; is encountered.  </p>\n<p> However, if the first element of <code>separator</code> was &quot;bcd&quot; and the second element was &quot;bc&quot;, the result of the split operation would be &quot;a&quot; and &quot;ef&quot;. This is because &quot;bcd&quot; is the first delimiter in <code>separator</code> that matches a delimiter in the instance. If the order of the separators was reversed so the first element was &quot;bc&quot; and the second element was &quot;bcd&quot;, the result would be &quot;a&quot; and &quot;def&quot;.  </p>\n<h2 id=\"performance-considerations\">Performance considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_StartsWith_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StartsWith(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the beginning of this string instance matches the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool StartsWith (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> matches the beginning of this string; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method compares <code>value</code> to the substring at the beginning of this instance that is the same length as <code>value</code>, and returns an indication whether they are equal. To be equal, <code>value</code> must be an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>), must be a reference to this same instance, or must match the beginning of this instance.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_StartsWith_System_String_System_StringComparison_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StartsWith(String,StringComparison)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool StartsWith (string value, StringComparison comparisonType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparisonType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that determines how this string and <code>value</code> are compared.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this instance begins with <code>value</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The StartsWith method compares the <code>value</code> parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal. To be equal, <code>value</code> must be a reference to this same string, must be the empty string (&quot;&quot;), or must match the beginning of this string. The type of comparison performed by the StartsWith method depends on the value of the <code>comparisonType</code> parameter. The comparison can use the conventions of the current culture (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> and <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>) or the invariant culture (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> and <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>), or it can consist of a character-by-character comparison of code points (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>). The comparison can also be case-sensitive (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>), or it can ignore case (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_StartsWith_System_String_System_Boolean_System_Globalization_CultureInfo_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StartsWith(String,Boolean,CultureInfo)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ignoreCase</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>culture</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Cultural information that determines how this string and <code>value</code> are compared. If <code>culture</code> is <code>null</code>, the current culture is used.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter matches the beginning of this string; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method compares the <code>value</code> parameter to the substring at the beginning of this string that is the same length as <code>value</code>, and returns a value that indicates whether they are equal. To be equal, <code>value</code> must be an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>), must be a reference to this same instance, or must match the beginning of this instance.  </p>\n<p> This method performs a comparison using the specified casing and culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Substring_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Substring(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Substring (int startIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based starting character position of a substring in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that is equivalent to the substring that begins at <code>startIndex</code> in this instance, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>startIndex</code> is equal to the length of this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> is less than zero or greater than the length of this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You call the Substring method to extract a substring from a string that begins at a specified character position and ends at the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and ends before to the end of the string, call the <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string that begins at the <code>startIndex</code> position in the current string.  </p>\n</div>\n<p> To extract a substring that begins with a particular character or character sequence, call a method such as  <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> to get the value of <code>startIndex</code>. The second example illustrates this; it extracts a key value that begins one character position after the &quot;=&quot; character.  </p>\n<p> If <code>startIndex</code> is equal to zero, the method returns the original string unchanged.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Substring_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Substring(Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Substring (int startIndex, int length);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based starting character position of a substring in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters in the substring.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that is equivalent to the substring of length <code>length</code> that begins at <code>startIndex</code> in this instance, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>startIndex</code> is equal to the length of this instance and <code>length</code> is zero.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> plus <code>length</code> indicates a position not within this instance.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> or <code>length</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You call the Substring method to extract a substring from a string that begins at a specified character position and ends before the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and continues to the end of the string, call the <a class=\"xref\" href=\"system.string#System_String_Substring_System_Int32_\" data-linktype=\"relative-path\">Substring(Int32)</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string with <code>length</code> characters starting from the <code>startIndex</code> position in the current string.  </p>\n</div>\n<p> The <code>length</code> parameter represents the total number of characters to extract from the current string instance. This includes the starting character found at index  <code>startIndex</code>.  In other words, the Substring method attempts to extract characters from index <code>startIndex</code> to index <code>startIndex</code> + <code>length</code> - 1.  </p>\n<p> To extract a substring that begins with a particular character or character sequence, call a method such as  <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> to get the value of <code>startIndex</code>.  </p>\n<p> If the substring extends from <code>startIndex</code> to a specified character sequence, you can call a method such as  <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> to get the index of the ending character or character sequence.  You can then convert that value to an index position in the string as follows:  </p>\n<ul>\n<li><p>If you&#39;ve searched for a single character that is to mark the end of the substring, the <code>length</code> parameter equals  <code>endIndex</code> - <code>startIndex</code> + 1, where <code>endIndex</code> is the return value of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. The following example extracts a continuous block of &quot;b&quot; characters from a string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Substring#2\">Module Example\n   Public Sub Main()\n      Dim s As String = &quot;aaaaabbbcccccccdd&quot;\n      Dim charRange As Char = &quot;b&quot;c\n      Dim startIndex As Integer = s.Indexof(charRange)\n      Dim endIndex As Integer = s.LastIndexOf(charRange)\n      Dim length = endIndex - startIndex + 1\n      Console.WriteLine(&quot;{0}.Substring({1}, {2}) = {3}&quot;,\n                        s, startIndex, length, \n                        s.Substring(startIndex, length))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     aaaaabbbcccccccdd.Substring(5, 3) = bbb\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Substring#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;aaaaabbbcccccccdd&quot;;\n      Char charRange = &#39;b&#39;;\n      int startIndex = s.IndexOf(charRange);\n      int endIndex = s.LastIndexOf(charRange);\n      int length = endIndex - startIndex + 1;\n      Console.WriteLine(&quot;{0}.Substring({1}, {2}) = {3}&quot;,\n                        s, startIndex, length, \n                        s.Substring(startIndex, length));\n   }\n}\n// The example displays the following output:\n//       aaaaabbbcccccccdd.Substring(5, 3) = bbb\n</code></pre></li>\n<li><p>If you&#39;ve searched for multiple characters that are to mark the end of the substring, the <code>length</code> parameter equals  <code>endIndex</code> + <code>endMatchLength</code> - <code>startIndex</code>, where <code>endIndex</code> is the return value of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method., and <code>endMatchLength</code> is the length of the character sequence that marks the end of the substring. The following example extracts a block of text that contains an XML <code>&lt;definition&gt;</code> element.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Substring#3\">Module Example\n   Public Sub Main()\n      Dim s As String = &quot;&lt;term&gt;extant&lt;definition&gt;still in existence&lt;/definition&gt;&lt;/term&gt;&quot;\n      Dim searchString As String = &quot;&lt;definition&gt;&quot;\n      Dim startindex As Integer = s.IndexOf(searchString)\n      searchString = &quot;&lt;/&quot; + searchString.Substring(1)\n      Dim endIndex As Integer = s.IndexOf(searchString)\n      Dim substring As String = s.Substring(startIndex, endIndex + searchString.Length - StartIndex)\n      Console.WriteLine(&quot;Original string: {0}&quot;, s)\n      Console.WriteLine(&quot;Substring;       {0}&quot;, substring) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   Original string: &lt;term&gt;extant&lt;definition&gt;still in existence&lt;/definition&gt;&lt;/term&gt;\n&#39;   Substring;       &lt;definition&gt;still in existence&lt;/definition&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Substring#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;&lt;term&gt;extant&lt;definition&gt;still in existence&lt;/definition&gt;&lt;/term&gt;&quot;;\n      String searchString = &quot;&lt;definition&gt;&quot;;\n      int startIndex = s.IndexOf(searchString);\n      searchString = &quot;&lt;/&quot; + searchString.Substring(1);\n      int endIndex = s.IndexOf(searchString);\n      String substring = s.Substring(startIndex, endIndex + searchString.Length - startIndex);\n      Console.WriteLine(&quot;Original string: {0}&quot;, s);\n      Console.WriteLine(&quot;Substring;       {0}&quot;, substring); \n   }\n}\n// The example displays the following output:\n//     Original string: &lt;term&gt;extant&lt;definition&gt;still in existence&lt;/definition&gt;&lt;/term&gt;\n//     Substring;       &lt;definition&gt;still in existence&lt;/definition&gt;\n</code></pre></li>\n<li><p>If the character or character sequence is not included in the end of the substring, the <code>length</code> parameter equals <code>endIndex</code> - <code>startIndex</code>, where <code>endIndex</code> is the return value of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method.  </p>\n<p>If <code>startIndex</code> is equal to zero and  equals the length of the current string, the method returns the original string unchanged.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToCharArray\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToCharArray()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies the characters in this instance to a Unicode character array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public char[] ToCharArray ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method copies each character (that is, each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object) in a string to a character array. The first character copied is at index zero of the returned character array; the last character copied is at index <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> – 1.  </p>\n<p> To create a string from the characters in a character array, call the [String(Char&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt; constructor.  </p>\n<p> To create a byte array that contains the encoded characters in a string, instantiate the appropriate <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object and call its <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_String_\" data-linktype=\"relative-path\">System.Text.Encoding.GetBytes(String)</a> method. Some of the standard encodings available in the .NET Framework include the following:  </p>\n<table>\n<thead>\n<tr>\n<th>Encoding</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII</td>\n<td><a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a></td>\n</tr>\n<tr>\n<td>UTF-7</td>\n<td><a class=\"xref\" href=\"system.text.utf7encoding\" data-linktype=\"relative-path\">UTF7Encoding</a></td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td><a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a></td>\n</tr>\n<tr>\n<td>UTF-16</td>\n<td><a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a></td>\n</tr>\n<tr>\n<td>UTF-32</td>\n<td><a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a></td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToCharArray_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToCharArray(Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies the characters in a specified substring in this instance to a Unicode character array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public char[] ToCharArray (int startIndex, int length);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The starting position of a substring in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The length of the substring in this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Unicode character array whose elements are the <code>length</code> number of characters in this instance starting from character position <code>startIndex</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>length</code> is greater than the length of this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method copies the characters in a portion of a string to a character array. To create a string from a range of characters in a character array, call the  [String(Char&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; constructor.  </p>\n<p> The <code>startIndex</code> parameter is zero-based. That is, the index of the first character in the string instance is zero.  </p>\n<p> If <code>length</code> is zero, the returned array is empty and has a zero length. If this instance is <code>null</code> or an empty string (&quot;&quot;), the returned array is empty and has a zero length.  </p>\n<p> To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object and call its [GetBytes(String, Int32, Int32, Byte&lt;xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29&gt; method. Some of the standard encodings available in the .NET Framework include the following:  </p>\n<table>\n<thead>\n<tr>\n<th>Encoding</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII</td>\n<td><a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a></td>\n</tr>\n<tr>\n<td>UTF-7</td>\n<td><a class=\"xref\" href=\"system.text.utf7encoding\" data-linktype=\"relative-path\">UTF7Encoding</a></td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td><a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a></td>\n</tr>\n<tr>\n<td>UTF-16</td>\n<td><a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a></td>\n</tr>\n<tr>\n<td>UTF-32</td>\n<td><a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a></td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToLower\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToLower()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a copy of this string converted to lowercase.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToLower ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string in lowercase.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method takes into account the casing rules of the current culture.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> The casing operation that results from calling the ToLower method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> methods. This produces the same result in every culture (unlike the ToLower method) and performs more efficiently.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToLower_System_Globalization_CultureInfo_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToLower(CultureInfo)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToLower (System.Globalization.CultureInfo culture);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>culture</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific casing rules.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The lowercase equivalent of the current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>culture</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The casing rules of the culture specified by the <code>culture</code> parameter determine the way the case of the string is changed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> If you pass the ToLower method a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object other than <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> method. This produces the same result in every culture and performs more efficiently.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToLowerInvariant\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToLowerInvariant()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a copy of this <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object converted to lowercase using the casing rules of the invariant culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToLowerInvariant ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The lowercase equivalent of the current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.  </p>\n<p> If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the ToLowerInvariant method. The ToLowerInvariant method is equivalent to <code>ToLower(CultureInfo.InvariantCulture)</code>. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the ToLowerInvariant or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> methods.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>; no actual conversion is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because this method simply returns the current string unchanged, there is no need to call it directly. It is usually called implicitly in a composite formatting operation, as the example shows.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToString_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>; no actual conversion is performed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToString (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>(Reserved) An object that supplies culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>provider</code> is reserved, and does not currently participate in this operation.  </p>\n<p> Because this method simply returns the current string unchanged, there is no need to call it directly.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToUpper\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToUpper()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a copy of this string converted to uppercase.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToUpper ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The uppercase equivalent of the current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent. If a character does not have an uppercase equivalent, it is included unchanged in the returned string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  </p>\n</div>\n<p> The ToUpper method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison. A better method to perform case-insensitive comparison is to call a string comparison method that has a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter whose value you set to <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> for a culture-sensitive, case-insensitive comparison.  </p>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> The casing operation that results from calling the ToUpper method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> method. This produces the same result in every culture (unlike the ToUpper method) and performs more efficiently.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToUpper_System_Globalization_CultureInfo_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToUpper(CultureInfo)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToUpper (System.Globalization.CultureInfo culture);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>culture</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that supplies culture-specific casing rules.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The uppercase equivalent of the current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>culture</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The casing rules of the culture specified by the <code>culture</code> parameter determine the way the case of a string is changed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> If you pass the ToUpper method a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object other than <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> method. This produces the same result in every culture and performs more efficiently.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_ToUpperInvariant\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToUpperInvariant()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a copy of this <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object converted to uppercase using the casing rules of the invariant culture.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToUpperInvariant ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The uppercase equivalent of the current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.  </p>\n<p> If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the ToUpperInvariant method. The ToUpperInvariant method is equivalent to <code>ToUpper(CultureInfo.InvariantCulture)</code>. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or ToUpperInvariant methods.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Trim\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Trim()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes all leading and trailing white-space characters from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Trim ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Trim method removes from the current string all leading and trailing white-space characters. Each leading and trailing trim operation stops when a non-white-space character is encountered. For example, if the current string is &quot;   abc   xyz   &quot;, the Trim method returns &quot;abc   xyz&quot;. To remove white-space characters between words in a string, use a <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the Trim method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.  </p>\n</div>\n<p> If the current string equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or all the characters in the current instance consist of white-space characters, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> White-space characters are defined by the Unicode standard. The Trim method removes any leading and trailing characters that produce a return value of <code>true</code> when they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_Trim_System_Char___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Trim(Char[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Trim (char[] trimChars);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>trimChars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of Unicode characters to remove, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the start and end of the current string. If <code>trimChars</code> is <code>null</code> or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Trim method removes from the current string all leading and trailing characters that are in the <code>trimChars</code> parameter. Each leading and trailing trim operation stops when a character that is not in <code>trimChars</code> is encountered. For example, if the current string is &quot;123abc456xyz789&quot; and <code>trimChars</code> contains the digits from &quot;1&quot; through &quot;9&quot;, the Trim method returns &quot;abc456xyz&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the Trim method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing <code>trimChars</code> characters found in the current instance are removed.  </p>\n</div>\n<p> If the current string equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or all the characters in the current instance consist of characters in the <code>trimChars</code> array, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> If <code>trimChars</code> is <code>null</code> or an empty array, this method removes any leading or trailing characters that result in the method returning <code>true</code> when they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method,</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_TrimEnd_System_Char___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TrimEnd(Char[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes all trailing occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string TrimEnd (char[] trimChars);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>trimChars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of Unicode characters to remove, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the end of the current string. If <code>trimChars</code> is <code>null</code> or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TrimEnd method removes from the current string all trailing characters that are in the <code>trimChars</code> parameter. The trim operation stops when the first character that is not in <code>trimChars</code> is encountered at the end of the string. For example, if the current string is &quot;123abc456xyz789&quot; and <code>trimChars</code> contains the digits from &quot;1&quot; through &quot;9&quot;, the TrimEnd method returns &quot;123abc456xyz&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the TrimEnd method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all trailing characters found in <code>trimChars</code> are removed from the current string.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_TrimStart_System_Char___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TrimStart(Char[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes all leading occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string TrimStart (char[] trimChars);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>trimChars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of Unicode characters to remove, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string that remains after all occurrences of characters in the <code>trimChars</code> parameter are removed from the start of the current string. If <code>trimChars</code> is <code>null</code> or an empty array, white-space characters are removed instead.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TrimStart method removes from the current string all leading characters that are in the <code>trimChars</code> parameter. The trim operation stops when a character that is not in <code>trimChars</code> is encountered. For example, if the current string is &quot;123abc456xyz789&quot; and <code>trimChars</code> contains the digits from &quot;1&quot; through &quot;9&quot;, the TrimStart method returns &quot;abc456xyz789&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the TrimStart method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_op_Equality_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether two specified strings have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (string a, string b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Equality method defines the operation of the equality operator for the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class. It enables code such as that shown in the Example section. The operator, in turn, calls the static <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_String_\" data-linktype=\"relative-path\">Equals(String,String)</a> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic compiler does not resolve the equality operator as a call to the Equality method. Instead, the equality operator wraps a call to the <a class=\"xref\" href=\"microsoft.visualbasic.compilerservices.operators#Microsoft_VisualBasic_CompilerServices_Operators_CompareString_\" data-linktype=\"relative-path\">CompareString</a> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_op_Inequality_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether two specified strings have different values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (string a, string b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first string to compare, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second string to compare, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of <code>a</code> is different from the value of <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Inequality method defines the operation of the inequality operator for the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class.   It enables code such as that shown in the Examples section.  </p>\n<p> The Inequality operator in turn calls the static <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_String_\" data-linktype=\"relative-path\">Equals(String,String)</a> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic compiler does not resolve the inequality operator as a call to the Inequality method. Instead, the inequality operator wraps a call to the <a class=\"xref\" href=\"microsoft.visualbasic.compilerservices.operators#Microsoft_VisualBasic_CompilerServices_Operators_CompareString_\" data-linktype=\"relative-path\">CompareString</a> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_Collections_Generic_IEnumerable_System_Char__GetEnumerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IEnumerable&lt;Char&gt;.GetEnumerator()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an enumerator that iterates through the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">System.Collections.Generic.IEnumerator&lt;char&gt; IEnumerable&lt;char&gt;.GetEnumerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator</a>&lt;<a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A strongly-typed enumerator that can be used to iterate through the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface object. For more information, see the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_Collections_IEnumerable_GetEnumerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IEnumerable.GetEnumerator()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an enumerator that iterates through the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumerator that can be used to iterate through the current string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface. For more information, see the <a class=\"xref\" href=\"system.collections.ienumerable#System_Collections_IEnumerable_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of the current string is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>; <code>false</code> if the value of the current string is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current string is not <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_String_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(String)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater than <a class=\"xref\" href=\"system.byte#System_Byte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.byte#System_Byte_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToByte(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character at index 0 in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToChar_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToChar(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDateTime*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDateTime_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToDateTime(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number less than <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a> or than <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> greater.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDecimal_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToDecimal(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number less than <a class=\"xref\" href=\"system.double#System_Double_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.double#System_Double_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDouble_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToDouble(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater than <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.int16#System_Int16_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToInt16(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToInt32(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToInt64(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater than <a class=\"xref\" href=\"system.sbyte#System_SByte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.sbyte#System_SByte_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToSByte(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSingle_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToSingle(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of the returned object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>type</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be converted to the type specified by the <code>type</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater than <a class=\"xref\" href=\"system.uint16#System_UInt16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.uint16#System_UInt16_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToUInt16(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater <a class=\"xref\" href=\"system.uint32#System_UInt32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.uint32#System_UInt32_MinValue\" data-linktype=\"relative-path\">MinValue</a></p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToUInt32(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_String_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that provides culture-specific formatting information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToUInt64(String,IFormatProvider)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.String.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.String.yml\">\r\n<meta name=\"APIName\" content=\"System.String\">\r\n<meta name=\"APIName\" content=\"System.String..ctor\">\r\n<meta name=\"APIName\" content=\"System.String.Chars\">\r\n<meta name=\"APIName\" content=\"System.String.Clone\">\r\n<meta name=\"APIName\" content=\"System.String.Compare\">\r\n<meta name=\"APIName\" content=\"System.String.CompareOrdinal\">\r\n<meta name=\"APIName\" content=\"System.String.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.String.Concat\">\r\n<meta name=\"APIName\" content=\"System.String.Concat&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.String.Contains\">\r\n<meta name=\"APIName\" content=\"System.String.Copy\">\r\n<meta name=\"APIName\" content=\"System.String.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.String.Empty\">\r\n<meta name=\"APIName\" content=\"System.String.EndsWith\">\r\n<meta name=\"APIName\" content=\"System.String.Equals\">\r\n<meta name=\"APIName\" content=\"System.String.Format\">\r\n<meta name=\"APIName\" content=\"System.String.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.String.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.String.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.String.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.String.IndexOfAny\">\r\n<meta name=\"APIName\" content=\"System.String.Insert\">\r\n<meta name=\"APIName\" content=\"System.String.Intern\">\r\n<meta name=\"APIName\" content=\"System.String.IsInterned\">\r\n<meta name=\"APIName\" content=\"System.String.IsNormalized\">\r\n<meta name=\"APIName\" content=\"System.String.IsNullOrEmpty\">\r\n<meta name=\"APIName\" content=\"System.String.IsNullOrWhiteSpace\">\r\n<meta name=\"APIName\" content=\"System.String.Join\">\r\n<meta name=\"APIName\" content=\"System.String.Join&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.String.LastIndexOf\">\r\n<meta name=\"APIName\" content=\"System.String.LastIndexOfAny\">\r\n<meta name=\"APIName\" content=\"System.String.Length\">\r\n<meta name=\"APIName\" content=\"System.String.Normalize\">\r\n<meta name=\"APIName\" content=\"System.String.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.String.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.String.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.String.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.String.PadLeft\">\r\n<meta name=\"APIName\" content=\"System.String.PadRight\">\r\n<meta name=\"APIName\" content=\"System.String.Remove\">\r\n<meta name=\"APIName\" content=\"System.String.Replace\">\r\n<meta name=\"APIName\" content=\"System.String.Split\">\r\n<meta name=\"APIName\" content=\"System.String.StartsWith\">\r\n<meta name=\"APIName\" content=\"System.String.Substring\">\r\n<meta name=\"APIName\" content=\"System.String.IEnumerable&lt;Char&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.String.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.String.ToCharArray\">\r\n<meta name=\"APIName\" content=\"System.String.ToLower\">\r\n<meta name=\"APIName\" content=\"System.String.ToLowerInvariant\">\r\n<meta name=\"APIName\" content=\"System.String.ToString\">\r\n<meta name=\"APIName\" content=\"System.String.ToUpper\">\r\n<meta name=\"APIName\" content=\"System.String.ToUpperInvariant\">\r\n<meta name=\"APIName\" content=\"System.String.Trim\">\r\n<meta name=\"APIName\" content=\"System.String.TrimEnd\">\r\n<meta name=\"APIName\" content=\"System.String.TrimStart\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"52b6c93e-6da7-6ba1-9704-d617756bbde2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents text as a sequence of UTF-16 code units.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.String\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.String.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.String.yml","open_to_public_contributors":true,"api_name":["System.String","System.String..ctor","System.String.Chars","System.String.Clone","System.String.Compare","System.String.CompareOrdinal","System.String.CompareTo","System.String.Concat","System.String.Concat<T>","System.String.Contains","System.String.Copy","System.String.CopyTo","System.String.Empty","System.String.EndsWith","System.String.Equals","System.String.Format","System.String.GetEnumerator","System.String.GetHashCode","System.String.GetTypeCode","System.String.IndexOf","System.String.IndexOfAny","System.String.Insert","System.String.Intern","System.String.IsInterned","System.String.IsNormalized","System.String.IsNullOrEmpty","System.String.IsNullOrWhiteSpace","System.String.Join","System.String.Join<T>","System.String.LastIndexOf","System.String.LastIndexOfAny","System.String.Length","System.String.Normalize","System.String.op_Equality","System.String.op_op_Equality","System.String.op_Inequality","System.String.op_op_Inequality","System.String.PadLeft","System.String.PadRight","System.String.Remove","System.String.Replace","System.String.Split","System.String.StartsWith","System.String.Substring","System.String.IEnumerable<Char>.GetEnumerator","System.String.IEnumerable.GetEnumerator","System.String.IConvertible.ToBoolean","System.String.IConvertible.ToByte","System.String.IConvertible.ToChar","System.String.IConvertible.ToDateTime","System.String.IConvertible.ToDecimal","System.String.IConvertible.ToDouble","System.String.IConvertible.ToInt16","System.String.IConvertible.ToInt32","System.String.IConvertible.ToInt64","System.String.IConvertible.ToSByte","System.String.IConvertible.ToSingle","System.String.IConvertible.ToType","System.String.IConvertible.ToUInt16","System.String.IConvertible.ToUInt32","System.String.IConvertible.ToUInt64","System.String.ToCharArray","System.String.ToLower","System.String.ToLowerInvariant","System.String.ToString","System.String.ToUpper","System.String.ToUpperInvariant","System.String.Trim","System.String.TrimEnd","System.String.TrimStart"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.String","System::String","System.String.#ctor","System::String::#ctor","System.String.Chars","System::String::Chars","System.String.Clone","System::String::Clone","System.String.Compare","System::String::Compare","System.String.CompareOrdinal","System::String::CompareOrdinal","System.String.CompareTo","System::String::CompareTo","System.String.Concat","System::String::Concat","System.String.Concat``1","System::String::Concat``1","System.String.Contains","System::String::Contains","System.String.Copy","System::String::Copy","System.String.CopyTo","System::String::CopyTo","System.String.Empty","System::String::Empty","System.String.EndsWith","System::String::EndsWith","System.String.Equals","System::String::Equals","System.String.Format","System::String::Format","System.String.GetEnumerator","System::String::GetEnumerator","System.String.GetHashCode","System::String::GetHashCode","System.String.GetTypeCode","System::String::GetTypeCode","System.String.IndexOf","System::String::IndexOf","System.String.IndexOfAny","System::String::IndexOfAny","System.String.Insert","System::String::Insert","System.String.Intern","System::String::Intern","System.String.IsInterned","System::String::IsInterned","System.String.IsNormalized","System::String::IsNormalized","System.String.IsNullOrEmpty","System::String::IsNullOrEmpty","System.String.IsNullOrWhiteSpace","System::String::IsNullOrWhiteSpace","System.String.Join","System::String::Join","System.String.Join``1","System::String::Join``1","System.String.LastIndexOf","System::String::LastIndexOf","System.String.LastIndexOfAny","System::String::LastIndexOfAny","System.String.Length","System::String::Length","System.String.Normalize","System::String::Normalize","System.String.op_Equality","System::String::op_Equality","System.String.op_Inequality","System::String::op_Inequality","System.String.PadLeft","System::String::PadLeft","System.String.PadRight","System::String::PadRight","System.String.Remove","System::String::Remove","System.String.Replace","System::String::Replace","System.String.Split","System::String::Split","System.String.StartsWith","System::String::StartsWith","System.String.Substring","System::String::Substring","System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator","System::String::System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator","System.String.System#Collections#IEnumerable#GetEnumerator","System::String::System#Collections#IEnumerable#GetEnumerator","System.String.System#IConvertible#ToBoolean","System::String::System#IConvertible#ToBoolean","System.String.System#IConvertible#ToByte","System::String::System#IConvertible#ToByte","System.String.System#IConvertible#ToChar","System::String::System#IConvertible#ToChar","System.String.System#IConvertible#ToDateTime","System::String::System#IConvertible#ToDateTime","System.String.System#IConvertible#ToDecimal","System::String::System#IConvertible#ToDecimal","System.String.System#IConvertible#ToDouble","System::String::System#IConvertible#ToDouble","System.String.System#IConvertible#ToInt16","System::String::System#IConvertible#ToInt16","System.String.System#IConvertible#ToInt32","System::String::System#IConvertible#ToInt32","System.String.System#IConvertible#ToInt64","System::String::System#IConvertible#ToInt64","System.String.System#IConvertible#ToSByte","System::String::System#IConvertible#ToSByte","System.String.System#IConvertible#ToSingle","System::String::System#IConvertible#ToSingle","System.String.System#IConvertible#ToType","System::String::System#IConvertible#ToType","System.String.System#IConvertible#ToUInt16","System::String::System#IConvertible#ToUInt16","System.String.System#IConvertible#ToUInt32","System::String::System#IConvertible#ToUInt32","System.String.System#IConvertible#ToUInt64","System::String::System#IConvertible#ToUInt64","System.String.ToCharArray","System::String::ToCharArray","System.String.ToLower","System::String::ToLower","System.String.ToLowerInvariant","System::String::ToLowerInvariant","System.String.ToString","System::String::ToString","System.String.ToUpper","System::String::ToUpper","System.String.ToUpperInvariant","System::String::ToUpperInvariant","System.String.Trim","System::String::Trim","System.String.TrimEnd","System::String::TrimEnd","System.String.TrimStart","System::String::TrimStart"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"52b6c93e-6da7-6ba1-9704-d617756bbde2","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/String.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"String class | Microsoft Docs","_op_ogTitle":"String class","description":"Represents text as a sequence of UTF-16 code units.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.String","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.string","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.string","fileRelativePath":"System.String.html"},"themesRelativePathToOutputRoot":"_themes/"}