{"content":"    \r\n    <h1 id=\"System_String\">\r\n      <span class=\"lang-csharp\">String</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents text as a sequence of UTF-16 code units.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class String : ICloneable, IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">String</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> A string is a sequential collection of characters that is used to represent text. A String object is a sequential collection of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">System.Char</a> objects that represent a string; a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">System.Char</a> object corresponds to a UTF-16 code unit. The value of the String object is the content of the sequential collection of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">System.Char</a> objects, and that value is immutable (that is, it is read-only). For more information about the immutability of strings, see the <a href=\"#Immutability\" data-linktype=\"self-bookmark\">Immutability and the StringBuilder class</a> section later in this topic. The maximum size of a String object in memory is 2GB, or about 1 billion characters.  </p>\n<p> In this section:  </p>\n<p> <a href=\"#Instantiation\" data-linktype=\"self-bookmark\">Instantiating a String object</a><br> <a href=\"#Characters\" data-linktype=\"self-bookmark\">Char objects and Unicode characters</a><br> <a href=\"#Unicode\" data-linktype=\"self-bookmark\">Strings and The Unicode Standard</a><br> <a href=\"#EmbeddedNulls\" data-linktype=\"self-bookmark\">Strings and embedded null characters</a><br> <a href=\"#Indexes\" data-linktype=\"self-bookmark\">Strings and indexes</a><br> <a href=\"#Nulls\" data-linktype=\"self-bookmark\">Null strings and empty strings</a><br> <a href=\"#Immutability\" data-linktype=\"self-bookmark\">Immutability and the StringBuilder class</a><br> <a href=\"#CultureSensitive\" data-linktype=\"self-bookmark\">Ordinal vs. culture-sensitive operations</a><br> <a href=\"#Normalization\" data-linktype=\"self-bookmark\">Normalization</a><br> <a href=\"#ByCategory\" data-linktype=\"self-bookmark\">String operations by category</a>  </p>\n<p><a name=\"Instantiation\"></a>   </p>\n<h2 id=\"instantiating-a-string-object\">Instantiating a String object</h2>\n<p> You can instantiate a String object in the following ways:  </p>\n<ul>\n<li><p>By assigning a string literal to a String variable. This is the most commonly used method for creating a string. The following example uses assignment to create several strings. Note that in C#, because the backslash (\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#1\">      Dim string1 As String = &quot;This is a string created by assignment.&quot;\n      Console.WriteLine(string1)\n      Dim string2 As String = &quot;The path is C:\\PublicDocuments\\Report1.doc&quot;\n      Console.WriteLine(string2)\n      &#39; The example displays the following output:\n      &#39;       This is a string created by assignment.\n      &#39;       The path is C:\\PublicDocuments\\Report1.doc      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#1\">string string1 = &quot;This is a string created by assignment.&quot;;\nConsole.WriteLine(string1);\nstring string2a = &quot;The path is C:\\\\PublicDocuments\\\\Report1.doc&quot;;\nConsole.WriteLine(string2a);\nstring string2b = @&quot;The path is C:\\PublicDocuments\\Report1.doc&quot;;\nConsole.WriteLine(string2b);\n// The example displays the following output:\n//       This is a string created by assignment.\n//       The path is C:\\PublicDocuments\\Report1.doc\n//       The path is C:\\PublicDocuments\\Report1.doc      \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#1\">using namespace System;\n\nvoid main()\n{\n   String^ string1 = &quot;This is a string created by assignment.&quot;;\n   Console::WriteLine(string1);\n   String^ string2a = &quot;The path is C:\\\\PublicDocuments\\\\Report1.doc&quot;;\n   Console::WriteLine(string2a);\n}\n// The example displays the following output: \n//       This is a string created by assignment. \n//       The path is C:\\PublicDocuments\\Report1.doc \n</code></pre></li>\n<li><p>By calling a String class constructor. The following example instantiates strings by calling several class constructors. Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters. Visual Basic does not support calls to these constructors. For detailed information about String constructors, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#2\">      Dim chars() As Char = { &quot;w&quot;c, &quot;o&quot;c, &quot;r&quot;c, &quot;d&quot;c }\n      \n      &#39; Create a string from a character array.\n      Dim string1 As New String(chars)\n      Console.WriteLine(string1)\n      \n      &#39; Create a string that consists of a character repeated 20 times.\n      Dim string2 As New String(&quot;c&quot;c, 20)\n      Console.WriteLine(string2)\n      &#39; The example displays the following output:\n      &#39;       word\n      &#39;       cccccccccccccccccccc      \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#2\">using namespace System;\n\nvoid main()\n{\n   wchar_t chars[5] = L&quot;word&quot;;\n   char bytes[6] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x00 };\n\n   // Create a string from a character array. \n   String^ string1 = gcnew String(chars);\n   Console::WriteLine(string1);\n\n   // Create a string that consists of a character repeated 20 times. \n   String^ string2 = gcnew String(&#39;c&#39;, 20);\n   Console::WriteLine(string2);\n\n   String^ stringFromBytes = nullptr;\n   String^ stringFromChars = nullptr;\n\n   char * pbytes = &amp;bytes[0];\n   // Create a string from a pointer to a signed byte array.\n   stringFromBytes = gcnew String(pbytes);\n\n   wchar_t* pchars =  &amp;chars[0];\n   // Create a string from a pointer to a character array.\n   stringFromChars = gcnew String(pchars);\n\n   Console::WriteLine(stringFromBytes);\n   Console::WriteLine(stringFromChars);\n   Console::ReadLine();\n}\n// The example displays the following output: \n//       word \n//       cccccccccccccccccccc \n//       ABCDE \n//       word  \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#2\">char[] chars = { &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;d&#39; };\nsbyte[] bytes = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x00 };\n\n// Create a string from a character array.\nstring string1 = new string(chars);\nConsole.WriteLine(string1);\n\n// Create a string that consists of a character repeated 20 times.\nstring string2 = new string(&#39;c&#39;, 20);\nConsole.WriteLine(string2);\n\nstring stringFromBytes = null;\nstring stringFromChars = null;\nunsafe\n{\n   fixed (sbyte* pbytes = bytes)\n   {\n      // Create a string from a pointer to a signed byte array.\n      stringFromBytes = new string(pbytes);\n   }\n   fixed (char* pchars = chars)\n   {\n      // Create a string from a pointer to a character array.\n      stringFromChars = new string(pchars);\n   }\n}\nConsole.WriteLine(stringFromBytes);\nConsole.WriteLine(stringFromChars);\n// The example displays the following output:\n//       word\n//       cccccccccccccccccccc\n//       ABCDE\n//       word  \n</code></pre></li>\n<li><p>By using the string concatenation operator (+ in C# and &amp; or + in Visual Basic) to create a single string from any combination of String instances and string literals. The following example illustrates the use of the string concatenation operator.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#3\">      Dim string1 As String = &quot;Today is &quot; + Date.Now.ToString(&quot;D&quot;) + &quot;.&quot;  \n      Console.WriteLine(string1)\n      Dim string2 As String = &quot;This is one sentence. &quot; + &quot;This is a second. &quot;\n      string2 += &quot;This is a third sentence.&quot;\n      Console.WriteLine(string2)      \n      &#39; The example displays output like the following:\n      &#39;    Today is Tuesday, July 06, 2011.\n      &#39;    This is one sentence. This is a second. This is a third sentence.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#3\">string string1 = &quot;Today is &quot; + DateTime.Now.ToString(&quot;D&quot;) + &quot;.&quot;;\nConsole.WriteLine(string1);\n\nstring string2 = &quot;This is one sentence. &quot; + &quot;This is a second. &quot;;\nstring2 += &quot;This is a third sentence.&quot;;\nConsole.WriteLine(string2);\n// The example displays output like the following:\n//    Today is Tuesday, July 06, 2011.\n//    This is one sentence. This is a second. This is a third sentence.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#3\">   String^ string1 = &quot;Today is &quot; + DateTime::Now.ToString(&quot;D&quot;) + &quot;.&quot;;\n   Console::WriteLine(string1);\n\n   String^ string2 = &quot;This is one sentence. &quot; + &quot;This is a second. &quot;;\n   string2 += &quot;This is a third sentence.&quot;;\n   Console::WriteLine(string2);\n   // The example displays output like the following: \n   //    Today is Tuesday, July 06, 2011. \n   //    This is one sentence. This is a second. This is a third sentence.\n</code></pre></li>\n<li><p>By retrieving a property or calling a method that returns a string. The following example uses the methods of the String class to extract a substring from a larger string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#4\">      Dim sentence As String = &quot;This sentence has five words.&quot;\n      &#39; Extract the second word.\n      Dim startPosition As Integer = sentence.IndexOf(&quot; &quot;) + 1\n      Dim word2 As String = sentence.Substring(startPosition, \n                                               sentence.IndexOf(&quot; &quot;, startPosition) - startPosition) \n      Console.WriteLine(&quot;Second word: &quot; + word2)\n      &#39; The example displays the following output:\n      &#39;       Second word: sentence\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#4\">string sentence = &quot;This sentence has five words.&quot;;\n// Extract the second word.\nint startPosition = sentence.IndexOf(&quot; &quot;) + 1;\nstring word2 = sentence.Substring(startPosition,\n                                  sentence.IndexOf(&quot; &quot;, startPosition) - startPosition);\nConsole.WriteLine(&quot;Second word: &quot; + word2);\n// The example displays the following output:\n//       Second word: sentence\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#4\">   String^ sentence = &quot;This sentence has five words.&quot;;\n   // Extract the second word.\n   int startPosition = sentence-&gt;IndexOf(&quot; &quot;) + 1;\n   String^ word2 = sentence-&gt;Substring(startPosition, \n                                       sentence-&gt;IndexOf(&quot; &quot;, startPosition) - startPosition);\n   Console::WriteLine(&quot;Second word: &quot; + word2);\n</code></pre></li>\n<li><p>By calling a formatting method to convert a value or object to its string representation. The following example uses the                <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting</a> feature to embed the string representation of two objects into a string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Instantiate#5\">      Dim dateAndTime As DateTime = #07/06/2011 7:32:00AM#\n      Dim temperature As Double = 68.3\n      Dim result As String = String.Format(&quot;At {0:t} on {0:D}, the temperature was {1:F1} degrees Fahrenheit.&quot;,\n                                           dateAndTime, temperature)\n      Console.WriteLine(result)\n      &#39; The example displays the following output:\n      &#39;       At 7:32 AM on Wednesday, July 06, 2011, the temperature was 68.3 degrees Fahrenheit.      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Instantiate#5\">DateTime dateAndTime = new DateTime(2011, 7, 6, 7, 32, 0);\ndouble temperature = 68.3;\nstring result = String.Format(&quot;At {0:t} on {0:D}, the temperature was {1:F1} degrees Fahrenheit.&quot;,\n                              dateAndTime, temperature);\nConsole.WriteLine(result);\n// The example displays the following output:\n//       At 7:32 AM on Wednesday, July 06, 2011, the temperature was 68.3 degrees Fahrenheit.      \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Instantiate#5\">   DateTime^ dateAndTime = gcnew DateTime(2011, 7, 6, 7, 32, 0);\n   Double temperature = 68.3;\n   String^ result = String::Format(&quot;At {0:t} on {0:D}, the temperature was {1:F1} degrees Fahrenheit.&quot;,\n                                  dateAndTime, temperature);\n   Console::WriteLine(result);\n   // The example displays the following output: \n   //       At 7:32 AM on Wednesday, July 06, 2011, the temperature was 68.3 degrees Fahrenheit.      \n</code></pre></li>\n</ul>\n<p><a name=\"Characters\"></a>   </p>\n<h2 id=\"char-objects-and-unicode-characters\">Char objects and Unicode characters</h2>\n<p> Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character. Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Note that, because a String instance consists of a sequential collection of UTF-16 code units, it is possible to create a String object that is not a well-formed Unicode string. For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate. Although some methods, such as the methods of encoding and decoding objects in the <a class=\"xref\" href=\"system.text\" data-linktype=\"relative-path\">System.Text</a> namespace, may performs checks to ensure that strings are well-formed, String class members do not ensure that a string is well-formed.  </p>\n</div>\n<p> A single <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object usually represents a single code point; that is, the numeric value of the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> equals the code point. For example, the code point for the character &quot;a&quot; is U+0061. However, a code point might require more than one encoded element (more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object). The Unicode standard defines two types of characters that correspond to multiple <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.  </p>\n<ul>\n<li><p>A grapheme is represented by a base character followed by one or more combining characters. For example, the character Ã¤ is represented by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object whose code point is U+0061 followed by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object whose code point is U+0308. This character can also be defined by a single <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object that has a code point of U+00E4. As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not. However, if the two strings are normalized, an ordinal comparison also indicates that they are equal. (For more information on normalizing strings, see the <a href=\"#Normalization\" data-linktype=\"self-bookmark\">Normalization</a> section.)  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#2\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::IO;\n\nvoid main()\n{\n   StreamWriter^ sw = gcnew StreamWriter(&quot;.\\\\graphemes.txt&quot;);\n   String^ grapheme = L&quot;a&quot; + L&quot;\\u0308&quot;;\n   sw-&gt;WriteLine(grapheme);\n\n   String^ singleChar = &quot;\\u00e4&quot;;\n   sw-&gt;WriteLine(singleChar);\n\n   sw-&gt;WriteLine(&quot;{0} = {1} (Culture-sensitive): {2}&quot;, grapheme, singleChar, \n                  String::Equals(grapheme, singleChar, \n                              StringComparison::CurrentCulture));\n   sw-&gt;WriteLine(&quot;{0} = {1} (Ordinal): {2}&quot;, grapheme, singleChar, \n                  String::Equals(grapheme, singleChar, \n                              StringComparison::Ordinal));\n   sw-&gt;WriteLine(&quot;{0} = {1} (Normalized Ordinal): {2}&quot;, grapheme, singleChar, \n                  String::Equals(grapheme-&gt;Normalize(), \n                              singleChar-&gt;Normalize(), \n                              StringComparison::Ordinal));\n   sw-&gt;Close(); \n}\n// The example produces the following output: \n//       aÌˆ \n//       &#228; \n//       aÌˆ = &#228; (Culture-sensitive): True \n//       aÌˆ = &#228; (Ordinal): False \n//       aÌˆ = &#228; (Normalized Ordinal): True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#2\">using System;\nusing System.Globalization;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(@&quot;.\\graphemes.txt&quot;);\n      string grapheme = &quot;\\u0061\\u0308&quot;;\n      sw.WriteLine(grapheme);\n      \n      string singleChar = &quot;\\u00e4&quot;;\n      sw.WriteLine(singleChar);\n            \n      sw.WriteLine(&quot;{0} = {1} (Culture-sensitive): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme, singleChar, \n                                 StringComparison.CurrentCulture));\n      sw.WriteLine(&quot;{0} = {1} (Ordinal): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme, singleChar, \n                                 StringComparison.Ordinal));\n      sw.WriteLine(&quot;{0} = {1} (Normalized Ordinal): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme.Normalize(), \n                                 singleChar.Normalize(), \n                                 StringComparison.Ordinal));\n      sw.Close(); \n   }\n}\n// The example produces the following output:\n//       aÌˆ\n//       &#228;\n//       aÌˆ = &#228; (Culture-sensitive): True\n//       aÌˆ = &#228; (Ordinal): False\n//       aÌˆ = &#228; (Normalized Ordinal): True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#2\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;.\\graphemes.txt&quot;)\n      Dim grapheme As String = ChrW(&amp;H0061) + ChrW(&amp;h0308)\n      sw.WriteLine(grapheme)\n      \n      Dim singleChar As String = ChrW(&amp;h00e4)\n      sw.WriteLine(singleChar)\n            \n      sw.WriteLine(&quot;{0} = {1} (Culture-sensitive): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme, singleChar, \n                                 StringComparison.CurrentCulture))\n      sw.WriteLine(&quot;{0} = {1} (Ordinal): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme, singleChar, \n                                 StringComparison.Ordinal))\n      sw.WriteLine(&quot;{0} = {1} (Normalized Ordinal): {2}&quot;, grapheme, singleChar, \n                   String.Equals(grapheme.Normalize(), \n                                 singleChar.Normalize(), \n                                 StringComparison.Ordinal))\n      sw.Close() \n   End Sub\nEnd Module\n&#39; The example produces the following output:\n&#39;       aÌˆ\n&#39;       &#228;\n&#39;       aÌˆ = &#228; (Culture-sensitive): True\n&#39;       aÌˆ = &#228; (Ordinal): False\n&#39;       aÌˆ = &#228; (Normalized Ordinal): True\n</code></pre></li>\n<li><p>A Unicode supplementary code point (a surrogate pair) is represented by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object whose code point is a high surrogate followed by a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object whose code point is a low surrogate. The code units of high surrogates range from U+D800 to U+DBFF. The code units of low surrogates range from U+DC00 to U+DFFF. Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes. The following example creates a surrogate character and passes it to the <a class=\"xref\" href=\"system.char#System_Char_IsSurrogatePair_System_Char_System_Char_\" data-linktype=\"relative-path\">System.Char.IsSurrogatePair(Char,Char)</a> method to determine whether it is a surrogate pair.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#3\">using namespace System;\n\nvoid main()\n{\n   String^ surrogate =  L&quot;\\xD800\\xDC03&quot; ;\n   for (int ctr = 0; ctr &lt; surrogate-&gt;Length; ctr++)\n      Console::Write(&quot;U+{0:X4} &quot;, Convert::ToUInt16(surrogate[ctr]));\n\n   Console::WriteLine();\n   Console::WriteLine(&quot;   Is Surrogate Pair: {0}&quot;, \n                      Char::IsSurrogatePair(surrogate[0], surrogate[1]));\n   Console::ReadLine();\n}\n// The example displays the following output: \n//       U+D800 U+DC03 \n//          Is Surrogate Pair: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string surrogate = &quot;\\uD800\\uDC03&quot;;\n      for (int ctr = 0; ctr &lt; surrogate.Length; ctr++) \n         Console.Write(&quot;U+{0:X2} &quot;, Convert.ToUInt16(surrogate[ctr]));\n\n      Console.WriteLine();\n      Console.WriteLine(&quot;   Is Surrogate Pair: {0}&quot;, \n                        Char.IsSurrogatePair(surrogate[0], surrogate[1]));\n   }\n}\n// The example displays the following output:\n//       U+D800 U+DC03\n//          Is Surrogate Pair: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#3\">Module Example\n   Public Sub Main()\n      Dim surrogate As String = ChrW(&amp;hD800) + ChrW(&amp;hDC03)\n      For ctr As Integer = 0 To surrogate.Length - 1\n         Console.Write(&quot;U+{0:X2} &quot;, Convert.ToUInt16(surrogate(ctr)))\n      Next   \n      Console.WriteLine()\n      Console.WriteLine(&quot;   Is Surrogate Pair: {0}&quot;, \n                        Char.IsSurrogatePair(surrogate(0), surrogate(1)))\n   End Sub\nEnd Module\n\n&#39; The example displays the following output:\n&#39;       U+D800 U+DC03\n&#39;          Is Surrogate Pair: True\n</code></pre></li>\n</ul>\n<p><a name=\"Unicode\"></a>   </p>\n<h2 id=\"strings-and-the-unicode-standard\">Strings and The Unicode Standard</h2>\n<p> Characters in a string are represented by UTF-16 encoded code units, which correspond to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values.  </p>\n<p> Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> enumeration. The category of a character or a surrogate pair can be determined by calling the <a class=\"xref\" href=\"system.globalization.charunicodeinfo#System_Globalization_CharUnicodeInfo_GetUnicodeCategory_\" data-linktype=\"relative-path\">GetUnicodeCategory</a> method.  </p>\n<p> The .NET Framework maintains its own table of characters and their corresponding categories, which ensures that a version of the .NET Framework running on different platforms returns identical character category information. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which their character categories are based.  </p>\n<table>\n<thead>\n<tr>\n<th>.NET Framework version</th>\n<th>Version of the Unicode Standard</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.NET Framework 1.1</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode4.0.0/\" data-linktype=\"external\">The Unicode Standard, Version 4.0.0</a></td>\n</tr>\n<tr>\n<td>The .NET Framework 2.0</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td> .NET Framework 3.5 </td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5.1</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5.2</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.6</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.6.1</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.6.2</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode8.0.0/\" data-linktype=\"external\">The Unicode Standard, Version 8.0.0</a></td>\n</tr>\n</tbody>\n</table>\n<p> In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard. In versions of the .NET Framework through the .NET Framework 4, the .NET Framework maintains its own table of string data. This is also true of versions of the .NET Framework starting with the .NET Framework 4.5 running on Windows 7. Starting with the .NET Framework 4.5 running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system. The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.  </p>\n<table>\n<thead>\n<tr>\n<th>.NET Framework version</th>\n<th>Version of the Unicode Standard</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.NET Framework 1.1</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode4.0.0/\" data-linktype=\"external\">The Unicode Standard, Version 4.0.0</a></td>\n</tr>\n<tr>\n<td>The .NET Framework 2.0</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td> .NET Framework 3.5 </td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5 and later on Windows 7</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode5.0.0\" data-linktype=\"external\">The Unicode Standard, Version 5.0.0</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.5 and later on Windows 8 and later Windows operating systems</td>\n<td><a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unicode Standard, Version 6.3.0</a></td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"EmbeddedNulls\"></a>   </p>\n<h2 id=\"strings-and-embedded-null-characters\">Strings and embedded null characters</h2>\n<p> In the .NET Framework, a String object can include embedded null characters, which count as a part of the string&#39;s length. However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string&#39;s length. This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to String objects:  </p>\n<ul>\n<li><p>The value returned by the <code>strlen</code> or <code>wcslen</code> functions does not necessarily equal <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a>.  </p>\n</li>\n<li><p>The string created by the <code>strcpy_s</code> or <code>wcscpy_s</code> functions is not necessarily identical to the string created by the <a class=\"xref\" href=\"system.string#System_String_Copy_\" data-linktype=\"relative-path\">Copy</a> method.  </p>\n<p>You should ensure that native C and C++ code that instantiates String objects, and code that is passed String objects through platform invoke, do not assume that an embedded null character marks the end of the string.  </p>\n<p>Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched. Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture. They are considered only for ordinal or case-insensitive ordinal comparisons. On the other hand, embedded null characters are always considered when searching a string with methods such as <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a>, and <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>.  </p>\n</li>\n</ul>\n<p><a name=\"Indexes\"></a>   </p>\n<h2 id=\"strings-and-indexes\">Strings and indexes</h2>\n<p> An index is the position of a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object (not a Unicode character) in a String. An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero. A number of search methods, such as <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> and <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, return the index of a character or substring in the string instance.  </p>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Chars_\" data-linktype=\"relative-path\">Chars</a> property lets you access individual <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects by their index position in the string. Because the <a class=\"xref\" href=\"system.string#System_String_Chars_\" data-linktype=\"relative-path\">Chars</a> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in a string by using code such as the following. This code looks for white space or punctuation characters in a string to determine how many words the string contains.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#4\">using namespace System;\n\nvoid main()\n{\n   String^ s1 = &quot;This string consists of a single short sentence.&quot;;\n   int nWords = 0;\n\n   s1 = s1-&gt;Trim();      \n   for (int ctr = 0; ctr &lt; s1-&gt;Length; ctr++) {\n         if (Char::IsPunctuation(s1[ctr]) | Char::IsWhiteSpace(s1[ctr]))\n            nWords++;              \n   }\n   Console::WriteLine(&quot;The sentence\\n   {0}\\nhas {1} words.&quot;,\n                     s1, nWords);           \n}\n// The example displays the following output: \n//       The sentence \n//          This string consists of a single short sentence. \n//       has 8 words.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string s1 = &quot;This string consists of a single short sentence.&quot;;\n      int nWords = 0;\n\n      s1 = s1.Trim();      \n      for (int ctr = 0; ctr &lt; s1.Length; ctr++) {\n         if (Char.IsPunctuation(s1[ctr]) | Char.IsWhiteSpace(s1[ctr]))\n            nWords++;              \n      }\n      Console.WriteLine(&quot;The sentence\\n   {0}\\nhas {1} words.&quot;,\n                        s1, nWords);                                                                     \n   }\n}\n// The example displays the following output:\n//       The sentence\n//          This string consists of a single short sentence.\n//       has 8 words.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#4\">Module Example\n   Public Sub Main()\n      Dim s1 As String = &quot;This string consists of a single short sentence.&quot;\n      Dim nWords As Integer = 0\n\n      s1 = s1.Trim()      \n      For ctr As Integer = 0 To s1.Length - 1\n         If Char.IsPunctuation(s1(ctr)) Or Char.IsWhiteSpace(s1(ctr)) \n            nWords += 1              \n         End If   \n      Next\n      Console.WriteLine(&quot;The sentence{2}   {0}{2}has {1} words.&quot;,\n                        s1, nWords, vbCrLf)                                                                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The sentence\n&#39;          This string consists of a single short sentence.\n&#39;       has 8 words.\n</code></pre><p> Because the String class implements the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface, you can also iterate through the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in a string by using a <code>foreach</code> construct, as the following example shows.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#5\">using namespace System;\n\nvoid main()\n{\n   String^ s1 = &quot;This string consists of a single short sentence.&quot;;\n   int nWords = 0;\n\n   s1 = s1-&gt;Trim();      \n   for each (Char ch in s1)\n   {\n      if (Char::IsPunctuation(ch) | Char::IsWhiteSpace(ch))\n         nWords++;              \n   }\n   Console::WriteLine(&quot;The sentence\\n   {0}\\nhas {1} words.&quot;,\n                      s1, nWords);  \n   Console::ReadLine();\n}\n// The example displays the following output: \n//       The sentence \n//          This string consists of a single short sentence. \n//       has 8 words.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#5\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string s1 = &quot;This string consists of a single short sentence.&quot;;\n      int nWords = 0;\n\n      s1 = s1.Trim();      \n      foreach (var ch in s1) {\n         if (Char.IsPunctuation(ch) | Char.IsWhiteSpace(ch))\n            nWords++;              \n      }\n      Console.WriteLine(&quot;The sentence\\n   {0}\\nhas {1} words.&quot;,\n                        s1, nWords);                                                                     \n   }\n}\n// The example displays the following output:\n//       The sentence\n//          This string consists of a single short sentence.\n//       has 8 words.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#5\">Module Example\n   Public Sub Main()\n      Dim s1 As String = &quot;This string consists of a single short sentence.&quot;\n      Dim nWords As Integer = 0\n\n      s1 = s1.Trim()      \n      For Each ch In s1\n         If Char.IsPunctuation(ch) Or Char.IsWhiteSpace(ch) Then \n            nWords += 1              \n         End If   \n      Next\n      Console.WriteLine(&quot;The sentence{2}   {0}{2}has {1} words.&quot;,\n                        s1, nWords, vbCrLf)                                                                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The sentence\n&#39;          This string consists of a single short sentence.\n&#39;       has 8 words.\n</code></pre><p> Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object. In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs. To work with Unicode characters instead of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects, use the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">System.Globalization.StringInfo</a> and <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> classes. The following example illustrates the difference between code that works with <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects and code that works with Unicode characters. It compares the number of characters or text elements in each word of a sentence. The string includes two sequences of a base character followed by a combining character.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#6\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\n\nvoid main()\n{\n   // First sentence of The Mystery of the Yellow Room, by Leroux. \n   String^ opening = L&quot;Ce n&#39;est pas sans une certaine eÌmotion que &quot;+\n                     L&quot;je commence aÌ€ raconter ici les aventures &quot; +\n                     L&quot;extraordinaires de Joseph Rouletabille.&quot;; \n  \n   // Character counters. \n   int nChars = 0;\n   // Objects to store word count.\n   List&lt;int&gt;^ chars = gcnew List&lt;int&gt;();\n   List&lt;int&gt;^ elements = gcnew List&lt;int&gt;();\n\n   for each (Char ch in opening) {\n      // Skip the &#39; character. \n      if (ch == &#39;\\x0027&#39;) continue;\n\n      if (Char::IsWhiteSpace(ch) | (Char::IsPunctuation(ch))) {\n         chars-&gt;Add(nChars);\n         nChars = 0;\n      }\n      else {\n         nChars++;\n      }\n   }\n\n   TextElementEnumerator^ te = StringInfo::GetTextElementEnumerator(opening);\n   while (te-&gt;MoveNext()) {\n      String^ s = te-&gt;GetTextElement();   \n      // Skip the &#39; character. \n      if (s == &quot;\\x0027&quot;) continue;\n      if ( String::IsNullOrEmpty(s-&gt;Trim()) | (s-&gt;Length == 1 &amp;&amp; Char::IsPunctuation(Convert::ToChar(s)))) {\n         elements-&gt;Add(nChars);         \n         nChars = 0;\n      }\n      else {\n         nChars++;\n      }\n   }\n\n   // Display character counts.\n   Console::WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                      &quot;Word #&quot;, &quot;Char Objects&quot;, &quot;Characters&quot;); \n   for (int ctr = 0; ctr &lt; chars-&gt;Count; ctr++) \n      Console::WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                         ctr, chars[ctr], elements[ctr]); \n   Console::ReadLine();\n}\n// The example displays the following output:\n//      Word #         Char Objects           Characters\n//           0                    2                    2\n//           1                    4                    4\n//           2                    3                    3\n//           3                    4                    4\n//           4                    3                    3\n//           5                    8                    8\n//           6                    8                    7\n//           7                    3                    3\n//           8                    2                    2\n//           9                    8                    8\n//          10                    2                    1\n//          11                    8                    8\n//          12                    3                    3\n//          13                    3                    3\n//          14                    9                    9\n//          15                   15                   15\n//          16                    2                    2\n//          17                    6                    6\n//          18                   12                   12\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#6\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // First sentence of The Mystery of the Yellow Room, by Leroux.\n      string opening = &quot;Ce n&#39;est pas sans une certaine eÌmotion que &quot;+\n                       &quot;je commence aÌ€ raconter ici les aventures &quot; +\n                       &quot;extraordinaires de Joseph Rouletabille.&quot;; \n      // Character counters.\n      int nChars = 0;\n      // Objects to store word count.\n      List&lt;int&gt; chars = new List&lt;int&gt;();\n      List&lt;int&gt; elements = new List&lt;int&gt;();\n      \n      foreach (var ch in opening) {\n         // Skip the &#39; character.\n         if (ch == &#39;\\u0027&#39;) continue;\n              \n         if (Char.IsWhiteSpace(ch) | (Char.IsPunctuation(ch))) {\n            chars.Add(nChars);\n            nChars = 0;\n         }\n         else {\n            nChars++;\n         }\n      }\n\n      TextElementEnumerator te = StringInfo.GetTextElementEnumerator(opening);\n      while (te.MoveNext()) {\n         string s = te.GetTextElement();   \n         // Skip the &#39; character.\n         if (s == &quot;\\u0027&quot;) continue;\n         if ( String.IsNullOrEmpty(s.Trim()) | (s.Length == 1 &amp;&amp; Char.IsPunctuation(Convert.ToChar(s)))) {\n            elements.Add(nChars);         \n            nChars = 0;\n         }\n         else {\n            nChars++;\n         }\n      }\n\n      // Display character counts.\n      Console.WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                        &quot;Word #&quot;, &quot;Char Objects&quot;, &quot;Characters&quot;); \n      for (int ctr = 0; ctr &lt; chars.Count; ctr++) \n         Console.WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                           ctr, chars[ctr], elements[ctr]); \n   }\n}\n// The example displays the following output:\n//       Word #         Char Objects           Characters\n//            0                    2                    2\n//            1                    4                    4\n//            2                    3                    3\n//            3                    4                    4\n//            4                    3                    3\n//            5                    8                    8\n//            6                    8                    7\n//            7                    3                    3\n//            8                    2                    2\n//            9                    8                    8\n//           10                    2                    1\n//           11                    8                    8\n//           12                    3                    3\n//           13                    3                    3\n//           14                    9                    9\n//           15                   15                   15\n//           16                    2                    2\n//           17                    6                    6\n//           18                   12                   12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#6\">Imports System.Collections.Generic\nImports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; First sentence of The Mystery of the Yellow Room, by Leroux.\n      Dim opening As String = &quot;Ce n&#39;est pas sans une certaine eÌmotion que &quot;+\n                              &quot;je commence aÌ€ raconter ici les aventures &quot; +\n                              &quot;extraordinaires de Joseph Rouletabille.&quot; \n      &#39; Character counters.\n      Dim nChars As Integer = 0\n      &#39; Objects to store word count.\n      Dim chars As New List(Of Integer)()\n      Dim elements As New List(Of Integer)()\n      \n      For Each ch In opening\n         &#39; Skip the &#39; character.\n         If ch = ChrW(&amp;h0027) Then Continue For\n              \n         If Char.IsWhiteSpace(ch) Or Char.IsPunctuation(ch) Then\n            chars.Add(nChars)\n            nChars = 0\n         Else \n            nChars += 1\n         End If\n      Next\n\n      Dim te As TextElementEnumerator = StringInfo.GetTextElementEnumerator(opening)\n      Do While te.MoveNext()\n         Dim s As String = te.GetTextElement()   \n         &#39; Skip the &#39; character.\n         If s = ChrW(&amp;h0027) Then Continue Do\n         If String.IsNullOrEmpty(s.Trim()) Or (s.Length = 1 AndAlso Char.IsPunctuation(Convert.ToChar(s))) \n            elements.Add(nChars)         \n            nChars = 0\n         Else \n            nChars += 1\n         End If\n      Loop\n\n      &#39; Display character counts.\n      Console.WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                        &quot;Word #&quot;, &quot;Char Objects&quot;, &quot;Characters&quot;) \n      For ctr As Integer = 0 To chars.Count - 1 \n         Console.WriteLine(&quot;{0,6} {1,20} {2,20}&quot;,\n                           ctr, chars(ctr), elements(ctr)) \n      Next                        \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Word #         Char Objects           Characters\n&#39;         0                    2                    2\n&#39;         1                    4                    4\n&#39;         2                    3                    3\n&#39;         3                    4                    4\n&#39;         4                    3                    3\n&#39;         5                    8                    8\n&#39;         6                    8                    7\n&#39;         7                    3                    3\n&#39;         8                    2                    2\n&#39;         9                    8                    8\n&#39;        10                    2                    1\n&#39;        11                    8                    8\n&#39;        12                    3                    3\n&#39;        13                    3                    3\n&#39;        14                    9                    9\n&#39;        15                   15                   15\n&#39;        16                    2                    2\n&#39;        17                    6                    6\n&#39;        18                   12                   12\n</code></pre><p> This example works with text elements by using the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_GetTextElementEnumerator_\" data-linktype=\"relative-path\">GetTextElementEnumerator</a> method and the <a class=\"xref\" href=\"system.globalization.textelementenumerator\" data-linktype=\"relative-path\">TextElementEnumerator</a> class to enumerate all the text elements in a string. You can also retrieve an array that contains the starting index of each text element by calling the <a class=\"xref\" href=\"system.globalization.stringinfo#System_Globalization_StringInfo_ParseCombiningCharacters_\" data-linktype=\"relative-path\">ParseCombiningCharacters</a> method.  </p>\n<p> For more information about working with units of text rather than individual <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values, see the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class.  </p>\n<p><a name=\"Nulls\"></a>   </p>\n<h2 id=\"null-strings-and-empty-strings\">Null strings and empty strings</h2>\n<p> A string that has been declared but has not been assigned a value is <code>null</code>. Attempting to call methods on that string throws a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a>. A null string is different from an empty string, which is a string whose value is &quot;&quot; or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. In some cases, passing either a null string or an empty string as an argument in a method call throws an exception. For example, passing a null string to the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_\" data-linktype=\"relative-path\">Parse</a> method throws an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a>, and passing an empty string throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>. In other cases, a method argument can be either a null string or an empty string. For example, if you are providing an <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> implementation for a class, you want to equate both a null string and an empty string with the general (&quot;G&quot;) format specifier.  </p>\n<p> The String class includes the following two convenience methods that enable you to test whether a string is <code>null</code> or empty:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a>, which indicates whether a string is either <code>null</code> or is equal to  <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. This method eliminates the need to use code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Null#1\">      If str Is Nothing OrElse str.Equals(String.Empty) Then\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Null#1\">      if (str == null || str.Equals(String.Empty))\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Null#1\">   if (str == nullptr || str-&gt;Equals(String::Empty))\n</code></pre></li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_IsNullOrWhiteSpace_\" data-linktype=\"relative-path\">IsNullOrWhiteSpace</a>, which indicates whether a string is <code>null</code>, equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, or consists exclusively of white-space characters. This method eliminates the need to use code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Null#2\">      If str Is Nothing OrElse str.Equals(String.Empty) OrElse str.Trim().Equals(String.Empty)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Null#2\">      if (str == null || str.Equals(String.Empty) || str.Trim().Equals(String.Empty))\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Null#2\">   if (str == nullptr || str-&gt;Equals(String::Empty) || str-&gt;Trim()-&gt;Equals(String::Empty))\n</code></pre><p>The following example uses the <a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a> method in the <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a> implementation of a custom <code>Temperature</code> class. The method supports the &quot;G&quot;, &quot;C&quot;, &quot;F&quot;, and &quot;K&quot; format strings. If an empty format string or a format string whose value is <code>null</code> is passed to the method, its value is changed to the &quot;G&quot; format string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class.Null#3\">   Public Overloads Function ToString(fmt As String, provider As IFormatProvider) As String _\n                   Implements IFormattable.ToString\n      If String.IsNullOrEmpty(fmt) Then fmt = &quot;G&quot;  \n      If provider Is Nothing Then provider = CultureInfo.CurrentCulture\n      \n      Select Case fmt.ToUpperInvariant()\n         &#39; Return degrees in Celsius.    \n         Case &quot;G&quot;, &quot;C&quot;\n            Return temp.ToString(&quot;F2&quot;, provider) + &quot;&#176;C&quot;\n         &#39; Return degrees in Fahrenheit.\n         Case &quot;F&quot; \n            Return (temp * 9 / 5 + 32).ToString(&quot;F2&quot;, provider) + &quot;&#176;F&quot;\n         &#39; Return degrees in Kelvin.\n         Case &quot;K&quot;   \n            Return (temp + 273.15).ToString()\n         Case Else\n            Throw New FormatException(\n                  String.Format(&quot;The {0} format string is not supported.&quot;, \n                                fmt))\n       End Select                                   \n   End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class.Null#3\">   public string ToString(string format, IFormatProvider provider) \n   {\n      if (String.IsNullOrEmpty(format)) format = &quot;G&quot;;  \n      if (provider == null) provider = CultureInfo.CurrentCulture;\n      \n      switch (format.ToUpperInvariant())\n      {\n         // Return degrees in Celsius.    \n         case &quot;G&quot;:\n         case &quot;C&quot;:\n            return temp.ToString(&quot;F2&quot;, provider) + &quot;&#176;C&quot;;\n         // Return degrees in Fahrenheit.\n         case &quot;F&quot;: \n            return (temp * 9 / 5 + 32).ToString(&quot;F2&quot;, provider) + &quot;&#176;F&quot;;\n         // Return degrees in Kelvin.\n         case &quot;K&quot;:   \n            return (temp + 273.15).ToString();\n         default:\n            throw new FormatException(\n                  String.Format(&quot;The {0} format string is not supported.&quot;, \n                                format));\n      }                                   \n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class.Null#3\">public:\n   virtual String^ ToString(String^ format, IFormatProvider^ provider) \n   {\n      if (String::IsNullOrEmpty(format)) format = &quot;G&quot;;  \n      if (provider == nullptr) provider = CultureInfo::CurrentCulture;\n      \n      switch (Convert::ToUInt16(format-&gt;ToUpperInvariant()))\n      {\n         // Return degrees in Celsius.    \n         case &#39;G&#39;:\n         case &#39;C&#39;:\n            return temp.ToString(&quot;F2&quot;, provider) + L&quot;ï¿½C&quot;;\n         // Return degrees in Fahrenheit.\n         case &#39;F&#39;: \n            return (temp * 9 / 5 + 32).ToString(&quot;F2&quot;, provider) + L&quot;ï¿½F&quot;;\n         // Return degrees in Kelvin.\n         case &#39;K&#39;:   \n            return (temp + 273.15).ToString();\n         default:\n            throw gcnew FormatException(\n                  String::Format(&quot;The {0} format string is not supported.&quot;, \n                                 format));\n      }                                   \n   }\n</code></pre></li>\n</ul>\n<p><a name=\"Immutability\"></a>   </p>\n<h2 id=\"immutability-and-the-stringbuilder-class\">Immutability and the StringBuilder class</h2>\n<p> A String object is called immutable (read-only), because its value cannot be modified after it has been created. Methods that appear to modify a String object actually return a new String object that contains the modification.  </p>\n<p> Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty. For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F. Although the code appears to use string concatenation to append a new character to the existing string named <code>str</code>, it actually creates a new String object for each concatenation operation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Class#15\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      \n      string str = String.Empty;\n      StreamWriter sw = new StreamWriter(@&quot;.\\StringFile.txt&quot;, \n                           false, Encoding.Unicode);\n\n      for (int ctr = 0; ctr &lt;= 1000; ctr++) {\n         str += Convert.ToChar(rnd.Next(1, 0x0530)); \n         if (str.Length % 60 == 0)\n            str += Environment.NewLine;          \n      }                    \n      sw.Write(str);\n      sw.Close();\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class#15\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nvoid main()\n{\n   Random^ rnd = gcnew Random();\n\n   String^ str = String::Empty;\n   StreamWriter^ sw = gcnew StreamWriter(&quot;.\\\\StringFile.txt&quot;, \n                        false, Encoding::Unicode);\n\n   for (int ctr = 0; ctr &lt;= 1000; ctr++) {\n      str += Convert::ToChar(rnd-&gt;Next(1, 0x0530)); \n      if (str-&gt;Length % 60 == 0)\n         str += Environment::NewLine;          \n   }                    \n   sw-&gt;Write(str);\n   sw-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#15\">Imports System.IO\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      \n      Dim str As String = String.Empty\n      Dim sw As New StreamWriter(&quot;.\\StringFile.txt&quot;, \n                           False, Encoding.Unicode)\n\n      For ctr As Integer = 0 To 1000\n         str += ChrW(rnd.Next(1, &amp;h0530)) \n         If str.Length Mod 60 = 0 Then str += vbCrLf          \n      Next                    \n      sw.Write(str)\n      sw.Close()\n   End Sub\nEnd Module\n</code></pre><p> You can use the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class instead of the String class for operations that make multiple changes to the value of a string. Unlike instances of the String class, <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string. When you have finished modifying the value of a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, you can call its <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method to convert it to a string. The following example replaces the String used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#16\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nvoid main()\n{\n   Random^ rnd = gcnew Random();\n\n   StringBuilder^ sb = gcnew StringBuilder();\n   StreamWriter^ sw = gcnew StreamWriter(&quot;.\\\\StringFile.txt&quot;, \n                        false, Encoding::Unicode);\n\n   for (int ctr = 0; ctr &lt;= 1000; ctr++) {\n      sb-&gt;Append(Convert::ToChar(rnd-&gt;Next(1, 0x0530))); \n      if (sb-&gt;Length % 60 == 0)\n         sb-&gt;AppendLine();          \n   }                    \n   sw-&gt;Write(sb-&gt;ToString());\n   sw-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#16\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      StringBuilder sb = new StringBuilder();\n      StreamWriter sw = new StreamWriter(@&quot;.\\StringFile.txt&quot;, \n                                         false, Encoding.Unicode);\n\n      for (int ctr = 0; ctr &lt;= 1000; ctr++) {\n         sb.Append(Convert.ToChar(rnd.Next(1, 0x0530))); \n         if (sb.Length % 60 == 0)\n            sb.AppendLine();          \n      }                    \n      sw.Write(sb.ToString());\n      sw.Close();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#16\">Imports System.IO\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      Dim sb As New StringBuilder()\n      Dim sw As New StreamWriter(&quot;.\\StringFile.txt&quot;, \n                                 False, Encoding.Unicode)\n\n      For ctr As Integer = 0 To 1000\n         sb.Append(ChrW(rnd.Next(1, &amp;h0530))) \n         If sb.Length Mod 60 = 0 Then sb.AppendLine()          \n      Next                    \n      sw.Write(sb.ToString())\n      sw.Close()\n   End Sub\nEnd Module\n</code></pre><p><a name=\"CultureSensitive\"></a>   </p>\n<h2 id=\"ordinal-vs-culture-sensitive-operations\">Ordinal vs. culture-sensitive operations</h2>\n<p> Members of the String class perform either ordinal or culture-sensitive (linguistic) operations on a String object. An ordinal operation acts on the numeric value of each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object. A culture-sensitive operation acts on the value of the Stringobject, and takes culture-specific casing, sorting, formatting, and parsing rules into account. Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture. The two kinds of operations can produce very different results when they are performed on the same string.  </p>\n<p> The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>), which is loosely based on the culture settings of the English language independent of region. Unlike other <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">System.Globalization.CultureInfo</a> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework. The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison. This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Most methods that perform string operations include an overload that has a parameter of type <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation. In general, you should call this overload to make the intent of your method call clear. For best practices and guidance for using ordinal and culture-sensitive operations on strings, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> Operations for <a href=\"#casing\" data-linktype=\"self-bookmark\">casing</a>, <a href=\"#parsing\" data-linktype=\"self-bookmark\">parsing and formatting</a>, <a href=\"#comparison\" data-linktype=\"self-bookmark\">comparison and sorting</a>, and <a href=\"#equality\" data-linktype=\"self-bookmark\">testing for equality</a> can be either ordinal or culture-sensitive. The following sections discuss each category of operation.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> You should always call a method overload that makes the intent of your method call clear. For example, instead of calling the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_\" data-linktype=\"relative-path\">Compare(String,String)</a> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method with a value of <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> for the <code>comparisonType</code> argument. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p><a name=\"casing\"></a>   </p>\n<h3 id=\"casing\">Casing</h3>\n<p> Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase. Often, a casing operation is performed before a string comparison. For example, a string might be converted to uppercase so that it can be compared with another uppercase string. You can convert the characters in a string to lowercase by calling the <a class=\"xref\" href=\"system.string#System_String_ToLower_\" data-linktype=\"relative-path\">ToLower</a> or <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> method, and you can convert them to uppercase by calling the <a class=\"xref\" href=\"system.string#System_String_ToUpper_\" data-linktype=\"relative-path\">ToUpper</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> method. In addition, you can use the <a class=\"xref\" href=\"system.globalization.textinfo#System_Globalization_TextInfo_ToTitleCase_\" data-linktype=\"relative-path\">ToTitleCase</a> method to convert a string to title case.  </p>\n<p> Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture. Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture. The actual differences in casing are of three kinds:  </p>\n<ul>\n<li><p>Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131). In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE. In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.  </p>\n<p> The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison. (The casing conventions of the invariant culture should have been used.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Class#17\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   const string disallowed = &quot;file&quot;;\n   \n   public static void Main()\n   {\n      IsAccessAllowed(@&quot;FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt&quot;);\n   }\n\n   private static void IsAccessAllowed(String resource)\n   {\n      CultureInfo[] cultures = { CultureInfo.CreateSpecificCulture(&quot;en-US&quot;),\n                                 CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;) };\n      String scheme = null;\n      int index = resource.IndexOfAny( new Char[] { &#39;\\\\&#39;, &#39;/&#39; } );\n      if (index &gt; 0) \n         scheme = resource.Substring(0, index - 1);\n\n      // Change the current culture and perform the comparison.\n      foreach (var culture in cultures) {\n         Thread.CurrentThread.CurrentCulture = culture;\n         Console.WriteLine(&quot;Culture: {0}&quot;, CultureInfo.CurrentCulture.DisplayName);\n         Console.WriteLine(resource);\n         Console.WriteLine(&quot;Access allowed: {0}&quot;, \n                           ! String.Equals(disallowed, scheme, StringComparison.CurrentCultureIgnoreCase));      \n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output:\n//       Culture: English (United States)\n//       FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt\n//       Access allowed: False\n//       \n//       Culture: Turkish (Turkey)\n//       FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt\n//       Access allowed: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#17\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Const disallowed = &quot;file&quot;\n   \n   Public Sub Main()\n      IsAccessAllowed(&quot;FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt&quot;)\n   End Sub\n\n   Private Sub IsAccessAllowed(resource As String)\n      Dim cultures() As CultureInfo = { CultureInfo.CreateSpecificCulture(&quot;en-US&quot;),\n                                        CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;) }\n      Dim scheme As String = Nothing\n      Dim index As Integer = resource.IndexOfAny( {&quot;\\&quot;c, &quot;/&quot;c })\n      If index &gt; 0 Then scheme = resource.Substring(0, index - 1)\n\n      &#39; Change the current culture and perform the comparison.\n      For Each culture In cultures\n         Thread.CurrentThread.CurrentCulture = culture\n         Console.WriteLine(&quot;Culture: {0}&quot;, CultureInfo.CurrentCulture.DisplayName)\n         Console.WriteLine(resource)\n         Console.WriteLine(&quot;Access allowed: {0}&quot;, \n                           Not String.Equals(disallowed, scheme, StringComparison.CurrentCultureIgnoreCase))      \n         Console.WriteLine()\n      Next   \n   End Sub      \nEnd Module\n&#39; The example displays the following output:\n&#39;       Culture: English (United States)\n&#39;       FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt\n&#39;       Access allowed: False\n&#39;       \n&#39;       Culture: Turkish (Turkey)\n&#39;       FILE:\\\\\\c:\\users\\user001\\documents\\FinancialInfo.txt\n&#39;       Access allowed: True\n</code></pre></li>\n<li><p>Differences in case mappings between the invariant culture and all other cultures. In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character. For all other cultures, it returns a different character. Some of the affected characters are listed in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>If changed to</th>\n<th>Returns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MICRON SIGN (U+00B5)</td>\n<td>Uppercase</td>\n<td>GREEK CAPITAL LETTER MU (U+-39C)</td>\n</tr>\n<tr>\n<td>LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</td>\n<td>Lowercase</td>\n<td>LATIN SMALL LETTER I (U+0069)</td>\n</tr>\n<tr>\n<td>LATIN SMALL LETTER DOTLESS I (U+0131)</td>\n<td>Uppercase</td>\n<td>LATIN CAPITAL LETTER I (U+0049)</td>\n</tr>\n<tr>\n<td>LATIN SMALL LETTER LONG S (U+017F)</td>\n<td>Uppercase</td>\n<td>LATIN CAPITAL LETTER S (U+0053)</td>\n</tr>\n<tr>\n<td>LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)</td>\n<td>Lowercase</td>\n<td>LATIN SMALL LETTER DZ WITH CARON (U+01C6)</td>\n</tr>\n<tr>\n<td>COMBINING GREEK YPOGEGRAMMENI (U+0345)</td>\n<td>Uppercase</td>\n<td>GREEK CAPITAL LETTER IOTA (U+0399)</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Differences in case mappings of two-letter mixed-case pairs in the ASCII character range. In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair. This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:  </p>\n<ul>\n<li><p>&quot;lJ&quot; and &quot;nJ&quot; in the hr-HR (Croatian (Croatia)) culture.  </p>\n</li>\n<li><p>&quot;cH&quot; in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.  </p>\n</li>\n<li><p>&quot;aA&quot; in the da-DK (Danish (Denmark)) culture.  </p>\n</li>\n<li><p>&quot;cS&quot;, &quot;dZ&quot;, &quot;dZS&quot;, &quot;nY&quot;, &quot;sZ&quot;, &quot;tY&quot;, and &quot;zS&quot; in the hu-HU (Hungarian (Hungary)) culture.  </p>\n</li>\n<li><p>&quot;cH&quot; and &quot;lL&quot; in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.  </p>\n</li>\n<li><p>&quot;cH&quot;, &quot;gI&quot;, &quot;kH&quot;, &quot;nG&quot; &quot;nH&quot;, &quot;pH&quot;, &quot;qU&#39;, &quot;tH&quot;, and &quot;tR&quot; in the vi-VN (Vietnamese (Vietnam)) culture.  </p>\n<p>However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.  </p>\n</li>\n</ul>\n<p>The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#7\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::IO;\n\nString^ ShowHexValue(String^ s);\n\nvoid main()\n{\n   StreamWriter^ sw = gcnew StreamWriter(&quot;.\\\\case.txt&quot;);   \n   array&lt;String^&gt;^ words = gcnew array&lt;String^&gt; { L&quot;file&quot;, L&quot;sÄ±fÄ±r&quot;, L&quot;Ç…enana&quot; };\n   array&lt;CultureInfo^&gt;^ cultures = gcnew array&lt;CultureInfo^&gt; { CultureInfo::InvariantCulture, \n                                                               gcnew CultureInfo(&quot;en-US&quot;),  \n                                                               gcnew CultureInfo(&quot;tr-TR&quot;) };\n\n   for each (String^ word in words) {\n      sw-&gt;WriteLine(&quot;{0}:&quot;, word);\n      for each (CultureInfo^ culture in cultures) {\n         String^ name = String::IsNullOrEmpty(culture-&gt;Name) ? \n                              &quot;Invariant&quot; : culture-&gt;Name;\n         String^ upperWord = word-&gt;ToUpper(culture);\n         sw-&gt;WriteLine(&quot;   {0,10}: {1,7} {2, 38}&quot;, name, \n                        upperWord, ShowHexValue(upperWord));\n\n      }\n      sw-&gt;WriteLine();  \n   }\n   sw-&gt;Close();\n}\n\nString^ ShowHexValue(String^ s)\n{\n   String^ retval = nullptr;\n   for each (Char ch in s) {\n      array&lt;Byte&gt;^ bytes = BitConverter::GetBytes(ch);\n      retval += String::Format(&quot;{0:X2} {1:X2} &quot;, bytes[1], bytes[0]);     \n   }\n   return retval;\n} \n// The example displays the following output: \n//    file: \n//        Invariant:    FILE               00 46 00 49 00 4C 00 45  \n//            en-US:    FILE               00 46 00 49 00 4C 00 45  \n//            tr-TR:    FÄ°LE               00 46 01 30 00 4C 00 45  \n//     \n//    sÄ±fÄ±r: \n//        Invariant:   SÄ±FÄ±R         00 53 01 31 00 46 01 31 00 52  \n//            en-US:   SIFIR         00 53 00 49 00 46 00 49 00 52  \n//            tr-TR:   SIFIR         00 53 00 49 00 46 00 49 00 52  \n//     \n//    Ç…enana: \n//        Invariant:  Ç…ENANA   01 C5 00 45 00 4E 00 41 00 4E 00 41  \n//            en-US:  Ç„ENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41  \n//            tr-TR:  Ç„ENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41 \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#7\">using System;\nusing System.Globalization;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(@&quot;.\\case.txt&quot;);   \n      string[] words = { &quot;file&quot;, &quot;sÄ±fÄ±r&quot;, &quot;Ç…enana&quot; };\n      CultureInfo[] cultures = { CultureInfo.InvariantCulture, \n                                 new CultureInfo(&quot;en-US&quot;),  \n                                 new CultureInfo(&quot;tr-TR&quot;) };\n\n      foreach (var word in words) {\n         sw.WriteLine(&quot;{0}:&quot;, word);\n         foreach (var culture in cultures) {\n            string name = String.IsNullOrEmpty(culture.Name) ? \n                                 &quot;Invariant&quot; : culture.Name;\n            string upperWord = word.ToUpper(culture);\n            sw.WriteLine(&quot;   {0,10}: {1,7} {2, 38}&quot;, name, \n                         upperWord, ShowHexValue(upperWord));\n     \n         }\n         sw.WriteLine();  \n      }\n      sw.Close();\n   }\n\n   private static string ShowHexValue(string s)\n   {\n      string retval = null;\n      foreach (var ch in s) {\n         byte[] bytes = BitConverter.GetBytes(ch);\n         retval += String.Format(&quot;{0:X2} {1:X2} &quot;, bytes[1], bytes[0]);     \n      }\n      return retval;\n   } \n}\n// The example displays the following output:\n//    file:\n//        Invariant:    FILE               00 46 00 49 00 4C 00 45 \n//            en-US:    FILE               00 46 00 49 00 4C 00 45 \n//            tr-TR:    FÄ°LE               00 46 01 30 00 4C 00 45 \n//    \n//    sÄ±fÄ±r:\n//        Invariant:   SÄ±FÄ±R         00 53 01 31 00 46 01 31 00 52 \n//            en-US:   SIFIR         00 53 00 49 00 46 00 49 00 52 \n//            tr-TR:   SIFIR         00 53 00 49 00 46 00 49 00 52 \n//    \n//    Ç…enana:\n//        Invariant:  Ç…ENANA   01 C5 00 45 00 4E 00 41 00 4E 00 41 \n//            en-US:  Ç„ENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41 \n//            tr-TR:  Ç„ENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41 \n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#7\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;.\\case.txt&quot;)   \n      Dim words As String() = { &quot;file&quot;, &quot;sÄ±fÄ±r&quot;, &quot;Ç…enana&quot; }\n      Dim cultures() As CultureInfo = { CultureInfo.InvariantCulture, \n                                        New CultureInfo(&quot;en-US&quot;),  \n                                        New CultureInfo(&quot;tr-TR&quot;) }\n\n      For Each word In words\n         sw.WriteLine(&quot;{0}:&quot;, word)\n         For Each culture In cultures\n            Dim name As String = If(String.IsNullOrEmpty(culture.Name),  \n                                 &quot;Invariant&quot;, culture.Name)\n            Dim upperWord As String = word.ToUpper(culture)\n            sw.WriteLine(&quot;   {0,10}: {1,7} {2, 38}&quot;, name, \n                         upperWord, ShowHexValue(upperWord))\n     \n         Next\n         sw.WriteLine()  \n      Next\n      sw.Close()\n   End Sub\n\n   Private Function ShowHexValue(s As String) As String\n      Dim retval As String = Nothing\n      For Each ch In s\n         Dim bytes() As Byte = BitConverter.GetBytes(ch)\n         retval += String.Format(&quot;{0:X2} {1:X2} &quot;, bytes(1), bytes(0))     \n      Next\n      Return retval\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    file:\n&#39;        Invariant:    FILE               00 46 00 49 00 4C 00 45 \n&#39;            en-US:    FILE               00 46 00 49 00 4C 00 45 \n&#39;            tr-TR:    FÄ°LE               00 46 01 30 00 4C 00 45 \n&#39;    \n&#39;    sÄ±fÄ±r:\n&#39;        Invariant:   SÄ±FÄ±R         00 53 01 31 00 46 01 31 00 52 \n&#39;            en-US:   SIFIR         00 53 00 49 00 46 00 49 00 52 \n&#39;            tr-TR:   SIFIR         00 53 00 49 00 46 00 49 00 52 \n&#39;    \n&#39;    Ç…enana:\n&#39;        Invariant:  Ç…ENANA   01 C5 00 45 00 4E 00 41 00 4E 00 41 \n&#39;            en-US:  Ç„ENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41 \n&#39;            tr-TR:  Ç„ENANA   01 C4 00 45 00 4E 00 41 00 4E 00 41  \n</code></pre></li>\n</ul>\n<p><a name=\"parsing\"></a>   </p>\n<h3 id=\"parsing-and-formatting\">Parsing and formatting</h3>\n<p> Formatting and parsing are inverse operations. Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time. Both formatting and parsing rules are dependent on cultural conventions. The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string. Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#8\">using namespace System;\nusing namespace System::Globalization;\n\nvoid main()\n{\n   DateTime^ date = gcnew DateTime(2011, 3, 1);\n   array&lt;CultureInfo^&gt;^ cultures = gcnew array&lt;CultureInfo^&gt; { CultureInfo::InvariantCulture, \n                                                               gcnew CultureInfo(&quot;en-US&quot;), \n                                                               gcnew CultureInfo(&quot;fr-FR&quot;) };\n\n   for each (CultureInfo^ culture in cultures)\n      Console::WriteLine(&quot;{0,-12} {1}&quot;, String::IsNullOrEmpty(culture-&gt;Name) ?\n                        &quot;Invariant&quot; : culture-&gt;Name, \n                        date-&gt;ToString(&quot;d&quot;, culture));                                    \n}\n// The example displays the following output: \n//       Invariant    03/01/2011 \n//       en-US        3/1/2011 \n//       fr-FR        01/03/2011\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#8\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date = new DateTime(2011, 3, 1);\n      CultureInfo[] cultures = { CultureInfo.InvariantCulture, \n                                 new CultureInfo(&quot;en-US&quot;), \n                                 new CultureInfo(&quot;fr-FR&quot;) };\n\n      foreach (var culture in cultures)\n         Console.WriteLine(&quot;{0,-12} {1}&quot;, String.IsNullOrEmpty(culture.Name) ?\n                           &quot;Invariant&quot; : culture.Name, \n                           date.ToString(&quot;d&quot;, culture));                                    \n   }\n}\n// The example displays the following output:\n//       Invariant    03/01/2011\n//       en-US        3/1/2011\n//       fr-FR        01/03/2011\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#8\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dat As Date = #3/1/2011#\n      Dim cultures() As CultureInfo = { CultureInfo.InvariantCulture, \n                                        New CultureInfo(&quot;en-US&quot;), \n                                        New CultureInfo(&quot;fr-FR&quot;) }\n\n      For Each culture In cultures\n         Console.WriteLine(&quot;{0,-12} {1}&quot;, If(String.IsNullOrEmpty(culture.Name), \n                           &quot;Invariant&quot;, culture.Name), \n                           dat.ToString(&quot;d&quot;, culture))\n      Next                                                         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Invariant    03/01/2011\n&#39;       en-US        3/1/2011\n&#39;       fr-FR        01/03/2011\n</code></pre><p> Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class#9\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateString As String = &quot;07/10/2011&quot;\n      Dim cultures() As CultureInfo = { CultureInfo.InvariantCulture, \n                                        CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;), \n                                        CultureInfo.CreateSpecificCulture(&quot;en-US&quot;) }\n      Console.WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}&quot;, &quot;Date String&quot;, &quot;Culture&quot;, \n                                                 &quot;Month&quot;, &quot;Day&quot;)\n      Console.WriteLine()                                                 \n      For Each culture In cultures\n         Dim dat As Date = DateTime.Parse(dateString, culture)\n         Console.WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}&quot;, dateString, \n                           If(String.IsNullOrEmpty(culture.Name), \n                           &quot;Invariant&quot;, culture.Name), \n                           dat.Month, dat.Day)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Date String     Culture    Month      Day\n&#39;       \n&#39;       07/10/2011    Invariant        7       10\n&#39;       07/10/2011        en-GB       10        7\n&#39;       07/10/2011        en-US        7       10\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class#9\">using namespace System;\nusing namespace System::Globalization;\n\nvoid main()\n{\n   String^ dateString = &quot;07/10/2011&quot;;\n   array&lt;CultureInfo^&gt;^ cultures = gcnew array&lt;CultureInfo^&gt; { CultureInfo::InvariantCulture, \n                                                               CultureInfo::CreateSpecificCulture(&quot;en-GB&quot;), \n                                                               CultureInfo::CreateSpecificCulture(&quot;en-US&quot;) };\n   Console::WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}\\n&quot;, &quot;Date String&quot;, &quot;Culture&quot;, \n                                                &quot;Month&quot;, &quot;Day&quot;);\n   for each (CultureInfo^ culture in cultures) {\n      DateTime date = DateTime::Parse(dateString, culture);\n      Console::WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}&quot;, dateString, \n                        String::IsNullOrEmpty(culture-&gt;Name) ?\n                        &quot;Invariant&quot; : culture-&gt;Name, \n                        date.Month, date.Day);\n   }                      \n}\n// The example displays the following output: \n//       Date String     Culture    Month      Day \n//        \n//       07/10/2011    Invariant        7       10 \n//       07/10/2011        en-GB       10        7 \n//       07/10/2011        en-US        7       10\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#9\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string dateString = &quot;07/10/2011&quot;;\n      CultureInfo[] cultures = { CultureInfo.InvariantCulture, \n                                 CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;), \n                                 CultureInfo.CreateSpecificCulture(&quot;en-US&quot;) };\n      Console.WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}\\n&quot;, &quot;Date String&quot;, &quot;Culture&quot;, \n                                                 &quot;Month&quot;, &quot;Day&quot;);\n      foreach (var culture in cultures) {\n         DateTime date = DateTime.Parse(dateString, culture);\n         Console.WriteLine(&quot;{0,-12} {1,10} {2,8} {3,8}&quot;, dateString, \n                           String.IsNullOrEmpty(culture.Name) ?\n                           &quot;Invariant&quot; : culture.Name, \n                           date.Month, date.Day);\n      }                      \n   }\n}\n// The example displays the following output:\n//       Date String     Culture    Month      Day\n//       \n//       07/10/2011    Invariant        7       10\n//       07/10/2011        en-GB       10        7\n//       07/10/2011        en-US        7       10\n</code></pre><p><a name=\"comparison\"></a>   </p>\n<h3 id=\"string-comparison-and-sorting\">String comparison and sorting</h3>\n<p> Conventions for comparing and sorting strings vary from culture to culture. For example, the sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an &quot;Ã†&quot; character that it sorts after &quot;Z&quot; in the alphabet. In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture. Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.  </p>\n<p> Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other. For example, the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">System.String.Compare(String,String,StringComparison)</a> method compares two strings based on the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter. If the parameter value is <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, the method performs an ordinal comparison. Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">System.String.Compare(String,String,StringComparison)</a> method (using culture-sensitive comparison) considers &quot;a&quot; less than &quot;A&quot;, but the second call to the same method (using ordinal comparison) considers &quot;a&quot; greater than &quot;A&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#10\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nvoid main()\n{\n   Thread::CurrentThread-&gt;CurrentCulture = CultureInfo::CreateSpecificCulture(&quot;en-US&quot;);\n   Console::WriteLine(String::Compare(&quot;A&quot;, &quot;a&quot;, StringComparison::CurrentCulture));\n   Console::WriteLine(String::Compare(&quot;A&quot;, &quot;a&quot;, StringComparison::Ordinal));\n}\n// The example displays the following output: \n//       1 \n//       -32\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#10\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Console.WriteLine(String.Compare(&quot;A&quot;, &quot;a&quot;, StringComparison.CurrentCulture))\n      Console.WriteLine(String.Compare(&quot;A&quot;, &quot;a&quot;, StringComparison.Ordinal))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1                                                                                     \n&#39;       -32\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#10\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      Console.WriteLine(String.Compare(&quot;A&quot;, &quot;a&quot;, StringComparison.CurrentCulture));\n      Console.WriteLine(String.Compare(&quot;A&quot;, &quot;a&quot;, StringComparison.Ordinal));\n   }\n}\n// The example displays the following output:\n//       1\n//       -32\n</code></pre><p> The .NET Framework supports word, string, and ordinal sort rules:  </p>\n<ul>\n<li><p>A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them. For example, the hyphen (-) might have a very small weight assigned to it so that &quot;coop&quot; and &quot;co-op&quot; appear next to each other in a sorted list. For a list of the Stringmethods that compare two strings using word sort rules, see the <a href=\"#ByCategory\" data-linktype=\"self-bookmark\">String operations by category</a> section.  </p>\n</li>\n<li><p>A string sort also performs a culture-sensitive comparison. It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters. Two strings can be compared using string sort rules by calling the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method overloads that have an <code>options</code> parameter that is supplied a value of <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>. Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.  </p>\n</li>\n<li><p>An ordinal sort compares strings based on the numeric value of each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object in the string. An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points. However, if case is not important, you can specify an ordinal comparison that ignores case. This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result. For a list of the String methods that compare two strings using ordinal sort rules, see the <a href=\"#ByCategory\" data-linktype=\"self-bookmark\">String operations by category</a> section.  </p>\n<p>A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object, including the invariant culture that is specified by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property. The implicit culture is the current culture, which is specified by the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> properties. There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <a class=\"xref\" href=\"system.char#System_Char_IsLetter_\" data-linktype=\"relative-path\">IsLetter</a> property returns <code>true</code>) across cultures. You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object to a string comparison method such as <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_Globalization_CultureInfo_System_Globalization_CompareOptions_\" data-linktype=\"relative-path\">Compare(String,String,CultureInfo,CompareOptions)</a>. You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, or any member of the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> enumeration other than <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> or <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> to an appropriate overload of the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method. A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not. An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.  </p>\n<p>The following example illustrates the difference between culture-sensitive and ordinal comparison. The example evaluates three strings, &quot;Apple&quot;, &quot;Ã†ble&quot;, and &quot;AEble&quot;, using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method is called). Because the Danish language treats the character &quot;Ã†&quot; as an individual letter and sorts it after &quot;Z&quot; in the alphabet, the string &quot;Ã†ble&quot; is greater than &quot;Apple&quot;. However, &quot;Ã†ble&quot; is not considered equivalent to &quot;AEble&quot;, so &quot;Ã†ble&quot; is also greater than &quot;AEble&quot;. The en-US culture doesn&#39;t include the letter&quot;Ã†&quot; but treats it as equivalent to &quot;AE&quot;, which explains why  &quot;Ã†ble&quot; is less than &quot;Apple&quot; but equal to &quot;AEble&quot;. Ordinal comparison, on the other hand, considers &quot;Apple&quot; to be less than &quot;Ã†ble&quot;, and &quot;Ã†ble&quot; to be greater than &quot;AEble&quot;.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class#21\">Imports System.Globalization\nImports System.Threading\n\nPublic Module Example\n   Public Sub Main()\n      Dim str1 As String = &quot;Apple&quot;\n      Dim str2 As String = &quot;&#198;ble&quot;\n      Dim str3 As String = &quot;AEble&quot;\n      \n      &#39; Set the current culture to Danish in Denmark.\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;da-DK&quot;)\n      Console.WriteLine(&quot;Current culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, String.Compare(str1, str2))\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str2, str3, String.Compare(str2, str3))\n      Console.WriteLine()\n      \n      &#39; Set the current culture to English in the U.S.\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n      Console.WriteLine(&quot;Current culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, String.Compare(str1, str2))\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str2, str3, String.Compare(str2, str3))\n      Console.WriteLine()\n      \n      &#39; Perform an ordinal comparison.\n      Console.WriteLine(&quot;Ordinal comparison&quot;)\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, \n                        String.Compare(str1, str2, StringComparison.Ordinal))\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str2, str3, \n                        String.Compare(str2, str3, StringComparison.Ordinal))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Current culture: da-DK\n&#39;       Comparison of Apple with &#198;ble: -1\n&#39;       Comparison of &#198;ble with AEble: 1\n&#39;       \n&#39;       Current culture: en-US\n&#39;       Comparison of Apple with &#198;ble: 1\n&#39;       Comparison of &#198;ble with AEble: 0\n&#39;       \n&#39;       Ordinal comparison\n&#39;       Comparison of Apple with &#198;ble: -133\n&#39;       Comparison of &#198;ble with AEble: 133\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#21\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class CompareStringSample\n{\n   public static void Main()\n   {\n      string str1 = &quot;Apple&quot;;\n      string str2 = &quot;&#198;ble&quot;; \n      string str3 = &quot;AEble&quot;;\n      \n      // Set the current culture to Danish in Denmark.\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;da-DK&quot;);\n      Console.WriteLine(&quot;Current culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, String.Compare(str1, str2));\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}\\n&quot;, \n                        str2, str3, String.Compare(str2, str3));\n      \n      // Set the current culture to English in the U.S.\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n      Console.WriteLine(&quot;Current culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, String.Compare(str1, str2));\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}\\n&quot;, \n                        str2, str3, String.Compare(str2, str3));\n      \n      // Perform an ordinal comparison.\n      Console.WriteLine(&quot;Ordinal comparison&quot;);\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str1, str2, \n                        String.Compare(str1, str2, StringComparison.Ordinal));\n      Console.WriteLine(&quot;Comparison of {0} with {1}: {2}&quot;, \n                        str2, str3, \n                        String.Compare(str2, str3, StringComparison.Ordinal));\n   }\n}\n// The example displays the following output:\n//       Current culture: da-DK\n//       Comparison of Apple with &#198;ble: -1\n//       Comparison of &#198;ble with AEble: 1\n//       \n//       Current culture: en-US\n//       Comparison of Apple with &#198;ble: 1\n//       Comparison of &#198;ble with AEble: 0\n//       \n//       Ordinal comparison\n//       Comparison of Apple with &#198;ble: -133\n//       Comparison of &#198;ble with AEble: 133\n</code></pre><p>Use the following general guidelines to choose an appropriate sorting or string comparison method:  </p>\n</li>\n<li><p>If you want the strings to be ordered based on the user&#39;s culture, you should order them based on the conventions of the current culture. If the user&#39;s culture changes, the order of sorted strings will also change accordingly. For example, a thesaurus application should always sort words based on the user&#39;s culture.  </p>\n</li>\n<li><p>If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents that culture to a comparison method. For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.  </p>\n</li>\n<li><p>If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison. For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.  </p>\n</li>\n<li><p>For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework. In the .NET Framework 4.5 running on the Windows 8 operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard. On other operating systems, it conforms to the Unicode 5.0 standard.  </p>\n</div>\n<p> For more information about word, string, and ordinal sort rules, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> topic. For additional recommendations on when to use each rule, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n<p> Ordinarily, you do not call string comparison methods such as <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> directly to determine the sort order of strings. Instead, comparison methods are called by sorting methods such as <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> or <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_\" data-linktype=\"relative-path\">Sort</a>. The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use. Note that each type of sort produces a unique ordering of strings in its array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#12\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Generic;\nusing namespace System::Globalization;\n\n// IComparer&lt;String&gt; implementation to perform string sort. \nref class SCompare : System::Collections::Generic::IComparer&lt;String^&gt;\n{\npublic:\n   SCompare() {};\n\n   virtual int Compare(String^ x, String^ y)\n   {\n      return CultureInfo::CurrentCulture-&gt;CompareInfo-&gt;Compare(x, y, CompareOptions::StringSort);\n   }\n};\n\nvoid main()\n{\n   array&lt;String^&gt;^ strings = gcnew array&lt;String^&gt; { &quot;coop&quot;, &quot;co-op&quot;, &quot;cooperative&quot;, \n                                                    L&quot;co\\x00ADoperative&quot;, L&quot;cï¿½ur&quot;, &quot;coeur&quot; };\n\n   // Perform a word sort using the current (en-US) culture. \n   array&lt;String^&gt;^ current = gcnew array&lt;String^&gt;(strings-&gt;Length); \n   strings-&gt;CopyTo(current, 0); \n   Array::Sort(current, StringComparer::CurrentCulture);\n\n   // Perform a word sort using the invariant culture. \n   array&lt;String^&gt;^ invariant = gcnew array&lt;String^&gt;(strings-&gt;Length);\n   strings-&gt;CopyTo(invariant, 0); \n   Array::Sort(invariant, StringComparer::InvariantCulture);\n\n   // Perform an ordinal sort. \n   array&lt;String^&gt;^ ordinal = gcnew array&lt;String^&gt;(strings-&gt;Length);\n   strings-&gt;CopyTo(ordinal, 0); \n   Array::Sort(ordinal, StringComparer::Ordinal);\n\n   // Perform a string sort using the current culture. \n   array&lt;String^&gt;^ stringSort = gcnew array&lt;String^&gt;(strings-&gt;Length);\n   strings-&gt;CopyTo(stringSort, 0); \n   Array::Sort(stringSort, gcnew SCompare());\n\n   // Display array values\n   Console::WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}\\n&quot;, \n                     &quot;Original&quot;, &quot;Word Sort&quot;, &quot;Invariant Word&quot;, \n                     &quot;Ordinal Sort&quot;, &quot;String Sort&quot;);\n   for (int ctr = 0; ctr &lt; strings-&gt;Length; ctr++)\n      Console::WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}&quot;, \n                         strings[ctr], current[ctr], invariant[ctr], \n                         ordinal[ctr], stringSort[ctr] );          \n}\n// The example displays the following output: \n//         Original     Word Sort  Invariant Word  Ordinal Sort   String Sort \n//     \n//             coop          cï¿½ur            cï¿½ur         co-op         co-op \n//            co-op         coeur           coeur         coeur          cï¿½ur \n//      cooperative          coop            coop          coop         coeur \n//      coï¿½operative         co-op           co-op   cooperative          coop \n//             cï¿½ur   cooperative     cooperative   coï¿½operative   cooperative \n//            coeur   coï¿½operative     coï¿½operative          cï¿½ur   coï¿½operative\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#12\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\n \npublic class Example\n{\n   public static void Main()\n   {\n      string[] strings = { &quot;coop&quot;, &quot;co-op&quot;, &quot;cooperative&quot;, \n                           &quot;co\\u00ADoperative&quot;, &quot;cÅ“ur&quot;, &quot;coeur&quot; };\n\n      // Perform a word sort using the current (en-US) culture.\n      string[] current = new string[strings.Length]; \n      strings.CopyTo(current, 0); \n      Array.Sort(current, StringComparer.CurrentCulture);\n\n      // Perform a word sort using the invariant culture.\n      string[] invariant = new string[strings.Length];\n      strings.CopyTo(invariant, 0); \n      Array.Sort(invariant, StringComparer.InvariantCulture);\n\n      // Perform an ordinal sort.\n      string[] ordinal = new string[strings.Length];\n      strings.CopyTo(ordinal, 0); \n      Array.Sort(ordinal, StringComparer.Ordinal);\n\n      // Perform a string sort using the current culture.\n      string[] stringSort = new string[strings.Length];\n      strings.CopyTo(stringSort, 0); \n      Array.Sort(stringSort, new SCompare());\n\n      // Display array values\n      Console.WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}\\n&quot;, \n                        &quot;Original&quot;, &quot;Word Sort&quot;, &quot;Invariant Word&quot;, \n                        &quot;Ordinal Sort&quot;, &quot;String Sort&quot;);\n      for (int ctr = 0; ctr &lt; strings.Length; ctr++)\n         Console.WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}&quot;, \n                           strings[ctr], current[ctr], invariant[ctr], \n                           ordinal[ctr], stringSort[ctr] );          \n   }\n}\n\n// IComparer&lt;String&gt; implementation to perform string sort.\ninternal class SCompare : IComparer&lt;String&gt;\n{\n   public int Compare(string x, string y)\n   {\n      return CultureInfo.CurrentCulture.CompareInfo.Compare(x, y, CompareOptions.StringSort);\n   }\n}\n// The example displays the following output:\n//         Original     Word Sort  Invariant Word  Ordinal Sort   String Sort\n//    \n//             coop          cÅ“ur            cÅ“ur         co-op         co-op\n//            co-op         coeur           coeur         coeur          cÅ“ur\n//      cooperative          coop            coop          coop         coeur\n//     co&#173;operative         co-op           co-op   cooperative          coop\n//             cÅ“ur   cooperative     cooperative  co&#173;operative   cooperative\n//            coeur  co&#173;operative    co&#173;operative          cÅ“ur  co&#173;operative\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#12\">Imports System.Collections\nImports System.Collections.Generic\nImports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim strings() As String = { &quot;coop&quot;, &quot;co-op&quot;, &quot;cooperative&quot;, \n                                  &quot;co&quot; + ChrW(&amp;h00AD) + &quot;operative&quot;, \n                                  &quot;cÅ“ur&quot;, &quot;coeur&quot; }\n\n      &#39; Perform a word sort using the current (en-US) culture.\n      Dim current(strings.Length - 1) As String  \n      strings.CopyTo(current, 0) \n      Array.Sort(current, StringComparer.CurrentCulture)\n\n      &#39; Perform a word sort using the invariant culture.\n      Dim invariant(strings.Length - 1) As String\n      strings.CopyTo(invariant, 0) \n      Array.Sort(invariant, StringComparer.InvariantCulture)\n\n      &#39; Perform an ordinal sort.\n      Dim ordinal(strings.Length - 1) As String\n      strings.CopyTo(ordinal, 0) \n      Array.Sort(ordinal, StringComparer.Ordinal)\n\n      &#39; Perform a string sort using the current culture.\n      Dim stringSort(strings.Length - 1) As String\n      strings.CopyTo(stringSort, 0) \n      Array.Sort(stringSort, new SCompare())\n\n      &#39; Display array values\n      Console.WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}&quot;, \n                        &quot;Original&quot;, &quot;Word Sort&quot;, &quot;Invariant Word&quot;, \n                        &quot;Ordinal Sort&quot;, &quot;String Sort&quot;)\n      Console.WriteLine()\n                                                      \n      For ctr As Integer = 0 To strings.Length - 1\n         Console.WriteLine(&quot;{0,13} {1,13} {2,15} {3,13} {4,13}&quot;, \n                           strings(ctr), current(ctr), invariant(ctr), \n                           ordinal(ctr), stringSort(ctr))   \n      Next                                  \n   End Sub\nEnd Module\n\n&#39; IComparer&lt;String&gt; implementation to perform string sort.\nFriend Class SCompare : Implements IComparer(Of String)\n   Public Function Compare(x As String, y As String) As Integer _\n                   Implements IComparer(Of String).Compare\n      Return CultureInfo.CurrentCulture.CompareInfo.Compare(x, y, CompareOptions.StringSort)\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;         Original     Word Sort  Invariant Word  Ordinal Sort   String Sort\n&#39;    \n&#39;             coop          cÅ“ur            cÅ“ur         co-op         co-op\n&#39;            co-op         coeur           coeur         coeur          cÅ“ur\n&#39;      cooperative          coop            coop          coop         coeur\n&#39;     co&#173;operative         co-op           co-op   cooperative          coop\n&#39;             cÅ“ur   cooperative     cooperative  co&#173;operative   cooperative\n&#39;            coeur  co&#173;operative    co&#173;operative          cÅ“ur  co&#173;operative\n</code></pre><div class=\"TIP\"><h5>Tip</h5><p> Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison. Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic. A sort key, represented by the <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> class, provides a repository of these weights for a particular string. If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses. When a sort or comparison operation is required, you use the sort keys instead of the strings. For more information, see the <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> class.  </p>\n</div>\n<p> If you don&#39;t specify a string comparison convention, sorting methods such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> perform a culture-sensitive, case-sensitive sort on strings. The following example illustrates how changing the current culture affects the order of sorted strings in an array. It creates an array of three strings. First, it sets the <code>System.Threading.Thread.CurrentThread.CurrentCulture</code> property to en-US and calls the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> method. The resulting sort order is based on sorting conventions for the English (United States) culture. Next, the example sets the <code>System.Threading.Thread.CurrentThread.CurrentCulture</code> property to da-DK and calls the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method again. Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).  </p>\n<pre><code class=\"lang-cs\" name=\"Conceptual.Strings.Comparing#3\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class ArraySort \n{\n   public static void Main(String[] args) \n   {\n      // Create and initialize a new array to store the strings.\n      string[] stringArray = { &quot;Apple&quot;, &quot;&#198;ble&quot;, &quot;Zebra&quot;};\n\n      // Display the values of the array.\n      Console.WriteLine( &quot;The original string array:&quot;);\n      PrintIndexAndValues(stringArray);\n\n      // Set the CurrentCulture to &quot;en-US&quot;.\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n      // Sort the values of the array.\n      Array.Sort(stringArray);\n\n      // Display the values of the array.\n      Console.WriteLine(&quot;After sorting for the culture \\&quot;en-US\\&quot;:&quot;);\n      PrintIndexAndValues(stringArray); \n\n      // Set the CurrentCulture to &quot;da-DK&quot;.\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;da-DK&quot;);\n      // Sort the values of the Array.\n      Array.Sort(stringArray);\n\n      // Display the values of the array.\n      Console.WriteLine(&quot;After sorting for the culture \\&quot;da-DK\\&quot;:&quot;);\n      PrintIndexAndValues(stringArray); \n   }\n   public static void PrintIndexAndValues(string[] myArray)  \n   {\n      for (int i = myArray.GetLowerBound(0); i &lt;= \n            myArray.GetUpperBound(0); i++ )\n         Console.WriteLine(&quot;[{0}]: {1}&quot;, i, myArray[i]);\n      Console.WriteLine();      \n   }\n}\n// The example displays the following output:\n//       The original string array:\n//       [0]: Apple\n//       [1]: &#198;ble\n//       [2]: Zebra\n//       \n//       After sorting for the &quot;en-US&quot; culture:\n//       [0]: &#198;ble\n//       [1]: Apple\n//       [2]: Zebra\n//       \n//       After sorting for the culture &quot;da-DK&quot;:\n//       [0]: Apple\n//       [1]: Zebra\n//       [2]: &#198;ble\n</code></pre><pre><code class=\"lang-vb\" name=\"Conceptual.Strings.Comparing#3\">Imports System.Globalization\nImports System.IO\nImports System.Threading\n\nPublic Class TextToFile   \n   Public Shared Sub Main()\n      &#39; Creates and initializes a new array to store \n      &#39; these date/time objects.\n      Dim stringArray() As String = { &quot;Apple&quot;, &quot;&#198;ble&quot;, &quot;Zebra&quot;}\n      \n      &#39; Displays the values of the array.\n      Console.WriteLine(&quot;The original string array:&quot;)\n      PrintIndexAndValues(stringArray)\n      \n      &#39; Set the CurrentCulture to &quot;en-US&quot;.\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n      &#39; Sort the values of the Array.\n      Array.Sort(stringArray)\n      \n      &#39; Display the values of the array.\n      Console.WriteLine(&quot;After sorting for the &quot;&quot;en-US&quot;&quot; culture:&quot;)\n      PrintIndexAndValues(stringArray)\n      \n      &#39; Set the CurrentCulture to &quot;da-DK&quot;.\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;da-DK&quot;)\n      &#39; Sort the values of the Array.\n      Array.Sort(stringArray)\n      \n      &#39; Displays the values of the Array.\n      Console.WriteLine(&quot;After sorting for the culture &quot;&quot;da-DK&quot;&quot;:&quot;)\n      PrintIndexAndValues(stringArray)\n   End Sub\n\n   Public Shared Sub PrintIndexAndValues(myArray() As String)\n      For i As Integer = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n         Console.WriteLine(&quot;[{0}]: {1}&quot;, i, myArray(i))\n      Next\n      Console.WriteLine()\n   End Sub \nEnd Class\n&#39; The example displays the following output:\n&#39;       The original string array:\n&#39;       [0]: Apple\n&#39;       [1]: &#198;ble\n&#39;       [2]: Zebra\n&#39;       \n&#39;       After sorting for the &quot;en-US&quot; culture:\n&#39;       [0]: &#198;ble\n&#39;       [1]: Apple\n&#39;       [2]: Zebra\n&#39;       \n&#39;       After sorting for the culture &quot;da-DK&quot;:\n&#39;       [0]: Apple\n&#39;       [1]: Zebra\n&#39;       [2]: &#198;ble\n</code></pre><div class=\"WARNING\"><h5>Warning</h5><p> If your primary purpose in comparing strings is to determine whether they are equal, you should call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method. Typically, you should use <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> to perform an ordinal comparison. The <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method is intended primarily to sort strings.  </p>\n</div>\n<p> String search methods, such as <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a> and <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, also can perform culture-sensitive or ordinal string comparisons. The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. A culture-sensitive search in which the current culture is English (United States) considers the substring &quot;oe&quot; to match the ligature &quot;Å“&quot;. Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and finds a match at the beginning of the string. An ordinal search, on the other hand, does not find a match in either case.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#13\">using namespace System;\n\nvoid FindInString(String^ s, String^ substring, StringComparison options);\n\nvoid main()\n{\n   // Search for &quot;oe&quot; and &quot;ï¿½u&quot; in &quot;ï¿½ufs&quot; and &quot;oeufs&quot;.\n   String^ s1 = L&quot;ï¿½ufs&quot;;\n   String^ s2 = L&quot;oeufs&quot;;\n   FindInString(s1, &quot;oe&quot;, StringComparison::CurrentCulture);\n   FindInString(s1, &quot;oe&quot;, StringComparison::Ordinal);\n   FindInString(s2, &quot;ï¿½u&quot;, StringComparison::CurrentCulture);\n   FindInString(s2, &quot;ï¿½u&quot;, StringComparison::Ordinal);\n   Console::WriteLine();\n\n   String^ s3 = L&quot;co\\x00ADoperative&quot;;\n   FindInString(s3, L&quot;\\x00AD&quot;, StringComparison::CurrentCulture);\n   FindInString(s3, L&quot;\\x00AD&quot;, StringComparison::Ordinal);\n}\n\nvoid FindInString(String^ s, String^ substring, StringComparison options)\n{\n   int result = s-&gt;IndexOf(substring, options);\n   if (result != -1)\n      Console::WriteLine(&quot;&#39;{0}&#39; found in {1} at position {2}&quot;, \n                        substring, s, result);\n   else\n      Console::WriteLine(&quot;&#39;{0}&#39; not found in {1}&quot;, \n                        substring, s);                                                  \n}\n// The example displays the following output:\n//      &#39;oe&#39; found in oufs at position 0\n//      &#39;oe&#39; not found in oufs\n//      &#39;ou&#39; found in oeufs at position 0\n//      &#39;ou&#39; not found in oeufs\n//\n//      &#39;-&#39; found in co-operative at position 0\n//      &#39;-&#39; found in co-operative at position 2\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#13\">Module Example\n   Public Sub Main()\n      &#39; Search for &quot;oe&quot; and &quot;Å“u&quot; in &quot;Å“ufs&quot; and &quot;oeufs&quot;.\n      Dim s1 As String = &quot;Å“ufs&quot;\n      Dim s2 As String = &quot;oeufs&quot;\n      FindInString(s1, &quot;oe&quot;, StringComparison.CurrentCulture)\n      FindInString(s1, &quot;oe&quot;, StringComparison.Ordinal)\n      FindInString(s2, &quot;Å“u&quot;, StringComparison.CurrentCulture)\n      FindInString(s2, &quot;Å“u&quot;, StringComparison.Ordinal)\n      Console.WriteLine()\n      \n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      Dim s3 As String = &quot;co&quot; + softHyphen + &quot;operative&quot;\n      FindInString(s3, softHyphen, StringComparison.CurrentCulture)\n      FindInString(s3, softHyphen, StringComparison.Ordinal)\n   End Sub\n\n   Private Sub FindInString(s As String, substring As String, \n                            options As StringComparison)\n      Dim result As Integer = s.IndexOf(substring, options)\n      If result &lt;&gt; -1\n         Console.WriteLine(&quot;&#39;{0}&#39; found in {1} at position {2}&quot;, \n                           substring, s, result)\n      Else\n         Console.WriteLine(&quot;&#39;{0}&#39; not found in {1}&quot;, \n                           substring, s)\n      End If                                                                          \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;oe&#39; found in Å“ufs at position 0\n&#39;       &#39;oe&#39; not found in Å“ufs\n&#39;       &#39;Å“u&#39; found in oeufs at position 0\n&#39;       &#39;Å“u&#39; not found in oeufs\n&#39;       \n&#39;       &#39;&#173;&#39; found in co&#173;operative at position 0\n&#39;       &#39;&#173;&#39; found in co&#173;operative at position 2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#13\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Search for &quot;oe&quot; and &quot;Å“u&quot; in &quot;Å“ufs&quot; and &quot;oeufs&quot;.\n      string s1 = &quot;Å“ufs&quot;;\n      string s2 = &quot;oeufs&quot;;\n      FindInString(s1, &quot;oe&quot;, StringComparison.CurrentCulture);\n      FindInString(s1, &quot;oe&quot;, StringComparison.Ordinal);\n      FindInString(s2, &quot;Å“u&quot;, StringComparison.CurrentCulture);\n      FindInString(s2, &quot;Å“u&quot;, StringComparison.Ordinal);\n      Console.WriteLine();\n      \n      string s3 = &quot;co\\u00ADoperative&quot;;\n      FindInString(s3, &quot;\\u00AD&quot;, StringComparison.CurrentCulture);\n      FindInString(s3, &quot;\\u00AD&quot;, StringComparison.Ordinal);\n   }\n\n   private static void FindInString(string s, string substring, StringComparison options)\n   {\n      int result = s.IndexOf(substring, options);\n      if (result != -1)\n         Console.WriteLine(&quot;&#39;{0}&#39; found in {1} at position {2}&quot;, \n                           substring, s, result);\n      else\n         Console.WriteLine(&quot;&#39;{0}&#39; not found in {1}&quot;, \n                           substring, s);                                                  \n   }\n}\n// The example displays the following output:\n//       &#39;oe&#39; found in Å“ufs at position 0\n//       &#39;oe&#39; not found in Å“ufs\n//       &#39;Å“u&#39; found in oeufs at position 0\n//       &#39;Å“u&#39; not found in oeufs\n//       \n//       &#39;&#173;&#39; found in co&#173;operative at position 0\n//       &#39;&#173;&#39; found in co&#173;operative at position 2\n</code></pre><h3 id=\"searching-strings\">Searching Strings</h3>\n<p> String search methods, such as <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a> and <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.  </p>\n<p> The search methods in the String class that search for an individual character, such as the<a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, or one of a set of characters,   such as the <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, all perform an ordinal search. To perform a culture-sensitive search for a character, you must call a <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> method such as <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.IndexOf(String,Char)</a> or <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_System_String_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.LastIndexOf(String,Char)</a>. Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different. For example, a search for a precomposed Unicode character such as the ligature &quot;Ã†&quot; (U+00C6) might match any occurrence of its components in the correct sequence, such as &quot;AE&quot; (U+041U+0045), depending on the culture. The following example illustrates the difference between the <a class=\"xref\" href=\"system.string#System_String_IndexOf_System_Char_\" data-linktype=\"relative-path\">System.String.IndexOf(Char)</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_System_String_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.IndexOf(String,Char)</a> methods when searching for an individual character. The ligature &quot;Ã¦&quot; (U+00E6) is found in the string &quot;aerial&quot; when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Class#22\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] cultureNames = { &quot;da-DK&quot;, &quot;en-US&quot; };\n      CompareInfo ci;\n      String str = &quot;aerial&quot;;\n      Char ch = &#39;&#230;&#39;;  // U+00E6\n      \n      Console.Write(&quot;Ordinal comparison -- &quot;);\n      Console.WriteLine(&quot;Position of &#39;{0}&#39; in {1}: {2}&quot;, ch, str,\n                        str.IndexOf(ch));\n      \n      foreach (var cultureName in cultureNames) {\n         ci = CultureInfo.CreateSpecificCulture(cultureName).CompareInfo;\n         Console.Write(&quot;{0} cultural comparison -- &quot;, cultureName);\n         Console.WriteLine(&quot;Position of &#39;{0}&#39; in {1}: {2}&quot;, ch, str,\n                           ci.IndexOf(str, ch));\n      }\n   }\n}\n// The example displays the following output:\n//       Ordinal comparison -- Position of &#39;&#230;&#39; in aerial: -1\n//       da-DK cultural comparison -- Position of &#39;&#230;&#39; in aerial: -1\n//       en-US cultural comparison -- Position of &#39;&#230;&#39; in aerial: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#22\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cultureNames() As String = { &quot;da-DK&quot;, &quot;en-US&quot; }\n      Dim ci As CompareInfo\n      Dim str As String = &quot;aerial&quot;\n      Dim ch As Char = &quot;&#230;&quot;c  &#39; U+00E6\n      \n      Console.Write(&quot;Ordinal comparison -- &quot;)\n      Console.WriteLine(&quot;Position of &#39;{0}&#39; in {1}: {2}&quot;, ch, str,\n                        str.IndexOf(ch))\n      \n      For Each cultureName In cultureNames\n         ci = CultureInfo.CreateSpecificCulture(cultureName).CompareInfo\n         Console.Write(&quot;{0} cultural comparison -- &quot;, cultureName)\n         Console.WriteLine(&quot;Position of &#39;{0}&#39; in {1}: {2}&quot;, ch, str,\n                           ci.IndexOf(str, ch))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Ordinal comparison -- Position of &#39;&#230;&#39; in aerial: -1\n&#39;       da-DK cultural comparison -- Position of &#39;&#230;&#39; in aerial: -1\n&#39;       en-US cultural comparison -- Position of &#39;&#230;&#39; in aerial: 0\n</code></pre><p> On the other hand, String class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a>. The sole exception is <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, which performs an ordinal search.  </p>\n<p><a name=\"equality\"></a>   </p>\n<h3 id=\"testing-for-equality\">Testing for equality</h3>\n<p> Use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine the relationship of two strings in the sort order. Typically, this is a culture-sensitive operation. In contrast, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method to test for equality. Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> It is possible to test for equality by calling the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method and determining whether the return value is zero. However, this practice is not recommended. To determine whether two strings are equal, you should call one of the overloads of the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method. The preferred overload to call is either the instance <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Equals(String,StringComparison)</a> method or the static <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Equals(String,String,StringComparison)</a> method, because both methods include a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> parameter that explicitly specifies the type of comparison.  </p>\n</div>\n<p> The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead. In this case, the intent of the code is to prohibit file system access from URLs that begin with &quot;FILE://&quot; or &quot;file://&quot; by performing a case-insensitive comparison of the beginning of a URL with the string &quot;FILE://&quot;. However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with &quot;file://&quot;, the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase &quot;i&quot; is &quot;Ä°&quot; instead of &quot;I&quot;. As a result, file system access is inadvertently permitted. On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#11\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nbool TestForEquality(String^ str, StringComparison cmp);\n\nvoid main()\n{\n   Thread::CurrentThread-&gt;CurrentCulture = CultureInfo::CreateSpecificCulture(&quot;tr-TR&quot;);      \n\n   String^ filePath = &quot;file://c:/notes.txt&quot;;\n\n   Console::WriteLine(&quot;Culture-sensitive test for equality:&quot;);\n   if (! TestForEquality(filePath, StringComparison::CurrentCultureIgnoreCase))\n      Console::WriteLine(&quot;Access to {0} is allowed.&quot;, filePath);\n   else\n      Console::WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath);\n\n   Console::WriteLine(&quot;\\nOrdinal test for equality:&quot;);\n   if (! TestForEquality(filePath, StringComparison::OrdinalIgnoreCase))\n      Console::WriteLine(&quot;Access to {0} is allowed.&quot;, filePath);\n   else\n      Console::WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath);\n}\n\nbool TestForEquality(String^ str, StringComparison cmp)\n{\n      int position = str-&gt;IndexOf(&quot;://&quot;);\n      if (position &lt; 0) return false;\n\n      String^ substring = str-&gt;Substring(0, position);  \n      return substring-&gt;Equals(&quot;FILE&quot;, cmp);\n}\n// The example displays the following output: \n//       Culture-sensitive test for equality: \n//       Access to file://c:/notes.txt is allowed. \n//        \n//       Ordinal test for equality: \n//       Access to file://c:/notes.txt is not allowed.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#11\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;);      \n\n      string filePath = &quot;file://c:/notes.txt&quot;;\n      \n      Console.WriteLine(&quot;Culture-sensitive test for equality:&quot;);\n      if (! TestForEquality(filePath, StringComparison.CurrentCultureIgnoreCase))\n         Console.WriteLine(&quot;Access to {0} is allowed.&quot;, filePath);\n      else\n         Console.WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath);\n      \n      Console.WriteLine(&quot;\\nOrdinal test for equality:&quot;);\n      if (! TestForEquality(filePath, StringComparison.OrdinalIgnoreCase))\n         Console.WriteLine(&quot;Access to {0} is allowed.&quot;, filePath);\n      else\n         Console.WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath);\n   }\n\n   private static bool TestForEquality(string str, StringComparison cmp)\n   {\n      int position = str.IndexOf(&quot;://&quot;);\n      if (position &lt; 0) return false;\n\n      string substring = str.Substring(0, position);  \n      return substring.Equals(&quot;FILE&quot;, cmp);\n   }\n}\n// The example displays the following output:\n//       Culture-sensitive test for equality:\n//       Access to file://c:/notes.txt is allowed.\n//       \n//       Ordinal test for equality:\n//       Access to file://c:/notes.txt is not allowed.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#11\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;)      \n\n      Dim filePath As String = &quot;file://c:/notes.txt&quot;\n      \n      Console.WriteLine(&quot;Culture-sensitive test for equality:&quot;)\n      If Not TestForEquality(filePath, StringComparison.CurrentCultureIgnoreCase) Then\n         Console.WriteLine(&quot;Access to {0} is allowed.&quot;, filePath)\n      Else\n         Console.WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath)\n      End If       \n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Ordinal test for equality:&quot;)\n      If Not TestForEquality(filePath, StringComparison.OrdinalIgnoreCase) Then\n         Console.WriteLine(&quot;Access to {0} is allowed.&quot;, filePath)\n      Else\n         Console.WriteLine(&quot;Access to {0} is not allowed.&quot;, filePath)\n      End If       \n   End Sub\n   \n   Private Function TestForEquality(str As String, cmp As StringComparison) As Boolean\n      Dim position As Integer = str.IndexOf(&quot;://&quot;)\n      If position &lt; 0 Then Return False\n\n      Dim substring As String = str.Substring(0, position)  \n      Return substring.Equals(&quot;FILE&quot;, cmp)\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Culture-sensitive test for equality:\n&#39;       Access to file://c:/notes.txt is allowed.\n&#39;       \n&#39;       Ordinal test for equality:\n&#39;       Access to file://c:/notes.txt is not allowed.\n</code></pre><p><a name=\"Normalization\"></a>   </p>\n<h2 id=\"normalization\">Normalization</h2>\n<p> Some Unicode characters have multiple representations. For example, any of the following code points can represent the letter &quot;áº¯&quot;:  </p>\n<ul>\n<li><p>U+1EAF  </p>\n</li>\n<li><p>U+0103 U+0301  </p>\n</li>\n<li><p>U+0061 U+0306 U+0301  </p>\n<p>Multiple representations for a single character complicate searching, sorting, matching, and other string operations.  </p>\n<p>The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations. Normalization can use several algorithms, called normalization forms, that follow different rules. The .NET Framework supports Unicode normalization forms C, D, KC, and KD. When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.  </p>\n<p>An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in each string. TheString class includes a number of methods that can perform an ordinal comparison, including the following:  </p>\n</li>\n<li><p>Any overload of the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a>, <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a>, <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a>,  <a class=\"xref\" href=\"system.string#System_String_EndsWith_\" data-linktype=\"relative-path\">EndsWith</a>, <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>,and <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> methods that includes a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter. The method performs an ordinal comparison if you supply a value of <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> for this parameter.  </p>\n</li>\n<li><p>The overloads of the <a class=\"xref\" href=\"system.string#System_String_CompareOrdinal_\" data-linktype=\"relative-path\">CompareOrdinal</a> method.  </p>\n</li>\n<li><p>Methods that use ordinal comparison by default, such as <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.string#System_String_Replace_\" data-linktype=\"relative-path\">Replace</a>, and <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a>.  </p>\n</li>\n<li><p>Methods that search for a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>value or for the elements in a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> arrayin a string instance. Such methods include <a class=\"xref\" href=\"system.string#System_String_IndexOf_System_Char_\" data-linktype=\"relative-path\">IndexOf(Char)</a> and [Split(Char&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt;.  </p>\n<p>You can determine whether a string is normalized to normalization form C by calling the <a class=\"xref\" href=\"system.string#System_String_IsNormalized\" data-linktype=\"relative-path\">System.String.IsNormalized()</a> method, or you can call the <a class=\"xref\" href=\"system.string#System_String_IsNormalized_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">System.String.IsNormalized(NormalizationForm)</a> method to determine whether a string is normalized to a specified normalization form. You can also call the <a class=\"xref\" href=\"system.string#System_String_Normalize\" data-linktype=\"relative-path\">System.String.Normalize()</a> method to convert a string to normalization form C, or you can call the <a class=\"xref\" href=\"system.string#System_String_Normalize_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">System.String.Normalize(NormalizationForm)</a> method to convert a string to a specified normalization form. For step-by-step information about normalizing and comparing strings, see the <a class=\"xref\" href=\"system.string#System_String_Normalize\" data-linktype=\"relative-path\">Normalize()</a> and <a class=\"xref\" href=\"system.string#System_String_Normalize_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">Normalize(NormalizationForm)</a> methods.  </p>\n<p>The following simple example illustrates string normalization. It defines the letter &quot;á»‘&quot; in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings. It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form. In each case, the second test for equality shows that the strings are equal.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Class#14\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::IO;\nusing namespace System::Text;\n\npublic ref class Example\n{\nprivate:\n   StreamWriter^ sw;\n\n   void TestForEquality(... array&lt;String^&gt;^  words)\n   {\n      for (int ctr = 0; ctr &lt;= words-&gt;Length - 2; ctr++)\n         for (int ctr2 = ctr + 1; ctr2 &lt;= words-&gt;Length - 1; ctr2++) \n            sw-&gt;WriteLine(&quot;{0} ({1}) = {2} ({3}): {4}&quot;, \n                         words[ctr], ShowBytes(words[ctr]),\n                         words[ctr2], ShowBytes(words[ctr2]),\n                         words[ctr]-&gt;Equals(words[ctr2], StringComparison::Ordinal));\n   }\n\n   String^ ShowBytes(String^ str)\n   {\n      String^ result = nullptr;\n      for each (Char ch in str)\n         result += String::Format(&quot;{0} &quot;, Convert::ToUInt16(ch).ToString(&quot;X4&quot;)); \n      return result-&gt;Trim();            \n   } \n\n   array&lt;String^&gt;^ NormalizeStrings(NormalizationForm nf, ... array&lt;String^&gt;^ words)\n   {\n      for (int ctr = 0; ctr &lt; words-&gt;Length; ctr++)\n         if (! words[ctr]-&gt;IsNormalized(nf))\n            words[ctr] = words[ctr]-&gt;Normalize(nf); \n      return words;   \n   }\n\npublic: \n   void Execute()\n   {\n      sw = gcnew StreamWriter(&quot;.\\\\TestNorm1.txt&quot;);\n\n      // Define three versions of the same word.  \n      String^ s1 = L&quot;sá»‘ng&quot;;        // create word with U+1ED1 \n      String^ s2 = L&quot;s\\x00F4\\x0301ng&quot;;\n      String^ s3 = L&quot;so\\x0302\\x0301ng&quot;;\n\n      TestForEquality(s1, s2, s3);      \n      sw-&gt;WriteLine();\n\n      // Normalize and compare strings using each normalization form. \n      for each (String^ formName in Enum::GetNames(NormalizationForm::typeid))\n      {\n         sw-&gt;WriteLine(&quot;Normalization {0}:\\n&quot;, formName); \n         NormalizationForm nf = (NormalizationForm) Enum::Parse(NormalizationForm::typeid, formName);\n         array&lt;String^&gt;^ sn = NormalizeStrings(nf, s1, s2, s3 );\n         TestForEquality(sn);           \n         sw-&gt;WriteLine(&quot;\\n&quot;);                                        \n      }\n\n      sw-&gt;Close(); \n   }\n};\n\nvoid main()\n{\n   Example^ ex = gcnew Example();\n   ex-&gt;Execute();\n}\n// The example produces the following output:\n// The example displays the following output: \n//       sá»‘ng (0073 1ED1 006E 0067) = s&#244;Ìng (0073 00F4 0301 006E 0067): False \n//       sá»‘ng (0073 1ED1 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): False \n//       s&#244;Ìng (0073 00F4 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): False \n//        \n//       Normalization FormC: \n//        \n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True \n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True \n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True \n//        \n//        \n//       Normalization FormD: \n//        \n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True \n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True \n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True \n//        \n//        \n//       Normalization FormKC: \n//        \n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True \n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True \n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True \n//        \n//        \n//       Normalization FormKD: \n//        \n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True \n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True \n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#14\">using System;\nusing System.Globalization;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   private static StreamWriter sw;\n   \n   public static void Main()\n   {\n      sw = new StreamWriter(@&quot;.\\TestNorm1.txt&quot;);\n\n      // Define three versions of the same word. \n      string s1 = &quot;sá»‘ng&quot;;        // create word with U+1ED1\n      string s2 = &quot;s\\u00F4\\u0301ng&quot;;\n      string s3 = &quot;so\\u0302\\u0301ng&quot;;\n\n      TestForEquality(s1, s2, s3);      \n      sw.WriteLine();\n\n      // Normalize and compare strings using each normalization form.\n      foreach (string formName in Enum.GetNames(typeof(NormalizationForm)))\n      {\n         sw.WriteLine(&quot;Normalization {0}:\\n&quot;, formName); \n         NormalizationForm nf = (NormalizationForm) Enum.Parse(typeof(NormalizationForm), formName);\n         string[] sn = NormalizeStrings(nf, s1, s2, s3);\n         TestForEquality(sn);           \n         sw.WriteLine(&quot;\\n&quot;);                                        \n      }\n      \n      sw.Close();   \n   }\n\n   private static void TestForEquality(params string[] words)\n   {\n      for (int ctr = 0; ctr &lt;= words.Length - 2; ctr++)\n         for (int ctr2 = ctr + 1; ctr2 &lt;= words.Length - 1; ctr2++) \n            sw.WriteLine(&quot;{0} ({1}) = {2} ({3}): {4}&quot;, \n                         words[ctr], ShowBytes(words[ctr]),\n                         words[ctr2], ShowBytes(words[ctr2]),\n                         words[ctr].Equals(words[ctr2], StringComparison.Ordinal));\n   }\n\n   private static string ShowBytes(string str)\n   {\n      string result = null;\n      foreach (var ch in str)\n         result += String.Format(&quot;{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;)); \n      return result.Trim();            \n   } \n   \n   private static string[] NormalizeStrings(NormalizationForm nf, params string[] words)\n   {\n      for (int ctr = 0; ctr &lt; words.Length; ctr++)\n         if (! words[ctr].IsNormalized(nf))\n            words[ctr] = words[ctr].Normalize(nf); \n      return words;   \n   }\n}\n// The example displays the following output:\n//       sá»‘ng (0073 1ED1 006E 0067) = s&#244;Ìng (0073 00F4 0301 006E 0067): False\n//       sá»‘ng (0073 1ED1 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): False\n//       s&#244;Ìng (0073 00F4 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): False\n//       \n//       Normalization FormC:\n//       \n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n//       \n//       \n//       Normalization FormD:\n//       \n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n//       \n//       \n//       Normalization FormKC:\n//       \n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n//       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n//       \n//       \n//       Normalization FormKD:\n//       \n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n//       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Class#14\">Imports System.Globalization\nImports System.IO\nImports System.Text\n\nModule Example\n   Private sw As StreamWriter\n       \n   Public Sub Main()\n      sw = New StreamWriter(&quot;.\\TestNorm1.txt&quot;)\n\n      &#39; Define three versions of the same word. \n      Dim s1 As String = &quot;sá»‘ng&quot;        &#39; create word with U+1ED1\n      Dim s2 AS String = &quot;s&quot; + ChrW(&amp;h00F4) + ChrW(&amp;h0301) + &quot;ng&quot;\n      Dim s3 As String = &quot;so&quot; + ChrW(&amp;h0302) + ChrW(&amp;h0301) + &quot;ng&quot;\n\n      TestForEquality(s1, s2, s3)      \n      sw.WriteLine()\n\n      &#39; Normalize and compare strings using each normalization form.\n      For Each formName In [Enum].GetNames(GetType(NormalizationForm))\n         sw.WriteLine(&quot;Normalization {0}:&quot;, formName) \n         Dim nf As NormalizationForm = CType([Enum].Parse(GetType(NormalizationForm), formName),  \n                                             NormalizationForm)\n         Dim sn() As String = NormalizeStrings(nf, s1, s2, s3)\n         TestForEquality(sn)           \n         sw.WriteLine(vbCrLf)                                        \n      Next\n      \n      sw.Close()   \n   End Sub\n\n   Private Sub TestForEquality(ParamArray words As String())\n      For ctr As Integer = 0 To words.Length - 2\n         For ctr2 As Integer = ctr + 1 To words.Length - 1 \n            sw.WriteLine(&quot;{0} ({1}) = {2} ({3}): {4}&quot;, \n                         words(ctr), ShowBytes(words(ctr)),\n                         words(ctr2), ShowBytes(words(ctr2)),\n                         words(ctr).Equals(words(ctr2), StringComparison.Ordinal))\n         Next                \n      Next   \n   End Sub\n\n   Private Function ShowBytes(str As String) As String\n      Dim result As String = Nothing\n      For Each ch In str\n         result += String.Format(&quot;{0} &quot;, Convert.ToUInt16(ch).ToString(&quot;X4&quot;)) \n      Next\n      Return result.Trim()            \n   End Function  \n   \n   Private Function NormalizeStrings(nf As NormalizationForm, ParamArray words() As String) As String()\n      For ctr As Integer = 0 To words.Length - 1\n         If Not words(ctr).IsNormalized(nf) Then\n            words(ctr) = words(ctr).Normalize(nf)\n         End If    \n      Next\n      Return words   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       sá»‘ng (0073 1ED1 006E 0067) = s&#244;Ìng (0073 00F4 0301 006E 0067): False\n&#39;       sá»‘ng (0073 1ED1 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): False\n&#39;       s&#244;Ìng (0073 00F4 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): False\n&#39;       \n&#39;       Normalization FormC:\n&#39;       \n&#39;       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n&#39;       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n&#39;       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n&#39;       \n&#39;       \n&#39;       Normalization FormD:\n&#39;       \n&#39;       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n&#39;       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n&#39;       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n&#39;       \n&#39;       \n&#39;       Normalization FormKC:\n&#39;       \n&#39;       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n&#39;       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n&#39;       sá»‘ng (0073 1ED1 006E 0067) = sá»‘ng (0073 1ED1 006E 0067): True\n&#39;       \n&#39;       \n&#39;       Normalization FormKD:\n&#39;       \n&#39;       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n&#39;       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n&#39;       soÌ‚Ìng (0073 006F 0302 0301 006E 0067) = soÌ‚Ìng (0073 006F 0302 0301 006E 0067): True\n</code></pre><p>For more information about normalization and normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>, as well as <a href=\"http://unicode.org/reports/tr15/\" data-linktype=\"external\">Unicode Standard Annex #15: Unicode Normalization Forms</a> and the <a href=\"http://www.unicode.org/faq/normalization.html\" data-linktype=\"external\">Normalization FAQ</a> on the unicode.org website.  </p>\n</li>\n</ul>\n<p><a name=\"ByCategory\"></a>   </p>\n<h2 id=\"string-operations-by-category\">String operations by category</h2>\n<p> The String class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.  </p>\n<h3 id=\"comparing-strings\">Comparing strings</h3>\n<p> You can compare strings to determine their relative position in the sort order by using the following Stringmethods:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> returns an integer that indicates the relationship of one string to a second string in the sort order.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_CompareOrdinal_\" data-linktype=\"relative-path\">CompareOrdinal</a> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> returns an integer that indicates the relationship of the current string instance to a second string in the sort order. The <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method provides the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> and <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementations for the String class.  </p>\n</li>\n</ul>\n<h3 id=\"testing-strings-for-equality\">Testing strings for equality</h3>\n<p> You call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method to determine whether two strings are equal. The instance <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Equals(String,String,StringComparison)</a> and the static <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Equals(String,StringComparison)</a> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored. Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.  </p>\n<h3 id=\"finding-characters-in-a-string\">Finding characters in a string</h3>\n<p> The String class includes two kinds of search methods:  </p>\n<ul>\n<li><p>Methods that return a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value to indicate whether a particular substring is present in a string instance. These include the <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.string#System_String_EndsWith_\" data-linktype=\"relative-path\">EndsWith</a>, and <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a> methods.  </p>\n</li>\n<li><p>Methods that indicate the starting position of a substring in a string instance. These include the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a>, <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, and <a class=\"xref\" href=\"system.string#System_String_LastIndexOfAny_\" data-linktype=\"relative-path\">LastIndexOfAny</a> methods.  </p>\n</li>\n</ul>\n<div class=\"WARNING\"><h5>Warning</h5><p> If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions. For more information, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a>.  </p>\n</div>\n<h3 id=\"modifying-a-string\">Modifying a string</h3>\n<p> The String class includes the following methods that appear to modify the value of a string:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Insert_\" data-linktype=\"relative-path\">Insert</a> inserts a string into the current String instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_PadLeft_\" data-linktype=\"relative-path\">PadLeft</a> inserts one or more occurrences of a specified character at the beginning of a string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_PadRight_\" data-linktype=\"relative-path\">PadRight</a> inserts one or more occurrences of a specified character at the beginning of a string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Remove_\" data-linktype=\"relative-path\">Remove</a> deletes a substring from the current String instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Replace_\" data-linktype=\"relative-path\">Replace</a> replaces a substring with another substring in the current String instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_ToLower_\" data-linktype=\"relative-path\">ToLower</a> and <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> convert all the characters in a string to lowercase.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_ToUpper_\" data-linktype=\"relative-path\">ToUpper</a> and <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> convert all the characters in a string to uppercase.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Trim_\" data-linktype=\"relative-path\">Trim</a> removes all occurrences of a character from the beginning and end of a string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_TrimEnd_\" data-linktype=\"relative-path\">TrimEnd</a> removes all occurrences of a character from the end of a string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> removes all occurrences of a character from the beginning of a string.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> All string modification methods return a new String object. They do not modify the value of the current instance.  </p>\n</div>\n<h3 id=\"extracting-substrings-from-a-string\">Extracting substrings from a string</h3>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method separates a single string into multiple strings. Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.  </p>\n<h3 id=\"combining-strings\">Combining strings</h3>\n<p> The following String methods can be used for string concatenation:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> combines one or more substrings into a single string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Join_\" data-linktype=\"relative-path\">Join</a> concatenates one or more substrings into a single element and adds a separator between each substring.  </p>\n</li>\n</ul>\n<h3 id=\"formatting-values\">Formatting values</h3>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value. The <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> method is often used to do the following:  </p>\n<ul>\n<li><p>To embed the string representation of a numeric value in a string.  </p>\n</li>\n<li><p>To embed the string representation of a date and time value in a string.  </p>\n</li>\n<li><p>To embed the string representation of an enumeration value in a string.  </p>\n</li>\n<li><p>To embed the string representation of some object that supports the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface in a string.  </p>\n</li>\n<li><p>To right-justify or left-justify a substring in a field within a larger string.  </p>\n<p>For detailed information about formatting operations and examples, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.  </p>\n</li>\n</ul>\n<h3 id=\"copying-a-string\">Copying a string</h3>\n<p> You can call the following String methods to make a copy of a string:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Clone_\" data-linktype=\"relative-path\">Clone</a> returns a reference to an existing String object.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Copy_\" data-linktype=\"relative-path\">Copy</a> creates a copy of an existing string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> copies a portion of a string to a character array.  </p>\n</li>\n</ul>\n<h3 id=\"normalizing-a-string\">Normalizing a string</h3>\n<p> In Unicode, a single character can have multiple code points. Normalization converts these equivalent characters into the same binary representation. The <a class=\"xref\" href=\"system.string#System_String_Normalize_\" data-linktype=\"relative-path\">Normalize</a> method performs the normalization, and the <a class=\"xref\" href=\"system.string#System_String_IsNormalized_\" data-linktype=\"relative-path\">IsNormalized</a> method determines whether a string is normalized.  </p>\n<p> For more information and an example, see the <a href=\"#Normalization\" data-linktype=\"self-bookmark\">Normalization</a> section earlier in this topic.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String__ctor_System_Char__\" data-linktype=\"self-bookmark\">String(Char*)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of Unicode characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String__ctor_System_Char___\" data-linktype=\"self-bookmark\">String(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by an array of Unicode characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String__ctor_System_SByte__\" data-linktype=\"self-bookmark\">String(SByte*)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a pointer to an array of 8-bit signed integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String__ctor_System_Char_System_Int32_\" data-linktype=\"self-bookmark\">String(Char,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified Unicode character repeated a specified number of times.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String__ctor_System_Char__System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">String(Char*,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String__ctor_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">String(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String__ctor_System_SByte__System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">String(SByte*,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String__ctor_System_SByte__System_Int32_System_Int32_System_Text_Encoding_\" data-linktype=\"self-bookmark\">String(SByte*,Int32,Int32,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Empty\" data-linktype=\"self-bookmark\">Empty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the empty string. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Chars_System_Int32_\" data-linktype=\"self-bookmark\">Chars(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at a specified position in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of characters in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a reference to this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_String_\" data-linktype=\"self-bookmark\">Compare(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects and returns an integer that indicates their relative position in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">Compare(String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"self-bookmark\">Compare(String,String,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_String_System_Boolean_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">Compare(String,String,Boolean,CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_String_System_Globalization_CultureInfo_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">Compare(String,String,CultureInfo,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Compare(String,Int32,String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects and returns an integer that indicates their relative position in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">Compare(String,Int32,String,Int32,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"self-bookmark\">Compare(String,Int32,String,Int32,Int32,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Boolean_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">Compare(String,Int32,String,Int32,Int32,Boolean,CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Globalization_CultureInfo_System_Globalization_CompareOptions_\" data-linktype=\"self-bookmark\">Compare(String,Int32,String,Int32,Int32,CultureInfo,CompareOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_CompareOrdinal_System_String_System_String_\" data-linktype=\"self-bookmark\">CompareOrdinal(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects by evaluating the numeric values of the corresponding <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in each string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_CompareOrdinal_System_String_System_Int32_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CompareOrdinal(String,Int32,String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects by evaluating the numeric values of the corresponding <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in each substring.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance with a specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_CompareTo_System_String_\" data-linktype=\"self-bookmark\">CompareTo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance with a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"self-bookmark\">Concat(IEnumerable&lt;String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the members of a constructed <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> collection of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_Object_\" data-linktype=\"self-bookmark\">Concat(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the string  representation of a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_Object___\" data-linktype=\"self-bookmark\">Concat(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the string representations of the elements in a specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_String___\" data-linktype=\"self-bookmark\">Concat(String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the elements of a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Concat(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the string representations of two specified objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_String_System_String_\" data-linktype=\"self-bookmark\">Concat(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates two specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Concat(Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the string representations of three specified objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">Concat(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates three specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_Object_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Concat(Object,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat_System_String_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">Concat(String,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates four specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Concat__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Concat&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the members of an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> implementation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Contains_System_String_\" data-linktype=\"self-bookmark\">Contains(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether a specified substring occurs within this string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Copy_System_String_\" data-linktype=\"self-bookmark\">Copy(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> with the same value as a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_CopyTo_System_Int32_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Int32,Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_EndsWith_System_String_\" data-linktype=\"self-bookmark\">EndsWith(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the end of this string instance matches the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_EndsWith_System_String_System_StringComparison_\" data-linktype=\"self-bookmark\">EndsWith(String,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_EndsWith_System_String_System_Boolean_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">EndsWith(String,Boolean,CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the end of this string instance matches the specified string when compared using the specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether this instance and a specified object, which must also be a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object, have the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Equals_System_String_\" data-linktype=\"self-bookmark\">Equals(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether this instance and another specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object have the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Equals_System_String_System_String_\" data-linktype=\"self-bookmark\">Equals(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects have the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Equals_System_String_System_StringComparison_\" data-linktype=\"self-bookmark\">Equals(String,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether this string and a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Equals_System_String_System_String_System_StringComparison_\" data-linktype=\"self-bookmark\">Equals(String,String,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Format_System_String_System_Object_\" data-linktype=\"self-bookmark\">Format(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces one or more format items in a specified string with the string representation of a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Format_System_String_System_Object___\" data-linktype=\"self-bookmark\">Format(String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Format_System_IFormatProvider_System_String_System_Object_\" data-linktype=\"self-bookmark\">Format(IFormatProvider,String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Format_System_IFormatProvider_System_String_System_Object___\" data-linktype=\"self-bookmark\">Format(IFormatProvider,String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Format_System_String_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Format(String,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the format items in a specified string with the string representation of two specified objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Format_System_IFormatProvider_System_String_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Format(IFormatProvider,String,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Format_System_String_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Format(String,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the format items in a specified string with the string representation of three specified objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Format_System_IFormatProvider_System_String_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Format(IFormatProvider,String,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an object that can iterate through the individual characters in this string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_GetTypeCode\" data-linktype=\"self-bookmark\">GetTypeCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for class <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_Char_\" data-linktype=\"self-bookmark\">IndexOf(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_String_\" data-linktype=\"self-bookmark\">IndexOf(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified string in this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_Char_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(Char,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_String_System_StringComparison_\" data-linktype=\"self-bookmark\">IndexOf(String,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. A parameter specifies the type of search to use for the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_Char_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(Char,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_String_System_Int32_System_StringComparison_\" data-linktype=\"self-bookmark\">IndexOf(String,Int32,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOf_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"self-bookmark\">IndexOf(String,Int32,Int32,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOfAny_System_Char___\" data-linktype=\"self-bookmark\">IndexOfAny(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOfAny_System_Char___System_Int32_\" data-linktype=\"self-bookmark\">IndexOfAny(Char[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IndexOfAny_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOfAny(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Insert_System_Int32_System_String_\" data-linktype=\"self-bookmark\">Insert(Int32,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string in which a specified string is inserted at a specified index position in this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Intern_System_String_\" data-linktype=\"self-bookmark\">Intern(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the system&#39;s reference to the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IsInterned_System_String_\" data-linktype=\"self-bookmark\">IsInterned(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a reference to a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IsNormalized\" data-linktype=\"self-bookmark\">IsNormalized()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether this string is in Unicode normalization form C.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IsNormalized_System_Text_NormalizationForm_\" data-linktype=\"self-bookmark\">IsNormalized(NormalizationForm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether this string is in the specified Unicode normalization form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IsNullOrEmpty_System_String_\" data-linktype=\"self-bookmark\">IsNullOrEmpty(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified string is <code>null</code> or an <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_IsNullOrWhiteSpace_System_String_\" data-linktype=\"self-bookmark\">IsNullOrWhiteSpace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified string is <code>null</code>, empty, or consists only of white-space characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Join_System_String_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"self-bookmark\">Join(String,IEnumerable&lt;String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the members of a constructed <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> collection of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, using the specified separator between each member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Join_System_String_System_Object___\" data-linktype=\"self-bookmark\">Join(String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the elements of an object array, using the specified separator between each element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Join_System_String_System_String___\" data-linktype=\"self-bookmark\">Join(String,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates all the elements of a string array, using the specified separator between each element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Join_System_String_System_String___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Join(String,String[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the specified elements of a string array, using the specified separator between each element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Join__1_System_String_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Join&lt;T&gt;(String,IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates the members of a collection, using the specified separator between each member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_Char_\" data-linktype=\"self-bookmark\">LastIndexOf(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_String_\" data-linktype=\"self-bookmark\">LastIndexOf(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence of a specified string within this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_Char_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(Char,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_String_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_String_System_StringComparison_\" data-linktype=\"self-bookmark\">LastIndexOf(String,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the last occurrence of a specified string within the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. A parameter specifies the type of search to use for the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_Char_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(Char,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_String_System_Int32_System_StringComparison_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Int32,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index of the last occurrence of a specified string within the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOf_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"self-bookmark\">LastIndexOf(String,Int32,Int32,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOfAny_System_Char___\" data-linktype=\"self-bookmark\">LastIndexOfAny(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOfAny_System_Char___System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOfAny(Char[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_LastIndexOfAny_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOfAny(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Normalize\" data-linktype=\"self-bookmark\">Normalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Normalize_System_Text_NormalizationForm_\" data-linktype=\"self-bookmark\">Normalize(NormalizationForm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_PadLeft_System_Int32_\" data-linktype=\"self-bookmark\">PadLeft(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_PadLeft_System_Int32_System_Char_\" data-linktype=\"self-bookmark\">PadLeft(Int32,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_PadRight_System_Int32_\" data-linktype=\"self-bookmark\">PadRight(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_PadRight_System_Int32_System_Char_\" data-linktype=\"self-bookmark\">PadRight(Int32,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Remove_System_Int32_\" data-linktype=\"self-bookmark\">Remove(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Remove_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Remove(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Replace_System_Char_System_Char_\" data-linktype=\"self-bookmark\">Replace(Char,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Replace_System_String_System_String_\" data-linktype=\"self-bookmark\">Replace(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Split_System_Char___\" data-linktype=\"self-bookmark\">Split(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Splits a string into substrings that are based on the characters in an array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Split_System_Char___System_Int32_\" data-linktype=\"self-bookmark\">Split(Char[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Split_System_Char___System_StringSplitOptions_\" data-linktype=\"self-bookmark\">Split(Char[],StringSplitOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Split_System_String___System_StringSplitOptions_\" data-linktype=\"self-bookmark\">Split(String[],StringSplitOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Split_System_Char___System_Int32_System_StringSplitOptions_\" data-linktype=\"self-bookmark\">Split(Char[],Int32,StringSplitOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Splits a string into a maximum number of substrings based on the characters in an array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Split_System_String___System_Int32_System_StringSplitOptions_\" data-linktype=\"self-bookmark\">Split(String[],Int32,StringSplitOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_StartsWith_System_String_\" data-linktype=\"self-bookmark\">StartsWith(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the beginning of this string instance matches the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_StartsWith_System_String_System_StringComparison_\" data-linktype=\"self-bookmark\">StartsWith(String,StringComparison)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_StartsWith_System_String_System_Boolean_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">StartsWith(String,Boolean,CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Substring_System_Int32_\" data-linktype=\"self-bookmark\">Substring(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Substring_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Substring(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToCharArray\" data-linktype=\"self-bookmark\">ToCharArray()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the characters in this instance to a Unicode character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToCharArray_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToCharArray(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the characters in a specified substring in this instance to a Unicode character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToLower\" data-linktype=\"self-bookmark\">ToLower()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a copy of this string converted to lowercase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToLower_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">ToLower(CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToLowerInvariant\" data-linktype=\"self-bookmark\">ToLowerInvariant()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a copy of this <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object converted to lowercase using the casing rules of the invariant culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToUpper\" data-linktype=\"self-bookmark\">ToUpper()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a copy of this string converted to uppercase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToUpper_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">ToUpper(CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_ToUpperInvariant\" data-linktype=\"self-bookmark\">ToUpperInvariant()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a copy of this <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object converted to uppercase using the casing rules of the invariant culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Trim\" data-linktype=\"self-bookmark\">Trim()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all leading and trailing white-space characters from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_Trim_System_Char___\" data-linktype=\"self-bookmark\">Trim(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_TrimEnd_System_Char___\" data-linktype=\"self-bookmark\">TrimEnd(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all trailing occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_TrimStart_System_Char___\" data-linktype=\"self-bookmark\">TrimStart(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all leading occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_op_Equality_System_String_System_String_\" data-linktype=\"self-bookmark\">op_Equality(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified strings have the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_op_Inequality_System_String_System_String_\" data-linktype=\"self-bookmark\">op_Inequality(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified strings have different values.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_Collections_Generic_IEnumerable_System_Char__GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable&lt;Char&gt;.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToBoolean_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToBoolean(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToChar_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToChar(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToDateTime_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDateTime(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDateTime*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToDecimal_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDecimal(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToDouble_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDouble(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToSByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToSingle_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSingle(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToType_System_Type_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToType(Type,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToUInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToUInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_String_System_IConvertible_ToUInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_String__ctor_System_Char__\">\r\n    \r\n            <a id=\"System_String__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String(Char*)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of Unicode characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public String (char* value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to a null-terminated array of Unicode characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The current process does not have read access to all the addressed characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> specifies an address less than 64000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code>constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String__ctor_System_Char___\">\r\n    \r\n            <a id=\"System_String__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by an array of Unicode characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public String (char[] value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Unicode characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String__ctor_System_SByte__\">\r\n    \r\n            <a id=\"System_String__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String(SByte*)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a pointer to an array of 8-bit signed integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public String (sbyte* value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to a null-terminated array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <span class=\"xref\">stem.Text.Encoding.Default*</span>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the new string to initialize, which is determined by the null termination character of <code>value</code>, is too large to allocate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> specifies an invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String__ctor_System_Char_System_Int32_\">\r\n    \r\n            <a id=\"System_String__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String(Char,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified Unicode character repeated a specified number of times.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public String (char c, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of times <code>c</code> occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String__ctor_System_Char__System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String(Char*,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public String (char* value, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an array of Unicode characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters within <code>value</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>length</code> is less than zero, <code>value</code> + <code>startIndex</code> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> specifies an array that contains an invalid Unicode character, or <code>value</code> + <code>startIndex</code> specifies an address less than 64000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String__ctor_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public String (char[] value, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Unicode characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters within <code>value</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The sum of <code>startIndex</code> and <code>length</code> is greater than the number of elements in <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String__ctor_System_SByte__System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String(SByte*,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public String (sbyte* value, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <span class=\"xref\">stem.Text.Encoding.Default*</span>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters within <code>value</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed.  </p>\n<p> -or-  </p>\n<p> The length of the new string to initialize is too large to allocate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The address specified by <code>value</code> + <code>startIndex</code> is less than 64K.  </p>\n<p> -or-  </p>\n<p> A new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded in ANSI.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String__ctor_System_SByte__System_Int32_System_Int32_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_String__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">String(SByte*,Int32,Int32,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an array of 8-bit signed integers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters within <code>value</code> to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>enc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that specifies how the array referenced by <code>value</code> is encoded. If <code>enc</code> is <code>null</code>, ANSI encoding is assumed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The address specified by <code>value</code> + <code>startIndex</code> is too large for the current platform; that is, the address calculation overflowed.  </p>\n<p> -or-  </p>\n<p> The length of the new string to initialize is too large to allocate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The address specified by <code>value</code> + <code>startIndex</code> is less than 64K.  </p>\n<p> -or-  </p>\n<p> A new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> could not be initialized using <code>value</code>, assuming <code>value</code> is encoded as specified by <code>enc</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, <code>startIndex</code>, and <code>length</code> collectively specify an invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other <code>String</code> constructor overloads, see the <a class=\"xref\" href=\"system.string#System_String__ctor_\" data-linktype=\"relative-path\">String</a> constructor summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_String_Empty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Empty</div>        \r\n          </div>\r\n    \r\n            <p>Represents the empty string. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly string Empty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this field is the zero-length string, &quot;&quot;.  </p>\n<p> In application code, this field is most commonly used in assignments to initialize a string variable to an empty string. To test whether the value of a string is either <code>null</code> or Empty, use the <a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_String_Chars_System_Int32_\">\r\n    \r\n            <a id=\"System_String_Chars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Chars(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at a specified position in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public char this[int index] { get; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A position in the current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The object at position <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is greater than or equal to the length of this object or less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>index</code> parameter is zero-based.  </p>\n<p> This property returns the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at the position specified by the <code>index</code> parameter. However, a Unicode character might be represented by more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. Use the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">System.Globalization.StringInfo</a> class to work with Unicode characters instead of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects. For more information, see the &quot;Char Objects and Unicode Characters&quot; section in the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class overview.  </p>\n<p> In C#, the Chars property is an indexer. In Visual Basic, it is the default property of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class. Each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object in the string can be accessed by using code such as the following.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Chars#1\">      string str1 = &quot;Test&quot;;\n      for (int ctr = 0; ctr &lt;= str1.Length - 1; ctr++ )\n         Console.Write(&quot;{0} &quot;, str1[ctr]);\n      // The example displays the following output:\n      //      T e s t         \n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Chars#1\">      Dim str1 As String = &quot;Test&quot;\n      For ctr As Integer = 0 to str1.Length - 1\n         Console.Write(&quot;{0} &quot;, str1(ctr))\n      Next   \n      &#39; The example displays the following output:\n      &#39;      T e s t         \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how you can use this indexer in a routine to validate a string.  </p>\n<pre><code class=\"lang-vb\" name=\"Uri_IsHexDigit#1\">         Console.Write(&quot;Type a string : &quot;)\n         Dim myString As String = Console.ReadLine()\n         Dim i As Integer\n         For i = 0 To myString.Length - 1\n            If Uri.IsHexDigit(myString.Chars(i)) Then\n               Console.WriteLine(&quot;{0} is a hexadecimal digit.&quot;, myString.Chars(i))\n            Else\n               Console.WriteLine(&quot;{0} is not a hexadecimal digit.&quot;, myString.Chars(i))\n            End If \n         Next\n         &#39; The example produces output like the following:\n         &#39;    Type a string : 3f5EaZ\n         &#39;    3 is a hexadecimal digit.\n         &#39;    f is a hexadecimal digit.\n         &#39;    5 is a hexadecimal digit.\n         &#39;    E is a hexadecimal digit.\n         &#39;    a is a hexadecimal digit.\n         &#39;    Z is not a hexadecimal digit.         \n</code></pre><pre><code class=\"lang-cpp\" name=\"Uri_IsHexDigit#1\">      Console::Write( &quot;Type a string : &quot; );\n      String^ myString = Console::ReadLine();\n      for ( int i = 0; i &lt; myString-&gt;Length; i++ )\n         if ( Uri::IsHexDigit( myString[ i ] ) )\n                  Console::WriteLine( &quot;{0} is a hexadecimal digit.&quot;, myString[ i ] );\n         else\n                  Console::WriteLine( &quot;{0} is not a hexadecimal digit.&quot;, myString[ i ] );\n      // The example produces output like the following:\n      //    Type a string : 3f5EaZ\n      //    3 is a hexadecimal digit.\n      //    f is a hexadecimal digit.\n      //    5 is a hexadecimal digit.\n      //    E is a hexadecimal digit.\n      //    a is a hexadecimal digit.\n      //    Z is not a hexadecimal digit.      \n</code></pre><pre><code class=\"lang-cs\" name=\"Uri_IsHexDigit#1\">\t\t\tConsole.Write(&quot;Type a string : &quot;);\n\t\t\tstring myString = Console.ReadLine();\n\t\t\tfor (int i = 0; i &lt; myString.Length; i ++)\n               if(Uri.IsHexDigit(myString[i]))\n                  Console.WriteLine(&quot;{0} is a hexadecimal digit.&quot;, myString[i]); \n               else\n                  Console.WriteLine(&quot;{0} is not a hexadecimal digit.&quot;, myString[i]); \n            // The example produces output like the following:\n            //    Type a string : 3f5EaZ\n            //    3 is a hexadecimal digit.\n            //    f is a hexadecimal digit.\n            //    5 is a hexadecimal digit.\n            //    E is a hexadecimal digit.\n            //    a is a hexadecimal digit.\n            //    Z is not a hexadecimal digit.            \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Length\">\r\n    \r\n            <a id=\"System_String_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of characters in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters in the current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Length property returns the number of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in this instance, not the number of Unicode characters. The reason is that a Unicode character might be represented by more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. Use the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">System.Globalization.StringInfo</a> class to work with each Unicode character instead of each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.  </p>\n<p> In some languages, such as C and C++, a null character indicates the end of a string. In the .NET Framework, a null character can be embedded in a string. When a string includes one or more null characters, they are included in the length of the total string. For example, in the following string, the substrings &quot;abc&quot; and &quot;def&quot; are separated by a null character. The Length property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Class#1\">Imports System.Text\n\nModule Example\n\n   Public Sub Main()\n      Dim characters As String = &quot;abc&quot; + ChrW(0) + &quot;def&quot;\n      Console.WriteLine(characters.Length)       &#39; Displays 7\n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Class#1\">using System;\nusing System.Text;\n\npublic class StringClassTest\n{\n   public static void Main()\n   {\n      string characters = &quot;abc\\u0000def&quot;;\n      Console.WriteLine(characters.Length);    // Displays 7\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Class#1\">using namespace System;\nusing namespace System::Text;\n\nvoid main()\n{\n   String^ characters = &quot;abc&quot; + L&#39;0&#39; + &quot;def&quot;;\n   Console::WriteLine(characters-&gt;Length);        // Displays 7\n}\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Length property.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.length#1\">// Sample for String::Length\nusing namespace System;\nint main()\n{\n   String^ str = &quot;abcdefg&quot;;\n   Console::WriteLine( &quot;1) The length of &#39;{0}&#39; is {1}&quot;, str, str-&gt;Length );\n   Console::WriteLine( &quot;2) The length of &#39;{0}&#39; is {1}&quot;, &quot;xyz&quot;, ((String^)&quot;xyz&quot;)-&gt;Length );\n   int length = str-&gt;Length;\n   Console::WriteLine( &quot;1) The length of &#39;{0}&#39; is {1}&quot;, str, length );\n}\n\n/*\nThis example displays the following output:\n   1) The length of &#39;abcdefg&#39; is 7\n   2) The length of &#39;xyz&#39; is 3\n   3) The length of &#39;abcdefg&#39; is 7\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.length#1\">using System;\n\nclass Sample \n{\n    public static void Main() \n    {\n       string str = &quot;abcdefg&quot;;\n       Console.WriteLine(&quot;1) The length of &#39;{0}&#39; is {1}&quot;, str, str.Length);\n       Console.WriteLine(&quot;2) The length of &#39;{0}&#39; is {1}&quot;, &quot;xyz&quot;, &quot;xyz&quot;.Length);\n       \n       int length = str.Length;\n       Console.WriteLine(&quot;3) The length of &#39;{0}&#39; is {1}&quot;, str, length);\n    }\n}\n// This example displays the following output:\n//    1) The length of &#39;abcdefg&#39; is 7\n//    2) The length of &#39;xyz&#39; is 3\n//    3) The length of &#39;abcdefg&#39; is 7\n</code></pre><pre><code class=\"lang-vb\" name=\"string.length#1\">Class Sample\n   Public Shared Sub Main()\n      Dim str As String = &quot;abcdefg&quot;\n      Console.WriteLine(&quot;1) The length of &#39;{0}&#39; is {1}&quot;, str, str.Length)\n      Console.WriteLine(&quot;2) The length of &#39;{0}&#39; is {1}&quot;, &quot;xyz&quot;, &quot;xyz&quot;.Length)\n      Dim length As Integer = str.Length\n      Console.WriteLine(&quot;1) The length of &#39;{0}&#39; is {1}&quot;, str, length)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example displays the following output:\n&#39;    1) The length of &#39;abcdefg&#39; is 7\n&#39;    2) The length of &#39;xyz&#39; is 3\n&#39;    3) The length of &#39;abcdefg&#39; is 7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_String_Clone\">\r\n    \r\n            <a id=\"System_String_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a reference to this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>This instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is not an independent copy of this instance; it is simply another view of the same data. Use the <a class=\"xref\" href=\"system.string#System_String_Copy_\" data-linktype=\"relative-path\">Copy</a> or <a class=\"xref\" href=\"system.string#System_String_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method to create a separate <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object with the same value as this instance.  </p>\n<p> Because the Clone method simply returns the existing string instance, there is little reason to call it directly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects and returns an integer that indicates their relative position in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, string strB);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> When comparing strings, you should call the<a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#10\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#10\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#10\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#11\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#11\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#11\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Compare method to compare three sets of strings.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#18\">using namespace System;\n\nvoid main()\n{\n   // Create upper-case characters from their Unicode code units.\n   String^ stringUpper = &quot;\\x0041\\x0042\\x0043&quot;;\n\n   // Create lower-case characters from their Unicode code units.\n   String^ stringLower = &quot;\\x0061\\x0062\\x0063&quot;;\n\n   // Display the strings.\n   Console::WriteLine(&quot;Comparing &#39;{0}&#39; and &#39;{1}&#39;:&quot;, \n                      stringUpper, stringLower);\n\n   // Compare the uppercased strings; the result is true.\n   Console::WriteLine(&quot;The Strings are equal when capitalized? {0}&quot;,\n                      String::Compare(stringUpper-&gt;ToUpper(), stringLower-&gt;ToUpper()) == 0 \n                                      ? &quot;true&quot; : &quot;false&quot;);\n\n   // The previous method call is equivalent to this Compare method, which ignores case.\n   Console::WriteLine(&quot;The Strings are equal when case is ignored? {0}&quot;,\n                      String::Compare(stringUpper, stringLower, true) == 0\n                                      ? &quot;true&quot; : &quot;false&quot;);\n}\n// The example displays the following output:\n//       Comparing &#39;ABC&#39; and &#39;abc&#39;:\n//       The Strings are equal when capitalized? true\n//       The Strings are equal when case is ignored? true\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#18\">Public Module Example\n   Public Sub Main()\n      &#39; Create upper-case characters from their Unicode code units.\n      Dim stringUpper As String = ChrW(&amp;H41) + ChrW(&amp;H42) + ChrW(&amp;H43)\n\n      &#39; Create lower-case characters from their Unicode code units.\n      Dim stringLower As String = ChrW(&amp;H61) + ChrW(&amp;H62) + ChrW(&amp;H63)\n\n      &#39; Display the strings.\n      Console.WriteLine(&quot;Comparing &#39;{0}&#39; and &#39;{1}&#39;:&quot;, \n                        stringUpper, stringLower)\n\n      &#39; Compare the uppercased strings; the result is true.\n      Console.WriteLine(&quot;The Strings are equal when capitalized? {0}&quot;,\n                        If(String.Compare(stringUpper.ToUpper(), stringLower.ToUpper()) = 0, \n                                          &quot;true&quot;, &quot;false&quot;))\n\n      &#39; The previous method call is equivalent to this Compare method, which ignores case.\n      Console.WriteLine(&quot;The Strings are equal when case is ignored? {0}&quot;,\n                        If(String.Compare(stringUpper, stringLower, true) = 0,\n                                          &quot;true&quot;, &quot;false&quot;))\n   End Sub\nEnd Module \n&#39; The example displays the following output:\n&#39;       Comparing &#39;ABC&#39; and &#39;abc&#39;:\n&#39;       The Strings are equal when capitalized? true\n&#39;       The Strings are equal when case is ignored? true\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#18\">using System;\n\nclass Example\n{\n   static void Main()\n   {\n      // Create upper-case characters from their Unicode code units.\n      String stringUpper = &quot;\\x0041\\x0042\\x0043&quot;;\n\n      // Create lower-case characters from their Unicode code units.\n      String stringLower = &quot;\\x0061\\x0062\\x0063&quot;;\n\n      // Display the strings.\n      Console.WriteLine(&quot;Comparing &#39;{0}&#39; and &#39;{1}&#39;:&quot;, \n                        stringUpper, stringLower);\n\n      // Compare the uppercased strings; the result is true.\n      Console.WriteLine(&quot;The Strings are equal when capitalized? {0}&quot;,\n                        String.Compare(stringUpper.ToUpper(), stringLower.ToUpper()) == 0 \n                                       ? &quot;true&quot; : &quot;false&quot;);\n\n      // The previous method call is equivalent to this Compare method, which ignores case.\n      Console.WriteLine(&quot;The Strings are equal when case is ignored? {0}&quot;,\n                        String.Compare(stringUpper, stringLower, true) == 0\n                                       ? &quot;true&quot; : &quot;false&quot; );\n   }\n} \n// The example displays the following output:\n//       Comparing &#39;ABC&#39; and &#39;abc&#39;:\n//       The Strings are equal when capitalized? true\n//       The Strings are equal when case is ignored? true\n</code></pre><p> In the following example, the <code>ReverseStringComparer</code> class demonstrates how you can evaluate two strings with the Compare method.  </p>\n<pre><code class=\"lang-cs\" name=\"ArrayList#7\">using System;\nusing System.Text;\nusing System.Collections;\n\npublic class SamplesArrayList  {\n\n\tpublic static void Main()  {\n\t\t// Creates and initializes a new ArrayList.\n\t\tArrayList myAL = new ArrayList();\n\t\tmyAL.Add(&quot;Eric&quot;);\n\t\tmyAL.Add(&quot;Mark&quot;);\n\t\tmyAL.Add(&quot;Lance&quot;);\n\t\tmyAL.Add(&quot;Rob&quot;);\n\t\tmyAL.Add(&quot;Kris&quot;);\n\t\tmyAL.Add(&quot;Brad&quot;);\n\t\tmyAL.Add(&quot;Kit&quot;);\n\t\tmyAL.Add(&quot;Bradley&quot;);\n\t\tmyAL.Add(&quot;Keith&quot;);\n\t\tmyAL.Add(&quot;Susan&quot;);\n\t\n\t\t// Displays the properties and values of\tthe\tArrayList.\n\t\tConsole.WriteLine( &quot;Count: {0}&quot;, myAL.Count );\n\t\t\n\t\tPrintValues (&quot;Unsorted&quot;, myAL );\n\t\tmyAL.Sort();\n\t\tPrintValues(&quot;Sorted&quot;, myAL );\n\t\tmyAL.Sort(new ReverseStringComparer() );\n\t\tPrintValues (&quot;Reverse&quot; , myAL );\n\n\n\t\tstring [] names = (string[]) myAL.ToArray (typeof(string));\n\n\n\t}\n\tpublic static void PrintValues(string title, IEnumerable\tmyList )  {\n\t\tConsole.Write (&quot;{0,10}: &quot;, title);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tforeach (string s in myList) {\n\t\t\tsb.AppendFormat( &quot;{0}, &quot;, s);\n\t\t}\n\t\tsb.Remove (sb.Length-2,2);\n\t\tConsole.WriteLine(sb);\n\t}\n}\npublic class ReverseStringComparer : IComparer {\n   public int Compare (object x, object y) {\n\t   string s1 = x as string;\n\t   string s2 = y as string;\t  \n\t   //negate the return value to get the reverse order\n\t   return - String.Compare (s1,s2);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ArrayList#7\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Collections;\n\nref class ReverseStringComparer: public IComparer\n{\npublic:\n   virtual int Compare( Object^ x, Object^ y )\n   {\n      String^ s1 = dynamic_cast&lt;String^&gt;(x);\n      String^ s2 = dynamic_cast&lt;String^&gt;(y);\n\n      //negate the return value to get the reverse order\n      return  -String::Compare( s1, s2 );\n   }\n\n};\n\nvoid PrintValues( String^ title, IEnumerable^ myList )\n{\n   Console::Write( &quot;{0,10}: &quot;, title );\n   StringBuilder^ sb = gcnew StringBuilder;\n   {\n      IEnumerator^ en = myList-&gt;GetEnumerator();\n      String^ s;\n      while ( en-&gt;MoveNext() )\n      {\n         s = en-&gt;Current-&gt;ToString();\n         sb-&gt;AppendFormat(  &quot;{0}, &quot;, s );\n      }\n   }\n   sb-&gt;Remove( sb-&gt;Length - 2, 2 );\n   Console::WriteLine( sb );\n}\n\nvoid main()\n{\n   // Creates and initializes a new ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;Eric&quot; );\n   myAL-&gt;Add( &quot;Mark&quot; );\n   myAL-&gt;Add( &quot;Lance&quot; );\n   myAL-&gt;Add( &quot;Rob&quot; );\n   myAL-&gt;Add( &quot;Kris&quot; );\n   myAL-&gt;Add( &quot;Brad&quot; );\n   myAL-&gt;Add( &quot;Kit&quot; );\n   myAL-&gt;Add( &quot;Bradley&quot; );\n   myAL-&gt;Add( &quot;Keith&quot; );\n   myAL-&gt;Add( &quot;Susan&quot; );\n\n   // Displays the properties and values of the ArrayList.\n   Console::WriteLine( &quot;Count: {0}&quot;, myAL-&gt;Count.ToString() );\n\n   PrintValues( &quot;Unsorted&quot;, myAL );\n\n   myAL-&gt;Sort();\n   PrintValues( &quot;Sorted&quot;, myAL );\n\n   myAL-&gt;Sort( gcnew ReverseStringComparer );\n   PrintValues( &quot;Reverse&quot;, myAL );\n\n   array&lt;String^&gt;^names = dynamic_cast&lt;array&lt;String^&gt;^&gt;(myAL-&gt;ToArray( String::typeid ));\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ArrayList#7\">Imports System\nImports System.Text\nImports System.Collections\n\n\n\nPublic Class SamplesArrayList\n    \n    \n    Public Shared Sub Main()\n        Dim myAL As New ArrayList()\n        &#39; Creates and initializes a new ArrayList.\n        myAL.Add(&quot;Eric&quot;)\n        myAL.Add(&quot;Mark&quot;)\n        myAL.Add(&quot;Lance&quot;)\n        myAL.Add(&quot;Rob&quot;)\n        myAL.Add(&quot;Kris&quot;)\n        myAL.Add(&quot;Brad&quot;)\n        myAL.Add(&quot;Kit&quot;)\n        myAL.Add(&quot;Bradley&quot;)\n        myAL.Add(&quot;Keith&quot;)\n        myAL.Add(&quot;Susan&quot;)\n        \n        &#39; Displays the properties and values of\tthe\tArrayList.\n        Console.WriteLine(&quot;Count: {0}&quot;, myAL.Count)\n        PrintValues(&quot;Unsorted&quot;, myAL)\n        myAL.Sort()\n        PrintValues(&quot;Sorted&quot;, myAL)\n        Dim comp as New ReverseStringComparer\n        myAL.Sort(comp)\n        PrintValues(&quot;Reverse&quot;, myAL)\n\n        Dim names As String() = CType(myAL.ToArray(GetType(String)), String())\n    End Sub &#39;Main\n   \n   \n    \n    Public Shared Sub PrintValues(title As String, myList As IEnumerable)\n        Console.Write(&quot;{0,10}: &quot;, title)\n        Dim sb As New StringBuilder()\n        Dim s As String\n        For Each s In  myList\n            sb.AppendFormat(&quot;{0}, &quot;, s)\n        Next s\n        sb.Remove(sb.Length - 2, 2)\n        Console.WriteLine(sb)\n    End Sub &#39;PrintValues\nEnd Class &#39;SamplesArrayList\n\nPublic Class ReverseStringComparer \n  Implements IComparer\n    \n     Function Compare(x As Object, y As Object) As Integer implements IComparer.Compare\n        Dim s1 As String = CStr (x)\n        Dim s2 As String = CStr (y)\n        \n        &#39;negate the return value to get the reverse order\n        Return - [String].Compare(s1, s2)\n    \n    End Function &#39;Compare\nEnd Class &#39;ReverseStringComparer\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, string strB, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> When comparing strings, you should call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#12\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#12\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#12\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#13\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#13\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#13\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates that the Compare method is equivalent to using <a class=\"xref\" href=\"system.string#System_String_ToUpper_\" data-linktype=\"relative-path\">ToUpper</a> or <a class=\"xref\" href=\"system.string#System_String_ToLower_\" data-linktype=\"relative-path\">ToLower</a> when comparing strings.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#18\">using namespace System;\n\nvoid main()\n{\n   // Create upper-case characters from their Unicode code units.\n   String^ stringUpper = &quot;\\x0041\\x0042\\x0043&quot;;\n\n   // Create lower-case characters from their Unicode code units.\n   String^ stringLower = &quot;\\x0061\\x0062\\x0063&quot;;\n\n   // Display the strings.\n   Console::WriteLine(&quot;Comparing &#39;{0}&#39; and &#39;{1}&#39;:&quot;, \n                      stringUpper, stringLower);\n\n   // Compare the uppercased strings; the result is true.\n   Console::WriteLine(&quot;The Strings are equal when capitalized? {0}&quot;,\n                      String::Compare(stringUpper-&gt;ToUpper(), stringLower-&gt;ToUpper()) == 0 \n                                      ? &quot;true&quot; : &quot;false&quot;);\n\n   // The previous method call is equivalent to this Compare method, which ignores case.\n   Console::WriteLine(&quot;The Strings are equal when case is ignored? {0}&quot;,\n                      String::Compare(stringUpper, stringLower, true) == 0\n                                      ? &quot;true&quot; : &quot;false&quot;);\n}\n// The example displays the following output:\n//       Comparing &#39;ABC&#39; and &#39;abc&#39;:\n//       The Strings are equal when capitalized? true\n//       The Strings are equal when case is ignored? true\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#18\">Public Module Example\n   Public Sub Main()\n      &#39; Create upper-case characters from their Unicode code units.\n      Dim stringUpper As String = ChrW(&amp;H41) + ChrW(&amp;H42) + ChrW(&amp;H43)\n\n      &#39; Create lower-case characters from their Unicode code units.\n      Dim stringLower As String = ChrW(&amp;H61) + ChrW(&amp;H62) + ChrW(&amp;H63)\n\n      &#39; Display the strings.\n      Console.WriteLine(&quot;Comparing &#39;{0}&#39; and &#39;{1}&#39;:&quot;, \n                        stringUpper, stringLower)\n\n      &#39; Compare the uppercased strings; the result is true.\n      Console.WriteLine(&quot;The Strings are equal when capitalized? {0}&quot;,\n                        If(String.Compare(stringUpper.ToUpper(), stringLower.ToUpper()) = 0, \n                                          &quot;true&quot;, &quot;false&quot;))\n\n      &#39; The previous method call is equivalent to this Compare method, which ignores case.\n      Console.WriteLine(&quot;The Strings are equal when case is ignored? {0}&quot;,\n                        If(String.Compare(stringUpper, stringLower, true) = 0,\n                                          &quot;true&quot;, &quot;false&quot;))\n   End Sub\nEnd Module \n&#39; The example displays the following output:\n&#39;       Comparing &#39;ABC&#39; and &#39;abc&#39;:\n&#39;       The Strings are equal when capitalized? true\n&#39;       The Strings are equal when case is ignored? true\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#18\">using System;\n\nclass Example\n{\n   static void Main()\n   {\n      // Create upper-case characters from their Unicode code units.\n      String stringUpper = &quot;\\x0041\\x0042\\x0043&quot;;\n\n      // Create lower-case characters from their Unicode code units.\n      String stringLower = &quot;\\x0061\\x0062\\x0063&quot;;\n\n      // Display the strings.\n      Console.WriteLine(&quot;Comparing &#39;{0}&#39; and &#39;{1}&#39;:&quot;, \n                        stringUpper, stringLower);\n\n      // Compare the uppercased strings; the result is true.\n      Console.WriteLine(&quot;The Strings are equal when capitalized? {0}&quot;,\n                        String.Compare(stringUpper.ToUpper(), stringLower.ToUpper()) == 0 \n                                       ? &quot;true&quot; : &quot;false&quot;);\n\n      // The previous method call is equivalent to this Compare method, which ignores case.\n      Console.WriteLine(&quot;The Strings are equal when case is ignored? {0}&quot;,\n                        String.Compare(stringUpper, stringLower, true) == 0\n                                       ? &quot;true&quot; : &quot;false&quot; );\n   }\n} \n// The example displays the following output:\n//       Comparing &#39;ABC&#39; and &#39;abc&#39;:\n//       The Strings are equal when capitalized? true\n//       The Strings are equal when case is ignored? true\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_String_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,String,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, string strB, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules to use in the comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> is in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>comparisonType</code> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.  </p>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#16\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#16\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#16\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#17\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#17\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#17\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares three versions of the letter &quot;I&quot;. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.CompareCmp#1\">// This example demonstrates the \n// System.String.Compare(String, String, StringComparison) method.\n\nusing System;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string intro = &quot;Compare three versions of the letter I using different &quot; + \n                   &quot;values of StringComparison.&quot;;\n\n// Define an array of strings where each element contains a version of the \n// letter I. (An array of strings is used so you can easily modify this \n// code example to test additional or different combinations of strings.)  \n\n    string[] threeIs = new string[3];\n// LATIN SMALL LETTER I (U+0069)\n    threeIs[0] = &quot;\\u0069&quot;;\n// LATIN SMALL LETTER DOTLESS I (U+0131)\n    threeIs[1] = &quot;\\u0131&quot;;\n// LATIN CAPITAL LETTER I (U+0049)\n    threeIs[2] = &quot;\\u0049&quot;;\n\n    string[] unicodeNames = \n             {\n             &quot;LATIN SMALL LETTER I (U+0069)&quot;, \n             &quot;LATIN SMALL LETTER DOTLESS I (U+0131)&quot;, \n             &quot;LATIN CAPITAL LETTER I (U+0049)&quot;\n             };\n\n    StringComparison[] scValues = {\n        StringComparison.CurrentCulture,\n        StringComparison.CurrentCultureIgnoreCase,\n        StringComparison.InvariantCulture,\n        StringComparison.InvariantCultureIgnoreCase,\n        StringComparison.Ordinal,\n        StringComparison.OrdinalIgnoreCase };\n\n//\n    Console.Clear();\n    Console.WriteLine(intro);\n\n// Display the current culture because the culture-specific comparisons\n// can produce different results with different cultures.\n    Console.WriteLine(&quot;The current culture is {0}.<br>&quot;, \n                       Thread.CurrentThread.CurrentCulture.Name);\n\n// Determine the relative sort order of three versions of the letter I. \n    foreach (StringComparison sc in scValues)\n        {\n        Console.WriteLine(&quot;StringComparison.{0}:&quot;, sc);\n\n// LATIN SMALL LETTER I (U+0069) : LATIN SMALL LETTER DOTLESS I (U+0131)\n        Test(0, 1, sc, threeIs, unicodeNames);\n\n// LATIN SMALL LETTER I (U+0069) : LATIN CAPITAL LETTER I (U+0049)\n        Test(0, 2, sc, threeIs, unicodeNames);\n\n// LATIN SMALL LETTER DOTLESS I (U+0131) : LATIN CAPITAL LETTER I (U+0049)\n        Test(1, 2, sc, threeIs, unicodeNames);\n\n        Console.WriteLine();\n        }\n    }\n\n    protected static void Test(int x, int y, \n                               StringComparison comparison, \n                               string[] testI, string[] testNames)\n    {\n    string resultFmt = &quot;{0} is {1} {2}&quot;;\n    string result = &quot;equal to&quot;;\n    int cmpValue = 0;\n//\n    cmpValue = String.Compare(testI[x], testI[y], comparison);\n    if      (cmpValue &lt; 0) \n        result = &quot;less than&quot;;\n    else if (cmpValue &gt; 0)\n        result = &quot;greater than&quot;;\n    Console.WriteLine(resultFmt, testNames[x], result, testNames[y]);\n    }\n}\n\n/*\nThis code example produces the following results:\n\nCompare three versions of the letter I using different values of StringComparison.\nThe current culture is en-US.\n\nStringComparison.CurrentCulture:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is less than LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n\nStringComparison.CurrentCultureIgnoreCase:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n\nStringComparison.InvariantCulture:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is less than LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n\nStringComparison.InvariantCultureIgnoreCase:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n\nStringComparison.Ordinal:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is greater than LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n\nStringComparison.OrdinalIgnoreCase:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.CompareCmp#1\">// This example demonstrates the\n// System.String.Compare(String, String, StringComparison) method.\n\nusing namespace System;\nusing namespace System::Threading;\n\nvoid Test(int testStringIndex, int searchStringIndex, \n          StringComparison comparison, array&lt;String^&gt;^ testI, \n          array&lt;String^&gt;^ testNames)\n{\n    String^ resultFormat = &quot;{0} is {1} {2}&quot;;\n    String^ resultString = &quot;equal to&quot;;\n    int comparisonValue = 0;\n\n    comparisonValue = String::Compare(testI[testStringIndex],\n        testI[searchStringIndex], comparison);\n    if (comparisonValue &lt; 0)\n    {\n        resultString = &quot;less than&quot;;\n    }\n    else if (comparisonValue &gt; 0)\n    {\n        resultString = &quot;greater than&quot;;\n    }\n    Console::WriteLine(resultFormat, testNames[testStringIndex], resultString,\n        testNames[searchStringIndex]);\n}\n\nint main()\n{\n    String^ introMessage =\n        &quot;Compare three versions of the letter I using different &quot; +\n        &quot;values of StringComparison.&quot;;\n\n    // Define an array of strings where each element contains a version of\n    // the letter I. (An array of strings is used so you can easily modify\n    // this code example to test additional or different combinations of\n    // strings.)\n\n    array&lt;String^&gt;^ letterVariation = gcnew array&lt;String^&gt;(3);\n    // LATIN SMALL LETTER I (U+0069)\n    letterVariation[0] = &quot;i&quot;;\n    // LATIN SMALL LETTER DOTLESS I (U+0131)\n    letterVariation[1] = L&quot;\\u0131&quot;;\n    // LATIN CAPITAL LETTER I (U+0049)\n    letterVariation[2] = &quot;I&quot;;\n\n    array&lt;String^&gt;^ unicodeNames = {\n        &quot;LATIN SMALL LETTER I (U+0069)&quot;,\n        &quot;LATIN SMALL LETTER DOTLESS I (U+0131)&quot;,\n        &quot;LATIN CAPITAL LETTER I (U+0049)&quot;};\n\n    array&lt;StringComparison&gt;^ comparisonValues = {\n        StringComparison::CurrentCulture,\n        StringComparison::CurrentCultureIgnoreCase,\n        StringComparison::InvariantCulture,\n        StringComparison::InvariantCultureIgnoreCase,\n        StringComparison::Ordinal,\n        StringComparison::OrdinalIgnoreCase};\n\n    Console::Clear();\n    Console::WriteLine(introMessage);\n\n    // Display the current culture because the culture-specific comparisons\n    // can produce different results with different cultures.\n    Console::WriteLine(&quot;The current culture is {0}.{1}&quot;,\n        Thread::CurrentThread-&gt;CurrentCulture-&gt;Name, Environment::NewLine);\n\n    // Determine the relative sort order of three versions of the letter I.\n    for each (StringComparison stringCmp in comparisonValues)\n    {\n        Console::WriteLine(&quot;StringComparison.{0}:&quot;, stringCmp);\n\n        // LATIN SMALL LETTER I (U+0069) : LATIN SMALL LETTER DOTLESS I\n        // (U+0131)\n        Test(0, 1, stringCmp, letterVariation, unicodeNames);\n\n        // LATIN SMALL LETTER I (U+0069) : LATIN CAPITAL LETTER I (U+0049)\n        Test(0, 2, stringCmp, letterVariation, unicodeNames);\n\n        // LATIN SMALL LETTER DOTLESS I (U+0131) : LATIN CAPITAL LETTER I\n        // (U+0049)\n        Test(1, 2, stringCmp, letterVariation, unicodeNames);\n\n        Console::WriteLine();\n    }\n}\n\n/*\nThis code example produces the following results:\n\nCompare three versions of the letter I using different values of \nStringComparison.\nThe current culture is en-US.\n\nStringComparison.CurrentCulture:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER \n  DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is less than LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN \n  CAPITAL LETTER I (U+0049)\n\nStringComparison.CurrentCultureIgnoreCase:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER \n  DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN \n  CAPITAL LETTER I (U+0049)\n\nStringComparison.InvariantCulture:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER \n  DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is less than LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN \n  CAPITAL LETTER I (U+0049)\n\nStringComparison.InvariantCultureIgnoreCase:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER \n  DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN \n  CAPITAL LETTER I (U+0049)\n\nStringComparison.Ordinal:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER \n  DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is greater than LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN \n  CAPITAL LETTER I (U+0049)\n\nStringComparison.OrdinalIgnoreCase:\nLATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER \n  DOTLESS I (U+0131)\nLATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\nLATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN \n  CAPITAL LETTER I (U+0049)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.CompareCmp#1\">&#39; This example demonstrates the \n&#39; System.String.Compare(String, String, StringComparison) method.\n\nImports System\nImports System.Threading\n\nClass Sample\n    Public Shared Sub Main() \n        Dim intro As String = &quot;Compare three versions of the letter I using different &quot; &amp; _\n                              &quot;values of StringComparison.&quot;\n        \n        &#39; Define an array of strings where each element contains a version of the \n        &#39; letter I. (An array of strings is used so you can easily modify this \n        &#39; code example to test additional or different combinations of strings.)  \n        Dim threeIs(2) As String\n        &#39; LATIN SMALL LETTER I (U+0069)\n        threeIs(0) = &quot;i&quot;\n        &#39; LATIN SMALL LETTER DOTLESS I (U+0131)\n        threeIs(1) = &quot;Ä±&quot;\n        &#39; LATIN CAPITAL LETTER I (U+0049)\n        threeIs(2) = &quot;I&quot;\n        \n        Dim unicodeNames As String() =  { _\n                            &quot;LATIN SMALL LETTER I (U+0069)&quot;, _\n                            &quot;LATIN SMALL LETTER DOTLESS I (U+0131)&quot;, _\n                            &quot;LATIN CAPITAL LETTER I (U+0049)&quot; }\n        \n        Dim scValues As StringComparison() =  { _\n                            StringComparison.CurrentCulture, _\n                            StringComparison.CurrentCultureIgnoreCase, _\n                            StringComparison.InvariantCulture, _\n                            StringComparison.InvariantCultureIgnoreCase, _\n                            StringComparison.Ordinal, _\n                            StringComparison.OrdinalIgnoreCase }\n        &#39;\n        Console.Clear()\n        Console.WriteLine(intro)\n        \n        &#39; Display the current culture because the culture-specific comparisons\n        &#39; can produce different results with different cultures.\n        Console.WriteLine(&quot;The current culture is {0}.&quot; &amp; vbCrLf, _\n                           Thread.CurrentThread.CurrentCulture.Name)\n        \n        &#39; Determine the relative sort order of three versions of the letter I. \n        Dim sc As StringComparison\n        For Each sc In  scValues\n            Console.WriteLine(&quot;StringComparison.{0}:&quot;, sc)\n            \n            &#39; LATIN SMALL LETTER I (U+0069) : LATIN SMALL LETTER DOTLESS I (U+0131)\n            Test(0, 1, sc, threeIs, unicodeNames)\n            \n            &#39; LATIN SMALL LETTER I (U+0069) : LATIN CAPITAL LETTER I (U+0049)\n            Test(0, 2, sc, threeIs, unicodeNames)\n            \n            &#39; LATIN SMALL LETTER DOTLESS I (U+0131) : LATIN CAPITAL LETTER I (U+0049)\n            Test(1, 2, sc, threeIs, unicodeNames)\n            \n            Console.WriteLine()\n        Next sc\n    \n    End Sub &#39;Main\n    \n    Protected Shared Sub Test(ByVal x As Integer, ByVal y As Integer, _\n                              ByVal comparison As StringComparison, _\n                              ByVal testI() As String, ByVal testNames() As String) \n        Dim resultFmt As String = &quot;{0} is {1} {2}&quot;\n        Dim result As String = &quot;equal to&quot;\n        Dim cmpValue As Integer = 0\n        &#39;\n        cmpValue = String.Compare(testI(x), testI(y), comparison)\n        If cmpValue &lt; 0 Then\n            result = &quot;less than&quot;\n        ElseIf cmpValue &gt; 0 Then\n            result = &quot;greater than&quot;\n        End If\n        Console.WriteLine(resultFmt, testNames(x), result, testNames(y))\n    \n    End Sub &#39;Test\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Compare three versions of the letter I using different values of StringComparison.\n&#39;The current culture is en-US.\n&#39;\n&#39;StringComparison.CurrentCulture:\n&#39;LATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\n&#39;LATIN SMALL LETTER I (U+0069) is less than LATIN CAPITAL LETTER I (U+0049)\n&#39;LATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n&#39;\n&#39;StringComparison.CurrentCultureIgnoreCase:\n&#39;LATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\n&#39;LATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\n&#39;LATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n&#39;\n&#39;StringComparison.InvariantCulture:\n&#39;LATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\n&#39;LATIN SMALL LETTER I (U+0069) is less than LATIN CAPITAL LETTER I (U+0049)\n&#39;LATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n&#39;\n&#39;StringComparison.InvariantCultureIgnoreCase:\n&#39;LATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\n&#39;LATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\n&#39;LATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n&#39;\n&#39;StringComparison.Ordinal:\n&#39;LATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\n&#39;LATIN SMALL LETTER I (U+0069) is greater than LATIN CAPITAL LETTER I (U+0049)\n&#39;LATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n&#39;\n&#39;StringComparison.OrdinalIgnoreCase:\n&#39;LATIN SMALL LETTER I (U+0069) is less than LATIN SMALL LETTER DOTLESS I (U+0131)\n&#39;LATIN SMALL LETTER I (U+0069) is equal to LATIN CAPITAL LETTER I (U+0049)\n&#39;LATIN SMALL LETTER DOTLESS I (U+0131) is greater than LATIN CAPITAL LETTER I (U+0049)\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_String_System_Boolean_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,String,Boolean,CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific comparison information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparison uses the <code>culture</code> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#14\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#14\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#14\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#15\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#15\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#15\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how culture can affect a comparison. In Czech - Czech Republic culture, &quot;ch&quot; is a single character that is greater than &quot;d&quot;. However, in English - United States culture, &quot;ch&quot; consists of two characters, and &quot;c&quot; is less than &quot;d&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"string.comp4#1\">using System;\nusing System.Globalization;\n\nclass Sample {\n    public static void Main() {\n    String str1 = &quot;change&quot;;\n    String str2 = &quot;dollar&quot;;\n    String relation = null;\n\n    relation = symbol( String.Compare(str1, str2, false, new CultureInfo(&quot;en-US&quot;)) );\n    Console.WriteLine(&quot;For en-US: {0} {1} {2}&quot;, str1, relation, str2);\n\n    relation = symbol( String.Compare(str1, str2, false, new CultureInfo(&quot;cs-CZ&quot;)) );\n    Console.WriteLine(&quot;For cs-CZ: {0} {1} {2}&quot;, str1, relation, str2);\n    }\n\n    private static String symbol(int r) {\n    String s = &quot;=&quot;;\n    if      (r &lt; 0) s = &quot;&lt;&quot;;\n    else if (r &gt; 0) s = &quot;&gt;&quot;;\n    return s;\n    }\n}\n/*\nThis example produces the following results.\nFor en-US: change &lt; dollar\nFor cs-CZ: change &gt; dollar\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.comp4#1\">Imports System\nImports System.Globalization\n _\n\nClass Sample\n   Public Shared Sub Main()\n      Dim str1 As [String] = &quot;change&quot;\n      Dim str2 As [String] = &quot;dollar&quot;\n      Dim relation As [String] = Nothing\n      \n      relation = symbol([String].Compare(str1, str2, False, New CultureInfo(&quot;en-US&quot;)))\n      Console.WriteLine(&quot;For en-US: {0} {1} {2}&quot;, str1, relation, str2)\n      \n      relation = symbol([String].Compare(str1, str2, False, New CultureInfo(&quot;cs-CZ&quot;)))\n      Console.WriteLine(&quot;For cs-CZ: {0} {1} {2}&quot;, str1, relation, str2)\n   End Sub &#39;Main\n   \n   Private Shared Function symbol(r As Integer) As [String]\n      Dim s As [String] = &quot;=&quot;\n      If r &lt; 0 Then\n         s = &quot;&lt;&quot;\n      Else\n         If r &gt; 0 Then\n            s = &quot;&gt;&quot;\n         End If\n      End If\n      Return s\n   End Function &#39;symbol\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results.\n&#39;For en-US: change &lt; dollar\n&#39;For cs-CZ: change &gt; dollar\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.comp4#1\">using namespace System;\nusing namespace System::Globalization;\nString^ symbol( int r )\n{\n   String^ s = &quot;=&quot;;\n   if ( r &lt; 0 )\n      s = &quot;&lt;&quot;;\n   else\n   if ( r &gt; 0 )\n      s = &quot;&gt;&quot;;\n\n\n   return s;\n}\n\nint main()\n{\n   String^ str1 = &quot;change&quot;;\n   String^ str2 = &quot;dollar&quot;;\n   String^ relation = nullptr;\n   relation = symbol( String::Compare( str1, str2, false, gcnew CultureInfo( &quot;en-US&quot; ) ) );\n   Console::WriteLine( &quot;For en-US: {0} {1} {2}&quot;, str1, relation, str2 );\n   relation = symbol( String::Compare( str1, str2, false, gcnew CultureInfo( &quot;cs-CZ&quot; ) ) );\n   Console::WriteLine( &quot;For cs-CZ: {0} {1} {2}&quot;, str1, relation, str2 );\n}\n\n/*\nThis example produces the following results.\nFor en-US: change &lt; dollar\nFor cs-CZ: change &gt; dollar\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_String_System_Globalization_CultureInfo_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,String,CultureInfo,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The culture that supplies culture-specific comparison information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options to use when performing the comparison (such as ignoring case or symbols).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates the lexical relationship between <code>strA</code> and <code>strB</code>, as shown in the following table  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> precedes <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> occurs in the same position as <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> follows <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not a <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparison uses the <code>culture</code> parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The Compare method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> The comparison can be further specified by the <code>options</code> parameter, which consists of one or more members of the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> values have no effect.  </p>\n<p> Either or both comparands can be <code>null</code>. By definition, any string, including <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, compares greater than a null reference, and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both strings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares two strings in three different ways: using linguistic comparison for the en-US culture; using linguistic case-sensitive comparison for the en-US culture; and using an ordinal comparison. It illustrates how the three methods of comparison produce three different results.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Compare#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string string1 = &quot;brother&quot;;\n      string string2 = &quot;Brother&quot;;\n      string relation;\n      int result;\n      \n      // Cultural (linguistic) comparison.\n      result = String.Compare(string1, string2, new CultureInfo(&quot;en-US&quot;), \n                              CompareOptions.None);\n      if (result &gt; 0)\n         relation = &quot;comes after&quot;;\n      else if (result == 0)\n         relation = &quot;is the same as&quot;;\n      else\n         relation = &quot;comes before&quot;;\n\n      Console.WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;, \n                        string1, relation, string2);\n\n      // Cultural (linguistic) case-insensitive comparison.\n      result = String.Compare(string1, string2, new CultureInfo(&quot;en-US&quot;), \n                              CompareOptions.IgnoreCase);\n      if (result &gt; 0)\n         relation = &quot;comes after&quot;;\n      else if (result == 0)\n         relation = &quot;is the same as&quot;;\n      else\n         relation = &quot;comes before&quot;;\n\n      Console.WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;, \n                        string1, relation, string2);\n \n       // Culture-insensitive ordinal comparison.\n      result = String.CompareOrdinal(string1, string2);\n      if (result &gt; 0)\n         relation = &quot;comes after&quot;;\n      else if (result == 0)\n         relation = &quot;is the same as&quot;;\n      else\n         relation = &quot;comes before&quot;;\n\n      Console.WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;, \n                        string1, relation, string2);\n   }\n}\n// The example produces the following output:\n//    &#39;brother&#39; comes before &#39;Brother&#39;.   \n//    &#39;brother&#39; is the same as &#39;Brother&#39;.\n//    &#39;brother&#39; comes after &#39;Brother&#39;.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Compare#1\">using namespace System;\nusing namespace System::Globalization;\n\npublic ref class Example\n{\npublic:\n   static void Main()\n   {\n      String^ string1 = &quot;brother&quot;;\n      String^ string2 = &quot;Brother&quot;;\n      String^ relation;\n      int result;\n\n      // Cultural (linguistic) comparison.\n      result = String::Compare(string1, string2, gcnew CultureInfo(&quot;en-US&quot;),\n                              CompareOptions::None);\n      if (result &gt; 0)\n         relation = &quot;comes after&quot;;\n      else if (result == 0)\n         relation = &quot;is the same as&quot;;\n      else\n         relation = &quot;comes before&quot;;\n\n      Console::WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;,\n                        string1, relation, string2);\n\n      // Cultural (linguistic) case-insensitive comparison.\n      result = String::Compare(string1, string2, gcnew CultureInfo(&quot;en-US&quot;),\n                              CompareOptions::IgnoreCase);\n      if (result &gt; 0)\n         relation = &quot;comes after&quot;;\n      else if (result == 0)\n         relation = &quot;is the same as&quot;;\n      else\n         relation = &quot;comes before&quot;;\n\n      Console::WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;,\n                        string1, relation, string2);\n\n       // Culture-insensitive ordinal comparison.\n      result = String::CompareOrdinal(string1, string2);\n      if (result &gt; 0)\n         relation = &quot;comes after&quot;;\n      else if (result == 0)\n         relation = &quot;is the same as&quot;;\n      else\n         relation = &quot;comes before&quot;;\n\n      Console::WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;,\n                        string1, relation, string2);\n   }\n};\n\nint main()\n{\n    Example::Main();\n}\n\n\n// The example produces the following output:\n//    &#39;brother&#39; comes before &#39;Brother&#39;.\n//    &#39;brother&#39; is the same as &#39;Brother&#39;.\n//    &#39;brother&#39; comes after &#39;Brother&#39;.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#1\">Imports System.Globalization\n\nPublic Module Example\n   Public Sub Main()\n      Dim string1 As String = &quot;brother&quot;\n      Dim string2 As String = &quot;Brother&quot;\n      Dim relation As String\n      Dim result As Integer\n\n      &#39; Cultural (linguistic) comparison.\n      result = String.Compare(string1, string2, _\n                              New CultureInfo(&quot;en-US&quot;), CompareOptions.None)\n      If result &gt; 0 Then\n         relation = &quot;comes after&quot;\n      ElseIf result = 0 Then\n         relation = &quot;is the same as&quot;\n      Else\n         relation = &quot;comes before&quot;\n      End If\n      Console.WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;, string1, relation, string2)\n\n      &#39; Cultural (linguistic) case-insensitive comparison.\n      result = String.Compare(string1, string2, _\n                              New CultureInfo(&quot;en-US&quot;), CompareOptions.IgnoreCase)\n      If result &gt; 0 Then\n         relation = &quot;comes after&quot;\n      ElseIf result = 0 Then\n         relation = &quot;is the same as&quot;\n      Else\n         relation = &quot;comes before&quot;\n      End If\n      Console.WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;, string1, relation, string2)\n\n      &#39; Culture-insensitive ordinal comparison.\n      result = String.CompareOrdinal(string1, string2)\n      If result &gt; 0 Then\n         relation = &quot;comes after&quot;\n      ElseIf result = 0 Then\n         relation = &quot;is the same as&quot;\n      Else\n         relation = &quot;comes before&quot;\n      End If\n      Console.WriteLine(&quot;&#39;{0}&#39; {1} &#39;{2}&#39;.&quot;, string1, relation, string2)\n   End Sub\nEnd Module\n&#39; The example produces the following output:\n&#39;    &#39;brother&#39; comes before &#39;Brother&#39;.   \n&#39;    &#39;brother&#39; is the same as &#39;Brother&#39;.\n&#39;    &#39;brother&#39; comes after &#39;Brother&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects and returns an integer that indicates their relative position in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, int indexA, string strB, int indexB, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the substring within <code>strA</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the substring within <code>strB</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters in the substrings to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer indicating the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>indexA</code> or <code>indexB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The substrings to compare start in <code>strA</code> at <code>indexA</code> and in <code>strB</code> at <code>indexB</code>. Both <code>indexA</code> and <code>indexB</code> are zero-based; that is, the first character in <code>strA</code> and <code>strB</code> is at position zero. The length of the first substring is equal to the length of <code>strA</code> minus <code>indexA</code> plus one. The length of the second substring is equal to the length of <code>strB</code> minus <code>indexB</code> plus one.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> When comparing strings, you should call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,Int32,String,Int32,Int32,StringComparison)</a> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#2\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#2\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#2\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#3\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#3\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#3\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares two substrings.  </p>\n<pre><code class=\"lang-cs\" name=\"string.compare3#1\">// Sample for String.Compare(String, Int32, String, Int32, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n//                 0123456\n    String str1 = &quot;machine&quot;;\n    String str2 = &quot;device&quot;;\n    String str;\n    int result;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2);\n    result = String.Compare(str1, 2, str2, 0, 2);\n    str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? &quot;greater than&quot; : &quot;equal to&quot;));\n    Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(2, 2), str1);\n    Console.Write(&quot;{0} &quot;, str);\n    Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(0, 2), str2);\n    }\n}\n/*\nThis example produces the following results:\n\nstr1 = &#39;machine&#39;, str2 = &#39;device&#39;\nSubstring &#39;ch&#39; in &#39;machine&#39; is less than substring &#39;de&#39; in &#39;device&#39;.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.compare3#1\">&#39; Sample for String.Compare(String, Int32, String, Int32, Int32)\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      &#39;                       0123456\n      Dim str1 As [String] = &quot;machine&quot;\n      Dim str2 As [String] = &quot;device&quot;\n      Dim str As [String]\n      Dim result As Integer\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2)\n      result = [String].Compare(str1, 2, str2, 0, 2)\n      str = IIf(result &lt; 0, &quot;less than&quot;, IIf(result &gt; 0, &quot;greater than&quot;, &quot;equal to&quot;))\n      Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(2, 2), str1)\n      Console.Write(&quot;{0} &quot;, str)\n      Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(0, 2), str2)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;str1 = &#39;machine&#39;, str2 = &#39;device&#39;\n&#39;Substring &#39;ch&#39; in &#39;machine&#39; is less than substring &#39;de&#39; in &#39;device&#39;.\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.compare3#1\">// Sample for String::Compare(String, Int32, String, Int32, Int32)\nusing namespace System;\nint main()\n{\n   \n   //                0123456\n   String^ str1 = &quot;machine&quot;;\n   String^ str2 = &quot;device&quot;;\n   String^ str;\n   int result;\n   Console::WriteLine();\n   Console::WriteLine( &quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2 );\n   result = String::Compare( str1, 2, str2, 0, 2 );\n   str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? (String^)&quot;greater than&quot; : &quot;equal to&quot;));\n   Console::Write( &quot;Substring &#39;{0}&#39; in &#39; {1}&#39; is &quot;, str1-&gt;Substring( 2, 2 ), str1 );\n   Console::Write( &quot; {0} &quot;, str );\n   Console::WriteLine( &quot;substring &#39;{0}&#39; in &#39; {1}&#39;.&quot;, str2-&gt;Substring( 0, 2 ), str2 );\n}\n\n/*\nThis example produces the following results:\n\nstr1 = &#39;machine&#39;, str2 = &#39;device&#39;\nSubstring &#39;ch&#39; in &#39;machine&#39; is less than substring &#39;de&#39; in &#39;device&#39;.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the substring within <code>strA</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the substring within <code>strB</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters in the substrings to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>indexA</code> or <code>indexB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The substrings to compare start in <code>strA</code> at <code>indexA</code>, and in <code>strB</code> at <code>indexB</code>. Both <code>indexA</code> and <code>indexB</code> are zero-based; that is, the first character in <code>strA</code> and <code>strB</code> is at position zero. The length of the first substring is equal to the length of <code>strA</code> minus <code>indexA</code> plus one. The length of the second substring is equal to the length of <code>strB</code> minus <code>indexB</code> plus one.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> When comparing strings, you should call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,Int32,String,Int32,Int32,StringComparison)</a> method, which requires that you explicitly specify the type of string comparison that the method uses. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Using Strings</a>.  </p>\n</div>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#4\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#4\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#4\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> The path name needs to be compared in an invariant manner. The correct code to do this is as follows.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#5\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#5\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#5\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs two comparisons of two substrings that only differ in case. The first comparison ignores case and the second comparison considers case.  </p>\n<pre><code class=\"lang-cs\" name=\"string.compare4#1\">// Sample for String.Compare(String, Int32, String, Int32, Int32, Boolean)\nusing System;\n\nclass Sample {\n    public static void Main() {\n//                 0123456\n    String str1 = &quot;MACHINE&quot;;\n    String str2 = &quot;machine&quot;;\n    String str;\n    int result;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2);\n    Console.WriteLine(&quot;Ignore case:&quot;);\n    result = String.Compare(str1, 2, str2, 2, 2, true);\n    str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? &quot;greater than&quot; : &quot;equal to&quot;));\n    Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(2, 2), str1);\n    Console.Write(&quot;{0} &quot;, str);\n    Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(2, 2), str2);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Honor case:&quot;);\n    result = String.Compare(str1, 2, str2, 2, 2, false);\n    str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? &quot;greater than&quot; : &quot;equal to&quot;));\n    Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(2, 2), str1);\n    Console.Write(&quot;{0} &quot;, str);\n    Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(2, 2), str2);\n    }\n}\n/*\nThis example produces the following results:\n\nstr1 = &#39;MACHINE&#39;, str2 = &#39;machine&#39;\nIgnore case:\nSubstring &#39;CH&#39; in &#39;MACHINE&#39; is equal to substring &#39;ch&#39; in &#39;machine&#39;.\n\nHonor case:\nSubstring &#39;CH&#39; in &#39;MACHINE&#39; is greater than substring &#39;ch&#39; in &#39;machine&#39;.\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.compare4#1\">// Sample for String::Compare(String, Int32, String, Int32, Int32, Boolean)\nusing namespace System;\nint main()\n{\n   \n   //                0123456\n   String^ str1 = &quot;MACHINE&quot;;\n   String^ str2 = &quot;machine&quot;;\n   String^ str;\n   int result;\n   Console::WriteLine();\n   Console::WriteLine( &quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2 );\n   Console::WriteLine( &quot;Ignore case:&quot; );\n   result = String::Compare( str1, 2, str2, 2, 2, true );\n   str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? (String^)&quot;greater than&quot; : &quot;equal to&quot;));\n   Console::Write( &quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1-&gt;Substring( 2, 2 ), str1 );\n   Console::Write( &quot; {0} &quot;, str );\n   Console::WriteLine( &quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2-&gt;Substring( 2, 2 ), str2 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Honor case:&quot; );\n   result = String::Compare( str1, 2, str2, 2, 2, false );\n   str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? (String^)&quot;greater than&quot; : &quot;equal to&quot;));\n   Console::Write( &quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1-&gt;Substring( 2, 2 ), str1 );\n   Console::Write( &quot; {0} &quot;, str );\n   Console::WriteLine( &quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2-&gt;Substring( 2, 2 ), str2 );\n}\n\n/*\nThis example produces the following results:\n\nstr1 = &#39;MACHINE&#39;, str2 = &#39;machine&#39;\nIgnore case:\nSubstring &#39;CH&#39; in &#39;MACHINE&#39; is equal to substring &#39;ch&#39; in &#39;machine&#39;.\n\nHonor case:\nSubstring &#39;CH&#39; in &#39;MACHINE&#39; is greater than substring &#39;ch&#39; in &#39;machine&#39;.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.compare4#1\">&#39; Sample for String.Compare(String, Int32, String, Int32, Int32, Boolean)\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   \n   Public Shared Sub Main()\n      &#39;                       0123456\n      Dim str1 As [String] = &quot;MACHINE&quot;\n      Dim str2 As [String] = &quot;machine&quot;\n      Dim str As [String]\n      Dim result As Integer\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2)\n      Console.WriteLine(&quot;Ignore case:&quot;)\n      result = [String].Compare(str1, 2, str2, 2, 2, True)\n      str = IIf(result &lt; 0, &quot;less than&quot;, IIf(result &gt; 0, &quot;greater than&quot;, &quot;equal to&quot;))\n      Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(2, 2), str1)\n      Console.Write(&quot;{0} &quot;, str)\n      Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(2, 2), str2)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Honor case:&quot;)\n      result = [String].Compare(str1, 2, str2, 2, 2, False)\n      str = IIf(result &lt; 0, &quot;less than&quot;, IIf(result &gt; 0, &quot;greater than&quot;, &quot;equal to&quot;))\n      Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(2, 2), str1)\n      Console.Write(&quot;{0} &quot;, str)\n      Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(2, 2), str2)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;str1 = &#39;MACHINE&#39;, str2 = &#39;machine&#39;\n&#39;Ignore case:\n&#39;Substring &#39;CH&#39; in &#39;MACHINE&#39; is equal to substring &#39;ch&#39; in &#39;machine&#39;.\n&#39;\n&#39;Honor case:\n&#39;Substring &#39;CH&#39; in &#39;MACHINE&#39; is greater than substring &#39;ch&#39; in &#39;machine&#39;.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the substring within <code>strA</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the substring within <code>strB</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters in the substrings to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules to use in the comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or the <code>length</code> parameter is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follllows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>indexA</code> or <code>indexB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The substrings to compare start in <code>strA</code> at <code>indexA</code> and in <code>strB</code> at <code>indexB</code>. Both <code>indexA</code> and <code>indexB</code> are zero-based; that is, the first character in <code>strA</code> and <code>strB</code> is at position zero, not position one. The length of the first substring is equal to the length of <code>strA</code> minus <code>indexA</code> plus one. The length of the second substring is equal to the length of <code>strB</code> minus <code>indexB</code> plus one.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The <code>comparisonType</code> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.  </p>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#8\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#8\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#8\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#9\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#9\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#9\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares two substrings.  </p>\n<pre><code class=\"lang-cs\" name=\"string.compare3#1\">// Sample for String.Compare(String, Int32, String, Int32, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n//                 0123456\n    String str1 = &quot;machine&quot;;\n    String str2 = &quot;device&quot;;\n    String str;\n    int result;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2);\n    result = String.Compare(str1, 2, str2, 0, 2);\n    str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? &quot;greater than&quot; : &quot;equal to&quot;));\n    Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(2, 2), str1);\n    Console.Write(&quot;{0} &quot;, str);\n    Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(0, 2), str2);\n    }\n}\n/*\nThis example produces the following results:\n\nstr1 = &#39;machine&#39;, str2 = &#39;device&#39;\nSubstring &#39;ch&#39; in &#39;machine&#39; is less than substring &#39;de&#39; in &#39;device&#39;.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.compare3#1\">&#39; Sample for String.Compare(String, Int32, String, Int32, Int32)\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      &#39;                       0123456\n      Dim str1 As [String] = &quot;machine&quot;\n      Dim str2 As [String] = &quot;device&quot;\n      Dim str As [String]\n      Dim result As Integer\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2)\n      result = [String].Compare(str1, 2, str2, 0, 2)\n      str = IIf(result &lt; 0, &quot;less than&quot;, IIf(result &gt; 0, &quot;greater than&quot;, &quot;equal to&quot;))\n      Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(2, 2), str1)\n      Console.Write(&quot;{0} &quot;, str)\n      Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(0, 2), str2)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;str1 = &#39;machine&#39;, str2 = &#39;device&#39;\n&#39;Substring &#39;ch&#39; in &#39;machine&#39; is less than substring &#39;de&#39; in &#39;device&#39;.\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.compare3#1\">// Sample for String::Compare(String, Int32, String, Int32, Int32)\nusing namespace System;\nint main()\n{\n   \n   //                0123456\n   String^ str1 = &quot;machine&quot;;\n   String^ str2 = &quot;device&quot;;\n   String^ str;\n   int result;\n   Console::WriteLine();\n   Console::WriteLine( &quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2 );\n   result = String::Compare( str1, 2, str2, 0, 2 );\n   str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? (String^)&quot;greater than&quot; : &quot;equal to&quot;));\n   Console::Write( &quot;Substring &#39;{0}&#39; in &#39; {1}&#39; is &quot;, str1-&gt;Substring( 2, 2 ), str1 );\n   Console::Write( &quot; {0} &quot;, str );\n   Console::WriteLine( &quot;substring &#39;{0}&#39; in &#39; {1}&#39;.&quot;, str2-&gt;Substring( 0, 2 ), str2 );\n}\n\n/*\nThis example produces the following results:\n\nstr1 = &#39;machine&#39;, str2 = &#39;device&#39;\nSubstring &#39;ch&#39; in &#39;machine&#39; is less than substring &#39;de&#39; in &#39;device&#39;.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Boolean_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32,Boolean,CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the substring within <code>strA</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the substring within <code>strB</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters in the substrings to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific comparison information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>strA</code> or <code>strB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The substrings to compare start in <code>strA</code> at <code>indexA</code>, and in <code>strB</code> at <code>indexB</code>. Both <code>indexA</code> and <code>indexB</code> are zero-based; that is, the first character in <code>strA</code> and <code>strB</code> is at position zero, not position one. The length of the first substring is equal to the length of <code>strA</code> minus <code>indexA</code> plus one. The length of the second substring is equal to the length of <code>strB</code> minus <code>indexB</code> plus one.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The comparison uses the <code>culture</code> parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.  </p>\n<p> The comparison is performed using word sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<p> One or both comparands can be <code>null</code>. By definition, any string, including the empty string (&quot;&quot;), compares greater than a null reference; and two null references compare equal to each other.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater. The return value is the result of the last comparison performed.  </p>\n<p> Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter &quot;i&quot; in &quot;file&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#6\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#6\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, true) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#6\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, True) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre><p> Compare the path name to &quot;file&quot; using an ordinal comparison. The correct code to do this is as follows:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Compare#7\">    static bool IsFileURI(String^ path)\n    {\n        return (String::Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison::OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Compare#7\">    static bool IsFileURI(String path)\n    {\n        return (String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) == 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare#7\">    Shared Function IsFileURI(ByVal path As String) As Boolean\n        If String.Compare(path, 0, &quot;file:&quot;, 0, 5, StringComparison.OrdinalIgnoreCase) = 0 Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares two substrings using different cultures and ignoring the case of the substrings. The choice of culture affects how the letter &quot;I&quot; is compared.  </p>\n<pre><code class=\"lang-cs\" name=\"string.compare5#1\">// Sample for String.Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\nusing System;\nusing System.Globalization;\n\nclass Sample {\n    public static void Main() {\n//                 0123456\n    String str1 = &quot;MACHINE&quot;;\n    String str2 = &quot;machine&quot;;\n    String str;\n    int result;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2);\n    Console.WriteLine(&quot;Ignore case, Turkish culture:&quot;);\n    result = String.Compare(str1, 4, str2, 4, 2, true, new CultureInfo(&quot;tr-TR&quot;));\n    str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? &quot;greater than&quot; : &quot;equal to&quot;));\n    Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(4, 2), str1);\n    Console.Write(&quot;{0} &quot;, str);\n    Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(4, 2), str2);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Ignore case, invariant culture:&quot;);\n    result = String.Compare(str1, 4, str2, 4, 2, true, CultureInfo.InvariantCulture);\n    str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? &quot;greater than&quot; : &quot;equal to&quot;));\n    Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(4, 2), str1);\n    Console.Write(&quot;{0} &quot;, str);\n    Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(4, 2), str2);\n    }\n}\n/*\nThis example produces the following results:\n\nstr1 = &#39;MACHINE&#39;, str2 = &#39;machine&#39;\nIgnore case, Turkish culture:\nSubstring &#39;IN&#39; in &#39;MACHINE&#39; is less than substring &#39;in&#39; in &#39;machine&#39;.\n\nIgnore case, invariant culture:\nSubstring &#39;IN&#39; in &#39;MACHINE&#39; is equal to substring &#39;in&#39; in &#39;machine&#39;.\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.compare5#1\">// Sample for String::Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\nusing namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   //                0123456\n   String^ str1 = &quot;MACHINE&quot;;\n   String^ str2 = &quot;machine&quot;;\n   String^ str;\n   int result;\n   Console::WriteLine();\n   Console::WriteLine( &quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2 );\n   Console::WriteLine( &quot;Ignore case, Turkish culture:&quot; );\n   result = String::Compare( str1, 4, str2, 4, 2, true, gcnew CultureInfo( &quot;tr-TR&quot; ) );\n   str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? (String^)&quot;greater than&quot; : &quot;equal to&quot;));\n   Console::Write( &quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1-&gt;Substring( 4, 2 ), str1 );\n   Console::Write( &quot; {0} &quot;, str );\n   Console::WriteLine( &quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2-&gt;Substring( 4, 2 ), str2 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Ignore case, invariant culture:&quot; );\n   result = String::Compare( str1, 4, str2, 4, 2, true, CultureInfo::InvariantCulture );\n   str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? (String^)&quot;greater than&quot; : &quot;equal to&quot;));\n   Console::Write( &quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1-&gt;Substring( 4, 2 ), str1 );\n   Console::Write( &quot; {0} &quot;, str );\n   Console::WriteLine( &quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2-&gt;Substring( 4, 2 ), str2 );\n}\n\n/*\nThis example produces the following results:\n\nstr1 = &#39;MACHINE&#39;, str2 = &#39;machine&#39;\nIgnore case, Turkish culture:\nSubstring &#39;IN&#39; in &#39;MACHINE&#39; is less than substring &#39;in&#39; in &#39;machine&#39;.\n\nIgnore case, invariant culture:\nSubstring &#39;IN&#39; in &#39;MACHINE&#39; is equal to substring &#39;in&#39; in &#39;machine&#39;.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.compare5#1\">&#39; Sample for String.Compare(String, Int32, String, Int32, Int32, Boolean, CultureInfo)\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nClass Sample\n   \n   Public Shared Sub Main()\n      &#39;                       0123456\n      Dim str1 As [String] = &quot;MACHINE&quot;\n      Dim str2 As [String] = &quot;machine&quot;\n      Dim str As [String]\n      Dim result As Integer\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2)\n      Console.WriteLine(&quot;Ignore case, Turkish culture:&quot;)\n      result = [String].Compare(str1, 4, str2, 4, 2, True, New CultureInfo(&quot;tr-TR&quot;))\n      str = IIf(result &lt; 0, &quot;less than&quot;, IIf(result &gt; 0, &quot;greater than&quot;, &quot;equal to&quot;))\n      Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(4, 2), str1)\n      Console.Write(&quot;{0} &quot;, str)\n      Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(4, 2), str2)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Ignore case, invariant culture:&quot;)\n      result = [String].Compare(str1, 4, str2, 4, 2, True, CultureInfo.InvariantCulture)\n      str = IIf(result &lt; 0, &quot;less than&quot;, IIf(result &gt; 0, &quot;greater than&quot;, &quot;equal to&quot;))\n      Console.Write(&quot;Substring &#39;{0}&#39; in &#39;{1}&#39; is &quot;, str1.Substring(4, 2), str1)\n      Console.Write(&quot;{0} &quot;, str)\n      Console.WriteLine(&quot;substring &#39;{0}&#39; in &#39;{1}&#39;.&quot;, str2.Substring(4, 2), str2)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;str1 = &#39;MACHINE&#39;, str2 = &#39;machine&#39;\n&#39;Ignore case, Turkish culture:\n&#39;Substring &#39;IN&#39; in &#39;MACHINE&#39; is less than substring &#39;in&#39; in &#39;machine&#39;.\n&#39;\n&#39;Ignore case, invariant culture:\n&#39;Substring &#39;IN&#39; in &#39;MACHINE&#39; is equal to substring &#39;in&#39; in &#39;machine&#39;.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_Globalization_CultureInfo_System_Globalization_CompareOptions_\">\r\n    \r\n            <a id=\"System_String_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(String,Int32,String,Int32,Int32,CultureInfo,CompareOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position of the substring within <code>strA</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position of the substring within <code>strB</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters in the substrings to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific comparison information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options to use when performing the comparison (such as ignoring case or symbols).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that indicates the lexical relationship between the two substrings, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> precedes the substring in <code>strB</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings occur in the same position in the sort order, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> follows the substring in <code>strB</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not a <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>indexA</code> is greater than <code>strA</code><code>.Length</code>.  </p>\n<p> -or-  </p>\n<p> <code>indexB</code> is greater than <code>strB</code><code>.Length</code>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> Either <code>strA</code> or <code>strB</code> is <code>null</code>, and <code>length</code> is greater than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The substrings to compare start in <code>strA</code> at position <code>indexA</code> and in <code>strB</code> at position <code>indexB</code>. The length of the first substring is the length of <code>strA</code> minus <code>indexA</code>. The length of the second substring is the length of <code>strB</code> minus <code>indexB</code>.  </p>\n<p> The number of characters to compare is the lesser of the lengths of the two substrings, and <code>length</code>. The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The comparison uses the <code>culture</code> parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters. For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The Compare method is designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero). To determine whether two strings are equivalent, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> One or both of <code>strA</code> and <code>strB</code> can be <code>null</code>. By definition, any string, including <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, compares greater than a null reference, and two null references compare equal to each other.  </p>\n<p> The comparison can be further specified by the <code>options</code> parameter, which consists of one or more members of the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration. However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> values have no effect.  </p>\n<p> The comparison terminates when an inequality is discovered or both substrings have been compared. However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater. The return value is the result of the last comparison performed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Compare method to compare the last names of two people. It then lists them in alphabetical order.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Compare5#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string name1 = &quot;Jack Smith&quot;;\n      string name2 = &quot;John Doe&quot;;\n      \n      // Get position of space character.\n      int index1 = name1.IndexOf(&quot; &quot;);\n      index1 = index1 &lt; 0 ? 0 : index1--;\n      \n      int index2 = name2.IndexOf(&quot; &quot;);\n      index1 = index1 &lt; 0 ? 0 : index1--;\n      \n      int length = Math.Max(name1.Length, name2.Length);\n      \n      Console.WriteLine(&quot;Sorted alphabetically by last name:&quot;);\n      if (String.Compare(name1, index1, name2, index2, length, \n                         new CultureInfo(&quot;en-US&quot;), CompareOptions.IgnoreCase) &lt; 0)\n         Console.WriteLine(&quot;{0}<br>{1}&quot;, name1, name2); \n      else\n         Console.WriteLine(&quot;{0}<br>{1}&quot;, name2, name1); \n   }\n}\n// The example displays the following output:\n//       Sorted alphabetically by last name:\n//       John Doe\n//       Jack Smith\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Compare5#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim name1 As String = &quot;Jack Smith&quot;\n      Dim name2 = &quot;John Doe&quot;\n      \n      &#39; Get position of space character.\n      Dim index1 As Integer = name1.IndexOf(&quot; &quot;)\n      index1 = CInt(IIf(index1 &lt; 0, 0, index1 - 1))\n      \n      Dim index2 As Integer = name2.IndexOf(&quot; &quot;)\n      index1 = CInt(IIf(index1 &lt; 0, 0, index1 - 1))\n      \n      Dim length As Integer = Math.Max(name1.Length, name2.Length)\n      \n      Console.WriteLIne(&quot;Sorted alphabetically by last name:&quot;)\n      If String.Compare(name1, index1, name2, index2, length, _\n                        New CultureInfo(&quot;en-US&quot;), CompareOptions.IgnoreCase) &lt; 0 Then\n         Console.WriteLine(&quot;{0}{1}{2}&quot;, name1, vbCrLf, name2)\n      Else\n         Console.WriteLine(&quot;{0}{1}{2}&quot;, name2, vbCrLf, name1)\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output;\n&#39;       Sorted alphabetically by last name:\n&#39;       John Doe\n&#39;       Jack Smith\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_CompareOrdinal_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_CompareOrdinal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareOrdinal(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects by evaluating the numeric values of the corresponding <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in each string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CompareOrdinal (string strA, string strB);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>strA</code> is less than <code>strB</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>strA</code> and <code>strB</code> are equal.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>strA</code> is greater than <code>strB</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>. To perform a case-insensitive comparison using ordinal sort rules, call the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method with the <code>comparisonType</code> argument set to <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>.  </p>\n<p> Because CompareOrdinalis a static method, <code>strA</code> and <code>strB</code> can be <code>null</code>. If both values are <code>null</code>, the method returns 0 (zero), which indicates that <code>strA</code> and <code>strB</code> are equal. If only one of the values is <code>null</code>, the method considers the non-null value to be greater.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs and ordinal comparison of two strings that only differ in case.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.compareordinal#1\">// Sample for String::CompareOrdinal(String, String)\nusing namespace System;\nint main()\n{\n   String^ str1 = &quot;ABCD&quot;;\n   String^ str2 = &quot;abcd&quot;;\n   String^ str;\n   int result;\n   Console::WriteLine();\n   Console::WriteLine( &quot;Compare the numeric values of the corresponding Char objects in each string.&quot; );\n   Console::WriteLine( &quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2 );\n   result = String::CompareOrdinal( str1, str2 );\n   str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? (String^)&quot;greater than&quot; : &quot;equal to&quot;));\n   Console::Write( &quot;String &#39;{0}&#39; is &quot;, str1 );\n   Console::Write( &quot;{0} &quot;, str );\n   Console::WriteLine( &quot;String &#39;{0}&#39;.&quot;, str2 );\n}\n\n/*\nThis example produces the following results:\n\nCompare the numeric values of the corresponding Char objects in each string.\nstr1 = &#39;ABCD&#39;, str2 = &#39;abcd&#39;\nString &#39;ABCD&#39; is less than String &#39;abcd&#39;.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.compareordinal#1\">// Sample for String.CompareOrdinal(String, String)\nusing System;\n\nclass Sample {\n    public static void Main() {\n    String str1 = &quot;ABCD&quot;;\n    String str2 = &quot;abcd&quot;;\n    String str;\n    int result;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Compare the numeric values of the corresponding Char objects in each string.&quot;);\n    Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2);\n    result = String.CompareOrdinal(str1, str2);\n    str = ((result &lt; 0) ? &quot;less than&quot; : ((result &gt; 0) ? &quot;greater than&quot; : &quot;equal to&quot;));\n    Console.Write(&quot;String &#39;{0}&#39; is &quot;, str1);\n    Console.Write(&quot;{0} &quot;, str);\n    Console.WriteLine(&quot;String &#39;{0}&#39;.&quot;, str2);\n    }\n}\n/*\nThis example produces the following results:\n\nCompare the numeric values of the corresponding Char objects in each string.\nstr1 = &#39;ABCD&#39;, str2 = &#39;abcd&#39;\nString &#39;ABCD&#39; is less than String &#39;abcd&#39;.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.compareordinal#1\">&#39; Sample for String.CompareOrdinal(String, String)\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim str1 As [String] = &quot;ABCD&quot;\n      Dim str2 As [String] = &quot;abcd&quot;\n      Dim str As [String]\n      Dim result As Integer\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Compare the numeric values of the corresponding Char objects in each string.&quot;)\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;, str2 = &#39;{1}&#39;&quot;, str1, str2)\n      result = [String].CompareOrdinal(str1, str2)\n      str = IIf(result &lt; 0, &quot;less than&quot;, IIf(result &gt; 0, &quot;greater than&quot;, &quot;equal to&quot;))\n      Console.Write(&quot;String &#39;{0}&#39; is &quot;, str1)\n      Console.Write(&quot;{0} &quot;, str)\n      Console.WriteLine(&quot;String &#39;{0}&#39;.&quot;, str2)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Compare the numeric values of the corresponding Char objects in each string.\n&#39;str1 = &#39;ABCD&#39;, str2 = &#39;abcd&#39;\n&#39;String &#39;ABCD&#39; is less than String &#39;abcd&#39;.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_CompareOrdinal_System_String_System_Int32_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_CompareOrdinal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareOrdinal(String,Int32,String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Compares substrings of two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects by evaluating the numeric values of the corresponding <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in each substring.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the substring in <code>strA</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to use in the comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indexB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the substring in <code>strB</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters in the substrings to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> The substring in <code>strA</code> is less than the substring in <code>strB</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> The substrings are equal, or <code>length</code> is zero.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> The substring in <code>strA</code> is greater than the substring in <code>strB</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>strA</code> is not <code>null</code> and <code>indexA</code> is greater than <code>strA</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>strB</code> is not <code>null</code> and<code>indexB</code> is greater than <code>strB</code>.<span class=\"xref\">stem.String.Length*</span>.  </p>\n<p> -or-  </p>\n<p> <code>indexA</code>, <code>indexB</code>, or <code>length</code> is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>indexA</code>, <code>indexB</code>, and <code>length</code> parameters must be nonnegative.  </p>\n<p> The number of characters compared is the lesser of the length of <code>strA</code> less <code>indexA</code>, the length of <code>strB</code> less <code>indexB</code>, and <code>length</code>.  </p>\n<p> This method performs a case-sensitive comparison using ordinal sort rules. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>. To perform a case-insensitive comparison using ordinal sort rules, call the<a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_Int32_System_String_System_Int32_System_Int32_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,Int32,String,Int32,Int32,StringComparison)</a>method with the <code>comparisonType</code> argument set to<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>.  </p>\n<p> Because <a class=\"xref\" href=\"system.string#System_String_CompareOrdinal_System_String_System_String_\" data-linktype=\"relative-path\">CompareOrdinal(String,String)</a> is a static method, <code>strA</code> and <code>strB</code> can be <code>null</code>. If both values are <code>null</code>, the method returns 0 (zero), which indicates that <code>strA</code> and <code>strB</code> are equal. If only one of the values is <code>null</code>, the method considers the non-null value to be greater.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This following example demonstrates that <a class=\"xref\" href=\"system.string#System_String_CompareOrdinal_\" data-linktype=\"relative-path\">CompareOrdinal</a> and <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> use different sort orders.  </p>\n<pre><code class=\"lang-cs\" name=\"StringCompareOrdinal#1\">using System;\nusing System.Globalization;\n\nclass Test \n{\n\tpublic static void Main(String[] args) \n\t{\n\tString strLow = &quot;abc&quot;;\n\tString strCap = &quot;ABC&quot;;\n\tString result = &quot;equal to &quot;;\n\tint x = 0;\n\tint pos = 1;\n\n// The Unicode codepoint for &#39;b&#39; is greater than the codepoint for &#39;B&#39;.\n\tx = String.CompareOrdinal(strLow, pos, strCap, pos, 1);\n\tif (x &lt; 0) result = &quot;less than&quot;;\n\tif (x &gt; 0) result = &quot;greater than&quot;;\n\tConsole.WriteLine(&quot;CompareOrdinal(\\&quot;{0}\\&quot;[{2}], \\&quot;{1}\\&quot;[{2}]):&quot;, strLow, strCap, pos);\n\tConsole.WriteLine(&quot;   &#39;{0}&#39; is {1} &#39;{2}&#39;&quot;, strLow[pos], result, strCap[pos]);\n\n// In U.S. English culture, &#39;b&#39; is linguistically less than &#39;B&#39;.\n\tx = String.Compare(strLow, pos, strCap, pos, 1, false, new CultureInfo(&quot;en-US&quot;));\n\tif (x &lt; 0) result = &quot;less than&quot;;\n\telse if (x &gt; 0) result = &quot;greater than&quot;;\n\tConsole.WriteLine(&quot;Compare(\\&quot;{0}\\&quot;[{2}], \\&quot;{1}\\&quot;[{2}]):&quot;, strLow, strCap, pos);\n\tConsole.WriteLine(&quot;   &#39;{0}&#39; is {1} &#39;{2}&#39;&quot;, strLow[pos], result, strCap[pos]);\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StringCompareOrdinal#1\">Imports System\nImports System.Globalization\n\nClass Test\n   \n  Public Shared Sub Main(args() As [String])\n      Dim strLow As [String] = &quot;abc&quot;\n      Dim strCap As [String] = &quot;ABC&quot;\n      Dim result As [String] = &quot;equal to &quot;\n      Dim x As Integer = 0\n      Dim pos As Integer = 1\n\n&#39; The Unicode codepoint for &#39;b&#39; is greater than the codepoint for &#39;B&#39;.      \n      x = [String].CompareOrdinal(strLow, pos, strCap, pos, 1)\n      If x &lt; 0 Then\n         result = &quot;less than&quot;\n      End If\n      If x &gt; 0 Then\n         result = &quot;greater than&quot;\n      End If\n\n&#39; In U.S. English culture, &#39;b&#39; is linguistically less than &#39;B&#39;.\n      Console.WriteLine(&quot;CompareOrdinal(&quot;&quot;{0}&quot;&quot;.Chars({2}), &quot;&quot;{1}&quot;&quot;.Chars({2})):&quot;, strLow, strCap, pos)\n      \n      Console.WriteLine(&quot;   &#39;{0}&#39; is {1} &#39;{2}&#39;&quot;, strLow.Chars(pos), result, strCap.Chars(pos))\n      \n      x = [String].Compare(strLow, pos, strCap, pos, 1, False, New CultureInfo(&quot;en-US&quot;))\n      If x &lt; 0 Then\n         result = &quot;less than&quot;\n      ElseIf x &gt; 0 Then\n         result = &quot;greater than&quot;\n      End If\n      Console.WriteLine(&quot;Compare(&quot;&quot;{0}&quot;&quot;.Chars({2}), &quot;&quot;{1}&quot;&quot;.Chars({2})):&quot;, strLow, strCap, pos)\n      Console.WriteLine(&quot;   &#39;{0}&#39; is {1} &#39;{2}&#39;&quot;, strLow.Chars(pos), result, strCap.Chars(pos))\n   End Sub &#39;Main\nEnd Class &#39;Test\n</code></pre><pre><code class=\"lang-cpp\" name=\"StringCompareOrdinal#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   String^ strLow = &quot;abc&quot;;\n   String^ strCap = &quot;ABC&quot;;\n   String^ result = &quot;equal to &quot;;\n   int x = 0;\n   int pos = 1;\n   \n   // The Unicode codepoint for &#39;b&#39; is greater than the codepoint for &#39;B&#39;.\n   x = String::CompareOrdinal( strLow, pos, strCap, pos, 1 );\n   if ( x &lt; 0 )\n      result = &quot;less than&quot;;\n\n   if ( x &gt; 0 )\n      result = &quot;greater than&quot;;\n\n   Console::WriteLine( &quot;CompareOrdinal(\\&quot;{0}\\&quot;[{2}], \\&quot;{1}\\&quot;[{2}]):&quot;, strLow, strCap, pos );\n   Console::WriteLine( &quot;   &#39;{0}&#39; is {1} &#39;{2}&#39;&quot;, strLow[ pos ], result, strCap[ pos ] );\n\n   // In U.S. English culture, &#39;b&#39; is linguistically less than &#39;B&#39;.\n   x = String::Compare( strLow, pos, strCap, pos, 1, false, gcnew CultureInfo( &quot;en-US&quot; ) );\n   if ( x &lt; 0 )\n      result = &quot;less than&quot;;\n   else\n   if ( x &gt; 0 )\n      result = &quot;greater than&quot;;\n\n   Console::WriteLine( &quot;Compare(\\&quot;{0}\\&quot;[{2}], \\&quot;{1}\\&quot;[{2}]):&quot;, strLow, strCap, pos );\n   Console::WriteLine( &quot;   &#39;{0}&#39; is {1} &#39;{2}&#39;&quot;, strLow[ pos ], result, strCap[ pos ] );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_String_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance with a specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that evaluates to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>value</code> parameter.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance precedes <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance has the same position in the sort order as <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance follows <code>value</code>.<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>value</code> must be a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The CompareTo method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<p> For more information about the behavior of this method, see the Remarks section of the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_\" data-linktype=\"relative-path\">System.String.Compare(String,String)</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the CompareTo method with an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. Because it attempts to compare a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance to a <code>TestClass</code> object, the method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"ExToString#1\">using namespace System;\n\npublic ref class TestClass{};\n\nint main()\n{\n   TestClass^ test = gcnew TestClass;\n   array&lt;Object^&gt;^ objectsToCompare = { test, test-&gt;ToString(), 123,\n                                        (123).ToString(), &quot;some text&quot;,\n                                        &quot;Some Text&quot; };\n   String^ s = &quot;some text&quot;;\n   for each (Object^ objectToCompare in objectsToCompare) {\n      try {\n         Int32 i = s-&gt;CompareTo(objectToCompare);\n         Console::WriteLine(&quot;Comparing &#39;{0}&#39; with &#39;{1}&#39;: {2}&quot;,\n                            s, objectToCompare, i);\n      }\n      catch (ArgumentException^ e) {\n         Console::WriteLine(&quot;Bad argument: {0} (type {1})&quot;,\n                            objectToCompare,\n                            objectToCompare-&gt;GetType()-&gt;Name);\n      }\n   }\n}\n// The example displays the following output:\n//    Bad argument: TestClass (type TestClass)\n//    Comparing &#39;some text&#39; with &#39;TestClass&#39;: -1\n//    Bad argument: 123 (type Int32)\n//    Comparing &#39;some text&#39; with &#39;123&#39;: 1\n//    Comparing &#39;some text&#39; with &#39;some text&#39;: 0\n//    Comparing &#39;some text&#39; with &#39;Some Text&#39;: -1\n</code></pre><pre><code class=\"lang-cs\" name=\"ExToString#1\">using System;\n\npublic class TestClass\n{}\n\npublic class Example \n{\n   public static void Main()\n   {\n      var test = new TestClass();\n      Object[] objectsToCompare = { test, test.ToString(), 123,\n                                    123.ToString(), &quot;some text&quot;,\n                                    &quot;Some Text&quot; };\n      string s = &quot;some text&quot;;\n      foreach (var objectToCompare in objectsToCompare) {\n         try {\n            int i = s.CompareTo(objectToCompare);\n            Console.WriteLine(&quot;Comparing &#39;{0}&#39; with &#39;{1}&#39;: {2}&quot;,\n                              s, objectToCompare, i);\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;Bad argument: {0} (type {1})&quot;,\n                              objectToCompare,\n                              objectToCompare.GetType().Name);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//    Bad argument: TestClass (type TestClass)\n//    Comparing &#39;some text&#39; with &#39;TestClass&#39;: -1\n//    Bad argument: 123 (type Int32)\n//    Comparing &#39;some text&#39; with &#39;123&#39;: 1\n//    Comparing &#39;some text&#39; with &#39;some text&#39;: 0\n//    Comparing &#39;some text&#39; with &#39;Some Text&#39;: -1\n</code></pre><pre><code class=\"lang-vb\" name=\"ExToString#1\">Public Class TestClass\nEnd Class \n\n\nPublic Class Example\n   Public Shared Sub Main()\n      Dim test As New TestClass()\n      Dim objectsToCompare() As Object = { test, test.ToString(), 123,\n                                           123.ToString(), &quot;some text&quot;,\n                                           &quot;Some Text&quot; }\n      Dim s As String = &quot;some text&quot;\n      For Each objectToCompare In objectsToCompare\n         Try\n            Dim i As Integer = s.CompareTo(objectToCompare)\n            Console.WriteLine(&quot;Comparing &#39;{0}&#39; with &#39;{1}&#39;: {2}&quot;,\n                              s, objectToCompare, i)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;Bad argument: {0} (type {1})&quot;,\n                              objectToCompare,\n                              objectToCompare.GetType().Name)\n         End Try\n      Next\n   End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;       Bad argument: TestClass (type TestClass)\n&#39;       Comparing &#39;some text&#39; with &#39;TestClass&#39;: -1\n&#39;       Bad argument: 123 (type Int32)\n&#39;       Comparing &#39;some text&#39; with &#39;123&#39;: 1\n&#39;       Comparing &#39;some text&#39; with &#39;some text&#39;: 0\n&#39;       Comparing &#39;some text&#39; with &#39;Some Text&#39;: -1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_CompareTo_System_String_\">\r\n    \r\n            <a id=\"System_String_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance with a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (string strB);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <code>strB</code> parameter.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance precedes <code>strB</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance has the same position in the sort order as <code>strB</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance follows <code>strB</code>.<br>\n -or-<br>\n <code>strB</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture. For more information about word, string, and ordinal sorts, see <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The <a class=\"xref\" href=\"system.string#System_String_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method was designed primarily for use in sorting or alphabetizing operations. It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent. To determine whether two strings are equivalent, call the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> For more information about the behavior of this method, see the Remarks section of the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_\" data-linktype=\"relative-path\">Compare(String,String)</a> method.  </p>\n<p> This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_Object_\" data-linktype=\"relative-path\">System.String.CompareTo(Object)</a> method, because it does not have to determine whether the <code>strB</code> argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>to a<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.string#System_String_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method to compare the current string instance with another string.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringcompareto#1\">using namespace System;\n\nString^ CompareStrings(String^ str1, String^ str2)\n{\n   // compare the values, using the CompareTo method on the first string\n   int cmpVal = str1-&gt;CompareTo(str2);\n   if (cmpVal == 0)\n      // the values are the same\n      return &quot;The strings occur in the same position in the sort order.&quot;;\n   else if (cmpVal &lt; 0)\n      return &quot;The first string precedes the second in the sort order.&quot;;\n   else\n      return &quot;The first string follows the second in the sort order.&quot;;\n}\n\nint main()\n{\n   String^ strFirst = &quot;Goodbye&quot;;\n   String^ strSecond = &quot;Hello&quot;;\n   String^ strThird = &quot;a small String*&quot;;\n   String^ strFourth = &quot;goodbye&quot;;\n   \n   // Compare a string to itself.\n   Console::WriteLine(CompareStrings(strFirst, strFirst));\n   Console::WriteLine(CompareStrings(strFirst, strSecond));\n   Console::WriteLine(CompareStrings(strFirst, strThird));\n   \n   // Compare a string to another string that varies only by case.\n   Console::WriteLine(CompareStrings(strFirst, strFourth));\n   Console::WriteLine(CompareStrings(strFourth, strFirst));\n}\n// The example displays the following output:\n//       The strings occur in the same position in the sort order.\n//       The first string precedes the second in the sort order.\n//       The first string follows the second in the sort order.\n//       The first string follows the second in the sort order.\n//       The first string precedes the second in the sort order.\n</code></pre><pre><code class=\"lang-cs\" name=\"stringcompareto#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string strFirst = &quot;Goodbye&quot;;\n      string strSecond = &quot;Hello&quot;;\n      string strThird = &quot;a small string&quot;;\n      string strFourth = &quot;goodbye&quot;;\n\n      // Compare a string to itself.\n      Console.WriteLine(CompareStrings(strFirst, strFirst));\n\n      Console.WriteLine(CompareStrings(strFirst, strSecond));\n      Console.WriteLine(CompareStrings(strFirst, strThird));\n\n      // Compare a string to another string that varies only by case.\n      Console.WriteLine(CompareStrings(strFirst, strFourth));\n      Console.WriteLine(CompareStrings(strFourth, strFirst));\n   }\n\n   private static string CompareStrings( string str1, string str2 )\n   {\n      // Compare the values, using the CompareTo method on the first string.\n      int cmpVal = str1.CompareTo(str2);\n\n\t   if (cmpVal == 0) // The strings are the same.\n         return &quot;The strings occur in the same position in the sort order.&quot;;\n      else if (cmpVal &lt; 0)\n         return &quot;The first string precedes the second in the sort order.&quot;;\n      else\n         return &quot;The first string follows the second in the sort order.&quot;;\n    }\n}\n// The example displays the following output:\n//       The strings occur in the same position in the sort order.\n//       The first string precedes the second in the sort order.\n//       The first string follows the second in the sort order.\n//       The first string follows the second in the sort order.\n//       The first string precedes the second in the sort order.\n</code></pre><pre><code class=\"lang-vb\" name=\"stringcompareto#1\">Public Module Example\n   Public Sub Main()\n      Dim strFirst As String = &quot;Goodbye&quot;\n      Dim strSecond As String = &quot;Hello&quot;\n      Dim strThird As String = &quot;a small string&quot;\n      Dim strFourth As String = &quot;goodbye&quot;\n\n      &#39; Compare a string to itself.\n      Console.WriteLine(CompareStrings(strFirst, strFirst))\n        \n      Console.WriteLine(CompareStrings(strFirst, strSecond))\n      Console.WriteLine(CompareStrings(strFirst, strThird))\n        \n      &#39; Compare a string to another string that varies only by case.\n      Console.WriteLine(CompareStrings(strFirst, strFourth))\n      Console.WriteLine(CompareStrings(strFourth, strFirst))\n   End Sub\n    \n   Private Function CompareStrings(str1 As String, str2 As String) As String\n      Dim cmpVal As Integer = str1.CompareTo(str2)\n      If cmpVal = 0 Then\n         &#39; The values are the same.\n         Return &quot;The strings occur in the same position in the sort order.&quot;\n      ElseIf cmpVal &lt; 0 Then\n         Return &quot;The first string precedes the second in the sort order.&quot;\n      Else\n         Return &quot;The first string follows the second in the sort order.&quot;\n      End If\n   End Function\nEnd Module\n&#39; This example displays the following output:\n&#39;       The strings occur in the same position in the sort order.\n&#39;       The strings occur in the same position in the sort order.\n&#39;       The first string precedes the second in the sort order.\n&#39;       The first string follows the second in the sort order.\n&#39;       The first string follows the second in the sort order.\n&#39;       The first string precedes the second in the sort order.\n</code></pre><p> The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.  </p>\n<pre><code class=\"lang-vb\" name=\"T.CompareTo#1\">&#39; This example demonstrates the generic and non-generic versions of the \n&#39; CompareTo method for several base types.\n&#39; The non-generic version takes a parameter of type Object, while the generic\n&#39; version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim nl As String = Environment.NewLine\n      Dim msg As String = _\n          &quot;{0}The following is the result of using the generic and non-generic{0}&quot; &amp; _\n          &quot;versions of the CompareTo method for several base types:{0}&quot;\n      \n      Dim now As DateTime = DateTime.Now\n      &#39; Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n      Dim tsX As New TimeSpan(11, 22, 33, 44)\n      &#39; Version = 1.2.333.4\n      Dim versX As New Version(&quot;1.2.333.4&quot;)\n      &#39; Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n      Dim guidX As New Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;)\n      \n      Dim a1 As [Boolean] = True,    a2 As [Boolean] = True\n      Dim b1 As [Byte] = 1,          b2 As [Byte] = 1\n      Dim c1 As Int16 = -2,          c2 As Int16 = 2\n      Dim d1 As Int32 = 3,           d2 As Int32 = 3\n      Dim e1 As Int64 = 4,           e2 As Int64 = -4\n      Dim f1 As [Decimal] = -5.5D,   f2 As [Decimal] = 5.5D\n      Dim g1 As [Single] = 6.6F,     g2 As [Single] = 6.6F\n      Dim h1 As [Double] = 7.7,      h2 As [Double] = -7.7\n      Dim i1 As [Char] = &quot;A&quot;c,       i2 As [Char] = &quot;A&quot;c\n      Dim j1 As String = &quot;abc&quot;,      j2 As String = &quot;abc&quot;\n      Dim k1 As DateTime = now,      k2 As DateTime = now\n      Dim l1 As TimeSpan = tsX,      l2 As TimeSpan = tsX\n      Dim m1 As Version = versX,     m2 As New Version(&quot;2.0&quot;)\n      Dim n1 As Guid = guidX,        n2 As Guid = guidX\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; SByte, UInt16, UInt32, UInt64\n\n      Console.WriteLine(msg, nl)\n      Try\n         &#39; The second and third Show method call parameters are automatically boxed because\n         &#39; the second and third Show method declaration arguments expect type Object.\n\n         Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo(CObj(a2)))\n         Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo(CObj(b2)))\n         Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo(CObj(c2)))\n         Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo(CObj(d2)))\n         Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo(CObj(e2)))\n         Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo(CObj(f2)))\n         Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo(CObj(g2)))\n         Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo(CObj(h2)))\n         Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo(CObj(i2)))\n         Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo(CObj(j2)))\n         Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo(CObj(k2)))\n         Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo(CObj(l2)))\n         Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo(CObj(m2)))\n         Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo(CObj(n2)))\n         &#39;\n         Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl)\n         Console.WriteLine(&quot;SByte, UInt16, UInt32, UInt64&quot;)\n\n      Catch e As Exception\n         Console.WriteLine(e)\n      End Try\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(caption As String, var1 As [Object], var2 As [Object], _\n                          resultGeneric As Integer, resultNonGeneric As Integer)\n      Dim relation As String\n      \n      Console.Write(caption)\n      If resultGeneric = resultNonGeneric Then\n         If resultGeneric &lt; 0 Then\n            relation = &quot;less than&quot;\n         ElseIf resultGeneric &gt; 0 Then\n            relation = &quot;greater than&quot;\n         Else\n            relation = &quot;equal to&quot;\n         End If\n         Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2)\n      \n      &#39; The following condition will never occur because the generic and non-generic\n      &#39; CompareTo methods are equivalent.\n\n      Else\n         Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, _\n                            resultGeneric, resultNonGeneric)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The following is the result of using the generic and non-generic versions of the\n&#39;CompareTo method for several base types:\n&#39;\n&#39;Boolean:  True is equal to True\n&#39;Byte:     1 is equal to 1\n&#39;Int16:    -2 is less than 2\n&#39;Int32:    3 is equal to 3\n&#39;Int64:    4 is greater than -4\n&#39;Decimal:  -5.5 is less than 5.5\n&#39;Single:   6.6 is equal to 6.6\n&#39;Double:   7.7 is greater than -7.7\n&#39;Char:     A is equal to A\n&#39;String:   abc is equal to abc\n&#39;DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n&#39;TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n&#39;Version:  1.2.333.4 is less than 2.0\n&#39;Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n&#39;aa0057b223\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;SByte, UInt16, UInt32, UInt64\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"T.CompareTo#1\">// This example demonstrates the two versions of the \n// CompareTo method for several base types.\n// The general version takes a parameter of type Object, while the specific\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\nusing namespace System;\n\nvoid Show( String^ caption, Object^ var1, Object^ var2, int resultGeneric, int resultNonGeneric )\n{\n   String^ relation;\n   Console::Write( caption );\n   if ( resultGeneric == resultNonGeneric )\n   {\n      if ( resultGeneric &lt; 0 )\n            relation = &quot;less than&quot;;\n      else\n      if ( resultGeneric &gt; 0 )\n            relation = &quot;greater than&quot;;\n      else\n            relation = &quot;equal to&quot;;\n      Console::WriteLine( &quot;{0} is {1} {2}&quot;, var1, relation, var2 );\n   }\n   // The following condition will never occur because the generic and non-generic\n   // CompareTo methods are equivalent.\n   else\n   {\n      Console::WriteLine( &quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, resultGeneric, resultNonGeneric );\n   }\n}\n\nint main()\n{\n   String^ nl = Environment::NewLine;\n   String^ msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot;\n   &quot;versions of the CompareTo method for several base types:{0}&quot;;\n   Object^ obj; // An Object used to insure CompareTo(Object) is called.\n\n   DateTime now = DateTime::Now;\n   \n   // Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n   TimeSpan tsX = TimeSpan(11,22,33,44);\n   \n   // Version = 1.2.333.4\n   Version^ versX = gcnew Version(  &quot;1.2.333.4&quot; );\n   \n   // Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n   Guid guidX = Guid( &quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n   Boolean a1 = true,a2 = true;\n   Byte b1 = 1,b2 = 1;\n   Int16 c1 = -2,c2 = 2;\n   Int32 d1 = 3,d2 = 3;\n   Int64 e1 = 4,e2 = -4;\n   Decimal f1 = Decimal(-5.5), f2 = Decimal(5.5);\n   Single g1 = 6.6f,g2 = 6.6f;\n   Double h1 = 7.7,h2 = -7.7;\n   Char i1 = &#39;A&#39;,i2 = &#39;A&#39;;\n   String^ j1 = &quot;abc&quot;, ^j2 = &quot;abc&quot;;\n   DateTime k1 = now,k2 = now;\n   TimeSpan l1 = tsX,l2 = tsX;\n   Version^ m1 = versX, ^m2 = gcnew Version(  &quot;2.0&quot; );\n   Guid n1 = guidX,n2 = guidX;\n   \n   // The following types are not CLS-compliant.\n   SByte w1 = 8,w2 = 8;\n   UInt16 x1 = 9,x2 = 9;\n   UInt32 y1 = 10,y2 = 10;\n   UInt64 z1 = 11,z2 = 11;\n   \n   //\n   Console::WriteLine( msg, nl );\n   try\n   {\n      Show( &quot;Boolean: &quot;, a1, a2, a1.CompareTo( a2 ), a1.CompareTo( a2 ) );\n      Show( &quot;Byte:    &quot;, b1, b2, b1.CompareTo( b2 ), b1.CompareTo( b2 ) );\n      Show( &quot;Int16:   &quot;, c1, c2, c1.CompareTo( c2 ), c1.CompareTo( c2 ) );\n      Show( &quot;Int32:   &quot;, d1, d2, d1.CompareTo( d2 ), d1.CompareTo( d2 ) );\n      Show( &quot;Int64:   &quot;, e1, e2, e1.CompareTo( e2 ), e1.CompareTo( e2 ) );\n      Show( &quot;Decimal: &quot;, f1, f2, f1.CompareTo( f2 ), f1.CompareTo( f2 ) );\n      Show( &quot;Single:  &quot;, g1, g2, g1.CompareTo( g2 ), g1.CompareTo( g2 ) );\n      Show( &quot;Double:  &quot;, h1, h2, h1.CompareTo( h2 ), h1.CompareTo( h2 ) );\n      Show( &quot;Char:    &quot;, i1, i2, i1.CompareTo( i2 ), i1.CompareTo( i2 ) );\n      \n      // Use an anonymous object to hide the String object.\n      obj = j2;\n      Show( &quot;String:  &quot;, j1, j2, j1-&gt;CompareTo( j2 ), j1-&gt;CompareTo( obj ) );\n      Show( &quot;DateTime:&quot;, k1, k2, k1.CompareTo( k2 ), k1.CompareTo( k2 ) );\n      Show(  &quot;TimeSpan: &quot;, l1, l2, l1.CompareTo( l2 ), l1.CompareTo( l2 ) );\n      \n      // Use an anonymous object to hide the Version object.\n      obj = m2;\n      Show(  &quot;Version:  &quot;, m1, m2, m1-&gt;CompareTo( m2 ), m1-&gt;CompareTo( obj ) );\n      Show(  &quot;Guid:     &quot;, n1, n2, n1.CompareTo( n2 ), n1.CompareTo( n2 ) );\n      \n      //\n      Console::WriteLine( &quot;{0}The following types are not CLS-compliant:&quot;, nl );\n      Show( &quot;SByte:   &quot;, w1, w2, w1.CompareTo( w2 ), w1.CompareTo( w2 ) );\n      Show( &quot;UInt16:  &quot;, x1, x2, x1.CompareTo( x2 ), x1.CompareTo( x2 ) );\n      Show( &quot;UInt32:  &quot;, y1, y2, y1.CompareTo( y2 ), y1.CompareTo( y2 ) );\n      Show( &quot;UInt64:  &quot;, z1, z2, z1.CompareTo( z2 ), z1.CompareTo( z2 ) );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n}\n//     This example displays the following output:\n//     \n//     The following is the result of using the generic and non-generic versions of the\n//     CompareTo method for several base types:\n//     \n//     Boolean:  True is equal to True\n//     Byte:     1 is equal to 1\n//     Int16:    -2 is less than 2\n//     Int32:    3 is equal to 3\n//     Int64:    4 is greater than -4\n//     Decimal:  -5.5 is less than 5.5\n//     Single:   6.6 is equal to 6.6\n//     Double:   7.7 is greater than -7.7\n//     Char:     A is equal to A\n//     String:   abc is equal to abc\n//     DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n//     TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n//     Version:  1.2.333.4 is less than 2.0\n//     Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n//     aa0057b223\n//     \n//     The following types are not CLS-compliant:\n//     SByte:    8 is equal to 8\n//     UInt16:   9 is equal to 9\n//     UInt32:   10 is equal to 10\n//     UInt64:   11 is equal to 11\n</code></pre><pre><code class=\"lang-cs\" name=\"T.CompareTo#1\">// This example demonstrates the generic and non-generic versions of the \n// CompareTo method for several base types.\n// The non-generic version takes a parameter of type Object, while the generic\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string    nl = Environment.NewLine;\n    string    msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot; +\n                    &quot;versions of the CompareTo method for several base types:{0}&quot;;\n\n    DateTime  now = DateTime.Now;\n// Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); \n// Version = 1.2.333.4\n    Version   versX = new Version(&quot;1.2.333.4&quot;);  \n// Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n    Guid      guidX = new Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n\n    Boolean  a1 = true,  a2 = true;\n    Byte     b1 = 1,     b2 = 1;\n    Int16    c1 = -2,    c2 = 2;\n    Int32    d1 = 3,     d2 = 3;\n    Int64    e1 = 4,     e2 = -4;\n    Decimal  f1 = -5.5m, f2 = 5.5m;\n    Single   g1 = 6.6f,  g2 = 6.6f;\n    Double   h1 = 7.7d,  h2 = -7.7d;\n    Char     i1 = &#39;A&#39;,   i2 = &#39;A&#39;;\n    String   j1 = &quot;abc&quot;, j2 = &quot;abc&quot;;\n    DateTime k1 = now,   k2 = now;\n    TimeSpan l1 = tsX,   l2 = tsX;\n    Version  m1 = versX, m2 = new Version(&quot;2.0&quot;);\n    Guid     n1 = guidX, n2 = guidX;\n\n// The following types are not CLS-compliant.\n    SByte    w1 = 8,     w2 = 8;\n    UInt16   x1 = 9,     x2 = 9;\n    UInt32   y1 = 10,    y2 = 10;\n    UInt64   z1 = 11,    z2 = 11;\n//\n    Console.WriteLine(msg, nl);\n    try \n        {\n// The second and third Show method call parameters are automatically boxed because\n// the second and third Show method declaration arguments expect type Object.\n\n        Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));\n        Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));\n        Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));\n        Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));\n        Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));\n        Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));\n        Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));\n        Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));\n        Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));\n        Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));\n        Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));\n        Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));\n        Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));\n        Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));\n//\n        Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl);\n        Show(&quot;SByte:    &quot;, w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));\n        Show(&quot;UInt16:   &quot;, x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));\n        Show(&quot;UInt32:   &quot;, y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));\n        Show(&quot;UInt64:   &quot;, z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));\n        }\n    catch (Exception e)\n        {\n        Console.WriteLine(e);\n        }\n    }\n\n    public static void Show(string caption, Object var1, Object var2, \n                            int resultGeneric, int resultNonGeneric)\n    {\n    string relation;\n\n    Console.Write(caption);\n    if (resultGeneric == resultNonGeneric) \n        {\n        if      (resultGeneric &lt; 0) relation = &quot;less than&quot;;\n        else if (resultGeneric &gt; 0) relation = &quot;greater than&quot;;\n        else                        relation = &quot;equal to&quot;;\n        Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2);\n        }\n\n// The following condition will never occur because the generic and non-generic\n// CompareTo methods are equivalent.\n\n    else\n        {\n        Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, \n                           resultGeneric, resultNonGeneric);\n        }\n   }\n}\n/*\nThis example produces the following results:\n\nThe following is the result of using the generic and non-generic versions of the\nCompareTo method for several base types:\n\nBoolean:  True is equal to True\nByte:     1 is equal to 1\nInt16:    -2 is less than 2\nInt32:    3 is equal to 3\nInt64:    4 is greater than -4\nDecimal:  -5.5 is less than 5.5\nSingle:   6.6 is equal to 6.6\nDouble:   7.7 is greater than -7.7\nChar:     A is equal to A\nString:   abc is equal to abc\nDateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\nTimeSpan: 11.22:33:44 is equal to 11.22:33:44\nVersion:  1.2.333.4 is less than 2.0\nGuid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\naa0057b223\n\nThe following types are not CLS-compliant:\nSByte:    8 is equal to 8\nUInt16:   9 is equal to 9\nUInt32:   10 is equal to 10\nUInt64:   11 is equal to 11\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_Collections_Generic_IEnumerable_System_String__\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(IEnumerable&lt;String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the members of a constructed <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> collection of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (System.Collections.Generic.IEnumerable&lt;string&gt; values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection object that implements <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and whose generic type argument is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenated strings in <code>values</code>, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>values</code> is an empty <code>IEnumerable(Of String)</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>values</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates each object in <code>values</code>; it does not add any delimiters. To specify a delimiter between each member of <code>values</code>, call the <a class=\"xref\" href=\"system.string#System_String_Join_System_String_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"relative-path\">Join(String,IEnumerable&lt;String&gt;)</a> method.  </p>\n<p> An <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> string is used in place of any null element in <code>values</code>.  </p>\n<p> If <code>values</code> is an empty <code>IEnumerable(Of String)</code>, the method returns <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If <code>values</code> is <code>null</code>, the method throws an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> exception.  </p>\n<p> Concat is a convenience method that lets you concatenate each element in an <code>IEnumerable(Of String)</code> collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a <code>List(Of String)</code> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is &quot;M&quot;). The <code>IEnumerable(Of String)</code> collection that is returned by the &lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt; method is passed to the Concat method to display the result as a single string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Concat#3\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string output = String.Concat( GetAlphabet(true).Where( letter =&gt; \n                      letter.CompareTo(&quot;M&quot;) &gt;= 0));\n      Console.WriteLine(output);  \n   }\n\n   private static List&lt;string&gt; GetAlphabet(bool upper)\n   {\n      List&lt;string&gt; alphabet = new List&lt;string&gt;();\n      int charValue = upper ? 65 : 97;\n      for (int ctr = 0; ctr &lt;= 25; ctr++)\n         alphabet.Add(Convert.ToChar(charValue + ctr).ToString());\n      return alphabet; \n   }\n}\n// The example displays the following output:\n//      MNOPQRSTUVWXYZ\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Concat#3\">Imports System.Collections.Generic\nImports System.Linq\n\nModule modMain\n   Public Sub Main()\n      Dim output As String = String.Concat(GetAlphabet(true).Where(Function(letter) _\n                                                         letter &gt;= &quot;M&quot;))\n        \n      Console.WriteLine(output)                                     \n   End Sub\n   \n   Private Function GetAlphabet(upper As Boolean) As List(Of String)\n      Dim alphabet As New List(Of String)\n      Dim charValue As Integer = CInt(IIf(upper, 65, 97))\n      For ctr As Integer = 0 To 25\n         alphabet.Add(ChrW(charValue + ctr).ToString())\n      Next\n      Return alphabet \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       MNOPQRSTUVWXYZ\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, which it then passes to the Concat method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Concat#2\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int maxPrime = 100;\n      IEnumerable&lt;String&gt; primeList = GetPrimes(maxPrime);\n      Console.WriteLine(&quot;Primes less than {0}:&quot;, maxPrime);\n      Console.WriteLine(&quot;   {0}&quot;, String.Concat(primeList));\n   }\n\n   private static IEnumerable&lt;String&gt; GetPrimes(int maxPrime)\n   {\n      Array values = Array.CreateInstance(typeof(int), \n                              new int[] { maxPrime - 1}, new int[] { 2 }); \n      // Use Sieve of Erathsthenes to determine prime numbers.\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= (int) Math.Ceiling(Math.Sqrt(values.GetUpperBound(0))); ctr++)\n      {\n                           \n         if ((int) values.GetValue(ctr) == 1) continue;\n         \n         for (int multiplier = ctr; multiplier &lt;=  maxPrime / 2; multiplier++)\n            if (ctr * multiplier &lt;= maxPrime)\n               values.SetValue(1, ctr * multiplier);\n      }      \n      \n      List&lt;String&gt; primes = new List&lt;String&gt;();\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= values.GetUpperBound(0); ctr++)\n         if ((int) values.GetValue(ctr) == 0) \n            primes.Add(ctr.ToString() + &quot; &quot;);\n      return primes;\n   }   \n}\n// The example displays the following output:\n//    Primes less than 100:\n//       2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Concat#2\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim maxPrime As Integer = 100\n      Dim primeList As IEnumerable(Of String) = GetPrimes(maxPrime)\n      Console.WriteLine(&quot;Primes less than {0}:&quot;, maxPrime)\n      Console.WriteLine(&quot;   {0}&quot;, String.Concat(primeList))\n   End Sub\n   \n   Private Function GetPrimes(maxPrime As Integer) As IEnumerable(Of String)\n      Dim values As Array = Array.CreateInstance(GetType(Integer), _\n                              New Integer() { maxPrime - 1}, New Integer(){ 2 }) \n      &#39; Use Sieve of Erathsthenes to determine prime numbers.\n      For ctr As Integer = values.GetLowerBound(0) To _\n                           CInt(Math.Ceiling(Math.Sqrt(values.GetUpperBound(0))))\n         If CInt(values.GetValue(ctr)) = 1 Then Continue For\n         \n         For multiplier As Integer = ctr To maxPrime \\ 2\n            If ctr * multiplier &lt;= maxPrime Then values.SetValue(1, ctr * multiplier)\n         Next   \n      Next      \n      \n      Dim primes As New List(Of String)\n      For ctr As Integer = values.GetLowerBound(0) To values.GetUpperBound(0)\n         If CInt(values.GetValue(ctr)) = 0 Then primes.Add(ctr.ToString() + &quot; &quot;)\n      Next            \n      Return primes\n   End Function   \nEnd Module\n&#39; The example displays the following output:\n&#39;    Primes less than 100:\n&#39;       2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_Object_\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Creates the string  representation of a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (object arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to represent, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of <code>arg0</code>, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>arg0</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Concat method represents <code>arg0</code> as a string by calling its parameterless <code>ToString</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Concat method.  </p>\n<pre><code class=\"lang-cs\" name=\"string.concat5#1\">using System;\n\nclass stringConcat5 {\n    public static void Main() {\n    int i = -123;\n    Object o = i;\n    Object[] objs = new Object[] {-123, -456, -789};\n\n    Console.WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;);\n    Console.WriteLine(&quot;1) {0}&quot;, String.Concat(o));\n    Console.WriteLine(&quot;2) {0}&quot;, String.Concat(o, o));\n    Console.WriteLine(&quot;3) {0}&quot;, String.Concat(o, o, o));\n\n    Console.WriteLine(&quot;<br>Concatenate 4 objects and a variable length parameter list:&quot;);\n    Console.WriteLine(&quot;4) {0}&quot;, String.Concat(o, o, o, o));\n    Console.WriteLine(&quot;5) {0}&quot;, String.Concat(o, o, o, o, o));\n\n    Console.WriteLine(&quot;<br>Concatenate a 3-element object array:&quot;);\n    Console.WriteLine(&quot;6) {0}&quot;, String.Concat(objs));\n    }\n}\n// The example displays the following output:\n//    Concatenate 1, 2, and 3 objects:\n//    1) -123\n//    2) -123-123\n//    3) -123-123-123\n//    \n//    Concatenate 4 objects and a variable length parameter list:\n//    4) -123-123-123-123\n//    5) -123-123-123-123-123\n//    \n//    Concatenate a 3-element object array:\n//    6) -123-456-789\n</code></pre><pre><code class=\"lang-vb\" name=\"string.concat5#1\">Class stringConcat5\n   Public Shared Sub Main()\n      Dim i As Integer = - 123\n      Dim o As [Object] = i\n      Dim objs() As [Object] = {-123, -456, -789}\n      \n      Console.WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;)\n      Console.WriteLine(&quot;1) {0}&quot;, [String].Concat(o))\n      Console.WriteLine(&quot;2) {0}&quot;, [String].Concat(o, o))\n      Console.WriteLine(&quot;3) {0}&quot;, [String].Concat(o, o, o))\n      \n      Console.WriteLine(vbCrLf &amp; &quot;Concatenate 4 objects and a variable length parameter list:&quot;)\n      Console.WriteLine(&quot;4) {0}&quot;, String.Concat(o, o, o, o))\n      Console.WriteLine(&quot;5) {0}&quot;, String.Concat(o, o, o, o, o))\n      \n      Console.WriteLine(vbCrLf &amp; &quot;Concatenate a 3-element object array:&quot;)\n      Console.WriteLine(&quot;6) {0}&quot;, [String].Concat(objs))\n   End Sub\nEnd Class\n&#39;The example displays the following output:\n&#39;    Concatenate 1, 2, and 3 objects:\n&#39;    1) -123\n&#39;    2) -123-123\n&#39;    3) -123-123-123\n&#39;    \n&#39;    Concatenate 4 objects and a variable length parameter list:\n&#39;    4) -123-123-123-123\n&#39;    5) -123-123-123-123-123\n&#39;         \n&#39;    Concatenate a 3-element object array:\n&#39;    6) -123-456-789\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.concat5#1\">using namespace System;\n\nint main()\n{\n   int i = -123;\n   Object^ o = i;\n   array&lt;Object^&gt;^objs = { -123, -456, -789};\n   Console::WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;);\n   Console::WriteLine(&quot;1) {0}&quot;, String::Concat(o));\n   Console::WriteLine(&quot;2) {0}&quot;, String::Concat(o, o));\n   Console::WriteLine(&quot;3) {0}&quot;, String::Concat(o, o, o));\n   \n   Console::WriteLine(&quot;<br>Concatenate 4 objects and a variable length parameter list:&quot; );\n   Console::WriteLine(&quot;4) {0}&quot;, String::Concat(o, o, o, o));\n   Console::WriteLine(&quot;5) {0}&quot;, String::Concat( o, o, o, o, o));\n   Console::WriteLine(&quot;<br>Concatenate a 3-element object array:&quot;);\n   Console::WriteLine(&quot;6) {0}&quot;, String::Concat(objs));\n}\n// The example displays the following output:\n//    Concatenate 1, 2, and 3 objects:\n//    1) -123\n//    2) -123-123\n//    3) -123-123-123\n//    \n//    Concatenate 4 objects and a variable length parameter list:\n//    4) -123-123-123-123\n//    5) -123-123-123-123-123\n//    \n//    Concatenate a 3-element object array:\n//    6) -123-456-789\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_Object___\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the string representations of the elements in a specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object array that contains the elements to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenated string representations of the values of the elements in <code>args</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>args</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Out of memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates each object in <code>args</code> by calling the parameterless <code>ToString</code> method of that object; it does not add any delimiters.  </p>\n<p> <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> is used in place of any null object in the array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the <a class=\"xref\" href=\"system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> method with an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array.  </p>\n<pre><code class=\"lang-cs\" name=\"stringconcat1#1\">using System;\n\npublic class ConcatTest {\n    public static void Main() {\n        // Create a group of objects.\n        Test1 t1 = new Test1();\n        Test2 t2 = new Test2();\n        int i = 16;\n        string s = &quot;Demonstration&quot;;\n\n        // Place the objects in an array.\n        object [] o = { t1, i, t2, s };\n\n        // Concatenate the objects together as a string. To do this,\n        // the ToString method of each of the objects is called.\n        Console.WriteLine(string.Concat(o));\n    }\n}\n\n// Create two empty test classes.\nclass Test1 {\n}\n\nclass Test2 {\n}\n// The example displays the following output:\n//       Test116Test2Demonstration\n</code></pre><pre><code class=\"lang-vb\" name=\"stringconcat1#1\">Imports System\n\n\n\nPublic Class ConcatTest\n    \n    Public Shared Sub Main()\n        Dim t1 As New Test1()\n        Dim t2 As New Test2()\n        Dim i As Integer = 16\n        Dim s As String = &quot;Demonstration&quot;\n        Dim o As Object() = {t1, i, t2, s}\n        \n        &#39; create a group of objects\n        \n        &#39; place the objects in an array\n        \n        &#39; concatenate the objects together as a string. To do this,\n        &#39; the ToString method in the objects is called\n        Console.WriteLine(String.Concat(o))\n    End Sub &#39;Main\nEnd Class &#39;ConcatTest\n\n\n&#39; imagine these test classes are full-fledged objects...\nClass Test1\nEnd Class &#39;Test1\n\nClass Test2\nEnd Class &#39;Test2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_String___\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(String[])</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the elements of a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (string[] values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of string instances.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenated elements of <code>values</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>values</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Out of memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates each object in <code>values</code>; it does not add any delimiters.  </p>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null object in the array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the <a class=\"xref\" href=\"system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> method with a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array.  </p>\n<pre><code class=\"lang-vb\" name=\"stringconcat3#1\">Public Class Example\n    Public Shared Sub Main()\n        &#39; Make an array of strings. Note that we have included spaces.\n        Dim s As String() = { &quot;hello &quot;, &quot;and &quot;, &quot;welcome &quot;, &quot;to &quot;,\n                              &quot;this &quot;, &quot;demo! &quot;}\n\n        &#39; Put all the strings together.\n        Console.WriteLine(String.Concat(s))\n        \n        &#39; Sort the strings, and put them together.\n        Array.Sort(s)\n        Console.WriteLine(String.Concat(s))\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       hello and welcome to this demo!\n&#39;       and demo! hello this to welcome\n</code></pre><pre><code class=\"lang-cs\" name=\"stringconcat3#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Make an array of strings. Note that we have included spaces.\n        string [] s = { &quot;hello &quot;, &quot;and &quot;, &quot;welcome &quot;, &quot;to &quot;,\n                        &quot;this &quot;, &quot;demo! &quot; };\n\n        // Put all the strings together.\n        Console.WriteLine(string.Concat(s));\n\n        // Sort the strings, and put them together.\n        Array.Sort(s);\n        Console.WriteLine(string.Concat(s));\n    }\n}\n// The example displays the following output:\n//       hello and welcome to this demo!\n//       and demo! hello this to welcome\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringconcat3#1\">using namespace System;\n\nint main()\n{\n   \n   // Make an array of strings. Note that we have included spaces.\n   array&lt;String^&gt;^s = { &quot;hello &quot;, &quot;and &quot;, &quot;welcome &quot;, &quot;to &quot;,\n                        &quot;this &quot;, &quot;demo! &quot;};\n   \n   // Put all the strings together.\n   Console::WriteLine( String::Concat(s) );\n   \n   // Sort the strings, and put them together.\n   Array::Sort( s );\n   Console::WriteLine( String::Concat(s));\n}\n// The example displays the following output:\n//       hello and welcome to this demo!\n//       and demo! hello this to welcome\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the string representations of two specified objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (object arg0, object arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenated string representations of the values of <code>arg0</code> and <code>arg1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates <code>arg0</code> and <code>arg1</code>by calling the parameterless <code>ToString</code> method of <code>arg0</code> and <code>arg1</code>; it does not add any delimiters.  </p>\n<p> <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> is used in place of any null argument.  </p>\n<p> If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, &quot;System.String[]&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"string.concat5#1\">using System;\n\nclass stringConcat5 {\n    public static void Main() {\n    int i = -123;\n    Object o = i;\n    Object[] objs = new Object[] {-123, -456, -789};\n\n    Console.WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;);\n    Console.WriteLine(&quot;1) {0}&quot;, String.Concat(o));\n    Console.WriteLine(&quot;2) {0}&quot;, String.Concat(o, o));\n    Console.WriteLine(&quot;3) {0}&quot;, String.Concat(o, o, o));\n\n    Console.WriteLine(&quot;<br>Concatenate 4 objects and a variable length parameter list:&quot;);\n    Console.WriteLine(&quot;4) {0}&quot;, String.Concat(o, o, o, o));\n    Console.WriteLine(&quot;5) {0}&quot;, String.Concat(o, o, o, o, o));\n\n    Console.WriteLine(&quot;<br>Concatenate a 3-element object array:&quot;);\n    Console.WriteLine(&quot;6) {0}&quot;, String.Concat(objs));\n    }\n}\n// The example displays the following output:\n//    Concatenate 1, 2, and 3 objects:\n//    1) -123\n//    2) -123-123\n//    3) -123-123-123\n//    \n//    Concatenate 4 objects and a variable length parameter list:\n//    4) -123-123-123-123\n//    5) -123-123-123-123-123\n//    \n//    Concatenate a 3-element object array:\n//    6) -123-456-789\n</code></pre><pre><code class=\"lang-vb\" name=\"string.concat5#1\">Class stringConcat5\n   Public Shared Sub Main()\n      Dim i As Integer = - 123\n      Dim o As [Object] = i\n      Dim objs() As [Object] = {-123, -456, -789}\n      \n      Console.WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;)\n      Console.WriteLine(&quot;1) {0}&quot;, [String].Concat(o))\n      Console.WriteLine(&quot;2) {0}&quot;, [String].Concat(o, o))\n      Console.WriteLine(&quot;3) {0}&quot;, [String].Concat(o, o, o))\n      \n      Console.WriteLine(vbCrLf &amp; &quot;Concatenate 4 objects and a variable length parameter list:&quot;)\n      Console.WriteLine(&quot;4) {0}&quot;, String.Concat(o, o, o, o))\n      Console.WriteLine(&quot;5) {0}&quot;, String.Concat(o, o, o, o, o))\n      \n      Console.WriteLine(vbCrLf &amp; &quot;Concatenate a 3-element object array:&quot;)\n      Console.WriteLine(&quot;6) {0}&quot;, [String].Concat(objs))\n   End Sub\nEnd Class\n&#39;The example displays the following output:\n&#39;    Concatenate 1, 2, and 3 objects:\n&#39;    1) -123\n&#39;    2) -123-123\n&#39;    3) -123-123-123\n&#39;    \n&#39;    Concatenate 4 objects and a variable length parameter list:\n&#39;    4) -123-123-123-123\n&#39;    5) -123-123-123-123-123\n&#39;         \n&#39;    Concatenate a 3-element object array:\n&#39;    6) -123-456-789\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.concat5#1\">using namespace System;\n\nint main()\n{\n   int i = -123;\n   Object^ o = i;\n   array&lt;Object^&gt;^objs = { -123, -456, -789};\n   Console::WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;);\n   Console::WriteLine(&quot;1) {0}&quot;, String::Concat(o));\n   Console::WriteLine(&quot;2) {0}&quot;, String::Concat(o, o));\n   Console::WriteLine(&quot;3) {0}&quot;, String::Concat(o, o, o));\n   \n   Console::WriteLine(&quot;<br>Concatenate 4 objects and a variable length parameter list:&quot; );\n   Console::WriteLine(&quot;4) {0}&quot;, String::Concat(o, o, o, o));\n   Console::WriteLine(&quot;5) {0}&quot;, String::Concat( o, o, o, o, o));\n   Console::WriteLine(&quot;<br>Concatenate a 3-element object array:&quot;);\n   Console::WriteLine(&quot;6) {0}&quot;, String::Concat(objs));\n}\n// The example displays the following output:\n//    Concatenate 1, 2, and 3 objects:\n//    1) -123\n//    2) -123-123\n//    3) -123-123-123\n//    \n//    Concatenate 4 objects and a variable length parameter list:\n//    4) -123-123-123-123\n//    5) -123-123-123-123-123\n//    \n//    Concatenate a 3-element object array:\n//    6) -123-456-789\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates two specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (string str0, string str1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>str1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenation of <code>str0</code> and <code>str1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates <code>str0</code> and <code>str1</code>; it does not add any delimiters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can also use your language&#39;s string concatenation operator, such as <code>+</code> in C#, or <code>&amp;</code> and <code>+</code> in Visual Basic)  </p>\n<p> , to concatenate strings.  </p>\n</div>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null argument.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example concatenates a person&#39;s first, middle, and last name.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringconcat4#1\">using namespace System;\nint main()\n{\n   \n   // we want to simply quickly add this person&#39;s name together\n   String^ fName = &quot;Simon&quot;;\n   String^ mName = &quot;Jake&quot;;\n   String^ lName = &quot;Harrows&quot;;\n   \n   // because we want a name to appear with a space in between each name, \n   // put a space on the front of the middle, and last name, allowing for\n   // the fact that a space may already be there\n   mName = String::Concat(  &quot; &quot;, mName-&gt;Trim() );\n   lName = String::Concat(  &quot; &quot;, lName-&gt;Trim() );\n   \n   // this line simply concatenates the two strings\n   Console::WriteLine( &quot;Welcome to this page, &#39;{0}&#39;!&quot;, String::Concat( String::Concat( fName, mName ), lName ) );\n}\n// The example displays the following output:\n//        Welcome to this page, &#39;Simon Jake Harrows&#39;!\n</code></pre><pre><code class=\"lang-cs\" name=\"stringconcat4#1\">using System;\n\npublic class ConcatTest {\n    public static void Main() {\n\n        // we want to simply quickly add this person&#39;s name together\n        string fName = &quot;Simon&quot;;\n        string mName = &quot;Jake&quot;;\n        string lName = &quot;Harrows&quot;;\n\n        // because we want a name to appear with a space in between each name, \n        // put a space on the front of the middle, and last name, allowing for\n        // the fact that a space may already be there\n        mName = &quot; &quot; + mName.Trim();\n        lName = &quot; &quot; + lName.Trim();\n\n        // this line simply concatenates the two strings\n        Console.WriteLine(&quot;Welcome to this page, &#39;{0}&#39;!&quot;, string.Concat( string.Concat(fName, mName), lName ) );\n    }\n}\n// The example displays the following output:\n//        Welcome to this page, &#39;Simon Jake Harrows&#39;!\n</code></pre><pre><code class=\"lang-vb\" name=\"stringconcat4#1\">Public Class ConcatTest\n    Public Shared Sub Main()\n        Dim fName As String = &quot;Simon&quot;\n        Dim mName As String = &quot;Jake&quot;\n        Dim lName As String = &quot;Harrows&quot;\n        \n        &#39; We want to simply quickly add this person&#39;s name together.\n        &#39; Because we want a name to appear with a space in between each name, \n        &#39; we put a space on the front of the middle, and last name, allowing for\n        &#39; the fact that a space may already be there.\n        mName = &quot; &quot; + mName.Trim()\n        lName = &quot; &quot; + lName.Trim()\n        \n        &#39; This line simply concatenates the two strings.\n        Console.WriteLine(&quot;Welcome to this page, &#39;{0}&#39;!&quot;, _\n                          String.Concat(String.Concat(fName, mName), lName))\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       Welcome to this page, &#39;Simon Jake Harrows&#39;!\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the string representations of three specified objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (object arg0, object arg1, object arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenated string representations of the values of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates <code>arg0</code>, <code>arg1</code>, and <code>arg2</code> by calling the parameterless <code>ToString</code> method of each object; it does not add any delimiters.  </p>\n<p> <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> is used in place of any null argument.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"string.concat5#1\">using System;\n\nclass stringConcat5 {\n    public static void Main() {\n    int i = -123;\n    Object o = i;\n    Object[] objs = new Object[] {-123, -456, -789};\n\n    Console.WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;);\n    Console.WriteLine(&quot;1) {0}&quot;, String.Concat(o));\n    Console.WriteLine(&quot;2) {0}&quot;, String.Concat(o, o));\n    Console.WriteLine(&quot;3) {0}&quot;, String.Concat(o, o, o));\n\n    Console.WriteLine(&quot;<br>Concatenate 4 objects and a variable length parameter list:&quot;);\n    Console.WriteLine(&quot;4) {0}&quot;, String.Concat(o, o, o, o));\n    Console.WriteLine(&quot;5) {0}&quot;, String.Concat(o, o, o, o, o));\n\n    Console.WriteLine(&quot;<br>Concatenate a 3-element object array:&quot;);\n    Console.WriteLine(&quot;6) {0}&quot;, String.Concat(objs));\n    }\n}\n// The example displays the following output:\n//    Concatenate 1, 2, and 3 objects:\n//    1) -123\n//    2) -123-123\n//    3) -123-123-123\n//    \n//    Concatenate 4 objects and a variable length parameter list:\n//    4) -123-123-123-123\n//    5) -123-123-123-123-123\n//    \n//    Concatenate a 3-element object array:\n//    6) -123-456-789\n</code></pre><pre><code class=\"lang-vb\" name=\"string.concat5#1\">Class stringConcat5\n   Public Shared Sub Main()\n      Dim i As Integer = - 123\n      Dim o As [Object] = i\n      Dim objs() As [Object] = {-123, -456, -789}\n      \n      Console.WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;)\n      Console.WriteLine(&quot;1) {0}&quot;, [String].Concat(o))\n      Console.WriteLine(&quot;2) {0}&quot;, [String].Concat(o, o))\n      Console.WriteLine(&quot;3) {0}&quot;, [String].Concat(o, o, o))\n      \n      Console.WriteLine(vbCrLf &amp; &quot;Concatenate 4 objects and a variable length parameter list:&quot;)\n      Console.WriteLine(&quot;4) {0}&quot;, String.Concat(o, o, o, o))\n      Console.WriteLine(&quot;5) {0}&quot;, String.Concat(o, o, o, o, o))\n      \n      Console.WriteLine(vbCrLf &amp; &quot;Concatenate a 3-element object array:&quot;)\n      Console.WriteLine(&quot;6) {0}&quot;, [String].Concat(objs))\n   End Sub\nEnd Class\n&#39;The example displays the following output:\n&#39;    Concatenate 1, 2, and 3 objects:\n&#39;    1) -123\n&#39;    2) -123-123\n&#39;    3) -123-123-123\n&#39;    \n&#39;    Concatenate 4 objects and a variable length parameter list:\n&#39;    4) -123-123-123-123\n&#39;    5) -123-123-123-123-123\n&#39;         \n&#39;    Concatenate a 3-element object array:\n&#39;    6) -123-456-789\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.concat5#1\">using namespace System;\n\nint main()\n{\n   int i = -123;\n   Object^ o = i;\n   array&lt;Object^&gt;^objs = { -123, -456, -789};\n   Console::WriteLine(&quot;Concatenate 1, 2, and 3 objects:&quot;);\n   Console::WriteLine(&quot;1) {0}&quot;, String::Concat(o));\n   Console::WriteLine(&quot;2) {0}&quot;, String::Concat(o, o));\n   Console::WriteLine(&quot;3) {0}&quot;, String::Concat(o, o, o));\n   \n   Console::WriteLine(&quot;<br>Concatenate 4 objects and a variable length parameter list:&quot; );\n   Console::WriteLine(&quot;4) {0}&quot;, String::Concat(o, o, o, o));\n   Console::WriteLine(&quot;5) {0}&quot;, String::Concat( o, o, o, o, o));\n   Console::WriteLine(&quot;<br>Concatenate a 3-element object array:&quot;);\n   Console::WriteLine(&quot;6) {0}&quot;, String::Concat(objs));\n}\n// The example displays the following output:\n//    Concatenate 1, 2, and 3 objects:\n//    1) -123\n//    2) -123-123\n//    3) -123-123-123\n//    \n//    Concatenate 4 objects and a variable length parameter list:\n//    4) -123-123-123-123\n//    5) -123-123-123-123-123\n//    \n//    Concatenate a 3-element object array:\n//    6) -123-456-789\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates three specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (string str0, string str1, string str2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>str1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>str2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third string to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenation of <code>str0</code>, <code>str1</code>, and <code>str2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates <code>str0</code>, <code>str1</code>, and <code>str2</code>; it does not add any delimiters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can also use your language&#39;s string concatenation operator, such as <code>+</code> in C#, or <code>&amp;</code> and <code>+</code> in Visual Basic)  </p>\n<p> , to concatenate strings.  </p>\n</div>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null argument.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Concat method to concatenate three strings and displays the result.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Concat#6\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s1 = &quot;We went to a bookstore, &quot;;\n      String s2 = &quot;a movie, &quot;;\n      String s3 = &quot;and a restaurant.&quot;;\n\n      var s = String.Concat(s1, s2, s3);\n      Console.WriteLine(s);\n   }\n}\n// The example displays the following output:\n//      We went to a bookstore, a movie, and a restaurant. \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.Concat#6\">using namespace System;\n\nvoid main()\n{\n   String^ s1 = &quot;We went to a bookstore, &quot;;\n   String^ s2 = &quot;a movie, &quot;;\n   String^ s3 = &quot;and a restaurant.&quot;;\n\n   String^ s = String::Concat(s1, s2, s3);\n   Console::WriteLine(s);\n}\n// The example displays the following output:\n//      We went to a bookstore, a movie, and a restaurant. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Concat#6\">Imports System\n\nPublic Module Example\n   Public Sub Main()\n      Dim s1 As String = &quot;We went to a bookstore, &quot;\n      Dim s2 As String = &quot;a movie, &quot;\n      Dim s3 As String = &quot;and a restaurant.&quot;\n\n      Dim s = String.Concat(s1, s2, s3)\n      Console.WriteLine(s)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      We went to a bookstore, a movie, and a restaurant. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_Object_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(Object,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (object arg0, object arg1, object arg2, object arg3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth object to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenated string representation of each value in the parameter list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This API is not CLS-compliant. The CLS-compliant alternative is [String.Concat(Object&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName&gt;. The C# and Visual Basic compilers automatically resolve a call to this method as a call to [String.Concat(Object&lt;xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=fullName&gt;.  </p>\n</div>\n<p> The method concatenates each object in the parameter list by calling its parameterless <code>ToString</code> method; it does not add any delimiters.  </p>\n<p> <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> is used in place of any null argument.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The last parameter of the  Concat method is an optional comma-delimited list of one or more additional objects to concatenate.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the Concat method to concatenate a list of variable parameters. In this case, the method is called with nine parameters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Concat#1\">using System;\nusing System.Collections;\n\npublic class Example\n{\n   public static void Main()\n   {\n      const int WORD_SIZE = 4;\n      \n      // Define some 4-letter words to be scrambled.\n      string[] words = { &quot;home&quot;, &quot;food&quot;, &quot;game&quot;, &quot;rest&quot; };\n      // Define two arrays equal to the number of letters in each word.\n      double[] keys = new double[WORD_SIZE];\n      string[] letters = new string[WORD_SIZE];\n      // Initialize the random number generator.\n      Random rnd = new Random();\n      \n      // Scramble each word.\n      foreach (string word in words)\n      {\n         for (int ctr = 0; ctr &lt; word.Length; ctr++)\n         {\n            // Populate the array of keys with random numbers.\n            keys[ctr] = rnd.NextDouble();\n            // Assign a letter to the array of letters.\n            letters[ctr] = word[ctr].ToString();\n         }   \n         // Sort the array. \n         Array.Sort(keys, letters, 0, WORD_SIZE, Comparer.Default);      \n         // Display the scrambled word.\n         string scrambledWord = String.Concat(letters[0], letters[1], \n                                              letters[2], letters[3]);\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, word, scrambledWord);\n      } \n   }\n}\n// The example displays output like the following:\n//       home --&gt; mheo\n//       food --&gt; oodf\n//       game --&gt; aemg\n//       rest --&gt; trse\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Concat#1\">Imports System.Collections\n\nModule Example\n   Public Sub Main()\n      Const WORD_SIZE As Integer = 4\n      \n      &#39; Define some 4-letter words to be scrambled.\n      Dim words() As String = { &quot;home&quot;, &quot;food&quot;, &quot;game&quot;, &quot;rest&quot; }\n      &#39; Define two arrays equal to the number of letters in each word.\n      Dim keys(WORD_SIZE) As Double\n      Dim letters(WORD_SIZE) As String\n      &#39; Initialize the random number generator.\n      Dim rnd As New Random()\n      \n      &#39; Scramble each word.\n      For Each word As String In words\n         For ctr As Integer = 0 To word.Length - 1\n            &#39; Populate the array of keys with random numbers.\n            keys(ctr) = rnd.NextDouble()\n            &#39; Assign a letter to the array of letters.\n            letters(ctr) = word.Chars(ctr)\n         Next   \n         &#39; Sort the array. \n         Array.Sort(keys, letters, 0, WORD_SIZE, Comparer.Default)      \n         &#39; Display the scrambled word.\n         Dim scrambledWord As String = String.Concat(letters(0), letters(1), _\n                                                     letters(2), letters(3))\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, word, scrambledWord)\n      Next \n   End Sub\nEnd Module \n&#39; The example displays output like the following:\n&#39;       home --&gt; mheo\n&#39;       food --&gt; oodf\n&#39;       game --&gt; aemg\n&#39;       rest --&gt; trse\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat_System_String_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_Concat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat(String,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates four specified instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat (string str0, string str1, string str2, string str3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>str1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>str2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third string to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>str3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth string to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenation of <code>str0</code>, <code>str1</code>, <code>str2</code>, and <code>str3</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates <code>str0</code>, <code>str1</code>, <code>str2</code>, and <code>str3</code>; it does not add any delimiters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can also use your language&#39;s string concatenation operator, such as <code>+</code> in C#, or <code>&amp;</code> and <code>+</code> in Visual Basic)  </p>\n<p> , to concatenate strings.  </p>\n</div>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null object in the array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them. It then calls the Concat method to reassemble the scrambled words.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Concat#1\">using System;\nusing System.Collections;\n\npublic class Example\n{\n   public static void Main()\n   {\n      const int WORD_SIZE = 4;\n      \n      // Define some 4-letter words to be scrambled.\n      string[] words = { &quot;home&quot;, &quot;food&quot;, &quot;game&quot;, &quot;rest&quot; };\n      // Define two arrays equal to the number of letters in each word.\n      double[] keys = new double[WORD_SIZE];\n      string[] letters = new string[WORD_SIZE];\n      // Initialize the random number generator.\n      Random rnd = new Random();\n      \n      // Scramble each word.\n      foreach (string word in words)\n      {\n         for (int ctr = 0; ctr &lt; word.Length; ctr++)\n         {\n            // Populate the array of keys with random numbers.\n            keys[ctr] = rnd.NextDouble();\n            // Assign a letter to the array of letters.\n            letters[ctr] = word[ctr].ToString();\n         }   \n         // Sort the array. \n         Array.Sort(keys, letters, 0, WORD_SIZE, Comparer.Default);      \n         // Display the scrambled word.\n         string scrambledWord = String.Concat(letters[0], letters[1], \n                                              letters[2], letters[3]);\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, word, scrambledWord);\n      } \n   }\n}\n// The example displays output like the following:\n//       home --&gt; mheo\n//       food --&gt; oodf\n//       game --&gt; aemg\n//       rest --&gt; trse\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Concat#1\">Imports System.Collections\n\nModule Example\n   Public Sub Main()\n      Const WORD_SIZE As Integer = 4\n      \n      &#39; Define some 4-letter words to be scrambled.\n      Dim words() As String = { &quot;home&quot;, &quot;food&quot;, &quot;game&quot;, &quot;rest&quot; }\n      &#39; Define two arrays equal to the number of letters in each word.\n      Dim keys(WORD_SIZE) As Double\n      Dim letters(WORD_SIZE) As String\n      &#39; Initialize the random number generator.\n      Dim rnd As New Random()\n      \n      &#39; Scramble each word.\n      For Each word As String In words\n         For ctr As Integer = 0 To word.Length - 1\n            &#39; Populate the array of keys with random numbers.\n            keys(ctr) = rnd.NextDouble()\n            &#39; Assign a letter to the array of letters.\n            letters(ctr) = word.Chars(ctr)\n         Next   \n         &#39; Sort the array. \n         Array.Sort(keys, letters, 0, WORD_SIZE, Comparer.Default)      \n         &#39; Display the scrambled word.\n         Dim scrambledWord As String = String.Concat(letters(0), letters(1), _\n                                                     letters(2), letters(3))\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, word, scrambledWord)\n      Next \n   End Sub\nEnd Module \n&#39; The example displays output like the following:\n&#39;       home --&gt; mheo\n&#39;       food --&gt; oodf\n&#39;       game --&gt; aemg\n&#39;       rest --&gt; trse\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Concat__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_String_Concat_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the members of an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> implementation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Concat&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection object that implements the <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The concatenated members in <code>values</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>values</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method concatenates each object in <code>values</code>; it does not add any delimiters.  </p>\n<p> An <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> string is used in place of any null argument.  </p>\n<p> Concat(T) is a convenience method that lets you concatenate each element in an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection without first converting the elements to strings. It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates. The string representation of each object in the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection is derived by calling that object&#39;s <code>ToString</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a very simple <code>Animal</code> class that contains the name of an animal and the order to which it belongs. It then defines a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object to contain a number of <code>Animal</code> objects. The &lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt; extension method is called to extract the <code>Animal</code> objects whose <code>Order</code> property equals &quot;Rodent&quot;. The result is passed to the Concat(T) method and displayed to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Concat#4\">Imports System.Collections.Generic\n\nPublic Class Animal\n   Public Kind As String\n   Public Order As String\n   \n   Public Sub New(kind As String, order As String)\n      Me.Kind = kind\n      Me.Order = order\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.Kind\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim animals As New List(Of Animal)\n      animals.Add(New Animal(&quot;Squirrel&quot;, &quot;Rodent&quot;))\n      animals.Add(New Animal(&quot;Gray Wolf&quot;, &quot;Carnivora&quot;))\n      animals.Add(New Animal(&quot;Capybara&quot;, &quot;Rodent&quot;)) \n      Dim output As String = String.Concat(animals.Where(Function(animal) _\n                                           animal.Order = &quot;Rodent&quot;))\n      Console.WriteLine(output)                                           \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      SquirrelCapybara\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Concat#4\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Animal\n{\n   public string Kind;\n   public string Order;\n   \n   public Animal(string kind, string order)\n   {\n      this.Kind = kind;\n      this.Order = order;\n   }\n   \n   public override string ToString()\n   {\n      return this.Kind;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      List&lt;Animal&gt; animals = new List&lt;Animal&gt;();\n      animals.Add(new Animal(&quot;Squirrel&quot;, &quot;Rodent&quot;));\n      animals.Add(new Animal(&quot;Gray Wolf&quot;, &quot;Carnivora&quot;));\n      animals.Add(new Animal(&quot;Capybara&quot;, &quot;Rodent&quot;));\n      string output = String.Concat(animals.Where( animal =&gt; \n                      (animal.Order == &quot;Rodent&quot;)));\n      Console.WriteLine(output);  \n   }\n}\n// The example displays the following output:\n//      SquirrelCapybara\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Contains_System_String_\">\r\n    \r\n            <a id=\"System_String_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether a specified substring occurs within this string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter occurs within this string, or if <code>value</code> is the empty string (&quot;&quot;); otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.  </p>\n<p> To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method. The following example illustrates one such approach. It defines a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> extension method  that includes a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter and indicates whether a string contains a substring when using the specified form of string comparison.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Contains#1\">using System;\n\npublic static class StringExtensions\n{\n   public static bool Contains(this String str, String substring, \n                               StringComparison comp)\n   {                            \n      if (substring == null)\n         throw new ArgumentNullException(&quot;substring&quot;, \n                                         &quot;substring cannot be null.&quot;);\n      else if (! Enum.IsDefined(typeof(StringComparison), comp))\n         throw new ArgumentException(&quot;comp is not a member of StringComparison&quot;,\n                                     &quot;comp&quot;);\n\n      return str.IndexOf(substring, comp) &gt;= 0;                      \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Contains#1\">Imports System.Runtime.CompilerServices\n\nModule StringExtensions\n   &lt;Extension()&gt;\n   Public Function Contains(str As String, substring As String, \n                            comp As StringComparison) As Boolean\n      If substring Is Nothing Then\n         Throw New ArgumentNullException(&quot;substring&quot;, \n                                         &quot;substring cannot be null.&quot;)\n      Else If Not [Enum].IsDefined(GetType(StringComparison), comp)\n         Throw New ArgumentException(&quot;comp is not a member of StringComparison&quot;,\n                                     &quot;comp&quot;)\n      End If                               \n      Return str.IndexOf(substring, comp) &gt;= 0                      \n   End Function\nEnd Module\n</code></pre><p> The following example then calls the <code>Contains</code> extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Contains#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;This is a string.&quot;;\n      String sub1 = &quot;this&quot;;\n      Console.WriteLine(&quot;Does &#39;{0}&#39; contain &#39;{1}&#39;?&quot;, s, sub1);\n      StringComparison comp = StringComparison.Ordinal;\n      Console.WriteLine(&quot;   {0:G}: {1}&quot;, comp, s.Contains(sub1, comp));\n      \n      comp = StringComparison.OrdinalIgnoreCase;\n      Console.WriteLine(&quot;   {0:G}: {1}&quot;, comp, s.Contains(sub1, comp));\n   }\n}\n// The example displays the following output:\n//       Does &#39;This is a string.&#39; contain &#39;this&#39;?\n//          Ordinal: False\n//          OrdinalIgnoreCase: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Contains#2\">Public Module Example\n   Public Sub Main\n      Dim s As String = &quot;This is a string.&quot;\n      Dim sub1 As String = &quot;this&quot;\n      Console.WriteLine(&quot;Does &#39;{0}&#39; contain &#39;{1}&#39;?&quot;, s, sub1)\n      Dim comp As StringComparison = StringComparison.Ordinal\n      Console.WriteLine(&quot;   {0:G}: {1}&quot;, comp, s.Contains(sub1, comp))\n      \n      comp = StringComparison.OrdinalIgnoreCase\n      Console.WriteLine(&quot;   {0:G}: {1}&quot;, comp, s.Contains(sub1, comp))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Does &#39;This is a string.&#39; contain &#39;this&#39;?\n&#39;          Ordinal: False\n&#39;          OrdinalIgnoreCase: True\n</code></pre><p> If you are interested in the position of the substring <code>value</code> in the current instance, you can call the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to get the starting position of its first occurrence, or you can call the <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method to get the starting position of its last occurrence. The example includes a call to the <a class=\"xref\" href=\"system.string#System_String_IndexOf_System_String_\" data-linktype=\"relative-path\">IndexOf(String)</a> method if a substring is found in a string instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether the string &quot;fox&quot; is a substring of a familiar quotation. If &quot;fox&quot; is found in the string, it also displays its starting position.  </p>\n<pre><code class=\"lang-vb\" name=\"String.Contains#1\">Class Example\n   Public Shared Sub Main()\n      Dim s1 As String = &quot;The quick brown fox jumps over the lazy dog&quot;\n      Dim s2 As String = &quot;fox&quot;\n      Dim b As Boolean = s1.Contains(s2)\n      Console.WriteLine(&quot;&#39;{0}&#39; is in the string &#39;{1}&#39;: {2}&quot;,\n                        s2, s1, b)\n      If b Then\n          Dim index As Integer = s1.IndexOf(s2)\n          If index &gt;= 0 Then\n             Console.WriteLine(&quot;&#39;{0} begins at character position {1}&quot;,\n                               s2, index + 1)\n          End If\n       End If\n   End Sub\nEnd Class\n&#39;\n&#39; This example displays the following output:\n&#39;    &#39;fox&#39; is in the string &#39;The quick brown fox jumps over the lazy dog&#39;: True\n&#39;    &#39;fox begins at character position 17\n</code></pre><pre><code class=\"lang-cs\" name=\"String.Contains#1\">using System;\n\nclass Example\n{\n    public static void Main() \n    {\n       string s1 = &quot;The quick brown fox jumps over the lazy dog&quot;;\n       string s2 = &quot;fox&quot;;\n       bool b = s1.Contains(s2);\n       Console.WriteLine(&quot;&#39;{0}&#39; is in the string &#39;{1}&#39;: {2}&quot;,\n                          s2, s1, b);\n       if (b) {\n          int index = s1.IndexOf(s2);\n          if (index &gt;= 0)\n             Console.WriteLine(&quot;&#39;{0} begins at character position {1}&quot;,\n                               s2, index + 1);\n       }\n    }\n}\n// This example display the following output:\n//    &#39;fox&#39; is in the string &#39;The quick brown fox jumps over the lazy dog&#39;: True\n//    &#39;fox begins at character position 17\n</code></pre><pre><code class=\"lang-cpp\" name=\"String.Contains#1\">using namespace System;\n\nint main()\n{\n   String^ s1 = &quot;The quick brown fox jumps over the lazy dog&quot;;\n   String^ s2 = &quot;fox&quot;;\n   bool b = s1-&gt;Contains( s2 );\n   Console::WriteLine( &quot;Is the string, s2, in the string, s1?: {0}&quot;, b );\n   if (b) {\n      int index = s1-&gt;IndexOf(s2);\n      if (index &gt;= 0)\n         Console::WriteLine(&quot;&#39;{0} begins at character position {1}&quot;,\n                            s2, index + 1);\n   }\n}\n// This example displays the following output:\n//    &#39;fox&#39; is in the string &#39;The quick brown fox jumps over the lazy dog&#39;: True\n//    &#39;fox begins at character position 17\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Copy_System_String_\">\r\n    \r\n            <a id=\"System_String_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> with the same value as a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Copy (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string with the same value as <code>str</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>TheCopy method returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object that has the same value as the original string but represents a different object reference. It differs from an assignment operation, which assigns an existing string reference to an additional object variable. The example illustrates the difference.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two string objects with different values. When it calls the Copy method to assign the first value to the second string, the output indicates that the strings represent different object references although their values are now equal. On the other hand, when the first string is assigned to the second string, the two strings have identical values because they represent the same object reference.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Copy#1\">Module Example\n   Public Sub Main()\n      Dim str1 As String = &quot;abc&quot;\n      Dim str2 As String = &quot;xyz&quot;\n          \n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;&quot;, str1)\n      Console.WriteLine(&quot;str2 = &#39;{0}&#39;&quot;, str2)\n      Console.WriteLine()\n          \n      Console.WriteLine(&quot;After String.Copy...&quot;)\n      str2 = String.Copy(str1)\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;&quot;, str1)\n      Console.WriteLine(&quot;str2 = &#39;{0}&#39;&quot;, str2)\n      Console.WriteLine(&quot;ReferenceEquals: {0}&quot;, Object.ReferenceEquals(str1, str2))\n      Console.WriteLine(&quot;Equals: {0}&quot;, Object.Equals(str1, str2))\n      Console.WriteLine()\n          \n      Console.WriteLine(&quot;After Assignment...&quot;)\n      str2 = str1\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;&quot;, str1)\n      Console.WriteLine(&quot;str2 = &#39;{0}&#39;&quot;, str2)\n      Console.WriteLine(&quot;ReferenceEquals: {0}&quot;, Object.ReferenceEquals(str1, str2))\n      Console.WriteLine(&quot;Equals: {0}&quot;, Object.Equals(str1, str2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       str1 = &#39;abc&#39;\n&#39;       str2 = &#39;xyz&#39;\n&#39;       \n&#39;       After String.Copy...\n&#39;       str1 = &#39;abc&#39;\n&#39;       str2 = &#39;abc&#39;\n&#39;       ReferenceEquals: False\n&#39;       Equals: True\n&#39;       \n&#39;       After Assignment...\n&#39;       str1 = &#39;abc&#39;\n&#39;       str2 = &#39;abc&#39;\n&#39;       ReferenceEquals: True\n&#39;       Equals: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Copy#1\">using System;\n\nclass Example\n{\n   public static void Main() \n   {\n      string str1 = &quot;abc&quot;;\n      string str2 = &quot;xyz&quot;;\n          \n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;&quot;, str1);\n      Console.WriteLine(&quot;str2 = &#39;{0}&#39;&quot;, str2);\n          \n      Console.WriteLine(&quot;<br>After String.Copy...&quot;);\n      str2 = String.Copy(str1);\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;&quot;, str1);\n      Console.WriteLine(&quot;str2 = &#39;{0}&#39;&quot;, str2);\n      Console.WriteLine(&quot;ReferenceEquals: {0}&quot;, Object.ReferenceEquals(str1, str2));\n      Console.WriteLine(&quot;Equals: {0}&quot;, Object.Equals(str1, str2));\n          \n      Console.WriteLine(&quot;<br>After Assignment...&quot;);\n      str2 = str1;\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;&quot;, str1);\n      Console.WriteLine(&quot;str2 = &#39;{0}&#39;&quot;, str2);\n      Console.WriteLine(&quot;ReferenceEquals: {0}&quot;, Object.ReferenceEquals(str1, str2));\n      Console.WriteLine(&quot;Equals: {0}&quot;, Object.Equals(str1, str2));\n   }\n}\n// The example displays the following output:\n//       str1 = &#39;abc&#39;\n//       str2 = &#39;xyz&#39;\n//       \n//       After String.Copy...\n//       str1 = &#39;abc&#39;\n//       str2 = &#39;abc&#39;\n//       ReferenceEquals: False\n//       Equals: True\n//       \n//       After Assignment...\n//       str1 = &#39;abc&#39;\n//       str2 = &#39;abc&#39;\n//       ReferenceEquals: True\n//       Equals: True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_CopyTo_System_Int32_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Int32,Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character in this instance to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Unicode characters to which characters in this instance are copied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index in <code>destination</code> at which the copy operation begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in this instance to copy to <code>destination</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destination</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code> is negative  </p>\n<p> -or-  </p>\n<p> <code>sourceIndex</code> does not identify a position in the current instance.  </p>\n<p> -or-  </p>\n<p> <code>destinationIndex</code> does not identify a valid index in the <code>destination</code> array.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of the substring from <code>startIndex</code> to the end of this instance  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of the subarray from <code>destinationIndex</code> to the end of the <code>destination</code> array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method copies <code>count</code> characters from the <code>sourceIndex</code> position of this instance to the <code>destinationIndex</code> position of <code>destination</code> character array. This method does not resize the <code>destination</code> character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>.  </p>\n<p> <code>sourceIndex</code> and <code>destinationIndex</code> are zero-based.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the CopyTo method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringcopyto#1\">using namespace System;\nint main()\n{\n   \n   // Embed an array of characters in a string\n   String^ strSource = &quot;changed&quot;;\n   array&lt;Char&gt;^destination = {&#39;T&#39;,&#39;h&#39;,&#39;e&#39;,&#39; &#39;,&#39;i&#39;,&#39;n&#39;,&#39;i&#39;,&#39;t&#39;,&#39;i&#39;,&#39;a&#39;,&#39;l&#39;,&#39; &#39;,&#39;a&#39;,&#39;r&#39;,&#39;r&#39;,&#39;a&#39;,&#39;y&#39;};\n   \n   // Print the char array\n   Console::WriteLine( destination );\n   \n   // Embed the source string in the destination string\n   strSource-&gt;CopyTo( 0, destination, 4, strSource-&gt;Length );\n   \n   // Print the resulting array\n   Console::WriteLine( destination );\n   strSource = &quot;A different string&quot;;\n   \n   // Embed only a section of the source string in the destination\n   strSource-&gt;CopyTo( 2, destination, 3, 9 );\n   \n   // Print the resulting array\n   Console::WriteLine( destination );\n}\n// The example displays the following output:\n//       The initial array\n//       The changed array\n//       Thedifferentarray\n</code></pre><pre><code class=\"lang-cs\" name=\"stringcopyto#1\">using System;\n\npublic class CopyToTest {\n    public static void Main() {\n\n        // Embed an array of characters in a string\n        string strSource = &quot;changed&quot;;\n    char [] destination = { &#39;T&#39;, &#39;h&#39;, &#39;e&#39;, &#39; &#39;, &#39;i&#39;, &#39;n&#39;, &#39;i&#39;, &#39;t&#39;, &#39;i&#39;, &#39;a&#39;, &#39;l&#39;, &#39; &#39;,\n                &#39;a&#39;, &#39;r&#39;, &#39;r&#39;, &#39;a&#39;, &#39;y&#39; };\n\n        // Print the char array\n        Console.WriteLine( destination );\n\n        // Embed the source string in the destination string\n        strSource.CopyTo ( 0, destination, 4, strSource.Length );\n\n        // Print the resulting array\n        Console.WriteLine( destination );\n\n        strSource = &quot;A different string&quot;;\n\n        // Embed only a section of the source string in the destination\n        strSource.CopyTo ( 2, destination, 3, 9 );\n\n        // Print the resulting array\n        Console.WriteLine( destination );\n    }\n}\n// The example displays the following output:\n//       The initial array\n//       The changed array\n//       Thedifferentarray\n</code></pre><pre><code class=\"lang-vb\" name=\"stringcopyto#1\">Public Class CopyToTest\n    Public Shared Sub Main()\n        &#39; Embed an array of characters in a string\n        Dim strSource As String = &quot;changed&quot;\n        Dim destination As Char() = {&quot;T&quot;c, &quot;h&quot;c, &quot;e&quot;c, &quot; &quot;c, &quot;i&quot;c, &quot;n&quot;c, &quot;i&quot;c, _\n                    &quot;t&quot;c, &quot;i&quot;c, &quot;a&quot;c, &quot;l&quot;c, &quot; &quot;c, &quot;a&quot;c, &quot;r&quot;c, &quot;r&quot;c, &quot;a&quot;c, &quot;y&quot;c}\n\n        &#39; Print the char array\n        Console.WriteLine(destination)\n\n        &#39; Embed the source string in the destination string\n        strSource.CopyTo(0, destination, 4, strSource.Length)\n\n        &#39; Print the resulting array\n        Console.WriteLine(destination)\n\n        strSource = &quot;A different string&quot;\n\n        &#39; Embed only a section of the source string in the destination\n        strSource.CopyTo(2, destination, 3, 9)\n\n        &#39; Print the resulting array\n        Console.WriteLine(destination)\n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;       The initial array\n&#39;       The changed array\n&#39;       Thedifferentarray\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_EndsWith_System_String_\">\r\n    \r\n            <a id=\"System_String_EndsWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndsWith(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the end of this string instance matches the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EndsWith (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare to the substring at the end of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> matches the end of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method compares <code>value</code> to the substring at the end of this instance that is the same length as <code>value</code>, and returns an indication whether they are equal. To be equal, <code>value</code> must be a reference to this same instance or match the end of this instance.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example indicates whether each string in an array ends with a period (&quot;.&quot;).  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.EndsWith#1\">Module Example\n   Public Sub Main()\n      Dim strings() As String = { &quot;This is a string.&quot;, &quot;Hello!&quot;, \n                                  &quot;Nothing.&quot;, &quot;Yes.&quot;, &quot;randomize&quot; }\n      For Each value In strings\n         Dim endsInPeriod As Boolean = value.EndsWith(&quot;.&quot;)\n         Console.WriteLine(&quot;&#39;{0}&#39; ends in a period: {1}&quot;, \n                           value, endsInPeriod)\n      Next                            \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;This is a string.&#39; ends in a period: True\n&#39;       &#39;Hello!&#39; ends in a period: False\n&#39;       &#39;Nothing.&#39; ends in a period: True\n&#39;       &#39;Yes.&#39; ends in a period: True\n&#39;       &#39;randomize&#39; ends in a period: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.EndsWith#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] strings = { &quot;This is a string.&quot;, &quot;Hello!&quot;, &quot;Nothing.&quot;, \n                           &quot;Yes.&quot;, &quot;randomize&quot; };\n      foreach (var value in strings) {\n         bool endsInPeriod = value.EndsWith(&quot;.&quot;);\n         Console.WriteLine(&quot;&#39;{0}&#39; ends in a period: {1}&quot;, \n                           value, endsInPeriod);\n      }                            \n   }\n}\n// The example displays the following output:\n//       &#39;This is a string.&#39; ends in a period: True\n//       &#39;Hello!&#39; ends in a period: False\n//       &#39;Nothing.&#39; ends in a period: True\n//       &#39;Yes.&#39; ends in a period: True\n//       &#39;randomize&#39; ends in a period: False\n</code></pre><p> The following example defines a <code>StripEndTags</code> method that uses the EndsWith method to remove HTML end tags from the end of a line. Note that the  <code>StripEndTags</code> method is called recursively to ensure that multiple HTML end tags at the end of the line are removed.  </p>\n<pre><code class=\"lang-vb\" name=\"stringendswith#1\">Public Module Example\n    Public Sub Main()\n        Dim strSource() As String = { &quot;&lt;b&gt;This is bold text&lt;/b&gt;&quot;, \n                    &quot;&lt;H1&gt;This is large Text&lt;/H1&gt;&quot;, \n                    &quot;&lt;b&gt;&lt;i&gt;&lt;font color = green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&quot;, \n                    &quot;&lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;&quot;, \n                    &quot;This line simply ends with a greater than symbol, it should not be modified&gt;&quot; }\n\n        Console.WriteLine(&quot;The following lists the items before the ends have been stripped:&quot;)\n        Console.WriteLine(&quot;-----------------------------------------------------------------&quot;)\n\n        &#39; Display the initial array of strings.\n        For Each s As String In  strSource\n            Console.WriteLine(s)\n        Next\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;The following lists the items after the ends have been stripped:&quot;)\n        Console.WriteLine(&quot;----------------------------------------------------------------&quot;)\n\n        &#39; Display the array of strings.\n        For Each s As String In strSource\n            Console.WriteLine(StripEndTags(s))\n        Next \n    End Sub \n\n    Private Function StripEndTags(item As String) As String\n        Dim found As Boolean = False\n        \n        &#39; Try to find a tag at the end of the line using EndsWith.\n        If item.Trim().EndsWith(&quot;&gt;&quot;) Then\n            &#39; now search for the opening tag...\n            Dim lastLocation As Integer = item.LastIndexOf(&quot;&lt;/&quot;)\n            If lastLocation &gt;= 0 Then\n                found = True\n                \n                &#39; Remove the identified section, if it is a valid region.\n                item = item.Substring(0, lastLocation)\n            End If\n        End If\n        \n        If found Then item = StripEndTags(item)\n        Return item\n    End Function \nEnd Module\n&#39; The example displays the following output:\n&#39;    The following lists the items before the ends have been stripped:\n&#39;    -----------------------------------------------------------------\n&#39;    &lt;b&gt;This is bold text&lt;/b&gt;\n&#39;    &lt;H1&gt;This is large Text&lt;/H1&gt;\n&#39;    &lt;b&gt;&lt;i&gt;&lt;font color = green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n&#39;    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n&#39;    This line simply ends with a greater than symbol, it should not be modified&gt;\n&#39;    \n&#39;    The following lists the items after the ends have been stripped:\n&#39;    ----------------------------------------------------------------\n&#39;    &lt;b&gt;This is bold text\n&#39;    &lt;H1&gt;This is large Text\n&#39;    &lt;b&gt;&lt;i&gt;&lt;font color = green&gt;This has multiple tags\n&#39;    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.\n&#39;    This line simply ends with a greater than symbol, it should not be modified&gt;\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringendswith#1\">using namespace System;\nusing namespace System::Collections;\n\nString^ StripEndTags( String^ item )\n{\n   bool found = false;\n   \n   // try to find a tag at the end of the line using EndsWith\n   if ( item-&gt;Trim()-&gt;EndsWith( &quot;&gt;&quot; ) )\n   {\n      \n      // now search for the opening tag...\n      int lastLocation = item-&gt;LastIndexOf( &quot;&lt;/&quot; );\n      \n      // remove the identified section, if it is a valid region\n      if ( lastLocation &gt;= 0 ) {\n            item = item-&gt;Substring( 0, lastLocation );\n            found = true;\n      }\n   }\n\n   if (found) item = StripEndTags(item);\n   \n   return item;\n}\n\nint main()\n{\n   \n   // process an input file that contains html tags.\n   // this sample checks for multiple tags at the end of the line, rather than simply\n   // removing the last one.\n   // note: HTML markup tags always end in a greater than symbol (&gt;).\n   array&lt;String^&gt;^strSource = {&quot;&lt;b&gt;This is bold text&lt;/b&gt;&quot;,&quot;&lt;H1&gt;This is large Text&lt;/H1&gt;&quot;,&quot;&lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&quot;,&quot;&lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;&quot;,&quot;This line simply ends with a greater than symbol, it should not be modified&gt;&quot;};\n   Console::WriteLine( &quot;The following lists the items before the ends have been stripped:&quot; );\n   Console::WriteLine( &quot;-----------------------------------------------------------------&quot; );\n   \n   // print out the initial array of strings\n   IEnumerator^ myEnum1 = strSource-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( s );\n   }\n\n   Console::WriteLine();\n   Console::WriteLine( &quot;The following lists the items after the ends have been stripped:&quot; );\n   Console::WriteLine( &quot;----------------------------------------------------------------&quot; );\n   \n   // Display the array of strings.\n   IEnumerator^ myEnum2 = strSource-&gt;GetEnumerator();\n   while ( myEnum2-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum2-&gt;Current);\n      Console::WriteLine( StripEndTags( s ) );\n   }\n}\n// The example displays the following output:\n//    The following lists the items before the ends have been stripped:\n//    -----------------------------------------------------------------\n//    &lt;b&gt;This is bold text&lt;/b&gt;\n//    &lt;H1&gt;This is large Text&lt;/H1&gt;\n//    &lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n//    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n//    This line simply ends with a greater than symbol, it should not be modified&gt;\n//    \n//    The following lists the items after the ends have been stripped:\n//    ----------------------------------------------------------------\n//    &lt;b&gt;This is bold text\n//    &lt;H1&gt;This is large Text\n//    &lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags\n//    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.\n//    This line simply ends with a greater than symbol, it should not be modified&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"stringendswith#1\">using System;\n\npublic class EndsWithTest {\n    public static void Main() {\n\n        // process an input file that contains html tags.\n        // this sample checks for multiple tags at the end of the line, rather than simply\n        // removing the last one.\n        // note: HTML markup tags always end in a greater than symbol (&gt;).\n\n        string [] strSource = { &quot;&lt;b&gt;This is bold text&lt;/b&gt;&quot;, &quot;&lt;H1&gt;This is large Text&lt;/H1&gt;&quot;,\n                &quot;&lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&quot;,\n                &quot;&lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;&quot;,\n                &quot;This line simply ends with a greater than symbol, it should not be modified&gt;&quot; };\n\n        Console.WriteLine(&quot;The following lists the items before the ends have been stripped:&quot;);\n        Console.WriteLine(&quot;-----------------------------------------------------------------&quot;);\n\n        // print out the initial array of strings\n        foreach ( string s in strSource )\n            Console.WriteLine( s );\n\n        Console.WriteLine();\n\n        Console.WriteLine(&quot;The following lists the items after the ends have been stripped:&quot;);\n        Console.WriteLine(&quot;----------------------------------------------------------------&quot;);\n\n        // print out the array of strings\n        foreach (var s in strSource)\n            Console.WriteLine(StripEndTags(s));\n    }\n\n    private static string StripEndTags( string item ) {\n\n        bool found = false;\n            \n        // try to find a tag at the end of the line using EndsWith\n        if (item.Trim().EndsWith(&quot;&gt;&quot;)) {\n                \n            // now search for the opening tag...\n            int lastLocation = item.LastIndexOf( &quot;&lt;/&quot; );\n\n            // remove the identified section, if it is a valid region\n            if ( lastLocation &gt;= 0 ) {\n                found = true;\n                item =  item.Substring( 0, lastLocation );\n            }    \n        }\n\n        if (found)\n           item = StripEndTags(item);\n           \n        return item;\n    }\n}\n// The example displays the following output:\n//    The following lists the items before the ends have been stripped:\n//    -----------------------------------------------------------------\n//    &lt;b&gt;This is bold text&lt;/b&gt;\n//    &lt;H1&gt;This is large Text&lt;/H1&gt;\n//    &lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n//    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n//    This line simply ends with a greater than symbol, it should not be modified&gt;\n//    \n//    The following lists the items after the ends have been stripped:\n//    ----------------------------------------------------------------\n//    &lt;b&gt;This is bold text\n//    &lt;H1&gt;This is large Text\n//    &lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags\n//    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.\n//    This line simply ends with a greater than symbol, it should not be modified&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_EndsWith_System_String_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_EndsWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndsWith(String,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EndsWith (string value, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare to the substring at the end of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that determines how this string and <code>value</code> are compared.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter matches the end of this string; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EndsWith method compares the <code>value</code> parameter to the substring at the end of this string and returns a value that indicates whether they are equal. To be equal, <code>value</code> must be a reference to this same string, must be the empty string (&quot;&quot;), or must match the end of this string. The type of comparison performed by the EndsWith method depends on the value of the <code>comparisonType</code>parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a string ends with a particular substring. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.EndsWithCmp#1\">// This example demonstrates the \n// System.String.EndsWith(String, StringComparison) method.\n\nusing namespace System;\nusing namespace System::Threading;\n\nvoid Test(String^ testString, String^ searchString, \n     StringComparison comparison)\n{\n    String^ resultFormat = &quot;\\&quot;{0}\\&quot; {1} with \\&quot;{2}\\&quot;.&quot;;\n    String^ resultString = &quot;does not end&quot;;\n\n    if (testString-&gt;EndsWith(searchString, comparison))\n    {\n        resultString = &quot;ends&quot;;\n    }\n    Console::WriteLine(resultFormat, testString, resultString, searchString);\n}\n\nint main()\n{\n    String^ introMessage =\n        &quot;Determine whether a string ends with another string, &quot; +\n        &quot;using<br>different values of StringComparison.&quot;;\n\n    array&lt;StringComparison&gt;^ comparisonValues = {\n        StringComparison::CurrentCulture,\n        StringComparison::CurrentCultureIgnoreCase,\n        StringComparison::InvariantCulture,\n        StringComparison::InvariantCultureIgnoreCase,\n        StringComparison::Ordinal,\n        StringComparison::OrdinalIgnoreCase};\n\n    Console::Clear();\n    Console::WriteLine(introMessage);\n\n    // Display the current culture because the culture-specific comparisons\n    // can produce different results with different cultures.\n    Console::WriteLine(&quot;The current culture is {0}.<br>&quot;,\n        Thread::CurrentThread-&gt;CurrentCulture-&gt;Name);\n    // Perform two tests for each StringComparison\n    for each (StringComparison stringCmp in comparisonValues)\n    {\n        Console::WriteLine(&quot;StringComparison.{0}:&quot;, stringCmp);\n        Test(&quot;abcXYZ&quot;, &quot;XYZ&quot;, stringCmp);\n        Test(&quot;abcXYZ&quot;, &quot;xyz&quot;, stringCmp);\n        Console::WriteLine();\n    }\n}\n\n/*\nThis code example produces the following results:\n\nDetermine whether a string ends with another string, using\ndifferent values of StringComparison.\nThe current culture is en-US.\n\nStringComparison.CurrentCulture:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n\nStringComparison.CurrentCultureIgnoreCase:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n\nStringComparison.InvariantCulture:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n\nStringComparison.InvariantCultureIgnoreCase:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n\nStringComparison.Ordinal:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n\nStringComparison.OrdinalIgnoreCase:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.EndsWithCmp#1\">&#39; This example demonstrates the \n&#39; System.String.EndsWith(String, StringComparison) method.\n\nImports System\nImports System.Threading\n\nClass Sample\n    Public Shared Sub Main() \n        Dim intro As String = &quot;Determine whether a string ends with another string, &quot; &amp; _\n                              &quot;using&quot; &amp; vbCrLf &amp; &quot;  different values of StringComparison.&quot;\n        \n        Dim scValues As StringComparison() =  { _\n                        StringComparison.CurrentCulture, _\n                        StringComparison.CurrentCultureIgnoreCase, _\n                        StringComparison.InvariantCulture, _\n                        StringComparison.InvariantCultureIgnoreCase, _\n                        StringComparison.Ordinal, _\n                        StringComparison.OrdinalIgnoreCase }\n        &#39;\n        Console.Clear()\n        Console.WriteLine(intro)\n        \n        &#39; Display the current culture because the culture-specific comparisons\n        &#39; can produce different results with different cultures.\n        Console.WriteLine(&quot;The current culture is {0}.&quot; &amp; vbCrLf, _\n                           Thread.CurrentThread.CurrentCulture.Name)\n\n        &#39; Determine whether three versions of the letter I are equal to each other. \n        Dim sc As StringComparison\n        For Each sc In  scValues\n            Console.WriteLine(&quot;StringComparison.{0}:&quot;, sc)\n            Test(&quot;abcXYZ&quot;, &quot;XYZ&quot;, sc)\n            Test(&quot;abcXYZ&quot;, &quot;xyz&quot;, sc)\n            Console.WriteLine()\n        Next sc\n    \n    End Sub &#39;Main\n    \n    \n    Protected Shared Sub Test(ByVal x As String, ByVal y As String, _\n                              ByVal comparison As StringComparison) \n        Dim resultFmt As String = &quot;&quot;&quot;{0}&quot;&quot; {1} with &quot;&quot;{2}&quot;&quot;.&quot;\n        Dim result As String = &quot;does not end&quot;\n        &#39;\n        If x.EndsWith(y, comparison) Then\n            result = &quot;ends&quot;\n        End If\n        Console.WriteLine(resultFmt, x, result, y)\n    \n    End Sub &#39;Test\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Determine whether a string ends with another string, using\n&#39;  different values of StringComparison.\n&#39;The current culture is en-US.\n&#39;\n&#39;StringComparison.CurrentCulture:\n&#39;&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&#39;&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n&#39;\n&#39;StringComparison.CurrentCultureIgnoreCase:\n&#39;&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&#39;&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n&#39;\n&#39;StringComparison.InvariantCulture:\n&#39;&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&#39;&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n&#39;\n&#39;StringComparison.InvariantCultureIgnoreCase:\n&#39;&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&#39;&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n&#39;\n&#39;StringComparison.Ordinal:\n&#39;&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&#39;&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n&#39;\n&#39;StringComparison.OrdinalIgnoreCase:\n&#39;&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&#39;&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.EndsWithCmp#1\">// This example demonstrates the \n// System.String.EndsWith(String, StringComparison) method.\n\nusing System;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string intro = &quot;Determine whether a string ends with another string, &quot; +\n                   &quot;using<br>  different values of StringComparison.&quot;;\n\n    StringComparison[] scValues = {\n        StringComparison.CurrentCulture,\n        StringComparison.CurrentCultureIgnoreCase,\n        StringComparison.InvariantCulture,\n        StringComparison.InvariantCultureIgnoreCase,\n        StringComparison.Ordinal,\n        StringComparison.OrdinalIgnoreCase };\n\n//\n    Console.Clear();\n    Console.WriteLine(intro);\n\n// Display the current culture because the culture-specific comparisons\n// can produce different results with different cultures.\n    Console.WriteLine(&quot;The current culture is {0}.<br>&quot;, \n                       Thread.CurrentThread.CurrentCulture.Name);\n\n// Determine whether three versions of the letter I are equal to each other. \n    foreach (StringComparison sc in scValues)\n        {\n        Console.WriteLine(&quot;StringComparison.{0}:&quot;, sc);\n        Test(&quot;abcXYZ&quot;, &quot;XYZ&quot;, sc);\n        Test(&quot;abcXYZ&quot;, &quot;xyz&quot;, sc);\n        Console.WriteLine();\n        }\n    }\n\n    protected static void Test(string x, string y, StringComparison comparison)\n    {\n    string resultFmt = &quot;\\&quot;{0}\\&quot; {1} with \\&quot;{2}\\&quot;.&quot;;\n    string result = &quot;does not end&quot;;\n//\n    if (x.EndsWith(y, comparison))\n        result = &quot;ends&quot;;\n    Console.WriteLine(resultFmt, x, result, y);\n    }\n}\n\n/*\nThis code example produces the following results:\n\nDetermine whether a string ends with another string, using\n  different values of StringComparison.\nThe current culture is en-US.\n\nStringComparison.CurrentCulture:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n\nStringComparison.CurrentCultureIgnoreCase:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n\nStringComparison.InvariantCulture:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n\nStringComparison.InvariantCultureIgnoreCase:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n\nStringComparison.Ordinal:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; does not end with &quot;xyz&quot;.\n\nStringComparison.OrdinalIgnoreCase:\n&quot;abcXYZ&quot; ends with &quot;XYZ&quot;.\n&quot;abcXYZ&quot; ends with &quot;xyz&quot;.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_EndsWith_System_String_System_Boolean_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_String_EndsWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndsWith(String,Boolean,CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the end of this string instance matches the specified string when compared using the specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare to the substring at the end of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Cultural information that determines how this instance and <code>value</code> are compared. If <code>culture</code> is <code>null</code>, the current culture is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter matches the end of this string; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method compares the <code>value</code> parameter to the substring at the end of this string that is the same length as <code>value</code>, and returns a value that indicates whether they are equal. To be equal, <code>value</code> must be a reference to this same instance or match the end of this string.  </p>\n<p> This method performs a word (culture-sensitive) comparison using the specified casing and culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a string occurs at the end of another string. The EndsWith method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.  </p>\n<pre><code class=\"lang-cs\" name=\"system.string.EndsWithCI#1\">// This code example demonstrates the \n// System.String.EndsWith(String, ..., CultureInfo) method.\n\nusing System;\nusing System.Threading;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string msg1 = &quot;Search for the target string \\&quot;{0}\\&quot; in the string \\&quot;{1}\\&quot;.<br>&quot;;\n    string msg2 = &quot;Using the {0} - \\&quot;{1}\\&quot; culture:&quot;;\n    string msg3 = &quot;  The string to search ends with the target string: {0}&quot;;\n    bool result = false;\n    CultureInfo ci;\n\n// Define a target string to search for.\n// U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n    string capitalARing = &quot;\\u00c5&quot;;\n\n// Define a string to search. \n// The result of combining the characters LATIN SMALL LETTER A and COMBINING \n// RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n// LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n    string xyzARing = &quot;xyz&quot; + &quot;\\u0061\\u030a&quot;;\n\n// Clear the screen and display an introduction.\n    Console.Clear();\n\n// Display the string to search for and the string to search.\n    Console.WriteLine(msg1, capitalARing, xyzARing);\n\n// Search using English-United States culture.\n    ci = new CultureInfo(&quot;en-US&quot;);\n    Console.WriteLine(msg2, ci.DisplayName, ci.Name);\n\n    Console.WriteLine(&quot;Case sensitive:&quot;);\n    result = xyzARing.EndsWith(capitalARing, false, ci);\n    Console.WriteLine(msg3, result);\n\n    Console.WriteLine(&quot;Case insensitive:&quot;);\n    result = xyzARing.EndsWith(capitalARing, true, ci);\n    Console.WriteLine(msg3, result);\n    Console.WriteLine();\n\n// Search using Swedish-Sweden culture.\n    ci = new CultureInfo(&quot;sv-SE&quot;);\n    Console.WriteLine(msg2, ci.DisplayName, ci.Name);\n\n    Console.WriteLine(&quot;Case sensitive:&quot;);\n    result = xyzARing.EndsWith(capitalARing, false, ci);\n    Console.WriteLine(msg3, result);\n\n    Console.WriteLine(&quot;Case insensitive:&quot;);\n    result = xyzARing.EndsWith(capitalARing, true, ci);\n    Console.WriteLine(msg3, result);\n    }\n}\n\n/*\nNote: This code example was executed on a console whose user interface \nculture is &quot;en-US&quot; (English-United States).\n\nThis code example produces the following results:\n\nSearch for the target string &quot;&#197;&quot; in the string &quot;xyza&#176;&quot;.\n\nUsing the English (United States) - &quot;en-US&quot; culture:\nCase sensitive:\n  The string to search ends with the target string: False\nCase insensitive:\n  The string to search ends with the target string: True\n\nUsing the Swedish (Sweden) - &quot;sv-SE&quot; culture:\nCase sensitive:\n  The string to search ends with the target string: False\nCase insensitive:\n  The string to search ends with the target string: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.string.EndsWithCI#1\">&#39; This code example demonstrates the \n&#39; System.String.EndsWith(String, ..., CultureInfo) method.\n\nImports System\nImports System.Threading\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim msg1 As String = &quot;Search for the target string &quot;&quot;{0}&quot;&quot; in the string &quot;&quot;{1}&quot;&quot;.&quot; &amp; vbCrLf\n        Dim msg2 As String = &quot;Using the {0} - &quot;&quot;{1}&quot;&quot; culture:&quot;\n        Dim msg3 As String = &quot;  The string to search ends with the target string: {0}&quot;\n        Dim result As Boolean = False\n        Dim ci As CultureInfo\n        \n        &#39; Define a target string to search for.\n        &#39; U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n        Dim capitalARing As String = &quot;&#197;&quot;\n        \n        &#39; Define a string to search. \n        &#39; The result of combining the characters LATIN SMALL LETTER A and COMBINING \n        &#39; RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n        Dim xyzARing As String = &quot;xyz&quot; &amp; &quot;aÌŠ&quot;\n        \n        &#39; Clear the screen and display an introduction.\n        Console.Clear()\n        \n        &#39; Display the string to search for and the string to search.\n        Console.WriteLine(msg1, capitalARing, xyzARing)\n        \n        &#39; Search using English-United States culture.\n        ci = New CultureInfo(&quot;en-US&quot;)\n        Console.WriteLine(msg2, ci.DisplayName, ci.Name)\n        \n        Console.WriteLine(&quot;Case sensitive:&quot;)\n        result = xyzARing.EndsWith(capitalARing, False, ci)\n        Console.WriteLine(msg3, result)\n        \n        Console.WriteLine(&quot;Case insensitive:&quot;)\n        result = xyzARing.EndsWith(capitalARing, True, ci)\n        Console.WriteLine(msg3, result)\n        Console.WriteLine()\n        \n        &#39; Search using Swedish-Sweden culture.\n        ci = New CultureInfo(&quot;sv-SE&quot;)\n        Console.WriteLine(msg2, ci.DisplayName, ci.Name)\n        \n        Console.WriteLine(&quot;Case sensitive:&quot;)\n        result = xyzARing.EndsWith(capitalARing, False, ci)\n        Console.WriteLine(msg3, result)\n        \n        Console.WriteLine(&quot;Case insensitive:&quot;)\n        result = xyzARing.EndsWith(capitalARing, True, ci)\n        Console.WriteLine(msg3, result)\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;Note: This code example was executed on a console whose user interface \n&#39;culture is &quot;en-US&quot; (English-United States).\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Search for the target string &quot;&#197;&quot; in the string &quot;xyza&#176;&quot;.\n&#39;\n&#39;Using the English (United States) - &quot;en-US&quot; culture:\n&#39;Case sensitive:\n&#39;  The string to search ends with the target string: False\n&#39;Case insensitive:\n&#39;  The string to search ends with the target string: True\n&#39;\n&#39;Using the Swedish (Sweden) - &quot;sv-SE&quot; culture:\n&#39;Case sensitive:\n&#39;  The string to search ends with the target string: False\n&#39;Case insensitive:\n&#39;  The string to search ends with the target string: False\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_String_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether this instance and a specified object, which must also be a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object, have the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and its value is the same as this instance; otherwise, <code>false</code>.  If <code>obj</code> is <code>null</code>, the method returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Equals method.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.equals#1\">// Sample for String::Equals(Object)\n//            String::Equals(String)\n//            String::Equals(String, String)\nusing namespace System;\nusing namespace System::Text;\nint main()\n{\n   StringBuilder^ sb = gcnew StringBuilder( &quot;abcd&quot; );\n   String^ str1 = &quot;abcd&quot;;\n   String^ str2 = nullptr;\n   Object^ o2 = nullptr;\n   Console::WriteLine();\n   Console::WriteLine( &quot; *  The value of String str1 is &#39;{0}&#39;.&quot;, str1 );\n   Console::WriteLine( &quot; *  The value of StringBuilder sb is &#39;{0}&#39;.&quot;, sb );\n   Console::WriteLine();\n   Console::WriteLine( &quot;1a) String::Equals(Object). Object is a StringBuilder, not a String.&quot; );\n   Console::WriteLine( &quot;    Is str1 equal to sb?: {0}&quot;, str1-&gt;Equals( sb ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;1b) String::Equals(Object). Object is a String.&quot; );\n   str2 = sb-&gt;ToString();\n   o2 = str2;\n   Console::WriteLine( &quot; *  The value of Object o2 is &#39;{0}&#39;.&quot;, o2 );\n   Console::WriteLine( &quot;    Is str1 equal to o2?: {0}&quot;, str1-&gt;Equals( o2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot; 2) String::Equals(String)&quot; );\n   Console::WriteLine( &quot; *  The value of String str2 is &#39;{0}&#39;.&quot;, str2 );\n   Console::WriteLine( &quot;    Is str1 equal to str2?: {0}&quot;, str1-&gt;Equals( str2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot; 3) String::Equals(String, String)&quot; );\n   Console::WriteLine( &quot;    Is str1 equal to str2?: {0}&quot;, String::Equals( str1, str2 ) );\n}\n\n/*\nThis example produces the following results:\n\n *  The value of String str1 is &#39;abcd&#39;.\n *  The value of StringBuilder sb is &#39;abcd&#39;.\n\n1a) String::Equals(Object). Object is a StringBuilder, not a String.\n    Is str1 equal to sb?: False\n\n1b) String::Equals(Object). Object is a String.\n *  The value of Object o2 is &#39;abcd&#39;.\n    Is str1 equal to o2?: True\n\n 2) String::Equals(String)\n *  The value of String str2 is &#39;abcd&#39;.\n    Is str1 equal to str2?: True\n\n 3) String::Equals(String, String)\n    Is str1 equal to str2?: True\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.equals#1\">// Sample for String.Equals(Object)\n//            String.Equals(String)\n//            String.Equals(String, String)\nusing System;\nusing System.Text;\n\nclass Sample {\n    public static void Main() {\n    StringBuilder sb = new StringBuilder(&quot;abcd&quot;);\n    String      str1 = &quot;abcd&quot;;\n    String      str2 = null;\n    Object\to2   = null;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot; *  The value of String str1 is &#39;{0}&#39;.&quot;, str1);\n    Console.WriteLine(&quot; *  The value of StringBuilder sb is &#39;{0}&#39;.&quot;, sb.ToString());\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;1a) String.Equals(Object). Object is a StringBuilder, not a String.&quot;);\n    Console.WriteLine(&quot;    Is str1 equal to sb?: {0}&quot;, str1.Equals(sb));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;1b) String.Equals(Object). Object is a String.&quot;);\n    str2 = sb.ToString();\n    o2   = str2;\n    Console.WriteLine(&quot; *  The value of Object o2 is &#39;{0}&#39;.&quot;, o2);\n    Console.WriteLine(&quot;    Is str1 equal to o2?: {0}&quot;, str1.Equals(o2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot; 2) String.Equals(String)&quot;);\n    Console.WriteLine(&quot; *  The value of String str2 is &#39;{0}&#39;.&quot;, str2);\n    Console.WriteLine(&quot;    Is str1 equal to str2?: {0}&quot;, str1.Equals(str2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot; 3) String.Equals(String, String)&quot;);\n    Console.WriteLine(&quot;    Is str1 equal to str2?: {0}&quot;, String.Equals(str1, str2));\n    }\n}\n/*\nThis example produces the following results:\n\n *  The value of String str1 is &#39;abcd&#39;.\n *  The value of StringBuilder sb is &#39;abcd&#39;.\n\n1a) String.Equals(Object). Object is a StringBuilder, not a String.\n    Is str1 equal to sb?: False\n\n1b) String.Equals(Object). Object is a String.\n *  The value of Object o2 is &#39;abcd&#39;.\n    Is str1 equal to o2?: True\n\n 2) String.Equals(String)\n *  The value of String str2 is &#39;abcd&#39;.\n    Is str1 equal to str2?: True\n\n 3) String.Equals(String, String)\n    Is str1 equal to str2?: True\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.equals#1\">&#39; Sample for String.Equals(Object)\n&#39;            String.Equals(String)\n&#39;            String.Equals(String, String)\nImports System\nImports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      Dim sb As New StringBuilder(&quot;abcd&quot;)\n      Dim str1 As [String] = &quot;abcd&quot;\n      Dim str2 As [String] = Nothing\n      Dim o2 As [Object] = Nothing\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot; *  The value of String str1 is &#39;{0}&#39;.&quot;, str1)\n      Console.WriteLine(&quot; *  The value of StringBuilder sb is &#39;{0}&#39;.&quot;, sb.ToString())\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;1a) String.Equals(Object). Object is a StringBuilder, not a String.&quot;)\n      Console.WriteLine(&quot;    Is str1 equal to sb?: {0}&quot;, str1.Equals(sb))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;1b) String.Equals(Object). Object is a String.&quot;)\n      str2 = sb.ToString()\n      o2 = str2\n      Console.WriteLine(&quot; *  The value of Object o2 is &#39;{0}&#39;.&quot;, o2)\n      Console.WriteLine(&quot;    Is str1 equal to o2?: {0}&quot;, str1.Equals(o2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot; 2) String.Equals(String)&quot;)\n      Console.WriteLine(&quot; *  The value of String str2 is &#39;{0}&#39;.&quot;, str2)\n      Console.WriteLine(&quot;    Is str1 equal to str2?: {0}&quot;, str1.Equals(str2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot; 3) String.Equals(String, String)&quot;)\n      Console.WriteLine(&quot;    Is str1 equal to str2?: {0}&quot;, [String].Equals(str1, str2))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39; *  The value of String str1 is &#39;abcd&#39;.\n&#39; *  The value of StringBuilder sb is &#39;abcd&#39;.\n&#39;\n&#39;1a) String.Equals(Object). Object is a StringBuilder, not a String.\n&#39;    Is str1 equal to sb?: False\n&#39;\n&#39;1b) String.Equals(Object). Object is a String.\n&#39; *  The value of Object o2 is &#39;abcd&#39;.\n&#39;    Is str1 equal to o2?: True\n&#39;\n&#39; 2) String.Equals(String)\n&#39; *  The value of String str2 is &#39;abcd&#39;.\n&#39;    Is str1 equal to str2?: True\n&#39;\n&#39; 3) String.Equals(String, String)\n&#39;    Is str1 equal to str2?: True\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Equals_System_String_\">\r\n    \r\n            <a id=\"System_String_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether this instance and another specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object have the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of the <code>value</code> parameter is the same as the value of this instance; otherwise, <code>false</code>. If <code>value</code> is <code>null</code>, the method returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.It compares the title-cased word &quot;File&quot; with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069). Because the Equals method performs an ordinal comparison, only the comparison with an identical word returns <code>true</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Equals#2\">Module Example\n   Public Sub Main()\n      Console.OutputEncoding = System.Text.Encoding.UTF8\n      \n      Dim word As String = &quot;File&quot;\n      Dim others() As String = { word.ToLower(), word, word.ToUpper(), _\n                                 &quot;fÄ±le&quot; }\n      For Each other As String In others\n         If word.Equals(other) Then \n            Console.WriteLine(&quot;{0} = {1}&quot;, word, other)\n         Else\n            Console.WriteLine(&quot;{0} {1} {2}&quot;, word, ChrW(&amp;H2260), other)\n         End If      \n      Next        \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       File â‰  file\n&#39;       File = File\n&#39;       File â‰  FILE\n&#39;       File â‰  fÄ±le\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Equals#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.OutputEncoding = System.Text.Encoding.UTF8;\n      string word = &quot;File&quot;;\n      string[] others = { word.ToLower(), word, word.ToUpper(), &quot;fÄ±le&quot; };\n      foreach (string other in others)\n      {\n         if (word.Equals(other)) \n            Console.WriteLine(&quot;{0} = {1}&quot;, word, other);\n         else\n            Console.WriteLine(&quot;{0} {1} {2}&quot;, word, &#39;\\u2260&#39;, other);\n      }        \n   }\n}\n// The example displays the following output:\n//       File â‰  file\n//       File = File\n//       File â‰  FILE\n//       File â‰  fÄ±le\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Equals_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects have the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Equals (string a, string b);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, <code>false</code>. If both <code>a</code> and <code>b</code> are <code>null</code>, the method returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.equals#1\">// Sample for String::Equals(Object)\n//            String::Equals(String)\n//            String::Equals(String, String)\nusing namespace System;\nusing namespace System::Text;\nint main()\n{\n   StringBuilder^ sb = gcnew StringBuilder( &quot;abcd&quot; );\n   String^ str1 = &quot;abcd&quot;;\n   String^ str2 = nullptr;\n   Object^ o2 = nullptr;\n   Console::WriteLine();\n   Console::WriteLine( &quot; *  The value of String str1 is &#39;{0}&#39;.&quot;, str1 );\n   Console::WriteLine( &quot; *  The value of StringBuilder sb is &#39;{0}&#39;.&quot;, sb );\n   Console::WriteLine();\n   Console::WriteLine( &quot;1a) String::Equals(Object). Object is a StringBuilder, not a String.&quot; );\n   Console::WriteLine( &quot;    Is str1 equal to sb?: {0}&quot;, str1-&gt;Equals( sb ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;1b) String::Equals(Object). Object is a String.&quot; );\n   str2 = sb-&gt;ToString();\n   o2 = str2;\n   Console::WriteLine( &quot; *  The value of Object o2 is &#39;{0}&#39;.&quot;, o2 );\n   Console::WriteLine( &quot;    Is str1 equal to o2?: {0}&quot;, str1-&gt;Equals( o2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot; 2) String::Equals(String)&quot; );\n   Console::WriteLine( &quot; *  The value of String str2 is &#39;{0}&#39;.&quot;, str2 );\n   Console::WriteLine( &quot;    Is str1 equal to str2?: {0}&quot;, str1-&gt;Equals( str2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot; 3) String::Equals(String, String)&quot; );\n   Console::WriteLine( &quot;    Is str1 equal to str2?: {0}&quot;, String::Equals( str1, str2 ) );\n}\n\n/*\nThis example produces the following results:\n\n *  The value of String str1 is &#39;abcd&#39;.\n *  The value of StringBuilder sb is &#39;abcd&#39;.\n\n1a) String::Equals(Object). Object is a StringBuilder, not a String.\n    Is str1 equal to sb?: False\n\n1b) String::Equals(Object). Object is a String.\n *  The value of Object o2 is &#39;abcd&#39;.\n    Is str1 equal to o2?: True\n\n 2) String::Equals(String)\n *  The value of String str2 is &#39;abcd&#39;.\n    Is str1 equal to str2?: True\n\n 3) String::Equals(String, String)\n    Is str1 equal to str2?: True\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.equals#1\">// Sample for String.Equals(Object)\n//            String.Equals(String)\n//            String.Equals(String, String)\nusing System;\nusing System.Text;\n\nclass Sample {\n    public static void Main() {\n    StringBuilder sb = new StringBuilder(&quot;abcd&quot;);\n    String      str1 = &quot;abcd&quot;;\n    String      str2 = null;\n    Object\to2   = null;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot; *  The value of String str1 is &#39;{0}&#39;.&quot;, str1);\n    Console.WriteLine(&quot; *  The value of StringBuilder sb is &#39;{0}&#39;.&quot;, sb.ToString());\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;1a) String.Equals(Object). Object is a StringBuilder, not a String.&quot;);\n    Console.WriteLine(&quot;    Is str1 equal to sb?: {0}&quot;, str1.Equals(sb));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;1b) String.Equals(Object). Object is a String.&quot;);\n    str2 = sb.ToString();\n    o2   = str2;\n    Console.WriteLine(&quot; *  The value of Object o2 is &#39;{0}&#39;.&quot;, o2);\n    Console.WriteLine(&quot;    Is str1 equal to o2?: {0}&quot;, str1.Equals(o2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot; 2) String.Equals(String)&quot;);\n    Console.WriteLine(&quot; *  The value of String str2 is &#39;{0}&#39;.&quot;, str2);\n    Console.WriteLine(&quot;    Is str1 equal to str2?: {0}&quot;, str1.Equals(str2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot; 3) String.Equals(String, String)&quot;);\n    Console.WriteLine(&quot;    Is str1 equal to str2?: {0}&quot;, String.Equals(str1, str2));\n    }\n}\n/*\nThis example produces the following results:\n\n *  The value of String str1 is &#39;abcd&#39;.\n *  The value of StringBuilder sb is &#39;abcd&#39;.\n\n1a) String.Equals(Object). Object is a StringBuilder, not a String.\n    Is str1 equal to sb?: False\n\n1b) String.Equals(Object). Object is a String.\n *  The value of Object o2 is &#39;abcd&#39;.\n    Is str1 equal to o2?: True\n\n 2) String.Equals(String)\n *  The value of String str2 is &#39;abcd&#39;.\n    Is str1 equal to str2?: True\n\n 3) String.Equals(String, String)\n    Is str1 equal to str2?: True\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.equals#1\">&#39; Sample for String.Equals(Object)\n&#39;            String.Equals(String)\n&#39;            String.Equals(String, String)\nImports System\nImports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      Dim sb As New StringBuilder(&quot;abcd&quot;)\n      Dim str1 As [String] = &quot;abcd&quot;\n      Dim str2 As [String] = Nothing\n      Dim o2 As [Object] = Nothing\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot; *  The value of String str1 is &#39;{0}&#39;.&quot;, str1)\n      Console.WriteLine(&quot; *  The value of StringBuilder sb is &#39;{0}&#39;.&quot;, sb.ToString())\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;1a) String.Equals(Object). Object is a StringBuilder, not a String.&quot;)\n      Console.WriteLine(&quot;    Is str1 equal to sb?: {0}&quot;, str1.Equals(sb))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;1b) String.Equals(Object). Object is a String.&quot;)\n      str2 = sb.ToString()\n      o2 = str2\n      Console.WriteLine(&quot; *  The value of Object o2 is &#39;{0}&#39;.&quot;, o2)\n      Console.WriteLine(&quot;    Is str1 equal to o2?: {0}&quot;, str1.Equals(o2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot; 2) String.Equals(String)&quot;)\n      Console.WriteLine(&quot; *  The value of String str2 is &#39;{0}&#39;.&quot;, str2)\n      Console.WriteLine(&quot;    Is str1 equal to str2?: {0}&quot;, str1.Equals(str2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot; 3) String.Equals(String, String)&quot;)\n      Console.WriteLine(&quot;    Is str1 equal to str2?: {0}&quot;, [String].Equals(str1, str2))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39; *  The value of String str1 is &#39;abcd&#39;.\n&#39; *  The value of StringBuilder sb is &#39;abcd&#39;.\n&#39;\n&#39;1a) String.Equals(Object). Object is a StringBuilder, not a String.\n&#39;    Is str1 equal to sb?: False\n&#39;\n&#39;1b) String.Equals(Object). Object is a String.\n&#39; *  The value of Object o2 is &#39;abcd&#39;.\n&#39;    Is str1 equal to o2?: True\n&#39;\n&#39; 2) String.Equals(String)\n&#39; *  The value of String str2 is &#39;abcd&#39;.\n&#39;    Is str1 equal to str2?: True\n&#39;\n&#39; 3) String.Equals(String, String)\n&#39;    Is str1 equal to str2?: True\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Equals_System_String_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(String,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether this string and a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (string value, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare to this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies how the strings will be compared.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of the <code>value</code> parameter is the same as this string; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>comparisonType</code> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a string array that consists of an uppercase &quot;I&quot;, a lowercase &quot;i&quot;, and a dotless &quot;Ä±&quot;. It then calls the Equals method to compare them by using each possible <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Equals#1\">using System;\n\nclass Sample \n{\n   public static void Main() \n   {\n      // Define a string array with the following three &quot;I&quot; characters:\n      //      U+0069, U+0131, and U+0049.  \n      string[] threeIs = { &quot;i&quot;, &quot;Ä±&quot;, &quot;I&quot; };\n      // Define Type object representing StringComparison type.\n      Type scType = typeof(StringComparison);  \n      \n      // Show the current culture (for culture-sensitive string comparisons).\n      Console.WriteLine(&quot;The current culture is {0}.<br>&quot;, \n                        System.Globalization.CultureInfo.CurrentCulture.Name);\n        \n      // Perform comparisons using each StringComparison member. \n      foreach (string scName in Enum.GetNames(scType))\n      {\n         StringComparison sc = (StringComparison) Enum.Parse(scType, scName);\n         Console.WriteLine(&quot;Comparisons using {0}:&quot;, sc);\n         // Compare each character in character array.\n         for (int ctr = 0; ctr &lt;= 1; ctr++)\n         {\n            string instanceChar = threeIs[ctr];\n            for (int innerCtr = ctr + 1; innerCtr &lt;= threeIs.GetUpperBound(0); innerCtr++)\n            {\n               string otherChar = threeIs[innerCtr];\n               Console.WriteLine(&quot;{0} (U+{1}) = {2} (U+{3}): {4}&quot;, \n                                 instanceChar, Convert.ToInt16(Char.Parse(instanceChar)).ToString(&quot;X4&quot;), \n                                 otherChar, Convert.ToInt16(Char.Parse(otherChar)).ToString(&quot;X4&quot;), \n                                 instanceChar.Equals(otherChar, sc));\n            }\n            Console.WriteLine();\n         }\n      }   \n   }\n}\n// The example displays the following output:\n//       The current culture is en-US.\n//       \n//       Comparisons using CurrentCulture:\n//       i (U+0069) = i (U+0131): False\n//       i (U+0069) = I (U+0049): False\n//       \n//       i (U+0131) = I (U+0049): False\n//       \n//       Comparisons using CurrentCultureIgnoreCase:\n//       i (U+0069) = i (U+0131): False\n//       i (U+0069) = I (U+0049): True\n//       \n//       i (U+0131) = I (U+0049): False\n//       \n//       Comparisons using InvariantCulture:\n//       i (U+0069) = i (U+0131): False\n//       i (U+0069) = I (U+0049): False\n//       \n//       i (U+0131) = I (U+0049): False\n//       \n//       Comparisons using InvariantCultureIgnoreCase:\n//       i (U+0069) = i (U+0131): False\n//       i (U+0069) = I (U+0049): True\n//       \n//       i (U+0131) = I (U+0049): False\n//       \n//       Comparisons using Ordinal:\n//       i (U+0069) = i (U+0131): False\n//       i (U+0069) = I (U+0049): False\n//       \n//       i (U+0131) = I (U+0049): False\n//       \n//       Comparisons using OrdinalIgnoreCase:\n//       i (U+0069) = i (U+0131): False\n//       i (U+0069) = I (U+0049): True\n//       \n//       i (U+0131) = I (U+0049): False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Equals#1\">Class Sample\n   Public Shared Sub Main() \n      &#39; Define a string array with the following three &quot;I&quot; characters:\n      &#39;      U+0069, U+0131, and U+0049.  \n      Dim threeIs() As String = { &quot;i&quot;, &quot;Ä±&quot;, &quot;I&quot; }\n      &#39; Define Type object representing StringComparison type.\n      Dim scType As Type = GetType(StringComparison)  \n      \n      &#39; Show the current culture (for culture-sensitive string comparisons).\n      Console.WriteLine(&quot;The current culture is {0}.&quot; &amp; vbCrLf, _\n                        System.Globalization.CultureInfo.CurrentCulture.Name)\n        \n      &#39; Perform comparisons using each StringComparison member. \n      For Each scName As String In [Enum].GetNames(scType)\n         Dim sc As StringComparison = [Enum].Parse(scType, scName)\n         Console.WriteLine(&quot;Comparisons using {0}:&quot;, sc)\n         &#39; Compare each character in character array.\n         For ctr As Integer = 0 To 1\n            Dim instanceChar As String = threeIs(ctr)\n            For innerCtr As Integer = ctr + 1 To threeIs.GetUpperBound(0)\n               Dim otherChar As STring = threeIs(innerCtr)\n               Console.WriteLine(&quot;{0} (U+{1}) = {2} (U+{3}): {4}&quot;, _\n                                 instanceChar, Convert.ToInt16(Char.Parse(instanceChar)).ToString(&quot;X4&quot;), _\n                                 otherChar, Convert.ToInt16(Char.Parse(otherChar)).ToString(&quot;X4&quot;), _\n                                 instanceChar.Equals(otherChar, sc))\n            Next\n            Console.WriteLine()\n         Next\n      Next              \n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       The current culture is en-US.\n&#39;       \n&#39;       Comparisons using CurrentCulture:\n&#39;       i (U+0069) = i (U+0131): False\n&#39;       i (U+0069) = I (U+0049): False\n&#39;       \n&#39;       i (U+0131) = I (U+0049): False\n&#39;       \n&#39;       Comparisons using CurrentCultureIgnoreCase:\n&#39;       i (U+0069) = i (U+0131): False\n&#39;       i (U+0069) = I (U+0049): True\n&#39;       \n&#39;       i (U+0131) = I (U+0049): False\n&#39;       \n&#39;       Comparisons using InvariantCulture:\n&#39;       i (U+0069) = i (U+0131): False\n&#39;       i (U+0069) = I (U+0049): False\n&#39;       \n&#39;       i (U+0131) = I (U+0049): False\n&#39;       \n&#39;       Comparisons using InvariantCultureIgnoreCase:\n&#39;       i (U+0069) = i (U+0131): False\n&#39;       i (U+0069) = I (U+0049): True\n&#39;       \n&#39;       i (U+0131) = I (U+0049): False\n&#39;       \n&#39;       Comparisons using Ordinal:\n&#39;       i (U+0069) = i (U+0131): False\n&#39;       i (U+0069) = I (U+0049): False\n&#39;       \n&#39;       i (U+0131) = I (U+0049): False\n&#39;       \n&#39;       Comparisons using OrdinalIgnoreCase:\n&#39;       i (U+0069) = i (U+0131): False\n&#39;       i (U+0069) = I (U+0049): True\n&#39;       \n&#39;       i (U+0131) = I (U+0049): False\n</code></pre><p> The following example compares four sets of words by using each member of the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration.  The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures. Note that the strings &quot;encyclopÃ¦dia&quot; and &quot;encyclopedia&quot; are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Equals#4\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] cultureNames = { &quot;en-US&quot;, &quot;se-SE&quot; };\n      String[] strings1 = { &quot;case&quot;,  &quot;encyclop&#230;dia&quot;,  \n                            &quot;encyclop&#230;dia&quot;, &quot;Arch&#230;ology&quot; };\n      String[] strings2 = { &quot;Case&quot;, &quot;encyclopaedia&quot;, \n                            &quot;encyclopedia&quot; , &quot;ARCH&#198;OLOGY&quot; };\n      StringComparison[] comparisons = (StringComparison[]) Enum.GetValues(typeof(StringComparison));\n      \n      foreach (var cultureName in cultureNames) {\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName);\n         Console.WriteLine(&quot;Current Culture: {0}&quot;, CultureInfo.CurrentCulture.Name);\n         for (int ctr = 0; ctr &lt;= strings1.GetUpperBound(0); ctr++) {\n            foreach (var comparison in comparisons) \n               Console.WriteLine(&quot;   {0} = {1} ({2}): {3}&quot;, strings1[ctr],\n                                 strings2[ctr], comparison, \n                                 strings1[ctr].Equals(strings2[ctr], comparison));\n\n            Console.WriteLine();         \n         }\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//    Current Culture: en-US\n//       case = Case (CurrentCulture): False\n//       case = Case (CurrentCultureIgnoreCase): True\n//       case = Case (InvariantCulture): False\n//       case = Case (InvariantCultureIgnoreCase): True\n//       case = Case (Ordinal): False\n//       case = Case (OrdinalIgnoreCase): True\n//    \n//       encyclop&#230;dia = encyclopaedia (CurrentCulture): True\n//       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (Ordinal): False\n//       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n//    \n//       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n//       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (Ordinal): False\n//       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n//    \n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n//    \n//    \n//    Current Culture: se-SE\n//       case = Case (CurrentCulture): False\n//       case = Case (CurrentCultureIgnoreCase): True\n//       case = Case (InvariantCulture): False\n//       case = Case (InvariantCultureIgnoreCase): True\n//       case = Case (Ordinal): False\n//       case = Case (OrdinalIgnoreCase): True\n//    \n//       encyclop&#230;dia = encyclopaedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (Ordinal): False\n//       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n//    \n//       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n//       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (Ordinal): False\n//       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n//    \n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Equals#4\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;se-SE&quot; }\n      Dim strings1() As String = { &quot;case&quot;,  &quot;encyclop&#230;dia&quot;,  \n                                   &quot;encyclop&#230;dia&quot;, &quot;Arch&#230;ology&quot; }\n      Dim strings2() As String = { &quot;Case&quot;, &quot;encyclopaedia&quot;, \n                                   &quot;encyclopedia&quot; , &quot;ARCH&#198;OLOGY&quot; }\n      Dim comparisons() As StringComparison = CType([Enum].GetValues(GetType(StringComparison)),\n                                           StringComparison())\n      \n      For Each cultureName In cultureNames\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName)\n         Console.WriteLine(&quot;Current Culture: {0}&quot;, CultureInfo.CurrentCulture.Name)\n         For ctr As Integer = 0 To strings1.GetUpperBound(0)\n            For Each comparison In comparisons\n               Console.WriteLine(&quot;   {0} = {1} ({2}): {3}&quot;, strings1(ctr),\n                                 strings2(ctr), comparison, \n                                 strings1(ctr).Equals(strings2(ctr), comparison))\n            Next\n            Console.WriteLine()         \n         Next\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Current Culture: en-US\n&#39;       case = Case (CurrentCulture): False\n&#39;       case = Case (CurrentCultureIgnoreCase): True\n&#39;       case = Case (InvariantCulture): False\n&#39;       case = Case (InvariantCultureIgnoreCase): True\n&#39;       case = Case (Ordinal): False\n&#39;       case = Case (OrdinalIgnoreCase): True\n&#39;    \n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n&#39;    \n&#39;    \n&#39;    Current Culture: se-SE\n&#39;       case = Case (CurrentCulture): False\n&#39;       case = Case (CurrentCultureIgnoreCase): True\n&#39;       case = Case (InvariantCulture): False\n&#39;       case = Case (InvariantCultureIgnoreCase): True\n&#39;       case = Case (Ordinal): False\n&#39;       case = Case (OrdinalIgnoreCase): True\n&#39;    \n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Equals_System_String_System_String_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(String,String,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Equals (string a, string b, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules for the comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of the <code>a</code> parameter is equal to the value of the <code>b</code> parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>comparisonType</code> parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares four sets of words by using each member of the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration.  The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures. Note that the strings &quot;encyclopÃ¦dia&quot; and &quot;encyclopedia&quot; are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Equals#3\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;se-SE&quot; }\n      Dim strings1() As String = { &quot;case&quot;,  &quot;encyclop&#230;dia&quot;,  \n                                   &quot;encyclop&#230;dia&quot;, &quot;Arch&#230;ology&quot; }\n      Dim strings2() As String = { &quot;Case&quot;, &quot;encyclopaedia&quot;, \n                                   &quot;encyclopedia&quot; , &quot;ARCH&#198;OLOGY&quot; }\n      Dim comparisons() As StringComparison = CType([Enum].GetValues(GetType(StringComparison)),\n                                           StringComparison())\n      \n      For Each cultureName In cultureNames\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName)\n         Console.WriteLine(&quot;Current Culture: {0}&quot;, CultureInfo.CurrentCulture.Name)\n         For ctr As Integer = 0 To strings1.GetUpperBound(0)\n            For Each comparison In comparisons\n               Console.WriteLine(&quot;   {0} = {1} ({2}): {3}&quot;, strings1(ctr),\n                                 strings2(ctr), comparison, \n                                 String.Equals(strings1(ctr), strings2(ctr), comparison))\n            Next\n            Console.WriteLine()         \n         Next\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Current Culture: en-US\n&#39;       case = Case (CurrentCulture): False\n&#39;       case = Case (CurrentCultureIgnoreCase): True\n&#39;       case = Case (InvariantCulture): False\n&#39;       case = Case (InvariantCultureIgnoreCase): True\n&#39;       case = Case (Ordinal): False\n&#39;       case = Case (OrdinalIgnoreCase): True\n&#39;    \n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n&#39;    \n&#39;    \n&#39;    Current Culture: se-SE\n&#39;       case = Case (CurrentCulture): False\n&#39;       case = Case (CurrentCultureIgnoreCase): True\n&#39;       case = Case (InvariantCulture): False\n&#39;       case = Case (InvariantCultureIgnoreCase): True\n&#39;       case = Case (Ordinal): False\n&#39;       case = Case (OrdinalIgnoreCase): True\n&#39;    \n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n&#39;       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n&#39;       encyclop&#230;dia = encyclopaedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n&#39;       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n&#39;       encyclop&#230;dia = encyclopedia (Ordinal): False\n&#39;       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n&#39;    \n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n&#39;       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Equals#3\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] cultureNames = { &quot;en-US&quot;, &quot;se-SE&quot; };\n      String[] strings1 = { &quot;case&quot;,  &quot;encyclop&#230;dia&quot;,  \n                            &quot;encyclop&#230;dia&quot;, &quot;Arch&#230;ology&quot; };\n      String[] strings2 = { &quot;Case&quot;, &quot;encyclopaedia&quot;, \n                            &quot;encyclopedia&quot; , &quot;ARCH&#198;OLOGY&quot; };\n      StringComparison[] comparisons = (StringComparison[]) Enum.GetValues(typeof(StringComparison));\n      \n      foreach (var cultureName in cultureNames) {\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(cultureName);\n         Console.WriteLine(&quot;Current Culture: {0}&quot;, CultureInfo.CurrentCulture.Name);\n         for (int ctr = 0; ctr &lt;= strings1.GetUpperBound(0); ctr++) {\n            foreach (var comparison in comparisons) \n               Console.WriteLine(&quot;   {0} = {1} ({2}): {3}&quot;, strings1[ctr],\n                                 strings2[ctr], comparison, \n                                 String.Equals(strings1[ctr], strings2[ctr], comparison));\n\n            Console.WriteLine();         \n         }\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//    Current Culture: en-US\n//       case = Case (CurrentCulture): False\n//       case = Case (CurrentCultureIgnoreCase): True\n//       case = Case (InvariantCulture): False\n//       case = Case (InvariantCultureIgnoreCase): True\n//       case = Case (Ordinal): False\n//       case = Case (OrdinalIgnoreCase): True\n//    \n//       encyclop&#230;dia = encyclopaedia (CurrentCulture): True\n//       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (Ordinal): False\n//       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n//    \n//       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n//       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (Ordinal): False\n//       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n//    \n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n//    \n//    \n//    Current Culture: se-SE\n//       case = Case (CurrentCulture): False\n//       case = Case (CurrentCultureIgnoreCase): True\n//       case = Case (InvariantCulture): False\n//       case = Case (InvariantCultureIgnoreCase): True\n//       case = Case (Ordinal): False\n//       case = Case (OrdinalIgnoreCase): True\n//    \n//       encyclop&#230;dia = encyclopaedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopaedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopaedia (InvariantCulture): True\n//       encyclop&#230;dia = encyclopaedia (InvariantCultureIgnoreCase): True\n//       encyclop&#230;dia = encyclopaedia (Ordinal): False\n//       encyclop&#230;dia = encyclopaedia (OrdinalIgnoreCase): False\n//    \n//       encyclop&#230;dia = encyclopedia (CurrentCulture): False\n//       encyclop&#230;dia = encyclopedia (CurrentCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (InvariantCulture): False\n//       encyclop&#230;dia = encyclopedia (InvariantCultureIgnoreCase): False\n//       encyclop&#230;dia = encyclopedia (Ordinal): False\n//       encyclop&#230;dia = encyclopedia (OrdinalIgnoreCase): False\n//    \n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (CurrentCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCulture): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (InvariantCultureIgnoreCase): True\n//       Arch&#230;ology = ARCH&#198;OLOGY (Ordinal): False\n//       Arch&#230;ology = ARCH&#198;OLOGY (OrdinalIgnoreCase): True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Format_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_String_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces one or more format items in a specified string with the string representation of a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (string format, object arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A copy of <code>format</code> in which any format items are replaced by the string representation of <code>arg0</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format item in <code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is not zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Format_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_String_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (string format, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object array that contains zero or more objects to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> or <code>args</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Format_System_IFormatProvider_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_String_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(IFormatProvider,String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (IFormatProvider provider, string format, object arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A copy of <code>format</code> in which the format item or items have been replaced by the string representation of <code>arg0</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> or <code>arg0</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to one.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Format_System_IFormatProvider_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_String_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(IFormatProvider,String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (IFormatProvider provider, string format, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object array that contains zero or more objects to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A copy of <code>format</code> in which the format items have been replaced by the string representation of the corresponding objects in <code>args</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> or <code>args</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to the length of the <code>args</code> array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Format_System_String_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_String_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(String,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the format items in a specified string with the string representation of two specified objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (string format, object arg0, object arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is not zero or one.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Format_System_IFormatProvider_System_String_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_String_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(IFormatProvider,String,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (IFormatProvider provider, string format, object arg0, object arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A copy of <code>format</code> in which format items are replaced by the string representations of <code>arg0</code> and <code>arg1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code>, <code>arg0</code>, or <code>arg1</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to two.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Format_System_String_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_String_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(String,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the format items in a specified string with the string representation of three specified objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (string format, object arg0, object arg1, object arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than two.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Format_System_IFormatProvider_System_String_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_String_Format_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Format(IFormatProvider,String,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Format (IFormatProvider provider, string format, object arg0, object arg1, object arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite format string</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A copy of <code>format</code> in which the format items have been replaced by the string representations of <code>arg0</code>, <code>arg1</code>, and <code>arg2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code>, <code>arg0</code>, <code>arg1</code>, or <code>arg2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than zero, or greater than or equal to three.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For examples and comprehensive usage information about this and other overloads of the <code>Format</code> method, see the <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> overload summary.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_GetEnumerator\">\r\n    \r\n            <a id=\"System_String_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an object that can iterate through the individual characters in this string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CharEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a></div>\r\n                  </div>\r\n                  <p>An enumerator object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"TIP\"><h5>Tip</h5><p> Rather than calling the GetEnumerator method to retrieve a <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object that you then use to enumerate a string, you should instead use your language&#39;s iteration construct ( in C#,  in C++/CLR, and  in Visual Basic).                  <a href=\"../Topic/foreach,%20in%20(C%23%20Reference).md\" data-linktype=\"relative-path\">foreach</a> in C#,                  <a href=\"../Topic/for%20each,%20in.md\" data-linktype=\"relative-path\">for each</a> in C++/CLR, and                  <a href=\"../Topic/For%20Each...Next%20Statement%20(Visual%20Basic).md\" data-linktype=\"relative-path\">For Each</a> in Visual Basic).  </p>\n</div>\n<p> This method enables you to iterate the individual characters in a string. For example, the Visual Basic <code>For Each</code> and C# <code>foreach</code> statements invoke this method to return a <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object that can provide read-only access to the characters in this string instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example iterates the characters in several strings and displays information about their individual characters. It uses the language iteration construct rather than a call to the GetEnumerator method.  </p>\n<pre><code class=\"lang-cs\" name=\"system.string.getenumerator#1\">using System;\n\nclass Example\n{\n   public static void Main() \n   {\n      EnumerateAndDisplay(&quot;Test Case&quot;);\n      EnumerateAndDisplay(&quot;This is a sentence.&quot;);\n      EnumerateAndDisplay(&quot;Has&nbsp;&nbsp;&nbsp;&nbsp;two&nbsp;&nbsp;&nbsp;&nbsp;tabs&quot; );\n      EnumerateAndDisplay(&quot;Two<br>new<br>lines&quot;);\n   }\n\n   static void EnumerateAndDisplay(String phrase)\n   {\n      Console.WriteLine(&quot;The characters in the string \\&quot;{0}\\&quot; are:&quot;,\n                        phrase);\n\n      int CharCount = 0;\n      int controlChars = 0;\n      int alphanumeric = 0;\n      int punctuation = 0;\n\n      foreach (var ch in phrase) {\n         Console.Write(&quot;&#39;{0}&#39; &quot;, ! Char.IsControl(ch) ? ch.ToString() : \n                                     &quot;0x&quot; + Convert.ToUInt16(ch).ToString(&quot;X4&quot;));\n         if (Char.IsLetterOrDigit(ch)) \n            alphanumeric++;\n         else if (Char.IsControl(ch)) \n            controlChars++;\n         else if (Char.IsPunctuation(ch)) \n            punctuation++;             \n         CharCount++;\n      }\n\n      Console.WriteLine(&quot;<br>   Total characters:        {0,3}&quot;, CharCount);\n      Console.WriteLine(&quot;   Alphanumeric characters: {0,3}&quot;, alphanumeric);\n      Console.WriteLine(&quot;   Punctuation characters:  {0,3}&quot;, punctuation);\n      Console.WriteLine(&quot;   Control Characters:      {0,3}<br>&quot;, controlChars);\n   }\n}\n// The example displays the following output:\n//    The characters in the string &quot;Test Case&quot; are:\n//    &#39;T&#39; &#39;e&#39; &#39;s&#39; &#39;t&#39; &#39; &#39; &#39;C&#39; &#39;a&#39; &#39;s&#39; &#39;e&#39;\n//       Total characters:          9\n//       Alphanumeric characters:   8\n//       Punctuation characters:    0\n//       Control Characters:        0\n//    \n//    The characters in the string &quot;This is a sentence.&quot; are:\n//    &#39;T&#39; &#39;h&#39; &#39;i&#39; &#39;s&#39; &#39; &#39; &#39;i&#39; &#39;s&#39; &#39; &#39; &#39;a&#39; &#39; &#39; &#39;s&#39; &#39;e&#39; &#39;n&#39; &#39;t&#39; &#39;e&#39; &#39;n&#39; &#39;c&#39; &#39;e&#39; &#39;.&#39;\n//       Total characters:         19\n//       Alphanumeric characters:  15\n//       Punctuation characters:    1\n//       Control Characters:        0\n//    \n//    The characters in the string &quot;Has       two     tabs&quot; are:\n//    &#39;H&#39; &#39;a&#39; &#39;s&#39; &#39;0x0009&#39; &#39;t&#39; &#39;w&#39; &#39;o&#39; &#39;0x0009&#39; &#39;t&#39; &#39;a&#39; &#39;b&#39; &#39;s&#39;\n//       Total characters:         12\n//       Alphanumeric characters:  10\n//       Punctuation characters:    0\n//       Control Characters:        2\n//    \n//    The characters in the string &quot;Two\n//    new\n//    lines&quot; are:\n//    &#39;T&#39; &#39;w&#39; &#39;o&#39; &#39;0x000A&#39; &#39;n&#39; &#39;e&#39; &#39;w&#39; &#39;0x000A&#39; &#39;l&#39; &#39;i&#39; &#39;n&#39; &#39;e&#39; &#39;s&#39;\n//       Total characters:         13\n//       Alphanumeric characters:  11\n//       Punctuation characters:    0\n//       Control Characters:        2\n</code></pre><pre><code class=\"lang-cpp\" name=\"system.string.getenumerator#1\">using namespace System;\n\nvoid EnumerateAndDisplay(String^ phrase)\n{\n   Console::WriteLine(&quot;The characters in the string \\&quot;{0}\\&quot; are:&quot;, \n                      phrase);\n\n   int CharCount = 0;\n   int controlChars = 0;\n   int alphanumeric = 0;\n   int punctuation = 0;\n\n   for each (Char ch in phrase) {\n      Console::Write(&quot;&#39;{0}&#39; &quot;, (! Char::IsControl(ch)) ? ch.ToString() : \n                                &quot;0x&quot; + Convert::ToUInt16(ch).ToString(&quot;X4&quot;));\n      if (Char::IsLetterOrDigit(ch)) \n         alphanumeric++;\n      else if (Char::IsControl(ch)) \n         controlChars++;\n      else if (Char::IsPunctuation(ch)) \n         punctuation++;             \n      CharCount++;\n   }\n\n   Console::WriteLine(&quot;<br>   Total characters:        {0,3}&quot;, CharCount);\n   Console::WriteLine(&quot;   Alphanumeric characters: {0,3}&quot;, alphanumeric);\n   Console::WriteLine(&quot;   Punctuation characters:  {0,3}&quot;, punctuation);\n   Console::WriteLine(&quot;   Control Characters:      {0,3}<br>&quot;, controlChars);\n}\n\nint main()\n{\n   EnumerateAndDisplay(&quot;Test Case&quot;);\n   EnumerateAndDisplay(&quot;This is a sentence.&quot;);\n   EnumerateAndDisplay(&quot;Has&nbsp;&nbsp;&nbsp;&nbsp;two&nbsp;&nbsp;&nbsp;&nbsp;tabs&quot;);\n   EnumerateAndDisplay(&quot;Two<br>new<br>lines&quot;);\n}\n// The example displays the following output:\n//    The characters in the string &quot;Test Case&quot; are:\n//    &#39;T&#39; &#39;e&#39; &#39;s&#39; &#39;t&#39; &#39; &#39; &#39;C&#39; &#39;a&#39; &#39;s&#39; &#39;e&#39;\n//       Total characters:          9\n//       Alphanumeric characters:   8\n//       Punctuation characters:    0\n//       Control Characters:        0\n//    \n//    The characters in the string &quot;This is a sentence.&quot; are:\n//    &#39;T&#39; &#39;h&#39; &#39;i&#39; &#39;s&#39; &#39; &#39; &#39;i&#39; &#39;s&#39; &#39; &#39; &#39;a&#39; &#39; &#39; &#39;s&#39; &#39;e&#39; &#39;n&#39; &#39;t&#39; &#39;e&#39; &#39;n&#39; &#39;c&#39; &#39;e&#39; &#39;.&#39;\n//       Total characters:         19\n//       Alphanumeric characters:  15\n//       Punctuation characters:    1\n//       Control Characters:        0\n//    \n//    The characters in the string &quot;Has       two     tabs&quot; are:\n//    &#39;H&#39; &#39;a&#39; &#39;s&#39; &#39;0x0009&#39; &#39;t&#39; &#39;w&#39; &#39;o&#39; &#39;0x0009&#39; &#39;t&#39; &#39;a&#39; &#39;b&#39; &#39;s&#39;\n//       Total characters:         12\n//       Alphanumeric characters:  10\n//       Punctuation characters:    0\n//       Control Characters:        2\n//    \n//    The characters in the string &quot;Two\n//    new\n//    lines&quot; are:\n//    &#39;T&#39; &#39;w&#39; &#39;o&#39; &#39;0x000A&#39; &#39;n&#39; &#39;e&#39; &#39;w&#39; &#39;0x000A&#39; &#39;l&#39; &#39;i&#39; &#39;n&#39; &#39;e&#39; &#39;s&#39;\n//       Total characters:         13\n//       Alphanumeric characters:  11\n//       Punctuation characters:    0\n//       Control Characters:        2\n</code></pre><pre><code class=\"lang-vb\" name=\"system.string.getenumerator#1\">Module Example\n   Sub Main()\n      EnumerateAndDisplay(&quot;Test Case&quot;)\n      EnumerateAndDisplay(&quot;This is a sentence.&quot;)\n      EnumerateAndDisplay(&quot;Has&quot; &amp; vbTab &amp; &quot;two&quot; &amp; vbTab &amp; &quot;tabs&quot;)\n      EnumerateAndDisplay(&quot;Two&quot; &amp; vbLf &amp; &quot;new&quot; &amp; vbLf &amp; &quot;lines&quot;)\n   End Sub \n       \n   Sub EnumerateAndDisplay(phrase As String)\n      Console.WriteLine(&quot;The characters in the string &quot;&quot;{0}&quot;&quot; are:&quot;, phrase)\n       \n      Dim charCount As Integer = 0\n      Dim controlChars As Integer = 0\n      Dim alphanumeric As Integer = 0\n      Dim punctuation As Integer = 0\n        \n      For Each ch In phrase          \n         Console.Write(&quot;&#39;{0}&#39; &quot;, If(Not Char.IsControl(ch), ch, \n                                     &quot;0x&quot; + Convert.ToUInt16(ch).ToString(&quot;X4&quot;)))\n         If Char.IsLetterOrDigit(ch) Then \n            alphanumeric += 1\n         Else If Char.IsControl(ch) Then \n            controlChars += 1\n         Else If Char.IsPunctuation(ch) Then \n            punctuation += 1             \n         End If\n         CharCount += 1\n      Next\n\n      Console.WriteLine()\n      Console.WriteLine(&quot;   Total characters:        {0,3}&quot;, CharCount)\n      Console.WriteLine(&quot;   Alphanumeric characters: {0,3}&quot;, alphanumeric)\n      Console.WriteLine(&quot;   Punctuation characters:  {0,3}&quot;, punctuation)\n      Console.WriteLine(&quot;   Control Characters:      {0,3}&quot;, controlChars)\n      Console.WriteLine()\n    End Sub \nEnd Module \n&#39; This example displays the following output:\n&#39;    The characters in the string &quot;Test Case&quot; are:\n&#39;    &#39;T&#39; &#39;e&#39; &#39;s&#39; &#39;t&#39; &#39; &#39; &#39;C&#39; &#39;a&#39; &#39;s&#39; &#39;e&#39;\n&#39;       Total characters:          9\n&#39;       Alphanumeric characters:   8\n&#39;       Punctuation characters:    0\n&#39;       Control Characters:        0\n&#39;    \n&#39;    The characters in the string &quot;This is a sentence.&quot; are:\n&#39;       &#39;T&#39; &#39;h&#39; &#39;i&#39; &#39;s&#39; &#39; &#39; &#39;i&#39; &#39;s&#39; &#39; &#39; &#39;a&#39; &#39; &#39; &#39;s&#39; &#39;e&#39; &#39;n&#39; &#39;t&#39; &#39;e&#39; &#39;n&#39; &#39;c&#39; &#39;e&#39; &#39;.&#39;\n&#39;          Total characters:         19\n&#39;          Alphanumeric characters:  15\n&#39;          Punctuation characters:    1\n&#39;          Control Characters:        0\n&#39;       \n&#39;       The characters in the string &quot;Has       two     tabs&quot; are:\n&#39;       &#39;H&#39; &#39;a&#39; &#39;s&#39; &#39;0x0009&#39; &#39;t&#39; &#39;w&#39; &#39;o&#39; &#39;0x0009&#39; &#39;t&#39; &#39;a&#39; &#39;b&#39; &#39;s&#39;\n&#39;          Total characters:         12\n&#39;          Alphanumeric characters:  10\n&#39;          Punctuation characters:    0\n&#39;          Control Characters:        2\n&#39;       \n&#39;       The characters in the string &quot;Two\n&#39;       new\n&#39;       lines&quot; are:\n&#39;       &#39;T&#39; &#39;w&#39; &#39;o&#39; &#39;0x000A&#39; &#39;n&#39; &#39;e&#39; &#39;w&#39; &#39;0x000A&#39; &#39;l&#39; &#39;i&#39; &#39;n&#39; &#39;e&#39; &#39;s&#39;\n&#39;          Total characters:         13\n&#39;          Alphanumeric characters:  11\n&#39;          Punctuation characters:    0\n&#39;          Control Characters:        2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_GetHashCode\">\r\n    \r\n            <a id=\"System_String_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior of GetHashCode is dependent on its implementation, which might change from one version of the common language runtime to another. A reason why this might happen is to improve the performance of GetHashCode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If two string objects are equal, the GetHashCode method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.  </p>\n<p> The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain.  </p>\n<p> As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.  </p>\n<p> Finally, do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash. For cryptographic hashes, use a class derived from the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">System.Security.Cryptography.HashAlgorithm</a> or <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">System.Security.Cryptography.KeyedHashAlgorithm</a> class.  </p>\n<p> For more information about hash codes, see <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n</div>\n<p> In desktop apps, you can use the             <a href=\"../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md\" data-linktype=\"relative-path\">&lt;UseRandomizedStringHashAlgorithm&gt; element</a> to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the                <a href=\"../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md\" data-linktype=\"relative-path\">&lt;UseRandomizedStringHashAlgorithm&gt; element</a>. It defines a  to generate unique hash codes on a per application domain basis. This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables. The following example shows how to use the . It defines a <code>DisplayString</code> class that includes a private string constant, <code>s</code>, whose value is &quot;This is a string.&quot; It also includes a <code>ShowStringHashCode</code> method that displays the string value and its hash code along with the name of the application domain in which the method is executing.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.GetHashCode#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Show hash code in current domain.\n      DisplayString display = new DisplayString();\n      display.ShowStringHashCode();\n      \n      // Create a new app domain and show string hash code.\n      AppDomain domain = AppDomain.CreateDomain(&quot;NewDomain&quot;);\n      var display2 = (DisplayString) domain.CreateInstanceAndUnwrap(typeof(Example).Assembly.FullName, \n                                                          &quot;DisplayString&quot;);   \n      display2.ShowStringHashCode();\n   }\n}\n\npublic class DisplayString : MarshalByRefObject\n{\n   private String s = &quot;This is a string.&quot;;\n   \n   public override bool Equals(Object obj)\n   {\n      String s2 = obj as String; \n      if (s2 == null)\n         return false;\n      else\n         return s == s2; \n   }\n\n   public bool Equals(String str)\n   {\n      return s == str;\n   }    \n   \n   public override int GetHashCode()\n   {\n      return s.GetHashCode();\n   }\n   \n   public override String ToString() \n   {\n      return s;\n   }\n\n   public void ShowStringHashCode()\n   {\n      Console.WriteLine(&quot;String &#39;{0}&#39; in domain &#39;{1}&#39;: {2:X8}&quot;,\n                        s, AppDomain.CurrentDomain.FriendlyName, \n                        s.GetHashCode());\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.GetHashCode#2\">Module Example\n   Public Sub Main()\n      &#39; Show hash code in current domain.\n      Dim display As New DisplayString()\n      display.ShowStringHashCode()\n      \n      &#39; Create a new app domain and show string hash code.\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;NewDomain&quot;)\n      Dim display2 = CType(domain.CreateInstanceAndUnwrap(GetType(Example).Assembly.FullName, \n                                                          &quot;DisplayString&quot;), DisplayString)   \n      display2.ShowStringHashCode()\n   End Sub\nEnd Module\n\nPublic Class DisplayString : Inherits MarshalByRefObject\n\n   Private s As String = &quot;This is a string.&quot;\n   \n   Public Overrides Function Equals(obj As Object) As Boolean\n      Dim s2 As String = TryCast(obj, String)\n      If s2 Is Nothing Then\n         Return False\n      Else\n         Return s = s2 \n      End If\n   End Function\n\n   Public Overloads Function Equals(str As String) As Boolean\n      Return s = str\n   End Function    \n   \n   Public Overrides Function GetHashCode() As Integer\n      Return s.GetHashCode()\n   End Function\n   \n   Public Overrides Function ToString() As String\n      Return s\n   End Function\n\n   Public Sub ShowStringHashCode()\n      Console.WriteLine(&quot;String &#39;{0}&#39; in domain &#39;{1}&#39;: {2:X8}&quot;,\n                        s, AppDomain.CurrentDomain.FriendlyName, \n                        s.GetHashCode())\n   End Sub\nEnd Class\n</code></pre><p> When you run the example without supplying a configuration file, it displays output similar to the following. Note that the hash codes for the string are identical in the two application domains.  </p>\n<pre><code>\nString &#39;This is a string.&#39; in domain &#39;PerDomain.exe&#39;: 941BCEAC  \nString &#39;This is a string.&#39; in domain &#39;NewDomain&#39;: 941BCEAC  \n</code></pre><p> However, if you add the following configuration file to the example&#39;s directory and then run the example, the hash codes for the same string will differ by application domain.  </p>\n<pre><code>\n&lt;?xml version =&quot;1.0&quot;?&gt;  \n&lt;configuration&gt;  \n   &lt;runtime&gt;  \n      &lt;UseRandomizedStringHashAlgorithm enabled=&quot;1&quot; /&gt;  \n   &lt;/runtime&gt;  \n&lt;/configuration&gt;  \n</code></pre><p> When the configuration file is present, the example displays the following output:  </p>\n<pre><code>\nString &#39;This is a string.&#39; in domain &#39;PerDomain.exe&#39;: 5435776D  \nString &#39;This is a string.&#39; in domain &#39;NewDomain&#39;: 75CC8236  \n</code></pre><div class=\"IMPORTANT\"><h5>Important</h5><p> Hash codes are used to insert and retrieve keyed objects from hash tables efficiently. However, hash codes do not uniquely identify strings. Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings. In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain. Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.  </p>\n</div>\n<p> For additional information about the use of hash codes and the <code>GetHashCode</code> method, see <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the GetHashCode method using various input strings.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.string.gethashcode#1\">using namespace System;\n\nvoid DisplayHashCode( String^ Operand )\n{\n   int HashCode = Operand-&gt;GetHashCode();\n   Console::WriteLine( &quot;The hash code for \\&quot;{0}\\&quot; is: 0x{1:X8}, {1}&quot;, Operand, HashCode );\n}\n\nint main()\n{\n   DisplayHashCode( &quot;&quot; );\n   DisplayHashCode( &quot;a&quot; );\n   DisplayHashCode( &quot;ab&quot; );\n   DisplayHashCode( &quot;abc&quot; );\n   DisplayHashCode( &quot;abd&quot; );\n   DisplayHashCode( &quot;abe&quot; );\n   DisplayHashCode( &quot;abcdef&quot; );\n   DisplayHashCode( &quot;abcdeg&quot; );\n   DisplayHashCode( &quot;abcdeh&quot; );\n   DisplayHashCode( &quot;abcdei&quot; );\n   DisplayHashCode( &quot;Abcdeg&quot; );\n   DisplayHashCode( &quot;Abcdeh&quot; );\n   DisplayHashCode( &quot;Abcdei&quot; );\n}\n\n/*\nThis example displays output like the following:\n      The hash code for &quot;&quot; is: 0x2D2816FE, 757602046\n      The hash code for &quot;a&quot; is: 0xCDCAB7BF, -842352705\n      The hash code for &quot;ab&quot; is: 0xCDE8B7BF, -840386625\n      The hash code for &quot;abc&quot; is: 0x2001D81A, 536991770\n      The hash code for &quot;abd&quot; is: 0xC2A94CB5, -1029092171\n      The hash code for &quot;abe&quot; is: 0x6550C150, 1699791184\n      The hash code for &quot;abcdef&quot; is: 0x1762906D, 392335469\n      The hash code for &quot;abcdeg&quot; is: 0x1763906D, 392401005\n      The hash code for &quot;abcdeh&quot; is: 0x175C906D, 391942253\n      The hash code for &quot;abcdei&quot; is: 0x175D906D, 392007789\n      The hash code for &quot;Abcdeg&quot; is: 0x1763954D, 392402253\n      The hash code for &quot;Abcdeh&quot; is: 0x175C954D, 391943501\n      The hash code for &quot;Abcdei&quot; is: 0x175D954D, 392009037\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.string.gethashcode#1\">Module GetHashCode\n    Sub Main()\n        DisplayHashCode(&quot;&quot;)\n        DisplayHashCode(&quot;a&quot;)\n        DisplayHashCode(&quot;ab&quot;)\n        DisplayHashCode(&quot;abc&quot;)\n        DisplayHashCode(&quot;abd&quot;)\n        DisplayHashCode(&quot;abe&quot;)\n        DisplayHashCode(&quot;abcdef&quot;)\n        DisplayHashCode(&quot;abcdeg&quot;)\n        DisplayHashCode(&quot;abcdeh&quot;)\n        DisplayHashCode(&quot;abcdei&quot;)\n        DisplayHashCode(&quot;Abcdeg&quot;)\n        DisplayHashCode(&quot;Abcdeh&quot;)\n        DisplayHashCode(&quot;Abcdei&quot;)\n    End Sub\n       \n    Sub DisplayHashCode(Operand As String)\n        Dim HashCode As Integer = Operand.GetHashCode()\n        Console.WriteLine(&quot;The hash code for &quot;&quot;{0}&quot;&quot; is: 0x{1:X8}, {1}&quot;, \n                          Operand, HashCode)\n    End Sub \nEnd Module \n&#39; This example displays output like the following:\n&#39;       The hash code for &quot;&quot; is: 0x2D2816FE, 757602046\n&#39;       The hash code for &quot;a&quot; is: 0xCDCAB7BF, -842352705\n&#39;       The hash code for &quot;ab&quot; is: 0xCDE8B7BF, -840386625\n&#39;       The hash code for &quot;abc&quot; is: 0x2001D81A, 536991770\n&#39;       The hash code for &quot;abd&quot; is: 0xC2A94CB5, -1029092171\n&#39;       The hash code for &quot;abe&quot; is: 0x6550C150, 1699791184\n&#39;       The hash code for &quot;abcdef&quot; is: 0x1762906D, 392335469\n&#39;       The hash code for &quot;abcdeg&quot; is: 0x1763906D, 392401005\n&#39;       The hash code for &quot;abcdeh&quot; is: 0x175C906D, 391942253\n&#39;       The hash code for &quot;abcdei&quot; is: 0x175D906D, 392007789\n&#39;       The hash code for &quot;Abcdeg&quot; is: 0x1763954D, 392402253\n&#39;       The hash code for &quot;Abcdeh&quot; is: 0x175C954D, 391943501\n&#39;       The hash code for &quot;Abcdei&quot; is: 0x175D954D, 392009037\n</code></pre><pre><code class=\"lang-cs\" name=\"system.string.gethashcode#1\">using System;\n\nclass GetHashCode \n{\n    public static void Main() \n    {\n        DisplayHashCode( &quot;&quot; );\n        DisplayHashCode( &quot;a&quot; );\n        DisplayHashCode( &quot;ab&quot; );\n        DisplayHashCode( &quot;abc&quot; );\n        DisplayHashCode( &quot;abd&quot; );\n        DisplayHashCode( &quot;abe&quot; );\n        DisplayHashCode( &quot;abcdef&quot; );\n        DisplayHashCode( &quot;abcdeg&quot; );\n        DisplayHashCode( &quot;abcdeh&quot; );\n        DisplayHashCode( &quot;abcdei&quot; );\n        DisplayHashCode( &quot;Abcdeg&quot; );\n        DisplayHashCode( &quot;Abcdeh&quot; );\n        DisplayHashCode( &quot;Abcdei&quot; );\n    }\n\n    static void DisplayHashCode( String Operand )\n    {\n        int     HashCode = Operand.GetHashCode( );\n        Console.WriteLine(&quot;The hash code for \\&quot;{0}\\&quot; is: 0x{1:X8}, {1}&quot;,\n                          Operand, HashCode );\n    }\n}\n/*\n      This example displays output like the following:\n      The hash code for &quot;&quot; is: 0x2D2816FE, 757602046\n      The hash code for &quot;a&quot; is: 0xCDCAB7BF, -842352705\n      The hash code for &quot;ab&quot; is: 0xCDE8B7BF, -840386625\n      The hash code for &quot;abc&quot; is: 0x2001D81A, 536991770\n      The hash code for &quot;abd&quot; is: 0xC2A94CB5, -1029092171\n      The hash code for &quot;abe&quot; is: 0x6550C150, 1699791184\n      The hash code for &quot;abcdef&quot; is: 0x1762906D, 392335469\n      The hash code for &quot;abcdeg&quot; is: 0x1763906D, 392401005\n      The hash code for &quot;abcdeh&quot; is: 0x175C906D, 391942253\n      The hash code for &quot;abcdei&quot; is: 0x175D906D, 392007789\n      The hash code for &quot;Abcdeg&quot; is: 0x1763954D, 392402253\n      The hash code for &quot;Abcdeh&quot; is: 0x175C954D, 391943501\n      The hash code for &quot;Abcdei&quot; is: 0x175D954D, 392009037\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_GetTypeCode\">\r\n    \r\n            <a id=\"System_String_GetTypeCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for class <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeCode GetTypeCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </div>\r\n                  <p>The enumerated constant, <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> enumerated constant for the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type.  </p>\n<pre><code class=\"lang-cs\" name=\"string.gettypecode#1\">// Sample for String.GetTypeCode()\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    String str = &quot;abc&quot;;\n    TypeCode tc = str.GetTypeCode();\n    Console.WriteLine(&quot;The type code for &#39;{0}&#39; is {1}, which represents {2}.&quot;, \n                         str, tc.ToString(&quot;D&quot;), tc.ToString(&quot;F&quot;));\n    }\n}\n/*\nThis example produces the following results:\nThe type code for &#39;abc&#39; is 18, which represents String.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.gettypecode#1\">&#39; Sample for String.GetTypeCode()\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim str As [String] = &quot;abc&quot;\n      Dim tc As TypeCode = str.GetTypeCode()\n      Console.WriteLine(&quot;The type code for &#39;{0}&#39; is {1}, which represents {2}.&quot;, _\n                           str, tc.ToString(&quot;D&quot;), tc.ToString(&quot;F&quot;))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;The type code for &#39;abc&#39; is 18, which represents String.\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.gettypecode#1\">// Sample for String.GetTypeCode()\nusing namespace System;\nint main()\n{\n   String^ str = &quot;abc&quot;;\n   TypeCode tc = str-&gt;GetTypeCode();\n   Console::WriteLine( &quot;The type code for &#39;{0}&#39; is {1}, which represents {2}.&quot;, str, tc.ToString( &quot;D&quot; ), tc.ToString( &quot;F&quot; ) );\n}\n\n/*\nThis example produces the following results:\nThe type code for &#39;abc&#39; is 18, which represents String.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_Char_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character to seek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> if that character is found, or -1 if it is not.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how you can search a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> for a character using the IndexOf method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.IndexOf#5\">using namespace System;\n\nvoid main()\n{\n   // Create a Unicode String with 5 Greek Alpha characters.\n   String^ szGreekAlpha = gcnew String(L&#39;\\x0391&#39;,5);\n\n   // Create a Unicode String with a 3 Greek Omega characters.\n   String^ szGreekOmega = L&quot;\\x03A9\\x03A9\\x03A9&quot;;\n\n   String^ szGreekLetters = String::Concat(szGreekOmega, szGreekAlpha, \n                                           szGreekOmega-&gt;Clone());\n\n   // Display the entire string.\n   Console::WriteLine(szGreekLetters);\n\n   // The first index of Alpha.\n   int ialpha = szGreekLetters-&gt;IndexOf( L&#39;\\x0391&#39;);\n   // The first index of Omega.\n   int iomega = szGreekLetters-&gt;IndexOf(L&#39;\\x03A9&#39;);\n\n   Console::WriteLine(&quot;First occurrence of the Greek letter Alpha: Index {0}&quot;, \n                      ialpha);\n   Console::WriteLine(&quot;First occurrence of the Greek letter Omega: Index {0}&quot;, \n                      iomega);\n}\n// The example displays the following output:\n//       The string: OOO?????OOO\n//       First occurrence of the Greek letter Alpha: Index 3\n//       First occurrence of the Greek letter Omega: Index 0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IndexOf#5\">Public Module Example\n   Public Sub Main()\n      &#39; Create a Unicode string with 5 Greek Alpha characters.\n      Dim szGreekAlpha As New String(ChrW(&amp;H0391), 5)\n\n      &#39; Create a Unicode string with 3 Greek Omega characters.\n      Dim szGreekOmega As String = ChrW(&amp;H03A9) + ChrW(&amp;H03A9)+\n                                   ChrW(&amp;H03A9)\n\n      Dim szGreekLetters As String = String.Concat(szGreekOmega, szGreekAlpha, _\n                                                   szGreekOmega.Clone())\n\n      &#39; Display the entire string.\n      Console.WriteLine(szGreekLetters)\n\n      &#39; The first index of Alpha.\n      Dim iAlpha As Integer = szGreekLetters.IndexOf(ChrW(&amp;H0391))\n      &#39; The first index of Omega.\n      Dim iomega As Integer = szGreekLetters.IndexOf(ChrW(&amp;H03A9))\n\n      Console.WriteLine(&quot;First occurrence of the Greek letter Alpha: Index {0}&quot;, \n                        ialpha)\n      Console.WriteLine(&quot;First occurrence of the Greek letter Omega: Index {0}&quot;, \n                        iomega)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The string: OOO?????OOO\n&#39;       First occurrence of the Greek letter Alpha: Index 3\n&#39;       First occurrence of the Greek letter Omega: Index 0\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IndexOf#5\">using System;\n\nclass Example\n{\n   static void Main()\n   {\n      // Create a Unicode string with 5 Greek Alpha characters.\n      String szGreekAlpha = new String(&#39;\\u0391&#39;,5);\n\n      // Create a Unicode string with 3 Greek Omega characters.\n      String szGreekOmega = &quot;\\u03A9\\u03A9\\u03A9&quot;;\n      \n      String szGreekLetters = String.Concat(szGreekOmega, szGreekAlpha, \n                                            szGreekOmega.Clone());\n\n      // Display the entire string.\n      Console.WriteLine(&quot;The string: {0}&quot;, szGreekLetters);\n\n      // The first index of Alpha.\n      int ialpha = szGreekLetters.IndexOf(&#39;\\u0391&#39;);\n      // The first index of Omega.\n      int iomega = szGreekLetters.IndexOf(&#39;\\u03A9&#39;);\n\n      Console.WriteLine(&quot;First occurrence of the Greek letter Alpha: Index {0}&quot;, \n                        ialpha);\n      Console.WriteLine(&quot;First occurrence of the Greek letter Omega: Index {0}&quot;, \n                        iomega);\n   }\n} \n// The example displays the following output:\n//    The string: OOO?????OOO\n//    First occurrence of the Greek letter Alpha: Index 3\n//    First occurrence of the Greek letter Omega: Index 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_String_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified string in this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the first character position of this instance and continues until the last character position.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, theIndexOf method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance. In the following example, the IndexOf method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by &quot;n&quot;, and a soft hyphen followed by &quot;m&quot;) in two strings. Only one of the strings contains a soft hyphen. If the example is run on the .NET Framework 4 or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <code>value</code>. When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.IndexOf#21\">Module Example\n   Public Sub Main()\n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      Dim s1 As String = &quot;ani&quot; + softHyphen + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n      \n      &#39; Find the index of the soft hyphen.\n      Console.WriteLine(s1.IndexOf(softHyphen))\n      Console.WriteLine(s2.IndexOf(softHyphen))\n      \n      &#39; Find the index of the soft hyphen followed by &quot;n&quot;.\n      Console.WriteLine(s1.IndexOf(softHyphen + &quot;n&quot;))\n      Console.WriteLine(s2.IndexOf(softHyphen + &quot;n&quot;))\n      \n      &#39; Find the index of the soft hyphen followed by &quot;m&quot;.\n      Console.WriteLine(s1.IndexOf(softHyphen + &quot;m&quot;))\n      Console.WriteLine(s2.IndexOf(softHyphen + &quot;m&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output \n&#39; if run under the .NET Framework 4 or later:\n&#39;       0\n&#39;       0\n&#39;       1\n&#39;       1\n&#39;       4\n&#39;       3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IndexOf#21\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string s1 = &quot;ani\\u00ADmal&quot;;\n      string s2 = &quot;animal&quot;;\n      \n      // Find the index of the soft hyphen.\n      Console.WriteLine(s1.IndexOf(&quot;\\u00AD&quot;));\n      Console.WriteLine(s2.IndexOf(&quot;\\u00AD&quot;));\n      \n      // Find the index of the soft hyphen followed by &quot;n&quot;.\n      Console.WriteLine(s1.IndexOf(&quot;\\u00ADn&quot;));\n      Console.WriteLine(s2.IndexOf(&quot;\\u00ADn&quot;));\n      \n      // Find the index of the soft hyphen followed by &quot;m&quot;.\n      Console.WriteLine(s1.IndexOf(&quot;\\u00ADm&quot;));\n      Console.WriteLine(s2.IndexOf(&quot;\\u00ADm&quot;));\n   }\n}\n// The example displays the following output\n// if run under the .NET Framework 4 or later:\n//       0\n//       0\n//       1\n//       1\n//       4\n//       3\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example searches for the &quot;n&quot; in &quot;animal&quot;. Because string indexes begin at zero rather than one, the IndexOf method indicates that the &quot;n&quot; is at position 1.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.IndexOf#12\">using namespace System;\n\nvoid main()\n{\n   String^ str = &quot;animal&quot;;\n   String^ toFind = &quot;n&quot;;\n   int index = str-&gt;IndexOf(&quot;n&quot;);\n   Console::WriteLine(&quot;Found &#39;{0}&#39; in &#39;{1}&#39; at position {2}&quot;,\n                        toFind, str, index);\n\n}\n// The example displays the following output:\n//        Found &#39;n&#39; in &#39;animal&#39; at position 1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IndexOf#12\">Public Module Example\n   Public Sub Main()\n      Dim str As String = &quot;animal&quot;\n      Dim toFind As String = &quot;n&quot;\n      Dim index As Integer = str.IndexOf(&quot;n&quot;)\n      Console.WriteLine(&quot;Found &#39;{0}&#39; in &#39;{1}&#39; at position {2}&quot;,\n                        toFind, str, index)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Found &#39;n&#39; in &#39;animal&#39; at position 1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IndexOf#12\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String str = &quot;animal&quot;;\n      String toFind = &quot;n&quot;;\n      int index = str.IndexOf(&quot;n&quot;);\n      Console.WriteLine(&quot;Found &#39;{0}&#39; in &#39;{1}&#39; at position {2}&quot;,\n                        toFind, str, index);\n   }\n}\n// The example displays the following output:\n//        Found &#39;n&#39; in &#39;animal&#39; at position 1\n</code></pre><p> The following example uses the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to determine the starting position of an animal name in a sentence. It then uses this position to insert an adjective that describes the animal into the sentence.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringinsert#1\">using namespace System;\n\nint main()\n{\n   String^ animal1 = &quot;fox&quot;;\n   String^ animal2 = &quot;dog&quot;;\n   String^ strTarget = String::Format( &quot;The {0} jumped over the {1}.&quot;, animal1, animal2 );\n   Console::WriteLine( &quot;The original string is:{0}{1}{0}&quot;, Environment::NewLine, strTarget );\n   Console::Write( &quot;Enter an adjective (or group of adjectives) to describe the {0}: ==&gt; &quot;, animal1 );\n   String^ adj1 = Console::ReadLine();\n   Console::Write( &quot;Enter an adjective (or group of adjectives) to describe the {0}: ==&gt; &quot;, animal2 );\n   String^ adj2 = Console::ReadLine();\n   adj1 = String::Concat( adj1-&gt;Trim(), &quot; &quot; );\n   adj2 = String::Concat( adj2-&gt;Trim(), &quot; &quot; );\n   strTarget = strTarget-&gt;Insert( strTarget-&gt;IndexOf( animal1 ), adj1 );\n   strTarget = strTarget-&gt;Insert( strTarget-&gt;IndexOf( animal2 ), adj2 );\n   Console::WriteLine( &quot; {0}The final string is: {0} {1}&quot;, Environment::NewLine, strTarget );\n}\n// Output from the example might appear as follows:\n//       The original string is:\n//       The fox jumped over the dog.\n//       \n//       Enter an adjective (or group of adjectives) to describe the fox: ==&gt; bold\n//       Enter an adjective (or group of adjectives) to describe the dog: ==&gt; lazy\n//       \n//       The final string is:\n//       The bold fox jumped over the lazy dog.\n</code></pre><pre><code class=\"lang-vb\" name=\"stringinsert#1\">Public Class Example\n    Public Shared Sub Main()\n        Dim animal1 As String = &quot;fox&quot;\n        Dim animal2 As String = &quot;dog&quot;\n        Dim strTarget As String = String.Format(&quot;The {0} jumped over the {1}.&quot;, \n                                                animal1, animal2)\n        \n        Console.WriteLine(&quot;The original string is: {0}{1}{0}&quot;, \n                          Environment.NewLine, strTarget)\n        \n        Console.Write(&quot;Enter an adjective (or group of adjectives) &quot; +\n                      &quot;to describe the {0}: ==&gt; &quot;, animal1)\n        Dim adj1 As String = Console.ReadLine()\n        \n        Console.Write(&quot;Enter an adjective (or group of adjectives) &quot; + \n                      &quot;to describe the {0}: ==&gt; &quot;, animal2)\n        Dim adj2 As String = Console.ReadLine()\n        \n        adj1 = adj1.Trim() + &quot; &quot;\n        adj2 = adj2.Trim() + &quot; &quot;\n        \n        strTarget = strTarget.Insert(strTarget.IndexOf(animal1), adj1)\n        strTarget = strTarget.Insert(strTarget.IndexOf(animal2), adj2)\n        \n        Console.WriteLine(&quot;{0}The final string is:{0}{1}&quot;, \n                          Environment.NewLine, strTarget)\n    End Sub \nEnd Class \n&#39; Output from the example might appear as follows:\n&#39;       The original string is:\n&#39;       The fox jumped over the dog.\n&#39;       \n&#39;       Enter an adjective (or group of adjectives) to describe the fox: ==&gt; bold\n&#39;       Enter an adjective (or group of adjectives) to describe the dog: ==&gt; lazy\n&#39;       \n&#39;       The final string is:\n&#39;       The bold fox jumped over the lazy dog.\n</code></pre><pre><code class=\"lang-cs\" name=\"stringinsert#1\">using System;\n\npublic class Example {\n    public static void Main() \n    {\n        string animal1 = &quot;fox&quot;;\n        string animal2 = &quot;dog&quot;;\n\n        string strTarget = String.Format(&quot;The {0} jumped over the {1}.&quot;, \n                                         animal1, animal2);\n\n        Console.WriteLine(&quot;The original string is:{0}{1}{0}&quot;, \n                          Environment.NewLine, strTarget);\n\n        Console.Write(&quot;Enter an adjective (or group of adjectives) &quot; +\n                      &quot;to describe the {0}: ==&gt; &quot;, animal1);\n        string adj1 = Console.ReadLine();\n\n        Console.Write(&quot;Enter an adjective (or group of adjectives) &quot; + \n                      &quot;to describe the {0}: ==&gt; &quot;, animal2);    \n        string adj2 = Console.ReadLine();\n\n        adj1 = adj1.Trim() + &quot; &quot;;\n        adj2 = adj2.Trim() + &quot; &quot;;\n\n        strTarget = strTarget.Insert(strTarget.IndexOf(animal1), adj1);\n        strTarget = strTarget.Insert(strTarget.IndexOf(animal2), adj2);\n\n        Console.WriteLine(&quot;{0}The final string is:{0}{1}&quot;, \n                          Environment.NewLine, strTarget);\n    }\n}\n// Output from the example might appear as follows:\n//       The original string is:\n//       The fox jumped over the dog.\n//       \n//       Enter an adjective (or group of adjectives) to describe the fox: ==&gt; bold\n//       Enter an adjective (or group of adjectives) to describe the dog: ==&gt; lazy\n//       \n//       The final string is:\n//       The bold fox jumped over the lazy dog.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_Char_System_Int32_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Char,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (char value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than 0 (zero) or greater than the length of the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from 0. The <code>startIndex</code> parameter can range from 0 to the length of the string instance. If <code>startIndex</code> equals the length of the string instance, the method returns -1.  </p>\n<p> The search ranges from <code>startIndex</code> to the end of the string.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.indexof1#1\">// Sample for String::IndexOf(Char, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   Console::WriteLine();\n   Console::WriteLine( &quot;All occurrences of &#39;t&#39; from position 0 to {0}.&quot;, str-&gt;Length - 1 );\n   Console::WriteLine( &quot;{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   Console::Write( &quot;The letter &#39;t&#39; occurs at position(s): &quot; );\n   at = 0;\n   start = 0;\n   while ( (start &lt; str-&gt;Length) &amp;&amp; (at &gt; -1) )\n   {\n      at = str-&gt;IndexOf( &#39;t&#39;, start );\n      if ( at == -1 )\n            break;\n\n      Console::Write( &quot;{0} &quot;, at );\n      start = at + 1;\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\nAll occurrences of &#39;t&#39; from position 0 to 66.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe letter &#39;t&#39; occurs at position(s): 7 11 33 41 44 55 64\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.indexof1#1\">// Sample for String.IndexOf(Char, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;All occurrences of &#39;t&#39; from position 0 to {0}.&quot;, str.Length-1);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;The letter &#39;t&#39; occurs at position(s): &quot;);\n\n    at = 0;\n    start = 0; \n    while((start &lt; str.Length) &amp;&amp; (at &gt; -1))\n        {\n        at = str.IndexOf(&#39;t&#39;, start);\n        if (at == -1) break;\n        Console.Write(&quot;{0} &quot;, at);\n        start = at+1;\n        }\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nAll occurrences of &#39;t&#39; from position 0 to 66.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe letter &#39;t&#39; occurs at position(s): 7 11 33 41 44 55 64\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.indexof1#1\">&#39; Sample for String.IndexOf(Char, Int32)\n\nModule Sample\n    Sub Main()\n\n        Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n        Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n        Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n        Dim start As Integer\n        Dim at As Integer\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;All occurrences of &#39;t&#39; from position 0 to {0}.&quot;, str.Length - 1)\n        Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n        Console.Write(&quot;The letter &#39;t&#39; occurs at position(s): &quot;)\n\n        at = 0\n        start = 0\n        While start &lt; str.Length AndAlso at &gt; -1\n            at = str.IndexOf(&quot;t&quot;c, start)\n            If at = -1 Then\n                Exit While\n            End If\n            Console.Write(&quot;{0} &quot;, at)\n            start = at + 1\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Module\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;All occurrences of &#39;t&#39; from position 0 to 66.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;The letter &#39;t&#39; occurs at position(s): 7 11 33 41 44 55 64\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (string value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than 0 (zero) or greater than the length of this string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from 0. The <code>startIndex</code> parameter can range from 0 to the length of the string instance. If <code>startIndex</code> equals the length of the string instance, the method returns -1.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at the <code>startIndex</code> character position of this instance and continues until the last character position.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the IndexOf method always returns <code>startIndex</code>, which is the character position at which the search begins. In the following example, the IndexOf method is used to find the position of a soft hyphen (U+00AD) followed by an &quot;m&quot; in two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of &quot;m&quot; in the string. Note that in the case of the first string, which includes the soft hyphen followed by an &quot;m&quot;, the method fails to return the index of the soft hyphen but instead returns the index of the &quot;m&quot;.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.IndexOf#22\">Module Example\n   Public Sub Main()\n      Dim searchString As String = Chrw(&amp;h00AD) + &quot;m&quot;\n      Dim s1 As String = &quot;ani&quot; + ChrW(&amp;h00AD) + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n\n      Console.WriteLine(s1.IndexOf(searchString, 2))\n      Console.WriteLine(s2.IndexOf(searchString, 2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       4\n&#39;       3 \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IndexOf#22\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string searchString = &quot;\\u00ADm&quot;;\n      string s1 = &quot;ani\\u00ADmal&quot; ;\n      string s2 = &quot;animal&quot;;\n\n      Console.WriteLine(s1.IndexOf(searchString, 2));\n      Console.WriteLine(s2.IndexOf(searchString, 2));\n   }\n}\n// The example displays the following output:\n//       4\n//       3\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example searches for all occurrences of a specified string within a target string.  </p>\n<pre><code class=\"lang-cs\" name=\"stringindexof4#1\">using System;\n\npublic class IndexOfTest {\n    public static void Main() {\n\n        string strSource = &quot;This is the string which we will perform the search on&quot;;\n\n        Console.WriteLine(&quot;The search string is:{0}\\&quot;{1}\\&quot;{0}&quot;, Environment.NewLine, strSource);\n\n        string strTarget = &quot;&quot;;\n        int found = 0;\n        int totFinds = 0;\n\n        do {\n            Console.Write(&quot;Please enter a search value to look for in the above string (hit Enter to exit) ==&gt; &quot;);\n\n            strTarget = Console.ReadLine();\n\n            if (strTarget != &quot;&quot;) {\n\n                for (int i = 0; i &lt; strSource.Length; i++) {\n\n                    found = strSource.IndexOf(strTarget, i);\n\n                    if (found &gt;= 0) {\n                        totFinds++;\n                        i = found;\n                    }\n                    else\n                        break;\n                }\n            }\n            else\n                return;\n\n            Console.WriteLine(&quot;{0}The search parameter &#39;{1}&#39; was found {2} times.{0}&quot;,\n                    Environment.NewLine, strTarget, totFinds);\n\n            totFinds = 0;\n\n        } while ( true );\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringindexof4#1\">using namespace System;\nint main()\n{\n   String^ strSource = &quot;This is the string which we will perform the search on&quot;;\n   Console::WriteLine( &quot;The search string is: {0}\\&quot;{1}\\&quot; {0}&quot;, Environment::NewLine, strSource );\n   String^ strTarget = &quot;&quot;;\n   int found = 0;\n   int totFinds = 0;\n   do\n   {\n      Console::Write( &quot;Please enter a search value to look for in the above string (hit Enter to exit) ==&gt; &quot; );\n      strTarget = Console::ReadLine();\n      if (  !strTarget-&gt;Equals( &quot;&quot; ) )\n      {\n         for ( int i = 0; i &lt; strSource-&gt;Length; i++ )\n         {\n            found = strSource-&gt;IndexOf( strTarget, i );\n            if (found &gt;= 0)\n            {\n               totFinds++;\n               i = found;\n            }\n            else\n               break;\n\n         }\n      }\n      else\n            return 0;\n      Console::WriteLine( &quot;{0}The search parameter &#39;{1}&#39; was found {2} times. {0}&quot;, Environment::NewLine, strTarget, totFinds );\n      totFinds = 0;\n   }\n   while ( true );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"stringindexof4#1\">Imports System\n\nPublic Class IndexOfTest\n    \n    Public Shared Sub Main()\n        Dim strSource As String = &quot;This is the string which we will perform the search on&quot;\n        \n        Console.WriteLine(&quot;The search string is:{0}{1}{0}&quot;, Environment.NewLine, strSource)\n        Dim strTarget As String = &quot;&quot;\n        Dim found As Integer = 0\n        Dim totFinds As Integer = 0\n        \n        Do\n            Console.Write(&quot;Please enter a search value to look for in the above string (hit Enter to exit) ==&gt; &quot;)\n            \n            strTarget = Console.ReadLine()\n            If strTarget &lt;&gt; &quot;&quot; Then\n                Dim i As Integer\n                \n                \n                For i = 0 To strSource.Length - 1\n                    \n                    found = strSource.IndexOf(strTarget, i)\n                    If found &gt;= 0 Then\n                        \n                        totFinds += 1\n                        i = found\n                    Else\n                        Exit For\n                    End If\n                Next i\n            Else\n                Return\n            \n            End If\n            Console.WriteLine(&quot;{0}The search parameter &#39;{1}&#39; was found {2} times.{0}&quot;, Environment.NewLine, strTarget, totFinds)\n            \n            totFinds = 0\n        \n        Loop While True\n    End Sub &#39;Main\nEnd Class &#39;IndexOfTest\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_String_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. A parameter specifies the type of search to use for the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (string value, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following exampledemonstrates three overloads of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method that find the first occurrence of a string within another string using different values of the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration.  </p>\n<pre><code class=\"lang-vb\" name=\"system.string.IndexOfCmp#1\">&#39; This code example demonstrates the \n&#39; System.String.IndexOf(String, ..., StringComparison) methods.\n\nImports System\nImports System.Threading\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim intro As String = &quot;Find the first occurrence of a character using different &quot; &amp; _\n                              &quot;values of StringComparison.&quot;\n        Dim resultFmt As String = &quot;Comparison: {0,-28} Location: {1,3}&quot;\n        \n        &#39; Define a string to search for.\n        &#39; U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n        Dim CapitalAWithRing As String = &quot;&#197;&quot;\n        \n        &#39; Define a string to search. \n        &#39; The result of combining the characters LATIN SMALL LETTER A and COMBINING \n        &#39; RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n        Dim cat As String = &quot;A Cheshire c&quot; &amp; &quot;aÌŠ&quot; &amp; &quot;t&quot;\n        \n        Dim loc As Integer = 0\n        Dim scValues As StringComparison() =  { _\n                        StringComparison.CurrentCulture, _\n                        StringComparison.CurrentCultureIgnoreCase, _\n                        StringComparison.InvariantCulture, _\n                        StringComparison.InvariantCultureIgnoreCase, _\n                        StringComparison.Ordinal, _\n                        StringComparison.OrdinalIgnoreCase }\n        Dim sc As StringComparison\n        \n        &#39; Clear the screen and display an introduction.\n        Console.Clear()\n        Console.WriteLine(intro)\n        \n        &#39; Display the current culture because culture affects the result. For example, \n        &#39; try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n        Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot; - {1}.&quot;, _\n                           Thread.CurrentThread.CurrentCulture.Name, _ \n                           Thread.CurrentThread.CurrentCulture.DisplayName)\n        \n        &#39; Display the string to search for and the string to search.\n        Console.WriteLine(&quot;Search for the string &quot;&quot;{0}&quot;&quot; in the string &quot;&quot;{1}&quot;&quot;&quot;, _\n                           CapitalAWithRing, cat)\n        Console.WriteLine()\n        \n        &#39; Note that in each of the following searches, we look for \n        &#39; LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n        &#39; the string was not found.\n        &#39; Search using different values of StringComparison. Specify the start \n        &#39; index and count.\n\n        Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, 0, cat.Length, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparison. Specify the \n        &#39; start index. \n\n        Console.WriteLine(vbCrLf &amp; &quot;Part 2: Start index is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, 0, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparison. \n\n        Console.WriteLine(vbCrLf &amp; &quot;Part 3: Neither start index nor count is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;Note: This code example was executed on a console whose user interface \n&#39;culture is &quot;en-US&quot; (English-United States).\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Find the first occurrence of a character using different values of StringComparison.\n&#39;The current culture is &quot;en-US&quot; - English (United States).\n&#39;Search for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n&#39;\n&#39;Part 1: Start index and count are specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 2: Start index is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 3: Neither start index nor count is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.string.IndexOfCmp#1\">// This code example demonstrates the \n// System.String.IndexOf(String, ..., StringComparison) methods.\n\nusing System;\nusing System.Threading;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string intro = &quot;Find the first occurrence of a character using different &quot; + \n                   &quot;values of StringComparison.&quot;;\n    string resultFmt = &quot;Comparison: {0,-28} Location: {1,3}&quot;;\n\n// Define a string to search for.\n// U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n    string CapitalAWithRing = &quot;\\u00c5&quot;; \n\n// Define a string to search. \n// The result of combining the characters LATIN SMALL LETTER A and COMBINING \n// RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n// LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n    string cat = &quot;A Cheshire c&quot; + &quot;\\u0061\\u030a&quot; + &quot;t&quot;;\n\n    int loc = 0;\n    StringComparison[] scValues = {\n        StringComparison.CurrentCulture,\n        StringComparison.CurrentCultureIgnoreCase,\n        StringComparison.InvariantCulture,\n        StringComparison.InvariantCultureIgnoreCase,\n        StringComparison.Ordinal,\n        StringComparison.OrdinalIgnoreCase };\n\n// Clear the screen and display an introduction.\n    Console.Clear();\n    Console.WriteLine(intro);\n\n// Display the current culture because culture affects the result. For example, \n// try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n\n    Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot; - {1}.&quot;, \n                       Thread.CurrentThread.CurrentCulture.Name,\n                       Thread.CurrentThread.CurrentCulture.DisplayName);\n\n// Display the string to search for and the string to search.\n    Console.WriteLine(&quot;Search for the string \\&quot;{0}\\&quot; in the string \\&quot;{1}\\&quot;&quot;, \n                       CapitalAWithRing, cat);\n    Console.WriteLine();\n\n// Note that in each of the following searches, we look for \n// LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n// LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n// the string was not found.\n// Search using different values of StringComparison. Specify the start \n// index and count. \n\n    Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, 0, cat.Length, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparison. Specify the \n// start index. \n    Console.WriteLine(&quot;<br>Part 2: Start index is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, 0, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparison. \n    Console.WriteLine(&quot;<br>Part 3: Neither start index nor count is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n    }\n}\n\n/*\nNote: This code example was executed on a console whose user interface \nculture is &quot;en-US&quot; (English-United States).\n\nThis code example produces the following results:\n\nFind the first occurrence of a character using different values of StringComparison.\nThe current culture is &quot;en-US&quot; - English (United States).\nSearch for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n\nPart 1: Start index and count are specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 2: Start index is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 3: Neither start index nor count is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_Char_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Char,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (char value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of character positions to examine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> from the start of the string if that character is found, or -1 if it is not.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than the length of this string.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of this string minus <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The search begins at <code>startIndex</code> and continues to <code>startIndex</code> + <code>count</code> -1. The character at <code>startIndex</code> + <code>count</code> is not included in the search.  </p>\n<p> Index numbering starts from 0 (zero). The <code>startIndex</code> parameter can range from 0 to the length of the string instance.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.string.indexof#1\">// Example for the String::IndexOf( Char, int, int ) method.\nusing namespace System;\nvoid FindAllChar( Char target, String^ searched )\n{\n   Console::Write( &quot;The character &#39;{0}&#39; occurs at position(s): &quot;, target );\n   int startIndex = -1;\n   int hitCount = 0;\n   \n   // Search for all occurrences of the target.\n   while ( true )\n   {\n      startIndex = searched-&gt;IndexOf( target, startIndex + 1, searched-&gt;Length - startIndex - 1 );\n      \n      // Exit the loop if the target is not found.\n      if ( startIndex &lt; 0 )\n            break;\n\n      Console::Write( &quot;{0}, &quot;, startIndex );\n      hitCount++;\n   }\n\n   Console::WriteLine( &quot;occurrences: {0}&quot;, hitCount );\n}\n\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----&quot;\n   &quot;4----+----5----+----6----+----7&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789&quot;\n   &quot;0123456789012345678901234567890&quot;;\n   String^ str = &quot;ABCDEFGHI abcdefghi ABCDEFGHI abcdefghi &quot;\n   &quot;ABCDEFGHI abcdefghi ABCDEFGHI&quot;;\n   Console::WriteLine( &quot;This example of String::IndexOf( Char, int, int )<br>&quot;\n   &quot;generates the following output.&quot; );\n   Console::WriteLine( &quot;{0}{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   FindAllChar( &#39;A&#39;, str );\n   FindAllChar( &#39;a&#39;, str );\n   FindAllChar( &#39;I&#39;, str );\n   FindAllChar( &#39;i&#39;, str );\n   FindAllChar( &#39;@&#39;, str );\n   FindAllChar( &#39; &#39;, str );\n}\n\n/*\nThis example of String::IndexOf( Char, int, int )\ngenerates the following output.\n\n0----+----1----+----2----+----3----+----4----+----5----+----6----+----7\n01234567890123456789012345678901234567890123456789012345678901234567890\nABCDEFGHI abcdefghi ABCDEFGHI abcdefghi ABCDEFGHI abcdefghi ABCDEFGHI\n\nThe character &#39;A&#39; occurs at position(s): 0, 20, 40, 60, occurrences: 4\nThe character &#39;a&#39; occurs at position(s): 10, 30, 50, occurrences: 3\nThe character &#39;I&#39; occurs at position(s): 8, 28, 48, 68, occurrences: 4\nThe character &#39;i&#39; occurs at position(s): 18, 38, 58, occurrences: 3\nThe character &#39;@&#39; occurs at position(s): occurrences: 0\nThe character &#39; &#39; occurs at position(s): 9, 19, 29, 39, 49, 59, occurrences: 6\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"system.string.indexof#1\">// Example for the String.IndexOf( char, int, int ) method.\nusing System;\n\nclass IndexOfCII \n{\n    public static void Main() \n    {\n        string br1 = \n            &quot;0----+----1----+----2----+----3----+----&quot; +\n            &quot;4----+----5----+----6----+----7&quot;;\n        string br2 = \n            &quot;0123456789012345678901234567890123456789&quot; +\n            &quot;0123456789012345678901234567890&quot;;\n        string str = \n            &quot;ABCDEFGHI abcdefghi ABCDEFGHI abcdefghi &quot; +\n            &quot;ABCDEFGHI abcdefghi ABCDEFGHI&quot;;\n\n        Console.WriteLine( \n            &quot;This example of String.IndexOf( char, int, int )<br>&quot; +\n            &quot;generates the following output.&quot; );\n        Console.WriteLine( \n            &quot;{0}{1}{0}{2}{0}{3}{0}&quot;, \n            Environment.NewLine, br1, br2, str );\n\n        FindAllChar( &#39;A&#39;, str );\n        FindAllChar( &#39;a&#39;, str );\n        FindAllChar( &#39;I&#39;, str );\n        FindAllChar( &#39;i&#39;, str );\n        FindAllChar( &#39;@&#39;, str );\n        FindAllChar( &#39; &#39;, str );\n    }\n\n    static void FindAllChar( Char target, String searched )\n    {\n        Console.Write( \n            &quot;The character &#39;{0}&#39; occurs at position(s): &quot;, \n            target );\n\n        int     startIndex = -1;\n        int     hitCount = 0;\n\n        // Search for all occurrences of the target.\n        while( true )\n        {\n            startIndex = searched.IndexOf( \n                target, startIndex + 1, \n                searched.Length - startIndex - 1 );\n\n            // Exit the loop if the target is not found.\n            if( startIndex &lt; 0 )\n                break;\n\n            Console.Write( &quot;{0}, &quot;, startIndex );\n            hitCount++;\n        }\n\n        Console.WriteLine( &quot;occurrences: {0}&quot;, hitCount );\n    }\n}\n\n/*\nThis example of String.IndexOf( char, int, int )\ngenerates the following output.\n\n0----+----1----+----2----+----3----+----4----+----5----+----6----+----7\n01234567890123456789012345678901234567890123456789012345678901234567890\nABCDEFGHI abcdefghi ABCDEFGHI abcdefghi ABCDEFGHI abcdefghi ABCDEFGHI\n\nThe character &#39;A&#39; occurs at position(s): 0, 20, 40, 60, occurrences: 4\nThe character &#39;a&#39; occurs at position(s): 10, 30, 50, occurrences: 3\nThe character &#39;I&#39; occurs at position(s): 8, 28, 48, 68, occurrences: 4\nThe character &#39;i&#39; occurs at position(s): 18, 38, 58, occurrences: 3\nThe character &#39;@&#39; occurs at position(s): occurrences: 0\nThe character &#39; &#39; occurs at position(s): 9, 19, 29, 39, 49, 59, occurrences: 6\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.string.indexof#1\">&#39; Example for the String.IndexOf( Char, Integer, Integer ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule IndexOfCII\n   \n    Sub Main()\n        Dim br1 As String = _\n            &quot;0----+----1----+----2----+----3----+----&quot; &amp; _\n            &quot;4----+----5----+----6----+----7&quot;\n        Dim br2 As String = _\n            &quot;0123456789012345678901234567890123456789&quot; &amp; _\n            &quot;0123456789012345678901234567890&quot;\n        Dim str As String = _\n            &quot;ABCDEFGHI abcdefghi ABCDEFGHI abcdefghi &quot; &amp; _\n            &quot;ABCDEFGHI abcdefghi ABCDEFGHI&quot;\n          \n        Console.WriteLine( _\n            &quot;This example of String.IndexOf( Char, Integer, Integer )&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; )\n        Console.WriteLine( _\n            &quot;{0}{1}{0}{2}{0}{3}{0}&quot;, _\n            Environment.NewLine, br1, br2, str)\n\n        FindAllChar(&quot;A&quot;c, str)\n        FindAllChar(&quot;a&quot;c, str)\n        FindAllChar(&quot;I&quot;c, str)\n        FindAllChar(&quot;i&quot;c, str)\n        FindAllChar(&quot;@&quot;c, str)\n        FindAllChar(&quot; &quot;c, str)\n    End Sub &#39;Main\n       \n    Sub FindAllChar(target As Char, searched As String)\n\n        Console.Write( _\n            &quot;The character &quot;&quot;{0}&quot;&quot; occurs at position(s): &quot;, target)\n          \n        Dim startIndex As Integer = - 1\n        Dim hitCount As Integer = 0\n          \n        &#39; Search for all occurrences of the target.\n        While True\n            startIndex = searched.IndexOf( _\n                target, startIndex + 1, _\n                searched.Length - startIndex - 1)\n\n            &#39; Exit the loop if the target is not found.\n            If startIndex &lt; 0 Then\n                Exit While\n            End If \n\n            Console.Write(&quot;{0}, &quot;, startIndex)\n            hitCount += 1\n        End While\n          \n        Console.WriteLine(&quot;occurrences: {0}&quot;, hitCount)\n\n    End Sub &#39;FindAllChar\nEnd Module &#39;IndexOfCII\n\n&#39; This example of String.IndexOf( Char, Integer, Integer )\n&#39; generates the following output.\n&#39; \n&#39; 0----+----1----+----2----+----3----+----4----+----5----+----6----+----7\n&#39; 01234567890123456789012345678901234567890123456789012345678901234567890\n&#39; ABCDEFGHI abcdefghi ABCDEFGHI abcdefghi ABCDEFGHI abcdefghi ABCDEFGHI\n&#39; \n&#39; The character &quot;A&quot; occurs at position(s): 0, 20, 40, 60, occurrences: 4\n&#39; The character &quot;a&quot; occurs at position(s): 10, 30, 50, occurrences: 3\n&#39; The character &quot;I&quot; occurs at position(s): 8, 28, 48, 68, occurrences: 4\n&#39; The character &quot;i&quot; occurs at position(s): 18, 38, 58, occurrences: 3\n&#39; The character &quot;@&quot; occurs at position(s): occurrences: 0\n&#39; The character &quot; &quot; occurs at position(s): 9, 19, 29, 39, 49, 59, occurrences: 6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (string value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of character positions to examine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than the length of this string.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of this string minus <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from 0 (zero). The <code>startIndex</code> parameter can range from 0 to the length of the string instance.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture. The search begins at <code>startIndex</code> and continues to <code>startIndex</code> + <code>count</code> -1. The character at <code>startIndex</code> + <code>count</code> is not included in the search.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the IndexOf method always returns <code>startIndex</code>, which is the character position at which the search begins. In the following example, the IndexOf method is used to find the position of a soft hyphen (U+00AD) followed by an &quot;m&quot; starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of &quot;m&quot; in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an &quot;m&quot;, the method fails to return the index of the soft hyphen but instead returns the index of the &quot;m&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.IndexOf#23\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string searchString = &quot;\\u00ADm&quot;;\n      string s1 = &quot;ani\\u00ADmal&quot; ;\n      string s2 = &quot;animal&quot;;\n\n      Console.WriteLine(s1.IndexOf(searchString, 2, 4));\n      Console.WriteLine(s2.IndexOf(searchString, 2, 4));\n   }\n}\n// The example displays the following output:\n//       4\n//       3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IndexOf#23\">Module Example\n   Public Sub Main()\n      Dim searchString As String = Chrw(&amp;h00AD) + &quot;m&quot;\n      Dim s1 As String = &quot;ani&quot; + ChrW(&amp;h00AD) + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n\n      Console.WriteLine(s1.IndexOf(searchString, 2, 4))\n      Console.WriteLine(s2.IndexOf(searchString, 2, 4))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       4\n&#39;       3\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of all occurrences of the string &quot;he&quot; within a substring of another string. Note that the number of characters to be searched must be recalculated for each search iteration.  </p>\n<pre><code class=\"lang-cs\" name=\"string.indexof8#1\">// Sample for String.IndexOf(String, Int32, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n    int end;\n    int count;\n\n    end = str.Length;\n    start = end/2;\n    Console.WriteLine();\n    Console.WriteLine(&quot;All occurrences of &#39;he&#39; from position {0} to {1}.&quot;, start, end-1);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;The string &#39;he&#39; occurs at position(s): &quot;);\n\n    count = 0;\n    at = 0;\n    while((start &lt;= end) &amp;&amp; (at &gt; -1))\n        {\n// start+count must be a position within -str-.\n        count = end - start;\n        at = str.IndexOf(&quot;he&quot;, start, count);\n        if (at == -1) break;\n        Console.Write(&quot;{0} &quot;, at);\n        start = at+1;\n        }\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nAll occurrences of &#39;he&#39; from position 33 to 66.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe string &#39;he&#39; occurs at position(s): 45 56\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.indexof8#1\">// Sample for String::IndexOf(String, Int32, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   int end;\n   int count;\n   end = str-&gt;Length;\n   start = end / 2;\n   Console::WriteLine();\n   Console::WriteLine( &quot;All occurrences of &#39;he&#39; from position {0} to {1}.&quot;, start, end - 1 );\n   Console::WriteLine( &quot;{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   Console::Write( &quot;The string &#39;he&#39; occurs at position(s): &quot; );\n   count = 0;\n   at = 0;\n   while ( (start &lt;= end) &amp;&amp; (at &gt; -1) )\n   {\n      \n      // start+count must be a position within -str-.\n      count = end - start;\n      at = str-&gt;IndexOf( &quot;he&quot;, start, count );\n      if ( at == -1 )\n            break;\n\n      Console::Write( &quot;{0} &quot;, at );\n      start = at + 1;\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\nAll occurrences of &#39;he&#39; from position 33 to 66.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe string &#39;he&#39; occurs at position(s): 45 56\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.indexof8#1\">&#39; Sample for String.IndexOf(String, Int32, Int32)\nImports System\n\nClass Sample\n   \n   Public Shared Sub Main()\n      \n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      Dim [end] As Integer\n      Dim count As Integer\n      \n      [end] = str.Length\n      start = [end] / 2\n      Console.WriteLine()\n      Console.WriteLine(&quot;All occurrences of &#39;he&#39; from position {0} to {1}.&quot;, start, [end] - 1)\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;The string &#39;he&#39; occurs at position(s): &quot;)\n      \n      count = 0\n      at = 0\n      While start &lt;= [end] AndAlso at &gt; - 1\n         &#39; start+count must be a position within -str-.\n         count = [end] - start\n         at = str.IndexOf(&quot;he&quot;, start, count)\n         If at = - 1 Then\n            Exit While\n         End If\n         Console.Write(&quot;{0} &quot;, at)\n         start = at + 1\n      End While\n      Console.WriteLine()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;All occurrences of &#39;he&#39; from position 33 to 66.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;The string &#39;he&#39; occurs at position(s): 45 56\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_String_System_Int32_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Int32,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (string value, int startIndex, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than 0 (zero) or greater than the length of this string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from 0. The <code>startIndex</code> parameter can range from 0 to the length of the string instance. If <code>startIndex</code> equals the length of the string instance, the method returns -1.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following exampledemonstrates three overloads of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method that find the first occurrence of a string within another string using different values of the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration.  </p>\n<pre><code class=\"lang-vb\" name=\"system.string.IndexOfCmp#1\">&#39; This code example demonstrates the \n&#39; System.String.IndexOf(String, ..., StringComparison) methods.\n\nImports System\nImports System.Threading\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim intro As String = &quot;Find the first occurrence of a character using different &quot; &amp; _\n                              &quot;values of StringComparison.&quot;\n        Dim resultFmt As String = &quot;Comparison: {0,-28} Location: {1,3}&quot;\n        \n        &#39; Define a string to search for.\n        &#39; U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n        Dim CapitalAWithRing As String = &quot;&#197;&quot;\n        \n        &#39; Define a string to search. \n        &#39; The result of combining the characters LATIN SMALL LETTER A and COMBINING \n        &#39; RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n        Dim cat As String = &quot;A Cheshire c&quot; &amp; &quot;aÌŠ&quot; &amp; &quot;t&quot;\n        \n        Dim loc As Integer = 0\n        Dim scValues As StringComparison() =  { _\n                        StringComparison.CurrentCulture, _\n                        StringComparison.CurrentCultureIgnoreCase, _\n                        StringComparison.InvariantCulture, _\n                        StringComparison.InvariantCultureIgnoreCase, _\n                        StringComparison.Ordinal, _\n                        StringComparison.OrdinalIgnoreCase }\n        Dim sc As StringComparison\n        \n        &#39; Clear the screen and display an introduction.\n        Console.Clear()\n        Console.WriteLine(intro)\n        \n        &#39; Display the current culture because culture affects the result. For example, \n        &#39; try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n        Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot; - {1}.&quot;, _\n                           Thread.CurrentThread.CurrentCulture.Name, _ \n                           Thread.CurrentThread.CurrentCulture.DisplayName)\n        \n        &#39; Display the string to search for and the string to search.\n        Console.WriteLine(&quot;Search for the string &quot;&quot;{0}&quot;&quot; in the string &quot;&quot;{1}&quot;&quot;&quot;, _\n                           CapitalAWithRing, cat)\n        Console.WriteLine()\n        \n        &#39; Note that in each of the following searches, we look for \n        &#39; LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n        &#39; the string was not found.\n        &#39; Search using different values of StringComparison. Specify the start \n        &#39; index and count.\n\n        Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, 0, cat.Length, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparison. Specify the \n        &#39; start index. \n\n        Console.WriteLine(vbCrLf &amp; &quot;Part 2: Start index is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, 0, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparison. \n\n        Console.WriteLine(vbCrLf &amp; &quot;Part 3: Neither start index nor count is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;Note: This code example was executed on a console whose user interface \n&#39;culture is &quot;en-US&quot; (English-United States).\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Find the first occurrence of a character using different values of StringComparison.\n&#39;The current culture is &quot;en-US&quot; - English (United States).\n&#39;Search for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n&#39;\n&#39;Part 1: Start index and count are specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 2: Start index is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 3: Neither start index nor count is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.string.IndexOfCmp#1\">// This code example demonstrates the \n// System.String.IndexOf(String, ..., StringComparison) methods.\n\nusing System;\nusing System.Threading;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string intro = &quot;Find the first occurrence of a character using different &quot; + \n                   &quot;values of StringComparison.&quot;;\n    string resultFmt = &quot;Comparison: {0,-28} Location: {1,3}&quot;;\n\n// Define a string to search for.\n// U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n    string CapitalAWithRing = &quot;\\u00c5&quot;; \n\n// Define a string to search. \n// The result of combining the characters LATIN SMALL LETTER A and COMBINING \n// RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n// LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n    string cat = &quot;A Cheshire c&quot; + &quot;\\u0061\\u030a&quot; + &quot;t&quot;;\n\n    int loc = 0;\n    StringComparison[] scValues = {\n        StringComparison.CurrentCulture,\n        StringComparison.CurrentCultureIgnoreCase,\n        StringComparison.InvariantCulture,\n        StringComparison.InvariantCultureIgnoreCase,\n        StringComparison.Ordinal,\n        StringComparison.OrdinalIgnoreCase };\n\n// Clear the screen and display an introduction.\n    Console.Clear();\n    Console.WriteLine(intro);\n\n// Display the current culture because culture affects the result. For example, \n// try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n\n    Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot; - {1}.&quot;, \n                       Thread.CurrentThread.CurrentCulture.Name,\n                       Thread.CurrentThread.CurrentCulture.DisplayName);\n\n// Display the string to search for and the string to search.\n    Console.WriteLine(&quot;Search for the string \\&quot;{0}\\&quot; in the string \\&quot;{1}\\&quot;&quot;, \n                       CapitalAWithRing, cat);\n    Console.WriteLine();\n\n// Note that in each of the following searches, we look for \n// LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n// LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n// the string was not found.\n// Search using different values of StringComparison. Specify the start \n// index and count. \n\n    Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, 0, cat.Length, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparison. Specify the \n// start index. \n    Console.WriteLine(&quot;<br>Part 2: Start index is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, 0, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparison. \n    Console.WriteLine(&quot;<br>Part 3: Neither start index nor count is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n    }\n}\n\n/*\nNote: This code example was executed on a console whose user interface \nculture is &quot;en-US&quot; (English-United States).\n\nThis code example produces the following results:\n\nFind the first occurrence of a character using different values of StringComparison.\nThe current culture is &quot;en-US&quot; - English (United States).\nSearch for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n\nPart 1: Start index and count are specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 2: Start index is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 3: Neither start index nor count is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOf_System_String_System_Int32_System_Int32_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String,Int32,Int32,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence of the specified string in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of character positions to examine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of the <code>value</code> parameter from the start of the current instance if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the length of this string minus <code>startIndex</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from 0 (zero). The <code>startIndex</code> parameter can range from 0 to the length of the string instance.  </p>\n<p> The search begins at <code>startIndex</code> and continues to <code>startIndex</code> + <code>count</code> -1. The character at <code>startIndex</code> + <code>count</code> is not included in the search.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following exampledemonstrates three overloads of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method that find the first occurrence of a string within another string using different values of the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration.  </p>\n<pre><code class=\"lang-vb\" name=\"system.string.IndexOfCmp#1\">&#39; This code example demonstrates the \n&#39; System.String.IndexOf(String, ..., StringComparison) methods.\n\nImports System\nImports System.Threading\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim intro As String = &quot;Find the first occurrence of a character using different &quot; &amp; _\n                              &quot;values of StringComparison.&quot;\n        Dim resultFmt As String = &quot;Comparison: {0,-28} Location: {1,3}&quot;\n        \n        &#39; Define a string to search for.\n        &#39; U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n        Dim CapitalAWithRing As String = &quot;&#197;&quot;\n        \n        &#39; Define a string to search. \n        &#39; The result of combining the characters LATIN SMALL LETTER A and COMBINING \n        &#39; RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n        Dim cat As String = &quot;A Cheshire c&quot; &amp; &quot;aÌŠ&quot; &amp; &quot;t&quot;\n        \n        Dim loc As Integer = 0\n        Dim scValues As StringComparison() =  { _\n                        StringComparison.CurrentCulture, _\n                        StringComparison.CurrentCultureIgnoreCase, _\n                        StringComparison.InvariantCulture, _\n                        StringComparison.InvariantCultureIgnoreCase, _\n                        StringComparison.Ordinal, _\n                        StringComparison.OrdinalIgnoreCase }\n        Dim sc As StringComparison\n        \n        &#39; Clear the screen and display an introduction.\n        Console.Clear()\n        Console.WriteLine(intro)\n        \n        &#39; Display the current culture because culture affects the result. For example, \n        &#39; try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n        Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot; - {1}.&quot;, _\n                           Thread.CurrentThread.CurrentCulture.Name, _ \n                           Thread.CurrentThread.CurrentCulture.DisplayName)\n        \n        &#39; Display the string to search for and the string to search.\n        Console.WriteLine(&quot;Search for the string &quot;&quot;{0}&quot;&quot; in the string &quot;&quot;{1}&quot;&quot;&quot;, _\n                           CapitalAWithRing, cat)\n        Console.WriteLine()\n        \n        &#39; Note that in each of the following searches, we look for \n        &#39; LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n        &#39; the string was not found.\n        &#39; Search using different values of StringComparison. Specify the start \n        &#39; index and count.\n\n        Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, 0, cat.Length, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparison. Specify the \n        &#39; start index. \n\n        Console.WriteLine(vbCrLf &amp; &quot;Part 2: Start index is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, 0, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparison. \n\n        Console.WriteLine(vbCrLf &amp; &quot;Part 3: Neither start index nor count is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.IndexOf(CapitalAWithRing, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;Note: This code example was executed on a console whose user interface \n&#39;culture is &quot;en-US&quot; (English-United States).\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Find the first occurrence of a character using different values of StringComparison.\n&#39;The current culture is &quot;en-US&quot; - English (United States).\n&#39;Search for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n&#39;\n&#39;Part 1: Start index and count are specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 2: Start index is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 3: Neither start index nor count is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.string.IndexOfCmp#1\">// This code example demonstrates the \n// System.String.IndexOf(String, ..., StringComparison) methods.\n\nusing System;\nusing System.Threading;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string intro = &quot;Find the first occurrence of a character using different &quot; + \n                   &quot;values of StringComparison.&quot;;\n    string resultFmt = &quot;Comparison: {0,-28} Location: {1,3}&quot;;\n\n// Define a string to search for.\n// U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n    string CapitalAWithRing = &quot;\\u00c5&quot;; \n\n// Define a string to search. \n// The result of combining the characters LATIN SMALL LETTER A and COMBINING \n// RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n// LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n    string cat = &quot;A Cheshire c&quot; + &quot;\\u0061\\u030a&quot; + &quot;t&quot;;\n\n    int loc = 0;\n    StringComparison[] scValues = {\n        StringComparison.CurrentCulture,\n        StringComparison.CurrentCultureIgnoreCase,\n        StringComparison.InvariantCulture,\n        StringComparison.InvariantCultureIgnoreCase,\n        StringComparison.Ordinal,\n        StringComparison.OrdinalIgnoreCase };\n\n// Clear the screen and display an introduction.\n    Console.Clear();\n    Console.WriteLine(intro);\n\n// Display the current culture because culture affects the result. For example, \n// try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n\n    Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot; - {1}.&quot;, \n                       Thread.CurrentThread.CurrentCulture.Name,\n                       Thread.CurrentThread.CurrentCulture.DisplayName);\n\n// Display the string to search for and the string to search.\n    Console.WriteLine(&quot;Search for the string \\&quot;{0}\\&quot; in the string \\&quot;{1}\\&quot;&quot;, \n                       CapitalAWithRing, cat);\n    Console.WriteLine();\n\n// Note that in each of the following searches, we look for \n// LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n// LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n// the string was not found.\n// Search using different values of StringComparison. Specify the start \n// index and count. \n\n    Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, 0, cat.Length, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparison. Specify the \n// start index. \n    Console.WriteLine(&quot;<br>Part 2: Start index is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, 0, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparison. \n    Console.WriteLine(&quot;<br>Part 3: Neither start index nor count is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.IndexOf(CapitalAWithRing, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n    }\n}\n\n/*\nNote: This code example was executed on a console whose user interface \nculture is &quot;en-US&quot; (English-United States).\n\nThis code example produces the following results:\n\nFind the first occurrence of a character using different values of StringComparison.\nThe current culture is &quot;en-US&quot; - English (United States).\nSearch for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n\nPart 1: Start index and count are specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 2: Start index is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 3: Neither start index nor count is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOfAny_System_Char___\">\r\n    \r\n            <a id=\"System_String_IndexOfAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOfAny(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOfAny (char[] anyOf);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>anyOf</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array containing one or more characters to seek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>anyOf</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero.  </p>\n<p> The search for <code>anyOf</code> is case-sensitive. If <code>anyOf</code> is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the first vowel in a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.IndexOfAny#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      char[] chars = { &#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;, &#39;y&#39;, \n                       &#39;A&#39;, &#39;E&#39;, &#39;I&#39;, &#39;O&#39;, &#39;U&#39;, &#39;Y&#39; };\n      String s = &quot;The long and winding road...&quot;;\n      Console.WriteLine(&quot;The first vowel in <br>   {0}<br>is found at position {1}&quot;, \n                        s, s.IndexOfAny(chars) + 1);                         \n   }\n}\n// The example displays the following output:\n//       The first vowel in\n//          The long and winding road...\n//       is found at position 3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IndexOfAny#1\">Module Example\n   Public Sub Main()\n      Dim chars() As Char = { &quot;a&quot;c, &quot;e&quot;c, &quot;i&quot;c, &quot;o&quot;c, &quot;u&quot;c, &quot;y&quot;c, \n                              &quot;A&quot;c, &quot;E&quot;c, &quot;I&quot;c, &quot;O&quot;c, &quot;U&quot;c, &quot;Y&quot;c }\n      Dim s As String = &quot;The long and winding road...&quot;\n      Console.WriteLine(&quot;The first vowel in {2}   {0}{2}is found at position {1}&quot;, \n                        s, s.IndexOfAny(chars) + 1, vbCrLf)                         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The first vowel in\n&#39;          The long and winding road...\n&#39;       is found at position 3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOfAny_System_Char___System_Int32_\">\r\n    \r\n            <a id=\"System_String_IndexOfAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOfAny(Char[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOfAny (char[] anyOf, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>anyOf</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array containing one or more characters to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>anyOf</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than the number of characters in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. The <code>startIndex</code> parameter can range from 0 to one less than the length of the string instance.  </p>\n<p> The search ranges from <code>startIndex</code> to the end of the string.  </p>\n<p> The search for <code>anyOf</code> is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of the occurrence of any character of the string &quot;is&quot; within a substring of another string.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.indexofany2#1\">// Sample for String::IndexOfAny(Char[], Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   String^ target = &quot;is&quot;;\n   array&lt;Char&gt;^anyOf = target-&gt;ToCharArray();\n   start = str-&gt;Length / 2;\n   Console::WriteLine();\n   Console::WriteLine( &quot;The first character occurrence from position {0} to {1}.&quot;, start, str-&gt;Length - 1 );\n   Console::WriteLine( &quot;{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   Console::Write( &quot;A character in &#39;{0}&#39; occurs at position: &quot;, target );\n   at = str-&gt;IndexOfAny( anyOf, start );\n   if ( at &gt; -1 )\n      Console::Write( at );\n   else\n      Console::Write( &quot;(not found)&quot; );\n\n   Console::WriteLine();\n}\n\n/*\n\nThe first character occurrence from position 33 to 66.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;is&#39; occurs at position: 49\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.indexofany2#1\">&#39; Sample for String.IndexOfAny(Char[], Int32)\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      Dim target As String = &quot;is&quot;\n      Dim anyOf As Char() = target.ToCharArray()\n      \n      start = str.Length / 2\n      Console.WriteLine()\n      Console.WriteLine(&quot;Search for a character occurrence from position {0} to {1}.&quot;, _\n                           start, str.Length - 1)\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target)\n      at = str.IndexOfAny(anyOf, start)\n      If at &gt; - 1 Then\n         Console.Write(at)\n      Else\n         Console.Write(&quot;(not found)&quot;)\n      End If\n      Console.WriteLine()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;\n&#39;Search for a character occurrence from position 33 to 66.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;A character in &#39;is&#39; occurs at position: 49\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"string.indexofany2#1\">// Sample for String.IndexOfAny(Char[], Int32)\nusing System;\n\nclass Sample {\n    public static void Main() \n    {\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n    string target = &quot;is&quot;;\n    char[] anyOf = target.ToCharArray();\n\n    start = str.Length/2;\n    Console.WriteLine();\n    Console.WriteLine(&quot;The first character occurrence from position {0} to {1}.&quot;, \n                           start, str.Length-1);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target);\n\n    at = str.IndexOfAny(anyOf, start);\n    if (at &gt; -1) \n        Console.Write(at);\n    else\n        Console.Write(&quot;(not found)&quot;);\n    Console.WriteLine();\n    }\n}\n/*\n\nThe first character occurrence from position 33 to 66.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;is&#39; occurs at position: 49\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IndexOfAny_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_IndexOfAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOfAny(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOfAny (char[] anyOf, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>anyOf</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array containing one or more characters to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of character positions to examine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of the first occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>anyOf</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>count</code> + <code>startIndex</code> is greater than the number of characters in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The search begins at <code>startIndex</code> and continues to <code>startIndex</code> + <code>count</code> -1. The character at <code>startIndex</code> + <code>count</code> is not included in the search.  </p>\n<p> Index numbering starts from zero. The <code>startIndex</code> parameter can range from 0 to one less than the length of the string instance.  </p>\n<p> The search for <code>anyOf</code> is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of the occurrence of any character of the string &quot;aid&quot; within a substring of another string.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.indexofany3#1\">// Sample for String::IndexOfAny(Char[], Int32, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   int count;\n   String^ target = &quot;aid&quot;;\n   array&lt;Char&gt;^anyOf = target-&gt;ToCharArray();\n   start = (str-&gt;Length - 1) / 3;\n   count = (str-&gt;Length - 1) / 4;\n   Console::WriteLine();\n   Console::WriteLine( &quot;The first character occurrence from position {0} for {1} characters.&quot;, start, count );\n   Console::WriteLine( &quot;{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   Console::Write( &quot;A character in &#39;{0}&#39; occurs at position: &quot;, target );\n   at = str-&gt;IndexOfAny( anyOf, start, count );\n   if ( at &gt; -1 )\n      Console::Write( at );\n   else\n      Console::Write( &quot;(not found)&quot; );\n\n   Console::WriteLine();\n}\n\n/*\n\nThe first character occurrence from position 22 for 16 characters.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;aid&#39; occurs at position: 27\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.indexofany3#1\">// Sample for String.IndexOfAny(Char[], Int32, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() \n    {\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n    int count;\n    string target = &quot;aid&quot;;\n    char[] anyOf = target.ToCharArray();\n\n    start = (str.Length-1)/3;\n    count = (str.Length-1)/4;\n    Console.WriteLine();\n    Console.WriteLine(&quot;The first character occurrence from position {0} for {1} characters.&quot;, start, count);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target);\n\n    at = str.IndexOfAny(anyOf, start, count);\n    if (at &gt; -1) \n        Console.Write(at);\n    else\n        Console.Write(&quot;(not found)&quot;);\n    Console.WriteLine();\n    }\n}\n/*\n\nThe first character occurrence from position 22 for 16 characters.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;aid&#39; occurs at position: 27\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.indexofany3#1\">&#39; Sample for String.IndexOfAny(Char[], Int32, Int32)\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      Dim count As Integer\n      Dim target As String = &quot;aid&quot;\n      Dim anyOf As Char() = target.ToCharArray()\n      \n      start =(str.Length - 1) / 3\n      count =(str.Length - 1) / 4\n      Console.WriteLine()\n      Console.WriteLine(&quot;The first character occurrence from position {0} for {1} characters.&quot;, start, count)\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target)\n      \n      at = str.IndexOfAny(anyOf, start, count)\n      If at &gt; - 1 Then\n         Console.Write(at)\n      Else\n         Console.Write(&quot;(not found)&quot;)\n      End If\n      Console.WriteLine()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;The first character occurrence from position 22 for 16 characters.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;A character in &#39;aid&#39; occurs at position: 27\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Insert_System_Int32_System_String_\">\r\n    \r\n            <a id=\"System_String_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string in which a specified string is inserted at a specified index position in this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Insert (int startIndex, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index position of the insertion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string that is equivalent to this instance, but with <code>value</code> inserted at position <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is negative or greater than the length of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>startIndex</code> is equal to the length of this instance, <code>value</code> is appended to the end of this instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which <code>value</code> is inserted into the current instance.  </p>\n</div>\n<p> For example, the return value of <code>&quot;abc&quot;.Insert(2, &quot;XYZ&quot;)</code> is &quot;abXYZc&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example inserts a space character in the fourth character position (the character at index 3) of a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Insert#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String original = &quot;aaabbb&quot;;\n      Console.WriteLine(&quot;The original string: &#39;{0}&#39;&quot;, original);\n      String modified = original.Insert(3, &quot; &quot;);\n      Console.WriteLine(&quot;The modified string: &#39;{0}&#39;&quot;, modified);\n   }\n}\n// The example displays the following output:\n//     The original string: &#39;aaabbb&#39;\n//     The modified string: &#39;aaa bbb&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Insert#1\">Public Module Example\n   Public Sub Main()\n      Dim original As String = &quot;aaabbb&quot;\n      Console.WriteLine(&quot;The original string: &#39;{0}&#39;&quot;, original)\n      Dim modified As String = original.Insert(3, &quot; &quot;)\n      Console.WriteLine(&quot;The modified string: &#39;{0}&#39;&quot;, modified)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The original string: &#39;aaabbb&#39;\n&#39;     The modified string: &#39;aaa bbb&#39;\n</code></pre><p> The following console application prompts the users to enter one or more adjectives to describe two animals. It then calls the Insert method to insert the text entered by the user into a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringinsert#1\">using namespace System;\n\nint main()\n{\n   String^ animal1 = &quot;fox&quot;;\n   String^ animal2 = &quot;dog&quot;;\n   String^ strTarget = String::Format( &quot;The {0} jumped over the {1}.&quot;, animal1, animal2 );\n   Console::WriteLine( &quot;The original string is:{0}{1}{0}&quot;, Environment::NewLine, strTarget );\n   Console::Write( &quot;Enter an adjective (or group of adjectives) to describe the {0}: ==&gt; &quot;, animal1 );\n   String^ adj1 = Console::ReadLine();\n   Console::Write( &quot;Enter an adjective (or group of adjectives) to describe the {0}: ==&gt; &quot;, animal2 );\n   String^ adj2 = Console::ReadLine();\n   adj1 = String::Concat( adj1-&gt;Trim(), &quot; &quot; );\n   adj2 = String::Concat( adj2-&gt;Trim(), &quot; &quot; );\n   strTarget = strTarget-&gt;Insert( strTarget-&gt;IndexOf( animal1 ), adj1 );\n   strTarget = strTarget-&gt;Insert( strTarget-&gt;IndexOf( animal2 ), adj2 );\n   Console::WriteLine( &quot; {0}The final string is: {0} {1}&quot;, Environment::NewLine, strTarget );\n}\n// Output from the example might appear as follows:\n//       The original string is:\n//       The fox jumped over the dog.\n//       \n//       Enter an adjective (or group of adjectives) to describe the fox: ==&gt; bold\n//       Enter an adjective (or group of adjectives) to describe the dog: ==&gt; lazy\n//       \n//       The final string is:\n//       The bold fox jumped over the lazy dog.\n</code></pre><pre><code class=\"lang-vb\" name=\"stringinsert#1\">Public Class Example\n    Public Shared Sub Main()\n        Dim animal1 As String = &quot;fox&quot;\n        Dim animal2 As String = &quot;dog&quot;\n        Dim strTarget As String = String.Format(&quot;The {0} jumped over the {1}.&quot;, \n                                                animal1, animal2)\n        \n        Console.WriteLine(&quot;The original string is: {0}{1}{0}&quot;, \n                          Environment.NewLine, strTarget)\n        \n        Console.Write(&quot;Enter an adjective (or group of adjectives) &quot; +\n                      &quot;to describe the {0}: ==&gt; &quot;, animal1)\n        Dim adj1 As String = Console.ReadLine()\n        \n        Console.Write(&quot;Enter an adjective (or group of adjectives) &quot; + \n                      &quot;to describe the {0}: ==&gt; &quot;, animal2)\n        Dim adj2 As String = Console.ReadLine()\n        \n        adj1 = adj1.Trim() + &quot; &quot;\n        adj2 = adj2.Trim() + &quot; &quot;\n        \n        strTarget = strTarget.Insert(strTarget.IndexOf(animal1), adj1)\n        strTarget = strTarget.Insert(strTarget.IndexOf(animal2), adj2)\n        \n        Console.WriteLine(&quot;{0}The final string is:{0}{1}&quot;, \n                          Environment.NewLine, strTarget)\n    End Sub \nEnd Class \n&#39; Output from the example might appear as follows:\n&#39;       The original string is:\n&#39;       The fox jumped over the dog.\n&#39;       \n&#39;       Enter an adjective (or group of adjectives) to describe the fox: ==&gt; bold\n&#39;       Enter an adjective (or group of adjectives) to describe the dog: ==&gt; lazy\n&#39;       \n&#39;       The final string is:\n&#39;       The bold fox jumped over the lazy dog.\n</code></pre><pre><code class=\"lang-cs\" name=\"stringinsert#1\">using System;\n\npublic class Example {\n    public static void Main() \n    {\n        string animal1 = &quot;fox&quot;;\n        string animal2 = &quot;dog&quot;;\n\n        string strTarget = String.Format(&quot;The {0} jumped over the {1}.&quot;, \n                                         animal1, animal2);\n\n        Console.WriteLine(&quot;The original string is:{0}{1}{0}&quot;, \n                          Environment.NewLine, strTarget);\n\n        Console.Write(&quot;Enter an adjective (or group of adjectives) &quot; +\n                      &quot;to describe the {0}: ==&gt; &quot;, animal1);\n        string adj1 = Console.ReadLine();\n\n        Console.Write(&quot;Enter an adjective (or group of adjectives) &quot; + \n                      &quot;to describe the {0}: ==&gt; &quot;, animal2);    \n        string adj2 = Console.ReadLine();\n\n        adj1 = adj1.Trim() + &quot; &quot;;\n        adj2 = adj2.Trim() + &quot; &quot;;\n\n        strTarget = strTarget.Insert(strTarget.IndexOf(animal1), adj1);\n        strTarget = strTarget.Insert(strTarget.IndexOf(animal2), adj2);\n\n        Console.WriteLine(&quot;{0}The final string is:{0}{1}&quot;, \n                          Environment.NewLine, strTarget);\n    }\n}\n// Output from the example might appear as follows:\n//       The original string is:\n//       The fox jumped over the dog.\n//       \n//       Enter an adjective (or group of adjectives) to describe the fox: ==&gt; bold\n//       Enter an adjective (or group of adjectives) to describe the dog: ==&gt; lazy\n//       \n//       The final string is:\n//       The bold fox jumped over the lazy dog.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Intern_System_String_\">\r\n    \r\n            <a id=\"System_String_Intern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intern(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the system&#39;s reference to the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Intern (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string to search for in the intern pool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The system&#39;s reference to <code>str</code>, if it is interned; otherwise, a new reference to a string with the value of <code>str</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.  </p>\n<p> For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.  </p>\n<p> The Intern method uses the intern pool to search for a string equal to the value of <code>str</code>. If such a string exists, its reference in the intern pool is returned. If the string does not exist, a reference to <code>str</code> is added to the intern pool, then that reference is returned.  </p>\n<p> In the following example, the string s1, which has a value of &quot;MyTest&quot;, is already interned because it is a literal in the program. The <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">System.Text.StringBuilder</a> class generates a new string object that has the same value as s1. A reference to that string is assigned to s2. The Intern method searches for a string that has the same value as s2. Because such a string exists, the method returns the same reference that is assigned to s1. That reference is then assigned to s3. References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Intern#1\">      string s1 = &quot;MyTest&quot;; \n      string s2 = new StringBuilder().Append(&quot;My&quot;).Append(&quot;Test&quot;).ToString(); \n      string s3 = String.Intern(s2); \n      Console.WriteLine((Object)s2==(Object)s1); // Different references.\n      Console.WriteLine((Object)s3==(Object)s1); // The same reference.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Intern#1\">      Dim s1 As String = &quot;MyTest&quot; \n      Dim s2 As String = New StringBuilder().Append(&quot;My&quot;).Append(&quot;Test&quot;).ToString() \n      Dim s3 As String = String.Intern(s2) \n      Console.WriteLine(CObj(s2) Is CObj(s1))      &#39; Different references.\n      Console.WriteLine(CObj(s3) Is CObj(s1))      &#39; The same reference.\n</code></pre><p> Compare this method to the <a class=\"xref\" href=\"system.string#System_String_IsInterned_\" data-linktype=\"relative-path\">IsInterned</a> method.  </p>\n<h2 id=\"version-considerations\">Version Considerations</h2>\n<p> In the .NET Framework 3.5 Service Pack 1, the Intern method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string. In the following example, the variable <code>str1</code> is assigned a reference to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and the variable <code>str2</code> is assigned the reference to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> that is returned by calling the Intern method after converting a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object whose value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> to a string. Then the references contained in <code>str1</code> and <code>str2</code> are compared for equality.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Intern#2\">\t\tstring str1 = String.Empty;\n\t\tstring str2 = String.Empty;\n\n\t\tStringBuilder sb = new StringBuilder().Append(String.Empty);\n\t\tstr2 = String.Intern(sb.ToString());\t\n\t\t\n\t\tif((object)str1==(object)str2)\n\t\t\tConsole.WriteLine(&quot;The strings are equal.&quot;);\n\t\telse\n\t\t\tConsole.WriteLine(&quot;The strings are not equal.&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Intern#2\">\t\tDim str1 As String = String.Empty\n\t\tDim str2 As String = String.Empty\n\n\t\tDim sb As StringBuilder = New StringBuilder().Append(String.Empty)\n\t\tstr2 = String.Intern(sb.ToString())\t\n\t\t\n\t\tIf CObj(str1) Is CObj(str2) Then\n\t\t\tConsole.WriteLine(&quot;The strings are equal.&quot;)\n\t\tElse\n\t\t\tConsole.WriteLine(&quot;The strings are not equal.&quot;)\n\t\tEnd If\t\n</code></pre><p> In the .NET Framework 1.0, .NET Framework 1.1, and .NET Framework 3.5 SP1, <code>str1</code> and <code>str2</code> are equal. In the .NET Framework 2.0 Service Pack 1 and .NET Framework 3.0, <code>str1</code> and <code>str2</code> are not equal.  </p>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects. First, the memory allocated for interned <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects is not likely be released until the common language runtime (CLR) terminates. The reason is that the CLR&#39;s reference to the interned <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object can persist after your application, or even your application domain, terminates. Second, to intern a string, you must first create the string. The memory used by the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object must still be allocated, even though the memory will eventually be garbage collected.  </p>\n<p> The .NET Framework version 2.0 introduces the <a class=\"xref\" href=\"system.runtime.compilerservices.compilationrelaxations\" data-linktype=\"relative-path\">System.Runtime.CompilerServices.CompilationRelaxations</a>enumeration member. The <a class=\"xref\" href=\"system.runtime.compilerservices.compilationrelaxations\" data-linktype=\"relative-path\">CompilationRelaxations</a> member marks an assembly as not requiring string-literal interning. You can apply <a class=\"xref\" href=\"system.runtime.compilerservices.compilationrelaxations\" data-linktype=\"relative-path\">CompilationRelaxations</a> to an assembly using the <a class=\"xref\" href=\"system.runtime.compilerservices.compilationrelaxationsattribute\" data-linktype=\"relative-path\">CompilationRelaxationsAttribute</a> attribute. Also, when you use the <a href=\"../Topic/Ngen.exe%20(Native%20Image%20Generator).md\" data-linktype=\"relative-path\">Ngen.exe (Native Image Generator)</a> to compile an assembly in advance of run time, strings are not interned across modules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.intern#1\">// Sample for String::Intern(String)\nusing namespace System;\nusing namespace System::Text;\nint main()\n{\n   String^ s1 = &quot;MyTest&quot;;\n   String^ s2 = (gcnew StringBuilder)-&gt;Append( &quot;My&quot; )-&gt;Append( &quot;Test&quot; )-&gt;ToString();\n   String^ s3 = String::Intern( s2 );\n   Console::WriteLine( &quot;s1 == &#39;{0}&#39;&quot;, s1 );\n   Console::WriteLine( &quot;s2 == &#39;{0}&#39;&quot;, s2 );\n   Console::WriteLine( &quot;s3 == &#39;{0}&#39;&quot;, s3 );\n   Console::WriteLine( &quot;Is s2 the same reference as s1?: {0}&quot;, s2 == s1 );\n   Console::WriteLine( &quot;Is s3 the same reference as s1?: {0}&quot;, s3 == s1 );\n}\n\n/*\nThis example produces the following results:\ns1 == &#39;MyTest&#39;\ns2 == &#39;MyTest&#39;\ns3 == &#39;MyTest&#39;\nIs s2 the same reference as s1?: False\nIs s3 the same reference as s1?: True\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.intern#1\">// Sample for String.Intern(String)\nusing System;\nusing System.Text;\n\nclass Sample {\n    public static void Main() {\n    String s1 = &quot;MyTest&quot;;\n    String s2 = new StringBuilder().Append(&quot;My&quot;).Append(&quot;Test&quot;).ToString(); \n    String s3 = String.Intern(s2); \n    Console.WriteLine(&quot;s1 == &#39;{0}&#39;&quot;, s1);\n    Console.WriteLine(&quot;s2 == &#39;{0}&#39;&quot;, s2);\n    Console.WriteLine(&quot;s3 == &#39;{0}&#39;&quot;, s3);\n    Console.WriteLine(&quot;Is s2 the same reference as s1?: {0}&quot;, (Object)s2==(Object)s1); \n    Console.WriteLine(&quot;Is s3 the same reference as s1?: {0}&quot;, (Object)s3==(Object)s1);\n    }\n}\n/*\nThis example produces the following results:\ns1 == &#39;MyTest&#39;\ns2 == &#39;MyTest&#39;\ns3 == &#39;MyTest&#39;\nIs s2 the same reference as s1?: False\nIs s3 the same reference as s1?: True\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.intern#1\">&#39; Sample for String.Intern(String)\nImports System\nImports System.Text\n\nClass Sample\n   \n   Public Shared Sub Main()\n      Dim s1 As [String] = &quot;MyTest&quot;\n      Dim s2 As [String] = New StringBuilder().Append(&quot;My&quot;).Append(&quot;Test&quot;).ToString()\n      Dim s3 As [String] = [String].Intern(s2)\n      Console.WriteLine(&quot;s1 = &#39;{0}&#39;&quot;, s1)\n      Console.WriteLine(&quot;s2 = &#39;{0}&#39;&quot;, s2)\n      Console.WriteLine(&quot;s3 = &#39;{0}&#39;&quot;, s3)\n      Console.WriteLine(&quot;Is s2 the same reference as s1?: {0}&quot;, s2 Is s1)\n      Console.WriteLine(&quot;Is s3 the same reference as s1?: {0}&quot;, s3 Is s1)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;s1 = &#39;MyTest&#39;\n&#39;s2 = &#39;MyTest&#39;\n&#39;s3 = &#39;MyTest&#39;\n&#39;Is s2 the same reference as s1?: False\n&#39;Is s3 the same reference as s1?: True\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IsInterned_System_String_\">\r\n    \r\n            <a id=\"System_String_IsInterned_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInterned(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a reference to a specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string IsInterned (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search for in the intern pool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A reference to <code>str</code> if it is in the common language runtime intern pool; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> you add programmatically by calling the <a class=\"xref\" href=\"system.string#System_String_Intern_\" data-linktype=\"relative-path\">Intern</a> method.  </p>\n<p> The intern pool conserves string storage. If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that have identical values.  </p>\n<p> This method looks up <code>str</code> in the intern pool. If <code>str</code> has already been interned, a reference to that instance is returned; otherwise, <code>null</code> is returned.  </p>\n<p> Compare this method to the <a class=\"xref\" href=\"system.string#System_String_Intern_\" data-linktype=\"relative-path\">Intern</a> method.  </p>\n<p> This method does not return a Boolean value. If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.IsInterned#1\">Module Example\n   Public Sub Main()\n      Dim str1 As String = &quot;a&quot;\n      Dim str2 As String = str1 + &quot;b&quot;\n      Dim str3 As String = str2 + &quot;c&quot;\n      Dim strings() As String = { &quot;value&quot;, &quot;part1&quot; + &quot;_&quot; + &quot;part2&quot;, str3, \n                                  String.Empty, Nothing }\n      For Each value In strings\n         If value Is Nothing Then Continue For\n         \n         Dim interned As Boolean = (String.IsInterned(value) IsNot Nothing)\n         If interned Then\n            Console.WriteLine(&quot;&#39;{0}&#39; is in the string intern pool.&quot;, \n                              value)\n         Else\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the string intern pool.&quot;,\n                              value)                      \n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;value&#39; is in the string intern pool.\n&#39;       &#39;part1_part2&#39; is in the string intern pool.\n&#39;       &#39;abc&#39; is not in the string intern pool.\n&#39;       &#39;&#39; is in the string intern pool.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsInterned#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string str1 = &quot;a&quot;;\n      string str2 = str1 + &quot;b&quot;;\n      string str3 = str2 + &quot;c&quot;;\n      string[] strings = { &quot;value&quot;, &quot;part1&quot; + &quot;_&quot; + &quot;part2&quot;, str3, \n                           String.Empty, null };\n      foreach (var value in strings) {\n         if (value == null) continue;\n         \n         bool interned = String.IsInterned(value) != null;\n         if (interned)\n            Console.WriteLine(&quot;&#39;{0}&#39; is in the string intern pool.&quot;, \n                              value);\n         else\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the string intern pool.&quot;,\n                              value);                      \n      }\n   }\n}\n// The example displays the following output:\n//       &#39;value&#39; is in the string intern pool.\n//       &#39;part1_part2&#39; is in the string intern pool.\n//       &#39;abc&#39; is not in the string intern pool.\n//       &#39;&#39; is in the string intern pool.\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the <a href=\"../Topic/Ngen.exe%20(Native%20Image%20Generator).md\" data-linktype=\"relative-path\">Ngen.exe (Native Image Generator)</a> to install an assembly to the native image cache on a local computer. For more information, see Performance Considerations in the Remarks section for the <a class=\"xref\" href=\"system.string#System_String_Intern_\" data-linktype=\"relative-path\">Intern</a> property.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates that literal strings are interned automatically by the compiler.  </p>\n<pre><code class=\"lang-cs\" name=\"string.isinterned#1\">// Sample for String.IsInterned(String)\nusing System;\nusing System.Text;\nusing System.Runtime.CompilerServices;\n\n// In the .NET Framework 2.0 the following attribute declaration allows you to \n// avoid the use of the interning when you use NGEN.exe to compile an assembly \n// to the native image cache.\n[assembly: CompilationRelaxations(CompilationRelaxations.NoStringInterning)]\nclass Sample\n{\n    public static void Main()\n    {\n        // String str1 is known at compile time, and is automatically interned.\n        String str1 = &quot;abcd&quot;;\n\n        // Constructed string, str2, is not explicitly or automatically interned.\n        String str2 = new StringBuilder().Append(&quot;wx&quot;).Append(&quot;yz&quot;).ToString();\n        Console.WriteLine();\n        Test(1, str1);\n        Test(2, str2);\n    }\n\n    public static void Test(int sequence, String str)\n    {\n        Console.Write(&quot;{0}) The string, &#39;&quot;, sequence);\n        String strInterned = String.IsInterned(str);\n        if (strInterned == null)\n            Console.WriteLine(&quot;{0}&#39;, is not interned.&quot;, str);\n        else\n            Console.WriteLine(&quot;{0}&#39;, is interned.&quot;, strInterned);\n    }\n}\n\n//This example produces the following results:\n\n//1) The string, &#39;abcd&#39;, is interned.\n//2) The string, &#39;wxyz&#39;, is not interned.\n\n//If you use NGEN.exe to compile the assembly to the native image cache, this\n//example produces the following results:\n\n//1) The string, &#39;abcd&#39;, is not interned.\n//2) The string, &#39;wxyz&#39;, is not interned.\n</code></pre><pre><code class=\"lang-vb\" name=\"string.isinterned#1\">&#39; Sample for String.IsInterned(String)\nImports System\nImports System.Text\nImports System.Runtime.CompilerServices\n\n&#39; In the .NET Framework 2.0 the following attribute declaration allows you to \n&#39; avoid the use of the interning when you use NGEN.exe to compile an assembly \n&#39; to the native image cache.\n&lt;Assembly: CompilationRelaxations(CompilationRelaxations.NoStringInterning)&gt; \nClass Sample\n    Public Shared Sub Main()\n        &#39; String str1 is known at compile time, and is automatically interned.\n        Dim str1 As [String] = &quot;abcd&quot;\n\n        &#39; Constructed string, str2, is not explicitly or automatically interned.\n        Dim str2 As [String] = New StringBuilder().Append(&quot;wx&quot;).Append(&quot;yz&quot;).ToString()\n        Console.WriteLine()\n        Test(1, str1)\n        Test(2, str2)\n    End Sub &#39;Main\n\n    Public Shared Sub Test(ByVal sequence As Integer, ByVal str As [String])\n        Console.Write(&quot;{0}) The string, &#39;&quot;, sequence)\n        Dim strInterned As [String] = [String].IsInterned(str)\n        If strInterned Is Nothing Then\n            Console.WriteLine(&quot;{0}&#39;, is not interned.&quot;, str)\n        Else\n            Console.WriteLine(&quot;{0}&#39;, is interned.&quot;, strInterned)\n        End If\n    End Sub &#39;Test\nEnd Class &#39;Sample &#39;\n\n&#39;This example produces the following results:\n\n&#39;1) The string, &#39;abcd&#39;, is interned.\n&#39;2) The string, &#39;wxyz&#39;, is not interned.\n\n&#39;If you use NGEN.exe to compile the assembly to the native image cache, this\n&#39;example produces the following results:\n\n&#39;1) The string, &#39;abcd&#39;, is not interned.\n&#39;2) The string, &#39;wxyz&#39;, is not interned.\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.isinterned#1\">// Sample for String::IsInterned(String)\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::Runtime::CompilerServices;\n\n// In the .NET Framework 2.0 the following attribute declaration allows you to \n// avoid the use of the interning when you use NGEN.exe to compile an assembly \n// to the native image cache.\n[assembly:CompilationRelaxations(CompilationRelaxations::NoStringInterning)];\nvoid Test( int sequence, String^ str )\n{\n   Console::Write( &quot;{0} The string &#39;&quot;, sequence );\n   String^ strInterned = String::IsInterned( str );\n   if ( strInterned == nullptr )\n      Console::WriteLine( &quot;{0}&#39; is not interned.&quot;, str );\n   else\n      Console::WriteLine( &quot;{0}&#39; is interned.&quot;, strInterned );\n}\n\nint main()\n{\n   \n   // String str1 is known at compile time, and is automatically interned.\n   String^ str1 = &quot;abcd&quot;;\n   \n   // Constructed string, str2, is not explicitly or automatically interned.\n   String^ str2 = (gcnew StringBuilder)-&gt;Append( &quot;wx&quot; )-&gt;Append( &quot;yz&quot; )-&gt;ToString();\n   Console::WriteLine();\n   Test( 1, str1 );\n   Test( 2, str2 );\n}\n\n//This example produces the following results:\n\n//1) The string, &#39;abcd&#39;, is interned.\n//2) The string, &#39;wxyz&#39;, is not interned.\n\n//If you use NGEN.exe to compile the assembly to the native image cache, this\n//example produces the following results:\n\n//1) The string, &#39;abcd&#39;, is not interned.\n//2) The string, &#39;wxyz&#39;, is not interned.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IsNormalized\">\r\n    \r\n            <a id=\"System_String_IsNormalized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNormalized()</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether this string is in Unicode normalization form C.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsNormalized ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this string is in normalization form C; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current instance contains invalid Unicode characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  </p>\n<p> The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.  </p>\n<p> For a description of supported Unicode normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a string is successfully normalized to various normalization forms.  </p>\n<pre><code class=\"lang-vb\" name=\"string.normalize#1\">Imports System.Text\n\nClass Example\n   Public Shared Sub Main()\n      &#39; Character c; combining characters acute and cedilla; character 3/4\n      Dim s1 = New [String](New Char() {ChrW(&amp;H0063), ChrW(&amp;H0301), ChrW(&amp;H0327), ChrW(&amp;H00BE)})\n      Dim s2 As String = Nothing\n      Dim divider = New [String](&quot;-&quot;c, 80)\n      divider = [String].Concat(Environment.NewLine, divider, Environment.NewLine)\n      \n      Show(&quot;s1&quot;, s1)\n      Console.WriteLine()\n      Console.WriteLine(&quot;U+0063 = LATIN SMALL LETTER C&quot;)\n      Console.WriteLine(&quot;U+0301 = COMBINING ACUTE ACCENT&quot;)\n      Console.WriteLine(&quot;U+0327 = COMBINING CEDILLA&quot;)\n      Console.WriteLine(&quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot;)\n\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, s1.IsNormalized())\n      Console.WriteLine(&quot;A2) Is s1 normalized to Form C?:  {0}&quot;, s1.IsNormalized(NormalizationForm.FormC))\n      Console.WriteLine(&quot;A3) Is s1 normalized to Form D?:  {0}&quot;, s1.IsNormalized(NormalizationForm.FormD))\n      Console.WriteLine(&quot;A4) Is s1 normalized to Form KC?: {0}&quot;, s1.IsNormalized(NormalizationForm.FormKC))\n      Console.WriteLine(&quot;A5) Is s1 normalized to Form KD?: {0}&quot;, s1.IsNormalized(NormalizationForm.FormKD))\n      \n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Set string s2 to each normalized form of string s1.&quot;)\n      Console.WriteLine()\n      Console.WriteLine(&quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot;)\n      Console.WriteLine(&quot;U+0033 = DIGIT THREE&quot;)\n      Console.WriteLine(&quot;U+2044 = FRACTION SLASH&quot;)\n      Console.WriteLine(&quot;U+0034 = DIGIT FOUR&quot;)\n      Console.WriteLine(divider)\n      \n      s2 = s1.Normalize()\n      Console.Write(&quot;B1) Is s2 normalized to the default form (Form C)?: &quot;)\n      Console.WriteLine(s2.IsNormalized())\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormC)\n      Console.Write(&quot;B2) Is s2 normalized to Form C?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormD)\n      Console.Write(&quot;B3) Is s2 normalized to Form D?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormKC)\n      Console.Write(&quot;B4) Is s2 normalized to Form KC?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormKD)\n      Console.Write(&quot;B5) Is s2 normalized to Form KD?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n   End Sub \n   \n   Private Shared Sub Show(title As String, s As String)\n      Console.Write(&quot;Characters in string {0} = &quot;, title)\n      For Each x As Char In s\n         Console.Write(&quot;{0:X4} &quot;, AscW(x))\n      Next \n      Console.WriteLine()\n   End Sub \nEnd Class \n&#39;This example produces the following results:\n&#39;\n&#39;Characters in string s1 = 0063 0301 0327 00BE\n&#39;\n&#39;U+0063 = LATIN SMALL LETTER C\n&#39;U+0301 = COMBINING ACUTE ACCENT\n&#39;U+0327 = COMBINING CEDILLA\n&#39;U+00BE = VULGAR FRACTION THREE QUARTERS\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;A1) Is s1 normalized to the default form (Form C)?: False\n&#39;A2) Is s1 normalized to Form C?:  False\n&#39;A3) Is s1 normalized to Form D?:  False\n&#39;A4) Is s1 normalized to Form KC?: False\n&#39;A5) Is s1 normalized to Form KD?: False\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;Set string s2 to each normalized form of string s1.\n&#39;\n&#39;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\n&#39;U+0033 = DIGIT THREE\n&#39;U+2044 = FRACTION SLASH\n&#39;U+0034 = DIGIT FOUR\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;B1) Is s2 normalized to the default form (Form C)?: True\n&#39;Characters in string s2 = 1E09 00BE\n&#39;\n&#39;B2) Is s2 normalized to Form C?: True\n&#39;Characters in string s2 = 1E09 00BE\n&#39;\n&#39;B3) Is s2 normalized to Form D?: True\n&#39;Characters in string s2 = 0063 0327 0301 00BE\n&#39;\n&#39;B4) Is s2 normalized to Form KC?: True\n&#39;Characters in string s2 = 1E09 0033 2044 0034\n&#39;\n&#39;B5) Is s2 normalized to Form KD?: True\n&#39;Characters in string s2 = 0063 0327 0301 0033 2044 0034\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.normalize#1\">using namespace System;\nusing namespace System::Text;\n\nvoid Show( String^ title, String^ s )\n{\n   Console::Write( &quot;Characters in string {0} = &quot;, title );\n   for each (short x in s) {\n      Console::Write(&quot;{0:X4} &quot;, x);\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Character c; combining characters acute and cedilla; character 3/4\n   array&lt;Char&gt;^temp0 = {L&#39;c&#39;,L&#39;\\u0301&#39;,L&#39;\\u0327&#39;,L&#39;\\u00BE&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ s2 = nullptr;\n   String^ divider = gcnew String( &#39;-&#39;,80 );\n   divider = String::Concat( Environment::NewLine, divider, Environment::NewLine );\n\n   Show( &quot;s1&quot;, s1 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;U+0063 = LATIN SMALL LETTER C&quot; );\n   Console::WriteLine( &quot;U+0301 = COMBINING ACUTE ACCENT&quot; );\n   Console::WriteLine( &quot;U+0327 = COMBINING CEDILLA&quot; );\n   Console::WriteLine( &quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot; );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, s1-&gt;IsNormalized() );\n   Console::WriteLine( &quot;A2) Is s1 normalized to Form C?:  {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormC ) );\n   Console::WriteLine( &quot;A3) Is s1 normalized to Form D?:  {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormD ) );\n   Console::WriteLine( &quot;A4) Is s1 normalized to Form KC?: {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormKC ) );\n   Console::WriteLine( &quot;A5) Is s1 normalized to Form KD?: {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormKD ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Set string s2 to each normalized form of string s1.&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot; );\n   Console::WriteLine( &quot;U+0033 = DIGIT THREE&quot; );\n   Console::WriteLine( &quot;U+2044 = FRACTION SLASH&quot; );\n   Console::WriteLine( &quot;U+0034 = DIGIT FOUR&quot; );\n   Console::WriteLine( divider );\n   s2 = s1-&gt;Normalize();\n   Console::Write( &quot;B1) Is s2 normalized to the default form (Form C)?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized() );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormC );\n   Console::Write( &quot;B2) Is s2 normalized to Form C?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormC ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormD );\n   Console::Write( &quot;B3) Is s2 normalized to Form D?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormD ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormKC );\n   Console::Write( &quot;B4) Is s2 normalized to Form KC?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormKC ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormKD );\n   Console::Write( &quot;B5) Is s2 normalized to Form KD?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormKD ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\nCharacters in string s1 = 0063 0301 0327 00BE\n\nU+0063 = LATIN SMALL LETTER C\nU+0301 = COMBINING ACUTE ACCENT\nU+0327 = COMBINING CEDILLA\nU+00BE = VULGAR FRACTION THREE QUARTERS\n\n--------------------------------------------------------------------------------\n\nA1) Is s1 normalized to the default form (Form C)?: False\nA2) Is s1 normalized to Form C?:  False\nA3) Is s1 normalized to Form D?:  False\nA4) Is s1 normalized to Form KC?: False\nA5) Is s1 normalized to Form KD?: False\n\n--------------------------------------------------------------------------------\n\nSet string s2 to each normalized form of string s1.\n\nU+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\nU+0033 = DIGIT THREE\nU+2044 = FRACTION SLASH\nU+0034 = DIGIT FOUR\n\n--------------------------------------------------------------------------------\n\nB1) Is s2 normalized to the default form (Form C)?: True\nCharacters in string s2 = 1E09 00BE\n\nB2) Is s2 normalized to Form C?: True\nCharacters in string s2 = 1E09 00BE\n\nB3) Is s2 normalized to Form D?: True\nCharacters in string s2 = 0063 0327 0301 00BE\n\nB4) Is s2 normalized to Form KC?: True\nCharacters in string s2 = 1E09 0033 2044 0034\n\nB5) Is s2 normalized to Form KD?: True\nCharacters in string s2 = 0063 0327 0301 0033 2044 0034\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.normalize#1\">using System;\nusing System.Text;\n\nclass Example\n{\n    public static void Main() \n    {\n       // Character c; combining characters acute and cedilla; character 3/4\n       string s1 = new String( new char[] {&#39;\\u0063&#39;, &#39;\\u0301&#39;, &#39;\\u0327&#39;, &#39;\\u00BE&#39;});\n       string s2 = null;\n       string divider = new String(&#39;-&#39;, 80);\n       divider = String.Concat(Environment.NewLine, divider, Environment.NewLine);\n   \n       Show(&quot;s1&quot;, s1);\n       Console.WriteLine();\n       Console.WriteLine(&quot;U+0063 = LATIN SMALL LETTER C&quot;);\n       Console.WriteLine(&quot;U+0301 = COMBINING ACUTE ACCENT&quot;);\n       Console.WriteLine(&quot;U+0327 = COMBINING CEDILLA&quot;);\n       Console.WriteLine(&quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot;);\n       Console.WriteLine(divider);\n   \n       Console.WriteLine(&quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, \n                                    s1.IsNormalized());\n       Console.WriteLine(&quot;A2) Is s1 normalized to Form C?:  {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormC));\n       Console.WriteLine(&quot;A3) Is s1 normalized to Form D?:  {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormD));\n       Console.WriteLine(&quot;A4) Is s1 normalized to Form KC?: {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormKC));\n       Console.WriteLine(&quot;A5) Is s1 normalized to Form KD?: {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormKD));\n   \n       Console.WriteLine(divider);\n   \n       Console.WriteLine(&quot;Set string s2 to each normalized form of string s1.&quot;);\n       Console.WriteLine();\n       Console.WriteLine(&quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot;);\n       Console.WriteLine(&quot;U+0033 = DIGIT THREE&quot;);\n       Console.WriteLine(&quot;U+2044 = FRACTION SLASH&quot;);\n       Console.WriteLine(&quot;U+0034 = DIGIT FOUR&quot;);\n       Console.WriteLine(divider);\n   \n       s2 = s1.Normalize();\n       Console.Write(&quot;B1) Is s2 normalized to the default form (Form C)?: &quot;);\n       Console.WriteLine(s2.IsNormalized());\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormC);\n       Console.Write(&quot;B2) Is s2 normalized to Form C?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormD);\n       Console.Write(&quot;B3) Is s2 normalized to Form D?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormKC);\n       Console.Write(&quot;B4) Is s2 normalized to Form KC?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormKD);\n       Console.Write(&quot;B5) Is s2 normalized to Form KD?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n    }\n\n    private static void Show(string title, string s)\n    {\n       Console.Write(&quot;Characters in string {0} = &quot;, title);\n       foreach(short x in s) {\n           Console.Write(&quot;{0:X4} &quot;, x);\n       }\n       Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nCharacters in string s1 = 0063 0301 0327 00BE\n\nU+0063 = LATIN SMALL LETTER C\nU+0301 = COMBINING ACUTE ACCENT\nU+0327 = COMBINING CEDILLA\nU+00BE = VULGAR FRACTION THREE QUARTERS\n\n--------------------------------------------------------------------------------\n\nA1) Is s1 normalized to the default form (Form C)?: False\nA2) Is s1 normalized to Form C?:  False\nA3) Is s1 normalized to Form D?:  False\nA4) Is s1 normalized to Form KC?: False\nA5) Is s1 normalized to Form KD?: False\n\n--------------------------------------------------------------------------------\n\nSet string s2 to each normalized form of string s1.\n\nU+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\nU+0033 = DIGIT THREE\nU+2044 = FRACTION SLASH\nU+0034 = DIGIT FOUR\n\n--------------------------------------------------------------------------------\n\nB1) Is s2 normalized to the default form (Form C)?: True\nCharacters in string s2 = 1E09 00BE\n\nB2) Is s2 normalized to Form C?: True\nCharacters in string s2 = 1E09 00BE\n\nB3) Is s2 normalized to Form D?: True\nCharacters in string s2 = 0063 0327 0301 00BE\n\nB4) Is s2 normalized to Form KC?: True\nCharacters in string s2 = 1E09 0033 2044 0034\n\nB5) Is s2 normalized to Form KD?: True\nCharacters in string s2 = 0063 0327 0301 0033 2044 0034\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IsNormalized_System_Text_NormalizationForm_\">\r\n    \r\n            <a id=\"System_String_IsNormalized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNormalized(NormalizationForm)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether this string is in the specified Unicode normalization form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsNormalized (System.Text.NormalizationForm normalizationForm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>normalizationForm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode normalization form.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this string is in the normalization form specified by the <code>normalizationForm</code> parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current instance contains invalid Unicode characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  </p>\n<p> The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework currently supports normalization forms C, D, KC, and KD.  </p>\n<p> For a description of supported Unicode normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_IsNormalized_\" data-linktype=\"relative-path\">IsNormalized</a> and <a class=\"xref\" href=\"system.string#System_String_Normalize_\" data-linktype=\"relative-path\">Normalize</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"string.normalize#1\">Imports System.Text\n\nClass Example\n   Public Shared Sub Main()\n      &#39; Character c; combining characters acute and cedilla; character 3/4\n      Dim s1 = New [String](New Char() {ChrW(&amp;H0063), ChrW(&amp;H0301), ChrW(&amp;H0327), ChrW(&amp;H00BE)})\n      Dim s2 As String = Nothing\n      Dim divider = New [String](&quot;-&quot;c, 80)\n      divider = [String].Concat(Environment.NewLine, divider, Environment.NewLine)\n      \n      Show(&quot;s1&quot;, s1)\n      Console.WriteLine()\n      Console.WriteLine(&quot;U+0063 = LATIN SMALL LETTER C&quot;)\n      Console.WriteLine(&quot;U+0301 = COMBINING ACUTE ACCENT&quot;)\n      Console.WriteLine(&quot;U+0327 = COMBINING CEDILLA&quot;)\n      Console.WriteLine(&quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot;)\n\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, s1.IsNormalized())\n      Console.WriteLine(&quot;A2) Is s1 normalized to Form C?:  {0}&quot;, s1.IsNormalized(NormalizationForm.FormC))\n      Console.WriteLine(&quot;A3) Is s1 normalized to Form D?:  {0}&quot;, s1.IsNormalized(NormalizationForm.FormD))\n      Console.WriteLine(&quot;A4) Is s1 normalized to Form KC?: {0}&quot;, s1.IsNormalized(NormalizationForm.FormKC))\n      Console.WriteLine(&quot;A5) Is s1 normalized to Form KD?: {0}&quot;, s1.IsNormalized(NormalizationForm.FormKD))\n      \n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Set string s2 to each normalized form of string s1.&quot;)\n      Console.WriteLine()\n      Console.WriteLine(&quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot;)\n      Console.WriteLine(&quot;U+0033 = DIGIT THREE&quot;)\n      Console.WriteLine(&quot;U+2044 = FRACTION SLASH&quot;)\n      Console.WriteLine(&quot;U+0034 = DIGIT FOUR&quot;)\n      Console.WriteLine(divider)\n      \n      s2 = s1.Normalize()\n      Console.Write(&quot;B1) Is s2 normalized to the default form (Form C)?: &quot;)\n      Console.WriteLine(s2.IsNormalized())\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormC)\n      Console.Write(&quot;B2) Is s2 normalized to Form C?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormD)\n      Console.Write(&quot;B3) Is s2 normalized to Form D?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormKC)\n      Console.Write(&quot;B4) Is s2 normalized to Form KC?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormKD)\n      Console.Write(&quot;B5) Is s2 normalized to Form KD?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n   End Sub \n   \n   Private Shared Sub Show(title As String, s As String)\n      Console.Write(&quot;Characters in string {0} = &quot;, title)\n      For Each x As Char In s\n         Console.Write(&quot;{0:X4} &quot;, AscW(x))\n      Next \n      Console.WriteLine()\n   End Sub \nEnd Class \n&#39;This example produces the following results:\n&#39;\n&#39;Characters in string s1 = 0063 0301 0327 00BE\n&#39;\n&#39;U+0063 = LATIN SMALL LETTER C\n&#39;U+0301 = COMBINING ACUTE ACCENT\n&#39;U+0327 = COMBINING CEDILLA\n&#39;U+00BE = VULGAR FRACTION THREE QUARTERS\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;A1) Is s1 normalized to the default form (Form C)?: False\n&#39;A2) Is s1 normalized to Form C?:  False\n&#39;A3) Is s1 normalized to Form D?:  False\n&#39;A4) Is s1 normalized to Form KC?: False\n&#39;A5) Is s1 normalized to Form KD?: False\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;Set string s2 to each normalized form of string s1.\n&#39;\n&#39;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\n&#39;U+0033 = DIGIT THREE\n&#39;U+2044 = FRACTION SLASH\n&#39;U+0034 = DIGIT FOUR\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;B1) Is s2 normalized to the default form (Form C)?: True\n&#39;Characters in string s2 = 1E09 00BE\n&#39;\n&#39;B2) Is s2 normalized to Form C?: True\n&#39;Characters in string s2 = 1E09 00BE\n&#39;\n&#39;B3) Is s2 normalized to Form D?: True\n&#39;Characters in string s2 = 0063 0327 0301 00BE\n&#39;\n&#39;B4) Is s2 normalized to Form KC?: True\n&#39;Characters in string s2 = 1E09 0033 2044 0034\n&#39;\n&#39;B5) Is s2 normalized to Form KD?: True\n&#39;Characters in string s2 = 0063 0327 0301 0033 2044 0034\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.normalize#1\">using namespace System;\nusing namespace System::Text;\n\nvoid Show( String^ title, String^ s )\n{\n   Console::Write( &quot;Characters in string {0} = &quot;, title );\n   for each (short x in s) {\n      Console::Write(&quot;{0:X4} &quot;, x);\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Character c; combining characters acute and cedilla; character 3/4\n   array&lt;Char&gt;^temp0 = {L&#39;c&#39;,L&#39;\\u0301&#39;,L&#39;\\u0327&#39;,L&#39;\\u00BE&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ s2 = nullptr;\n   String^ divider = gcnew String( &#39;-&#39;,80 );\n   divider = String::Concat( Environment::NewLine, divider, Environment::NewLine );\n\n   Show( &quot;s1&quot;, s1 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;U+0063 = LATIN SMALL LETTER C&quot; );\n   Console::WriteLine( &quot;U+0301 = COMBINING ACUTE ACCENT&quot; );\n   Console::WriteLine( &quot;U+0327 = COMBINING CEDILLA&quot; );\n   Console::WriteLine( &quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot; );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, s1-&gt;IsNormalized() );\n   Console::WriteLine( &quot;A2) Is s1 normalized to Form C?:  {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormC ) );\n   Console::WriteLine( &quot;A3) Is s1 normalized to Form D?:  {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormD ) );\n   Console::WriteLine( &quot;A4) Is s1 normalized to Form KC?: {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormKC ) );\n   Console::WriteLine( &quot;A5) Is s1 normalized to Form KD?: {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormKD ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Set string s2 to each normalized form of string s1.&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot; );\n   Console::WriteLine( &quot;U+0033 = DIGIT THREE&quot; );\n   Console::WriteLine( &quot;U+2044 = FRACTION SLASH&quot; );\n   Console::WriteLine( &quot;U+0034 = DIGIT FOUR&quot; );\n   Console::WriteLine( divider );\n   s2 = s1-&gt;Normalize();\n   Console::Write( &quot;B1) Is s2 normalized to the default form (Form C)?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized() );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormC );\n   Console::Write( &quot;B2) Is s2 normalized to Form C?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormC ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormD );\n   Console::Write( &quot;B3) Is s2 normalized to Form D?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormD ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormKC );\n   Console::Write( &quot;B4) Is s2 normalized to Form KC?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormKC ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormKD );\n   Console::Write( &quot;B5) Is s2 normalized to Form KD?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormKD ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\nCharacters in string s1 = 0063 0301 0327 00BE\n\nU+0063 = LATIN SMALL LETTER C\nU+0301 = COMBINING ACUTE ACCENT\nU+0327 = COMBINING CEDILLA\nU+00BE = VULGAR FRACTION THREE QUARTERS\n\n--------------------------------------------------------------------------------\n\nA1) Is s1 normalized to the default form (Form C)?: False\nA2) Is s1 normalized to Form C?:  False\nA3) Is s1 normalized to Form D?:  False\nA4) Is s1 normalized to Form KC?: False\nA5) Is s1 normalized to Form KD?: False\n\n--------------------------------------------------------------------------------\n\nSet string s2 to each normalized form of string s1.\n\nU+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\nU+0033 = DIGIT THREE\nU+2044 = FRACTION SLASH\nU+0034 = DIGIT FOUR\n\n--------------------------------------------------------------------------------\n\nB1) Is s2 normalized to the default form (Form C)?: True\nCharacters in string s2 = 1E09 00BE\n\nB2) Is s2 normalized to Form C?: True\nCharacters in string s2 = 1E09 00BE\n\nB3) Is s2 normalized to Form D?: True\nCharacters in string s2 = 0063 0327 0301 00BE\n\nB4) Is s2 normalized to Form KC?: True\nCharacters in string s2 = 1E09 0033 2044 0034\n\nB5) Is s2 normalized to Form KD?: True\nCharacters in string s2 = 0063 0327 0301 0033 2044 0034\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.normalize#1\">using System;\nusing System.Text;\n\nclass Example\n{\n    public static void Main() \n    {\n       // Character c; combining characters acute and cedilla; character 3/4\n       string s1 = new String( new char[] {&#39;\\u0063&#39;, &#39;\\u0301&#39;, &#39;\\u0327&#39;, &#39;\\u00BE&#39;});\n       string s2 = null;\n       string divider = new String(&#39;-&#39;, 80);\n       divider = String.Concat(Environment.NewLine, divider, Environment.NewLine);\n   \n       Show(&quot;s1&quot;, s1);\n       Console.WriteLine();\n       Console.WriteLine(&quot;U+0063 = LATIN SMALL LETTER C&quot;);\n       Console.WriteLine(&quot;U+0301 = COMBINING ACUTE ACCENT&quot;);\n       Console.WriteLine(&quot;U+0327 = COMBINING CEDILLA&quot;);\n       Console.WriteLine(&quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot;);\n       Console.WriteLine(divider);\n   \n       Console.WriteLine(&quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, \n                                    s1.IsNormalized());\n       Console.WriteLine(&quot;A2) Is s1 normalized to Form C?:  {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormC));\n       Console.WriteLine(&quot;A3) Is s1 normalized to Form D?:  {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormD));\n       Console.WriteLine(&quot;A4) Is s1 normalized to Form KC?: {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormKC));\n       Console.WriteLine(&quot;A5) Is s1 normalized to Form KD?: {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormKD));\n   \n       Console.WriteLine(divider);\n   \n       Console.WriteLine(&quot;Set string s2 to each normalized form of string s1.&quot;);\n       Console.WriteLine();\n       Console.WriteLine(&quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot;);\n       Console.WriteLine(&quot;U+0033 = DIGIT THREE&quot;);\n       Console.WriteLine(&quot;U+2044 = FRACTION SLASH&quot;);\n       Console.WriteLine(&quot;U+0034 = DIGIT FOUR&quot;);\n       Console.WriteLine(divider);\n   \n       s2 = s1.Normalize();\n       Console.Write(&quot;B1) Is s2 normalized to the default form (Form C)?: &quot;);\n       Console.WriteLine(s2.IsNormalized());\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormC);\n       Console.Write(&quot;B2) Is s2 normalized to Form C?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormD);\n       Console.Write(&quot;B3) Is s2 normalized to Form D?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormKC);\n       Console.Write(&quot;B4) Is s2 normalized to Form KC?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormKD);\n       Console.Write(&quot;B5) Is s2 normalized to Form KD?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n    }\n\n    private static void Show(string title, string s)\n    {\n       Console.Write(&quot;Characters in string {0} = &quot;, title);\n       foreach(short x in s) {\n           Console.Write(&quot;{0:X4} &quot;, x);\n       }\n       Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nCharacters in string s1 = 0063 0301 0327 00BE\n\nU+0063 = LATIN SMALL LETTER C\nU+0301 = COMBINING ACUTE ACCENT\nU+0327 = COMBINING CEDILLA\nU+00BE = VULGAR FRACTION THREE QUARTERS\n\n--------------------------------------------------------------------------------\n\nA1) Is s1 normalized to the default form (Form C)?: False\nA2) Is s1 normalized to Form C?:  False\nA3) Is s1 normalized to Form D?:  False\nA4) Is s1 normalized to Form KC?: False\nA5) Is s1 normalized to Form KD?: False\n\n--------------------------------------------------------------------------------\n\nSet string s2 to each normalized form of string s1.\n\nU+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\nU+0033 = DIGIT THREE\nU+2044 = FRACTION SLASH\nU+0034 = DIGIT FOUR\n\n--------------------------------------------------------------------------------\n\nB1) Is s2 normalized to the default form (Form C)?: True\nCharacters in string s2 = 1E09 00BE\n\nB2) Is s2 normalized to Form C?: True\nCharacters in string s2 = 1E09 00BE\n\nB3) Is s2 normalized to Form D?: True\nCharacters in string s2 = 0063 0327 0301 00BE\n\nB4) Is s2 normalized to Form KC?: True\nCharacters in string s2 = 1E09 0033 2044 0034\n\nB5) Is s2 normalized to Form KD?: True\nCharacters in string s2 = 0063 0327 0301 0033 2044 0034\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IsNullOrEmpty_System_String_\">\r\n    \r\n            <a id=\"System_String_IsNullOrEmpty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNullOrEmpty(String)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified string is <code>null</code> or an <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsNullOrEmpty (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter is <code>null</code> or an empty string (&quot;&quot;); otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>IsNullOrEmpty is a convenience method that enables you to simultaneously test whether a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> is <code>null</code> or its value is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. It is equivalent to the following code:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.IsNullOrEmpty#1\">      result = s == nullptr || s == String::Empty;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsNullOrEmpty#1\">      result = s == null || s == String.Empty;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IsNullOrEmpty#1\">      result = s Is Nothing OrElse s = String.Empty\n</code></pre><p> You can use the <a class=\"xref\" href=\"system.string#System_String_IsNullOrWhiteSpace_\" data-linktype=\"relative-path\">IsNullOrWhiteSpace</a> method to test whether a string is <code>null</code>, its value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>,  or it consists only of white-space characters.  </p>\n<h2 id=\"what-is-a-null-string\">What is a null string?</h2>\n<p> A string is <code>null</code> if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of <code>null</code>. Although the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting</a> feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.IsNullOrEmpty#2\">using namespace System;\n\nvoid main()\n{\n   String^ s;\n  \n   Console::WriteLine(&quot;The value of the string is &#39;{0}&#39;&quot;, s);\n\n   try {\n      Console::WriteLine(&quot;String length is {0}&quot;, s-&gt;Length);\n   }\n   catch (NullReferenceException^ e) {\n      Console::WriteLine(e-&gt;Message);\n   }   \n}\n// The example displays the following output:\n//     The value of the string is &#39;&#39;\n//     Object reference not set to an instance of an object.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsNullOrEmpty#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = null;\n      \n      Console.WriteLine(&quot;The value of the string is &#39;{0}&#39;&quot;, s);\n\n      try {\n         Console.WriteLine(&quot;String length is {0}&quot;, s.Length);\n      }\n      catch (NullReferenceException e) {\n         Console.WriteLine(e.Message);\n      }\n   }\n}\n// The example displays the following output:\n//     The value of the string is &#39;&#39;\n//     Object reference not set to an instance of an object.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IsNullOrEmpty#2\">Module Example\n   Public Sub Main()\n      Dim s As String\n\n      Console.WriteLine(&quot;The value of the string is &#39;{0}&#39;&quot;, s)\n\n      Try \n         Console.WriteLine(&quot;String length is {0}&quot;, s.Length)\n      Catch e As NullReferenceException\n         Console.WriteLine(e.Message)\n      End Try   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The value of the string is &#39;&#39;\n&#39;     Object reference not set to an instance of an object.\n</code></pre><h2 id=\"what-is-an-empty-string\">What is an empty string?</h2>\n<p> A string is empty if it  is explicitly assigned an empty string (&quot;&quot;) or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. An empty string has a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 0.  The following example creates an empty string and displays its value and its length.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.IsNullOrEmpty#3\">   String^ s = &quot;&quot;;\n   Console::WriteLine(&quot;The length of &#39;{0}&#39; is {1}.&quot;, s, s-&gt;Length);\n   // The example displays the following output:\n   //       The length of &#39;&#39; is 0.      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsNullOrEmpty#3\">      String s = &quot;&quot;;\n      Console.WriteLine(&quot;The length of &#39;{0}&#39; is {1}.&quot;, s, s.Length);\n      // The example displays the following output:\n      //       The length of &#39;&#39; is 0.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IsNullOrEmpty#3\">      Dim s As String = &quot;&quot;\n      Console.WriteLine(&quot;The length of &#39;{0}&#39; is {1}.&quot;, s, s.Length)\n      &#39; The example displays the following output:\n      &#39;        The length of &#39;&#39; is 0.      \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example examines three strings and determines whether each string has a value, is an empty string, or is <code>null</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"String.IsNullOrEmpty#1\">using System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string s1 = &quot;abcd&quot;;\n    string s2 = &quot;&quot;;\n    string s3 = null;\n\n    Console.WriteLine(&quot;String s1 {0}.&quot;, Test(s1));\n    Console.WriteLine(&quot;String s2 {0}.&quot;, Test(s2));\n    Console.WriteLine(&quot;String s3 {0}.&quot;, Test(s3));\n    }\n\n    public static String Test(string s)\n    {\n    if (String.IsNullOrEmpty(s)) \n        return &quot;is null or empty&quot;;\n    else\n        return String.Format(&quot;(\\&quot;{0}\\&quot;) is neither null nor empty&quot;, s);\n    }\n}\n// The example displays the following output:\n//       String s1 (&quot;abcd&quot;) is neither null nor empty.\n//       String s2 is null or empty.\n//       String s3 is null or empty.\n</code></pre><pre><code class=\"lang-cpp\" name=\"String.IsNullOrEmpty#1\">using namespace System;\nString^ Test( String^ s )\n{\n   if (String::IsNullOrEmpty(s))\n      return &quot;is null or empty&quot;;\n   else\n      return String::Format( &quot;(\\&quot;{0}\\&quot;) is neither null nor empty&quot;, s );\n}\n\nint main()\n{\n   String^ s1 = &quot;abcd&quot;;\n   String^ s2 = &quot;&quot;;\n   String^ s3 = nullptr;\n   Console::WriteLine( &quot;String s1 {0}.&quot;, Test( s1 ) );\n   Console::WriteLine( &quot;String s2 {0}.&quot;, Test( s2 ) );\n   Console::WriteLine( &quot;String s3 {0}.&quot;, Test( s3 ) );\n}\n// The example displays the following output:\n//       String s1 (&quot;abcd&quot;) is neither null nor empty.\n//       String s2 is null or empty.\n//       String s3 is null or empty.\n</code></pre><pre><code class=\"lang-vb\" name=\"String.IsNullOrEmpty#1\">Class Sample\n   Public Shared Sub Main()\n      Dim s1 As String = &quot;abcd&quot;\n      Dim s2 As String = &quot;&quot;\n      Dim s3 As String = Nothing\n      \n      Console.WriteLine(&quot;String s1 {0}.&quot;, Test(s1))\n      Console.WriteLine(&quot;String s2 {0}.&quot;, Test(s2))\n      Console.WriteLine(&quot;String s3 {0}.&quot;, Test(s3))\n   End Sub\n   \n   Public Shared Function Test(s As String) As String\n      If String.IsNullOrEmpty(s) Then\n         Return &quot;is null or empty&quot;\n      Else\n         Return String.Format(&quot;(&quot;&quot;{0}&quot;&quot;) is neither null nor empty&quot;, s)\n      End If\n   End Function \nEnd Class  \n&#39; The example displays the following output:\n&#39;       String s1 (&quot;abcd&quot;) is neither null nor empty.\n&#39;       String s2 is null or empty.\n&#39;       String s3 is null or empty.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_IsNullOrWhiteSpace_System_String_\">\r\n    \r\n            <a id=\"System_String_IsNullOrWhiteSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNullOrWhiteSpace(String)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified string is <code>null</code>, empty, or consists only of white-space characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsNullOrWhiteSpace (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, or if <code>value</code> consists exclusively of white-space characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>IsNullOrWhiteSpace is a convenience method that is similar to the following  code, except that it offers superior performance:  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.IsNullOrWhitespace#2\">      return String.IsNullOrEmpty(value) || value.Trim().Length == 0;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.IsNullOrWhitespace#2\">      Return String.IsNullOrEmpty(value) OrElse value.Trim().Length = 0\n</code></pre><p> White-space characters are defined by the Unicode standard. The IsNullOrWhiteSpace method interprets any character that returns a value of <code>true</code> when it is passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method as a white-space character.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a string array, and then passes each element of the array to the IsNullOrWhiteSpace method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.IsNullOrWhiteSpace#1\">Module Example\n   Public Sub Main()\n      Dim values() As String = { Nothing, String.Empty, &quot;ABCDE&quot;, \n                                 New String(&quot; &quot;c, 20), &quot;  &quot; + vbTab + &quot;   &quot;, \n                                 New String(ChrW(&amp;h2000), 10) }\n      For Each value As String In values\n         Console.WriteLine(String.IsNullOrWhiteSpace(value))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       True\n&#39;       True\n&#39;       False\n&#39;       True\n&#39;       True\n&#39;       True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.IsNullOrWhiteSpace#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { null, String.Empty, &quot;ABCDE&quot;, \n                          new String(&#39; &#39;, 20), &quot;  &nbsp;&nbsp;&nbsp;&nbsp;   &quot;, \n                          new String(&#39;\\u2000&#39;, 10) };\n      foreach (string value in values)\n         Console.WriteLine(String.IsNullOrWhiteSpace(value));\n   }\n}\n// The example displays the following output:\n//       True\n//       True\n//       False\n//       True\n//       True\n//       True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Join_System_String_System_Collections_Generic_IEnumerable_System_String__\">\r\n    \r\n            <a id=\"System_String_Join_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join(String,IEnumerable&lt;String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the members of a constructed <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> collection of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, using the specified separator between each member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Join (string separator, System.Collections.Generic.IEnumerable&lt;string&gt; values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection that contains the strings to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>values</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>separator</code> is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. If any member of <code>values</code> is <code>null</code>, an empty string is used instead.  </p>\n<p> Join is a convenience method that lets you concatenate each element in an <code>IEnumerable(Of String)</code> collection without first converting the elements to a string array. It is particularly useful with Language-Integrated Query (LINQ) query expressions. The following example passes a <code>List(Of String)</code> object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is &quot;M&quot;). The <code>IEnumerable(Of String)</code> collection returned by the &lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt; method is passed to the Join method to display the result as a single string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Join#4\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string output = String.Join(&quot; &quot;, GetAlphabet(true).Where( letter =&gt; \n                      letter.CompareTo(&quot;M&quot;) &gt;= 0));\n      Console.WriteLine(output);  \n   }\n\n   private static List&lt;string&gt; GetAlphabet(bool upper)\n   {\n      List&lt;string&gt; alphabet = new List&lt;string&gt;();\n      int charValue = upper ? 65 : 97;\n      for (int ctr = 0; ctr &lt;= 25; ctr++)\n         alphabet.Add(Convert.ToChar(charValue + ctr).ToString());\n      return alphabet; \n   }\n}\n// The example displays the following output:\n//      M N O P Q R S T U V W X Y Z\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Join#4\">Imports System.Collections.Generic\nImports System.Linq\n\nModule modMain\n   Public Sub Main()\n      Dim output As String = String.Join(&quot; &quot;, GetAlphabet(True).Where(Function(letter) _\n                                                         letter &gt;= &quot;M&quot;))\n        \n      Console.WriteLine(output)                                     \n   End Sub\n   \n   Private Function GetAlphabet(upper As Boolean) As List(Of String)\n      Dim alphabet As New List(Of String)\n      Dim charValue As Integer = CInt(IIf(upper, 65, 97))\n      For ctr As Integer = 0 To 25\n         alphabet.Add(ChrW(charValue + ctr).ToString())\n      Next\n      Return alphabet \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;      M N O P Q R S T U V W X Y Z\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, which it then passes to the Join method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Join#3\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int maxPrime = 100;\n      List&lt;int&gt; primes = GetPrimes(maxPrime);\n      Console.WriteLine(&quot;Primes less than {0}:&quot;, maxPrime);\n      Console.WriteLine(&quot;   {0}&quot;, String.Join(&quot; &quot;, primes));\n   }\n\n   private static List&lt;int&gt; GetPrimes(int maxPrime)\n   {\n      Array values = Array.CreateInstance(typeof(int), \n                              new int[] { maxPrime - 1}, new int[] { 2 });\n      // Use Sieve of Eratosthenes to determine prime numbers.\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= (int) Math.Ceiling(Math.Sqrt(values.GetUpperBound(0))); ctr++)\n      {\n                           \n         if ((int) values.GetValue(ctr) == 1) continue;\n         \n         for (int multiplier = ctr; multiplier &lt;=  maxPrime / 2; multiplier++)\n            if (ctr * multiplier &lt;= maxPrime)\n               values.SetValue(1, ctr * multiplier);\n      }      \n      \n      List&lt;int&gt; primes = new List&lt;int&gt;();\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= values.GetUpperBound(0); ctr++)\n         if ((int) values.GetValue(ctr) == 0) \n            primes.Add(ctr);\n      return primes;\n   }   \n}\n// The example displays the following output:\n//    Primes less than 100:\n//       2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Join#3\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim maxPrime As Integer = 100\n      Dim primes As List(Of String) = GetPrimes(maxPrime)\n      Console.WriteLine(&quot;Primes less than {0}:&quot;, maxPrime)\n      Console.WriteLine(&quot;   {0}&quot;, String.Join(&quot; &quot;, primes))\n   End Sub\n   \n   Private Function GetPrimes(maxPrime As Integer) As List(Of String)\n      Dim values As Array = Array.CreateInstance(GetType(Integer), _\n                              New Integer() { maxPrime - 1}, New Integer(){ 2 }) \n        &#39; Use Sieve of Eratosthenes to determine prime numbers.\n      For ctr As Integer = values.GetLowerBound(0) To _\n                           CInt(Math.Ceiling(Math.Sqrt(values.GetUpperBound(0))))\n         If CInt(values.GetValue(ctr)) = 1 Then Continue For\n         \n         For multiplier As Integer = ctr To maxPrime \\ 2\n            If ctr * multiplier &lt;= maxPrime Then values.SetValue(1, ctr * multiplier)\n         Next   \n      Next      \n      \n      Dim primes As New List(Of String)\n      For ctr As Integer = values.GetLowerBound(0) To values.GetUpperBound(0)\n         If CInt(values.GetValue(ctr)) = 0 Then primes.Add(ctr.ToString())\n      Next            \n      Return primes\n   End Function   \nEnd Module\n&#39; The example displays the following output:\n&#39;    Primes less than 100:\n&#39;       2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Join_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_String_Join_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join(String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the elements of an object array, using the specified separator between each element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Join (string separator, object[] values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to use as a separator. <code>separator</code> is included in the returned string only if <code>values</code> has more than one element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the elements to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that consists of the elements of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> is an empty array, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>values</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>separator</code> is <code>null</code> or if any element of <code>values</code> other than the first element is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. See the Notes for Callers section if the first element of <code>values</code> is <code>null</code>.  </p>\n<p> Join is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings. The string representation of each object in the array is derived by calling that object&#39;s <code>ToString</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a integer array, which it then passes to the Join method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Join#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int maxPrime = 100;\n      int[] primes = GetPrimes(maxPrime);\n      Console.WriteLine(&quot;Primes less than {0}:&quot;, maxPrime);\n      Console.WriteLine(&quot;   {0}&quot;, String.Join(&quot; &quot;, primes));\n   }\n\n   private static int[] GetPrimes(int maxPrime)\n   {\n      Array values = Array.CreateInstance(typeof(int), \n                              new int[] { maxPrime - 1}, new int[] { 2 }); \n      // Use Sieve of Eratosthenes to determine prime numbers.\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= (int) Math.Ceiling(Math.Sqrt(values.GetUpperBound(0))); ctr++)\n      {\n                           \n         if ((int) values.GetValue(ctr) == 1) continue;\n         \n         for (int multiplier = ctr; multiplier &lt;=  maxPrime / 2; multiplier++)\n            if (ctr * multiplier &lt;= maxPrime)\n               values.SetValue(1, ctr * multiplier);\n      }      \n      \n      List&lt;int&gt; primes = new List&lt;int&gt;();\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= values.GetUpperBound(0); ctr++)\n         if ((int) values.GetValue(ctr) == 0) \n            primes.Add(ctr);\n      return primes.ToArray();\n   }   \n}\n// The example displays the following output:\n//    Primes less than 100:\n//       2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Join#1\">Module Example\n   Public Sub Main()\n      Dim maxPrime As Integer = 100\n      Dim primes() As Integer = GetPrimes(maxPrime)\n      Console.WriteLine(&quot;Primes less than {0}:&quot;, maxPrime)\n      Console.WriteLine(&quot;   {0}&quot;, String.Join(&quot; &quot;, primes))\n   End Sub\n   \n   Private Function GetPrimes(maxPrime As Integer) As Integer()\n      Dim values As Array = Array.CreateInstance(GetType(Integer), _\n                              New Integer() { maxPrime - 1}, New Integer(){ 2 }) \n        &#39; Use Sieve of Eratosthenes to determine prime numbers.\n      For ctr As Integer = values.GetLowerBound(0) To _\n                           CInt(Math.Ceiling(Math.Sqrt(values.GetUpperBound(0))))\n         If CInt(values.GetValue(ctr)) = 1 Then Continue For\n         \n         For multiplier As Integer = ctr To maxPrime \\ 2\n            If ctr * multiplier &lt;= maxPrime Then values.SetValue(1, ctr * multiplier)\n         Next   \n      Next      \n      \n      Dim primes As New System.Collections.Generic.List(Of Integer)\n      For ctr As Integer = values.GetLowerBound(0) To values.GetUpperBound(0)\n         If CInt(values.GetValue(ctr)) = 0 Then primes.Add(ctr)\n      Next            \n      Return primes.ToArray()\n   End Function   \nEnd Module\n&#39; The example displays the following output:\n&#39;    Primes less than 100:\n&#39;       2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Join_System_String_System_String___\">\r\n    \r\n            <a id=\"System_String_Join_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join(String,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates all the elements of a string array, using the specified separator between each element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Join (string separator, string[] value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the elements to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that consists of the elements in <code>value</code> delimited by the <code>separator</code> string. If <code>value</code> is an empty array, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, if <code>separator</code> is &quot;, &quot; and the elements of <code>value</code> are &quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;, and &quot;pear&quot;, <code>Join(separator, value)</code> returns &quot;apple, orange, grape, pear&quot;.  </p>\n<p> If <code>separator</code> is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. If any element in <code>value</code> is <code>null</code>, an empty string is used instead.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Join method.  </p>\n<pre><code class=\"lang-vb\" name=\"stringjoin#1\">Imports System\n\nPublic Class JoinTest\n    \n    Public Shared Sub Main()\n        \n        Console.WriteLine(MakeLine(0, 5, &quot;, &quot;))\n        Console.WriteLine(MakeLine(1, 6, &quot;  &quot;))\n        Console.WriteLine(MakeLine(9, 9, &quot;: &quot;))\n        Console.WriteLine(MakeLine(4, 7, &quot;&lt; &quot;))\n    End Sub &#39;Main\n    \n    \n    Private Shared Function MakeLine(initVal As Integer, multVal As Integer, sep As String) As String\n        Dim sArr(10) As String\n        Dim i As Integer\n        \n        \n        For i = initVal To (initVal + 10) - 1\n            sArr((i - initVal)) = [String].Format(&quot;{0,-3}&quot;, i * multVal)\n        \n        Next i\n        Return [String].Join(sep, sArr)\n    End Function &#39;MakeLine\nEnd Class &#39;JoinTest\n&#39; The example displays the following output:\n&#39;       0  , 5  , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45\n&#39;       6    12   18   24   30   36   42   48   54   60\n&#39;       81 : 90 : 99 : 108: 117: 126: 135: 144: 153: 162\n&#39;       28 &lt; 35 &lt; 42 &lt; 49 &lt; 56 &lt; 63 &lt; 70 &lt; 77 &lt; 84 &lt; 91\n</code></pre><pre><code class=\"lang-cs\" name=\"stringjoin#1\">using System;\n\npublic class JoinTest {\n    public static void Main() {\n\n        Console.WriteLine(MakeLine(0, 5, &quot;, &quot;));\n        Console.WriteLine(MakeLine(1, 6, &quot;  &quot;));\n        Console.WriteLine(MakeLine(9, 9, &quot;: &quot;));\n        Console.WriteLine(MakeLine(4, 7, &quot;&lt; &quot;));\n    }\n\n    private static string MakeLine(int initVal, int multVal, string sep) {\n\n        string [] sArr = new string [10];\n\n        for (int i = initVal; i &lt; initVal + 10; i++)\n            sArr[i - initVal] = String.Format(&quot;{0,-3}&quot;, i * multVal);\n\n        return String.Join(sep, sArr);\n    }\n}\n// The example displays the following output:\n//       0  , 5  , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45\n//       6    12   18   24   30   36   42   48   54   60\n//       81 : 90 : 99 : 108: 117: 126: 135: 144: 153: 162\n//       28 &lt; 35 &lt; 42 &lt; 49 &lt; 56 &lt; 63 &lt; 70 &lt; 77 &lt; 84 &lt; 91  \n</code></pre><pre><code class=\"lang-cpp\" name=\"stringjoin#1\">using namespace System;\nString^ MakeLine( int initVal, int multVal, String^ sep )\n{\n   array&lt;String^&gt;^sArr = gcnew array&lt;String^&gt;(10);\n   for ( int i = initVal; i &lt; initVal + 10; i++ )\n      sArr[ i - initVal ] = String::Format( &quot;{0, -3}&quot;, i * multVal );\n   return String::Join( sep, sArr );\n}\n\nint main()\n{\n   Console::WriteLine( MakeLine( 0, 5, &quot;, &quot; ) );\n   Console::WriteLine( MakeLine( 1, 6, &quot;  &quot; ) );\n   Console::WriteLine( MakeLine( 9, 9, &quot;: &quot; ) );\n   Console::WriteLine( MakeLine( 4, 7, &quot;&lt; &quot; ) );\n}\n// The example displays the following output:\n//       0  , 5  , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45\n//       6    12   18   24   30   36   42   48   54   60\n//       81 : 90 : 99 : 108: 117: 126: 135: 144: 153: 162\n//       28 &lt; 35 &lt; 42 &lt; 49 &lt; 56 &lt; 63 &lt; 70 &lt; 77 &lt; 84 &lt; 91\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Join_System_String_System_String___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_Join_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join(String,String[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the specified elements of a string array, using the specified separator between each element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Join (string separator, string[] value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to use as a separator. <code>separator</code> is included in the returned string only if <code>value</code> has more than one element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the elements to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first element in <code>value</code> to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements of <code>value</code> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that consists of the strings in <code>value</code> delimited by the <code>separator</code> string.  </p>\n<p> -or-  </p>\n<p> <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>count</code> is zero, <code>value</code> has no elements, or <code>separator</code> and all the elements of <code>value</code> are <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>count</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>count</code> is greater than the number of elements in <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Out of memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, if <code>separator</code> is &quot;, &quot; and the elements of <code>value</code> are &quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;, and &quot;pear&quot;, <code>Join(separator, value, 1, 2)</code> returns &quot;orange, grape&quot;.  </p>\n<p> If <code>separator</code> is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. If any element in <code>value</code> is <code>null</code>, an empty string is used instead.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example concatenates two elements from an array of names of fruit.  </p>\n<pre><code class=\"lang-cs\" name=\"string.join2#1\">// Sample for String.Join(String, String[], int int)\nusing System;\n\nclass Sample {\n    public static void Main() {\n    String[] val = {&quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;, &quot;pear&quot;};\n    String sep   = &quot;, &quot;;\n    String result;\n\n    Console.WriteLine(&quot;sep = &#39;{0}&#39;&quot;, sep);\n    Console.WriteLine(&quot;val[] = {{&#39;{0}&#39; &#39;{1}&#39; &#39;{2}&#39; &#39;{3}&#39;}}&quot;, val[0], val[1], val[2], val[3]);\n    result = String.Join(sep, val, 1, 2);\n    Console.WriteLine(&quot;String.Join(sep, val, 1, 2) = &#39;{0}&#39;&quot;, result);\n    }\n}\n/*\nThis example produces the following results:\nsep = &#39;, &#39;\nval[] = {&#39;apple&#39; &#39;orange&#39; &#39;grape&#39; &#39;pear&#39;}\nString.Join(sep, val, 1, 2) = &#39;orange, grape&#39;\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.join2#1\">Class Sample\n   Public Shared Sub Main()\n      Dim val As [String]() =  {&quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;, &quot;pear&quot;}\n      Dim sep As [String] = &quot;, &quot;\n      Dim result As [String]\n      \n      Console.WriteLine(&quot;sep = &#39;{0}&#39;&quot;, sep)\n      Console.WriteLine(&quot;val() = {{&#39;{0}&#39; &#39;{1}&#39; &#39;{2}&#39; &#39;{3}&#39;}}&quot;, val(0), val(1), val(2), val(3))\n      result = [String].Join(sep, val, 1, 2)\n      Console.WriteLine(&quot;String.Join(sep, val, 1, 2) = &#39;{0}&#39;&quot;, result)\n   End Sub\nEnd Class \n&#39;This example displays the following output:\n&#39;       sep = &#39;, &#39;\n&#39;       val() = {&#39;apple&#39; &#39;orange&#39; &#39;grape&#39; &#39;pear&#39;}\n&#39;       String.Join(sep, val, 1, 2) = &#39;orange, grape&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.join2#1\">// Sample for String::Join(String, String[], int int)\nusing namespace System;\nint main()\n{\n   array&lt;String^&gt;^val = {&quot;apple&quot;,&quot;orange&quot;,&quot;grape&quot;,&quot;pear&quot;};\n   String^ sep = &quot;, &quot;;\n   String^ result;\n   Console::WriteLine( &quot;sep = &#39;{0}&#39;&quot;, sep );\n   Console::WriteLine( &quot;val[] = {{&#39;{0}&#39; &#39;{1}&#39; &#39;{2}&#39; &#39;{3}&#39;}}&quot;, val[ 0 ], val[ 1 ], val[ 2 ], val[ 3 ] );\n   result = String::Join( sep, val, 1, 2 );\n   Console::WriteLine( &quot;String::Join(sep, val, 1, 2) = &#39;{0}&#39;&quot;, result );\n}\n\n/*\nThis example produces the following results:\nsep = &#39;, &#39;\nval[] = {&#39;apple&#39; &#39;orange&#39; &#39;grape&#39; &#39;pear&#39;}\nString::Join(sep, val, 1, 2) = &#39;orange, grape&#39;\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Join__1_System_String_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_String_Join_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join&lt;T&gt;(String,IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates the members of a collection, using the specified separator between each member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Join&lt;T&gt; (string separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to use as a separator.<code>separator</code> is included in the returned string only if <code>values</code> has more than one element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection that contains the objects to concatenate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that consists of the members of <code>values</code> delimited by the <code>separator</code> string. If <code>values</code> has no members, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>values</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>separator</code> is <code>null</code>, an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>) is used instead. If any member of <code>values</code> is <code>null</code>, an empty string is used instead.  </p>\n<p> Join(T) is a convenience method that lets you concatenate each member of an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection without first converting them to strings. The string representation of each object in the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection is derived by calling that object&#39;s <code>ToString</code> method.  </p>\n<p> This method is particular useful with Language-Integrated Query (LINQ) query expressions. For example, the following code defines a very simple <code>Animal</code> class that contains the name of an animal and the order to which it belongs. It then defines a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object that contains a number of <code>Animal</code> objects. The &lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt; extension method is called to extract the <code>Animal</code> objects whose <code>Order</code> property equals &quot;Rodent&quot;. The result is passed to the Join(T) method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Join#5\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Animal\n{\n   public string Kind;\n   public string Order;\n   \n   public Animal(string kind, string order)\n   {\n      this.Kind = kind;\n      this.Order = order;\n   }\n   \n   public override string ToString()\n   {\n      return this.Kind;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      List&lt;Animal&gt; animals = new List&lt;Animal&gt;();\n      animals.Add(new Animal(&quot;Squirrel&quot;, &quot;Rodent&quot;));\n      animals.Add(new Animal(&quot;Gray Wolf&quot;, &quot;Carnivora&quot;));\n      animals.Add(new Animal(&quot;Capybara&quot;, &quot;Rodent&quot;));\n      string output = String.Join(&quot; &quot;, animals.Where( animal =&gt; \n                      (animal.Order == &quot;Rodent&quot;)));\n      Console.WriteLine(output);  \n   }\n}\n// The example displays the following output:\n//      Squirrel Capybara\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Join#5\">Imports System.Collections.Generic\n\nPublic Class Animal\n   Public Kind As String\n   Public Order As String\n   \n   Public Sub New(kind As String, order As String)\n      Me.Kind = kind\n      Me.Order = order\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.Kind\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim animals As New List(Of Animal)\n      animals.Add(New Animal(&quot;Squirrel&quot;, &quot;Rodent&quot;))\n      animals.Add(New Animal(&quot;Gray Wolf&quot;, &quot;Carnivora&quot;))\n      animals.Add(New Animal(&quot;Capybara&quot;, &quot;Rodent&quot;)) \n      Dim output As String = String.Join(&quot; &quot;, animals.Where(Function(animal) _\n                                           animal.Order = &quot;Rodent&quot;))\n      Console.WriteLine(output)                                           \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      Squirrel Capybara\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100. It assigns the result to a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object of type integer, which it then passes to the Join(T) method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Join#2\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int maxPrime = 100;\n      List&lt;int&gt; primes = GetPrimes(maxPrime);\n      Console.WriteLine(&quot;Primes less than {0}:&quot;, maxPrime);\n      Console.WriteLine(&quot;   {0}&quot;, String.Join(&quot; &quot;, primes));\n   }\n\n   private static List&lt;int&gt; GetPrimes(int maxPrime)\n   {\n      Array values = Array.CreateInstance(typeof(int), \n                              new int[] { maxPrime - 1}, new int[] { 2 });\n      // Use Sieve of Eratosthenes to determine prime numbers.\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= (int) Math.Ceiling(Math.Sqrt(values.GetUpperBound(0))); ctr++)\n      {\n                           \n         if ((int) values.GetValue(ctr) == 1) continue;\n         \n         for (int multiplier = ctr; multiplier &lt;=  maxPrime / 2; multiplier++)\n            if (ctr * multiplier &lt;= maxPrime)\n               values.SetValue(1, ctr * multiplier);\n      }      \n      \n      List&lt;int&gt; primes = new List&lt;int&gt;();\n      for (int ctr = values.GetLowerBound(0); ctr &lt;= values.GetUpperBound(0); ctr++)\n         if ((int) values.GetValue(ctr) == 0) \n            primes.Add(ctr);\n      return primes;\n   }   \n}\n// The example displays the following output:\n//    Primes less than 100:\n//       2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Join#2\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim maxPrime As Integer = 100\n      Dim primes As List(Of Integer) = GetPrimes(maxPrime)\n      Console.WriteLine(&quot;Primes less than {0}:&quot;, maxPrime)\n      Console.WriteLine(&quot;   {0}&quot;, String.Join(&quot; &quot;, primes))\n   End Sub\n   \n   Private Function GetPrimes(maxPrime As Integer) As List(Of Integer)\n      Dim values As Array = Array.CreateInstance(GetType(Integer), _\n                              New Integer() { maxPrime - 1}, New Integer(){ 2 }) \n        &#39; Use Sieve of Eratosthenes to determine prime numbers.\n      For ctr As Integer = values.GetLowerBound(0) To _\n                           CInt(Math.Ceiling(Math.Sqrt(values.GetUpperBound(0))))\n         If CInt(values.GetValue(ctr)) = 1 Then Continue For\n         \n         For multiplier As Integer = ctr To maxPrime \\ 2\n            If ctr * multiplier &lt;= maxPrime Then values.SetValue(1, ctr * multiplier)\n         Next   \n      Next      \n      \n      Dim primes As New System.Collections.Generic.List(Of Integer)\n      For ctr As Integer = values.GetLowerBound(0) To values.GetUpperBound(0)\n         If CInt(values.GetValue(ctr)) = 0 Then primes.Add(ctr)\n      Next            \n      Return primes\n   End Function   \nEnd Module\n&#39; The example displays the following output:\n&#39;    Primes less than 100:\n&#39;       2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_Char_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to seek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> if that character is found, or -1 if it is not.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or the first character position has been examined. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <code>ExtractFilename</code> method that uses the LastIndexOf method to find the last directory separator character in a string and to extract the string&#39;s file name. If the file exists, the method returns the file name without its path.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.LastIndexOf#1\">using System;\nusing System.IO;\n\npublic class TestLastIndexOf\n{\n   public static void Main()\n   {\n      string filename;\n      \n      filename = ExtractFilename(@&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\&quot;);\n      Console.WriteLine(&quot;{0}&quot;, String.IsNullOrEmpty(filename) ? &quot;&lt;none&gt;&quot; : filename);\n      \n      filename = ExtractFilename(@&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\delegate.txt&quot;); \n      Console.WriteLine(&quot;{0}&quot;, String.IsNullOrEmpty(filename) ? &quot;&lt;none&gt;&quot; : filename);\n\n      filename = ExtractFilename(&quot;delegate.txt&quot;);      \n      Console.WriteLine(&quot;{0}&quot;, String.IsNullOrEmpty(filename) ? &quot;&lt;none&gt;&quot; : filename);\n      \n      filename = ExtractFilename(@&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp<br>otafile.txt&quot;);\n      Console.WriteLine(&quot;{0}&quot;, String.IsNullOrEmpty(filename) ? &quot;&lt;none&gt;&quot; : filename);\n   }\n\n   public static string ExtractFilename(string filepath)\n   {\n      // If path ends with a &quot;\\&quot;, it&#39;s a path only so return String.Empty.\n      if (filepath.Trim().EndsWith(@&quot;\\&quot;))\n         return String.Empty;\n      \n      // Determine where last backslash is.\n      int position = filepath.LastIndexOf(&#39;\\\\&#39;);\n      // If there is no backslash, assume that this is a filename.\n      if (position == -1)\n      {\n         // Determine whether file exists in the current directory.\n         if (File.Exists(Environment.CurrentDirectory + Path.DirectorySeparatorChar + filepath)) \n            return filepath;\n         else\n            return String.Empty;\n      }\n      else\n      {\n         // Determine whether file exists using filepath.\n         if (File.Exists(filepath))\n            // Return filename without file path.\n            return filepath.Substring(position + 1);\n         else\n            return String.Empty;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.LastIndexOf#1\">Imports System.IO\n\nPublic Module Test\n   Public Sub Main()\n      Dim filename As String \n      \n      filename = ExtractFilename(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\&quot;)\n      Console.WriteLine(&quot;{0}&quot;, IIf(String.IsNullOrEmpty(fileName), &quot;&lt;none&gt;&quot;, filename))\n      \n      filename = ExtractFilename(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\delegate.txt&quot;) \n      Console.WriteLine(&quot;{0}&quot;, IIf(String.IsNullOrEmpty(fileName), &quot;&lt;none&gt;&quot;, filename))\n\n      filename = ExtractFilename(&quot;delegate.txt&quot;)      \n      Console.WriteLine(&quot;{0}&quot;, IIf(String.IsNullOrEmpty(fileName), &quot;&lt;none&gt;&quot;, filename))\n      \n      filename = ExtractFilename(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp<br>otafile.txt&quot;)\n      Console.WriteLine(&quot;{0}&quot;, IIf(String.IsNullOrEmpty(fileName), &quot;&lt;none&gt;&quot;, filename))\n   End Sub\n   \n   Public Function ExtractFilename(filepath As String) As String\n      &#39; If path ends with a &quot;\\&quot;, it&#39;s a path only so return String.Empty.\n      If filepath.Trim().EndsWith(&quot;\\&quot;) Then Return String.Empty\n      \n      &#39; Determine where last backslash is.\n      Dim position As Integer = filepath.LastIndexOf(&quot;\\&quot;c)\n      &#39; If there is no backslash, assume that this is a filename.\n      If position = -1 Then\n         &#39; Determine whether file exists in the current directory.\n         If File.Exists(Environment.CurrentDirectory + Path.DirectorySeparatorChar + filepath) Then\n            Return filepath\n         Else\n            Return String.Empty\n         End If\n      Else\n         &#39; Determine whether file exists using filepath.\n         If File.Exists(filepath) Then\n            &#39; Return filename without file path.\n            Return filepath.Substring(position + 1)\n         Else\n            Return String.Empty\n         End If                     \n      End If\n   End Function\nEnd Module \n&#39; The example displays the following output:\n&#39;        &lt;none&gt;\n&#39;        delegate.txt\n&#39;        &lt;none&gt;\n&#39;        &lt;none&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_String_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence of a specified string within this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the last index position in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the last character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or the first character position has been examined.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the LastIndexOf method always returns <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> â€“ 1, which represents the last index position in the current instance. In the following example, the LastIndexOf method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by &quot;n&quot;, and a soft hyphen followed by &quot;m&quot;) in two strings. Only one of the strings contains a soft hyphen. If the example is run on the .NET Framework 4 or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <code>value</code>. When searching for a soft hyphen only, the method returns 6 and 5. These values correspond to the index of the last character in the two strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.LastIndexOf#21\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string s1 = &quot;ani\\u00ADmal&quot;;\n      string s2 = &quot;animal&quot;;\n      \n      // Find the index of the last soft hyphen.\n      Console.WriteLine(s1.LastIndexOf(&quot;\\u00AD&quot;));\n      Console.WriteLine(s2.LastIndexOf(&quot;\\u00AD&quot;));\n      \n      // Find the index of the last soft hyphen followed by &quot;n&quot;.\n      Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADn&quot;));\n      Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADn&quot;));\n      \n      // Find the index of the last soft hyphen followed by &quot;m&quot;.\n      Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADm&quot;));\n      Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADm&quot;));\n   }\n}\n// The example displays the following output:\n//       6\n//       5\n//       1\n//       1\n//       4\n//       3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.LastIndexOf#21\">Module Example\n   Public Sub Main()\n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      Dim s1 As String = &quot;ani&quot; + softHyphen + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n      \n      &#39; Find the index of the last soft hyphen.\n      Console.WriteLine(s1.LastIndexOf(softHyphen))\n      Console.WriteLine(s2.LastIndexOf(softHyphen))\n      \n      &#39; Find the index of the last soft hyphen followed by &quot;n&quot;.\n      Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;n&quot;))\n      Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;n&quot;))\n      \n      &#39; Find the index of the last soft hyphen followed by &quot;m&quot;.\n      Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;m&quot;))\n      Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;m&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       6\n&#39;       5\n&#39;       1\n&#39;       1\n&#39;       4\n&#39;       3\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example removes opening and closing HTML tags from a string if the tags begin and end the string. If a string ends with a closing bracket character (&quot;&gt;&quot;), the example uses the LastIndexOf method to locate the start of the end tag.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.LastIndexOf#2\">using System;\n\npublic class Example \n{\n   public static void Main() \n   {\n      string[] strSource = { &quot;&lt;b&gt;This is bold text&lt;/b&gt;&quot;, &quot;&lt;H1&gt;This is large Text&lt;/H1&gt;&quot;,\n               &quot;&lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&quot;,\n               &quot;&lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;&quot;,\n               &quot;This line ends with a greater than symbol and should not be modified&gt;&quot; };\n\n      // Strip HTML start and end tags from each string if they are present.\n      foreach (string s in strSource)\n      {\n         Console.WriteLine(&quot;Before: &quot; + s);\n         string item = s;\n         // Use EndsWith to find a tag at the end of the line.\n         if (item.Trim().EndsWith(&quot;&gt;&quot;)) \n         {\n            // Locate the opening tag.\n            int endTagStartPosition = item.LastIndexOf(&quot;&lt;/&quot;);\n            // Remove the identified section, if it is valid.\n            if (endTagStartPosition &gt;= 0 )\n               item = item.Substring(0, endTagStartPosition);\n\n            // Use StartsWith to find the opening tag.\n            if (item.Trim().StartsWith(&quot;&lt;&quot;))\n            {\n               // Locate the end of opening tab.\n               int openTagEndPosition = item.IndexOf(&quot;&gt;&quot;);\n               // Remove the identified section, if it is valid.\n               if (openTagEndPosition &gt;= 0)\n                  item = item.Substring(openTagEndPosition + 1);\n            }      \n         }\n         // Display the trimmed string.\n         Console.WriteLine(&quot;After: &quot; + item);\n         Console.WriteLine();\n      }                   \n   }\n}\n// The example displays the following output:\n//    Before: &lt;b&gt;This is bold text&lt;/b&gt;\n//    After: This is bold text\n//    \n//    Before: &lt;H1&gt;This is large Text&lt;/H1&gt;\n//    After: This is large Text\n//    \n//    Before: &lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n//    After: &lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;\n//    \n//    Before: &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n//    After: This has &lt;i&gt;embedded&lt;/i&gt; tags.\n//    \n//    Before: This line ends with a greater than symbol and should not be modified&gt;\n//    After: This line ends with a greater than symbol and should not be modified&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.LastIndexOf#2\">Module Example\n   Public Sub Main()\n      Dim strSource As String() = { &quot;&lt;b&gt;This is bold text&lt;/b&gt;&quot;, _\n                    &quot;&lt;H1&gt;This is large Text&lt;/H1&gt;&quot;, _\n                    &quot;&lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&quot;, _\n                    &quot;&lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;&quot;, _\n                    &quot;This line ends with a greater than symbol and should not be modified&gt;&quot; }\n\n      &#39; Strip HTML start and end tags from each string if they are present.\n      For Each s As String In strSource\n         Console.WriteLine(&quot;Before: &quot; + s)\n         &#39; Use EndsWith to find a tag at the end of the line.\n         If s.Trim().EndsWith(&quot;&gt;&quot;) Then \n            &#39; Locate the opening tag.\n            Dim endTagStartPosition As Integer = s.LastIndexOf(&quot;&lt;/&quot;)\n            &#39; Remove the identified section if it is valid.\n            If endTagStartPosition &gt;= 0 Then\n               s = s.Substring(0, endTagStartPosition)\n            End If\n            \n            &#39; Use StartsWith to find the opening tag.\n            If s.Trim().StartsWith(&quot;&lt;&quot;) Then\n               &#39; Locate the end of opening tab.\n               Dim openTagEndPosition As Integer = s.IndexOf(&quot;&gt;&quot;)\n               &#39; Remove the identified section if it is valid.\n               If openTagEndPosition &gt;= 0 Then\n                  s = s.Substring(openTagEndPosition + 1)\n               End If   \n            End If      \n         End If\n         &#39; Display the trimmed string.\n         Console.WriteLine(&quot;After: &quot; + s)\n         Console.WriteLine()\n      Next                   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Before: &lt;b&gt;This is bold text&lt;/b&gt;\n&#39;    After: This is bold text\n&#39;    \n&#39;    Before: &lt;H1&gt;This is large Text&lt;/H1&gt;\n&#39;    After: This is large Text\n&#39;    \n&#39;    Before: &lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n&#39;    After: &lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;\n&#39;    \n&#39;    Before: &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n&#39;    After: This has &lt;i&gt;embedded&lt;/i&gt; tags.\n&#39;    \n&#39;    Before: This line ends with a greater than symbol and should not be modified&gt;\n&#39;    After: This line ends with a greater than symbol and should not be modified&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_Char_System_Int32_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Char,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (char value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.This method begins searching at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning of the current instance until either <code>value</code> is found or the first character position has been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches every character from the last character in the string to the beginning. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string.  </p>\n<pre><code class=\"lang-cs\" name=\"string.lastindexof1#1\">// Sample for String.LastIndexOf(Char, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n\n    start = str.Length-1;\n    Console.WriteLine(&quot;All occurrences of &#39;t&#39; from position {0} to 0.&quot;, start);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;The letter &#39;t&#39; occurs at position(s): &quot;);\n\n    at = 0;\n    while((start &gt; -1) &amp;&amp; (at &gt; -1))\n        {\n        at = str.LastIndexOf(&#39;t&#39;, start);\n        if (at &gt; -1) \n            {\n            Console.Write(&quot;{0} &quot;, at);\n            start = at - 1;\n            }\n        }\n    Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine);\n    }\n}\n/*\nThis example produces the following results:\nAll occurrences of &#39;t&#39; from position 66 to 0.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe letter &#39;t&#39; occurs at position(s): 64 55 44 41 33 11 7\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.lastindexof1#1\">// Sample for String::LastIndexOf(Char, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   start = str-&gt;Length - 1;\n   Console::WriteLine( &quot;All occurrences of &#39;t&#39; from position {0} to 0.&quot;, start );\n   Console::WriteLine( &quot;{0}<br>{1}<br>{2}<br>&quot;, br1, br2, str );\n   Console::Write( &quot;The letter &#39;t&#39; occurs at position(s): &quot; );\n   at = 0;\n   while ( (start &gt; -1) &amp;&amp; (at &gt; -1) )\n   {\n      at = str-&gt;LastIndexOf( &#39;t&#39;, start );\n      if ( at &gt; -1 )\n      {\n         Console::Write( &quot; {0} &quot;, at );\n         start = at - 1;\n      }\n   }\n}\n\n/*\nThis example produces the following results:\nAll occurrences of &#39;t&#39; from position 66 to 0.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe letter &#39;t&#39; occurs at position(s): 64 55 44 41 33 11 7\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.lastindexof1#1\">&#39; Sample for String.LastIndexOf(Char, Int32)\nImports System \n _\n\nClass Sample\n   \n   Public Shared Sub Main()\n      \n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      \n      start = str.Length - 1\n      Console.WriteLine(&quot;All occurrences of &#39;t&#39; from position {0} to 0.&quot;, start)\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;The letter &#39;t&#39; occurs at position(s): &quot;)\n      \n      at = 0\n      While start &gt; - 1 And at &gt; - 1\n         at = str.LastIndexOf(&quot;t&quot;c, start)\n         If at &gt; - 1 Then\n            Console.Write(&quot;{0} &quot;, at)\n            start = at - 1\n         End If\n      End While\n      Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;All occurrences of &#39;t&#39; from position 66 to 0.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;The letter &#39;t&#39; occurs at position(s): 64 55 44 41 33 11 7\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (string value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is less than zero or greater than the length of the current instance.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is less than -1 or greater than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or the first character position has been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches every character from the last character in the string to the beginning.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the LastIndexOf method always returns <code>startIndex</code>, which is the character position at which the search begins. In the following example, the LastIndexOf method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final &quot;m&quot; in a string. If the example is run on the .NET Framework 4 or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and &quot;m&quot; returns the position of the &quot;m&quot; in the string, whereas calling it to find a substring that consists of the soft hyphen and &quot;n&quot; returns the position of the &quot;n&quot;. When the search string contains only the soft hyphen, the method returns the index of the &quot;m&quot;, which represents the value of <code>startIndex</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.LastIndexOf#22\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int position = 0;\n      string s1 = &quot;ani\\u00ADmal&quot;;\n      string s2 = &quot;animal&quot;;\n      \n      // Find the index of the soft hyphen.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00AD&quot;, position));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00AD&quot;, position));\n      \n      // Find the index of the soft hyphen followed by &quot;n&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADn&quot;, position));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADn&quot;, position));\n      \n      // Find the index of the soft hyphen followed by &quot;m&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADm&quot;, position));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADm&quot;, position));\n   }\n}\n// The example displays the following output:\n//       &#39;m&#39; at position 4\n//       4\n//       &#39;m&#39; at position 3\n//       3\n//       &#39;m&#39; at position 4\n//       1\n//       &#39;m&#39; at position 3\n//       1\n//       &#39;m&#39; at position 4\n//       4\n//       &#39;m&#39; at position 3\n//       3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.LastIndexOf#22\">Module Example\n   Public Sub Main()\n      Dim position As Integer\n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      Dim s1 As String = &quot;ani&quot; + softHyphen + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n      \n      &#39; Find the index of the soft hyphen.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen, position))\n      End If\n         \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen, position))\n      End If\n      \n      &#39; Find the index of the soft hyphen followed by &quot;n&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;n&quot;, position))\n      End If\n         \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;n&quot;, position))\n      End If\n      \n      &#39; Find the index of the soft hyphen followed by &quot;m&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;m&quot;, position))\n      End If\n      \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;m&quot;, position))\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;m&#39; at position 4\n&#39;       4\n&#39;       &#39;m&#39; at position 3\n&#39;       3\n&#39;       &#39;m&#39; at position 4\n&#39;       1\n&#39;       &#39;m&#39; at position 3\n&#39;       1\n&#39;       &#39;m&#39; at position 4\n&#39;       4\n&#39;       &#39;m&#39; at position 3\n&#39;       3\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.lastindexof7#1\">// Sample for String::LastIndexOf(String, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   start = str-&gt;Length - 1;\n   Console::WriteLine( &quot;All occurrences of &#39;he&#39; from position {0} to 0.&quot;, start );\n   Console::WriteLine( &quot;{0}<br>{1}<br>{2}<br>&quot;, br1, br2, str );\n   Console::Write( &quot;The string &#39;he&#39; occurs at position(s): &quot; );\n   at = 0;\n   while ( (start &gt; -1) &amp;&amp; (at &gt; -1) )\n   {\n      at = str-&gt;LastIndexOf( &quot;he&quot;, start );\n      if ( at &gt; -1 )\n      {\n         Console::Write( &quot; {0} &quot;, at );\n         start = at - 1;\n      }\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\nAll occurrences of &#39;he&#39; from position 66 to 0.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe string &#39;he&#39; occurs at position(s):  56  45  8\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.lastindexof7#1\">&#39; Sample for String.LastIndexOf(String, Int32)\nImports System\n _\n\nClass Sample\n   \n   Public Shared Sub Main()\n      \n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n\n      &#39;#3\n      start = str.Length - 1\n      Console.WriteLine(&quot;All occurrences of &#39;he&#39; from position {0} to 0.&quot;, start)\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;The string &#39;he&#39; occurs at position(s): &quot;)\n      \n      at = 0\n      While start &gt; - 1 And at &gt; - 1\n         at = str.LastIndexOf(&quot;he&quot;, start)\n         If at &gt; - 1 Then\n            Console.Write(&quot;{0} &quot;, at)\n            start = at - 1\n         End If\n      End While\n      Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine)\n   End Sub &#39;Main \nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;All occurrences of &#39;he&#39; from position 66 to 0.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;The string &#39;he&#39; occurs at position(s): 56 45 8\n&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"string.lastindexof7#1\">// Sample for String.LastIndexOf(String, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n\n    start = str.Length-1;\n    Console.WriteLine(&quot;All occurrences of &#39;he&#39; from position {0} to 0.&quot;, start);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;The string &#39;he&#39; occurs at position(s): &quot;);\n\n    at = 0;\n    while((start &gt; -1) &amp;&amp; (at &gt; -1))\n        {\n        at = str.LastIndexOf(&quot;he&quot;, start);\n        if (at &gt; -1) \n            {\n            Console.Write(&quot;{0} &quot;, at);\n            start = at - 1;\n            }\n        }\n    Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine);\n    }\n}\n/*\nThis example produces the following results:\nAll occurrences of &#39;he&#39; from position 66 to 0.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe string &#39;he&#39; occurs at position(s): 56 45 8\n\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_String_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the last occurrence of a specified string within the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. A parameter specifies the type of search to use for the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (string value, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the last index position in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.  </p>\n<p> The search begins at the last character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or the first character position has been examined.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following exampledemonstrates three overloads of the <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method that find the last occurrence of a string within another string using different values of the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"system.string.LastIndexOfCmp#1\">// This code example demonstrates the \n// System.String.LastIndexOf(String, ..., StringComparison) methods.\n\nusing System;\nusing System.Threading;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string intro = &quot;Find the last occurrence of a character using different &quot; + \n                   &quot;values of StringComparison.&quot;;\n    string resultFmt = &quot;Comparison: {0,-28} Location: {1,3}&quot;;\n\n// Define a string to search for.\n// U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n    string CapitalAWithRing = &quot;\\u00c5&quot;; \n\n// Define a string to search. \n// The result of combining the characters LATIN SMALL LETTER A and COMBINING \n// RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n// LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n    string cat = &quot;A Cheshire c&quot; + &quot;\\u0061\\u030a&quot; + &quot;t&quot;;\n    int loc = 0;\n    StringComparison[] scValues = {\n        StringComparison.CurrentCulture,\n        StringComparison.CurrentCultureIgnoreCase,\n        StringComparison.InvariantCulture,\n        StringComparison.InvariantCultureIgnoreCase,\n        StringComparison.Ordinal,\n        StringComparison.OrdinalIgnoreCase };\n\n// Clear the screen and display an introduction.\n    Console.Clear();\n    Console.WriteLine(intro);\n\n// Display the current culture because culture affects the result. For example, \n// try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n\n    Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot; - {1}.&quot;, \n                       Thread.CurrentThread.CurrentCulture.Name,\n                       Thread.CurrentThread.CurrentCulture.DisplayName);\n\n// Display the string to search for and the string to search.\n    Console.WriteLine(&quot;Search for the string \\&quot;{0}\\&quot; in the string \\&quot;{1}\\&quot;&quot;, \n                       CapitalAWithRing, cat);\n    Console.WriteLine();\n\n// Note that in each of the following searches, we look for \n// LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n// LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n// the string was not found.\n// Search using different values of StringComparsion. Specify the start \n// index and count. \n\n    Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, cat.Length-1, cat.Length, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparsion. Specify the \n// start index. \n    Console.WriteLine(&quot;<br>Part 2: Start index is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, cat.Length-1, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparsion. \n    Console.WriteLine(&quot;<br>Part 3: Neither start index nor count is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n    }\n}\n\n/*\nNote: This code example was executed on a console whose user interface \nculture is &quot;en-US&quot; (English-United States).\n\nThis code example produces the following results:\n\nFind the last occurrence of a character using different values of StringComparison.\nThe current culture is &quot;en-US&quot; - English (United States).\nSearch for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n\nPart 1: Start index and count are specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 2: Start index is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 3: Neither start index nor count is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.string.LastIndexOfCmp#1\">&#39; This code example demonstrates the \n&#39; System.String.LastIndexOf(String, ..., StringComparison) methods.\n\nImports System\nImports System.Threading\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim intro As String = &quot;Find the last occurrence of a character using different &quot; &amp; _\n                              &quot;values of StringComparison.&quot;\n        Dim resultFmt As String = &quot;Comparison: {0,-28} Location: {1,3}&quot;\n        \n        &#39; Define a string to search for.\n        &#39; U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n        Dim CapitalAWithRing As String = &quot;&#197;&quot;\n        \n        &#39; Define a string to search. \n        &#39; The result of combining the characters LATIN SMALL LETTER A and COMBINING \n        &#39; RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n        Dim cat As String = &quot;A Cheshire c&quot; &amp; &quot;aÌŠ&quot; &amp; &quot;t&quot;\n        Dim loc As Integer = 0\n        Dim scValues As StringComparison() =  { _\n                        StringComparison.CurrentCulture, _\n                        StringComparison.CurrentCultureIgnoreCase, _\n                        StringComparison.InvariantCulture, _\n                        StringComparison.InvariantCultureIgnoreCase, _\n                        StringComparison.Ordinal, _\n                        StringComparison.OrdinalIgnoreCase }\n        Dim sc As StringComparison\n        \n        &#39; Clear the screen and display an introduction.\n        Console.Clear()\n        Console.WriteLine(intro)\n        \n        &#39; Display the current culture because culture affects the result. For example, \n        &#39; try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n        Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot; - {1}.&quot;, _\n                           Thread.CurrentThread.CurrentCulture.Name, _\n                           Thread.CurrentThread.CurrentCulture.DisplayName)\n        \n        &#39; Display the string to search for and the string to search.\n        Console.WriteLine(&quot;Search for the string &quot;&quot;{0}&quot;&quot; in the string &quot;&quot;{1}&quot;&quot;&quot;, _\n                           CapitalAWithRing, cat)\n        Console.WriteLine()\n        \n        &#39; Note that in each of the following searches, we look for \n        &#39; LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n        &#39; the string was not found.\n        &#39; Search using different values of StringComparsion. Specify the start \n        &#39; index and count. \n        Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, cat.Length - 1, cat.Length, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparsion. Specify the \n        &#39; start index. \n        Console.WriteLine(vbCrLf &amp; &quot;Part 2: Start index is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, cat.Length - 1, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparsion. \n        Console.WriteLine(vbCrLf &amp; &quot;Part 3: Neither start index nor count is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;Note: This code example was executed on a console whose user interface \n&#39;culture is &quot;en-US&quot; (English-United States).\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Find the last occurrence of a character using different values of StringComparison.\n&#39;The current culture is &quot;en-US&quot; - English (United States).\n&#39;Search for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n&#39;\n&#39;Part 1: Start index and count are specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 2: Start index is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 3: Neither start index nor count is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_Char_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Char,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (char value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position of the search. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of character positions to examine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index position of <code>value</code> if that character is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> is less than zero or greater than or equal to the length of this instance.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> - <code>count</code> + 1 is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> This method begins searching at the <code>startIndex</code> character position and proceeds backward toward the beginning of this instance until either <code>value</code> is found or <code>count</code> character positions have been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches backward <code>count</code> characters from the last character in the string. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring.  </p>\n<pre><code class=\"lang-cs\" name=\"string.lastindexof2#1\">// Sample for String.LastIndexOf(Char, Int32, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n    int count;\n    int end;\n\n    start = str.Length-1;\n    end = start/2 - 1;\n    Console.WriteLine(&quot;All occurrences of &#39;t&#39; from position {0} to {1}.&quot;, start, end);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;The letter &#39;t&#39; occurs at position(s): &quot;);\n\n    count = 0;\n    at = 0;\n    while((start &gt; -1) &amp;&amp; (at &gt; -1))\n        {\n        count = start - end; //Count must be within the substring.\n        at = str.LastIndexOf(&#39;t&#39;, start, count);\n        if (at &gt; -1) \n            {\n            Console.Write(&quot;{0} &quot;, at);\n            start = at - 1;\n            }\n        }\n    Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine);\n    }\n}\n/*\nThis example produces the following results:\nAll occurrences of &#39;t&#39; from position 66 to 32.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe letter &#39;t&#39; occurs at position(s): 64 55 44 41 33\n\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.lastindexof2#1\">&#39; Sample for String.LastIndexOf(Char, Int32, Int32)\nImports System\n _\n\nClass Sample\n   \n   Public Shared Sub Main()\n      \n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      Dim count As Integer\n      Dim [end] As Integer\n\n      start = str.Length - 1\n      [end] = start / 2 - 1\n      Console.WriteLine(&quot;All occurrences of &#39;t&#39; from position {0} to {1}.&quot;, start, [end])\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;The letter &#39;t&#39; occurs at position(s): &quot;)\n      \n      count = 0\n      at = 0\n      While start &gt; - 1 And at &gt; - 1\n         count = start - [end] &#39;Count must be within the substring.\n         at = str.LastIndexOf(&quot;t&quot;c, start, count)\n         If at &gt; - 1 Then\n            Console.Write(&quot;{0} &quot;, at)\n            start = at - 1\n         End If\n      End While\n      Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine)\n   End Sub &#39;Main \nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;All occurrences of &#39;t&#39; from position 66 to 32.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;The letter &#39;t&#39; occurs at position(s): 64 55 44 41 33\n&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.lastindexof2#1\">// Sample for String::LastIndexOf(Char, Int32, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   int count;\n   int end;\n   start = str-&gt;Length - 1;\n   end = start / 2 - 1;\n   Console::WriteLine( &quot;All occurrences of &#39;t&#39; from position {0} to {1}.&quot;, start, end );\n   Console::WriteLine( &quot;<br>{0}<br>{1}<br>{2}&quot;, br1, br2, str );\n   Console::Write( &quot;The letter &#39;t&#39; occurs at position(s): &quot; );\n   count = 0;\n   at = 0;\n   while ( (start &gt; -1) &amp;&amp; (at &gt; -1) )\n   {\n      count = start - end; //Count must be within the substring.\n      at = str-&gt;LastIndexOf( &#39;t&#39;, start, count );\n      if ( at &gt; -1 )\n      {\n         Console::Write( &quot; {0} &quot;, at );\n         start = at - 1;\n      }\n   }\n}\n\n/*\nThis example produces the following results:\nAll occurrences of &#39;t&#39; from position 66 to 32.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe letter &#39;t&#39; occurs at position(s): 64 55 44 41 33\n\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (string value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of character positions to examine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based starting index position of <code>value</code> if that string is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> - <code>count</code>+ 1 specifies a position that is not within this instance.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and <code>start</code> is less than -1 or greater than zero.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and <code>count</code> is greater than 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning until either <code>value</code> is found or <code>count</code> character positions have been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches backward <code>count</code> characters from the last character in the string.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) search using the current culture.  </p>\n<p> Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search, if <code>value</code> contains an ignorable character, the result is equivalent to searching with that character removed. If <code>value</code> consists only of one or more ignorable characters, the LastIndexOf method always returns <code>startIndex</code>, which is the character position at which the search begins. In the following example, the LastIndexOf method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final &quot;m&quot; of two strings. Only one of the strings contains the required substring. If the example is run on the .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of &quot;m&quot; in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an &quot;m&quot;, the method fails to return the index of the soft hyphen but instead returns the index of the &quot;m&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.LastIndexOf#23\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int position = 0;\n      string s1 = &quot;ani\\u00ADmal&quot;;\n      string s2 = &quot;animal&quot;;\n      \n      // Find the index of the soft hyphen.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00AD&quot;, position, position + 1));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00AD&quot;, position, position + 1));\n      \n      // Find the index of the soft hyphen followed by &quot;n&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADn&quot;, position, position + 1));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADn&quot;, position, position + 1));\n      \n      // Find the index of the soft hyphen followed by &quot;m&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)\n         Console.WriteLine(s1.LastIndexOf(&quot;\\u00ADm&quot;, position, position + 1));\n\n      position = s2.LastIndexOf(&quot;m&quot;);\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position);\n      if (position &gt;= 0)   \n         Console.WriteLine(s2.LastIndexOf(&quot;\\u00ADm&quot;, position, position + 1));\n   }\n}\n// The example displays the following output:\n//       &#39;m&#39; at position 4\n//       4\n//       &#39;m&#39; at position 3\n//       3\n//       &#39;m&#39; at position 4\n//       1\n//       &#39;m&#39; at position 3\n//       1\n//       &#39;m&#39; at position 4\n//       4\n//       &#39;m&#39; at position 3\n//       3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.LastIndexOf#23\">Module Example\n   Public Sub Main()\n      Dim position As Integer\n      Dim softHyphen As String = ChrW(&amp;h00AD)\n      \n      Dim s1 As String = &quot;ani&quot; + softHyphen + &quot;mal&quot;\n      Dim s2 As String = &quot;animal&quot;\n      \n      &#39; Find the index of the soft hyphen.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen, position, position + 1))\n      End If\n         \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen, position, position + 1))\n      End If\n      \n      &#39; Find the index of the soft hyphen followed by &quot;n&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;n&quot;, position, position + 1))\n      End If\n         \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;n&quot;, position, position + 1))\n      End If\n      \n      &#39; Find the index of the soft hyphen followed by &quot;m&quot;.\n      position = s1.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s1.LastIndexOf(softHyphen + &quot;m&quot;, position, position + 1))\n      End If\n      \n      position = s2.LastIndexOf(&quot;m&quot;)\n      Console.WriteLine(&quot;&#39;m&#39; at position {0}&quot;, position)\n      If position &gt;= 0 Then\n         Console.WriteLine(s2.LastIndexOf(softHyphen + &quot;m&quot;, position, position + 1))\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;m&#39; at position 4\n&#39;       4\n&#39;       &#39;m&#39; at position 3\n&#39;       3\n&#39;       &#39;m&#39; at position 4\n&#39;       1\n&#39;       &#39;m&#39; at position 3\n&#39;       1\n&#39;       &#39;m&#39; at position 4\n&#39;       4\n&#39;       &#39;m&#39; at position 3\n&#39;       3\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.lastindexof8#1\">// Sample for String::LastIndexOf(String, Int32, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   int count;\n   int end;\n   start = str-&gt;Length - 1;\n   end = start / 2 - 1;\n   Console::WriteLine( &quot;All occurrences of &#39;he&#39; from position {0} to {1}.&quot;, start, end );\n   Console::WriteLine( &quot;{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   Console::Write( &quot;The string &#39;he&#39; occurs at position(s): &quot; );\n   count = 0;\n   at = 0;\n   while ( (start &gt; -1) &amp;&amp; (at &gt; -1) )\n   {\n      count = start - end; //Count must be within the substring.\n      at = str-&gt;LastIndexOf( &quot;he&quot;, start, count );\n      if ( at &gt; -1 )\n      {\n         Console::Write( &quot;{0} &quot;, at );\n         start = at - 1;\n      }\n   }\n\n   Console::Write( &quot;{0} {0} {0}&quot;, Environment::NewLine );\n}\n\n/*\nThis example produces the following results:\nAll occurrences of &#39;he&#39; from position 66 to 32.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe string &#39;he&#39; occurs at position(s): 56 45\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.lastindexof8#1\">&#39; Sample for String.LastIndexOf(String, Int32, Int32)\nImports System\n _\n\nClass Sample\n   \n   Public Shared Sub Main()\n      \n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      Dim count As Integer\n      Dim [end] As Integer\n\n      start = str.Length - 1\n      [end] = start / 2 - 1\n      Console.WriteLine(&quot;All occurrences of &#39;he&#39; from position {0} to {1}.&quot;, start, [end])\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;The string &#39;he&#39; occurs at position(s): &quot;)\n      \n      count = 0\n      at = 0\n      While start &gt; - 1 And at &gt; - 1\n         count = start - [end] &#39;Count must be within the substring.\n         at = str.LastIndexOf(&quot;he&quot;, start, count)\n         If at &gt; - 1 Then\n            Console.Write(&quot;{0} &quot;, at)\n            start = at - 1\n         End If\n      End While\n      Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine)\n   End Sub &#39;Main \nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;All occurrences of &#39;he&#39; from position 66 to 32.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;The string &#39;he&#39; occurs at position(s): 56 45\n&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"string.lastindexof8#1\">// Sample for String.LastIndexOf(String, Int32, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n    int count;\n    int end;\n\n    start = str.Length-1;\n    end = start/2 - 1;\n    Console.WriteLine(&quot;All occurrences of &#39;he&#39; from position {0} to {1}.&quot;, start, end);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;The string &#39;he&#39; occurs at position(s): &quot;);\n\n    count = 0;\n    at = 0;\n    while((start &gt; -1) &amp;&amp; (at &gt; -1))\n        {\n        count = start - end; //Count must be within the substring.\n        at = str.LastIndexOf(&quot;he&quot;, start, count);\n        if (at &gt; -1) \n            {\n            Console.Write(&quot;{0} &quot;, at);\n            start = at - 1;\n            }\n        }\n    Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine);\n    }\n}\n/*\nThis example produces the following results:\nAll occurrences of &#39;he&#39; from position 66 to 32.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nThe string &#39;he&#39; occurs at position(s): 56 45\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_String_System_Int32_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Int32,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index of the last occurrence of a specified string within the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is less than zero or greater than the length of the current instance.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is less than -1 or greater than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the <code>startIndex</code> character position and proceeds backward until either <code>value</code> is found or the first character position has been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches every character from the last character in the string to the beginning.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following exampledemonstrates three overloads of the <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method that find the last occurrence of a string within another string using different values of the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"system.string.LastIndexOfCmp#1\">// This code example demonstrates the \n// System.String.LastIndexOf(String, ..., StringComparison) methods.\n\nusing System;\nusing System.Threading;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string intro = &quot;Find the last occurrence of a character using different &quot; + \n                   &quot;values of StringComparison.&quot;;\n    string resultFmt = &quot;Comparison: {0,-28} Location: {1,3}&quot;;\n\n// Define a string to search for.\n// U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n    string CapitalAWithRing = &quot;\\u00c5&quot;; \n\n// Define a string to search. \n// The result of combining the characters LATIN SMALL LETTER A and COMBINING \n// RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n// LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n    string cat = &quot;A Cheshire c&quot; + &quot;\\u0061\\u030a&quot; + &quot;t&quot;;\n    int loc = 0;\n    StringComparison[] scValues = {\n        StringComparison.CurrentCulture,\n        StringComparison.CurrentCultureIgnoreCase,\n        StringComparison.InvariantCulture,\n        StringComparison.InvariantCultureIgnoreCase,\n        StringComparison.Ordinal,\n        StringComparison.OrdinalIgnoreCase };\n\n// Clear the screen and display an introduction.\n    Console.Clear();\n    Console.WriteLine(intro);\n\n// Display the current culture because culture affects the result. For example, \n// try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n\n    Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot; - {1}.&quot;, \n                       Thread.CurrentThread.CurrentCulture.Name,\n                       Thread.CurrentThread.CurrentCulture.DisplayName);\n\n// Display the string to search for and the string to search.\n    Console.WriteLine(&quot;Search for the string \\&quot;{0}\\&quot; in the string \\&quot;{1}\\&quot;&quot;, \n                       CapitalAWithRing, cat);\n    Console.WriteLine();\n\n// Note that in each of the following searches, we look for \n// LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n// LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n// the string was not found.\n// Search using different values of StringComparsion. Specify the start \n// index and count. \n\n    Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, cat.Length-1, cat.Length, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparsion. Specify the \n// start index. \n    Console.WriteLine(&quot;<br>Part 2: Start index is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, cat.Length-1, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparsion. \n    Console.WriteLine(&quot;<br>Part 3: Neither start index nor count is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n    }\n}\n\n/*\nNote: This code example was executed on a console whose user interface \nculture is &quot;en-US&quot; (English-United States).\n\nThis code example produces the following results:\n\nFind the last occurrence of a character using different values of StringComparison.\nThe current culture is &quot;en-US&quot; - English (United States).\nSearch for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n\nPart 1: Start index and count are specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 2: Start index is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 3: Neither start index nor count is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.string.LastIndexOfCmp#1\">&#39; This code example demonstrates the \n&#39; System.String.LastIndexOf(String, ..., StringComparison) methods.\n\nImports System\nImports System.Threading\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim intro As String = &quot;Find the last occurrence of a character using different &quot; &amp; _\n                              &quot;values of StringComparison.&quot;\n        Dim resultFmt As String = &quot;Comparison: {0,-28} Location: {1,3}&quot;\n        \n        &#39; Define a string to search for.\n        &#39; U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n        Dim CapitalAWithRing As String = &quot;&#197;&quot;\n        \n        &#39; Define a string to search. \n        &#39; The result of combining the characters LATIN SMALL LETTER A and COMBINING \n        &#39; RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n        Dim cat As String = &quot;A Cheshire c&quot; &amp; &quot;aÌŠ&quot; &amp; &quot;t&quot;\n        Dim loc As Integer = 0\n        Dim scValues As StringComparison() =  { _\n                        StringComparison.CurrentCulture, _\n                        StringComparison.CurrentCultureIgnoreCase, _\n                        StringComparison.InvariantCulture, _\n                        StringComparison.InvariantCultureIgnoreCase, _\n                        StringComparison.Ordinal, _\n                        StringComparison.OrdinalIgnoreCase }\n        Dim sc As StringComparison\n        \n        &#39; Clear the screen and display an introduction.\n        Console.Clear()\n        Console.WriteLine(intro)\n        \n        &#39; Display the current culture because culture affects the result. For example, \n        &#39; try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n        Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot; - {1}.&quot;, _\n                           Thread.CurrentThread.CurrentCulture.Name, _\n                           Thread.CurrentThread.CurrentCulture.DisplayName)\n        \n        &#39; Display the string to search for and the string to search.\n        Console.WriteLine(&quot;Search for the string &quot;&quot;{0}&quot;&quot; in the string &quot;&quot;{1}&quot;&quot;&quot;, _\n                           CapitalAWithRing, cat)\n        Console.WriteLine()\n        \n        &#39; Note that in each of the following searches, we look for \n        &#39; LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n        &#39; the string was not found.\n        &#39; Search using different values of StringComparsion. Specify the start \n        &#39; index and count. \n        Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, cat.Length - 1, cat.Length, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparsion. Specify the \n        &#39; start index. \n        Console.WriteLine(vbCrLf &amp; &quot;Part 2: Start index is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, cat.Length - 1, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparsion. \n        Console.WriteLine(vbCrLf &amp; &quot;Part 3: Neither start index nor count is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;Note: This code example was executed on a console whose user interface \n&#39;culture is &quot;en-US&quot; (English-United States).\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Find the last occurrence of a character using different values of StringComparison.\n&#39;The current culture is &quot;en-US&quot; - English (United States).\n&#39;Search for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n&#39;\n&#39;Part 1: Start index and count are specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 2: Start index is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 3: Neither start index nor count is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOf_System_String_System_Int32_System_Int32_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(String,Int32,Int32,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of character positions to examine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the rules for the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based starting index position of the <code>value</code> parameter if that string is found, or -1 if it is not found or if the current instance equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, the return value is the smaller of <code>startIndex</code> and the last index position in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and <code>startIndex</code> is greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> + 1 - <code>count</code> specifies a position that is not within this instance.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and <code>start</code> is less than -1 or greater than zero.  </p>\n<p> -or-  </p>\n<p> The current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> and <code>count</code> is greater than 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a valid <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero. That is, the first character in the string is at index zero and the last is at <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The search begins at the <code>startIndex</code> character position and proceeds backward until either <code>value</code> is found or <code>count</code> character positions have been examined. For example, if <code>startIndex</code> is <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> - 1, the method searches backward <code>count</code> characters from the last character in the string.  </p>\n<p> The <code>comparisonType</code> parameter specifies to search for the <code>value</code> parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following exampledemonstrates three overloads of the <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method that find the last occurrence of a string within another string using different values of the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"system.string.LastIndexOfCmp#1\">// This code example demonstrates the \n// System.String.LastIndexOf(String, ..., StringComparison) methods.\n\nusing System;\nusing System.Threading;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string intro = &quot;Find the last occurrence of a character using different &quot; + \n                   &quot;values of StringComparison.&quot;;\n    string resultFmt = &quot;Comparison: {0,-28} Location: {1,3}&quot;;\n\n// Define a string to search for.\n// U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n    string CapitalAWithRing = &quot;\\u00c5&quot;; \n\n// Define a string to search. \n// The result of combining the characters LATIN SMALL LETTER A and COMBINING \n// RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n// LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n    string cat = &quot;A Cheshire c&quot; + &quot;\\u0061\\u030a&quot; + &quot;t&quot;;\n    int loc = 0;\n    StringComparison[] scValues = {\n        StringComparison.CurrentCulture,\n        StringComparison.CurrentCultureIgnoreCase,\n        StringComparison.InvariantCulture,\n        StringComparison.InvariantCultureIgnoreCase,\n        StringComparison.Ordinal,\n        StringComparison.OrdinalIgnoreCase };\n\n// Clear the screen and display an introduction.\n    Console.Clear();\n    Console.WriteLine(intro);\n\n// Display the current culture because culture affects the result. For example, \n// try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n\n    Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n    Console.WriteLine(&quot;The current culture is \\&quot;{0}\\&quot; - {1}.&quot;, \n                       Thread.CurrentThread.CurrentCulture.Name,\n                       Thread.CurrentThread.CurrentCulture.DisplayName);\n\n// Display the string to search for and the string to search.\n    Console.WriteLine(&quot;Search for the string \\&quot;{0}\\&quot; in the string \\&quot;{1}\\&quot;&quot;, \n                       CapitalAWithRing, cat);\n    Console.WriteLine();\n\n// Note that in each of the following searches, we look for \n// LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n// LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n// the string was not found.\n// Search using different values of StringComparsion. Specify the start \n// index and count. \n\n    Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, cat.Length-1, cat.Length, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparsion. Specify the \n// start index. \n    Console.WriteLine(&quot;<br>Part 2: Start index is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, cat.Length-1, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n\n// Search using different values of StringComparsion. \n    Console.WriteLine(&quot;<br>Part 3: Neither start index nor count is specified.&quot;);\n    foreach (StringComparison sc in scValues)\n        {\n        loc = cat.LastIndexOf(CapitalAWithRing, sc);\n        Console.WriteLine(resultFmt, sc, loc);\n        }\n    }\n}\n\n/*\nNote: This code example was executed on a console whose user interface \nculture is &quot;en-US&quot; (English-United States).\n\nThis code example produces the following results:\n\nFind the last occurrence of a character using different values of StringComparison.\nThe current culture is &quot;en-US&quot; - English (United States).\nSearch for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n\nPart 1: Start index and count are specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 2: Start index is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\nPart 3: Neither start index nor count is specified.\nComparison: CurrentCulture               Location:  -1\nComparison: CurrentCultureIgnoreCase     Location:  12\nComparison: InvariantCulture             Location:  -1\nComparison: InvariantCultureIgnoreCase   Location:  12\nComparison: Ordinal                      Location:  -1\nComparison: OrdinalIgnoreCase            Location:  -1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.string.LastIndexOfCmp#1\">&#39; This code example demonstrates the \n&#39; System.String.LastIndexOf(String, ..., StringComparison) methods.\n\nImports System\nImports System.Threading\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim intro As String = &quot;Find the last occurrence of a character using different &quot; &amp; _\n                              &quot;values of StringComparison.&quot;\n        Dim resultFmt As String = &quot;Comparison: {0,-28} Location: {1,3}&quot;\n        \n        &#39; Define a string to search for.\n        &#39; U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n        Dim CapitalAWithRing As String = &quot;&#197;&quot;\n        \n        &#39; Define a string to search. \n        &#39; The result of combining the characters LATIN SMALL LETTER A and COMBINING \n        &#39; RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n        Dim cat As String = &quot;A Cheshire c&quot; &amp; &quot;aÌŠ&quot; &amp; &quot;t&quot;\n        Dim loc As Integer = 0\n        Dim scValues As StringComparison() =  { _\n                        StringComparison.CurrentCulture, _\n                        StringComparison.CurrentCultureIgnoreCase, _\n                        StringComparison.InvariantCulture, _\n                        StringComparison.InvariantCultureIgnoreCase, _\n                        StringComparison.Ordinal, _\n                        StringComparison.OrdinalIgnoreCase }\n        Dim sc As StringComparison\n        \n        &#39; Clear the screen and display an introduction.\n        Console.Clear()\n        Console.WriteLine(intro)\n        \n        &#39; Display the current culture because culture affects the result. For example, \n        &#39; try this code example with the &quot;sv-SE&quot; (Swedish-Sweden) culture.\n        Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;en-US&quot;)\n        Console.WriteLine(&quot;The current culture is &quot;&quot;{0}&quot;&quot; - {1}.&quot;, _\n                           Thread.CurrentThread.CurrentCulture.Name, _\n                           Thread.CurrentThread.CurrentCulture.DisplayName)\n        \n        &#39; Display the string to search for and the string to search.\n        Console.WriteLine(&quot;Search for the string &quot;&quot;{0}&quot;&quot; in the string &quot;&quot;{1}&quot;&quot;&quot;, _\n                           CapitalAWithRing, cat)\n        Console.WriteLine()\n        \n        &#39; Note that in each of the following searches, we look for \n        &#39; LATIN CAPITAL LETTER A WITH RING ABOVE in a string that contains \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE. A result value of -1 indicates \n        &#39; the string was not found.\n        &#39; Search using different values of StringComparsion. Specify the start \n        &#39; index and count. \n        Console.WriteLine(&quot;Part 1: Start index and count are specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, cat.Length - 1, cat.Length, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparsion. Specify the \n        &#39; start index. \n        Console.WriteLine(vbCrLf &amp; &quot;Part 2: Start index is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, cat.Length - 1, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n        \n        &#39; Search using different values of StringComparsion. \n        Console.WriteLine(vbCrLf &amp; &quot;Part 3: Neither start index nor count is specified.&quot;)\n        For Each sc In  scValues\n            loc = cat.LastIndexOf(CapitalAWithRing, sc)\n            Console.WriteLine(resultFmt, sc, loc)\n        Next sc\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;Note: This code example was executed on a console whose user interface \n&#39;culture is &quot;en-US&quot; (English-United States).\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Find the last occurrence of a character using different values of StringComparison.\n&#39;The current culture is &quot;en-US&quot; - English (United States).\n&#39;Search for the string &quot;&#197;&quot; in the string &quot;A Cheshire ca&#176;t&quot;\n&#39;\n&#39;Part 1: Start index and count are specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 2: Start index is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n&#39;Part 3: Neither start index nor count is specified.\n&#39;Comparison: CurrentCulture               Location:  -1\n&#39;Comparison: CurrentCultureIgnoreCase     Location:  12\n&#39;Comparison: InvariantCulture             Location:  -1\n&#39;Comparison: InvariantCultureIgnoreCase   Location:  12\n&#39;Comparison: Ordinal                      Location:  -1\n&#39;Comparison: OrdinalIgnoreCase            Location:  -1\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOfAny_System_Char___\">\r\n    \r\n            <a id=\"System_String_LastIndexOfAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOfAny(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOfAny (char[] anyOf);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>anyOf</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array containing one or more characters to seek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>anyOf</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero.  </p>\n<p> This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in <code>anyOf</code> is found or the first character position has been examined. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of the last occurrence of any character in the string &quot;is&quot; within another string.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.lastindexofany1#1\">// Sample for String::LastIndexOfAny(Char[])\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   String^ target = &quot;is&quot;;\n   array&lt;Char&gt;^anyOf = target-&gt;ToCharArray();\n   start = str-&gt;Length - 1;\n   Console::WriteLine( &quot;The last character occurrence  from position {0} to 0.&quot;, start );\n   Console::WriteLine( &quot;{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   Console::Write( &quot;A character in &#39;{0}&#39; occurs at position: &quot;, target );\n   at = str-&gt;LastIndexOfAny( anyOf );\n   if ( at &gt; -1 )\n      Console::Write( at );\n   else\n      Console::Write( &quot;(not found)&quot; );\n\n   Console::Write( &quot;{0}{0}{0}&quot;, Environment::NewLine );\n}\n\n/*\nThis example produces the following results:\nThe last character occurrence  from position 66 to 0.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;is&#39; occurs at position: 58\n\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.lastindexofany1#1\">// Sample for String.LastIndexOfAny(Char[])\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n    string target = &quot;is&quot;;\n    char[] anyOf = target.ToCharArray();\n\n    start = str.Length-1;\n    Console.WriteLine(&quot;The last character occurrence  from position {0} to 0.&quot;, start);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target);\n\n    at = str.LastIndexOfAny(anyOf);\n    if (at &gt; -1) \n        Console.Write(at);\n    else\n        Console.Write(&quot;(not found)&quot;);\n    Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine);\n    }\n}\n/*\nThis example produces the following results:\nThe last character occurrence  from position 66 to 0.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;is&#39; occurs at position: 58\n\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.lastindexofany1#1\">&#39; Sample for String.LastIndexOfAny(Char[])\nImports System\n _\n\nClass Sample\n   \n   Public Shared Sub Main()\n      \n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      Dim target As String = &quot;is&quot;\n      Dim anyOf As Char() = target.ToCharArray()\n      \n      start = str.Length - 1\n      Console.WriteLine(&quot;The last character occurrence  from position {0} to 0.&quot;, start)\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target)\n      \n      at = str.LastIndexOfAny(anyOf)\n      If at &gt; - 1 Then\n         Console.Write(at)\n      Else\n         Console.Write(&quot;(not found)&quot;)\n      End If\n      Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;The last character occurrence  from position 66 to 0.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;A character in &#39;is&#39; occurs at position: 58\n&#39;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOfAny_System_Char___System_Int32_\">\r\n    \r\n            <a id=\"System_String_LastIndexOfAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOfAny(Char[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOfAny (char[] anyOf, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>anyOf</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array containing one or more characters to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>anyOf</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> specifies a position that is not within this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero.  </p>\n<p> This method begins searching at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning until either a character in <code>anyOf</code> is found or the first character position has been examined. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of the last occurrence of any character in the string &quot;is&quot; within a substring of another string.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.lastindexofany2#1\">// Sample for String::LastIndexOfAny(Char, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   String^ target = &quot;is&quot;;\n   array&lt;Char&gt;^anyOf = target-&gt;ToCharArray();\n   start = (str-&gt;Length - 1) / 2;\n   Console::WriteLine( &quot;The last character occurrence  from position {0} to 0.&quot;, start );\n   Console::WriteLine( &quot;{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   Console::Write( &quot;A character in &#39;{0}&#39; occurs at position: &quot;, target );\n   at = str-&gt;LastIndexOfAny( anyOf, start );\n   if ( at &gt; -1 )\n      Console::Write( at );\n   else\n      Console::Write( &quot;(not found)&quot; );\n\n   Console::Write( &quot;{0}{0}{0}&quot;, Environment::NewLine );\n}\n\n/*\nThis example produces the following results:\nThe last character occurrence  from position 33 to 0.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;is&#39; occurs at position: 12\n\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.lastindexofany2#1\">// Sample for String.LastIndexOfAny(Char[], Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n    string target = &quot;is&quot;;\n    char[] anyOf = target.ToCharArray();\n\n    start = (str.Length-1)/2;\n    Console.WriteLine(&quot;The last character occurrence  from position {0} to 0.&quot;, start);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target);\n\n    at = str.LastIndexOfAny(anyOf, start);\n    if (at &gt; -1) \n        Console.Write(at);\n    else\n        Console.Write(&quot;(not found)&quot;);\n    Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine);\n    }\n}\n/*\nThis example produces the following results:\nThe last character occurrence  from position 33 to 0.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;is&#39; occurs at position: 12\n\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.lastindexofany2#1\">&#39; Sample for String.LastIndexOfAny(Char[], Int32)\nImports System\n _\n\nClass Sample\n   \n   Public Shared Sub Main()\n      \n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      Dim target As String = &quot;is&quot;\n      Dim anyOf As Char() = target.ToCharArray()\n      \n      start =(str.Length - 1) / 2\n      Console.WriteLine(&quot;The last character occurrence  from position {0} to 0.&quot;, start)\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target)\n      \n      at = str.LastIndexOfAny(anyOf, start)\n      If at &gt; - 1 Then\n         Console.Write(at)\n      Else\n         Console.Write(&quot;(not found)&quot;)\n      End If\n      Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;The last character occurrence  from position 33 to 0.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;A character in &#39;is&#39; occurs at position: 12\n&#39;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_LastIndexOfAny_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_LastIndexOfAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOfAny(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LastIndexOfAny (char[] anyOf, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>anyOf</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array containing one or more characters to seek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search starting position. The search proceeds from <code>startIndex</code> toward the beginning of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of character positions to examine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index position of the last occurrence in this instance where any character in <code>anyOf</code> was found; -1 if no character in <code>anyOf</code> was found or if the current instance equals <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>anyOf</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>count</code> or <code>startIndex</code> is negative.  </p>\n<p> -or-  </p>\n<p> The current instance does not equal <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, and <code>startIndex</code> minus <code>count</code> + 1 is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Index numbering starts from zero.  </p>\n<p> This method begins searching at the <code>startIndex</code> character position of this instance and proceeds backward toward the beginning until either a character in <code>anyOf</code> is found or <code>count</code> character positions have been examined. The search is case-sensitive.  </p>\n<p> This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same. To perform a culture-sensitive search, use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method, where a Unicode scalar value representing a precomposed character, such as the ligature &quot;Ã†&quot; (U+00C6), might be considered equivalent to any occurrence of the character&#39;s components in the correct sequence, such as &quot;AE&quot; (U+0041, U+0045), depending on the culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example finds the index of the last occurrence of any character in the string &quot;aid&quot; within a substring of another string.  </p>\n<pre><code class=\"lang-cs\" name=\"string.lastindexofany3#1\">// Sample for String.LastIndexOfAny(Char[], Int32, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n\n    string br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n    string br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n    string str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n    int start;\n    int at;\n    int count;\n    string target = &quot;aid&quot;;\n    char[] anyOf = target.ToCharArray();\n\n    start = ((str.Length-1)*2)/3;\n    count = (str.Length-1)/3;\n    Console.WriteLine(&quot;The last character occurrence from position {0} for {1} characters.&quot;, start, count);\n    Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str);\n    Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target);\n\n    at = str.LastIndexOfAny(anyOf, start, count);\n    if (at &gt; -1) \n        Console.Write(at);\n    else\n        Console.Write(&quot;(not found)&quot;);\n    Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine);\n    }\n}\n/*\nThis example produces the following results:\nThe last character occurrence from position 44 for 22 characters.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;aid&#39; occurs at position: 27\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.lastindexofany3#1\">// Sample for String::LastIndexOfAny(Char[], Int32, Int32)\nusing namespace System;\nint main()\n{\n   String^ br1 = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;;\n   String^ br2 = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;;\n   String^ str = &quot;Now is the time for all good men to come to the aid of their party.&quot;;\n   int start;\n   int at;\n   int count;\n   String^ target = &quot;aid&quot;;\n   array&lt;Char&gt;^anyOf = target-&gt;ToCharArray();\n   start = ((str-&gt;Length - 1) * 2) / 3;\n   count = (str-&gt;Length - 1) / 3;\n   Console::WriteLine( &quot;The last character occurrence from position {0} for {1} characters.&quot;, start, count );\n   Console::WriteLine( &quot;{1}{0}{2}{0}{3}{0}&quot;, Environment::NewLine, br1, br2, str );\n   Console::Write( &quot;A character in &#39;{0}&#39; occurs at position: &quot;, target );\n   at = str-&gt;LastIndexOfAny( anyOf, start, count );\n   if ( at &gt; -1 )\n      Console::Write( at );\n   else\n      Console::Write( &quot;(not found)&quot; );\n\n   Console::Write( &quot;{0}{0}{0}&quot;, Environment::NewLine );\n}\n\n/*\nThis example produces the following results:\nThe last character occurrence from position 44 for 22 characters.\n0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n0123456789012345678901234567890123456789012345678901234567890123456\nNow is the time for all good men to come to the aid of their party.\n\nA character in &#39;aid&#39; occurs at position: 27\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.lastindexofany3#1\">&#39; Sample for String.LastIndexOfAny(Char[], Int32, Int32)\nImports System\n _\n\nClass Sample\n   \n   Public Shared Sub Main()\n      \n      Dim br1 As String = &quot;0----+----1----+----2----+----3----+----4----+----5----+----6----+-&quot;\n      Dim br2 As String = &quot;0123456789012345678901234567890123456789012345678901234567890123456&quot;\n      Dim str As String = &quot;Now is the time for all good men to come to the aid of their party.&quot;\n      Dim start As Integer\n      Dim at As Integer\n      Dim count As Integer\n      Dim target As String = &quot;aid&quot;\n      Dim anyOf As Char() = target.ToCharArray()\n      \n      start =(str.Length - 1) * 2 / 3\n      count =(str.Length - 1) / 3\n      Console.WriteLine(&quot;The last character occurrence from position {0} for {1} characters.&quot;, start, count)\n      Console.WriteLine(&quot;{1}{0}{2}{0}{3}{0}&quot;, Environment.NewLine, br1, br2, str)\n      Console.Write(&quot;A character in &#39;{0}&#39; occurs at position: &quot;, target)\n      \n      at = str.LastIndexOfAny(anyOf, start, count)\n      If at &gt; - 1 Then\n         Console.Write(at)\n      Else\n         Console.Write(&quot;(not found)&quot;)\n      End If\n      Console.Write(&quot;{0}{0}{0}&quot;, Environment.NewLine)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;The last character occurrence from position 44 for 22 characters.\n&#39;0----+----1----+----2----+----3----+----4----+----5----+----6----+-\n&#39;0123456789012345678901234567890123456789012345678901234567890123456\n&#39;Now is the time for all good men to come to the aid of their party.\n&#39;\n&#39;A character in &#39;aid&#39; occurs at position: 27\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Normalize\">\r\n    \r\n            <a id=\"System_String_Normalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Normalize()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Normalize ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current instance contains invalid Unicode characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. For example, any of the following code points can represent the letter &quot;áº¯&quot;:  </p>\n<ul>\n<li><p>U+1EAF  </p>\n</li>\n<li><p>U+0103 U+0301  </p>\n</li>\n<li><p>U+0061 U+0306 U+0301  </p>\n<p>The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  </p>\n<p>The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.  </p>\n<p>To normalize and compare two strings, do the following:  </p>\n</li>\n</ul>\n<ol>\n<li><p>Obtain the strings to be compared from an input source, such as a file or a user input device.  </p>\n</li>\n<li><p>Call the Normalize method to normalize the strings to normalization form C.  </p>\n</li>\n<li><p>To compare two strings, call a method that supports ordinal string comparison, such as the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method, and supply a value of <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>as the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> argument. To sort an array of normalized strings, pass a <code>comparer</code> value of <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Ordinal_\" data-linktype=\"relative-path\">Ordinal</a> or <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_OrdinalIgnoreCase_\" data-linktype=\"relative-path\">OrdinalIgnoreCase</a> to an appropriate overload of <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a>.  </p>\n</li>\n<li><p>Emit the strings in the sorted output based on the order indicated by the previous step.  </p>\n<p>For a description of supported Unicode normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.  </p>\n<pre><code class=\"lang-vb\" name=\"string.normalize#1\">Imports System.Text\n\nClass Example\n   Public Shared Sub Main()\n      &#39; Character c; combining characters acute and cedilla; character 3/4\n      Dim s1 = New [String](New Char() {ChrW(&amp;H0063), ChrW(&amp;H0301), ChrW(&amp;H0327), ChrW(&amp;H00BE)})\n      Dim s2 As String = Nothing\n      Dim divider = New [String](&quot;-&quot;c, 80)\n      divider = [String].Concat(Environment.NewLine, divider, Environment.NewLine)\n      \n      Show(&quot;s1&quot;, s1)\n      Console.WriteLine()\n      Console.WriteLine(&quot;U+0063 = LATIN SMALL LETTER C&quot;)\n      Console.WriteLine(&quot;U+0301 = COMBINING ACUTE ACCENT&quot;)\n      Console.WriteLine(&quot;U+0327 = COMBINING CEDILLA&quot;)\n      Console.WriteLine(&quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot;)\n\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, s1.IsNormalized())\n      Console.WriteLine(&quot;A2) Is s1 normalized to Form C?:  {0}&quot;, s1.IsNormalized(NormalizationForm.FormC))\n      Console.WriteLine(&quot;A3) Is s1 normalized to Form D?:  {0}&quot;, s1.IsNormalized(NormalizationForm.FormD))\n      Console.WriteLine(&quot;A4) Is s1 normalized to Form KC?: {0}&quot;, s1.IsNormalized(NormalizationForm.FormKC))\n      Console.WriteLine(&quot;A5) Is s1 normalized to Form KD?: {0}&quot;, s1.IsNormalized(NormalizationForm.FormKD))\n      \n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Set string s2 to each normalized form of string s1.&quot;)\n      Console.WriteLine()\n      Console.WriteLine(&quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot;)\n      Console.WriteLine(&quot;U+0033 = DIGIT THREE&quot;)\n      Console.WriteLine(&quot;U+2044 = FRACTION SLASH&quot;)\n      Console.WriteLine(&quot;U+0034 = DIGIT FOUR&quot;)\n      Console.WriteLine(divider)\n      \n      s2 = s1.Normalize()\n      Console.Write(&quot;B1) Is s2 normalized to the default form (Form C)?: &quot;)\n      Console.WriteLine(s2.IsNormalized())\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormC)\n      Console.Write(&quot;B2) Is s2 normalized to Form C?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormD)\n      Console.Write(&quot;B3) Is s2 normalized to Form D?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormKC)\n      Console.Write(&quot;B4) Is s2 normalized to Form KC?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormKD)\n      Console.Write(&quot;B5) Is s2 normalized to Form KD?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n   End Sub \n   \n   Private Shared Sub Show(title As String, s As String)\n      Console.Write(&quot;Characters in string {0} = &quot;, title)\n      For Each x As Char In s\n         Console.Write(&quot;{0:X4} &quot;, AscW(x))\n      Next \n      Console.WriteLine()\n   End Sub \nEnd Class \n&#39;This example produces the following results:\n&#39;\n&#39;Characters in string s1 = 0063 0301 0327 00BE\n&#39;\n&#39;U+0063 = LATIN SMALL LETTER C\n&#39;U+0301 = COMBINING ACUTE ACCENT\n&#39;U+0327 = COMBINING CEDILLA\n&#39;U+00BE = VULGAR FRACTION THREE QUARTERS\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;A1) Is s1 normalized to the default form (Form C)?: False\n&#39;A2) Is s1 normalized to Form C?:  False\n&#39;A3) Is s1 normalized to Form D?:  False\n&#39;A4) Is s1 normalized to Form KC?: False\n&#39;A5) Is s1 normalized to Form KD?: False\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;Set string s2 to each normalized form of string s1.\n&#39;\n&#39;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\n&#39;U+0033 = DIGIT THREE\n&#39;U+2044 = FRACTION SLASH\n&#39;U+0034 = DIGIT FOUR\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;B1) Is s2 normalized to the default form (Form C)?: True\n&#39;Characters in string s2 = 1E09 00BE\n&#39;\n&#39;B2) Is s2 normalized to Form C?: True\n&#39;Characters in string s2 = 1E09 00BE\n&#39;\n&#39;B3) Is s2 normalized to Form D?: True\n&#39;Characters in string s2 = 0063 0327 0301 00BE\n&#39;\n&#39;B4) Is s2 normalized to Form KC?: True\n&#39;Characters in string s2 = 1E09 0033 2044 0034\n&#39;\n&#39;B5) Is s2 normalized to Form KD?: True\n&#39;Characters in string s2 = 0063 0327 0301 0033 2044 0034\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.normalize#1\">using namespace System;\nusing namespace System::Text;\n\nvoid Show( String^ title, String^ s )\n{\n   Console::Write( &quot;Characters in string {0} = &quot;, title );\n   for each (short x in s) {\n      Console::Write(&quot;{0:X4} &quot;, x);\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Character c; combining characters acute and cedilla; character 3/4\n   array&lt;Char&gt;^temp0 = {L&#39;c&#39;,L&#39;\\u0301&#39;,L&#39;\\u0327&#39;,L&#39;\\u00BE&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ s2 = nullptr;\n   String^ divider = gcnew String( &#39;-&#39;,80 );\n   divider = String::Concat( Environment::NewLine, divider, Environment::NewLine );\n\n   Show( &quot;s1&quot;, s1 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;U+0063 = LATIN SMALL LETTER C&quot; );\n   Console::WriteLine( &quot;U+0301 = COMBINING ACUTE ACCENT&quot; );\n   Console::WriteLine( &quot;U+0327 = COMBINING CEDILLA&quot; );\n   Console::WriteLine( &quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot; );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, s1-&gt;IsNormalized() );\n   Console::WriteLine( &quot;A2) Is s1 normalized to Form C?:  {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormC ) );\n   Console::WriteLine( &quot;A3) Is s1 normalized to Form D?:  {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormD ) );\n   Console::WriteLine( &quot;A4) Is s1 normalized to Form KC?: {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormKC ) );\n   Console::WriteLine( &quot;A5) Is s1 normalized to Form KD?: {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormKD ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Set string s2 to each normalized form of string s1.&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot; );\n   Console::WriteLine( &quot;U+0033 = DIGIT THREE&quot; );\n   Console::WriteLine( &quot;U+2044 = FRACTION SLASH&quot; );\n   Console::WriteLine( &quot;U+0034 = DIGIT FOUR&quot; );\n   Console::WriteLine( divider );\n   s2 = s1-&gt;Normalize();\n   Console::Write( &quot;B1) Is s2 normalized to the default form (Form C)?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized() );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormC );\n   Console::Write( &quot;B2) Is s2 normalized to Form C?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormC ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormD );\n   Console::Write( &quot;B3) Is s2 normalized to Form D?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormD ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormKC );\n   Console::Write( &quot;B4) Is s2 normalized to Form KC?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormKC ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormKD );\n   Console::Write( &quot;B5) Is s2 normalized to Form KD?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormKD ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\nCharacters in string s1 = 0063 0301 0327 00BE\n\nU+0063 = LATIN SMALL LETTER C\nU+0301 = COMBINING ACUTE ACCENT\nU+0327 = COMBINING CEDILLA\nU+00BE = VULGAR FRACTION THREE QUARTERS\n\n--------------------------------------------------------------------------------\n\nA1) Is s1 normalized to the default form (Form C)?: False\nA2) Is s1 normalized to Form C?:  False\nA3) Is s1 normalized to Form D?:  False\nA4) Is s1 normalized to Form KC?: False\nA5) Is s1 normalized to Form KD?: False\n\n--------------------------------------------------------------------------------\n\nSet string s2 to each normalized form of string s1.\n\nU+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\nU+0033 = DIGIT THREE\nU+2044 = FRACTION SLASH\nU+0034 = DIGIT FOUR\n\n--------------------------------------------------------------------------------\n\nB1) Is s2 normalized to the default form (Form C)?: True\nCharacters in string s2 = 1E09 00BE\n\nB2) Is s2 normalized to Form C?: True\nCharacters in string s2 = 1E09 00BE\n\nB3) Is s2 normalized to Form D?: True\nCharacters in string s2 = 0063 0327 0301 00BE\n\nB4) Is s2 normalized to Form KC?: True\nCharacters in string s2 = 1E09 0033 2044 0034\n\nB5) Is s2 normalized to Form KD?: True\nCharacters in string s2 = 0063 0327 0301 0033 2044 0034\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.normalize#1\">using System;\nusing System.Text;\n\nclass Example\n{\n    public static void Main() \n    {\n       // Character c; combining characters acute and cedilla; character 3/4\n       string s1 = new String( new char[] {&#39;\\u0063&#39;, &#39;\\u0301&#39;, &#39;\\u0327&#39;, &#39;\\u00BE&#39;});\n       string s2 = null;\n       string divider = new String(&#39;-&#39;, 80);\n       divider = String.Concat(Environment.NewLine, divider, Environment.NewLine);\n   \n       Show(&quot;s1&quot;, s1);\n       Console.WriteLine();\n       Console.WriteLine(&quot;U+0063 = LATIN SMALL LETTER C&quot;);\n       Console.WriteLine(&quot;U+0301 = COMBINING ACUTE ACCENT&quot;);\n       Console.WriteLine(&quot;U+0327 = COMBINING CEDILLA&quot;);\n       Console.WriteLine(&quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot;);\n       Console.WriteLine(divider);\n   \n       Console.WriteLine(&quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, \n                                    s1.IsNormalized());\n       Console.WriteLine(&quot;A2) Is s1 normalized to Form C?:  {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormC));\n       Console.WriteLine(&quot;A3) Is s1 normalized to Form D?:  {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormD));\n       Console.WriteLine(&quot;A4) Is s1 normalized to Form KC?: {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormKC));\n       Console.WriteLine(&quot;A5) Is s1 normalized to Form KD?: {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormKD));\n   \n       Console.WriteLine(divider);\n   \n       Console.WriteLine(&quot;Set string s2 to each normalized form of string s1.&quot;);\n       Console.WriteLine();\n       Console.WriteLine(&quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot;);\n       Console.WriteLine(&quot;U+0033 = DIGIT THREE&quot;);\n       Console.WriteLine(&quot;U+2044 = FRACTION SLASH&quot;);\n       Console.WriteLine(&quot;U+0034 = DIGIT FOUR&quot;);\n       Console.WriteLine(divider);\n   \n       s2 = s1.Normalize();\n       Console.Write(&quot;B1) Is s2 normalized to the default form (Form C)?: &quot;);\n       Console.WriteLine(s2.IsNormalized());\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormC);\n       Console.Write(&quot;B2) Is s2 normalized to Form C?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormD);\n       Console.Write(&quot;B3) Is s2 normalized to Form D?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormKC);\n       Console.Write(&quot;B4) Is s2 normalized to Form KC?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormKD);\n       Console.Write(&quot;B5) Is s2 normalized to Form KD?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n    }\n\n    private static void Show(string title, string s)\n    {\n       Console.Write(&quot;Characters in string {0} = &quot;, title);\n       foreach(short x in s) {\n           Console.Write(&quot;{0:X4} &quot;, x);\n       }\n       Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nCharacters in string s1 = 0063 0301 0327 00BE\n\nU+0063 = LATIN SMALL LETTER C\nU+0301 = COMBINING ACUTE ACCENT\nU+0327 = COMBINING CEDILLA\nU+00BE = VULGAR FRACTION THREE QUARTERS\n\n--------------------------------------------------------------------------------\n\nA1) Is s1 normalized to the default form (Form C)?: False\nA2) Is s1 normalized to Form C?:  False\nA3) Is s1 normalized to Form D?:  False\nA4) Is s1 normalized to Form KC?: False\nA5) Is s1 normalized to Form KD?: False\n\n--------------------------------------------------------------------------------\n\nSet string s2 to each normalized form of string s1.\n\nU+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\nU+0033 = DIGIT THREE\nU+2044 = FRACTION SLASH\nU+0034 = DIGIT FOUR\n\n--------------------------------------------------------------------------------\n\nB1) Is s2 normalized to the default form (Form C)?: True\nCharacters in string s2 = 1E09 00BE\n\nB2) Is s2 normalized to Form C?: True\nCharacters in string s2 = 1E09 00BE\n\nB3) Is s2 normalized to Form D?: True\nCharacters in string s2 = 0063 0327 0301 00BE\n\nB4) Is s2 normalized to Form KC?: True\nCharacters in string s2 = 1E09 0033 2044 0034\n\nB5) Is s2 normalized to Form KD?: True\nCharacters in string s2 = 0063 0327 0301 0033 2044 0034\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Normalize_System_Text_NormalizationForm_\">\r\n    \r\n            <a id=\"System_String_Normalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Normalize(NormalizationForm)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Normalize (System.Text.NormalizationForm normalizationForm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>normalizationForm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">NormalizationForm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode normalization form.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <code>normalizationForm</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current instance contains invalid Unicode characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.  </p>\n<p> The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. Normalization can be performed with several algorithms, called normalization forms, that obey different rules. The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.  </p>\n<p> To normalize and compare two strings, do the following:  </p>\n<ol>\n<li><p>Obtain the strings to be compared from an input source, such as a file or a user input device.  </p>\n</li>\n<li><p>Call the Normalize method to normalize the strings to a specified normalization form.  </p>\n</li>\n<li><p>To compare two strings, call a method that supports ordinal string comparison, such as the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_StringComparison_\" data-linktype=\"relative-path\">Compare(String,String,StringComparison)</a> method, and supply a value of <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> as the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> argument. To sort an array of normalized strings, pass a <code>comparer</code> value of <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_Ordinal_\" data-linktype=\"relative-path\">Ordinal</a> or <a class=\"xref\" href=\"system.stringcomparer#System_StringComparer_OrdinalIgnoreCase_\" data-linktype=\"relative-path\">OrdinalIgnoreCase</a> to an appropriate overload of <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a>.  </p>\n</li>\n<li><p>Emit the strings in the sorted output based on the order indicated by the previous step.  </p>\n<p>For a description of supported Unicode normalization forms, see <a class=\"xref\" href=\"system.text.normalizationform\" data-linktype=\"relative-path\">System.Text.NormalizationForm</a>.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.  </p>\n<pre><code class=\"lang-vb\" name=\"string.normalize#1\">Imports System.Text\n\nClass Example\n   Public Shared Sub Main()\n      &#39; Character c; combining characters acute and cedilla; character 3/4\n      Dim s1 = New [String](New Char() {ChrW(&amp;H0063), ChrW(&amp;H0301), ChrW(&amp;H0327), ChrW(&amp;H00BE)})\n      Dim s2 As String = Nothing\n      Dim divider = New [String](&quot;-&quot;c, 80)\n      divider = [String].Concat(Environment.NewLine, divider, Environment.NewLine)\n      \n      Show(&quot;s1&quot;, s1)\n      Console.WriteLine()\n      Console.WriteLine(&quot;U+0063 = LATIN SMALL LETTER C&quot;)\n      Console.WriteLine(&quot;U+0301 = COMBINING ACUTE ACCENT&quot;)\n      Console.WriteLine(&quot;U+0327 = COMBINING CEDILLA&quot;)\n      Console.WriteLine(&quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot;)\n\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, s1.IsNormalized())\n      Console.WriteLine(&quot;A2) Is s1 normalized to Form C?:  {0}&quot;, s1.IsNormalized(NormalizationForm.FormC))\n      Console.WriteLine(&quot;A3) Is s1 normalized to Form D?:  {0}&quot;, s1.IsNormalized(NormalizationForm.FormD))\n      Console.WriteLine(&quot;A4) Is s1 normalized to Form KC?: {0}&quot;, s1.IsNormalized(NormalizationForm.FormKC))\n      Console.WriteLine(&quot;A5) Is s1 normalized to Form KD?: {0}&quot;, s1.IsNormalized(NormalizationForm.FormKD))\n      \n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Set string s2 to each normalized form of string s1.&quot;)\n      Console.WriteLine()\n      Console.WriteLine(&quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot;)\n      Console.WriteLine(&quot;U+0033 = DIGIT THREE&quot;)\n      Console.WriteLine(&quot;U+2044 = FRACTION SLASH&quot;)\n      Console.WriteLine(&quot;U+0034 = DIGIT FOUR&quot;)\n      Console.WriteLine(divider)\n      \n      s2 = s1.Normalize()\n      Console.Write(&quot;B1) Is s2 normalized to the default form (Form C)?: &quot;)\n      Console.WriteLine(s2.IsNormalized())\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormC)\n      Console.Write(&quot;B2) Is s2 normalized to Form C?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormD)\n      Console.Write(&quot;B3) Is s2 normalized to Form D?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormKC)\n      Console.Write(&quot;B4) Is s2 normalized to Form KC?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n      \n      s2 = s1.Normalize(NormalizationForm.FormKD)\n      Console.Write(&quot;B5) Is s2 normalized to Form KD?: &quot;)\n      Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD))\n      Show(&quot;s2&quot;, s2)\n      Console.WriteLine()\n   End Sub \n   \n   Private Shared Sub Show(title As String, s As String)\n      Console.Write(&quot;Characters in string {0} = &quot;, title)\n      For Each x As Char In s\n         Console.Write(&quot;{0:X4} &quot;, AscW(x))\n      Next \n      Console.WriteLine()\n   End Sub \nEnd Class \n&#39;This example produces the following results:\n&#39;\n&#39;Characters in string s1 = 0063 0301 0327 00BE\n&#39;\n&#39;U+0063 = LATIN SMALL LETTER C\n&#39;U+0301 = COMBINING ACUTE ACCENT\n&#39;U+0327 = COMBINING CEDILLA\n&#39;U+00BE = VULGAR FRACTION THREE QUARTERS\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;A1) Is s1 normalized to the default form (Form C)?: False\n&#39;A2) Is s1 normalized to Form C?:  False\n&#39;A3) Is s1 normalized to Form D?:  False\n&#39;A4) Is s1 normalized to Form KC?: False\n&#39;A5) Is s1 normalized to Form KD?: False\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;Set string s2 to each normalized form of string s1.\n&#39;\n&#39;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\n&#39;U+0033 = DIGIT THREE\n&#39;U+2044 = FRACTION SLASH\n&#39;U+0034 = DIGIT FOUR\n&#39;\n&#39;--------------------------------------------------------------------------------\n&#39;\n&#39;B1) Is s2 normalized to the default form (Form C)?: True\n&#39;Characters in string s2 = 1E09 00BE\n&#39;\n&#39;B2) Is s2 normalized to Form C?: True\n&#39;Characters in string s2 = 1E09 00BE\n&#39;\n&#39;B3) Is s2 normalized to Form D?: True\n&#39;Characters in string s2 = 0063 0327 0301 00BE\n&#39;\n&#39;B4) Is s2 normalized to Form KC?: True\n&#39;Characters in string s2 = 1E09 0033 2044 0034\n&#39;\n&#39;B5) Is s2 normalized to Form KD?: True\n&#39;Characters in string s2 = 0063 0327 0301 0033 2044 0034\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.normalize#1\">using namespace System;\nusing namespace System::Text;\n\nvoid Show( String^ title, String^ s )\n{\n   Console::Write( &quot;Characters in string {0} = &quot;, title );\n   for each (short x in s) {\n      Console::Write(&quot;{0:X4} &quot;, x);\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Character c; combining characters acute and cedilla; character 3/4\n   array&lt;Char&gt;^temp0 = {L&#39;c&#39;,L&#39;\\u0301&#39;,L&#39;\\u0327&#39;,L&#39;\\u00BE&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ s2 = nullptr;\n   String^ divider = gcnew String( &#39;-&#39;,80 );\n   divider = String::Concat( Environment::NewLine, divider, Environment::NewLine );\n\n   Show( &quot;s1&quot;, s1 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;U+0063 = LATIN SMALL LETTER C&quot; );\n   Console::WriteLine( &quot;U+0301 = COMBINING ACUTE ACCENT&quot; );\n   Console::WriteLine( &quot;U+0327 = COMBINING CEDILLA&quot; );\n   Console::WriteLine( &quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot; );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, s1-&gt;IsNormalized() );\n   Console::WriteLine( &quot;A2) Is s1 normalized to Form C?:  {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormC ) );\n   Console::WriteLine( &quot;A3) Is s1 normalized to Form D?:  {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormD ) );\n   Console::WriteLine( &quot;A4) Is s1 normalized to Form KC?: {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormKC ) );\n   Console::WriteLine( &quot;A5) Is s1 normalized to Form KD?: {0}&quot;, s1-&gt;IsNormalized( NormalizationForm::FormKD ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Set string s2 to each normalized form of string s1.&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot; );\n   Console::WriteLine( &quot;U+0033 = DIGIT THREE&quot; );\n   Console::WriteLine( &quot;U+2044 = FRACTION SLASH&quot; );\n   Console::WriteLine( &quot;U+0034 = DIGIT FOUR&quot; );\n   Console::WriteLine( divider );\n   s2 = s1-&gt;Normalize();\n   Console::Write( &quot;B1) Is s2 normalized to the default form (Form C)?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized() );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormC );\n   Console::Write( &quot;B2) Is s2 normalized to Form C?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormC ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormD );\n   Console::Write( &quot;B3) Is s2 normalized to Form D?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormD ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormKC );\n   Console::Write( &quot;B4) Is s2 normalized to Form KC?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormKC ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n   s2 = s1-&gt;Normalize( NormalizationForm::FormKD );\n   Console::Write( &quot;B5) Is s2 normalized to Form KD?: &quot; );\n   Console::WriteLine( s2-&gt;IsNormalized( NormalizationForm::FormKD ) );\n   Show( &quot;s2&quot;, s2 );\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\nCharacters in string s1 = 0063 0301 0327 00BE\n\nU+0063 = LATIN SMALL LETTER C\nU+0301 = COMBINING ACUTE ACCENT\nU+0327 = COMBINING CEDILLA\nU+00BE = VULGAR FRACTION THREE QUARTERS\n\n--------------------------------------------------------------------------------\n\nA1) Is s1 normalized to the default form (Form C)?: False\nA2) Is s1 normalized to Form C?:  False\nA3) Is s1 normalized to Form D?:  False\nA4) Is s1 normalized to Form KC?: False\nA5) Is s1 normalized to Form KD?: False\n\n--------------------------------------------------------------------------------\n\nSet string s2 to each normalized form of string s1.\n\nU+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\nU+0033 = DIGIT THREE\nU+2044 = FRACTION SLASH\nU+0034 = DIGIT FOUR\n\n--------------------------------------------------------------------------------\n\nB1) Is s2 normalized to the default form (Form C)?: True\nCharacters in string s2 = 1E09 00BE\n\nB2) Is s2 normalized to Form C?: True\nCharacters in string s2 = 1E09 00BE\n\nB3) Is s2 normalized to Form D?: True\nCharacters in string s2 = 0063 0327 0301 00BE\n\nB4) Is s2 normalized to Form KC?: True\nCharacters in string s2 = 1E09 0033 2044 0034\n\nB5) Is s2 normalized to Form KD?: True\nCharacters in string s2 = 0063 0327 0301 0033 2044 0034\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"string.normalize#1\">using System;\nusing System.Text;\n\nclass Example\n{\n    public static void Main() \n    {\n       // Character c; combining characters acute and cedilla; character 3/4\n       string s1 = new String( new char[] {&#39;\\u0063&#39;, &#39;\\u0301&#39;, &#39;\\u0327&#39;, &#39;\\u00BE&#39;});\n       string s2 = null;\n       string divider = new String(&#39;-&#39;, 80);\n       divider = String.Concat(Environment.NewLine, divider, Environment.NewLine);\n   \n       Show(&quot;s1&quot;, s1);\n       Console.WriteLine();\n       Console.WriteLine(&quot;U+0063 = LATIN SMALL LETTER C&quot;);\n       Console.WriteLine(&quot;U+0301 = COMBINING ACUTE ACCENT&quot;);\n       Console.WriteLine(&quot;U+0327 = COMBINING CEDILLA&quot;);\n       Console.WriteLine(&quot;U+00BE = VULGAR FRACTION THREE QUARTERS&quot;);\n       Console.WriteLine(divider);\n   \n       Console.WriteLine(&quot;A1) Is s1 normalized to the default form (Form C)?: {0}&quot;, \n                                    s1.IsNormalized());\n       Console.WriteLine(&quot;A2) Is s1 normalized to Form C?:  {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormC));\n       Console.WriteLine(&quot;A3) Is s1 normalized to Form D?:  {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormD));\n       Console.WriteLine(&quot;A4) Is s1 normalized to Form KC?: {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormKC));\n       Console.WriteLine(&quot;A5) Is s1 normalized to Form KD?: {0}&quot;, \n                                    s1.IsNormalized(NormalizationForm.FormKD));\n   \n       Console.WriteLine(divider);\n   \n       Console.WriteLine(&quot;Set string s2 to each normalized form of string s1.&quot;);\n       Console.WriteLine();\n       Console.WriteLine(&quot;U+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE&quot;);\n       Console.WriteLine(&quot;U+0033 = DIGIT THREE&quot;);\n       Console.WriteLine(&quot;U+2044 = FRACTION SLASH&quot;);\n       Console.WriteLine(&quot;U+0034 = DIGIT FOUR&quot;);\n       Console.WriteLine(divider);\n   \n       s2 = s1.Normalize();\n       Console.Write(&quot;B1) Is s2 normalized to the default form (Form C)?: &quot;);\n       Console.WriteLine(s2.IsNormalized());\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormC);\n       Console.Write(&quot;B2) Is s2 normalized to Form C?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormC));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormD);\n       Console.Write(&quot;B3) Is s2 normalized to Form D?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormD));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormKC);\n       Console.Write(&quot;B4) Is s2 normalized to Form KC?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKC));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n   \n       s2 = s1.Normalize(NormalizationForm.FormKD);\n       Console.Write(&quot;B5) Is s2 normalized to Form KD?: &quot;);\n       Console.WriteLine(s2.IsNormalized(NormalizationForm.FormKD));\n       Show(&quot;s2&quot;, s2);\n       Console.WriteLine();\n    }\n\n    private static void Show(string title, string s)\n    {\n       Console.Write(&quot;Characters in string {0} = &quot;, title);\n       foreach(short x in s) {\n           Console.Write(&quot;{0:X4} &quot;, x);\n       }\n       Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nCharacters in string s1 = 0063 0301 0327 00BE\n\nU+0063 = LATIN SMALL LETTER C\nU+0301 = COMBINING ACUTE ACCENT\nU+0327 = COMBINING CEDILLA\nU+00BE = VULGAR FRACTION THREE QUARTERS\n\n--------------------------------------------------------------------------------\n\nA1) Is s1 normalized to the default form (Form C)?: False\nA2) Is s1 normalized to Form C?:  False\nA3) Is s1 normalized to Form D?:  False\nA4) Is s1 normalized to Form KC?: False\nA5) Is s1 normalized to Form KD?: False\n\n--------------------------------------------------------------------------------\n\nSet string s2 to each normalized form of string s1.\n\nU+1E09 = LATIN SMALL LETTER C WITH CEDILLA AND ACUTE\nU+0033 = DIGIT THREE\nU+2044 = FRACTION SLASH\nU+0034 = DIGIT FOUR\n\n--------------------------------------------------------------------------------\n\nB1) Is s2 normalized to the default form (Form C)?: True\nCharacters in string s2 = 1E09 00BE\n\nB2) Is s2 normalized to Form C?: True\nCharacters in string s2 = 1E09 00BE\n\nB3) Is s2 normalized to Form D?: True\nCharacters in string s2 = 0063 0327 0301 00BE\n\nB4) Is s2 normalized to Form KC?: True\nCharacters in string s2 = 1E09 0033 2044 0034\n\nB5) Is s2 normalized to Form KD?: True\nCharacters in string s2 = 0063 0327 0301 0033 2044 0034\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_PadLeft_System_Int32_\">\r\n    \r\n            <a id=\"System_String_PadLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PadLeft(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PadLeft (int totalWidth);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>totalWidth</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>totalWidth</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A Unicode space is defined as hexadecimal 0x0020.  </p>\n<p> The PadLeft method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the PadLeftmethod pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading white space so that its total length is <code>totalWidth</code> characters.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the PadLeft method.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic String.PadLeft Example#1\">      string str = &quot;BBQ and Slaw&quot;;\n      Console.WriteLine(str.PadLeft(15));  // Displays &quot;   BBQ and Slaw&quot;.\n      Console.WriteLine(str.PadLeft(5));   // Displays &quot;BBQ and Slaw&quot;.\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic String.PadLeft Example#1\">Dim str As String\nstr = &quot;BBQ and Slaw&quot;\nConsole.WriteLine(str.PadLeft(15)) &#39; Displays &quot;   BBQ and Slaw&quot;.\nConsole.WriteLine(str.PadLeft(5))  &#39; Displays &quot;BBQ and Slaw&quot;.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic String.PadLeft Example#1\">      String^ str = &quot;BBQ and Slaw&quot;;\n      Console::WriteLine( str-&gt;PadLeft( 15 ) ); // Displays &quot;   BBQ and Slaw&quot;.\n      Console::WriteLine( str-&gt;PadLeft( 5 ) );  // Displays &quot;BBQ and Slaw&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_PadLeft_System_Int32_System_Char_\">\r\n    \r\n            <a id=\"System_String_PadLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PadLeft(Int32,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PadLeft (int totalWidth, char paddingChar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>totalWidth</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>paddingChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode padding character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>totalWidth</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PadLeft method pads the beginning of the returned string. This means that, when used with right-to-left languages, it pads the right portion of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.string#System_String_PadLeft_\" data-linktype=\"relative-path\">PadLeft</a> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with leading <code>paddingChar</code> characters so that its total length is <code>totalWidth</code> characters.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_PadLeft_\" data-linktype=\"relative-path\">PadLeft</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic String.PadLeft1 Example#1\">using namespace System;\n\nvoid main()\n{\n   String^ str = &quot;forty-two&quot;;\n   Console::WriteLine( str-&gt;PadLeft( 15, L&#39;.&#39; ) ); \n   Console::WriteLine( str-&gt;PadLeft( 2, L&#39;.&#39; ) ); \n}\n// The example displays the following output:\n//       ......forty-two\n//       forty-two\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic String.PadLeft1 Example#1\">using System;\n\nclass Sample\n{\n   public static void Main()\n   { \n   string str = &quot;forty-two&quot;;\n   char pad = &#39;.&#39;;\n\n   Console.WriteLine(str.PadLeft(15, pad));  \n   Console.WriteLine(str.PadLeft(2, pad));  \n   }\n}\n// The example displays the following output:\n//       ......forty-two\n//       forty-two\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic String.PadLeft1 Example#1\">Public Class Example\n   Public Shared Sub Main()\n      Dim str As String\n      Dim pad As Char\n      str = &quot;forty-two&quot;\n      pad = &quot;.&quot;c\n      Console.WriteLine(str.PadLeft(15, pad)) \n      Console.WriteLine(str.PadLeft(2,  pad))\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       ......forty-two\n&#39;       forty-two\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_PadRight_System_Int32_\">\r\n    \r\n            <a id=\"System_String_PadRight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PadRight(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PadRight (int totalWidth);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>totalWidth</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>totalWidth</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A Unicode space is defined as hexadecimal 0x0020.  </p>\n<p> The PadRight method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If thePadRight method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing white space so that its total length is <code>totalWidth</code> characters.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the PadRight method.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic String.PadRight Example#1\">      String^ str = &quot;BBQ and Slaw&quot;;\n      Console::Write( &quot;|&quot; );\n      Console::Write( str-&gt;PadRight( 15 ) );\n      Console::WriteLine( &quot;|&quot; ); // Displays &quot;|BBQ and Slaw   |&quot;.\n      Console::Write( &quot;|&quot; );\n      Console::Write( str-&gt;PadRight( 5 ) );\n      Console::WriteLine( &quot;|&quot; ); // Displays &quot;|BBQ and Slaw|&quot;.\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic String.PadRight Example#1\">Dim str As String\nstr = &quot;BBQ and Slaw&quot;\n\nConsole.Write(&quot;|&quot;)\nConsole.Write(str.PadRight(15))\nConsole.WriteLine(&quot;|&quot;) &#39; Displays &quot;|BBQ and Slaw   |&quot;.\n\nConsole.Write(&quot;|&quot;)\nConsole.Write(str.PadRight(5))\nConsole.WriteLine(&quot;|&quot;) &#39; Displays &quot;|BBQ and Slaw|&quot;.\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic String.PadRight Example#1\">      string str;\n      str = &quot;BBQ and Slaw&quot;;\n      \n      Console.Write(&quot;|&quot;);\n      Console.Write(str.PadRight(15));\n      Console.WriteLine(&quot;|&quot;);       // Displays &quot;|BBQ and Slaw   |&quot;.\n      \n      Console.Write(&quot;|&quot;);\n      Console.Write(str.PadRight(5));\n      Console.WriteLine(&quot;|&quot;);       // Displays &quot;|BBQ and Slaw|&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_PadRight_System_Int32_System_Char_\">\r\n    \r\n            <a id=\"System_String_PadRight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PadRight(Int32,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PadRight (int totalWidth, char paddingChar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>totalWidth</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>paddingChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode padding character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <code>paddingChar</code> characters as needed to create a length of <code>totalWidth</code>. However, if <code>totalWidth</code> is less than the length of this instance, the method returns a reference to the existing instance. If <code>totalWidth</code> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>totalWidth</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PadRight method pads the end of the returned string. This means that, when used with right-to-left languages, it pads the left portion of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.string#System_String_PadRight_\" data-linktype=\"relative-path\">PadRight</a> method pads the current instance with whitespace characters, this method does not modify the value of the current instance. Instead, it returns a new string that is padded with trailing <code>paddingChar</code> characters so that its total length is <code>totalWidth</code> characters.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_PadRight_\" data-linktype=\"relative-path\">PadRight</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic String.PadRight1 Example#1\"> Dim str As String\n Dim pad As Char\n str = &quot;forty-two&quot;\n pad = Convert.ToChar(&quot;.&quot;) \n Console.WriteLine(str.PadRight(15, pad)) &#39; Displays &quot;|forty-two......|&quot;.\n Console.WriteLine(str.PadRight(2,  pad)) &#39; Displays &quot;|forty-two|&quot;.\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic String.PadRight1 Example#1\">   string str = &quot;forty-two&quot;;\n   char pad = &#39;.&#39;;\n\n   Console.WriteLine(str.PadRight(15, pad));    // Displays &quot;forty-two......&quot;.\n   Console.WriteLine(str.PadRight(2,  pad));    // Displays &quot;forty-two&quot;.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic String.PadRight1 Example#1\">      String^ str = &quot;forty-two&quot;;\n      Console::Write( &quot;|&quot; );\n      Console::Write( str-&gt;PadRight( 15, &#39;.&#39; ) );\n      Console::WriteLine( &quot;|&quot; ); // Displays &quot;|forty-two......|&quot;.\n      Console::Write( &quot;|&quot; );\n      Console::Write( str-&gt;PadRight( 5, &#39;.&#39; ) );\n      Console::WriteLine( &quot;|&quot; ); // Displays &quot;|forty-two|&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Remove_System_Int32_\">\r\n    \r\n            <a id=\"System_String_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Remove (int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based position to begin deleting characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string that is equivalent to this string except for the removed characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> specifies a position that is not within this string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework, strings are zero-based. The value of the <code>startIndex</code> parameter can range from zero to one less than the length of the string instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters from position <code>startIndex</code> to the end of the original string have been removed.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.string#System_String_Remove_\" data-linktype=\"relative-path\">Remove</a> method. The next-to-last case removes all text starting from the specified index through the end of the string. The last case removes three characters starting from the specified index.  </p>\n<pre><code class=\"lang-cs\" name=\"string.remove#1\">// This example demonstrates the String.Remove() method.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string s = &quot;abc---def&quot;; \n//\n    Console.WriteLine(&quot;Index: 012345678&quot;);\n    Console.WriteLine(&quot;1)     {0}&quot;, s);\n    Console.WriteLine(&quot;2)     {0}&quot;, s.Remove(3)); \n    Console.WriteLine(&quot;3)     {0}&quot;, s.Remove(3, 3));\n    }\n}\n/*\nThis example produces the following results:\n\nIndex: 012345678\n1)     abc---def\n2)     abc\n3)     abcdef\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.remove#1\">&#39; This example demonstrates the String.Remove() method.\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim s As String = &quot;abc---def&quot;\n      &#39;\n      Console.WriteLine(&quot;Index: 012345678&quot;)\n      Console.WriteLine(&quot;1)     {0}&quot;, s)\n      Console.WriteLine(&quot;2)     {0}&quot;, s.Remove(3))\n      Console.WriteLine(&quot;3)     {0}&quot;, s.Remove(3, 3))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Index: 012345678\n&#39;1)     abc---def\n&#39;2)     abc\n&#39;3)     abcdef\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.remove#1\">// This example demonstrates the String.Remove() method.\nusing namespace System;\nint main()\n{\n   String^ s = &quot;abc---def&quot;;\n   \n   //\n   Console::WriteLine( &quot;Index: 012345678&quot; );\n   Console::WriteLine( &quot;1)     {0}&quot;, s );\n   Console::WriteLine( &quot;2)     {0}&quot;, s-&gt;Remove( 3 ) );\n   Console::WriteLine( &quot;3)     {0}&quot;, s-&gt;Remove( 3, 3 ) );\n}\n\n/*\nThis example produces the following results:\n\nIndex: 012345678\n1)     abc---def\n2)     abc\n3)     abcdef\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Remove_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Remove (int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based position to begin deleting characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to delete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A new string that is equivalent to this instance except for the removed characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Either <code>startIndex</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>count</code> specify a position outside this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework, strings are zero-based. The value of the <code>startIndex</code> parameter can range from zero to one less than the length of the string instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which the number of characters specified by the <code>count</code> parameter have been removed. The characters are removed at the position specified by <code>startIndex</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how you can remove the middle name from a complete name.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringremove#1\">using namespace System;\nint main()\n{\n   String^ name = &quot;Michelle Violet Banks&quot;;\n   Console::WriteLine( &quot;The entire name is &#39;{0}&#39;&quot;, name );\n   \n   // remove the middle name, identified by finding the spaces in the middle of the name-&gt;-&gt;.\n   int foundS1 = name-&gt;IndexOf( &quot; &quot; );\n   int foundS2 = name-&gt;IndexOf( &quot; &quot;, foundS1 + 1 );\n   if ( foundS1 != foundS2 &amp;&amp; foundS1 &gt;= 0 )\n   {\n      name = name-&gt;Remove( foundS1 + 1, foundS2 - foundS1 );\n      Console::WriteLine( &quot;After removing the middle name, we are left with &#39;{0}&#39;&quot;, name );\n   }\n}\n// The example displays the following output:\n//       The entire name is &#39;Michelle Violet Banks&#39;\n//       After removing the middle name, we are left with &#39;Michelle Banks&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"stringremove#1\">using System;\n\npublic class RemoveTest {\n    public static void Main() {\n\n        string name = &quot;Michelle Violet Banks&quot;;\n \n        Console.WriteLine(&quot;The entire name is &#39;{0}&#39;&quot;, name);\n\n        // remove the middle name, identified by finding the spaces in the middle of the name...\n        int foundS1 = name.IndexOf(&quot; &quot;);\n        int foundS2 = name.IndexOf(&quot; &quot;, foundS1 + 1);\n\n        if (foundS1 != foundS2 &amp;&amp; foundS1 &gt;= 0) {\n\n            name = name.Remove(foundS1 + 1, foundS2 - foundS1);\n\n            Console.WriteLine(&quot;After removing the middle name, we are left with &#39;{0}&#39;&quot;, name);\n        }\n    }\n}\n// The example displays the following output:\n//       The entire name is &#39;Michelle Violet Banks&#39;\n//       After removing the middle name, we are left with &#39;Michelle Banks&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"stringremove#1\">Imports System\n\nPublic Class RemoveTest\n    \n    Public Shared Sub Main()\n        Dim name As String = &quot;Michelle Violet Banks&quot;\n                \n        Console.WriteLine(&quot;The entire name is &#39;{0}&#39;&quot;, name)\n        Dim foundS1 As Integer = name.IndexOf(&quot; &quot;)\n        Dim foundS2 As Integer = name.IndexOf(&quot; &quot;, foundS1 + 1)\n        If foundS1 &lt;&gt; foundS2 And foundS1 &gt;= 0 Then\n            \n            &#39; remove the middle name, identified by finding the spaces in the middle of the name...    \n            name = name.Remove(foundS1 + 1, foundS2 - foundS1)\n            \n            Console.WriteLine(&quot;After removing the middle name, we are left with &#39;{0}&#39;&quot;, name)\n        End If\n    End Sub\nEnd Class \n&#39; The example displays the following output:\n&#39;       The entire name is &#39;Michelle Violet Banks&#39;\n&#39;       After removing the middle name, we are left with &#39;Michelle Banks&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Replace_System_Char_System_Char_\">\r\n    \r\n            <a id=\"System_String_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(Char,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Replace (char oldChar, char newChar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to be replaced.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to replace all occurrences of <code>oldChar</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that is equivalent to this instance except that all instances of <code>oldChar</code> are replaced with <code>newChar</code>. If <code>oldChar</code> is not found in the current instance, the method returns the current instance unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal (case-sensitive and culture-insensitive) search to find <code>oldChar</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of <code>oldChar</code> are replaced by <code>newChar</code>.  </p>\n</div>\n<p> Because this method returns the modified string, you can chain together successive calls to the Replace method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Replace#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = new String(&#39;a&#39;, 3);\n      Console.WriteLine(&quot;The initial string: &#39;{0}&#39;&quot;, s);\n      s = s.Replace(&#39;a&#39;, &#39;b&#39;).Replace(&#39;b&#39;, &#39;c&#39;).Replace(&#39;c&#39;, &#39;d&#39;);\n      Console.WriteLine(&quot;The final string: &#39;{0}&#39;&quot;, s);\n   }\n}\n// The example displays the following output:\n//       The initial string: &#39;aaa&#39;\n//       The final string: &#39;ddd&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Replace#2\">Module Example\n   Public Sub Main()\n      Dim s As New String(&quot;a&quot;c, 3)\n      Console.WriteLine(&quot;The initial string: &#39;{0}&#39;&quot;, s)\n      s = s.Replace(&quot;a&quot;c, &quot;b&quot;c).Replace(&quot;b&quot;c, &quot;c&quot;c).Replace(&quot;c&quot;c, &quot;d&quot;c)\n      Console.WriteLine(&quot;The final string: &#39;{0}&#39;&quot;, s)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The initial string: &#39;aaa&#39;\n&#39;       The final string: &#39;ddd&#39;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.replace1#1\">using namespace System;\nint main()\n{\n   String^ str = &quot;1 2 3 4 5 6 7 8 9&quot;;\n   Console::WriteLine( &quot;Original string: \\&quot;{0}\\&quot;&quot;, str );\n   Console::WriteLine( &quot;CSV string:      \\&quot;{0}\\&quot;&quot;, str-&gt;Replace( &#39; &#39;, &#39;,&#39; ) );\n}\n\n//\n// This example produces the following output:\n// Original string: &quot;1 2 3 4 5 6 7 8 9&quot;\n// CSV string:      &quot;1,2,3,4,5,6,7,8,9&quot;\n//\n</code></pre><pre><code class=\"lang-cs\" name=\"string.replace1#1\">using System;\n\nclass stringReplace1 {\n    public static void Main() {\n        String str = &quot;1 2 3 4 5 6 7 8 9&quot;;\n        Console.WriteLine(&quot;Original string: \\&quot;{0}\\&quot;&quot;, str);\n        Console.WriteLine(&quot;CSV string:      \\&quot;{0}\\&quot;&quot;, str.Replace(&#39; &#39;, &#39;,&#39;));\n    }\n}\n//\n// This example produces the following output:\n// Original string: &quot;1 2 3 4 5 6 7 8 9&quot;\n// CSV string:      &quot;1,2,3,4,5,6,7,8,9&quot;\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"string.replace1#1\">Class stringReplace1\n   Public Shared Sub Main()\n      Dim str As [String] = &quot;1 2 3 4 5 6 7 8 9&quot;\n      Console.WriteLine(&quot;Original string: &quot;&quot;{0}&quot;&quot;&quot;, str)\n      Console.WriteLine(&quot;CSV string:      &quot;&quot;{0}&quot;&quot;&quot;, str.Replace(&quot; &quot;c, &quot;,&quot;c))\n   End Sub\nEnd Class\n&#39; This example produces the following output:\n&#39; Original string: &quot;1 2 3 4 5 6 7 8 9&quot;\n&#39; CSV string:      &quot;1,2,3,4,5,6,7,8,9&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Replace_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Replace (string oldValue, string newValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to be replaced.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to replace all occurrences of <code>oldValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that is equivalent to the current string except that all instances of <code>oldValue</code> are replaced with <code>newValue</code>. If <code>oldValue</code> is not found in the current instance, the method returns the current instance unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>oldValue</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>oldValue</code> is the empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>newValue</code> is <code>null</code>, all occurrences of <code>oldValue</code> are removed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all occurrences of <code>oldValue</code> are replaced by <code>newValue</code>.  </p>\n</div>\n<p> This method performs an ordinal (case-sensitive and culture-insensitive) search to find <code>oldValue</code>.  </p>\n<p> Because this method returns the modified string, you can chain together successive calls to the <a class=\"xref\" href=\"system.string#System_String_Replace_\" data-linktype=\"relative-path\">Replace</a> method to perform multiple replacements on the original string. Method calls are executed from left to right. The following example provides an illustration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Replace#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;aaa&quot;;\n      Console.WriteLine(&quot;The initial string: &#39;{0}&#39;&quot;, s);\n      s = s.Replace(&quot;a&quot;, &quot;b&quot;).Replace(&quot;b&quot;, &quot;c&quot;).Replace(&quot;c&quot;, &quot;d&quot;);\n      Console.WriteLine(&quot;The final string: &#39;{0}&#39;&quot;, s);\n   }\n}\n// The example displays the following output:\n//       The initial string: &#39;aaa&#39;\n//       The final string: &#39;ddd&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Replace#1\">Module Example\n   Public Sub Main()\n      Dim s As String = &quot;aaa&quot;\n      Console.WriteLine(&quot;The initial string: &#39;{0}&#39;&quot;, s)\n      s = s.Replace(&quot;a&quot;, &quot;b&quot;).Replace(&quot;b&quot;, &quot;c&quot;).Replace(&quot;c&quot;, &quot;d&quot;)\n      Console.WriteLine(&quot;The final string: &#39;{0}&#39;&quot;, s)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The initial string: &#39;aaa&#39;\n&#39;       The final string: &#39;ddd&#39;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how you can use the <a class=\"xref\" href=\"system.string#System_String_Replace_\" data-linktype=\"relative-path\">Replace</a> method to correct a spelling error.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringreplace#1\">using namespace System;\nint main()\n{\n   String^ errString = &quot;This docment uses 3 other docments to docment the docmentation&quot;;\n   Console::WriteLine( &quot;The original string is:<br>&#39;{0}&#39;<br>&quot;, errString );\n\n   // Correct the spelling of S&quot;document&quot;.\n   String^ correctString = errString-&gt;Replace( &quot;docment&quot;, &quot;document&quot; );\n   Console::WriteLine( &quot;After correcting the string, the result is:<br>&#39;{0}&#39;&quot;, correctString );\n}\n//\n// This code example produces the following output:\n//\n// The original string is:\n// &#39;This docment uses 3 other docments to docment the docmentation&#39;\n//\n// After correcting the string, the result is:\n// &#39;This document uses 3 other documents to document the documentation&#39;\n//\n</code></pre><pre><code class=\"lang-cs\" name=\"stringreplace#1\">using System;\n\npublic class ReplaceTest {\n    public static void Main() {\n\n        string errString = &quot;This docment uses 3 other docments to docment the docmentation&quot;;\n\n        Console.WriteLine(&quot;The original string is:{0}&#39;{1}&#39;{0}&quot;, Environment.NewLine, errString);\n\n        // Correct the spelling of &quot;document&quot;.\n\n        string correctString = errString.Replace(&quot;docment&quot;, &quot;document&quot;);\n\n        Console.WriteLine(&quot;After correcting the string, the result is:{0}&#39;{1}&#39;&quot;,\n                Environment.NewLine, correctString);\n    }\n}\n//\n// This code example produces the following output:\n//\n// The original string is:\n// &#39;This docment uses 3 other docments to docment the docmentation&#39;\n//\n// After correcting the string, the result is:\n// &#39;This document uses 3 other documents to document the documentation&#39;\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"stringreplace#1\">Imports System\n\nPublic Class ReplaceTest\n    \n    Public Shared Sub Main()\n        Dim errString As String = &quot;This docment uses 3 other docments to docment the docmentation&quot;\n                \n        Console.WriteLine(&quot;The original string is:{0}&#39;{1}&#39;{0}&quot;, Environment.NewLine, errString)\n\n        &#39; Correct the spelling of &quot;document&quot;.  \n        Dim correctString As String = errString.Replace(&quot;docment&quot;, &quot;document&quot;)\n      \n        Console.WriteLine(&quot;After correcting the string, the result is:{0}&#39;{1}&#39;&quot;, Environment.NewLine, correctString)\n    End Sub\nEnd Class\n&#39;\n&#39; This code example produces the following output:\n&#39;\n&#39; The original string is:\n&#39; &#39;This docment uses 3 other docments to docment the docmentation&#39;\n&#39;\n&#39; After correcting the string, the result is:\n&#39; &#39;This document uses 3 other documents to document the documentation&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Split_System_Char___\">\r\n    \r\n            <a id=\"System_String_Split_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Split(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Splits a string into substrings that are based on the characters in an array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] Split (char[] separator);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a string is delimited by a known set of characters, you can use the Split method to separate it into substrings. For other ways to extract substrings from a string, see the <a href=\"#Alternatives\" data-linktype=\"self-bookmark\">Alternatives to String.Split</a> section.  </p>\n<h2 id=\"return-value-details\">Return value details</h2>\n<p> Delimiter characters are not included in the elements of the returned array. For example, if the separator array includes the character &quot;-&quot; and the value of the current string instance is &quot;aa-bb-cc&quot;, the method returns an array that contains three elements: &quot;aa&quot;, &quot;bb&quot;, and &quot;cc&quot;.  </p>\n<p> If this instance does not contain any of the characters in <code>separator</code>, the returned array consists of a single element that contains this instance.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. Here are some examples:  </p>\n<table>\n<thead>\n<tr>\n<th>String value</th>\n<th>Separator</th>\n<th>Returned array</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;42, 12, 19&quot;</td>\n<td>new Char[] {&#39;,&#39;, &#39; &#39;} (C#)<br><br> Char() = {&quot;,&quot;c, &quot; &quot;c}) (Visual Basic)</td>\n<td>{&quot;42&quot;, &quot;&quot;, &quot;12&quot;, &quot;&quot;, &quot;19&quot;}</td>\n</tr>\n<tr>\n<td>&quot;42..12..19&quot;</td>\n<td>new Char[] {&#39;.&#39;} (C#)<br><br> Char() = {&quot;.&quot;c} (Visual Basic)</td>\n<td>{&quot;42&quot;, &quot;&quot;, &quot;12&quot;, &quot;&quot;, &quot;19&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Banana&quot;</td>\n<td>new Char[] {&#39;.&#39;} (C#)<br><br> Char() = {&quot;.&quot;c} (Visual Basic)</td>\n<td>{&quot;Banana&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>new Char[] {} (C#)<br><br> Char() = {} (Visual Basic)</td>\n<td>{&quot;Darb&quot;, &quot;Smarba&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>null (C#)<br><br> Nothing (Visual Basic)</td>\n<td>{&quot;Darb&quot;, &quot;Smarba&quot;}</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"the-separator-array\">The separator array</h2>\n<p> Each element of separator defines a separate delimiter that consists of a single character. If the <code>separator</code> argument is <code>null</code> or contains no characters, the method treats white-space characters as the delimiters. White-space characters are defined by the Unicode standard; they return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.  </p>\n<h2 id=\"stringsplitchar-and-compiler-overload-resolution\">String.Split(Char[]) and compiler overload resolution</h2>\n<p> Although the single parameter for this overload of <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> is a character array, you can call it with a single character, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#12\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String value = &quot;This is a short string.&quot;;\n      Char delimiter = &#39;s&#39;;\n      String[] substrings = value.Split(delimiter);\n      foreach (var substring in substrings)\n         Console.WriteLine(substring);\n   }\n}\n// The example displays the following output:\n//     Thi\n//      i\n//      a\n//     hort\n//     tring.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#12\">Module Example\n   Public Sub Main()\n      Dim value As String = &quot;This is a short string.&quot;\n      Dim delimiter As Char = &quot;s&quot;c\n      Dim substrings() As String = value.Split(delimiter)\n      For Each substring In substrings\n         Console.WriteLine(substring)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Thi\n&#39;      i\n&#39;      a\n&#39;     hort\n&#39;     tring.\n</code></pre><p> Because the <code>separator</code> parameter is decorated  with the <a class=\"xref\" href=\"system.paramarrayattribute\" data-linktype=\"relative-path\">ParamArrayAttribute</a> attribute, compilers will interpret a single character as a single-element character array. This is not the case for other <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> overloads that include a <code>separator</code> parameter; you must explicitly pass these overloads a character array as the <code>separator</code> argument.  </p>\n<h2 id=\"comparison-details\">Comparison details</h2>\n<p> The Split method extracts the substrings in this string that are delimited by one or more of the characters in the <code>separator</code> array, and returns those substrings as elements of an array.  </p>\n<p> The Split method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration.  </p>\n<p><a name=\"Alternatives\"></a>   </p>\n<h2 id=\"alternatives-to-stringsplit\">Alternatives to String.Split</h2>\n<p> The Split method is not always the best way to break a delimited string into substrings. If you don&#39;t want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.  </p>\n<h3 id=\"regular-expressions\">Regular expressions</h3>\n<p> If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements. For example, if strings take the form &quot;<em>number</em> <em>operand</em> <em>number</em>&quot; you can use a <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">regular expression</a> to extract and handle the string&#39;s elements. Here&#39;s an example:  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#8\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] expressions = { &quot;16 + 21&quot;, &quot;31 * 3&quot;, &quot;28 / 3&quot;,\n                               &quot;42 - 18&quot;, &quot;12 * 7&quot;,\n                               &quot;2, 4, 6, 8&quot; };\n      String pattern = @&quot;(\\d+)\\s+([-+*/])\\s+(\\d+)&quot;;\n      foreach (var expression in expressions)\n         foreach (Match m in Regex.Matches(expression, pattern)) {\n            int value1 = Int32.Parse(m.Groups[1].Value);\n            int value2 = Int32.Parse(m.Groups[3].Value);\n            switch (m.Groups[2].Value)\n            {\n               case &quot;+&quot;:\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 + value2);\n                  break;\n               case &quot;-&quot;:\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 - value2);\n                  break;\n               case &quot;*&quot;:\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 * value2);\n                  break;\n               case &quot;/&quot;:\n                  Console.WriteLine(&quot;{0} = {1:N2}&quot;, m.Value, value1 / value2);\n                  break;\n            }\n         }\n   }\n}\n// The example displays the following output:\n//       16 + 21 = 37\n//       31 * 3 = 93\n//       28 / 3 = 9.33\n//       42 - 18 = 24\n//       12 * 7 = 84\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#8\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim expressions() As String = { &quot;16 + 21&quot;, &quot;31 * 3&quot;, &quot;28 / 3&quot;,\n                                      &quot;42 - 18&quot;, &quot;12 * 7&quot;,\n                                      &quot;2, 4, 6, 8&quot; }\n\n      Dim pattern As String = &quot;(\\d+)\\s+([-+*/])\\s+(\\d+)&quot;\n      For Each expression In expressions\n         For Each m As Match in Regex.Matches(expression, pattern)\n            Dim value1 As Integer = Int32.Parse(m.Groups(1).Value)\n            Dim value2 As Integer = Int32.Parse(m.Groups(3).Value)\n            Select Case m.Groups(2).Value\n               Case &quot;+&quot;\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 + value2)\n               Case &quot;-&quot;\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 - value2)\n               Case &quot;*&quot;\n                  Console.WriteLine(&quot;{0} = {1}&quot;, m.Value, value1 * value2)\n               Case &quot;/&quot;\n                  Console.WriteLine(&quot;{0} = {1:N2}&quot;, m.Value, value1 / value2)\n            End Select\n         Next\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16 + 21 = 37\n&#39;       31 * 3 = 93\n&#39;       28 / 3 = 9.33\n&#39;       42 - 18 = 24\n&#39;       12 * 7 = 84\n</code></pre><p> The regular expression pattern <code>(\\d+)\\s+([-+*/])\\s+(\\d+)</code> is defined like this:  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(\\d+)</code></td>\n<td>Match one or more decimal digits. This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>\\s+</code></td>\n<td>Match one or more whitespace characters.</td>\n</tr>\n<tr>\n<td><code>([-+*/])</code></td>\n<td>Match an arithmetic operator sign (+, -, *, or /). This is the second capturing group.</td>\n</tr>\n<tr>\n<td><code>\\s+</code></td>\n<td>Match one or more whitespace characters.</td>\n</tr>\n<tr>\n<td><code>(\\d+)</code></td>\n<td>Match one or more decimal digits. This is the third capturing group.</td>\n</tr>\n</tbody>\n</table>\n<p> You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters. This is a common scenario when either of these conditions occurs:  </p>\n<ul>\n<li><p>One or more of the delimiter characters does not always serve as a delimiter in the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance.  </p>\n</li>\n<li><p>The sequence and number of delimiter characters is variable or unknown.  </p>\n<p>For example, the Split method cannot be used to split the following string, because the number of <code>\\n</code> (in C#) or <code>vbCrLf</code> (in Visual Basic) characters is variable, and they do not always serve as delimiters.  </p>\n</li>\n</ul>\n<pre><code>\n[This is captured\\ntext.]\\n\\n[\\n[This is more captured text.]\\n]  \n\\n[Some more captured text:\\n   Option1\\n   Option2][Terse text.]  \n</code></pre><p> A regular expression can split this string easily, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#9\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String input = &quot;[This is captured\\ntext.]\\n\\n[\\n&quot; +\n                     &quot;[This is more captured text.]\\n]\\n&quot; +\n                     &quot;[Some more captured text:\\n   Option1&quot; +\n                     &quot;\\n   Option2][Terse text.]&quot;;\n      String pattern = @&quot;\\[([^\\[\\]]+)\\]&quot;;\n      int ctr = 0;\n      foreach (Match m in Regex.Matches(input, pattern))\n         Console.WriteLine(&quot;{0}: {1}&quot;, ++ctr, m.Groups[1].Value);\n   }\n}\n// The example displays the following output:\n//       1: This is captured\n//       text.\n//       2: This is more captured text.\n//       3: Some more captured text:\n//          Option1\n//          Option2\n//       4: Terse text.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#9\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = String.Format(&quot;[This is captured{0}text.]&quot; +\n                                          &quot;{0}{0}[{0}[This is more &quot; +\n                                          &quot;captured text.]{0}{0}&quot; +\n                                          &quot;[Some more captured text:&quot; +\n                                          &quot;{0}   Option1&quot; +\n                                          &quot;{0}   Option2][Terse text.]&quot;,\n                                          vbCrLf)\n      Dim pattern As String = &quot;\\[([^\\[\\]]+)\\]&quot;\n      Dim ctr As Integer = 0\n      For Each m As Match In Regex.Matches(input, pattern)\n         ctr += 1\n         Console.WriteLine(&quot;{0}: {1}&quot;, ctr, m.Groups(1).Value)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1: This is captured\n&#39;       text.\n&#39;       2: This is more captured text.\n&#39;       3: Some more captured text:\n&#39;          Option1\n&#39;          Option2\n&#39;       4: Terse text.\n</code></pre><p> The regular expression pattern <code>\\[([^\\[\\]]+)\\]</code> is defined like this:  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\[</code></td>\n<td>Match an opening bracket.</td>\n</tr>\n<tr>\n<td><code>([^\\[\\]]+)</code></td>\n<td>Match any character that is not an opening or a closing bracket one or more times. This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>\\]</code></td>\n<td>Match a closing bracket.</td>\n</tr>\n</tbody>\n</table>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> method is almost identical to Split, except that it splits a string based on a regular expression pattern instead of a fixed character set. For example, the following example uses the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a>method to split a string that contains substrings delimited by various combinations of hyphens and other characters.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#10\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;abacus -- alabaster - * - atrium -+- &quot; +\n                            &quot;any -*- actual - + - armoir - - alarm&quot;\n      Dim pattern As String = &quot;\\s-\\s?[+*]?\\s?-\\s&quot;\n      Dim elements() As String = Regex.Split(input, pattern)\n      For Each element In elements\n         Console.WriteLine(element)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       abacus\n&#39;       alabaster\n&#39;       atrium\n&#39;       any\n&#39;       actual\n&#39;       armoir\n&#39;       alarm\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#10\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String input = &quot;abacus -- alabaster - * - atrium -+- &quot; +\n                     &quot;any -*- actual - + - armoir - - alarm&quot;;\n      String pattern = @&quot;\\s-\\s?[+*]?\\s?-\\s&quot;;\n      String[] elements = Regex.Split(input, pattern);\n      foreach (var element in elements)\n         Console.WriteLine(element);\n   }\n}\n// The example displays the following output:\n//       abacus\n//       alabaster\n//       atrium\n//       any\n//       actual\n//       armoir\n//       alarm\n</code></pre><p> The regular expression pattern <code>\\s-\\s?[+*]?\\s?-\\s</code> is defined like this:  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\s-</code></td>\n<td>Match a whitespace character followed by a hyphen.</td>\n</tr>\n<tr>\n<td><code>\\s?</code></td>\n<td>Match zero or one whitespace character.</td>\n</tr>\n<tr>\n<td><code>[+*]?</code></td>\n<td>Match zero or one occurrence of either the + or * character.</td>\n</tr>\n<tr>\n<td><code>\\s?</code></td>\n<td>Match zero or one whitespace character.</td>\n</tr>\n<tr>\n<td><code>-\\s</code></td>\n<td>Match a hyphen followed by a whitespace character.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"search-methods-and-the-substring-method\">Search methods and the Substring method</h3>\n<p> If you aren&#39;t interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins. You can then call the <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a> method to extract the substring that you want. The string comparison methods include:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, which returns the zero-based index of the first occurrence of a character or string in a string instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, which returns the zero-based index of the last occurrence of a character or string in a string instance.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_LastIndexOfAny_\" data-linktype=\"relative-path\">LastIndexOfAny</a>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.  </p>\n<p>The following example uses the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the periods in a string. It then uses the <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a> method to return full sentences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#11\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String value = &quot;This is the first sentence in a string. &quot; +\n                     &quot;More sentences will follow. For example, &quot; +\n                     &quot;this is the third sentence. This is the &quot; +\n                     &quot;fourth. And this is the fifth and final &quot; +\n                     &quot;sentence.&quot;;\n      var sentences = new List&lt;String&gt;();\n      int position = 0;\n      int start = 0;\n      // Extract sentences from the string.\n      do {\n         position = value.IndexOf(&#39;.&#39;, start);\n         if (position &gt;= 0) {\n            sentences.Add(value.Substring(start, position - start + 1).Trim());\n            start = position + 1;\n         }\n      } while (position &gt; 0);\n\n      // Display the sentences.\n      foreach (var sentence in sentences)\n         Console.WriteLine(sentence);\n   }\n}\n// The example displays the following output:\n//       This is the first sentence in a string.\n//       More sentences will follow.\n//       For example, this is the third sentence.\n//       This is the fourth.\n//       And this is the fifth and final sentence.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#11\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim value As String = &quot;This is the first sentence in a string. &quot; +\n                            &quot;More sentences will follow. For example, &quot; +\n                            &quot;this is the third sentence. This is the &quot; +\n                            &quot;fourth. And this is the fifth and final &quot; +\n                            &quot;sentence.&quot;\n      Dim sentences As New List(Of String)\n      Dim position As Integer = 0\n      Dim start As Integer = 0\n      &#39; Extract sentences from the string.\n      Do\n         position = value.IndexOf(&quot;.&quot;c, start)\n         If position &gt;= 0 Then\n            sentences.Add(value.Substring(start, position - start + 1).Trim())\n            start = position + 1\n         End If\n      Loop While position &gt; 0\n      \n      &#39; Display the sentences.\n      For Each sentence In sentences\n         Console.WriteLine(sentence)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       This is the first sentence in a string.\n&#39;       More sentences will follow.\n&#39;       For example, this is the third sentence.\n&#39;       This is the fourth.\n&#39;       And this is the fifth and final sentence.\n</code></pre></li>\n</ul>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method. You also have the option of using the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to locate a substring within a string.  </p>\n<p> To split a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. To split a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to extract individual words from a block of text by treating white space and punctuation marks as delimiters. The character array passed to the <code>separator</code> parameter of the Split method consists of a space character and a tab character, together with some common punctuation symbols.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#2\">using System;\n\npublic class SplitTest {\n    public static void Main() {\n\n        string words = &quot;This is a list of words, with: a bit of punctuation&quot; +\n                       &quot;&nbsp;&nbsp;&nbsp;&nbsp;and a tab character.&quot;;\n\n        string [] split = words.Split(new Char [] {&#39; &#39;, &#39;,&#39;, &#39;.&#39;, &#39;:&#39;, &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; });\n\n        foreach (string s in split) {\n\n            if (s.Trim() != &quot;&quot;)\n                Console.WriteLine(s);\n        }\n    }\n}\n// The example displays the following output to the console:\n//       This\n//       is\n//       a\n//       list\n//       of\n//       words\n//       with\n//       a\n//       bit\n//       of\n//       punctuation\n//       and\n//       a\n//       tab\n//       character\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#2\">Public Class SplitTest\n    Public Shared Sub Main()\n        Dim words As String = &quot;This is a list of words, with: a bit of punctuation&quot; + _\n                              vbTab + &quot;and a tab character.&quot;\n        Dim split As String() = words.Split(New [Char]() {&quot; &quot;c, &quot;,&quot;c, &quot;.&quot;c, &quot;:&quot;c, CChar(vbTab) })\n                \n        For Each s As String In  split\n            If s.Trim() &lt;&gt; &quot;&quot; Then\n                Console.WriteLine(s)\n            End If\n        Next s\n    End Sub &#39;Main\nEnd Class &#39;SplitTest\n&#39; The example displays the following output to the console:\n&#39;       This\n&#39;       is\n&#39;       a\n&#39;       list\n&#39;       of\n&#39;       words\n&#39;       with\n&#39;       a\n&#39;       bit\n&#39;       of\n&#39;       punctuation\n&#39;       and\n&#39;       a\n&#39;       tab\n&#39;       character\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Split_System_Char___System_Int32_\">\r\n    \r\n            <a id=\"System_String_Split_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Split(Char[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] Split (char[] separator, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of substrings to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Delimiter characters are not included in the elements of the returned array.  </p>\n<p> If this instance does not contain any of the characters in <code>separator</code>, the returned array consists of a single element that contains this instance. If <code>count</code> is zero, an empty array is returned.  </p>\n<p> If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter character. If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.  </p>\n<p> If there are more than <code>count</code> substrings in this instance, the first <code>count</code> minus 1 substrings are returned in the first <code>count</code> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  </p>\n<p> If <code>count</code> is greater than the number of substrings, the available substrings are returned and no exception is thrown.  </p>\n<p> The following table provides examples.  </p>\n<table>\n<thead>\n<tr>\n<th>String value</th>\n<th>Separator</th>\n<th>Count</th>\n<th>Returned array</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;42, 12, 19&quot;</td>\n<td>new Char[] {&#39;,&#39;, &#39; &#39;} (C#)<br><br> Char() = {&quot;,&quot;c, &quot; &quot;c} (Visual Basic)</td>\n<td>2</td>\n<td>{&quot;42&quot;, &quot; 12, 19&quot;}</td>\n</tr>\n<tr>\n<td>&quot;42..12..19&quot;</td>\n<td>new Char[] {&#39;.&#39;} (C#)<br><br> Char() = {&quot;.&quot;c} (Visual Basic)</td>\n<td>4</td>\n<td>{&quot;42&quot;, &quot;&quot;, &quot;12&quot;, &quot;.19&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Banana&quot;</td>\n<td>new Char[] {&#39;.&#39;} (C#)<br><br> Char() = {&quot;.&quot;c} (Visual Basic)</td>\n<td>2</td>\n<td>{&quot;Banana&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>new Char[] {} (C#)<br><br> Char() = {} (Visual Basic)</td>\n<td>1</td>\n<td>{&quot;Darb\\nSmarba&quot;} (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>new Char[] null (C#)<br><br> Char() = Nothing</td>\n<td>2</td>\n<td>{&quot;Darb&quot;, &quot;Smarba&quot;}</td>\n</tr>\n<tr>\n<td>&quot;Darb\\nSmarba&quot; (C#)<br><br> &quot;Darb&quot; &amp; vbLf &amp; &quot;Smarba&quot; (Visual Basic)</td>\n<td>new Char[] null (C#)<br><br> Char() = Nothing</td>\n<td>100</td>\n<td>{&quot;Darb&quot;, &quot;Smarba&quot;}</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how <code>count</code> affects the number of strings returned by <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"StringSplit2#10\">using System;\n\npublic class Example\n{\n   public static void Main() \n   {\n      string delimStr = &quot; ,.:&quot;;\n      char [] delimiter = delimStr.ToCharArray();\n      string words = &quot;one two,three:four.&quot;;\n      string [] split = null;\n\n      Console.WriteLine(&quot;The delimiters are -{0}-&quot;, delimStr);\n      for (int x = 1; x &lt;= 5; x++) {\n         split = words.Split(delimiter, x);\n         Console.WriteLine(&quot;<br>count = {0,2} ..............&quot;, x);\n         foreach (var s in split) {\n             Console.WriteLine(&quot;-{0}-&quot;, s);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       The delimiters are - ,.:-\n//       count =  1 ..............\n//       -one two,three:four.-\n//       count =  2 ..............\n//       -one-\n//       -two,three:four.-\n//       count =  3 ..............\n//       -one-\n//       -two-\n//       -three:four.-\n//       count =  4 ..............\n//       -one-\n//       -two-\n//       -three-\n//       -four.-\n//       count =  5 ..............\n//       -one-\n//       -two-\n//       -three-\n//       -four-\n//       --\n</code></pre><pre><code class=\"lang-vb\" name=\"StringSplit2#10\">Public Class StringSplit2\n   Public Shared Sub Main()\n      \n      Dim delimStr As String = &quot; ,.:&quot;\n      Dim delimiter As Char() = delimStr.ToCharArray()\n      Dim words As String = &quot;one two,three:four.&quot;\n      Dim split As String() = Nothing\n      \n      Console.WriteLine(&quot;The delimiters are -{0}-&quot;, delimStr)\n      Dim x As Integer\n      For x = 1 To 5\n         split = words.Split(delimiter, x)\n         Console.WriteLine(ControlChars.Cr + &quot;count = {0,2} ..............&quot;, x)\n         Dim s As String\n         For Each s In  split\n            Console.WriteLine(&quot;-{0}-&quot;, s)\n         Next s\n      Next x\n   End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;       The delimiters are - ,.:-\n&#39;       count =  1 ..............\n&#39;       -one two,three:four.-\n&#39;       count =  2 ..............\n&#39;       -one-\n&#39;       -two,three:four.-\n&#39;       count =  3 ..............\n&#39;       -one-\n&#39;       -two-\n&#39;       -three:four.-\n&#39;       count =  4 ..............\n&#39;       -one-\n&#39;       -two-\n&#39;       -three-\n&#39;       -four.-\n&#39;       count =  5 ..............\n&#39;       -one-\n&#39;       -two-\n&#39;       -three-\n&#39;       -four-\n&#39;       --\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Split_System_Char___System_StringSplitOptions_\">\r\n    \r\n            <a id=\"System_String_Split_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Split(Char[],StringSplitOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] Split (char[] separator, StringSplitOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to omit empty array elements from the array returned; or <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to include empty array elements in the array returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not one of the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"return-value-details\">Return value details</h2>\n<p> Delimiter characters (the characters in the <code>separator</code> array) are not included in the elements of the returned array. For example, if the <code>separator</code> array includes the character &quot;-&quot; and the value of the current string instance is &quot;aa-bb-cc&quot;, the method returns an array that contains three elements: &quot;aa&quot;, &quot;bb&quot;, and &quot;cc&quot;.  </p>\n<p> If this instance does not contain any of the characters in <code>separator</code>, the returned array consists of a single element that contains this instance.  </p>\n<p> If the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> and the length of this instance is zero, the method returns an empty array.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter that consists of a single character. If the <code>options</code> argument is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>. For example, if <code>separator</code> includes  two elements, &quot;-&quot; and &quot;<em>&quot;, the value of the string instance is &quot;-_aa-\\</em>&quot;, and the value of   the <code>options</code> argument is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, the method returns a string array with the following five elements:  </p>\n<ol>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that precedes the &quot;-&quot; character at index 0.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string between the &quot;-&quot; character at index 0 and the &quot;_&quot; character at index 1.  </p>\n</li>\n<li><p>&quot;aa&quot;,  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that follows the &quot;_&quot; character at index 4.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that follows the &quot;-&quot; character at index 5.  </p>\n</li>\n</ol>\n<h2 id=\"the-separator-array\">The separator array</h2>\n<p> If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.  </p>\n<p> If the <code>separator</code> parameter in the call to this method overload is <code>null</code>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the <code>null</code>. The following example shows several ways to unambiguously identify this overload.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#5\">      Dim phrase As String = &quot;The quick brown fox&quot;\n      Dim words() As String\n      \n      words = phrase.Split(TryCast(Nothing, Char()),  \n                             StringSplitOptions.RemoveEmptyEntries)\n      \n      words = phrase.Split(New Char() {}, \n                           StringSplitOptions.RemoveEmptyEntries)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#5\">      string phrase = &quot;The quick  brown fox&quot;;\n      string[] words;\n      \n      words = phrase.Split(default(Char[]), StringSplitOptions.RemoveEmptyEntries);\n\n      words = phrase.Split((char[]) null, StringSplitOptions.RemoveEmptyEntries);\n      \n      words = phrase.Split(null as char[], StringSplitOptions.RemoveEmptyEntries);\n</code></pre><h2 id=\"comparison-details\">Comparison details</h2>\n<p> The Split method extracts the substrings in this string that are delimited by one or more of the characters in the <code>separator</code> parameter, and returns those substrings as elements of an array.  </p>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration.  </p>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> enumeration to include or exclude substrings generated by the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"string.split3#1\">// This example demonstrates the String() methods that use\n// the StringSplitOptions enumeration.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string s1 = &quot;,ONE,,TWO,,,THREE,,&quot;;\n    string s2 = &quot;[stop]&quot; +\n                &quot;ONE[stop][stop]&quot; +\n                &quot;TWO[stop][stop][stop]&quot; +\n                &quot;THREE[stop][stop]&quot;;\n    char[] charSeparators = new char[] {&#39;,&#39;};\n    string[] stringSeparators = new string[] {&quot;[stop]&quot;};\n    string[] result;\n// ------------------------------------------------------------------------------\n// Split a string delimited by characters.\n// ------------------------------------------------------------------------------\n    Console.WriteLine(&quot;1) Split a string delimited by characters:<br>&quot;);\n\n// Display the original string and delimiter characters.\n    Console.WriteLine(&quot;1a )The original string is \\&quot;{0}\\&quot;.&quot;, s1);\n    Console.WriteLine(&quot;The delimiter character is &#39;{0}&#39;.<br>&quot;, \n                       charSeparators[0]);\n\n// Split a string delimited by characters and return all elements.\n    Console.WriteLine(&quot;1b) Split a string delimited by characters and &quot; +\n                      &quot;return all elements:&quot;);\n    result = s1.Split(charSeparators, StringSplitOptions.None);\n    Show(result);\n\n// Split a string delimited by characters and return all non-empty elements.\n    Console.WriteLine(&quot;1c) Split a string delimited by characters and &quot; +\n                      &quot;return all non-empty elements:&quot;);\n    result = s1.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// Split the original string into the string and empty string before the \n// delimiter and the remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;1d) Split a string delimited by characters and &quot; +\n                      &quot;return 2 elements:&quot;);\n    result = s1.Split(charSeparators, 2, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string into the string after the delimiter and the \n// remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;1e) Split a string delimited by characters and &quot; +\n                      &quot;return 2 non-empty elements:&quot;);\n    result = s1.Split(charSeparators, 2, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// ------------------------------------------------------------------------------\n// Split a string delimited by another string.\n// ------------------------------------------------------------------------------\n    Console.WriteLine(&quot;2) Split a string delimited by another string:<br>&quot;);\n\n// Display the original string and delimiter string.\n    Console.WriteLine(&quot;2a) The original string is \\&quot;{0}\\&quot;.&quot;, s2);\n    Console.WriteLine(&quot;The delimiter string is \\&quot;{0}\\&quot;.<br>&quot;, stringSeparators[0]);\n\n// Split a string delimited by another string and return all elements.\n    Console.WriteLine(&quot;2b) Split a string delimited by another string and &quot; +\n                      &quot;return all elements:&quot;);\n    result = s2.Split(stringSeparators, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string at the delimiter and return all non-empty elements.\n    Console.WriteLine(&quot;2c) Split a string delimited by another string and &quot; +\n                      &quot;return all non-empty elements:&quot;);\n    result = s2.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// Split the original string into the empty string before the \n// delimiter and the remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;2d) Split a string delimited by another string and &quot; +\n                      &quot;return 2 elements:&quot;);\n    result = s2.Split(stringSeparators, 2, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string into the string after the delimiter and the \n// remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;2e) Split a string delimited by another string and &quot; + \n                      &quot;return 2 non-empty elements:&quot;);\n    result = s2.Split(stringSeparators, 2, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n    }\n\n// Display the array of separated strings.\n    public static void Show(string[] entries)\n    {\n    Console.WriteLine(&quot;The return value contains these {0} elements:&quot;, entries.Length);\n    foreach (string entry in entries)\n        {\n        Console.Write(&quot;&lt;{0}&gt;&quot;, entry);\n        }\n    Console.Write(&quot;<br><br>&quot;);\n    }\n}\n/*\nThis example produces the following results:\n\n1) Split a string delimited by characters:\n\n1a )The original string is &quot;,ONE,,TWO,,,THREE,,&quot;.\nThe delimiter character is &#39;,&#39;.\n\n1b) Split a string delimited by characters and return all elements:\nThe return value contains these 9 elements:\n&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n\n1c) Split a string delimited by characters and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n\n1d) Split a string delimited by characters and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;ONE,,TWO,,,THREE,,&gt;\n\n1e) Split a string delimited by characters and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;ONE&gt;&lt;TWO,,,THREE,,&gt;\n\n2) Split a string delimited by another string:\n\n2a) The original string is &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;.\nThe delimiter string is &quot;[stop]&quot;.\n\n2b) Split a string delimited by another string and return all elements:\nThe return value contains these 9 elements:\n&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n\n2c) Split a string delimited by another string and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n\n2d) Split a string delimited by another string and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&gt;\n\n2e) Split a string delimited by another string and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;ONE&gt;&lt;TWO[stop][stop][stop]THREE[stop][stop]&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.split3#1\">\n&#39; This example demonstrates the String() methods that use\n&#39; the StringSplitOptions enumeration.\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim s1 As String = &quot;,ONE,,TWO,,,THREE,,&quot;\n        Dim s2 As String = &quot;[stop]&quot; &amp; _\n                           &quot;ONE[stop][stop]&quot; &amp; _\n                           &quot;TWO[stop][stop][stop]&quot; &amp; _\n                           &quot;THREE[stop][stop]&quot;\n        Dim charSeparators() As Char = {&quot;,&quot;c}\n        Dim stringSeparators() As String = {&quot;[stop]&quot;}\n        Dim result() As String\n        &#39; ------------------------------------------------------------------------------\n        &#39; Split a string delimited by characters.\n        &#39; ------------------------------------------------------------------------------\n        Console.WriteLine(&quot;1) Split a string delimited by characters:&quot; &amp; vbCrLf)\n        \n        &#39; Display the original string and delimiter characters.\n        Console.WriteLine(&quot;1a )The original string is &quot;&quot;{0}&quot;&quot;.&quot;, s1)\n        Console.WriteLine(&quot;The delimiter character is &#39;{0}&#39;.&quot; &amp; vbCrLf, charSeparators(0))\n        \n        &#39; Split a string delimited by characters and return all elements.\n        Console.WriteLine(&quot;1b) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return all elements:&quot;)\n        result = s1.Split(charSeparators, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split a string delimited by characters and return all non-empty elements.\n        Console.WriteLine(&quot;1c) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return all non-empty elements:&quot;)\n        result = s1.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; Split the original string into the string and empty string before the \n        &#39; delimiter and the remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;1d) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return 2 elements:&quot;)\n        result = s1.Split(charSeparators, 2, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string into the string after the delimiter and the \n        &#39; remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;1e) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return 2 non-empty elements:&quot;)\n        result = s1.Split(charSeparators, 2, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; ------------------------------------------------------------------------------\n        &#39; Split a string delimited by another string.\n        &#39; ------------------------------------------------------------------------------\n        Console.WriteLine(&quot;2) Split a string delimited by another string:&quot; &amp; vbCrLf)\n        \n        &#39; Display the original string and delimiter string.\n        Console.WriteLine(&quot;2a) The original string is &quot;&quot;{0}&quot;&quot;.&quot;, s2)\n        Console.WriteLine(&quot;The delimiter string is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, stringSeparators(0))\n        \n        &#39; Split a string delimited by another string and return all elements.\n        Console.WriteLine(&quot;2b) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return all elements:&quot;)\n        result = s2.Split(stringSeparators, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string at the delimiter and return all non-empty elements.\n        Console.WriteLine(&quot;2c) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return all non-empty elements:&quot;)\n        result = s2.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; Split the original string into the empty string before the \n        &#39; delimiter and the remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;2d) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return 2 elements:&quot;)\n        result = s2.Split(stringSeparators, 2, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string into the string after the delimiter and the \n        &#39; remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;2e) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return 2 non-empty elements:&quot;)\n        result = s2.Split(stringSeparators, 2, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n    \n    End Sub &#39;Main\n    \n    \n    &#39; Display the array of separated strings.\n    Public Shared Sub Show(ByVal entries() As String) \n        Console.WriteLine(&quot;The return value contains these {0} elements:&quot;, entries.Length)\n        Dim entry As String\n        For Each entry In  entries\n            Console.Write(&quot;&lt;{0}&gt;&quot;, entry)\n        Next entry\n        Console.Write(vbCrLf &amp; vbCrLf)\n    \n    End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;1) Split a string delimited by characters:\n&#39;\n&#39;1a )The original string is &quot;,ONE,,TWO,,,THREE,,&quot;.\n&#39;The delimiter character is &#39;,&#39;.\n&#39;\n&#39;1b) Split a string delimited by characters and return all elements:\n&#39;The return value contains these 9 elements:\n&#39;&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n&#39;\n&#39;1c) Split a string delimited by characters and return all non-empty elements:\n&#39;The return value contains these 3 elements:\n&#39;&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n&#39;\n&#39;1d) Split a string delimited by characters and return 2 elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;&gt;&lt;ONE,,TWO,,,THREE,,&gt;\n&#39;\n&#39;1e) Split a string delimited by characters and return 2 non-empty elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;ONE&gt;&lt;TWO,,,THREE,,&gt;\n&#39;\n&#39;2) Split a string delimited by another string:\n&#39;\n&#39;2a) The original string is &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;.\n&#39;The delimiter string is &quot;[stop]&quot;.\n&#39;\n&#39;2b) Split a string delimited by another string and return all elements:\n&#39;The return value contains these 9 elements:\n&#39;&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n&#39;\n&#39;2c) Split a string delimited by another string and return all non-empty elements:\n&#39;The return value contains these 3 elements:\n&#39;&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n&#39;\n&#39;2d) Split a string delimited by another string and return 2 elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;&gt;&lt;ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&gt;\n&#39;\n&#39;2e) Split a string delimited by another string and return 2 non-empty elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;ONE&gt;&lt;TWO[stop][stop][stop]THREE[stop][stop]&gt;\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.split3#1\">// This example demonstrates the String.Split(Char[], Boolean) and \n//                               String.Split(Char[], Int32, Boolean) methods\nusing namespace System;\nvoid Show( array&lt;String^&gt;^entries )\n{\n   Console::WriteLine( &quot;The return value contains these {0} elements:&quot;, entries-&gt;Length );\n   System::Collections::IEnumerator^ myEnum = entries-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ entry = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;&lt;{0}&gt;&quot;, entry );\n   }\n\n   Console::Write( &quot;{0}{0}&quot;, Environment::NewLine );\n}\n\nint main()\n{\n   String^ s = &quot;,one,,,two,,,,,three,,&quot;;\n   array&lt;Char&gt;^sep = gcnew array&lt;Char&gt;{\n      &#39;,&#39;\n   };\n   array&lt;String^&gt;^result;\n   \n   //\n   Console::WriteLine( &quot;The original string is \\&quot;{0}\\&quot;.&quot;, s );\n   Console::WriteLine( &quot;The separation character is &#39;{0}&#39;.&quot;, sep[ 0 ] );\n   Console::WriteLine();\n   \n   //\n   Console::WriteLine( &quot;Split the string and return all elements:&quot; );\n   result = s-&gt;Split( sep, StringSplitOptions::None );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return all non-empty elements:&quot; );\n   result = s-&gt;Split( sep, StringSplitOptions::RemoveEmptyEntries );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return 2 elements:&quot; );\n   result = s-&gt;Split( sep, 2, StringSplitOptions::None );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return 2 non-empty elements:&quot; );\n   result = s-&gt;Split( sep, 2, StringSplitOptions::RemoveEmptyEntries );\n   Show( result );\n}\n\n/*\nThis example produces the following results:\n\nThe original string is &quot;,one,,,two,,,,,three,,&quot;.\nThe separation character is &#39;,&#39;.\n\nSplit the string and return all elements:\nThe return value contains these 12 elements:\n&lt;&gt;&lt;one&gt;&lt;&gt;&lt;&gt;&lt;two&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;three&gt;&lt;&gt;&lt;&gt;\n\nSplit the string and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;one&gt;&lt;two&gt;&lt;three&gt;\n\nSplit the string and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;one,,,two,,,,,three,,&gt;\n\nSplit the string and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;one&gt;&lt;,,two,,,,,three,,&gt;\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Split_System_String___System_StringSplitOptions_\">\r\n    \r\n            <a id=\"System_String_Split_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Split(String[],StringSplitOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] Split (string[] separator, StringSplitOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to omit empty array elements from the array returned; or <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to include empty array elements in the array returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not one of the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a string is delimited by a known set of strings, you can use the Split method to separate it into substrings.  </p>\n<h2 id=\"return-value-details\">Return value details</h2>\n<p> Delimiter strings are not included in the elements of the returned array. For example, if the <code>separator</code> array includes the string &quot;--&quot; and the value of the current string instance is &quot;aa--bb-cc&quot;, the method returns an array that contains three elements: &quot;aa&quot;, &quot;bb&quot;, and &quot;cc&quot;.  </p>\n<p> If this instance does not contain any of the strings in <code>separator</code>, the returned array consists of a single element that contains this instance.  </p>\n<p> If the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> and the length of this instance is zero, the method returns an empty array.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter that consists of one or more characters. If the <code>options</code> argument is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>. For example, if <code>separator</code> includes  two elements, &quot;-&quot; and &quot;<em>&quot;, the value of the string instance is &quot;-_aa-\\</em>&quot;, and the value of   the <code>options</code> argument is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, the method returns a sting array with the following five elements:  </p>\n<ol>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that precedes the &quot;-&quot; substring at index 0.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string between the &quot;-&quot; substring at index 0 and the &quot;_&quot; substring at index 1.  </p>\n</li>\n<li><p>&quot;aa&quot;,  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that follows the &quot;_&quot; substring at index 4.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, which represents the empty string that follows the &quot;-&quot; substring at index 5.  </p>\n</li>\n</ol>\n<h2 id=\"the-separator-array\">The separator array</h2>\n<p> If any of the elements in <code>separator</code> consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in <code>separator</code> is &quot;10&quot;, attempting to split the string &quot;This10is10a10string.&quot; returns the following four-element array: { &quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string.&quot; }.  </p>\n<p> If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.  </p>\n<p> If the <code>separator</code> parameter in the call to this method overload is <code>null</code>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the <code>null</code>. The following example shows several ways to unambiguously identify this overload.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#6\">      Dim phrase As String = &quot;The quick brown fox&quot;\n      Dim words() As String\n      \n      words = phrase.Split(TryCast(Nothing, String()),  \n                             StringSplitOptions.RemoveEmptyEntries)\n      \n      words = phrase.Split(New String() {},\n                           StringSplitOptions.RemoveEmptyEntries)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#6\">      string phrase = &quot;The quick  brown fox&quot;;\n      string[] words;\n      \n      words = phrase.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries);\n\n      words = phrase.Split((string[]) null, StringSplitOptions.RemoveEmptyEntries);\n      \n      words = phrase.Split(null as string[], StringSplitOptions.RemoveEmptyEntries);\n</code></pre><h2 id=\"comparison-details\">Comparison details</h2>\n<p> The Split method extracts the substrings in this string that are delimited by one or more of the strings in the <code>separator</code> parameter, and returns those substrings as elements of an array.  </p>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration.  </p>\n<p> The Split method ignores any element of <code>separator</code> whose value is <code>null</code> or the empty string (&quot;&quot;).  </p>\n<p> To avoid ambiguous results when strings in <code>separator</code> have characters in common, the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in <code>separator</code> that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in <code>separator</code>.  </p>\n<p> For example, consider an instance whose value is &quot;abcdef&quot;. If the first element in <code>separator</code> was &quot;ef&quot; and the second element was &quot;bcde&quot;, the result of the split operation would be a string array that contains two elements, &quot;a&quot; and &quot;f&quot;. This is because the substring in the instance, &quot;bcde&quot;, is encountered and matches an element in <code>separator</code> before the substring &quot;f&quot; is encountered.  </p>\n<p> However, if the first element of <code>separator</code> was &quot;bcd&quot; and the second element was &quot;bc&quot;, the result of the split operation would be a string array that contains two elements, &quot;a&quot; and &quot;ef&quot;. This is because &quot;bcd&quot; is the first delimiter in <code>separator</code> that matches a delimiter in the instance. If the order of the separators was reversed so the first element was &quot;bc&quot; and the second element was &quot;bcd&quot;, the result would be a string array that contains two elements,  &quot;a&quot; and &quot;def&quot;.  </p>\n<h2 id=\"performance-considerations\">Performance considerations</h2>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the difference in the arrays returned by calling a string&#39;s Split method with its <code>options</code> parameter equal to <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">System.StringSplitOptions</a> and <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">System.StringSplitOptions</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Split#1\">using System;\n\nclass Example \n{\n   public static void Main() \n   {\n      string source = &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;;\n      string[] stringSeparators = new string[] {&quot;[stop]&quot;};\n      string[] result;\n      \n      // Display the original string and delimiter string.\n      Console.WriteLine(&quot;Splitting the string:<br>   \\&quot;{0}\\&quot;.&quot;, source);\n      Console.WriteLine();\n      Console.WriteLine(&quot;Using the delimiter string:<br>   \\&quot;{0}\\&quot;&quot;, \n                        stringSeparators[0]);\n      Console.WriteLine();                           \n         \n      // Split a string delimited by another string and return all elements.\n      result = source.Split(stringSeparators, StringSplitOptions.None);\n      Console.WriteLine(&quot;Result including all elements ({0} elements):&quot;, \n                        result.Length);\n      Console.Write(&quot;   &quot;);\n      foreach (string s in result)\n      {\n         Console.Write(&quot;&#39;{0}&#39; &quot;, String.IsNullOrEmpty(s) ? &quot;&lt;&gt;&quot; : s);                   \n      }\n      Console.WriteLine();\n      Console.WriteLine();\n\n      // Split delimited by another string and return all non-empty elements.\n      result = source.Split(stringSeparators, \n                            StringSplitOptions.RemoveEmptyEntries);\n      Console.WriteLine(&quot;Result including non-empty elements ({0} elements):&quot;, \n                        result.Length);\n      Console.Write(&quot;   &quot;);\n      foreach (string s in result)\n      {\n         Console.Write(&quot;&#39;{0}&#39; &quot;, String.IsNullOrEmpty(s) ? &quot;&lt;&gt;&quot; : s);                   \n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    Splitting the string:\n//       &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;.\n//    \n//    Using the delimiter string:\n//       &quot;[stop]&quot;\n//    \n//    Result including all elements (9 elements):\n//       &#39;&lt;&gt;&#39; &#39;ONE&#39; &#39;&lt;&gt;&#39; &#39;TWO&#39; &#39;&lt;&gt;&#39; &#39;&lt;&gt;&#39; &#39;THREE&#39; &#39;&lt;&gt;&#39; &#39;&lt;&gt;&#39;\n//    \n//    Result including non-empty elements (3 elements):\n//       &#39;ONE&#39; &#39;TWO&#39; &#39;THREE&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Split#1\">Module Example\n   Public Sub Main()\n      Dim source As String = &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;\n      Dim stringSeparators() As String = {&quot;[stop]&quot;}\n      Dim result() As String\n      \n      &#39; Display the original string and delimiter string.\n      Console.WriteLine(&quot;Splitting the string:{0}   &#39;{1}&#39;.&quot;, vbCrLf, source)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Using the delimiter string:{0}   &#39;{1}&#39;.&quot;, _\n                        vbCrLf, stringSeparators(0))\n      Console.WriteLine()                          \n         \n      &#39; Split a string delimited by another string and return all elements.\n      result = source.Split(stringSeparators, StringSplitOptions.None)\n      Console.WriteLine(&quot;Result including all elements ({0} elements):&quot;, _ \n                        result.Length)\n      Console.Write(&quot;   &quot;)\n      For Each s As String In result\n         Console.Write(&quot;&#39;{0}&#39; &quot;, IIf(String.IsNullOrEmpty(s), &quot;&lt;&gt;&quot;, s))                   \n      Next\n      Console.WriteLine()\n      Console.WriteLine()\n\n      &#39; Split delimited by another string and return all non-empty elements.\n      result = source.Split(stringSeparators, _ \n                            StringSplitOptions.RemoveEmptyEntries)\n      Console.WriteLine(&quot;Result including non-empty elements ({0} elements):&quot;, _ \n                        result.Length)\n      Console.Write(&quot;   &quot;)\n      For Each s As String In result\n         Console.Write(&quot;&#39;{0}&#39; &quot;, IIf(String.IsNullOrEmpty(s), &quot;&lt;&gt;&quot;, s))                   \n      Next\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Splitting the string:\n&#39;       &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;.\n&#39;    \n&#39;    Using the delimiter string:\n&#39;       &quot;[stop]&quot;\n&#39;    \n&#39;    Result including all elements (9 elements):\n&#39;       &#39;&lt;&gt;&#39; &#39;ONE&#39; &#39;&lt;&gt;&#39; &#39;TWO&#39; &#39;&lt;&gt;&#39; &#39;&lt;&gt;&#39; &#39;THREE&#39; &#39;&lt;&gt;&#39; &#39;&lt;&gt;&#39;\n&#39;    \n&#39;    Result including non-empty elements (3 elements):\n&#39;       &#39;ONE&#39; &#39;TWO&#39; &#39;THREE&#39;\n</code></pre><p> The following example defines an array of separators that include punctuation and white-space characters. Passing this array along with a value of <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">System.StringSplitOptions</a> to the Split method returns an array that consists of the individual words from the string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#7\">Module Example\n   Public Sub Main()\n      Dim separators() As String = {&quot;,&quot;, &quot;.&quot;, &quot;!&quot;, &quot;?&quot;, &quot;;&quot;, &quot;:&quot;, &quot; &quot;}\n      Dim value As String = &quot;The handsome, energetic, young dog was playing with his smaller, more lethargic litter mate.&quot;\n      Dim words() As String = value.Split(separators, StringSplitOptions.RemoveEmptyEntries)\n      For Each word In words\n         Console.WriteLine(word)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The\n&#39;       handsome\n&#39;       energetic\n&#39;       young\n&#39;       dog\n&#39;       was\n&#39;       playing\n&#39;       with\n&#39;       his\n&#39;       smaller\n&#39;       more\n&#39;       lethargic\n&#39;       litter\n&#39;       mate\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#7\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] separators = {&quot;,&quot;, &quot;.&quot;, &quot;!&quot;, &quot;?&quot;, &quot;;&quot;, &quot;:&quot;, &quot; &quot;};\n      string value = &quot;The handsome, energetic, young dog was playing with his smaller, more lethargic litter mate.&quot;;\n      string[] words = value.Split(separators, StringSplitOptions.RemoveEmptyEntries);\n      foreach (var word in words)\n         Console.WriteLine(word);\n   }\n}\n// The example displays the following output:\n//       The\n//       handsome\n//       energetic\n//       young\n//       dog\n//       was\n//       playing\n//       with\n//       his\n//       smaller\n//       more\n//       lethargic\n//       litter\n//       mate\n</code></pre><p> Note that the method is called with the <code>options</code> argument set to <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">System.StringSplitOptions</a>. This prevents the returned array from including<a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> values that represent empty substring matches between punctuation marks and white-space characters.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Split_System_Char___System_Int32_System_StringSplitOptions_\">\r\n    \r\n            <a id=\"System_String_Split_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Split(Char[],Int32,StringSplitOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Splits a string into a maximum number of substrings based on the characters in an array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] Split (char[] separator, int count, StringSplitOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of substrings to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to omit empty array elements from the array returned; or <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to include empty array elements in the array returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not one of the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Delimiter characters are not included in the elements of the returned array.  </p>\n<p> If this instance does not contain any of the characters in <code>separator</code>, or the <code>count</code> parameter is 1, the returned array consists of a single element that contains this instance. If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method. However, if the <code>separator</code> parameter in the call to this method overload is <code>null</code>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the null. The following example shows several ways to unambiguously identify this overload.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#3\">      Dim phrase As String = &quot;The quick brown fox&quot;\n      Dim words() As String\n      \n      words = phrase.Split(TryCast(Nothing, Char()), 3, \n                             StringSplitOptions.RemoveEmptyEntries)\n      \n      words = phrase.Split(New Char() {}, 3,\n                           StringSplitOptions.RemoveEmptyEntries)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#3\">      string phrase = &quot;The quick  brown fox&quot;;\n      string[] words;\n      \n      words = phrase.Split(default(Char[]), 3, StringSplitOptions.RemoveEmptyEntries);\n\n      words = phrase.Split((char[]) null, 3, StringSplitOptions.RemoveEmptyEntries);\n      \n      words = phrase.Split(null as char[], 3, StringSplitOptions.RemoveEmptyEntries);\n</code></pre><p> If the <code>count</code> parameter is zero, or the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> and the length of this instance is zero, an empty array is returned.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter character. If the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.  </p>\n<p> If there are more than <code>count</code> substrings in this instance, the first <code>count</code> minus 1 substrings are returned in the first <code>count</code> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  </p>\n<p> If <code>count</code> is greater than the number of substrings, the available substrings are returned and no exception is thrown.  </p>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> enumeration to include or exclude substrings generated by the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"string.split3#1\">// This example demonstrates the String() methods that use\n// the StringSplitOptions enumeration.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string s1 = &quot;,ONE,,TWO,,,THREE,,&quot;;\n    string s2 = &quot;[stop]&quot; +\n                &quot;ONE[stop][stop]&quot; +\n                &quot;TWO[stop][stop][stop]&quot; +\n                &quot;THREE[stop][stop]&quot;;\n    char[] charSeparators = new char[] {&#39;,&#39;};\n    string[] stringSeparators = new string[] {&quot;[stop]&quot;};\n    string[] result;\n// ------------------------------------------------------------------------------\n// Split a string delimited by characters.\n// ------------------------------------------------------------------------------\n    Console.WriteLine(&quot;1) Split a string delimited by characters:<br>&quot;);\n\n// Display the original string and delimiter characters.\n    Console.WriteLine(&quot;1a )The original string is \\&quot;{0}\\&quot;.&quot;, s1);\n    Console.WriteLine(&quot;The delimiter character is &#39;{0}&#39;.<br>&quot;, \n                       charSeparators[0]);\n\n// Split a string delimited by characters and return all elements.\n    Console.WriteLine(&quot;1b) Split a string delimited by characters and &quot; +\n                      &quot;return all elements:&quot;);\n    result = s1.Split(charSeparators, StringSplitOptions.None);\n    Show(result);\n\n// Split a string delimited by characters and return all non-empty elements.\n    Console.WriteLine(&quot;1c) Split a string delimited by characters and &quot; +\n                      &quot;return all non-empty elements:&quot;);\n    result = s1.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// Split the original string into the string and empty string before the \n// delimiter and the remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;1d) Split a string delimited by characters and &quot; +\n                      &quot;return 2 elements:&quot;);\n    result = s1.Split(charSeparators, 2, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string into the string after the delimiter and the \n// remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;1e) Split a string delimited by characters and &quot; +\n                      &quot;return 2 non-empty elements:&quot;);\n    result = s1.Split(charSeparators, 2, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// ------------------------------------------------------------------------------\n// Split a string delimited by another string.\n// ------------------------------------------------------------------------------\n    Console.WriteLine(&quot;2) Split a string delimited by another string:<br>&quot;);\n\n// Display the original string and delimiter string.\n    Console.WriteLine(&quot;2a) The original string is \\&quot;{0}\\&quot;.&quot;, s2);\n    Console.WriteLine(&quot;The delimiter string is \\&quot;{0}\\&quot;.<br>&quot;, stringSeparators[0]);\n\n// Split a string delimited by another string and return all elements.\n    Console.WriteLine(&quot;2b) Split a string delimited by another string and &quot; +\n                      &quot;return all elements:&quot;);\n    result = s2.Split(stringSeparators, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string at the delimiter and return all non-empty elements.\n    Console.WriteLine(&quot;2c) Split a string delimited by another string and &quot; +\n                      &quot;return all non-empty elements:&quot;);\n    result = s2.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// Split the original string into the empty string before the \n// delimiter and the remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;2d) Split a string delimited by another string and &quot; +\n                      &quot;return 2 elements:&quot;);\n    result = s2.Split(stringSeparators, 2, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string into the string after the delimiter and the \n// remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;2e) Split a string delimited by another string and &quot; + \n                      &quot;return 2 non-empty elements:&quot;);\n    result = s2.Split(stringSeparators, 2, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n    }\n\n// Display the array of separated strings.\n    public static void Show(string[] entries)\n    {\n    Console.WriteLine(&quot;The return value contains these {0} elements:&quot;, entries.Length);\n    foreach (string entry in entries)\n        {\n        Console.Write(&quot;&lt;{0}&gt;&quot;, entry);\n        }\n    Console.Write(&quot;<br><br>&quot;);\n    }\n}\n/*\nThis example produces the following results:\n\n1) Split a string delimited by characters:\n\n1a )The original string is &quot;,ONE,,TWO,,,THREE,,&quot;.\nThe delimiter character is &#39;,&#39;.\n\n1b) Split a string delimited by characters and return all elements:\nThe return value contains these 9 elements:\n&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n\n1c) Split a string delimited by characters and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n\n1d) Split a string delimited by characters and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;ONE,,TWO,,,THREE,,&gt;\n\n1e) Split a string delimited by characters and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;ONE&gt;&lt;TWO,,,THREE,,&gt;\n\n2) Split a string delimited by another string:\n\n2a) The original string is &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;.\nThe delimiter string is &quot;[stop]&quot;.\n\n2b) Split a string delimited by another string and return all elements:\nThe return value contains these 9 elements:\n&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n\n2c) Split a string delimited by another string and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n\n2d) Split a string delimited by another string and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&gt;\n\n2e) Split a string delimited by another string and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;ONE&gt;&lt;TWO[stop][stop][stop]THREE[stop][stop]&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.split3#1\">\n&#39; This example demonstrates the String() methods that use\n&#39; the StringSplitOptions enumeration.\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim s1 As String = &quot;,ONE,,TWO,,,THREE,,&quot;\n        Dim s2 As String = &quot;[stop]&quot; &amp; _\n                           &quot;ONE[stop][stop]&quot; &amp; _\n                           &quot;TWO[stop][stop][stop]&quot; &amp; _\n                           &quot;THREE[stop][stop]&quot;\n        Dim charSeparators() As Char = {&quot;,&quot;c}\n        Dim stringSeparators() As String = {&quot;[stop]&quot;}\n        Dim result() As String\n        &#39; ------------------------------------------------------------------------------\n        &#39; Split a string delimited by characters.\n        &#39; ------------------------------------------------------------------------------\n        Console.WriteLine(&quot;1) Split a string delimited by characters:&quot; &amp; vbCrLf)\n        \n        &#39; Display the original string and delimiter characters.\n        Console.WriteLine(&quot;1a )The original string is &quot;&quot;{0}&quot;&quot;.&quot;, s1)\n        Console.WriteLine(&quot;The delimiter character is &#39;{0}&#39;.&quot; &amp; vbCrLf, charSeparators(0))\n        \n        &#39; Split a string delimited by characters and return all elements.\n        Console.WriteLine(&quot;1b) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return all elements:&quot;)\n        result = s1.Split(charSeparators, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split a string delimited by characters and return all non-empty elements.\n        Console.WriteLine(&quot;1c) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return all non-empty elements:&quot;)\n        result = s1.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; Split the original string into the string and empty string before the \n        &#39; delimiter and the remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;1d) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return 2 elements:&quot;)\n        result = s1.Split(charSeparators, 2, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string into the string after the delimiter and the \n        &#39; remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;1e) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return 2 non-empty elements:&quot;)\n        result = s1.Split(charSeparators, 2, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; ------------------------------------------------------------------------------\n        &#39; Split a string delimited by another string.\n        &#39; ------------------------------------------------------------------------------\n        Console.WriteLine(&quot;2) Split a string delimited by another string:&quot; &amp; vbCrLf)\n        \n        &#39; Display the original string and delimiter string.\n        Console.WriteLine(&quot;2a) The original string is &quot;&quot;{0}&quot;&quot;.&quot;, s2)\n        Console.WriteLine(&quot;The delimiter string is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, stringSeparators(0))\n        \n        &#39; Split a string delimited by another string and return all elements.\n        Console.WriteLine(&quot;2b) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return all elements:&quot;)\n        result = s2.Split(stringSeparators, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string at the delimiter and return all non-empty elements.\n        Console.WriteLine(&quot;2c) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return all non-empty elements:&quot;)\n        result = s2.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; Split the original string into the empty string before the \n        &#39; delimiter and the remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;2d) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return 2 elements:&quot;)\n        result = s2.Split(stringSeparators, 2, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string into the string after the delimiter and the \n        &#39; remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;2e) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return 2 non-empty elements:&quot;)\n        result = s2.Split(stringSeparators, 2, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n    \n    End Sub &#39;Main\n    \n    \n    &#39; Display the array of separated strings.\n    Public Shared Sub Show(ByVal entries() As String) \n        Console.WriteLine(&quot;The return value contains these {0} elements:&quot;, entries.Length)\n        Dim entry As String\n        For Each entry In  entries\n            Console.Write(&quot;&lt;{0}&gt;&quot;, entry)\n        Next entry\n        Console.Write(vbCrLf &amp; vbCrLf)\n    \n    End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;1) Split a string delimited by characters:\n&#39;\n&#39;1a )The original string is &quot;,ONE,,TWO,,,THREE,,&quot;.\n&#39;The delimiter character is &#39;,&#39;.\n&#39;\n&#39;1b) Split a string delimited by characters and return all elements:\n&#39;The return value contains these 9 elements:\n&#39;&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n&#39;\n&#39;1c) Split a string delimited by characters and return all non-empty elements:\n&#39;The return value contains these 3 elements:\n&#39;&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n&#39;\n&#39;1d) Split a string delimited by characters and return 2 elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;&gt;&lt;ONE,,TWO,,,THREE,,&gt;\n&#39;\n&#39;1e) Split a string delimited by characters and return 2 non-empty elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;ONE&gt;&lt;TWO,,,THREE,,&gt;\n&#39;\n&#39;2) Split a string delimited by another string:\n&#39;\n&#39;2a) The original string is &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;.\n&#39;The delimiter string is &quot;[stop]&quot;.\n&#39;\n&#39;2b) Split a string delimited by another string and return all elements:\n&#39;The return value contains these 9 elements:\n&#39;&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n&#39;\n&#39;2c) Split a string delimited by another string and return all non-empty elements:\n&#39;The return value contains these 3 elements:\n&#39;&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n&#39;\n&#39;2d) Split a string delimited by another string and return 2 elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;&gt;&lt;ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&gt;\n&#39;\n&#39;2e) Split a string delimited by another string and return 2 non-empty elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;ONE&gt;&lt;TWO[stop][stop][stop]THREE[stop][stop]&gt;\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.split3#1\">// This example demonstrates the String.Split(Char[], Boolean) and \n//                               String.Split(Char[], Int32, Boolean) methods\nusing namespace System;\nvoid Show( array&lt;String^&gt;^entries )\n{\n   Console::WriteLine( &quot;The return value contains these {0} elements:&quot;, entries-&gt;Length );\n   System::Collections::IEnumerator^ myEnum = entries-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ entry = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;&lt;{0}&gt;&quot;, entry );\n   }\n\n   Console::Write( &quot;{0}{0}&quot;, Environment::NewLine );\n}\n\nint main()\n{\n   String^ s = &quot;,one,,,two,,,,,three,,&quot;;\n   array&lt;Char&gt;^sep = gcnew array&lt;Char&gt;{\n      &#39;,&#39;\n   };\n   array&lt;String^&gt;^result;\n   \n   //\n   Console::WriteLine( &quot;The original string is \\&quot;{0}\\&quot;.&quot;, s );\n   Console::WriteLine( &quot;The separation character is &#39;{0}&#39;.&quot;, sep[ 0 ] );\n   Console::WriteLine();\n   \n   //\n   Console::WriteLine( &quot;Split the string and return all elements:&quot; );\n   result = s-&gt;Split( sep, StringSplitOptions::None );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return all non-empty elements:&quot; );\n   result = s-&gt;Split( sep, StringSplitOptions::RemoveEmptyEntries );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return 2 elements:&quot; );\n   result = s-&gt;Split( sep, 2, StringSplitOptions::None );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return 2 non-empty elements:&quot; );\n   result = s-&gt;Split( sep, 2, StringSplitOptions::RemoveEmptyEntries );\n   Show( result );\n}\n\n/*\nThis example produces the following results:\n\nThe original string is &quot;,one,,,two,,,,,three,,&quot;.\nThe separation character is &#39;,&#39;.\n\nSplit the string and return all elements:\nThe return value contains these 12 elements:\n&lt;&gt;&lt;one&gt;&lt;&gt;&lt;&gt;&lt;two&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;three&gt;&lt;&gt;&lt;&gt;\n\nSplit the string and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;one&gt;&lt;two&gt;&lt;three&gt;\n\nSplit the string and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;one,,,two,,,,,three,,&gt;\n\nSplit the string and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;one&gt;&lt;,,two,,,,,three,,&gt;\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Split_System_String___System_Int32_System_StringSplitOptions_\">\r\n    \r\n            <a id=\"System_String_Split_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Split(String[],Int32,StringSplitOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] Split (string[] separator, int count, StringSplitOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>separator</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of substrings to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to omit empty array elements from the array returned; or <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> to include empty array elements in the array returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <code>separator</code>. For more information, see the Remarks section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not one of the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"return-value-details\">Return value details</h2>\n<p> Delimiter strings are not included in the elements of the returned array.  </p>\n<p> If this instance does not contain any of the strings in <code>separator</code>, or the <code>count</code> parameter is 1, the returned array consists of a single element that contains this instance. If the <code>separator</code> parameter is <code>null</code> or contains no characters, white-space characters are assumed to be the delimiters. White-space characters are defined by the Unicode standard and return <code>true</code> if they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method. However, if the <code>separator</code> parameter in the call to this method overload is <code>null</code>, compiler overload resolution fails. To unambiguously identify the called method, your code must indicate the type of the <code>null</code>. The following example shows several ways to unambiguously identify this overload.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Split#4\">      Dim phrase As String = &quot;The quick brown fox&quot;\n      Dim words() As String\n      \n      words = phrase.Split(TryCast(Nothing, String()), 3, \n                             StringSplitOptions.RemoveEmptyEntries)\n      \n      words = phrase.Split(New String() {}, 3,\n                           StringSplitOptions.RemoveEmptyEntries)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Split#4\">      string phrase = &quot;The quick  brown fox&quot;;\n      string[] words;\n      \n      words = phrase.Split(default(string[]), 3, StringSplitOptions.RemoveEmptyEntries);\n\n      words = phrase.Split((string[]) null, 3, StringSplitOptions.RemoveEmptyEntries);\n      \n      words = phrase.Split(null as string[], 3, StringSplitOptions.RemoveEmptyEntries);\n</code></pre><p> If the <code>count</code> parameter is zero, or the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> and the length of this instance is zero, an empty array is returned.  </p>\n<p> Each element of <code>separator</code> defines a separate delimiter that consists of one or more characters. If the <code>options</code> parameter is <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.  </p>\n<p> If there are more than <code>count</code> substrings in this instance, the first <code>count</code> minus 1 substrings are returned in the first <code>count</code> minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.  </p>\n<p> If <code>count</code> is greater than the number of substrings, the available substrings are returned and no exception is thrown.  </p>\n<h2 id=\"the-separator-array\">The separator array</h2>\n<p> If any of the elements in <code>separator</code> consists of multiple characters, the entire substring is considered a delimiter. For example, if one of the elements in <code>separator</code> is &quot;10&quot;, attempting to split the string &quot;This10is10a10string.&quot; returns this four-element array: { &quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string.&quot; }.  </p>\n<h2 id=\"comparison-details\">Comparison details</h2>\n<p> The Split method extracts the substrings in this string that are delimited by one or more of the strings in the <code>separator</code> parameter, and returns those substrings as elements of an array.  </p>\n<p> The <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules. For more information about word, string, and ordinal sorts, see the <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a> enumeration.  </p>\n<p> The Split method ignores any element of <code>separator</code> whose value is <code>null</code> or the empty string (&quot;&quot;).  </p>\n<p> To avoid ambiguous results when strings in <code>separator</code> have characters in common, the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method proceeds from the beginning to the end of the value of the instance, and matches the first element in <code>separator</code> that is equal to a delimiter in the instance. The order in which substrings are encountered in the instance takes precedence over the order of elements in <code>separator</code>.  </p>\n<p> For example, consider an instance whose value is &quot;abcdef&quot;. If the first element in <code>separator</code> was &quot;ef&quot; and the second element was &quot;bcde&quot;, the result of the split operation would be &quot;a&quot; and &quot;f&quot;. This is because the substring in the instance, &quot;bcde&quot;, is encountered and matches an element in <code>separator</code> before the substring &quot;f&quot; is encountered.  </p>\n<p> However, if the first element of <code>separator</code> was &quot;bcd&quot; and the second element was &quot;bc&quot;, the result of the split operation would be &quot;a&quot; and &quot;ef&quot;. This is because &quot;bcd&quot; is the first delimiter in <code>separator</code> that matches a delimiter in the instance. If the order of the separators was reversed so the first element was &quot;bc&quot; and the second element was &quot;bcd&quot;, the result would be &quot;a&quot; and &quot;def&quot;.  </p>\n<h2 id=\"performance-considerations\">Performance considerations</h2>\n<p> The<a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> methods allocate memory for the returned array object and a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object for each array element. If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method, and optionally the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method, to locate a substring within a string.  </p>\n<p> If you are splitting a string at a separator character, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate a separator character in the string. If you are splitting a string at a separator string, use the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a> method to locate the first character of the separator string. Then use the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.  </p>\n<p> In addition, if the same set of characters is used to split strings in multiple <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method calls, consider creating a single array and referencing it in each method call. This significantly reduces the additional overhead of each method call.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.stringsplitoptions\" data-linktype=\"relative-path\">StringSplitOptions</a> enumeration to include or exclude substrings generated by the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"string.split3#1\">// This example demonstrates the String() methods that use\n// the StringSplitOptions enumeration.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string s1 = &quot;,ONE,,TWO,,,THREE,,&quot;;\n    string s2 = &quot;[stop]&quot; +\n                &quot;ONE[stop][stop]&quot; +\n                &quot;TWO[stop][stop][stop]&quot; +\n                &quot;THREE[stop][stop]&quot;;\n    char[] charSeparators = new char[] {&#39;,&#39;};\n    string[] stringSeparators = new string[] {&quot;[stop]&quot;};\n    string[] result;\n// ------------------------------------------------------------------------------\n// Split a string delimited by characters.\n// ------------------------------------------------------------------------------\n    Console.WriteLine(&quot;1) Split a string delimited by characters:<br>&quot;);\n\n// Display the original string and delimiter characters.\n    Console.WriteLine(&quot;1a )The original string is \\&quot;{0}\\&quot;.&quot;, s1);\n    Console.WriteLine(&quot;The delimiter character is &#39;{0}&#39;.<br>&quot;, \n                       charSeparators[0]);\n\n// Split a string delimited by characters and return all elements.\n    Console.WriteLine(&quot;1b) Split a string delimited by characters and &quot; +\n                      &quot;return all elements:&quot;);\n    result = s1.Split(charSeparators, StringSplitOptions.None);\n    Show(result);\n\n// Split a string delimited by characters and return all non-empty elements.\n    Console.WriteLine(&quot;1c) Split a string delimited by characters and &quot; +\n                      &quot;return all non-empty elements:&quot;);\n    result = s1.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// Split the original string into the string and empty string before the \n// delimiter and the remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;1d) Split a string delimited by characters and &quot; +\n                      &quot;return 2 elements:&quot;);\n    result = s1.Split(charSeparators, 2, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string into the string after the delimiter and the \n// remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;1e) Split a string delimited by characters and &quot; +\n                      &quot;return 2 non-empty elements:&quot;);\n    result = s1.Split(charSeparators, 2, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// ------------------------------------------------------------------------------\n// Split a string delimited by another string.\n// ------------------------------------------------------------------------------\n    Console.WriteLine(&quot;2) Split a string delimited by another string:<br>&quot;);\n\n// Display the original string and delimiter string.\n    Console.WriteLine(&quot;2a) The original string is \\&quot;{0}\\&quot;.&quot;, s2);\n    Console.WriteLine(&quot;The delimiter string is \\&quot;{0}\\&quot;.<br>&quot;, stringSeparators[0]);\n\n// Split a string delimited by another string and return all elements.\n    Console.WriteLine(&quot;2b) Split a string delimited by another string and &quot; +\n                      &quot;return all elements:&quot;);\n    result = s2.Split(stringSeparators, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string at the delimiter and return all non-empty elements.\n    Console.WriteLine(&quot;2c) Split a string delimited by another string and &quot; +\n                      &quot;return all non-empty elements:&quot;);\n    result = s2.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n\n// Split the original string into the empty string before the \n// delimiter and the remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;2d) Split a string delimited by another string and &quot; +\n                      &quot;return 2 elements:&quot;);\n    result = s2.Split(stringSeparators, 2, StringSplitOptions.None);\n    Show(result);\n\n// Split the original string into the string after the delimiter and the \n// remainder of the original string after the delimiter.\n    Console.WriteLine(&quot;2e) Split a string delimited by another string and &quot; + \n                      &quot;return 2 non-empty elements:&quot;);\n    result = s2.Split(stringSeparators, 2, StringSplitOptions.RemoveEmptyEntries);\n    Show(result);\n    }\n\n// Display the array of separated strings.\n    public static void Show(string[] entries)\n    {\n    Console.WriteLine(&quot;The return value contains these {0} elements:&quot;, entries.Length);\n    foreach (string entry in entries)\n        {\n        Console.Write(&quot;&lt;{0}&gt;&quot;, entry);\n        }\n    Console.Write(&quot;<br><br>&quot;);\n    }\n}\n/*\nThis example produces the following results:\n\n1) Split a string delimited by characters:\n\n1a )The original string is &quot;,ONE,,TWO,,,THREE,,&quot;.\nThe delimiter character is &#39;,&#39;.\n\n1b) Split a string delimited by characters and return all elements:\nThe return value contains these 9 elements:\n&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n\n1c) Split a string delimited by characters and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n\n1d) Split a string delimited by characters and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;ONE,,TWO,,,THREE,,&gt;\n\n1e) Split a string delimited by characters and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;ONE&gt;&lt;TWO,,,THREE,,&gt;\n\n2) Split a string delimited by another string:\n\n2a) The original string is &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;.\nThe delimiter string is &quot;[stop]&quot;.\n\n2b) Split a string delimited by another string and return all elements:\nThe return value contains these 9 elements:\n&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n\n2c) Split a string delimited by another string and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n\n2d) Split a string delimited by another string and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&gt;\n\n2e) Split a string delimited by another string and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;ONE&gt;&lt;TWO[stop][stop][stop]THREE[stop][stop]&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.split3#1\">\n&#39; This example demonstrates the String() methods that use\n&#39; the StringSplitOptions enumeration.\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim s1 As String = &quot;,ONE,,TWO,,,THREE,,&quot;\n        Dim s2 As String = &quot;[stop]&quot; &amp; _\n                           &quot;ONE[stop][stop]&quot; &amp; _\n                           &quot;TWO[stop][stop][stop]&quot; &amp; _\n                           &quot;THREE[stop][stop]&quot;\n        Dim charSeparators() As Char = {&quot;,&quot;c}\n        Dim stringSeparators() As String = {&quot;[stop]&quot;}\n        Dim result() As String\n        &#39; ------------------------------------------------------------------------------\n        &#39; Split a string delimited by characters.\n        &#39; ------------------------------------------------------------------------------\n        Console.WriteLine(&quot;1) Split a string delimited by characters:&quot; &amp; vbCrLf)\n        \n        &#39; Display the original string and delimiter characters.\n        Console.WriteLine(&quot;1a )The original string is &quot;&quot;{0}&quot;&quot;.&quot;, s1)\n        Console.WriteLine(&quot;The delimiter character is &#39;{0}&#39;.&quot; &amp; vbCrLf, charSeparators(0))\n        \n        &#39; Split a string delimited by characters and return all elements.\n        Console.WriteLine(&quot;1b) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return all elements:&quot;)\n        result = s1.Split(charSeparators, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split a string delimited by characters and return all non-empty elements.\n        Console.WriteLine(&quot;1c) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return all non-empty elements:&quot;)\n        result = s1.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; Split the original string into the string and empty string before the \n        &#39; delimiter and the remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;1d) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return 2 elements:&quot;)\n        result = s1.Split(charSeparators, 2, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string into the string after the delimiter and the \n        &#39; remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;1e) Split a string delimited by characters and &quot; &amp; _\n                          &quot;return 2 non-empty elements:&quot;)\n        result = s1.Split(charSeparators, 2, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; ------------------------------------------------------------------------------\n        &#39; Split a string delimited by another string.\n        &#39; ------------------------------------------------------------------------------\n        Console.WriteLine(&quot;2) Split a string delimited by another string:&quot; &amp; vbCrLf)\n        \n        &#39; Display the original string and delimiter string.\n        Console.WriteLine(&quot;2a) The original string is &quot;&quot;{0}&quot;&quot;.&quot;, s2)\n        Console.WriteLine(&quot;The delimiter string is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, stringSeparators(0))\n        \n        &#39; Split a string delimited by another string and return all elements.\n        Console.WriteLine(&quot;2b) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return all elements:&quot;)\n        result = s2.Split(stringSeparators, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string at the delimiter and return all non-empty elements.\n        Console.WriteLine(&quot;2c) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return all non-empty elements:&quot;)\n        result = s2.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n        \n        &#39; Split the original string into the empty string before the \n        &#39; delimiter and the remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;2d) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return 2 elements:&quot;)\n        result = s2.Split(stringSeparators, 2, StringSplitOptions.None)\n        Show(result)\n        \n        &#39; Split the original string into the string after the delimiter and the \n        &#39; remainder of the original string after the delimiter.\n        Console.WriteLine(&quot;2e) Split a string delimited by another string and &quot; &amp; _\n                          &quot;return 2 non-empty elements:&quot;)\n        result = s2.Split(stringSeparators, 2, StringSplitOptions.RemoveEmptyEntries)\n        Show(result)\n    \n    End Sub &#39;Main\n    \n    \n    &#39; Display the array of separated strings.\n    Public Shared Sub Show(ByVal entries() As String) \n        Console.WriteLine(&quot;The return value contains these {0} elements:&quot;, entries.Length)\n        Dim entry As String\n        For Each entry In  entries\n            Console.Write(&quot;&lt;{0}&gt;&quot;, entry)\n        Next entry\n        Console.Write(vbCrLf &amp; vbCrLf)\n    \n    End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;1) Split a string delimited by characters:\n&#39;\n&#39;1a )The original string is &quot;,ONE,,TWO,,,THREE,,&quot;.\n&#39;The delimiter character is &#39;,&#39;.\n&#39;\n&#39;1b) Split a string delimited by characters and return all elements:\n&#39;The return value contains these 9 elements:\n&#39;&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n&#39;\n&#39;1c) Split a string delimited by characters and return all non-empty elements:\n&#39;The return value contains these 3 elements:\n&#39;&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n&#39;\n&#39;1d) Split a string delimited by characters and return 2 elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;&gt;&lt;ONE,,TWO,,,THREE,,&gt;\n&#39;\n&#39;1e) Split a string delimited by characters and return 2 non-empty elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;ONE&gt;&lt;TWO,,,THREE,,&gt;\n&#39;\n&#39;2) Split a string delimited by another string:\n&#39;\n&#39;2a) The original string is &quot;[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&quot;.\n&#39;The delimiter string is &quot;[stop]&quot;.\n&#39;\n&#39;2b) Split a string delimited by another string and return all elements:\n&#39;The return value contains these 9 elements:\n&#39;&lt;&gt;&lt;ONE&gt;&lt;&gt;&lt;TWO&gt;&lt;&gt;&lt;&gt;&lt;THREE&gt;&lt;&gt;&lt;&gt;\n&#39;\n&#39;2c) Split a string delimited by another string and return all non-empty elements:\n&#39;The return value contains these 3 elements:\n&#39;&lt;ONE&gt;&lt;TWO&gt;&lt;THREE&gt;\n&#39;\n&#39;2d) Split a string delimited by another string and return 2 elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;&gt;&lt;ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]&gt;\n&#39;\n&#39;2e) Split a string delimited by another string and return 2 non-empty elements:\n&#39;The return value contains these 2 elements:\n&#39;&lt;ONE&gt;&lt;TWO[stop][stop][stop]THREE[stop][stop]&gt;\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.split3#1\">// This example demonstrates the String.Split(Char[], Boolean) and \n//                               String.Split(Char[], Int32, Boolean) methods\nusing namespace System;\nvoid Show( array&lt;String^&gt;^entries )\n{\n   Console::WriteLine( &quot;The return value contains these {0} elements:&quot;, entries-&gt;Length );\n   System::Collections::IEnumerator^ myEnum = entries-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ entry = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;&lt;{0}&gt;&quot;, entry );\n   }\n\n   Console::Write( &quot;{0}{0}&quot;, Environment::NewLine );\n}\n\nint main()\n{\n   String^ s = &quot;,one,,,two,,,,,three,,&quot;;\n   array&lt;Char&gt;^sep = gcnew array&lt;Char&gt;{\n      &#39;,&#39;\n   };\n   array&lt;String^&gt;^result;\n   \n   //\n   Console::WriteLine( &quot;The original string is \\&quot;{0}\\&quot;.&quot;, s );\n   Console::WriteLine( &quot;The separation character is &#39;{0}&#39;.&quot;, sep[ 0 ] );\n   Console::WriteLine();\n   \n   //\n   Console::WriteLine( &quot;Split the string and return all elements:&quot; );\n   result = s-&gt;Split( sep, StringSplitOptions::None );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return all non-empty elements:&quot; );\n   result = s-&gt;Split( sep, StringSplitOptions::RemoveEmptyEntries );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return 2 elements:&quot; );\n   result = s-&gt;Split( sep, 2, StringSplitOptions::None );\n   Show( result );\n   \n   //\n   Console::WriteLine( &quot;Split the string and return 2 non-empty elements:&quot; );\n   result = s-&gt;Split( sep, 2, StringSplitOptions::RemoveEmptyEntries );\n   Show( result );\n}\n\n/*\nThis example produces the following results:\n\nThe original string is &quot;,one,,,two,,,,,three,,&quot;.\nThe separation character is &#39;,&#39;.\n\nSplit the string and return all elements:\nThe return value contains these 12 elements:\n&lt;&gt;&lt;one&gt;&lt;&gt;&lt;&gt;&lt;two&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;three&gt;&lt;&gt;&lt;&gt;\n\nSplit the string and return all non-empty elements:\nThe return value contains these 3 elements:\n&lt;one&gt;&lt;two&gt;&lt;three&gt;\n\nSplit the string and return 2 elements:\nThe return value contains these 2 elements:\n&lt;&gt;&lt;one,,,two,,,,,three,,&gt;\n\nSplit the string and return 2 non-empty elements:\nThe return value contains these 2 elements:\n&lt;one&gt;&lt;,,two,,,,,three,,&gt;\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_StartsWith_System_String_\">\r\n    \r\n            <a id=\"System_String_StartsWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StartsWith(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the beginning of this string instance matches the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool StartsWith (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> matches the beginning of this string; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method compares <code>value</code> to the substring at the beginning of this instance that is the same length as <code>value</code>, and returns an indication whether they are equal. To be equal, <code>value</code> must be an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>), must be a reference to this same instance, or must match the beginning of this instance.  </p>\n<p> This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>StripStartTags</code> method that uses the StartsWith method to remove HTML start tags from the beginning of a string. Note that the <code>StripStartTags</code> method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed. The example does not remove HTML tags embedded in a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringstartswith#1\">using namespace System;\n\nString^ StripStartTags( String^ item )\n{\n   // Determine whether a tag begins the string.\n   if (item-&gt;Trim()-&gt;StartsWith(&quot;&lt;&quot;)) {\n      // Find the closing tag.\n      int lastLocation = item-&gt;IndexOf(&quot;&gt;&quot;);\n      \n      // Remove the tag.\n      if ( lastLocation &gt;= 0 ) {\n         item = item-&gt;Substring(lastLocation+ 1);\n            \n         // Remove any additional starting tags.\n         item = StripStartTags(item);\n      }      \n   }\n\n   return item;\n}\n\nint main()\n{\n   array&lt;String^&gt;^ strSource = { &quot;&lt;b&gt;This is bold text&lt;/b&gt;&quot;,\n                   &quot;&lt;H1&gt;This is large Text&lt;/H1&gt;&quot;,\n                   &quot;&lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&quot;,\n                   &quot;&lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;&quot;,\n                   &quot;&lt;This line simply begins with a lesser than symbol, it should not be modified&quot; };\n   \n   // Display the initial string array.\n   Console::WriteLine(&quot;The original strings:&quot;);\n   Console::WriteLine(&quot;---------------------&quot;);\n   for each (String^ s in strSource)    \n      Console::WriteLine( s );\n   Console::WriteLine();\n\n   Console::WriteLine( &quot;Strings after starting tags have been stripped:&quot;);\n   Console::WriteLine( &quot;-----------------------------------------------&quot;);\n   \n   // Display the strings with starting tags removed.\n   for each (String^ s in strSource)\n      Console::WriteLine(StripStartTags(s));\n}\n// The example displays the following output:\n//    The original strings:\n//    ---------------------\n//    &lt;b&gt;This is bold text&lt;/b&gt;\n//    &lt;H1&gt;This is large Text&lt;/H1&gt;\n//    &lt;b&gt;&lt;i&gt;&lt;font color = green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n//    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n//    &lt;This line simply begins with a lesser than symbol, it should not be modified\n//    \n//    Strings after starting tags have been stripped:\n//    -----------------------------------------------\n//    This is bold text&lt;/b&gt;\n//    This is large Text&lt;/H1&gt;\n//    This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n//    This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n//    &lt;This line simply begins with a lesser than symbol, it should not be modified\n</code></pre><pre><code class=\"lang-vb\" name=\"stringstartswith#1\">Public Class Example\n   Public Shared Sub Main()\n      Dim strSource() As String = { &quot;&lt;b&gt;This is bold text&lt;/b&gt;&quot;, \n                         &quot;&lt;H1&gt;This is large Text&lt;/H1&gt;&quot;, \n                         &quot;&lt;b&gt;&lt;i&gt;&lt;font color = green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&quot;, \n                         &quot;&lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;&quot;, \n                         &quot;&lt;This line simply begins with a lesser than symbol, it should not be modified&quot; }\n\n      &#39; Display the initial string array.\n      Console.WriteLine(&quot;The original strings:&quot;)\n      Console.WriteLine(&quot;---------------------&quot;)\n      For Each s In strSource\n         Console.WriteLine(s)\n      Next \n      Console.WriteLine()\n\n      Console.WriteLine(&quot;Strings after starting tags have been stripped:&quot;)\n      Console.WriteLine(&quot;-----------------------------------------------&quot;) \n\n      &#39; Display the strings with starting tags removed.\n      For Each s In strSource\n         Console.WriteLine(StripStartTags(s))\n      Next \n   End Sub \n\n   Private Shared Function StripStartTags(item As String) As String\n      &#39; Determine whether a tag begins the string.\n      If item.Trim().StartsWith(&quot;&lt;&quot;) Then\n         &#39; Find the closing tag.\n         Dim lastLocation As Integer = item.IndexOf(&quot;&gt;&quot;)\n         If lastLocation &gt;= 0 Then\n            &#39; Remove the tag.\n            item = item.Substring((lastLocation + 1))\n            \n            &#39; Remove any additional starting tags.\n            item = StripStartTags(item)\n         End If\n      End If\n      \n      Return item\n   End Function \nEnd Class \n&#39; The example displays the following output:\n&#39;    The original strings:\n&#39;    ---------------------\n&#39;    &lt;b&gt;This is bold text&lt;/b&gt;\n&#39;    &lt;H1&gt;This is large Text&lt;/H1&gt;\n&#39;    &lt;b&gt;&lt;i&gt;&lt;font color = green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n&#39;    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n&#39;    &lt;This line simply begins with a lesser than symbol, it should not be modified\n&#39;    \n&#39;    Strings after starting tags have been stripped:\n&#39;    -----------------------------------------------\n&#39;    This is bold text&lt;/b&gt;\n&#39;    This is large Text&lt;/H1&gt;\n&#39;    This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n&#39;    This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n&#39;    &lt;This line simply begins with a lesser than symbol, it should not be modified\n</code></pre><pre><code class=\"lang-cs\" name=\"stringstartswith#1\">using System;\n\npublic class Example \n{\n   public static void Main() {\n      string [] strSource = { &quot;&lt;b&gt;This is bold text&lt;/b&gt;&quot;, &quot;&lt;H1&gt;This is large Text&lt;/H1&gt;&quot;,\n                &quot;&lt;b&gt;&lt;i&gt;&lt;font color=green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&quot;,\n                &quot;&lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;&quot;,\n                &quot;&lt;This line simply begins with a lesser than symbol, it should not be modified&quot; };\n\n      // Display the initial string array.\n      Console.WriteLine(&quot;The original strings:&quot;);\n      Console.WriteLine(&quot;---------------------&quot;);\n      foreach (var s in strSource)\n         Console.WriteLine(s);\n      Console.WriteLine();\n\n      Console.WriteLine(&quot;Strings after starting tags have been stripped:&quot;);\n      Console.WriteLine(&quot;-----------------------------------------------&quot;);\n\n      // Display the strings with starting tags removed.\n     foreach (var s in strSource)\n        Console.WriteLine(StripStartTags(s));\n   }\n\n   private static string StripStartTags(string item) \n   {\n      // Determine whether a tag begins the string.\n      if (item.Trim().StartsWith(&quot;&lt;&quot;)) {\n         // Find the closing tag.\n         int lastLocation = item.IndexOf( &quot;&gt;&quot; );\n         // Remove the tag.\n         if (lastLocation &gt;= 0) {\n            item =  item.Substring( lastLocation + 1 );\n      \n            // Remove any additional starting tags.\n            item = StripStartTags(item);\n         }   \n      }\n\n      return item;\n   }\n}\n// The example displays the following output:\n//    The original strings:\n//    ---------------------\n//    &lt;b&gt;This is bold text&lt;/b&gt;\n//    &lt;H1&gt;This is large Text&lt;/H1&gt;\n//    &lt;b&gt;&lt;i&gt;&lt;font color = green&gt;This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n//    &lt;b&gt;This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n//    &lt;This line simply begins with a lesser than symbol, it should not be modified\n//    \n//    Strings after starting tags have been stripped:\n//    -----------------------------------------------\n//    This is bold text&lt;/b&gt;\n//    This is large Text&lt;/H1&gt;\n//    This has multiple tags&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;\n//    This has &lt;i&gt;embedded&lt;/i&gt; tags.&lt;/b&gt;\n//    &lt;This line simply begins with a lesser than symbol, it should not be modified\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_StartsWith_System_String_System_StringComparison_\">\r\n    \r\n            <a id=\"System_String_StartsWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StartsWith(String,StringComparison)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool StartsWith (string value, StringComparison comparisonType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparisonType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that determines how this string and <code>value</code> are compared.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this instance begins with <code>value</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparisonType</code> is not a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The StartsWith method compares the <code>value</code> parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal. To be equal, <code>value</code> must be a reference to this same string, must be the empty string (&quot;&quot;), or must match the beginning of this string. The type of comparison performed by the StartsWith method depends on the value of the <code>comparisonType</code> parameter. The comparison can use the conventions of the current culture (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> and <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>) or the invariant culture (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> and <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>), or it can consist of a character-by-character comparison of code points (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>). The comparison can also be case-sensitive (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>), or it can ignore case (<a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>, <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example searches for the string &quot;the&quot; at the beginning of a longer string that begins with the word &quot;The&quot;. As the output from the example shows, a call to the StartsWith method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.StartsWith#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String title = &quot;The House of the Seven Gables&quot;;\n      String searchString = &quot;the&quot;;\n      StringComparison comparison = StringComparison.InvariantCulture;\n      Console.WriteLine(&quot;&#39;{0}&#39;:&quot;, title);\n      Console.WriteLine(&quot;   Starts with &#39;{0}&#39; ({1:G} comparison): {2}&quot;,\n                        searchString, comparison,\n                        title.StartsWith(searchString, comparison));\n\n      comparison = StringComparison.InvariantCultureIgnoreCase;\n      Console.WriteLine(&quot;   Starts with &#39;{0}&#39; ({1:G} comparison): {2}&quot;,\n                        searchString, comparison,\n                        title.StartsWith(searchString, comparison));\n   }\n}\n// The example displays the following output:\n//       &#39;The House of the Seven Gables&#39;:\n//          Starts with &#39;the&#39; (InvariantCulture comparison): False\n//          Starts with &#39;the&#39; (InvariantCultureIgnoreCase comparison): True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.StartsWith#2\">using namespace System;\n\nvoid main()\n{\n   String^ title = &quot;The House of the Seven Gables&quot;;\n   String^ searchString = &quot;the&quot;;\n   StringComparison comparison = StringComparison::InvariantCulture;\n   Console::WriteLine(&quot;&#39;{0}&#39;:&quot;, title);\n   Console::WriteLine(&quot;   Starts with &#39;{0}&#39; ({1:G} comparison): {2}&quot;,\n                      searchString, comparison,\n                      title-&gt;StartsWith(searchString, comparison));\n\n   comparison = StringComparison::InvariantCultureIgnoreCase;\n   Console::WriteLine(&quot;   Starts with &#39;{0}&#39; ({1:G} comparison): {2}&quot;,\n                      searchString, comparison,\n                      title-&gt;StartsWith(searchString, comparison));\n   }\n// The example displays the following output:\n//       &#39;The House of the Seven Gables&#39;:\n//          Starts with &#39;the&#39; (InvariantCulture comparison): False\n//          Starts with &#39;the&#39; (InvariantCultureIgnoreCase comparison): True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.StartsWith#2\">Module Example\n   Public Sub Main()\n      Dim title As String = &quot;The House of the Seven Gables&quot;\n      Dim searchString As String = &quot;the&quot;\n      Dim comparison As StringComparison = StringComparison.InvariantCulture\n      Console.WriteLine(&quot;&#39;{0}&#39;:&quot;, title)\n      Console.WriteLine(&quot;   Starts with &#39;{0}&#39; ({1:G} comparison): {2}&quot;,\n                        searchString, comparison,\n                        title.StartsWith(searchString, comparison))\n\n      comparison = StringComparison.InvariantCultureIgnoreCase\n      Console.WriteLine(&quot;   Starts with &#39;{0}&#39; ({1:G} comparison): {2}&quot;,\n                        searchString, comparison,\n                        title.StartsWith(searchString, comparison))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;The House of the Seven Gables&#39;:\n&#39;       Starts with &#39;the&#39; (InvariantCulture comparison): False\n&#39;       Starts with &#39;the&#39; (InvariantCultureIgnoreCase comparison): True\n</code></pre><p> The following example determines whether a string starts with a particular substring. It initializes a two-dimensional string array. The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string. The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed. Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.StartsWith#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[,] strings = { {&quot;ABCdef&quot;, &quot;abc&quot; },                    \n                            {&quot;ABCdef&quot;, &quot;abc&quot; },  \n                            {&quot;Å“il&quot;,&quot;oe&quot; },\n                            { &quot;l&#230;ring}&quot;, &quot;lae&quot; } };\n      for (int ctr1 = strings.GetLowerBound(0); ctr1 &lt;= strings.GetUpperBound(0); ctr1++)\n      {\n            foreach (string cmpName in Enum.GetNames(typeof(StringComparison)))\n            { \n               StringComparison strCmp = (StringComparison) Enum.Parse(typeof(StringComparison), \n                                                      cmpName);\n               string instance = strings[ctr1, 0];\n               string value = strings[ctr1, 1];\n               Console.WriteLine(&quot;{0} starts with {1}: {2} ({3} comparison)&quot;, \n                                 instance, value, \n                                 instance.StartsWith(value, strCmp), \n                                 strCmp); \n            }\n            Console.WriteLine();   \n      }   \n   }\n}\n// The example displays the following output:\n//       ABCdef starts with abc: False (CurrentCulture comparison)\n//       ABCdef starts with abc: True (CurrentCultureIgnoreCase comparison)\n//       ABCdef starts with abc: False (InvariantCulture comparison)\n//       ABCdef starts with abc: True (InvariantCultureIgnoreCase comparison)\n//       ABCdef starts with abc: False (Ordinal comparison)\n//       ABCdef starts with abc: True (OrdinalIgnoreCase comparison)\n//       \n//       ABCdef starts with abc: False (CurrentCulture comparison)\n//       ABCdef starts with abc: True (CurrentCultureIgnoreCase comparison)\n//       ABCdef starts with abc: False (InvariantCulture comparison)\n//       ABCdef starts with abc: True (InvariantCultureIgnoreCase comparison)\n//       ABCdef starts with abc: False (Ordinal comparison)\n//       ABCdef starts with abc: True (OrdinalIgnoreCase comparison)\n//       \n//       Å“il starts with oe: True (CurrentCulture comparison)\n//       Å“il starts with oe: True (CurrentCultureIgnoreCase comparison)\n//       Å“il starts with oe: True (InvariantCulture comparison)\n//       Å“il starts with oe: True (InvariantCultureIgnoreCase comparison)\n//       Å“il starts with oe: False (Ordinal comparison)\n//       Å“il starts with oe: False (OrdinalIgnoreCase comparison)\n//       \n//       l&#230;ring} starts with lae: True (CurrentCulture comparison)\n//       l&#230;ring} starts with lae: True (CurrentCultureIgnoreCase comparison)\n//       l&#230;ring} starts with lae: True (InvariantCulture comparison)\n//       l&#230;ring} starts with lae: True (InvariantCultureIgnoreCase comparison)\n//       l&#230;ring} starts with lae: False (Ordinal comparison)\n//       l&#230;ring} starts with lae: False (OrdinalIgnoreCase comparison)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.StartsWith#1\">using namespace System;\n\nvoid main()\n{\n   array&lt;String^, 2&gt;^ strings = gcnew array&lt;String^, 2&gt; { {&quot;ABCdef&quot;, &quot;abc&quot; },                    \n                         {&quot;ABCdef&quot;, &quot;abc&quot; }, {&quot;Å“il&quot;,&quot;oe&quot; }, \n                         { &quot;l&#230;ring}&quot;, &quot;lae&quot; } };\n   for (int ctr1 = strings-&gt;GetLowerBound(0); ctr1 &lt;= strings-&gt;GetUpperBound(0); ctr1++)\n   {\n         for each (String^ cmpName in Enum::GetNames(StringComparison::typeid))\n         { \n            StringComparison strCmp = (StringComparison) Enum::Parse(StringComparison::typeid, \n                                                         cmpName);\n            String^ instance = strings[ctr1, 0];\n            String^ value = strings[ctr1, 1];\n            Console::WriteLine(&quot;{0} starts with {1}: {2} ({3} comparison)&quot;, \n                               instance, value, \n                               instance-&gt;StartsWith(value, strCmp), \n                               strCmp); \n         }\n         Console::WriteLine();   \n   }   \n}\n\n// The example displays the following output:\n//       ABCdef starts with abc: False (CurrentCulture comparison)\n//       ABCdef starts with abc: True (CurrentCultureIgnoreCase comparison)\n//       ABCdef starts with abc: False (InvariantCulture comparison)\n//       ABCdef starts with abc: True (InvariantCultureIgnoreCase comparison)\n//       ABCdef starts with abc: False (Ordinal comparison)\n//       ABCdef starts with abc: True (OrdinalIgnoreCase comparison)\n//       \n//       ABCdef starts with abc: False (CurrentCulture comparison)\n//       ABCdef starts with abc: True (CurrentCultureIgnoreCase comparison)\n//       ABCdef starts with abc: False (InvariantCulture comparison)\n//       ABCdef starts with abc: True (InvariantCultureIgnoreCase comparison)\n//       ABCdef starts with abc: False (Ordinal comparison)\n//       ABCdef starts with abc: True (OrdinalIgnoreCase comparison)\n//       \n//       Å“il starts with oe: True (CurrentCulture comparison)\n//       Å“il starts with oe: True (CurrentCultureIgnoreCase comparison)\n//       Å“il starts with oe: True (InvariantCulture comparison)\n//       Å“il starts with oe: True (InvariantCultureIgnoreCase comparison)\n//       Å“il starts with oe: False (Ordinal comparison)\n//       Å“il starts with oe: False (OrdinalIgnoreCase comparison)\n//       \n//       l&#230;ring} starts with lae: True (CurrentCulture comparison)\n//       l&#230;ring} starts with lae: True (CurrentCultureIgnoreCase comparison)\n//       l&#230;ring} starts with lae: True (InvariantCulture comparison)\n//       l&#230;ring} starts with lae: True (InvariantCultureIgnoreCase comparison)\n//       l&#230;ring} starts with lae: False (Ordinal comparison)\n//       l&#230;ring} starts with lae: False (OrdinalIgnoreCase comparison)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.StartsWith#1\">Module Example\n   Public Sub Main()\n      Dim strings(,) As String = { {&quot;ABCdef&quot;, &quot;abc&quot; },                    \n                                   {&quot;ABCdef&quot;, &quot;abc&quot; },  \n                                   {&quot;Å“il&quot;,&quot;oe&quot; },\n                                   { &quot;l&#230;ring}&quot;, &quot;lae&quot; } }\n      For ctr1 As Integer = strings.GetLowerBound(0) To strings.GetUpperBound(0)\n            For Each cmpName As String In [Enum].GetNames(GetType(StringComparison)) \n               Dim strCmp As StringComparison = CType([Enum].Parse(GetType(StringComparison), \n                                                      cmpName), StringComparison)\n               Dim instance As String = strings(ctr1, 0)\n               Dim value As String = strings(ctr1, 1)\n               Console.WriteLine(&quot;{0} starts with {1}: {2} ({3} comparison)&quot;, \n                                 instance, value, \n                                 instance.StartsWith(value, strCmp), \n                                 strCmp) \n            Next\n            Console.WriteLine()   \n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       ABCdef starts with abc: False (CurrentCulture comparison)\n&#39;       ABCdef starts with abc: True (CurrentCultureIgnoreCase comparison)\n&#39;       ABCdef starts with abc: False (InvariantCulture comparison)\n&#39;       ABCdef starts with abc: True (InvariantCultureIgnoreCase comparison)\n&#39;       ABCdef starts with abc: False (Ordinal comparison)\n&#39;       ABCdef starts with abc: True (OrdinalIgnoreCase comparison)\n&#39;       \n&#39;       ABCdef starts with abc: False (CurrentCulture comparison)\n&#39;       ABCdef starts with abc: True (CurrentCultureIgnoreCase comparison)\n&#39;       ABCdef starts with abc: False (InvariantCulture comparison)\n&#39;       ABCdef starts with abc: True (InvariantCultureIgnoreCase comparison)\n&#39;       ABCdef starts with abc: False (Ordinal comparison)\n&#39;       ABCdef starts with abc: True (OrdinalIgnoreCase comparison)\n&#39;       \n&#39;       Å“il starts with oe: True (CurrentCulture comparison)\n&#39;       Å“il starts with oe: True (CurrentCultureIgnoreCase comparison)\n&#39;       Å“il starts with oe: True (InvariantCulture comparison)\n&#39;       Å“il starts with oe: True (InvariantCultureIgnoreCase comparison)\n&#39;       Å“il starts with oe: False (Ordinal comparison)\n&#39;       Å“il starts with oe: False (OrdinalIgnoreCase comparison)\n&#39;       \n&#39;       l&#230;ring} starts with lae: True (CurrentCulture comparison)\n&#39;       l&#230;ring} starts with lae: True (CurrentCultureIgnoreCase comparison)\n&#39;       l&#230;ring} starts with lae: True (InvariantCulture comparison)\n&#39;       l&#230;ring} starts with lae: True (InvariantCultureIgnoreCase comparison)\n&#39;       l&#230;ring} starts with lae: False (Ordinal comparison)\n&#39;       l&#230;ring} starts with lae: False (OrdinalIgnoreCase comparison)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_StartsWith_System_String_System_Boolean_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_String_StartsWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StartsWith(String,Boolean,CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore case during the comparison; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Cultural information that determines how this string and <code>value</code> are compared. If <code>culture</code> is <code>null</code>, the current culture is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter matches the beginning of this string; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method compares the <code>value</code> parameter to the substring at the beginning of this string that is the same length as <code>value</code>, and returns a value that indicates whether they are equal. To be equal, <code>value</code> must be an empty string (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>), must be a reference to this same instance, or must match the beginning of this instance.  </p>\n<p> This method performs a comparison using the specified casing and culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a string occurs at the beginning of another string. The StartsWith method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.  </p>\n<pre><code class=\"lang-vb\" name=\"system.string.StartsWithCI#1\">&#39; This code example demonstrates the \n&#39; System.String.StartsWith(String, ..., CultureInfo) method.\n\nImports System\nImports System.Threading\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim msg1 As String = &quot;Search for the target string &quot;&quot;{0}&quot;&quot; in the string &quot;&quot;{1}&quot;&quot;.&quot; &amp; vbCrLf\n        Dim msg2 As String = &quot;Using the {0} - &quot;&quot;{1}&quot;&quot; culture:&quot;\n        Dim msg3 As String = &quot;  The string to search ends with the target string: {0}&quot;\n        Dim result As Boolean = False\n        Dim ci As CultureInfo\n        \n        &#39; Define a target string to search for.\n        &#39; U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n        Dim capitalARing As String = &quot;&#197;&quot;\n        \n        &#39; Define a string to search. \n        &#39; The result of combining the characters LATIN SMALL LETTER A and COMBINING \n        &#39; RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n        &#39; LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n        Dim aRingXYZ As String = &quot;aÌŠ&quot; &amp; &quot;xyz&quot;\n        \n        &#39; Clear the screen and display an introduction.\n        Console.Clear()\n        \n        &#39; Display the string to search for and the string to search.\n        Console.WriteLine(msg1, capitalARing, aRingXYZ)\n        \n        &#39; Search using English-United States culture.\n        ci = New CultureInfo(&quot;en-US&quot;)\n        Console.WriteLine(msg2, ci.DisplayName, ci.Name)\n        \n        Console.WriteLine(&quot;Case sensitive:&quot;)\n        result = aRingXYZ.StartsWith(capitalARing, False, ci)\n        Console.WriteLine(msg3, result)\n        \n        Console.WriteLine(&quot;Case insensitive:&quot;)\n        result = aRingXYZ.StartsWith(capitalARing, True, ci)\n        Console.WriteLine(msg3, result)\n        Console.WriteLine()\n        \n        &#39; Search using Swedish-Sweden culture.\n        ci = New CultureInfo(&quot;sv-SE&quot;)\n        Console.WriteLine(msg2, ci.DisplayName, ci.Name)\n        \n        Console.WriteLine(&quot;Case sensitive:&quot;)\n        result = aRingXYZ.StartsWith(capitalARing, False, ci)\n        Console.WriteLine(msg3, result)\n        \n        Console.WriteLine(&quot;Case insensitive:&quot;)\n        result = aRingXYZ.StartsWith(capitalARing, True, ci)\n        Console.WriteLine(msg3, result)\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n\n&#39;\n&#39;Note: This code example was executed on a console whose user interface \n&#39;culture is &quot;en-US&quot; (English-United States).\n&#39;\n&#39;Search for the target string &quot;&#197;&quot; in the string &quot;a&#176;xyz&quot;.\n&#39;\n&#39;Using the English (United States) - &quot;en-US&quot; culture:\n&#39;Case sensitive:\n&#39;  The string to search ends with the target string: False\n&#39;Case insensitive:\n&#39;  The string to search ends with the target string: True\n&#39;\n&#39;Using the Swedish (Sweden) - &quot;sv-SE&quot; culture:\n&#39;Case sensitive:\n&#39;  The string to search ends with the target string: False\n&#39;Case insensitive:\n&#39;  The string to search ends with the target string: False\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"system.string.StartsWithCI#1\">// This code example demonstrates the \n// System.String.StartsWith(String, ..., CultureInfo) method.\n\nusing System;\nusing System.Threading;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string msg1 = &quot;Search for the target string \\&quot;{0}\\&quot; in the string \\&quot;{1}\\&quot;.<br>&quot;;\n    string msg2 = &quot;Using the {0} - \\&quot;{1}\\&quot; culture:&quot;;\n    string msg3 = &quot;  The string to search ends with the target string: {0}&quot;;\n    bool result = false;\n    CultureInfo ci;\n\n// Define a target string to search for.\n// U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\n    string capitalARing = &quot;\\u00c5&quot;;\n\n// Define a string to search. \n// The result of combining the characters LATIN SMALL LETTER A and COMBINING \n// RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \n// LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\n    string aRingXYZ = &quot;\\u0061\\u030a&quot; + &quot;xyz&quot;;\n\n// Clear the screen and display an introduction.\n    Console.Clear();\n\n// Display the string to search for and the string to search.\n    Console.WriteLine(msg1, capitalARing, aRingXYZ);\n\n// Search using English-United States culture.\n    ci = new CultureInfo(&quot;en-US&quot;);\n    Console.WriteLine(msg2, ci.DisplayName, ci.Name);\n\n    Console.WriteLine(&quot;Case sensitive:&quot;);\n    result = aRingXYZ.StartsWith(capitalARing, false, ci);\n    Console.WriteLine(msg3, result);\n\n    Console.WriteLine(&quot;Case insensitive:&quot;);\n    result = aRingXYZ.StartsWith(capitalARing, true, ci);\n    Console.WriteLine(msg3, result);\n    Console.WriteLine();\n\n// Search using Swedish-Sweden culture.\n    ci = new CultureInfo(&quot;sv-SE&quot;);\n    Console.WriteLine(msg2, ci.DisplayName, ci.Name);\n\n    Console.WriteLine(&quot;Case sensitive:&quot;);\n    result = aRingXYZ.StartsWith(capitalARing, false, ci);\n    Console.WriteLine(msg3, result);\n\n    Console.WriteLine(&quot;Case insensitive:&quot;);\n    result = aRingXYZ.StartsWith(capitalARing, true, ci);\n    Console.WriteLine(msg3, result);\n    }\n}\n\n/*\nNote: This code example was executed on a console whose user interface \nculture is &quot;en-US&quot; (English-United States).\n\nSearch for the target string &quot;ï¿½&quot; in the string &quot;aï¿½xyz&quot;.\n\nUsing the English (United States) - &quot;en-US&quot; culture:\nCase sensitive:\n  The string to search ends with the target string: False\nCase insensitive:\n  The string to search ends with the target string: True\n\nUsing the Swedish (Sweden) - &quot;sv-SE&quot; culture:\nCase sensitive:\n  The string to search ends with the target string: False\nCase insensitive:\n  The string to search ends with the target string: False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Substring_System_Int32_\">\r\n    \r\n            <a id=\"System_String_Substring_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Substring(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Substring (int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting character position of a substring in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that is equivalent to the substring that begins at <code>startIndex</code> in this instance, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>startIndex</code> is equal to the length of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You call the Substring method to extract a substring from a string that begins at a specified character position and ends at the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and ends before to the end of the string, call the <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string that begins at the <code>startIndex</code> position in the current string.  </p>\n</div>\n<p> To extract a substring that begins with a particular character or character sequence, call a method such as  <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> to get the value of <code>startIndex</code>. The second example illustrates this; it extracts a key value that begins one character position after the &quot;=&quot; character.  </p>\n<p> If <code>startIndex</code> is equal to zero, the method returns the original string unchanged.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates obtaining a substring from a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Substring#10\">using namespace System;\nusing namespace System::Collections;\n\nint main()\n{\n   array&lt;String^&gt;^info = { &quot;Name: Felica Walker&quot;, &quot;Title: Mz.&quot;,\n                           &quot;Age: 47&quot;, &quot;Location: Paris&quot;, &quot;Gender: F&quot;};\n   int found = 0;\n   Console::WriteLine(&quot;The initial values in the array are:&quot;);\n   for each (String^ s in info) \n      Console::WriteLine(s);\n\n   Console::WriteLine(&quot;<br>We want to retrieve only the key information. That is:&quot;);\n   for each (String^ s in info) { \n      found = s-&gt;IndexOf(&quot;: &quot;);\n      Console::WriteLine(&quot;   {0}&quot;, s-&gt;Substring(found + 2));\n   }\n}\n// The example displays the following output:\n//       The initial values in the array are:\n//       Name: Felica Walker\n//       Title: Mz.\n//       Age: 47\n//       Location: Paris\n//       Gender: F\n//       \n//       We want to retrieve only the key information. That is:\n//       Felica Walker\n//       Mz.\n//       47\n//       Paris\n//       F\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Substring#10\">Public Class SubStringTest\n    Public Shared Sub Main()\n        Dim info As String() = { &quot;Name: Felica Walker&quot;, &quot;Title: Mz.&quot;, \n                                 &quot;Age: 47&quot;, &quot;Location: Paris&quot;, &quot;Gender: F&quot;}\n        Dim found As Integer = 0\n       \n        Console.WriteLine(&quot;The initial values in the array are:&quot;)\n        For Each s As String In info\n            Console.WriteLine(s)\n        Next s\n\n        Console.WriteLine(vbCrLf + &quot;We want to retrieve only the key information. That is:&quot;)\n        For Each s As String In info\n            found = s.IndexOf(&quot;: &quot;)\n            Console.WriteLine(&quot;   {0}&quot;, s.Substring(found + 2))\n        Next s\n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;       The initial values in the array are:\n&#39;       Name: Felica Walker\n&#39;       Title: Mz.\n&#39;       Age: 47\n&#39;       Location: Paris\n&#39;       Gender: F\n&#39;       \n&#39;       We want to retrieve only the key information. That is:\n&#39;          Felica Walker\n&#39;          Mz.\n&#39;          47\n&#39;          Paris\n&#39;          F\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Substring#10\">using System;\n\npublic class SubStringTest {\n    public static void Main() {\n        string [] info = { &quot;Name: Felica Walker&quot;, &quot;Title: Mz.&quot;, \n                           &quot;Age: 47&quot;, &quot;Location: Paris&quot;, &quot;Gender: F&quot;};\n        int found = 0;\n\n        Console.WriteLine(&quot;The initial values in the array are:&quot;);\n        foreach (string s in info)\n            Console.WriteLine(s);\n\n        Console.WriteLine(&quot;<br>We want to retrieve only the key information. That is:&quot;);        \n        foreach (string s in info) {\n            found = s.IndexOf(&quot;: &quot;);\n            Console.WriteLine(&quot;   {0}&quot;, s.Substring(found + 2));\n        }\n    }\n}\n// The example displays the following output:\n//       The initial values in the array are:\n//       Name: Felica Walker\n//       Title: Mz.\n//       Age: 47\n//       Location: Paris\n//       Gender: F\n//       \n//       We want to retrieve only the key information. That is:\n//          Felica Walker\n//          Mz.\n//          47\n//          Paris\n//          F\n</code></pre><p> The following example uses the <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a> method to separate key/value pairs that are delimited by an equals (&quot;=&quot;) character.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Substring#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] pairs = { &quot;Color1=red&quot;, &quot;Color2=green&quot;, &quot;Color3=blue&quot;,\n                         &quot;Title=Code Repository&quot; };\n      foreach (var pair in pairs) {\n         int position = pair.IndexOf(&quot;=&quot;);\n         if (position &lt; 0)\n            continue;\n         Console.WriteLine(&quot;Key: {0}, Value: &#39;{1}&#39;&quot;, \n                           pair.Substring(0, position),\n                           pair.Substring(position + 1));\n      }                          \n   }\n}\n// The example displays the following output:\n//     Key: Color1, Value: &#39;red&#39;\n//     Key: Color2, Value: &#39;green&#39;\n//     Key: Color3, Value: &#39;blue&#39;\n//     Key: Title, Value: &#39;Code Repository&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Substring#1\">Module Example\n   Public Sub Main()\n      Dim pairs() As String = { &quot;Color1=red&quot;, &quot;Color2=green&quot;, &quot;Color3=blue&quot;,\n                                &quot;Title=Code Repository&quot; }\n      For Each pair In pairs\n         Dim position As Integer = pair.IndexOf(&quot;=&quot;)\n         If position &lt; 0 then Continue For\n         Console.WriteLine(&quot;Key: {0}, Value: &#39;{1}&#39;&quot;, \n                           pair.Substring(0, position),\n                           pair.Substring(position + 1))\n      Next                          \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Key: Color1, Value: &#39;red&#39;\n&#39;     Key: Color2, Value: &#39;green&#39;\n&#39;     Key: Color3, Value: &#39;blue&#39;\n&#39;     Key: Title, Value: &#39;Code Repository&#39;\n</code></pre><p> The <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method is used to get the position of the equals character in the string.. The call to the <a class=\"xref\" href=\"system.string#System_String_Substring_System_Int32_System_Int32_\" data-linktype=\"relative-path\">Substring(Int32,Int32)</a> method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. The call to the Substring method then extracts the value assigned to the key. It starts at one character position beyond the equals character and extends to the end of the string.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Substring_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_Substring_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Substring(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Substring (int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting character position of a substring in this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in the substring.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that is equivalent to the substring of length <code>length</code> that begins at <code>startIndex</code> in this instance, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>startIndex</code> is equal to the length of this instance and <code>length</code> is zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> plus <code>length</code> indicates a position not within this instance.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> or <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You call the Substring method to extract a substring from a string that begins at a specified character position and ends before the end of the string. The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1. To extract a substring that begins at a specified character position and continues to the end of the string, call the <a class=\"xref\" href=\"system.string#System_String_Substring_System_Int32_\" data-linktype=\"relative-path\">Substring(Int32)</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string with <code>length</code> characters starting from the <code>startIndex</code> position in the current string.  </p>\n</div>\n<p> The <code>length</code> parameter represents the total number of characters to extract from the current string instance. This includes the starting character found at index  <code>startIndex</code>.  In other words, the Substring method attempts to extract characters from index <code>startIndex</code> to index <code>startIndex</code> + <code>length</code> - 1.  </p>\n<p> To extract a substring that begins with a particular character or character sequence, call a method such as  <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> to get the value of <code>startIndex</code>.  </p>\n<p> If the substring extends from <code>startIndex</code> to a specified character sequence, you can call a method such as  <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> to get the index of the ending character or character sequence.  You can then convert that value to an index position in the string as follows:  </p>\n<ul>\n<li><p>If you&#39;ve searched for a single character that is to mark the end of the substring, the <code>length</code> parameter equals  <code>endIndex</code> - <code>startIndex</code> + 1, where <code>endIndex</code> is the return value of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. The following example extracts a continuous block of &quot;b&quot; characters from a string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Substring#2\">Module Example\n   Public Sub Main()\n      Dim s As String = &quot;aaaaabbbcccccccdd&quot;\n      Dim charRange As Char = &quot;b&quot;c\n      Dim startIndex As Integer = s.Indexof(charRange)\n      Dim endIndex As Integer = s.LastIndexOf(charRange)\n      Dim length = endIndex - startIndex + 1\n      Console.WriteLine(&quot;{0}.Substring({1}, {2}) = {3}&quot;,\n                        s, startIndex, length, \n                        s.Substring(startIndex, length))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     aaaaabbbcccccccdd.Substring(5, 3) = bbb\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Substring#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;aaaaabbbcccccccdd&quot;;\n      Char charRange = &#39;b&#39;;\n      int startIndex = s.IndexOf(charRange);\n      int endIndex = s.LastIndexOf(charRange);\n      int length = endIndex - startIndex + 1;\n      Console.WriteLine(&quot;{0}.Substring({1}, {2}) = {3}&quot;,\n                        s, startIndex, length, \n                        s.Substring(startIndex, length));\n   }\n}\n// The example displays the following output:\n//       aaaaabbbcccccccdd.Substring(5, 3) = bbb\n</code></pre></li>\n<li><p>If you&#39;ve searched for multiple characters that are to mark the end of the substring, the <code>length</code> parameter equals  <code>endIndex</code> + <code>endMatchLength</code> - <code>startIndex</code>, where <code>endIndex</code> is the return value of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method., and <code>endMatchLength</code> is the length of the character sequence that marks the end of the substring. The following example extracts a block of text that contains an XML <code>&lt;definition&gt;</code> element.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Substring#3\">Module Example\n   Public Sub Main()\n      Dim s As String = &quot;&lt;term&gt;extant&lt;definition&gt;still in existence&lt;/definition&gt;&lt;/term&gt;&quot;\n      Dim searchString As String = &quot;&lt;definition&gt;&quot;\n      Dim startindex As Integer = s.IndexOf(searchString)\n      searchString = &quot;&lt;/&quot; + searchString.Substring(1)\n      Dim endIndex As Integer = s.IndexOf(searchString)\n      Dim substring As String = s.Substring(startIndex, endIndex + searchString.Length - StartIndex)\n      Console.WriteLine(&quot;Original string: {0}&quot;, s)\n      Console.WriteLine(&quot;Substring;       {0}&quot;, substring) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   Original string: &lt;term&gt;extant&lt;definition&gt;still in existence&lt;/definition&gt;&lt;/term&gt;\n&#39;   Substring;       &lt;definition&gt;still in existence&lt;/definition&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Substring#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;&lt;term&gt;extant&lt;definition&gt;still in existence&lt;/definition&gt;&lt;/term&gt;&quot;;\n      String searchString = &quot;&lt;definition&gt;&quot;;\n      int startIndex = s.IndexOf(searchString);\n      searchString = &quot;&lt;/&quot; + searchString.Substring(1);\n      int endIndex = s.IndexOf(searchString);\n      String substring = s.Substring(startIndex, endIndex + searchString.Length - startIndex);\n      Console.WriteLine(&quot;Original string: {0}&quot;, s);\n      Console.WriteLine(&quot;Substring;       {0}&quot;, substring); \n   }\n}\n// The example displays the following output:\n//     Original string: &lt;term&gt;extant&lt;definition&gt;still in existence&lt;/definition&gt;&lt;/term&gt;\n//     Substring;       &lt;definition&gt;still in existence&lt;/definition&gt;\n</code></pre></li>\n<li><p>If the character or character sequence is not included in the end of the substring, the <code>length</code> parameter equals <code>endIndex</code> - <code>startIndex</code>, where <code>endIndex</code> is the return value of the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method.  </p>\n<p>If <code>startIndex</code> is equal to zero and  equals the length of the current string, the method returns the original string unchanged.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates a simple call to the Substring method that extracts two characters from a string starting at the sixth character position (that is, at index five).  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.Substring#4\">Module Example\n   Public Sub Main()\n      Dim value As String = &quot;This is a string.&quot;\n      Dim startIndex As Integer = 5\n      Dim length As Integer = 2\n      Dim substring As String = value.Substring(startIndex, length)\n      Console.WriteLine(substring)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       is\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Substring#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String value = &quot;This is a string.&quot;;\n      int startIndex = 5;\n      int length = 2;\n      String substring = value.Substring(startIndex, length);\n      Console.WriteLine(substring);\n   }\n}\n// The example displays the following output:\n//       is\n</code></pre><p> The following example uses the Substring method in the following three cases to isolate substrings within a string. In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.  </p>\n<ul>\n<li><p>It extracts the single character and the third position in the string (at index 2) and compares it with a &quot;c&quot;. This comparison returns <code>true</code>.  </p>\n</li>\n<li><p>It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a> method. This returns true because the call to the Substring method returns <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n</li>\n<li><p>It attempts to extract one character starting at the fourth position in the string. Because there is no character at that position, the method call throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> exception.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic String.Substring1 Example#1\">Public Class Sample\n   Public Shared Sub Main()\n      Dim myString As String = &quot;abc&quot;\n      Dim test1 As Boolean = myString.Substring(2, 1).Equals(&quot;c&quot;) &#39; This is true.\n      Console.WriteLine(test1)\n      Dim test2 As Boolean = String.IsNullOrEmpty(myString.Substring(3, 0)) &#39; This is true.\n      Console.WriteLine(test2)\n      Try  \n         Dim str3 As String = myString.Substring(3, 1) &#39; This throws ArgumentOutOfRangeException.\n         Console.WriteLine(str3)\n      Catch e As ArgumentOutOfRangeException\n         Console.WriteLIne(e.Message)\n      End Try   \n   End Sub\nEnd Class \n&#39; The example displays the following output:\n&#39;       True\n&#39;       True\n&#39;       Index and length must refer to a location within the string.\n&#39;       Parameter name: length\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic String.Substring1 Example#1\">using System;\n\npublic class Sample\n{\n   public static void Main() {\n      String myString = &quot;abc&quot;;\n      bool test1 = myString.Substring(2, 1).Equals(&quot;c&quot;); // This is true.\n      Console.WriteLine(test1);\n      bool test2 = String.IsNullOrEmpty(myString.Substring(3, 0)); // This is true.\n      Console.WriteLine(test2);\n      try {\n         string str3 = myString.Substring(3, 1); // This throws ArgumentOutOfRangeException.\n         Console.WriteLine(str3);\n      }\n      catch (ArgumentOutOfRangeException e) {\n         Console.WriteLine(e.Message);\n      }         \n   }\n}\n// The example displays the following output:\n//       True\n//       True\n//       Index and length must refer to a location within the string.\n//       Parameter name: length\n</code></pre><p>The following example uses the <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a> method to separate key/value pairs that are delimited by an equals (&quot;=&quot;) character.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.Substring#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] pairs = { &quot;Color1=red&quot;, &quot;Color2=green&quot;, &quot;Color3=blue&quot;,\n                         &quot;Title=Code Repository&quot; };\n      foreach (var pair in pairs) {\n         int position = pair.IndexOf(&quot;=&quot;);\n         if (position &lt; 0)\n            continue;\n         Console.WriteLine(&quot;Key: {0}, Value: &#39;{1}&#39;&quot;, \n                           pair.Substring(0, position),\n                           pair.Substring(position + 1));\n      }                          \n   }\n}\n// The example displays the following output:\n//     Key: Color1, Value: &#39;red&#39;\n//     Key: Color2, Value: &#39;green&#39;\n//     Key: Color3, Value: &#39;blue&#39;\n//     Key: Title, Value: &#39;Code Repository&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Substring#1\">Module Example\n   Public Sub Main()\n      Dim pairs() As String = { &quot;Color1=red&quot;, &quot;Color2=green&quot;, &quot;Color3=blue&quot;,\n                                &quot;Title=Code Repository&quot; }\n      For Each pair In pairs\n         Dim position As Integer = pair.IndexOf(&quot;=&quot;)\n         If position &lt; 0 then Continue For\n         Console.WriteLine(&quot;Key: {0}, Value: &#39;{1}&#39;&quot;, \n                           pair.Substring(0, position),\n                           pair.Substring(position + 1))\n      Next                          \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Key: Color1, Value: &#39;red&#39;\n&#39;     Key: Color2, Value: &#39;green&#39;\n&#39;     Key: Color3, Value: &#39;blue&#39;\n&#39;     Key: Title, Value: &#39;Code Repository&#39;\n</code></pre><p>The <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method is used to get the position of the equals character in the string.. The call to the Substring method extracts the key name., which starts from the first character in the string and extends for the number of characters returned by the call to the    <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. The call to the <a class=\"xref\" href=\"system.string#System_String_Substring_System_Int32_\" data-linktype=\"relative-path\">Substring(Int32)</a> method then extracts the value assigned to the key. It starts at one character position beyond the equals character and extends to the end of the string.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToCharArray\">\r\n    \r\n            <a id=\"System_String_ToCharArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToCharArray()</div>        \r\n          </div>\r\n    \r\n            <p>Copies the characters in this instance to a Unicode character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public char[] ToCharArray ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </div>\r\n                  <p>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method copies each character (that is, each <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object) in a string to a character array. The first character copied is at index zero of the returned character array; the last character copied is at index <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> â€“ 1.  </p>\n<p> To create a string from the characters in a character array, call the [String(Char&lt;xref:System.String.%23ctor%28System.Char%5B%5D%29&gt; constructor.  </p>\n<p> To create a byte array that contains the encoded characters in a string, instantiate the appropriate <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object and call its <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_String_\" data-linktype=\"relative-path\">System.Text.Encoding.GetBytes(String)</a> method. Some of the standard encodings available in the .NET Framework include the following:  </p>\n<table>\n<thead>\n<tr>\n<th>Encoding</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII</td>\n<td><a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a></td>\n</tr>\n<tr>\n<td>UTF-7</td>\n<td><a class=\"xref\" href=\"system.text.utf7encoding\" data-linktype=\"relative-path\">UTF7Encoding</a></td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td><a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a></td>\n</tr>\n<tr>\n<td>UTF-16</td>\n<td><a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a></td>\n</tr>\n<tr>\n<td>UTF-32</td>\n<td><a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a></td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the ToCharArray method to extract the characters in a string to a character array. It then displays the original string and the elements in the array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.ToCharArray#1\">Module Example\n   Public Sub Main()\n      Dim s As String = &quot;AaBbCcDd&quot;\n      Dim chars() = s.ToCharArray()\n      Console.WriteLine(&quot;Original string: {0}&quot;, s)\n      Console.WriteLine(&quot;Character array:&quot;)\n      For ctr = 0 to chars.Length - 1\n         Console.WriteLine(&quot;   {0}: {1}&quot;, ctr, chars(ctr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Original string: AaBbCcDd\n&#39;     Character array:\n&#39;        0: A\n&#39;        1: a\n&#39;        2: B\n&#39;        3: b\n&#39;        4: C\n&#39;        5: c\n&#39;        6: D\n&#39;        7: d\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.ToCharArray#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;AaBbCcDd&quot;;\n      var chars = s.ToCharArray();\n      Console.WriteLine(&quot;Original string: {0}&quot;, s);\n      Console.WriteLine(&quot;Character array:&quot;);\n      for (int ctr = 0; ctr &lt; chars.Length; ctr++)\n         Console.WriteLine(&quot;   {0}: {1}&quot;, ctr, chars[ctr]);\n   }\n}\n\n// The example displays the following output:\n//     Original string: AaBbCcDd\n//     Character array:\n//        0: A\n//        1: a\n//        2: B\n//        3: b\n//        4: C\n//        5: c\n//        6: D\n//        7: d\n</code></pre><p> The following example defines a string containing the characters that serve as delimiters in a delimited string. It then calls the ToCharArray method to create a character array that can be passed to the [Split(Char&lt;xref:System.String.Split%28System.Char%5B%5D%29&gt; method to separate the delimited string into its individual substrings.  </p>\n<pre><code class=\"lang-cs\" name=\"StringSplit2#1\">This snippet ID 1 is used in multiple files: /CS/Split1.cs, /CS/stringsplit2.cs. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre><pre><code class=\"lang-cs\" name=\"StringSplit2#1\">This snippet ID 1 is used in multiple files: /CS/Split1.cs, /CS/stringsplit2.cs. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre><pre><code class=\"lang-cpp\" name=\"StringSplit2#1\">using namespace System;\nusing namespace System::Collections;\nint main()\n{\n   String^ delimStr = &quot; ,.:&quot;;\n   array&lt;Char&gt;^delimiter = delimStr-&gt;ToCharArray();\n   String^ words = &quot;one two,three:four.&quot;;\n   array&lt;String^&gt;^split = nullptr;\n   Console::WriteLine( &quot;The delimiters are -{0}-&quot;, delimStr );\n   for ( int x = 1; x &lt;= 5; x++ )\n   {\n      split = words-&gt;Split( delimiter, x );\n      Console::WriteLine( &quot;<br>count = {0, 2} ..............&quot;, x );\n      IEnumerator^ myEnum = split-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( &quot;-{0}-&quot;, s );\n      }\n\n   }\n}\n// The example displays the following output:\n//       The delimiters are - ,.:-\n//       count =  1 ..............\n//       -one two,three:four.-\n//       count =  2 ..............\n//       -one-\n//       -two,three:four.-\n//       count =  3 ..............\n//       -one-\n//       -two-\n//       -three:four.-\n//       count =  4 ..............\n//       -one-\n//       -two-\n//       -three-\n//       -four.-\n//       count =  5 ..............\n//       -one-\n//       -two-\n//       -three-\n//       -four-\n//       --\n</code></pre><pre><code class=\"lang-vb\" name=\"StringSplit2#1\">Public Class StringSplit2\n   Public Shared Sub Main()\n      \n      Dim delimStr As String = &quot; ,.:&quot;\n      Dim delimiter As Char() = delimStr.ToCharArray()\n      Dim words As String = &quot;one two,three:four.&quot;\n      Dim split As String() = Nothing\n      \n      Console.WriteLine(&quot;The delimiters are -{0}-&quot;, delimStr)\n      Dim x As Integer\n      For x = 1 To 5\n         split = words.Split(delimiter, x)\n         Console.WriteLine(ControlChars.Cr + &quot;count = {0,2} ..............&quot;, x)\n         Dim s As String\n         For Each s In  split\n            Console.WriteLine(&quot;-{0}-&quot;, s)\n         Next s\n      Next x\n   End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;       The delimiters are - ,.:-\n&#39;       count =  1 ..............\n&#39;       -one two,three:four.-\n&#39;       count =  2 ..............\n&#39;       -one-\n&#39;       -two,three:four.-\n&#39;       count =  3 ..............\n&#39;       -one-\n&#39;       -two-\n&#39;       -three:four.-\n&#39;       count =  4 ..............\n&#39;       -one-\n&#39;       -two-\n&#39;       -three-\n&#39;       -four.-\n&#39;       count =  5 ..............\n&#39;       -one-\n&#39;       -two-\n&#39;       -three-\n&#39;       -four-\n&#39;       --\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToCharArray_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_String_ToCharArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToCharArray(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the characters in a specified substring in this instance to a Unicode character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public char[] ToCharArray (int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position of a substring in this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the substring in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </div>\r\n                  <p>A Unicode character array whose elements are the <code>length</code> number of characters in this instance starting from character position <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>length</code> is greater than the length of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method copies the characters in a portion of a string to a character array. To create a string from a range of characters in a character array, call the  [String(Char&lt;xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; constructor.  </p>\n<p> The <code>startIndex</code> parameter is zero-based. That is, the index of the first character in the string instance is zero.  </p>\n<p> If <code>length</code> is zero, the returned array is empty and has a zero length. If this instance is <code>null</code> or an empty string (&quot;&quot;), the returned array is empty and has a zero length.  </p>\n<p> To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object and call its [GetBytes(String,â€‚Int32,â€‚Int32,â€‚Byte&lt;xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29&gt; method. Some of the standard encodings available in the .NET Framework include the following:  </p>\n<table>\n<thead>\n<tr>\n<th>Encoding</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII</td>\n<td><a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a></td>\n</tr>\n<tr>\n<td>UTF-7</td>\n<td><a class=\"xref\" href=\"system.text.utf7encoding\" data-linktype=\"relative-path\">UTF7Encoding</a></td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td><a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a></td>\n</tr>\n<tr>\n<td>UTF-16</td>\n<td><a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a></td>\n</tr>\n<tr>\n<td>UTF-32</td>\n<td><a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a></td>\n</tr>\n</tbody>\n</table>\n<p> For more information, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.tochararray1#1\">// Sample for String::ToCharArray(Int32, Int32)\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   String^ str = &quot;012wxyz789&quot;;\n   array&lt;Char&gt;^arr;\n   arr = str-&gt;ToCharArray( 3, 4 );\n   Console::Write( &quot;The letters in &#39;{0}&#39; are: &#39;&quot;, str );\n   Console::Write( arr );\n   Console::WriteLine( &quot;&#39;&quot; );\n   Console::WriteLine( &quot;Each letter in &#39;{0}&#39; is:&quot;, str );\n   IEnumerator^ myEnum = arr-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Char c =  safe_cast&lt;Char&gt;(myEnum-&gt;Current);\n      Console::WriteLine( c );\n   }\n}\n\n/*\nThis example produces the following results:\nThe letters in &#39;012wxyz789&#39; are: &#39;wxyz&#39;\nEach letter in &#39;012wxyz789&#39; is:\nw\nx\ny\nz\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.tochararray1#1\">&#39; Sample for String.ToCharArray(Int32, Int32)\nImports System\n\nClass Sample\n   \n   Public Shared Sub Main()\n      Dim str As String = &quot;012wxyz789&quot;\n      Dim arr() As Char\n      \n      arr = str.ToCharArray(3, 4)\n      Console.Write(&quot;The letters in &#39;{0}&#39; are: &#39;&quot;, str)\n      Console.Write(arr)\n      Console.WriteLine(&quot;&#39;&quot;)\n      Console.WriteLine(&quot;Each letter in &#39;{0}&#39; is:&quot;, str)\n      Dim c As Char\n      For Each c In arr\n         Console.WriteLine(c)\n      Next c\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;The letters in &#39;012wxyz789&#39; are: &#39;wxyz&#39;\n&#39;Each letter in &#39;012wxyz789&#39; is:\n&#39;w\n&#39;x\n&#39;y\n&#39;z\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"string.tochararray1#1\">// Sample for String.ToCharArray(Int32, Int32)\nusing System;\n\nclass Sample {\n    public static void Main() {\n    string str = &quot;012wxyz789&quot;;\n    char[] arr;\n\n    arr = str.ToCharArray(3, 4);\n    Console.Write(&quot;The letters in &#39;{0}&#39; are: &#39;&quot;, str);\n    Console.Write(arr);\n    Console.WriteLine(&quot;&#39;&quot;);\n    Console.WriteLine(&quot;Each letter in &#39;{0}&#39; is:&quot;, str);\n    foreach (char c in arr)\n        Console.WriteLine(c);\n    }\n}\n/*\nThis example produces the following results:\nThe letters in &#39;012wxyz789&#39; are: &#39;wxyz&#39;\nEach letter in &#39;012wxyz789&#39; is:\nw\nx\ny\nz\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToLower\">\r\n    \r\n            <a id=\"System_String_ToLower_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLower()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a copy of this string converted to lowercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToLower ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string in lowercase.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method takes into account the casing rules of the current culture.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> The casing operation that results from calling the ToLower method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> methods. This produces the same result in every culture (unlike the ToLower method) and performs more efficiently.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts several mixed case strings to lowercase.  </p>\n<pre><code class=\"lang-cs\" name=\"stringlowerupper#1\">using System;\n\npublic class ToLowerTest {\n    public static void Main() {\n\n        string [] info = {&quot;Name&quot;, &quot;Title&quot;, &quot;Age&quot;, &quot;Location&quot;, &quot;Gender&quot;};\n\n        Console.WriteLine(&quot;The initial values in the array are:&quot;);\n        foreach (string s in info)\n            Console.WriteLine(s);\n\n        Console.WriteLine(&quot;{0}The lowercase of these values is:&quot;, Environment.NewLine);        \n\n        foreach (string s in info)\n            Console.WriteLine(s.ToLower());\n\n        Console.WriteLine(&quot;{0}The uppercase of these values is:&quot;, Environment.NewLine);        \n\n        foreach (string s in info)\n            Console.WriteLine(s.ToUpper());\n    }\n}\n// The example displays the following output:\n//       The initial values in the array are:\n//       Name\n//       Title\n//       Age\n//       Location\n//       Gender\n//       \n//       The lowercase of these values is:\n//       name\n//       title\n//       age\n//       location\n//       gender\n//       \n//       The uppercase of these values is:\n//       NAME\n//       TITLE\n//       AGE\n//       LOCATION\n//       GENDER\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringlowerupper#1\">using namespace System;\nusing namespace System::Collections;\nint main()\n{\n   array&lt;String^&gt;^info = {&quot;Name&quot;,&quot;Title&quot;,&quot;Age&quot;,&quot;Location&quot;,&quot;Gender&quot;};\n   Console::WriteLine( &quot;The initial values in the array are:&quot; );\n   IEnumerator^ myEnum = info-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( s );\n   }\n\n   Console::WriteLine( &quot; {0}The lowercase of these values is:&quot;, Environment::NewLine );\n   IEnumerator^ myEnum1 = info-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( s-&gt;ToLower() );\n   }\n\n   Console::WriteLine( &quot; {0}The uppercase of these values is:&quot;, Environment::NewLine );\n   IEnumerator^ myEnum2 = info-&gt;GetEnumerator();\n   while ( myEnum2-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum2-&gt;Current);\n      Console::WriteLine( s-&gt;ToUpper() );\n   }\n}\n// The example displays the following output:\n//       The initial values in the array are:\n//       Name\n//       Title\n//       Age\n//       Location\n//       Gender\n//       \n//       The lowercase of these values is:\n//       name\n//       title\n//       age\n//       location\n//       gender\n//       \n//       The uppercase of these values is:\n//       NAME\n//       TITLE\n//       AGE\n//       LOCATION\n//       GENDER\n</code></pre><pre><code class=\"lang-vb\" name=\"stringlowerupper#1\">Imports System\n\nPublic Class ToLowerTest\n    \n    Public Shared Sub Main()\n        Dim info As String() = {&quot;Name&quot;, &quot;Title&quot;, &quot;Age&quot;, &quot;Location&quot;, &quot;Gender&quot;}\n        \n        Console.WriteLine(&quot;The initial values in the array are:&quot;)\n\n        Dim s As String\n        For Each s In info\n            Console.WriteLine(s)\n        Next \n\n        Console.WriteLine(&quot;{0}The lowercase of these values is:&quot;, Environment.NewLine)\n\n        For Each s In info\n            Console.WriteLine(s.ToLower())\n        Next \n\n        Console.WriteLine(&quot;{0}The uppercase of these values is:&quot;, Environment.NewLine)\n\n        For Each s In  info\n            Console.WriteLine(s.ToUpper())\n        Next \n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;       The initial values in the array are:\n&#39;       Name\n&#39;       Title\n&#39;       Age\n&#39;       Location\n&#39;       Gender\n&#39;       \n&#39;       The lowercase of these values is:\n&#39;       name\n&#39;       title\n&#39;       age\n&#39;       location\n&#39;       gender\n&#39;       \n&#39;       The uppercase of these values is:\n&#39;       NAME\n&#39;       TITLE\n&#39;       AGE\n&#39;       LOCATION\n&#39;       GENDER\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToLower_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_String_ToLower_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLower(CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToLower (System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific casing rules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The lowercase equivalent of the current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The casing rules of the culture specified by the <code>culture</code> parameter determine the way the case of the string is changed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> If you pass the ToLower method a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object other than <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> method. This produces the same result in every culture and performs more efficiently.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings. The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.  </p>\n<pre><code class=\"lang-cpp\" name=\"string.tolower1#1\">// Sample for String::ToLower(CultureInfo)\nusing namespace System;\nusing namespace System::Globalization;\nvoid CodePoints( String^ title, String^ s )\n{\n   Console::Write( &quot;{0}The code points in {1} are: {0}&quot;, Environment::NewLine, title );\n   System::Collections::IEnumerator^ myEnum = s-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      UInt16 u =  safe_cast&lt;Char&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0:x4} &quot;, u );\n   }\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   String^ str1 = &quot;INDIGO&quot;;\n   \n   // str2 = str1, except each &#39;I&#39; is &#39;\\u0130&#39; (Unicode LATIN CAPITAL I WITH DOT ABOVE).\n   array&lt;Char&gt;^temp = {L&#39;\\u0130&#39;,L&#39;N&#39;,L&#39;D&#39;,L&#39;\\u0130&#39;,L&#39;G&#39;,L&#39;O&#39;};\n   String^ str2 = gcnew String( temp );\n   String^ str3;\n   String^ str4;\n   Console::WriteLine();\n   Console::WriteLine( &quot;str1 = &#39;{0}&#39;&quot;, str1 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;str1 is {0} to str2.&quot;, ((0 == String::CompareOrdinal( str1, str2 )) ? (String^)&quot;equal&quot; : &quot;not equal&quot;) );\n   CodePoints( &quot;str1&quot;, str1 );\n   CodePoints( &quot;str2&quot;, str2 );\n   Console::WriteLine();\n   \n   // str3 is a lower case copy of str2, using English-United States culture.\n   Console::WriteLine( &quot;str3 = Lower case copy of str2 using English-United States culture.&quot; );\n   str3 = str2-&gt;ToLower( gcnew CultureInfo( &quot;en-US&quot;,false ) );\n   \n   // str4 is a lower case copy of str2, using Turkish-Turkey culture.\n   Console::WriteLine( &quot;str4 = Lower case copy of str2 using Turkish-Turkey culture.&quot; );\n   str4 = str2-&gt;ToLower( gcnew CultureInfo( &quot;tr-TR&quot;,false ) );\n   \n   // Compare the code points in str3 and str4.\n   Console::WriteLine();\n   Console::WriteLine( &quot;str3 is {0} to str4.&quot;, ((0 == String::CompareOrdinal( str3, str4 )) ? (String^)&quot;equal&quot; : &quot;not equal&quot;) );\n   CodePoints( &quot;str3&quot;, str3 );\n   CodePoints( &quot;str4&quot;, str4 );\n}\n\n/*\nThis example produces the following results:\n\nstr1 = &#39;INDIGO&#39;\n\nstr1 is not equal to str2.\n\nThe code points in str1 are:\n0049 004e 0044 0049 0047 004f\n\nThe code points in str2 are:\n0130 004e 0044 0130 0047 004f\n\nstr3 = Lower case copy of str2 using English-United States culture.\nstr4 = Lower case copy of str2 using Turkish-Turkey culture.\n\nstr3 is equal to str4.\n\nThe code points in str3 are:\n0069 006e 0064 0069 0067 006f\n\nThe code points in str4 are:\n0069 006e 0064 0069 0067 006f\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"string.tolower1#1\">&#39; Sample for String.ToLower(CultureInfo)\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim str1 As [String] = &quot;INDIGO&quot;\n      &#39; str2 = str1, except each &#39;I&#39; is &#39;\\u0130&#39; (Unicode LATIN CAPITAL I WITH DOT ABOVE).\n      Dim str2 As New [String](New [Char]() {ChrW(&amp;H0130), &quot;N&quot;c, &quot;D&quot;c, ChrW(&amp;H0130), &quot;G&quot;c, &quot;O&quot;c})\n      Dim str3, str4 As [String]\n\n      Console.WriteLine()\n      Console.WriteLine(&quot;str1 = &#39;{0}&#39;&quot;, str1)\n\n      Console.WriteLine()\n      Console.WriteLine(&quot;str1 is {0} to str2.&quot;, _\n                         IIf(0 = [String].CompareOrdinal(str1, str2), &quot;equal&quot;, &quot;not equal&quot;))\n      CodePoints(&quot;str1&quot;, str1)\n      CodePoints(&quot;str2&quot;, str2)\n\n      Console.WriteLine()\n      &#39; str3 is a lower case copy of str2, using English-United States culture.\n      Console.WriteLine(&quot;str3 = Lower case copy of str2 using English-United States culture.&quot;)\n      str3 = str2.ToLower(New CultureInfo(&quot;en-US&quot;, False))\n\n      &#39; str4 is a lower case copy of str2, using Turkish-Turkey culture.\n      Console.WriteLine(&quot;str4 = Lower case copy of str2 using Turkish-Turkey culture.&quot;)\n      str4 = str2.ToLower(New CultureInfo(&quot;tr-TR&quot;, False))\n\n      &#39; Compare the code points in str3 and str4.\n      Console.WriteLine()\n      Console.WriteLine(&quot;str3 is {0} to str4.&quot;, _\n                         IIf(0 = [String].CompareOrdinal(str3, str4), &quot;equal&quot;, &quot;not equal&quot;))\n      CodePoints(&quot;str3&quot;, str3)\n      CodePoints(&quot;str4&quot;, str4)\n   End Sub &#39;Main\n\n   Public Shared Sub CodePoints(title As [String], s As [String])\n      Console.Write(&quot;{0}The code points in {1} are: {0}&quot;, Environment.NewLine, title)\n      Dim c As Char\n      For Each c In  s\n         Console.Write(&quot;{0:x4} &quot;, AscW(c))\n      Next c\n      Console.WriteLine()\n   End Sub &#39;CodePoints\nEnd Class &#39;Sample\n&#39;\n&#39;str1 = &#39;INDIGO&#39;\n&#39;\n&#39;str1 is not equal to str2.\n&#39;\n&#39;The code points in str1 are:\n&#39;0049 004e 0044 0049 0047 004f\n&#39;\n&#39;The code points in str2 are:\n&#39;0130 004e 0044 0130 0047 004f\n&#39;\n&#39;str3 = Lower case copy of str2 using English-United States culture.\n&#39;str4 = Lower case copy of str2 using Turkish-Turkey culture.\n&#39;\n&#39;str3 is equal to str4.\n&#39;\n&#39;The code points in str3 are:\n&#39;0069 006e 0064 0069 0067 006f\n&#39;\n&#39;The code points in str4 are:\n&#39;0069 006e 0064 0069 0067 006f\n</code></pre><pre><code class=\"lang-cs\" name=\"string.tolower1#1\">// Sample for String.ToLower(CultureInfo)\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    String str1 = &quot;INDIGO&quot;;\n    // str2 = str1, except each &#39;I&#39; is &#39;\\u0130&#39; (Unicode LATIN CAPITAL I WITH DOT ABOVE).\n    String str2 = new String(new Char[] {&#39;\\u0130&#39;, &#39;N&#39;, &#39;D&#39;, &#39;\\u0130&#39;, &#39;G&#39;, &#39;O&#39;});\n    String str3, str4;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;str1 = &#39;{0}&#39;&quot;, str1);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;str1 is {0} to str2.&quot;, \n         ((0 == String.CompareOrdinal(str1, str2)) ? &quot;equal&quot; : &quot;not equal&quot;));\n    CodePoints(&quot;str1&quot;, str1);\n    CodePoints(&quot;str2&quot;, str2);\n\n    Console.WriteLine();\n    // str3 is a lower case copy of str2, using English-United States culture.\n    Console.WriteLine(&quot;str3 = Lower case copy of str2 using English-United States culture.&quot;);\n    str3 = str2.ToLower(new CultureInfo(&quot;en-US&quot;, false));\n\n    // str4 is a lower case copy of str2, using Turkish-Turkey culture.\n    Console.WriteLine(&quot;str4 = Lower case copy of str2 using Turkish-Turkey culture.&quot;);\n    str4 = str2.ToLower(new CultureInfo(&quot;tr-TR&quot;, false));\n\n    // Compare the code points in str3 and str4.\n    Console.WriteLine();\n    Console.WriteLine(&quot;str3 is {0} to str4.&quot;, \n         ((0 == String.CompareOrdinal(str3, str4)) ? &quot;equal&quot; : &quot;not equal&quot;));\n    CodePoints(&quot;str3&quot;, str3);\n    CodePoints(&quot;str4&quot;, str4);\n    }\n\n    public static void CodePoints(String title, String s)\n    {\n    Console.Write(&quot;{0}The code points in {1} are: {0}&quot;, Environment.NewLine, title);\n    foreach (ushort u in s)\n      Console.Write(&quot;{0:x4} &quot;, u);\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nstr1 = &#39;INDIGO&#39;\n\nstr1 is not equal to str2.\n\nThe code points in str1 are:\n0049 004e 0044 0049 0047 004f\n\nThe code points in str2 are:\n0130 004e 0044 0130 0047 004f\n\nstr3 = Lower case copy of str2 using English-United States culture.\nstr4 = Lower case copy of str2 using Turkish-Turkey culture.\n\nstr3 is equal to str4.\n\nThe code points in str3 are:\n0069 006e 0064 0069 0067 006f\n\nThe code points in str4 are:\n0069 006e 0064 0069 0067 006f\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToLowerInvariant\">\r\n    \r\n            <a id=\"System_String_ToLowerInvariant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLowerInvariant()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a copy of this <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object converted to lowercase using the casing rules of the invariant culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToLowerInvariant ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The lowercase equivalent of the current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.  </p>\n<p> If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the ToLowerInvariant method. The ToLowerInvariant method is equivalent to <code>ToLower(CultureInfo.InvariantCulture)</code>. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to lowercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the ToLowerInvariant or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a string array that contains a single word in a number of languages. The ToLowerInvariant method is used to populate the elements of a parallel array with the case-insensitive version of each word. The [Array.Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName&gt; method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.ToLowerInvariant#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] words = { &quot;Tuesday&quot;, &quot;SalÄ±&quot;, &quot;Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº&quot;, &quot;Mardi&quot;, \n                         &quot;Î¤ÏÎ¯Ï„Î·&quot;, &quot;Martes&quot;, &quot;×™×•× ×©×œ×™×©×™&quot;, \n                         &quot;Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡&quot;, &quot;à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£&quot; };\n      // Display array in unsorted order.\n      foreach (string word in words)\n         Console.WriteLine(word);\n      Console.WriteLine();\n\n      // Create parallel array of words by calling ToLowerInvariant.\n      string[] lowerWords = new string[words.Length];\n      for (int ctr = words.GetLowerBound(0); ctr &lt;= words.GetUpperBound(0); ctr++)\n         lowerWords[ctr] = words[ctr].ToLowerInvariant();\n      \n      // Sort the words array based on the order of lowerWords.\n      Array.Sort(lowerWords, words, StringComparer.InvariantCulture);\n      \n      // Display the sorted array.\n      foreach (string word in words)\n         Console.WriteLine(word);\n   }\n}\n// The example displays the following output:\n//       Tuesday\n//       SalÄ±\n//       Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº\n//       Mardi\n//       Î¤ÏÎ¯Ï„Î·\n//       Martes\n//       ×™×•× ×©×œ×™×©×™\n//       Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡\n//       à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£\n//       \n//       Mardi\n//       Martes\n//       SalÄ±\n//       Tuesday\n//       Î¤ÏÎ¯Ï„Î·\n//       Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº\n//       ×™×•× ×©×œ×™×©×™\n//       Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡\n//       à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.ToLowerInvariant#1\">Module Example\n   Public Sub Main()\n      Dim words() As String = { &quot;Tuesday&quot;, &quot;SalÄ±&quot;, &quot;Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº&quot;, &quot;Mardi&quot;, _\n                                &quot;Î¤ÏÎ¯Ï„Î·&quot;, &quot;Martes&quot;, &quot;×™×•× ×©×œ×™×©×™&quot;, _\n                                &quot;Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡&quot;, &quot;à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£&quot; }\n      &#39; Display array in unsorted order.\n      For Each word As String In words\n         Console.WriteLine(word)\n      Next\n      Console.WriteLine()\n\n      &#39; Create parallel array of words by calling ToLowerInvariant.\n      Dim lowerWords(words.Length - 1) As String\n      For ctr As Integer = words.GetLowerBound(0) To words.GetUpperBound(0)\n         lowerWords(ctr) = words(ctr).ToLowerInvariant()\n      Next\n      \n      &#39; Sort the words array based on the order of lowerWords.\n      Array.Sort(lowerWords, words, StringComparer.InvariantCulture)\n      \n      &#39; Display the sorted array.\n      For Each word As String In words\n         Console.WriteLine(word)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Tuesday\n&#39;       SalÄ±\n&#39;       Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº\n&#39;       Mardi\n&#39;       Î¤ÏÎ¯Ï„Î·\n&#39;       Martes\n&#39;       ×™×•× ×©×œ×™×©×™\n&#39;       Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡\n&#39;       à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£\n&#39;       \n&#39;       Mardi\n&#39;       Martes\n&#39;       SalÄ±\n&#39;       Tuesday\n&#39;       Î¤ÏÎ¯Ï„Î·\n&#39;       Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº\n&#39;       ×™×•× ×©×œ×™×©×™\n&#39;       Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡\n&#39;       à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToString\">\r\n    \r\n            <a id=\"System_String_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because this method simply returns the current string unchanged, there is no need to call it directly. It is usually called implicitly in a composite formatting operation, as the example shows.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the ToString method.Note that the example does not explicitly call the ToString method. Instead, the method is called implicitly by the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting</a> feature.  </p>\n<pre><code class=\"lang-vb\" name=\"string.tostring#1\">Imports System\n _\n\nClass stringToString\n   \n   Public Shared Sub Main()\n      Dim str1 As [String] = &quot;123&quot;\n      Dim str2 As [String] = &quot;abc&quot;\n      \n      Console.WriteLine(&quot;Original str1: {0}&quot;, str1)\n      Console.WriteLine(&quot;Original str2: {0}&quot;, str2)\n      Console.WriteLine(&quot;str1 same as str2?: {0}&quot;, [Object].ReferenceEquals(str1, str2))\n      \n      str2 = str1.ToString()\n      Console.WriteLine()\n      Console.WriteLine(&quot;New str2:      {0}&quot;, str2)\n      Console.WriteLine(&quot;str1 same as str2?: {0}&quot;, [Object].ReferenceEquals(str1, str2))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code produces the following output:\n&#39;Original str1: 123\n&#39;Original str2: abc\n&#39;str1 same as str2?: False\n&#39;\n&#39;New str2:      123\n&#39;str1 same as str2?: True\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"string.tostring#1\">using System;\n\nclass stringToString {\n    public static void Main() {\n    String str1 = &quot;123&quot;;\n    String str2 = &quot;abc&quot;;\n\n    Console.WriteLine(&quot;Original str1: {0}&quot;, str1);\n    Console.WriteLine(&quot;Original str2: {0}&quot;, str2);\n    Console.WriteLine(&quot;str1 same as str2?: {0}&quot;, Object.ReferenceEquals(str1, str2));\n\n    str2 = str1.ToString();\n    Console.WriteLine();\n    Console.WriteLine(&quot;New str2:      {0}&quot;, str2);\n    Console.WriteLine(&quot;str1 same as str2?: {0}&quot;, Object.ReferenceEquals(str1, str2));\n    }\n}\n/*\nThis code produces the following output:\nOriginal str1: 123\nOriginal str2: abc\nstr1 same as str2?: False\n\nNew str2:      123\nstr1 same as str2?: True\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"string.tostring#1\">using namespace System;\nint main()\n{\n   String^ str1 = &quot;123&quot;;\n   String^ str2 = &quot;abc&quot;;\n   Console::WriteLine( &quot;Original str1: {0}&quot;, str1 );\n   Console::WriteLine( &quot;Original str2: {0}&quot;, str2 );\n   Console::WriteLine( &quot;str1 same as str2?: {0}&quot;, Object::ReferenceEquals( str1, str2 ) );\n   str2 = str1;\n   Console::WriteLine();\n   Console::WriteLine( &quot;New str2:      {0}&quot;, str2 );\n   Console::WriteLine( &quot;str1 same as str2?: {0}&quot;, Object::ReferenceEquals( str1, str2 ) );\n}\n\n/*\nThis code produces the following output:\nOriginal str1: 123\nOriginal str2: abc\nstr1 same as str2?: False\n\nNew str2:      123\nstr1 same as str2?: True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Returns this instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>(Reserved) An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>provider</code> is reserved, and does not currently participate in this operation.  </p>\n<p> Because this method simply returns the current string unchanged, there is no need to call it directly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToUpper\">\r\n    \r\n            <a id=\"System_String_ToUpper_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUpper()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a copy of this string converted to uppercase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToUpper ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The uppercase equivalent of the current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent. If a character does not have an uppercase equivalent, it is included unchanged in the returned string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  </p>\n</div>\n<p> The ToUpper method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison. A better method to perform case-insensitive comparison is to call a string comparison method that has a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter whose value you set to <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> for a culture-sensitive, case-insensitive comparison.  </p>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> The casing operation that results from calling the ToUpper method takes the casing conventions of the current culture into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> method. This produces the same result in every culture (unlike the ToUpper method) and performs more efficiently.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the ToUpper method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets. It then displays each string whose uppercase character is different from its lowercase character.  </p>\n<pre><code class=\"lang-vb\" name=\"System.String.ToUpper#1\">Module Example\n   Public Sub Main()\n      Dim n As Integer = 0\n      For ctr As Integer = &amp;h20 To &amp;h017F\n         Dim string1 As String = ChrW(ctr).ToString()\n         Dim upperString As String = string1.ToUpper()\n         If string1 &lt;&gt; upperString Then\n            Console.Write(&quot;{0} (\\u+{1}) --&gt; {2} (\\u+{3})         &quot;, _\n                          string1, _\n                          Convert.ToUInt16(string1.Chars(0)).ToString(&quot;X4&quot;), _ \n                          upperString, _\n                          Convert.ToUInt16(upperString.Chars(0)).ToString(&quot;X4&quot;))                     \n            n += 1\n            If n Mod 2 = 0 Then Console.WriteLine()\n         End If\n      Next \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    a (\\u+0061) --&gt; A (\\u+0041)         b (\\u+0062) --&gt; B (\\u+0042)\n&#39;    c (\\u+0063) --&gt; C (\\u+0043)         d (\\u+0064) --&gt; D (\\u+0044)\n&#39;    e (\\u+0065) --&gt; E (\\u+0045)         f (\\u+0066) --&gt; F (\\u+0046)\n&#39;    g (\\u+0067) --&gt; G (\\u+0047)         h (\\u+0068) --&gt; H (\\u+0048)\n&#39;    i (\\u+0069) --&gt; I (\\u+0049)         j (\\u+006A) --&gt; J (\\u+004A)\n&#39;    k (\\u+006B) --&gt; K (\\u+004B)         l (\\u+006C) --&gt; L (\\u+004C)\n&#39;    m (\\u+006D) --&gt; M (\\u+004D)         n (\\u+006E) --&gt; N (\\u+004E)\n&#39;    o (\\u+006F) --&gt; O (\\u+004F)         p (\\u+0070) --&gt; P (\\u+0050)\n&#39;    q (\\u+0071) --&gt; Q (\\u+0051)         r (\\u+0072) --&gt; R (\\u+0052)\n&#39;    s (\\u+0073) --&gt; S (\\u+0053)         t (\\u+0074) --&gt; T (\\u+0054)\n&#39;    u (\\u+0075) --&gt; U (\\u+0055)         v (\\u+0076) --&gt; V (\\u+0056)\n&#39;    w (\\u+0077) --&gt; W (\\u+0057)         x (\\u+0078) --&gt; X (\\u+0058)\n&#39;    y (\\u+0079) --&gt; Y (\\u+0059)         z (\\u+007A) --&gt; Z (\\u+005A)\n&#39;    &#224; (\\u+00E0) --&gt; &#192; (\\u+00C0)         &#225; (\\u+00E1) --&gt; &#193; (\\u+00C1)\n&#39;    &#226; (\\u+00E2) --&gt; &#194; (\\u+00C2)         &#227; (\\u+00E3) --&gt; &#195; (\\u+00C3)\n&#39;    &#228; (\\u+00E4) --&gt; &#196; (\\u+00C4)         &#229; (\\u+00E5) --&gt; &#197; (\\u+00C5)\n&#39;    &#230; (\\u+00E6) --&gt; &#198; (\\u+00C6)         &#231; (\\u+00E7) --&gt; &#199; (\\u+00C7)\n&#39;    &#232; (\\u+00E8) --&gt; &#200; (\\u+00C8)         &#233; (\\u+00E9) --&gt; &#201; (\\u+00C9)\n&#39;    &#234; (\\u+00EA) --&gt; &#202; (\\u+00CA)         &#235; (\\u+00EB) --&gt; &#203; (\\u+00CB)\n&#39;    &#236; (\\u+00EC) --&gt; &#204; (\\u+00CC)         &#237; (\\u+00ED) --&gt; &#205; (\\u+00CD)\n&#39;    &#238; (\\u+00EE) --&gt; &#206; (\\u+00CE)         &#239; (\\u+00EF) --&gt; &#207; (\\u+00CF)\n&#39;    &#240; (\\u+00F0) --&gt; &#208; (\\u+00D0)         &#241; (\\u+00F1) --&gt; &#209; (\\u+00D1)\n&#39;    &#242; (\\u+00F2) --&gt; &#210; (\\u+00D2)         &#243; (\\u+00F3) --&gt; &#211; (\\u+00D3)\n&#39;    &#244; (\\u+00F4) --&gt; &#212; (\\u+00D4)         &#245; (\\u+00F5) --&gt; &#213; (\\u+00D5)\n&#39;    &#246; (\\u+00F6) --&gt; &#214; (\\u+00D6)         &#248; (\\u+00F8) --&gt; &#216; (\\u+00D8)\n&#39;    &#249; (\\u+00F9) --&gt; &#217; (\\u+00D9)         &#250; (\\u+00FA) --&gt; &#218; (\\u+00DA)\n&#39;    &#251; (\\u+00FB) --&gt; &#219; (\\u+00DB)         &#252; (\\u+00FC) --&gt; &#220; (\\u+00DC)\n&#39;    &#253; (\\u+00FD) --&gt; &#221; (\\u+00DD)         &#254; (\\u+00FE) --&gt; &#222; (\\u+00DE)\n&#39;    &#255; (\\u+00FF) --&gt; Å¸ (\\u+0178)         Ä (\\u+0101) --&gt; Ä€ (\\u+0100)\n&#39;    Äƒ (\\u+0103) --&gt; Ä‚ (\\u+0102)         Ä… (\\u+0105) --&gt; Ä„ (\\u+0104)\n&#39;    Ä‡ (\\u+0107) --&gt; Ä† (\\u+0106)         Ä‰ (\\u+0109) --&gt; Äˆ (\\u+0108)\n&#39;    Ä‹ (\\u+010B) --&gt; ÄŠ (\\u+010A)         Ä (\\u+010D) --&gt; ÄŒ (\\u+010C)\n&#39;    Ä (\\u+010F) --&gt; ÄŽ (\\u+010E)         Ä‘ (\\u+0111) --&gt; Ä (\\u+0110)\n&#39;    Ä“ (\\u+0113) --&gt; Ä’ (\\u+0112)         Ä• (\\u+0115) --&gt; Ä” (\\u+0114)\n&#39;    Ä— (\\u+0117) --&gt; Ä– (\\u+0116)         Ä™ (\\u+0119) --&gt; Ä˜ (\\u+0118)\n&#39;    Ä› (\\u+011B) --&gt; Äš (\\u+011A)         Ä (\\u+011D) --&gt; Äœ (\\u+011C)\n&#39;    ÄŸ (\\u+011F) --&gt; Äž (\\u+011E)         Ä¡ (\\u+0121) --&gt; Ä  (\\u+0120)\n&#39;    Ä£ (\\u+0123) --&gt; Ä¢ (\\u+0122)         Ä¥ (\\u+0125) --&gt; Ä¤ (\\u+0124)\n&#39;    Ä§ (\\u+0127) --&gt; Ä¦ (\\u+0126)         Ä© (\\u+0129) --&gt; Ä¨ (\\u+0128)\n&#39;    Ä« (\\u+012B) --&gt; Äª (\\u+012A)         Ä­ (\\u+012D) --&gt; Ä¬ (\\u+012C)\n&#39;    Ä¯ (\\u+012F) --&gt; Ä® (\\u+012E)         Ä± (\\u+0131) --&gt; I (\\u+0049)\n&#39;    Ä³ (\\u+0133) --&gt; Ä² (\\u+0132)         Äµ (\\u+0135) --&gt; Ä´ (\\u+0134)\n&#39;    Ä· (\\u+0137) --&gt; Ä¶ (\\u+0136)         Äº (\\u+013A) --&gt; Ä¹ (\\u+0139)\n&#39;    Ä¼ (\\u+013C) --&gt; Ä» (\\u+013B)         Ä¾ (\\u+013E) --&gt; Ä½ (\\u+013D)\n&#39;    Å€ (\\u+0140) --&gt; Ä¿ (\\u+013F)         Å‚ (\\u+0142) --&gt; Å (\\u+0141)\n&#39;    Å„ (\\u+0144) --&gt; Åƒ (\\u+0143)         Å† (\\u+0146) --&gt; Å… (\\u+0145)\n&#39;    Åˆ (\\u+0148) --&gt; Å‡ (\\u+0147)         Å‹ (\\u+014B) --&gt; ÅŠ (\\u+014A)\n&#39;    Å (\\u+014D) --&gt; ÅŒ (\\u+014C)         Å (\\u+014F) --&gt; ÅŽ (\\u+014E)\n&#39;    Å‘ (\\u+0151) --&gt; Å (\\u+0150)         Å“ (\\u+0153) --&gt; Å’ (\\u+0152)\n&#39;    Å• (\\u+0155) --&gt; Å” (\\u+0154)         Å— (\\u+0157) --&gt; Å– (\\u+0156)\n&#39;    Å™ (\\u+0159) --&gt; Å˜ (\\u+0158)         Å› (\\u+015B) --&gt; Åš (\\u+015A)\n&#39;    Å (\\u+015D) --&gt; Åœ (\\u+015C)         ÅŸ (\\u+015F) --&gt; Åž (\\u+015E)\n&#39;    Å¡ (\\u+0161) --&gt; Å  (\\u+0160)         Å£ (\\u+0163) --&gt; Å¢ (\\u+0162)\n&#39;    Å¥ (\\u+0165) --&gt; Å¤ (\\u+0164)         Å§ (\\u+0167) --&gt; Å¦ (\\u+0166)\n&#39;    Å© (\\u+0169) --&gt; Å¨ (\\u+0168)         Å« (\\u+016B) --&gt; Åª (\\u+016A)\n&#39;    Å­ (\\u+016D) --&gt; Å¬ (\\u+016C)         Å¯ (\\u+016F) --&gt; Å® (\\u+016E)\n&#39;    Å± (\\u+0171) --&gt; Å° (\\u+0170)         Å³ (\\u+0173) --&gt; Å² (\\u+0172)\n&#39;    Åµ (\\u+0175) --&gt; Å´ (\\u+0174)         Å· (\\u+0177) --&gt; Å¶ (\\u+0176)\n&#39;    Åº (\\u+017A) --&gt; Å¹ (\\u+0179)         Å¼ (\\u+017C) --&gt; Å» (\\u+017B)\n&#39;    Å¾ (\\u+017E) --&gt; Å½ (\\u+017D)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.ToUpper#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int n = 0;\n      for (int ctr = 0x20; ctr &lt;= 0x017F; ctr++) {\n         string string1 = Convert.ToChar(ctr).ToString();\n         string upperString = string1.ToUpper();\n         if (string1 != upperString) {\n            Console.Write(@&quot;{0} (\\u+{1}) --&gt; {2} (\\u+{3})         &quot;, \n                          string1, \n                          Convert.ToUInt16(string1[0]).ToString(&quot;X4&quot;),  \n                          upperString, \n                          Convert.ToUInt16(upperString[0]).ToString(&quot;X4&quot;));                     \n            n++;\n            if (n % 2 == 0) Console.WriteLine();\n         }\n      } \n   }\n}\n// The example displays the following output:\n//    a (\\u+0061) --&gt; A (\\u+0041)         b (\\u+0062) --&gt; B (\\u+0042)\n//    c (\\u+0063) --&gt; C (\\u+0043)         d (\\u+0064) --&gt; D (\\u+0044)\n//    e (\\u+0065) --&gt; E (\\u+0045)         f (\\u+0066) --&gt; F (\\u+0046)\n//    g (\\u+0067) --&gt; G (\\u+0047)         h (\\u+0068) --&gt; H (\\u+0048)\n//    i (\\u+0069) --&gt; I (\\u+0049)         j (\\u+006A) --&gt; J (\\u+004A)\n//    k (\\u+006B) --&gt; K (\\u+004B)         l (\\u+006C) --&gt; L (\\u+004C)\n//    m (\\u+006D) --&gt; M (\\u+004D)         n (\\u+006E) --&gt; N (\\u+004E)\n//    o (\\u+006F) --&gt; O (\\u+004F)         p (\\u+0070) --&gt; P (\\u+0050)\n//    q (\\u+0071) --&gt; Q (\\u+0051)         r (\\u+0072) --&gt; R (\\u+0052)\n//    s (\\u+0073) --&gt; S (\\u+0053)         t (\\u+0074) --&gt; T (\\u+0054)\n//    u (\\u+0075) --&gt; U (\\u+0055)         v (\\u+0076) --&gt; V (\\u+0056)\n//    w (\\u+0077) --&gt; W (\\u+0057)         x (\\u+0078) --&gt; X (\\u+0058)\n//    y (\\u+0079) --&gt; Y (\\u+0059)         z (\\u+007A) --&gt; Z (\\u+005A)\n//    &#224; (\\u+00E0) --&gt; &#192; (\\u+00C0)         &#225; (\\u+00E1) --&gt; &#193; (\\u+00C1)\n//    &#226; (\\u+00E2) --&gt; &#194; (\\u+00C2)         &#227; (\\u+00E3) --&gt; &#195; (\\u+00C3)\n//    &#228; (\\u+00E4) --&gt; &#196; (\\u+00C4)         &#229; (\\u+00E5) --&gt; &#197; (\\u+00C5)\n//    &#230; (\\u+00E6) --&gt; &#198; (\\u+00C6)         &#231; (\\u+00E7) --&gt; &#199; (\\u+00C7)\n//    &#232; (\\u+00E8) --&gt; &#200; (\\u+00C8)         &#233; (\\u+00E9) --&gt; &#201; (\\u+00C9)\n//    &#234; (\\u+00EA) --&gt; &#202; (\\u+00CA)         &#235; (\\u+00EB) --&gt; &#203; (\\u+00CB)\n//    &#236; (\\u+00EC) --&gt; &#204; (\\u+00CC)         &#237; (\\u+00ED) --&gt; &#205; (\\u+00CD)\n//    &#238; (\\u+00EE) --&gt; &#206; (\\u+00CE)         &#239; (\\u+00EF) --&gt; &#207; (\\u+00CF)\n//    &#240; (\\u+00F0) --&gt; &#208; (\\u+00D0)         &#241; (\\u+00F1) --&gt; &#209; (\\u+00D1)\n//    &#242; (\\u+00F2) --&gt; &#210; (\\u+00D2)         &#243; (\\u+00F3) --&gt; &#211; (\\u+00D3)\n//    &#244; (\\u+00F4) --&gt; &#212; (\\u+00D4)         &#245; (\\u+00F5) --&gt; &#213; (\\u+00D5)\n//    &#246; (\\u+00F6) --&gt; &#214; (\\u+00D6)         &#248; (\\u+00F8) --&gt; &#216; (\\u+00D8)\n//    &#249; (\\u+00F9) --&gt; &#217; (\\u+00D9)         &#250; (\\u+00FA) --&gt; &#218; (\\u+00DA)\n//    &#251; (\\u+00FB) --&gt; &#219; (\\u+00DB)         &#252; (\\u+00FC) --&gt; &#220; (\\u+00DC)\n//    &#253; (\\u+00FD) --&gt; &#221; (\\u+00DD)         &#254; (\\u+00FE) --&gt; &#222; (\\u+00DE)\n//    &#255; (\\u+00FF) --&gt; Å¸ (\\u+0178)         Ä (\\u+0101) --&gt; Ä€ (\\u+0100)\n//    Äƒ (\\u+0103) --&gt; Ä‚ (\\u+0102)         Ä… (\\u+0105) --&gt; Ä„ (\\u+0104)\n//    Ä‡ (\\u+0107) --&gt; Ä† (\\u+0106)         Ä‰ (\\u+0109) --&gt; Äˆ (\\u+0108)\n//    Ä‹ (\\u+010B) --&gt; ÄŠ (\\u+010A)         Ä (\\u+010D) --&gt; ÄŒ (\\u+010C)\n//    Ä (\\u+010F) --&gt; ÄŽ (\\u+010E)         Ä‘ (\\u+0111) --&gt; Ä (\\u+0110)\n//    Ä“ (\\u+0113) --&gt; Ä’ (\\u+0112)         Ä• (\\u+0115) --&gt; Ä” (\\u+0114)\n//    Ä— (\\u+0117) --&gt; Ä– (\\u+0116)         Ä™ (\\u+0119) --&gt; Ä˜ (\\u+0118)\n//    Ä› (\\u+011B) --&gt; Äš (\\u+011A)         Ä (\\u+011D) --&gt; Äœ (\\u+011C)\n//    ÄŸ (\\u+011F) --&gt; Äž (\\u+011E)         Ä¡ (\\u+0121) --&gt; Ä  (\\u+0120)\n//    Ä£ (\\u+0123) --&gt; Ä¢ (\\u+0122)         Ä¥ (\\u+0125) --&gt; Ä¤ (\\u+0124)\n//    Ä§ (\\u+0127) --&gt; Ä¦ (\\u+0126)         Ä© (\\u+0129) --&gt; Ä¨ (\\u+0128)\n//    Ä« (\\u+012B) --&gt; Äª (\\u+012A)         Ä­ (\\u+012D) --&gt; Ä¬ (\\u+012C)\n//    Ä¯ (\\u+012F) --&gt; Ä® (\\u+012E)         Ä± (\\u+0131) --&gt; I (\\u+0049)\n//    Ä³ (\\u+0133) --&gt; Ä² (\\u+0132)         Äµ (\\u+0135) --&gt; Ä´ (\\u+0134)\n//    Ä· (\\u+0137) --&gt; Ä¶ (\\u+0136)         Äº (\\u+013A) --&gt; Ä¹ (\\u+0139)\n//    Ä¼ (\\u+013C) --&gt; Ä» (\\u+013B)         Ä¾ (\\u+013E) --&gt; Ä½ (\\u+013D)\n//    Å€ (\\u+0140) --&gt; Ä¿ (\\u+013F)         Å‚ (\\u+0142) --&gt; Å (\\u+0141)\n//    Å„ (\\u+0144) --&gt; Åƒ (\\u+0143)         Å† (\\u+0146) --&gt; Å… (\\u+0145)\n//    Åˆ (\\u+0148) --&gt; Å‡ (\\u+0147)         Å‹ (\\u+014B) --&gt; ÅŠ (\\u+014A)\n//    Å (\\u+014D) --&gt; ÅŒ (\\u+014C)         Å (\\u+014F) --&gt; ÅŽ (\\u+014E)\n//    Å‘ (\\u+0151) --&gt; Å (\\u+0150)         Å“ (\\u+0153) --&gt; Å’ (\\u+0152)\n//    Å• (\\u+0155) --&gt; Å” (\\u+0154)         Å— (\\u+0157) --&gt; Å– (\\u+0156)\n//    Å™ (\\u+0159) --&gt; Å˜ (\\u+0158)         Å› (\\u+015B) --&gt; Åš (\\u+015A)\n//    Å (\\u+015D) --&gt; Åœ (\\u+015C)         ÅŸ (\\u+015F) --&gt; Åž (\\u+015E)\n//    Å¡ (\\u+0161) --&gt; Å  (\\u+0160)         Å£ (\\u+0163) --&gt; Å¢ (\\u+0162)\n//    Å¥ (\\u+0165) --&gt; Å¤ (\\u+0164)         Å§ (\\u+0167) --&gt; Å¦ (\\u+0166)\n//    Å© (\\u+0169) --&gt; Å¨ (\\u+0168)         Å« (\\u+016B) --&gt; Åª (\\u+016A)\n//    Å­ (\\u+016D) --&gt; Å¬ (\\u+016C)         Å¯ (\\u+016F) --&gt; Å® (\\u+016E)\n//    Å± (\\u+0171) --&gt; Å° (\\u+0170)         Å³ (\\u+0173) --&gt; Å² (\\u+0172)\n//    Åµ (\\u+0175) --&gt; Å´ (\\u+0174)         Å· (\\u+0177) --&gt; Å¶ (\\u+0176)\n//    Åº (\\u+017A) --&gt; Å¹ (\\u+0179)         Å¼ (\\u+017C) --&gt; Å» (\\u+017B)\n//    Å¾ (\\u+017E) --&gt; Å½ (\\u+017D)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.String.ToUpper#1\">using namespace System;\n\nvoid main()\n{\n   int n = 0;\n   for (int ctr = 0x20; ctr &lt;= 0x017F; ctr++) {\n      String^ string1 = Convert::ToChar(ctr).ToString();\n      String^ upperString = string1-&gt;ToUpper();\n      if (string1 != upperString) {\n         Console::Write(L&quot;{0} (\\u+{1}) --&gt; {2} (\\u+{3})         &quot;,\n                       string1, \n                       Convert::ToUInt16(string1[0]).ToString(&quot;X4&quot;),\n                       upperString, \n                       Convert::ToUInt16(upperString[0]).ToString(&quot;X4&quot;));\n         n++;\n         if (n % 2 == 0) Console::WriteLine();\n      }\n   } \n}\n// The example displays the following output:\n//    a (\\u+0061) --&gt; A (\\u+0041)         b (\\u+0062) --&gt; B (\\u+0042)\n//    c (\\u+0063) --&gt; C (\\u+0043)         d (\\u+0064) --&gt; D (\\u+0044)\n//    e (\\u+0065) --&gt; E (\\u+0045)         f (\\u+0066) --&gt; F (\\u+0046)\n//    g (\\u+0067) --&gt; G (\\u+0047)         h (\\u+0068) --&gt; H (\\u+0048)\n//    i (\\u+0069) --&gt; I (\\u+0049)         j (\\u+006A) --&gt; J (\\u+004A)\n//    k (\\u+006B) --&gt; K (\\u+004B)         l (\\u+006C) --&gt; L (\\u+004C)\n//    m (\\u+006D) --&gt; M (\\u+004D)         n (\\u+006E) --&gt; N (\\u+004E)\n//    o (\\u+006F) --&gt; O (\\u+004F)         p (\\u+0070) --&gt; P (\\u+0050)\n//    q (\\u+0071) --&gt; Q (\\u+0051)         r (\\u+0072) --&gt; R (\\u+0052)\n//    s (\\u+0073) --&gt; S (\\u+0053)         t (\\u+0074) --&gt; T (\\u+0054)\n//    u (\\u+0075) --&gt; U (\\u+0055)         v (\\u+0076) --&gt; V (\\u+0056)\n//    w (\\u+0077) --&gt; W (\\u+0057)         x (\\u+0078) --&gt; X (\\u+0058)\n//    y (\\u+0079) --&gt; Y (\\u+0059)         z (\\u+007A) --&gt; Z (\\u+005A)\n//    &#224; (\\u+00E0) --&gt; &#192; (\\u+00C0)         &#225; (\\u+00E1) --&gt; &#193; (\\u+00C1)\n//    &#226; (\\u+00E2) --&gt; &#194; (\\u+00C2)         &#227; (\\u+00E3) --&gt; &#195; (\\u+00C3)\n//    &#228; (\\u+00E4) --&gt; &#196; (\\u+00C4)         &#229; (\\u+00E5) --&gt; &#197; (\\u+00C5)\n//    &#230; (\\u+00E6) --&gt; &#198; (\\u+00C6)         &#231; (\\u+00E7) --&gt; &#199; (\\u+00C7)\n//    &#232; (\\u+00E8) --&gt; &#200; (\\u+00C8)         &#233; (\\u+00E9) --&gt; &#201; (\\u+00C9)\n//    &#234; (\\u+00EA) --&gt; &#202; (\\u+00CA)         &#235; (\\u+00EB) --&gt; &#203; (\\u+00CB)\n//    &#236; (\\u+00EC) --&gt; &#204; (\\u+00CC)         &#237; (\\u+00ED) --&gt; &#205; (\\u+00CD)\n//    &#238; (\\u+00EE) --&gt; &#206; (\\u+00CE)         &#239; (\\u+00EF) --&gt; &#207; (\\u+00CF)\n//    &#240; (\\u+00F0) --&gt; &#208; (\\u+00D0)         &#241; (\\u+00F1) --&gt; &#209; (\\u+00D1)\n//    &#242; (\\u+00F2) --&gt; &#210; (\\u+00D2)         &#243; (\\u+00F3) --&gt; &#211; (\\u+00D3)\n//    &#244; (\\u+00F4) --&gt; &#212; (\\u+00D4)         &#245; (\\u+00F5) --&gt; &#213; (\\u+00D5)\n//    &#246; (\\u+00F6) --&gt; &#214; (\\u+00D6)         &#248; (\\u+00F8) --&gt; &#216; (\\u+00D8)\n//    &#249; (\\u+00F9) --&gt; &#217; (\\u+00D9)         &#250; (\\u+00FA) --&gt; &#218; (\\u+00DA)\n//    &#251; (\\u+00FB) --&gt; &#219; (\\u+00DB)         &#252; (\\u+00FC) --&gt; &#220; (\\u+00DC)\n//    &#253; (\\u+00FD) --&gt; &#221; (\\u+00DD)         &#254; (\\u+00FE) --&gt; &#222; (\\u+00DE)\n//    &#255; (\\u+00FF) --&gt; Å¸ (\\u+0178)         Ä (\\u+0101) --&gt; Ä€ (\\u+0100)\n//    Äƒ (\\u+0103) --&gt; Ä‚ (\\u+0102)         Ä… (\\u+0105) --&gt; Ä„ (\\u+0104)\n//    Ä‡ (\\u+0107) --&gt; Ä† (\\u+0106)         Ä‰ (\\u+0109) --&gt; Äˆ (\\u+0108)\n//    Ä‹ (\\u+010B) --&gt; ÄŠ (\\u+010A)         Ä (\\u+010D) --&gt; ÄŒ (\\u+010C)\n//    Ä (\\u+010F) --&gt; ÄŽ (\\u+010E)         Ä‘ (\\u+0111) --&gt; Ä (\\u+0110)\n//    Ä“ (\\u+0113) --&gt; Ä’ (\\u+0112)         Ä• (\\u+0115) --&gt; Ä” (\\u+0114)\n//    Ä— (\\u+0117) --&gt; Ä– (\\u+0116)         Ä™ (\\u+0119) --&gt; Ä˜ (\\u+0118)\n//    Ä› (\\u+011B) --&gt; Äš (\\u+011A)         Ä (\\u+011D) --&gt; Äœ (\\u+011C)\n//    ÄŸ (\\u+011F) --&gt; Äž (\\u+011E)         Ä¡ (\\u+0121) --&gt; Ä  (\\u+0120)\n//    Ä£ (\\u+0123) --&gt; Ä¢ (\\u+0122)         Ä¥ (\\u+0125) --&gt; Ä¤ (\\u+0124)\n//    Ä§ (\\u+0127) --&gt; Ä¦ (\\u+0126)         Ä© (\\u+0129) --&gt; Ä¨ (\\u+0128)\n//    Ä« (\\u+012B) --&gt; Äª (\\u+012A)         Ä­ (\\u+012D) --&gt; Ä¬ (\\u+012C)\n//    Ä¯ (\\u+012F) --&gt; Ä® (\\u+012E)         Ä± (\\u+0131) --&gt; I (\\u+0049)\n//    Ä³ (\\u+0133) --&gt; Ä² (\\u+0132)         Äµ (\\u+0135) --&gt; Ä´ (\\u+0134)\n//    Ä· (\\u+0137) --&gt; Ä¶ (\\u+0136)         Äº (\\u+013A) --&gt; Ä¹ (\\u+0139)\n//    Ä¼ (\\u+013C) --&gt; Ä» (\\u+013B)         Ä¾ (\\u+013E) --&gt; Ä½ (\\u+013D)\n//    Å€ (\\u+0140) --&gt; Ä¿ (\\u+013F)         Å‚ (\\u+0142) --&gt; Å (\\u+0141)\n//    Å„ (\\u+0144) --&gt; Åƒ (\\u+0143)         Å† (\\u+0146) --&gt; Å… (\\u+0145)\n//    Åˆ (\\u+0148) --&gt; Å‡ (\\u+0147)         Å‹ (\\u+014B) --&gt; ÅŠ (\\u+014A)\n//    Å (\\u+014D) --&gt; ÅŒ (\\u+014C)         Å (\\u+014F) --&gt; ÅŽ (\\u+014E)\n//    Å‘ (\\u+0151) --&gt; Å (\\u+0150)         Å“ (\\u+0153) --&gt; Å’ (\\u+0152)\n//    Å• (\\u+0155) --&gt; Å” (\\u+0154)         Å— (\\u+0157) --&gt; Å– (\\u+0156)\n//    Å™ (\\u+0159) --&gt; Å˜ (\\u+0158)         Å› (\\u+015B) --&gt; Åš (\\u+015A)\n//    Å (\\u+015D) --&gt; Åœ (\\u+015C)         ÅŸ (\\u+015F) --&gt; Åž (\\u+015E)\n//    Å¡ (\\u+0161) --&gt; Å  (\\u+0160)         Å£ (\\u+0163) --&gt; Å¢ (\\u+0162)\n//    Å¥ (\\u+0165) --&gt; Å¤ (\\u+0164)         Å§ (\\u+0167) --&gt; Å¦ (\\u+0166)\n//    Å© (\\u+0169) --&gt; Å¨ (\\u+0168)         Å« (\\u+016B) --&gt; Åª (\\u+016A)\n//    Å­ (\\u+016D) --&gt; Å¬ (\\u+016C)         Å¯ (\\u+016F) --&gt; Å® (\\u+016E)\n//    Å± (\\u+0171) --&gt; Å° (\\u+0170)         Å³ (\\u+0173) --&gt; Å² (\\u+0172)\n//    Åµ (\\u+0175) --&gt; Å´ (\\u+0174)         Å· (\\u+0177) --&gt; Å¶ (\\u+0176)\n//    Åº (\\u+017A) --&gt; Å¹ (\\u+0179)         Å¼ (\\u+017C) --&gt; Å» (\\u+017B)\n//    Å¾ (\\u+017E) --&gt; Å½ (\\u+017D)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToUpper_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_String_ToUpper_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUpper(CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToUpper (System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific casing rules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The uppercase equivalent of the current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The casing rules of the culture specified by the <code>culture</code> parameter determine the way the case of a string is changed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> If you pass the ToUpper method a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object other than <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>, the casing operation will take culture-specific rules into account. If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> method. This produces the same result in every culture and performs more efficiently.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings. The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.  </p>\n<pre><code class=\"lang-cs\" name=\"string.toupper1#1\">using System;\nusing System.Globalization;\n\nclass Example \n{\n    public static void Main() \n    {\n       string str1 = &quot;indigo&quot;;\n       string str2, str3;\n   \n       // str2 is an uppercase copy of str1, using English-United States culture.\n       str2 = str1.ToUpper(new CultureInfo(&quot;en-US&quot;, false));\n   \n       // str3 is an uppercase copy of str1, using Turkish-Turkey culture.\n       str3 = str1.ToUpper(new CultureInfo(&quot;tr-TR&quot;, false));\n   \n       // Compare the code points and compare the uppercase strings.\n       ShowCodePoints(&quot;str1&quot;, str1);\n       ShowCodePoints(&quot;str2&quot;, str2);\n       ShowCodePoints(&quot;str3&quot;, str3);\n       Console.WriteLine(&quot;str2 is {0} to str3.&quot;, \n            String.CompareOrdinal(str2, str3) == 0 ? &quot;equal&quot; : &quot;not equal&quot;);\n    }\n\n    public static void ShowCodePoints(string varName, string s)\n    {\n       Console.Write(&quot;{0} = {1}: &quot;, varName, s);\n       foreach (ushort u in s)\n         Console.Write(&quot;{0:x4} &quot;, u);\n       Console.WriteLine();\n    }\n}\n// This example displays the following output:\n//       str1 = indigo: 0069 006e 0064 0069 0067 006f\n//       str2 = INDIGO: 0049 004e 0044 0049 0047 004f\n//       str3 = INDIGO: 0130 004e 0044 0130 0047 004f\n//       str2 is not equal to str3.\n</code></pre><pre><code class=\"lang-vb\" name=\"string.toupper1#1\">Imports System.Globalization\n\nPublic Module Example\n   Public Sub Main()\n      Dim str1 As String = &quot;indigo&quot;\n      Dim str2, str3 As String\n      \n      &#39; str2 is an uppercase copy of str1, using English-United States culture.\n      str2 = str1.ToUpper(New CultureInfo(&quot;en-US&quot;, False))\n      \n      &#39; str3 is an uppercase copy of str1, using Turkish-Turkey culture.\n      str3 = str1.ToUpper(New CultureInfo(&quot;tr-TR&quot;, False))\n      \n      &#39; Compare the code points and compare the uppercase strings.\n      ShowCodePoints(&quot;str1&quot;, str1)\n      ShowCodePoints(&quot;str2&quot;, str2)\n      ShowCodePoints(&quot;str3&quot;, str3)\n      Console.WriteLine(&quot;str2 is {0} to str3.&quot;, _\n                        IIf(String.CompareOrdinal(str2, str3) = 0, &quot;equal&quot;, &quot;not equal&quot;))\n   End Sub\n   \n   Public Sub ShowCodePoints(varName As String, s As String)\n      Console.Write(&quot;{0} = {1}: &quot;, varName, s)\n      For Each c In s\n         Console.Write(&quot;{0:X4} &quot;, AscW(c))\n      Next\n      Console.WriteLine() \n   End Sub \nEnd Module\n&#39; The example displays the following output:\n&#39;       str1 = indigo: 0069 006E 0064 0069 0067 006F\n&#39;       str2 = INDIGO: 0049 004E 0044 0049 0047 004F\n&#39;       str3 = Ä°NDÄ°GO: 0130 004E 0044 0130 0047 004F\n&#39;       str2 is not equal to str3.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_ToUpperInvariant\">\r\n    \r\n            <a id=\"System_String_ToUpperInvariant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUpperInvariant()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a copy of this <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object converted to uppercase using the casing rules of the invariant culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToUpperInvariant ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The uppercase equivalent of the current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The invariant culture represents a culture that is culture-insensitive. It is associated with the English language but not with a specific country or region. For more information, see the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.  </p>\n<p> If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the ToUpperInvariant method. The ToUpperInvariant method is equivalent to <code>ToUpper(CultureInfo.InvariantCulture)</code>. The method is recommended when a collection of strings must appear in a predictable order in a user interface control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the value of the current instance. Instead, it returns a new string in which all characters in the current instance are converted to uppercase.  </p>\n</div>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> or ToUpperInvariant methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a string array that contains a single word in a number of languages. The ToUpperInvariant method is used to populate the elements of a parallel array with the case-insensitive version of each word. The [Array.Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName&gt; method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.ToUpperInvariant#1\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] words = { &quot;Tuesday&quot;, &quot;SalÄ±&quot;, &quot;Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº&quot;, &quot;Mardi&quot;, \n                         &quot;Î¤ÏÎ¯Ï„Î·&quot;, &quot;Martes&quot;, &quot;×™×•× ×©×œ×™×©×™&quot;, \n                         &quot;Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡&quot;, &quot;à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£&quot; };\n      StreamWriter sw = new StreamWriter(@&quot;.\\output.txt&quot;);\n            \n      // Display array in unsorted order.\n      foreach (string word in words)\n         sw.WriteLine(word);\n\n      sw.WriteLine();\n\n      // Create parallel array of words by calling ToUpperInvariant.\n      string[] upperWords = new string[words.Length];\n      for (int ctr = words.GetLowerBound(0); ctr &lt;= words.GetUpperBound(0); ctr++)\n         upperWords[ctr] = words[ctr].ToUpperInvariant();\n      \n      // Sort the words array based on the order of upperWords.\n      Array.Sort(upperWords, words, StringComparer.InvariantCulture);\n      \n      // Display the sorted array.\n      foreach (string word in words)\n         sw.WriteLine(word);\n\n      sw.Close();      \n   }\n}\n// The example produces the following output:\n//       Tuesday\n//       SalÄ±\n//       Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº\n//       Mardi\n//       Î¤ÏÎ¯Ï„Î·\n//       Martes\n//       ×™×•× ×©×œ×™×©×™\n//       Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡\n//       à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£\n//       \n//       Mardi\n//       Martes\n//       SalÄ±\n//       Tuesday\n//       Î¤ÏÎ¯Ï„Î·\n//       Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº\n//       ×™×•× ×©×œ×™×©×™\n//       Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡\n//       à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.ToUpperInvariant#1\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim words() As String = { &quot;Tuesday&quot;, &quot;SalÄ±&quot;, &quot;Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº&quot;, &quot;Mardi&quot;, _\n                                &quot;Î¤ÏÎ¯Ï„Î·&quot;, &quot;Martes&quot;, &quot;×™×•× ×©×œ×™×©×™&quot;, _\n                                &quot;Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡&quot;, &quot;à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£&quot; }\n      Dim sw As New StreamWriter(&quot;.\\output.txt&quot;)\n      \n      &#39; Display array in unsorted order.\n      For Each word As String In words\n         sw.WriteLine(word)\n      Next\n      sw.WriteLine()\n\n      &#39; Create parallel array of words by calling ToUpperInvariant.\n      Dim upperWords(words.Length - 1) As String\n      For ctr As Integer = words.GetLowerBound(0) To words.GetUpperBound(0)\n         upperWords(ctr) = words(ctr).ToUpperInvariant()\n      Next\n      \n      &#39; Sort the words array based on the order of upperWords.\n      Array.Sort(upperWords, words, StringComparer.InvariantCulture)\n      \n      &#39; Display the sorted array.\n      For Each word As String In words\n         sw.WriteLine(word)\n      Next\n      \n      sw.Close()\n   End Sub\nEnd Module\n&#39; The example produces the following output:\n&#39;       Tuesday\n&#39;       SalÄ±\n&#39;       Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº\n&#39;       Mardi\n&#39;       Î¤ÏÎ¯Ï„Î·\n&#39;       Martes\n&#39;       ×™×•× ×©×œ×™×©×™\n&#39;       Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡\n&#39;       à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£\n&#39;       \n&#39;       Mardi\n&#39;       Martes\n&#39;       SalÄ±\n&#39;       Tuesday\n&#39;       Î¤ÏÎ¯Ï„Î·\n&#39;       Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº\n&#39;       ×™×•× ×©×œ×™×©×™\n&#39;       Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡\n&#39;       à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Trim\">\r\n    \r\n            <a id=\"System_String_Trim_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Trim()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all leading and trailing white-space characters from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Trim ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Trim method removes from the current string all leading and trailing white-space characters. Each leading and trailing trim operation stops when a non-white-space character is encountered. For example, if the current string is &quot;   abc   xyz   &quot;, the Trim method returns &quot;abc   xyz&quot;. To remove white-space characters between words in a string, use a <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the Trim method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.  </p>\n</div>\n<p> If the current string equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or all the characters in the current instance consist of white-space characters, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> White-space characters are defined by the Unicode standard. The Trim method removes any leading and trailing characters that produce a return value of <code>true</code> when they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Trim method to remove any extra white space from strings entered by the user before concatenating them.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Trim#2\">using namespace System;\n\nvoid main()\n{\n   Console::Write(&quot;Enter your first name: &quot;);\n   String^ firstName = Console::ReadLine();\n   \n   Console::Write(&quot;Enter your middle name or initial: &quot;);\n   String^ middleName = Console::ReadLine();\n   \n   Console::Write(&quot;Enter your last name: &quot;);\n   String^ lastName = Console::ReadLine();\n   \n   Console::WriteLine();\n   Console::WriteLine(&quot;You entered &#39;{0}&#39;, &#39;{1}&#39;, and &#39;{2}&#39;.&quot;,\n                      firstName, middleName, lastName);\n   \n   String^ name = ((firstName-&gt;Trim() + &quot; &quot; + middleName-&gt;Trim())-&gt;Trim() + &quot; &quot; +\n                  lastName-&gt;Trim())-&gt;Trim();\n   Console::WriteLine(&quot;The result is &quot; + name + &quot;.&quot;);\n}\n// The following is possible output from this example:\n//       Enter your first name:    John\n//       Enter your middle name or initial:\n//       Enter your last name:    Doe\n//       \n//       You entered &#39;   John  &#39;, &#39;&#39;, and &#39;   Doe&#39;.\n//       The result is John Doe.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Trim#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.Write(&quot;Enter your first name: &quot;);\n      string firstName = Console.ReadLine();\n      \n      Console.Write(&quot;Enter your middle name or initial: &quot;);\n      string middleName = Console.ReadLine();\n      \n      Console.Write(&quot;Enter your last name: &quot;);\n      string lastName = Console.ReadLine();\n      \n      Console.WriteLine();\n      Console.WriteLine(&quot;You entered &#39;{0}&#39;, &#39;{1}&#39;, and &#39;{2}&#39;.&quot;, \n                        firstName, middleName, lastName);\n      \n      string name = ((firstName.Trim() + &quot; &quot; + middleName.Trim()).Trim() + &quot; &quot; + \n                    lastName.Trim()).Trim();\n      Console.WriteLine(&quot;The result is &quot; + name + &quot;.&quot;);\n   }\n}\n// The following is possible output from this example:\n//       Enter your first name:    John\n//       Enter your middle name or initial:\n//       Enter your last name:    Doe\n//       \n//       You entered &#39;   John  &#39;, &#39;&#39;, and &#39;   Doe&#39;.\n//       The result is John Doe.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Trim#2\">Module Example\n   Public Sub Main()\n      Console.Write(&quot;Enter your first name: &quot;)\n      Dim firstName As String = Console.ReadLine()\n      \n      Console.Write(&quot;Enter your middle name or initial: &quot;)\n      Dim middleName As String = Console.ReadLine()\n      \n      Console.Write(&quot;Enter your last name: &quot;)\n      Dim lastName As String = Console.ReadLine\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;You entered &#39;{0}&#39;, &#39;{1}&#39;, and &#39;{2}&#39;.&quot;, _\n                        firstName, middleName, lastName)\n                        \n      Dim name As String = ((firstName.Trim() + &quot; &quot; + middleName.Trim()).Trim() _\n                           + &quot; &quot; + lastName.Trim()).Trim()                        \n      Console.WriteLine(&quot;The result is &quot; + name + &quot;.&quot;)\n   End Sub\nEnd Module\n&#39; The following is possible output from this example:\n&#39;       Enter your first name:    John\n&#39;       Enter your middle name or initial:\n&#39;       Enter your last name:    Doe\n&#39;       \n&#39;       You entered &#39;   John  &#39;, &#39;&#39;, and &#39;   Doe&#39;.\n&#39;       The result is John Doe.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_Trim_System_Char___\">\r\n    \r\n            <a id=\"System_String_Trim_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Trim(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Trim (char[] trimChars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>trimChars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Unicode characters to remove, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the start and end of the current string. If <code>trimChars</code> is <code>null</code> or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Trim method removes from the current string all leading and trailing characters that are in the <code>trimChars</code> parameter. Each leading and trailing trim operation stops when a character that is not in <code>trimChars</code> is encountered. For example, if the current string is &quot;123abc456xyz789&quot; and <code>trimChars</code> contains the digits from &quot;1&quot; through &quot;9&quot;, the Trim method returns &quot;abc456xyz&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the Trim method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading and trailing <code>trimChars</code> characters found in the current instance are removed.  </p>\n</div>\n<p> If the current string equals <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or all the characters in the current instance consist of characters in the <code>trimChars</code> array, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> If <code>trimChars</code> is <code>null</code> or an empty array, this method removes any leading or trailing characters that result in the method returning <code>true</code> when they are passed to the <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a> method,</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Trim method to remove space, asterisk (*), and apostrophe (&#39;) characters from a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.String.Trim#1\">using namespace System;\n\nvoid main()\n{\n   array&lt;Char&gt;^ charsToTrim = { L&#39;*&#39;, L&#39; &#39;, L&#39;\\\\&#39; };\n   String^ banner = &quot;*** Much Ado About Nothing ***&quot;;\n   String^ result = banner-&gt;Trim(charsToTrim);\n   Console::WriteLine(&quot;Trimmmed<br>   {0}<br>to<br>   &#39;{1}&#39;&quot;, banner, result);\n}\n// The example displays the following output:\n//       Trimmmed\n//          *** Much Ado About Nothing ***\n//       to\n//          &#39;Much Ado About Nothing&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.Trim#1\">Module Example\n   Public Sub Main()\n      Dim charsToTrim() As Char = { &quot;*&quot;c, &quot; &quot;c, &quot;&#39;&quot;c}\n      Dim banner As String = &quot;*** Much Ado About Nothing ***&quot;\n      Dim result As String = banner.Trim(charsToTrim)\n      Console.WriteLine(&quot;Trimmmed{0}   {1}{0}to{0}   &#39;{2}&#39;&quot;, _\n                        vbCrLf, banner, result)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Trimmmed\n&#39;          *** Much Ado About Nothing ***\n&#39;       to\n&#39;          &#39;Much Ado About Nothing&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.String.Trim#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      char[] charsToTrim = { &#39;*&#39;, &#39; &#39;, &#39;\\&#39;&#39;};\n      string banner = &quot;*** Much Ado About Nothing ***&quot;;\n      string result = banner.Trim(charsToTrim);\n      Console.WriteLine(&quot;Trimmmed<br>   {0}<br>to<br>   &#39;{1}&#39;&quot;, banner, result);\n   }\n}\n// The example displays the following output:\n//       Trimmmed\n//          *** Much Ado About Nothing ***\n//       to\n//          &#39;Much Ado About Nothing&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_TrimEnd_System_Char___\">\r\n    \r\n            <a id=\"System_String_TrimEnd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimEnd(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Removes all trailing occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TrimEnd (char[] trimChars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>trimChars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Unicode characters to remove, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string that remains after all occurrences of the characters in the <code>trimChars</code> parameter are removed from the end of the current string. If <code>trimChars</code> is <code>null</code> or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TrimEnd method removes from the current string all trailing characters that are in the <code>trimChars</code> parameter. The trim operation stops when the first character that is not in <code>trimChars</code> is encountered at the end of the string. For example, if the current string is &quot;123abc456xyz789&quot; and <code>trimChars</code> contains the digits from &quot;1&quot; through &quot;9&quot;, the TrimEnd method returns &quot;123abc456xyz&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the TrimEnd method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all trailing characters found in <code>trimChars</code> are removed from the current string.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how you can use the TrimEnd method to trim white space or punctuation marks from the end of a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.TrimEnd#2\">using System;\n\npublic class TrimEnd\n{\n   public static void Main()\n   {\n      string sentence = &quot;The dog had a bone, a ball, and other toys.&quot;;\n      char[] charsToTrim = {&#39;,&#39;, &#39;.&#39;, &#39; &#39;};\n      string[] words = sentence.Split();\n      foreach (string word in words)\n         Console.WriteLine(word.TrimEnd(charsToTrim));\n   }\n}\n// The example displays the following output:\n//       The\n//       dog\n//       had\n//       a\n//       bone\n//       a\n//       ball\n//       and\n//       other\n//       toys\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.TrimEnd#2\">Module TrimEnd\n   Public Sub Main()\n      Dim sentence As String = &quot;The dog had a bone, a ball, and other toys.&quot;\n      Dim charsToTrim() As Char = {&quot;,&quot;c, &quot;.&quot;c, &quot; &quot;c}\n      Dim words() As String = sentence.Split()\n      For Each word As String In words\n         Console.WriteLine(word.TrimEnd(charsToTrim))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The\n&#39;       dog\n&#39;       had\n&#39;       a\n&#39;       bone\n&#39;       a\n&#39;       ball\n&#39;       and\n&#39;       other\n&#39;       toys\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_TrimStart_System_Char___\">\r\n    \r\n            <a id=\"System_String_TrimStart_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimStart(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Removes all leading occurrences of a set of characters specified in an array from the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TrimStart (char[] trimChars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>trimChars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Unicode characters to remove, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string that remains after all occurrences of characters in the <code>trimChars</code> parameter are removed from the start of the current string. If <code>trimChars</code> is <code>null</code> or an empty array, white-space characters are removed instead.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TrimStart method removes from the current string all leading characters that are in the <code>trimChars</code> parameter. The trim operation stops when a character that is not in <code>trimChars</code> is encountered. For example, if the current string is &quot;123abc456xyz789&quot; and <code>trimChars</code> contains the digits from &quot;1&quot; through &quot;9&quot;, the TrimStart method returns &quot;abc456xyz789&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the TrimStart method removes any characters from the current instance, this method does not modify the value of the current instance. Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the TrimStart method to trim white space and comment characters from lines of source code. The <code>StripComments</code> method wraps a call to TrimStart and passes it a character array that contains a space and the comment character, which is an apostrophe ( &#39; ) in Visual Basic and a slash ( / ) in C#. The TrimStart method is also called to remove leading white space when evaluating whether a string is a comment.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.TrimStart#1\">   public static string[] StripComments(string[] lines)\n   { \n      List&lt;string&gt; lineList = new List&lt;string&gt;();\n      foreach (string line in lines)\n      {\n         if (line.TrimStart(&#39; &#39;).StartsWith(&quot;//&quot;))\n            lineList.Add(line.TrimStart(&#39; &#39;, &#39;/&#39;));\n      }\n      return lineList.ToArray();\n   }   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.TrimStart#1\">   Public Shared Function StripComments(lines() As String) As String()\n      Dim lineList As New List(Of String)\n      For Each line As String In lines\n         If line.TrimStart(&quot; &quot;c).StartsWith(&quot;&#39;&quot;) Then\n            linelist.Add(line.TrimStart(&quot;&#39;&quot;c, &quot; &quot;c))\n         End If\n      Next\n      Return lineList.ToArray()\n   End Function   \n</code></pre><p> The following example then illustrates a call to the <code>StripComments</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.String.TrimStart#2\">   public static void Main()\n   {\n      string[] lines= {&quot;using System;&quot;,\n                       &quot;&quot;, \n                       &quot;public class HelloWorld&quot;,\n                       &quot;{&quot;, \n                       &quot;   public static void Main()&quot;,\n                       &quot;   {&quot;, \n                       &quot;      // This code displays a simple greeting&quot;, \n                       &quot;      // to the console.&quot;, \n                       &quot;      Console.WriteLine(\\&quot;Hello, World.\\&quot;);&quot;, \n                       &quot;   }&quot;, \n                       &quot;}&quot;};\n      Console.WriteLine(&quot;Before call to StripComments:&quot;);\n      foreach (string line in lines)\n         Console.WriteLine(&quot;   {0}&quot;, line);                         \n      \n      string[] strippedLines = StripComments(lines); \n      Console.WriteLine(&quot;After call to StripComments:&quot;);\n      foreach (string line in strippedLines)\n         Console.WriteLine(&quot;   {0}&quot;, line);                         \n   }\n   // This code produces the following output to the console:\n   //    Before call to StripComments:\n   //       using System;\n   //   \n   //       public class HelloWorld\n   //       {\n   //           public static void Main()\n   //           {\n   //               // This code displays a simple greeting\n   //               // to the console.\n   //               Console.WriteLine(&quot;Hello, World.&quot;);\n   //           }\n   //       }  \n   //    After call to StripComments:\n   //       This code displays a simple greeting\n   //       to the console.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.String.TrimStart#2\">   Public Shared Sub Main()\n      Dim lines() As String = {&quot;Public Module HelloWorld&quot;, _\n                               &quot;   Public Sub Main()&quot;, _\n                               &quot;      &#39; This code displays a simple greeting&quot;, _\n                               &quot;      &#39; to the console.&quot;, _\n                               &quot;      Console.WriteLine(&quot;&quot;Hello, World.&quot;&quot;)&quot;, _\n                               &quot;   End Sub&quot;, _\n                               &quot; End Module&quot;}\n      Console.WriteLine(&quot;Code before call to StripComments:&quot;)\n      For Each line As String In lines\n         Console.WriteLine(&quot;   {0}&quot;, line)                         \n      Next                            \n      \n      Dim strippedLines() As String = StripComments(lines) \n      Console.WriteLine(&quot;Code after call to StripComments:&quot;)\n      For Each line As String In strippedLines\n         Console.WriteLine(&quot;   {0}&quot;, line)                         \n      Next                            \n   End Sub\n   &#39; This code produces the following output to the console:\n   &#39;    Code before call to StripComments:\n   &#39;       Public Module HelloWorld\n   &#39;          Public Sub Main()\n   &#39;             &#39; This code displays a simple greeting\n   &#39;             &#39; to the console.\n   &#39;             Console.WriteLine(&quot;Hello, World.&quot;)\n   &#39;          End Sub\n   &#39;       End Module\n   &#39;    Code after call to StripComments:\n   &#39;       This code displays a simple greeting\n   &#39;       to the console.   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_String_op_Equality_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified strings have the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (string a, string b);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of <code>a</code> is the same as the value of <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equality method defines the operation of the equality operator for the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class. It enables code such as that shown in the Example section. The operator, in turn, calls the static <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_String_\" data-linktype=\"relative-path\">Equals(String,String)</a> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic compiler does not resolve the equality operator as a call to the Equality method. Instead, the equality operator wraps a call to the <a class=\"xref\" href=\"microsoft.visualbasic.compilerservices.operators#Microsoft_VisualBasic_CompilerServices_Operators_CompareString_\" data-linktype=\"relative-path\">CompareString</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the equality operator.  </p>\n<pre><code class=\"lang-cs\" name=\"system.string.equality#1\">// Example for the String Equality operator.\nusing System;\n\nclass EqualityOp \n{\n    public static void Main() \n    {\n        Console.WriteLine( \n            &quot;This example of the String Equality operator<br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n\n        CompareAndDisplay( &quot;ijkl&quot; );\n        CompareAndDisplay( &quot;ABCD&quot; );\n        CompareAndDisplay( &quot;abcd&quot; );\n    }\n\n    static void CompareAndDisplay( string Comparand )\n    {\n        String  Lower = &quot;abcd&quot;;\n\n        Console.WriteLine( \n            &quot;\\&quot;{0}\\&quot; == \\&quot;{1}\\&quot; ?  {2}&quot;,\n            Lower, Comparand, Lower == Comparand );\n    }\n}\n\n/*\nThis example of the String Equality operator \ngenerates the following output.\n\n&quot;abcd&quot; == &quot;ijkl&quot; ?  False\n&quot;abcd&quot; == &quot;ABCD&quot; ?  False\n&quot;abcd&quot; == &quot;abcd&quot; ?  True\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"system.string.equality#1\">// Example for the String Equality operator.\nusing namespace System;\nvoid CompareAndDisplay( String^ Comparand )\n{\n   String^ Lower = &quot;abcd&quot;;\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; == \\&quot;{1}\\&quot; ?  {2}&quot;, Lower, Comparand, Lower == Comparand );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the String Equality operator<br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   CompareAndDisplay( &quot;ijkl&quot; );\n   CompareAndDisplay( &quot;ABCD&quot; );\n   CompareAndDisplay( &quot;abcd&quot; );\n}\n\n/*\nThis example of the String Equality operator \ngenerates the following output.\n\n&quot;abcd&quot; == &quot;ijkl&quot; ?  False\n&quot;abcd&quot; == &quot;ABCD&quot; ?  False\n&quot;abcd&quot; == &quot;abcd&quot; ?  True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_op_Inequality_System_String_System_String_\">\r\n    \r\n            <a id=\"System_String_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified strings have different values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (string a, string b);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first string to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second string to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of <code>a</code> is different from the value of <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Inequality method defines the operation of the inequality operator for the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class.   It enables code such as that shown in the Examples section.  </p>\n<p> The Inequality operator in turn calls the static <a class=\"xref\" href=\"system.string#System_String_Equals_System_String_System_String_\" data-linktype=\"relative-path\">Equals(String,String)</a> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic compiler does not resolve the inequality operator as a call to the Inequality method. Instead, the inequality operator wraps a call to the <a class=\"xref\" href=\"microsoft.visualbasic.compilerservices.operators#Microsoft_VisualBasic_CompilerServices_Operators_CompareString_\" data-linktype=\"relative-path\">CompareString</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the inequality operator.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.string.inequality#1\">// Example for the String Inequality operator.\nusing namespace System;\nvoid CompareAndDisplay( String^ Comparand )\n{\n   String^ Lower = &quot;abcd&quot;;\n   Console::WriteLine( &quot;\\&quot;{0}\\&quot; != \\&quot;{1}\\&quot; ?  {2}&quot;, Lower, Comparand, Lower != Comparand );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the String Inequality operator<br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   CompareAndDisplay( &quot;ijkl&quot; );\n   CompareAndDisplay( &quot;ABCD&quot; );\n   CompareAndDisplay( &quot;abcd&quot; );\n}\n\n/*\nThis example of the String Inequality operator\ngenerates the following output.\n\n&quot;abcd&quot; != &quot;ijkl&quot; ?  True\n&quot;abcd&quot; != &quot;ABCD&quot; ?  True\n&quot;abcd&quot; != &quot;abcd&quot; ?  False\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"system.string.inequality#1\">// Example for the String Inequality operator.\nusing System;\n\nclass InequalityOp \n{\n    public static void Main() \n    {\n        Console.WriteLine( \n            &quot;This example of the String Inequality operator<br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n\n        CompareAndDisplay( &quot;ijkl&quot; );\n        CompareAndDisplay( &quot;ABCD&quot; );\n        CompareAndDisplay( &quot;abcd&quot; );\n    }\n\n    static void CompareAndDisplay( String Comparand )\n    {\n        String  Lower = &quot;abcd&quot;;\n\n        Console.WriteLine( \n            &quot;\\&quot;{0}\\&quot; != \\&quot;{1}\\&quot; ?  {2}&quot;,\n            Lower, Comparand, Lower != Comparand );\n    }\n}\n\n/*\nThis example of the String Inequality operator\ngenerates the following output.\n\n&quot;abcd&quot; != &quot;ijkl&quot; ?  True\n&quot;abcd&quot; != &quot;ABCD&quot; ?  True\n&quot;abcd&quot; != &quot;abcd&quot; ?  False\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_Collections_Generic_IEnumerable_System_Char__GetEnumerator\">\r\n    \r\n            <a id=\"System_String_System_Collections_Generic_IEnumerable_System_Char__GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable&lt;Char&gt;.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IEnumerator&lt;char&gt; IEnumerable&lt;char&gt;.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator</a>&lt;<a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>&gt;</div>\r\n                  </div>\r\n                  <p>A strongly-typed enumerator that can be used to iterate through the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface object. For more information, see the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_String_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An enumerator that can be used to iterate through the current string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface. For more information, see the <a class=\"xref\" href=\"system.collections.ienumerable#System_Collections_IEnumerable_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of the current string is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>; <code>false</code> if the value of the current string is <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value of the current string is not <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_String_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(String)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater than <a class=\"xref\" href=\"system.byte#System_Byte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.byte#System_Byte_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToByte(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The character at index 0 in the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToChar_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToChar(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDateTime*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDateTime_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToDateTime(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number less than <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a> or than <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> greater.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDecimal_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToDecimal(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number less than <a class=\"xref\" href=\"system.double#System_Double_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.double#System_Double_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDouble_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToDouble(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater than <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.int16#System_Int16_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToInt16(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToInt32(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToInt64(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater than <a class=\"xref\" href=\"system.sbyte#System_SByte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.sbyte#System_SByte_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToSByte(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSingle_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToSingle(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the returned object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be converted to the type specified by the <code>type</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater than <a class=\"xref\" href=\"system.uint16#System_UInt16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.uint16#System_UInt16_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToUInt16(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object cannot be parsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a number greater <a class=\"xref\" href=\"system.uint32#System_UInt32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.uint32#System_UInt32_MinValue\" data-linktype=\"relative-path\">MinValue</a></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToUInt32(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_String_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_String_System_IConvertible_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToUInt64(String,IFormatProvider)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.String.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.String.yml\">\r\n<meta name=\"APIName\" content=\"System.String\">\r\n<meta name=\"APIName\" content=\"System.String..ctor\">\r\n<meta name=\"APIName\" content=\"System.String.Chars\">\r\n<meta name=\"APIName\" content=\"System.String.Clone\">\r\n<meta name=\"APIName\" content=\"System.String.Compare\">\r\n<meta name=\"APIName\" content=\"System.String.CompareOrdinal\">\r\n<meta name=\"APIName\" content=\"System.String.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.String.Concat\">\r\n<meta name=\"APIName\" content=\"System.String.Concat&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.String.Contains\">\r\n<meta name=\"APIName\" content=\"System.String.Copy\">\r\n<meta name=\"APIName\" content=\"System.String.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.String.Empty\">\r\n<meta name=\"APIName\" content=\"System.String.EndsWith\">\r\n<meta name=\"APIName\" content=\"System.String.Equals\">\r\n<meta name=\"APIName\" content=\"System.String.Format\">\r\n<meta name=\"APIName\" content=\"System.String.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.String.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.String.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.String.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.String.IndexOfAny\">\r\n<meta name=\"APIName\" content=\"System.String.Insert\">\r\n<meta name=\"APIName\" content=\"System.String.Intern\">\r\n<meta name=\"APIName\" content=\"System.String.IsInterned\">\r\n<meta name=\"APIName\" content=\"System.String.IsNormalized\">\r\n<meta name=\"APIName\" content=\"System.String.IsNullOrEmpty\">\r\n<meta name=\"APIName\" content=\"System.String.IsNullOrWhiteSpace\">\r\n<meta name=\"APIName\" content=\"System.String.Join\">\r\n<meta name=\"APIName\" content=\"System.String.Join&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.String.LastIndexOf\">\r\n<meta name=\"APIName\" content=\"System.String.LastIndexOfAny\">\r\n<meta name=\"APIName\" content=\"System.String.Length\">\r\n<meta name=\"APIName\" content=\"System.String.Normalize\">\r\n<meta name=\"APIName\" content=\"System.String.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.String.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.String.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.String.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.String.PadLeft\">\r\n<meta name=\"APIName\" content=\"System.String.PadRight\">\r\n<meta name=\"APIName\" content=\"System.String.Remove\">\r\n<meta name=\"APIName\" content=\"System.String.Replace\">\r\n<meta name=\"APIName\" content=\"System.String.Split\">\r\n<meta name=\"APIName\" content=\"System.String.StartsWith\">\r\n<meta name=\"APIName\" content=\"System.String.Substring\">\r\n<meta name=\"APIName\" content=\"System.String.IEnumerable&lt;Char&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.String.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.String.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.String.ToCharArray\">\r\n<meta name=\"APIName\" content=\"System.String.ToLower\">\r\n<meta name=\"APIName\" content=\"System.String.ToLowerInvariant\">\r\n<meta name=\"APIName\" content=\"System.String.ToString\">\r\n<meta name=\"APIName\" content=\"System.String.ToUpper\">\r\n<meta name=\"APIName\" content=\"System.String.ToUpperInvariant\">\r\n<meta name=\"APIName\" content=\"System.String.Trim\">\r\n<meta name=\"APIName\" content=\"System.String.TrimEnd\">\r\n<meta name=\"APIName\" content=\"System.String.TrimStart\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"52b6c93e-6da7-6ba1-9704-d617756bbde2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents text as a sequence of UTF-16 code units.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.String\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.String.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.String.yml","open_to_public_contributors":true,"api_name":["System.String","System.String..ctor","System.String.Chars","System.String.Clone","System.String.Compare","System.String.CompareOrdinal","System.String.CompareTo","System.String.Concat","System.String.Concat<T>","System.String.Contains","System.String.Copy","System.String.CopyTo","System.String.Empty","System.String.EndsWith","System.String.Equals","System.String.Format","System.String.GetEnumerator","System.String.GetHashCode","System.String.GetTypeCode","System.String.IndexOf","System.String.IndexOfAny","System.String.Insert","System.String.Intern","System.String.IsInterned","System.String.IsNormalized","System.String.IsNullOrEmpty","System.String.IsNullOrWhiteSpace","System.String.Join","System.String.Join<T>","System.String.LastIndexOf","System.String.LastIndexOfAny","System.String.Length","System.String.Normalize","System.String.op_Equality","System.String.op_op_Equality","System.String.op_Inequality","System.String.op_op_Inequality","System.String.PadLeft","System.String.PadRight","System.String.Remove","System.String.Replace","System.String.Split","System.String.StartsWith","System.String.Substring","System.String.IEnumerable<Char>.GetEnumerator","System.String.IEnumerable.GetEnumerator","System.String.IConvertible.ToBoolean","System.String.IConvertible.ToByte","System.String.IConvertible.ToChar","System.String.IConvertible.ToDateTime","System.String.IConvertible.ToDecimal","System.String.IConvertible.ToDouble","System.String.IConvertible.ToInt16","System.String.IConvertible.ToInt32","System.String.IConvertible.ToInt64","System.String.IConvertible.ToSByte","System.String.IConvertible.ToSingle","System.String.IConvertible.ToType","System.String.IConvertible.ToUInt16","System.String.IConvertible.ToUInt32","System.String.IConvertible.ToUInt64","System.String.ToCharArray","System.String.ToLower","System.String.ToLowerInvariant","System.String.ToString","System.String.ToUpper","System.String.ToUpperInvariant","System.String.Trim","System.String.TrimEnd","System.String.TrimStart"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.String","System::String","System.String.#ctor","System::String::#ctor","System.String.Chars","System::String::Chars","System.String.Clone","System::String::Clone","System.String.Compare","System::String::Compare","System.String.CompareOrdinal","System::String::CompareOrdinal","System.String.CompareTo","System::String::CompareTo","System.String.Concat","System::String::Concat","System.String.Concat``1","System::String::Concat``1","System.String.Contains","System::String::Contains","System.String.Copy","System::String::Copy","System.String.CopyTo","System::String::CopyTo","System.String.Empty","System::String::Empty","System.String.EndsWith","System::String::EndsWith","System.String.Equals","System::String::Equals","System.String.Format","System::String::Format","System.String.GetEnumerator","System::String::GetEnumerator","System.String.GetHashCode","System::String::GetHashCode","System.String.GetTypeCode","System::String::GetTypeCode","System.String.IndexOf","System::String::IndexOf","System.String.IndexOfAny","System::String::IndexOfAny","System.String.Insert","System::String::Insert","System.String.Intern","System::String::Intern","System.String.IsInterned","System::String::IsInterned","System.String.IsNormalized","System::String::IsNormalized","System.String.IsNullOrEmpty","System::String::IsNullOrEmpty","System.String.IsNullOrWhiteSpace","System::String::IsNullOrWhiteSpace","System.String.Join","System::String::Join","System.String.Join``1","System::String::Join``1","System.String.LastIndexOf","System::String::LastIndexOf","System.String.LastIndexOfAny","System::String::LastIndexOfAny","System.String.Length","System::String::Length","System.String.Normalize","System::String::Normalize","System.String.op_Equality","System::String::op_Equality","System.String.op_Inequality","System::String::op_Inequality","System.String.PadLeft","System::String::PadLeft","System.String.PadRight","System::String::PadRight","System.String.Remove","System::String::Remove","System.String.Replace","System::String::Replace","System.String.Split","System::String::Split","System.String.StartsWith","System::String::StartsWith","System.String.Substring","System::String::Substring","System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator","System::String::System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator","System.String.System#Collections#IEnumerable#GetEnumerator","System::String::System#Collections#IEnumerable#GetEnumerator","System.String.System#IConvertible#ToBoolean","System::String::System#IConvertible#ToBoolean","System.String.System#IConvertible#ToByte","System::String::System#IConvertible#ToByte","System.String.System#IConvertible#ToChar","System::String::System#IConvertible#ToChar","System.String.System#IConvertible#ToDateTime","System::String::System#IConvertible#ToDateTime","System.String.System#IConvertible#ToDecimal","System::String::System#IConvertible#ToDecimal","System.String.System#IConvertible#ToDouble","System::String::System#IConvertible#ToDouble","System.String.System#IConvertible#ToInt16","System::String::System#IConvertible#ToInt16","System.String.System#IConvertible#ToInt32","System::String::System#IConvertible#ToInt32","System.String.System#IConvertible#ToInt64","System::String::System#IConvertible#ToInt64","System.String.System#IConvertible#ToSByte","System::String::System#IConvertible#ToSByte","System.String.System#IConvertible#ToSingle","System::String::System#IConvertible#ToSingle","System.String.System#IConvertible#ToType","System::String::System#IConvertible#ToType","System.String.System#IConvertible#ToUInt16","System::String::System#IConvertible#ToUInt16","System.String.System#IConvertible#ToUInt32","System::String::System#IConvertible#ToUInt32","System.String.System#IConvertible#ToUInt64","System::String::System#IConvertible#ToUInt64","System.String.ToCharArray","System::String::ToCharArray","System.String.ToLower","System::String::ToLower","System.String.ToLowerInvariant","System::String::ToLowerInvariant","System.String.ToString","System::String::ToString","System.String.ToUpper","System::String::ToUpper","System.String.ToUpperInvariant","System::String::ToUpperInvariant","System.String.Trim","System::String::Trim","System.String.TrimEnd","System::String::TrimEnd","System.String.TrimStart","System::String::TrimStart"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"52b6c93e-6da7-6ba1-9704-d617756bbde2","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/String.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"String class | Microsoft Docs","_op_ogTitle":"String class","description":"Represents text as a sequence of UTF-16 code units.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.String","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.string","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.string","fileRelativePath":"System.String.html"},"themesRelativePathToOutputRoot":"_themes/"}