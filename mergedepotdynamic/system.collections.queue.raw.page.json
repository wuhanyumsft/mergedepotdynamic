{"content":"    \r\n    <h1 id=\"System_Collections_Queue\">\r\n      <span class=\"lang-csharp\">Queue</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a first-in, first-out collection of objects.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Queue/QueueDebugView))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class Queue : ICloneable, System.Collections.ICollection</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Queue</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class implements a queue as a circular array. Objects stored in a Queue are inserted at one end and removed from the other.  </p>\n<p> Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value. Use Queue if you need to access the information in the same order that it is stored in the collection. Use <a class=\"xref\" href=\"system.collections.stack\" data-linktype=\"relative-path\">Stack</a> if you need to access the information in reverse order. Use <a class=\"xref\" href=\"system.collections.concurrent.concurrentqueue-1\" data-linktype=\"relative-path\">ConcurrentQueue&lt;T&gt;</a> or <a class=\"xref\" href=\"system.collections.concurrent.concurrentstack-1\" data-linktype=\"relative-path\">ConcurrentStack&lt;T&gt;</a> if you need to access the collection from multiple threads concurrently.  </p>\n<p> Three main operations can be performed on a Queue and its elements:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> adds an element to the end of the Queue.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> removes the oldest element from the start of the Queue.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Peek_\" data-linktype=\"relative-path\">Peek</a> returns the oldest element that is at the start of the Queue but does not remove it from the Queue.  </p>\n<p>The capacity of a Queue is the number of elements the Queue can hold. As elements are added to a Queue, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a>.  </p>\n<p>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the Queue is constructed. The default growth factor is 2.0. The capacity of the Queue will always increase by at least a minimum of four, regardless of the growth factor. For example, a Queue with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.  </p>\n<p>Queue accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p>For the generic version of this collection, see <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">System.Collections.Generic.Queue&lt;T&gt;</a></p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue__ctor\" data-linktype=\"self-bookmark\">Queue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> class that is empty, has the default initial capacity, and uses the default growth factor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue__ctor_System_Collections_ICollection_\" data-linktype=\"self-bookmark\">Queue(ICollection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue__ctor_System_Int32_\" data-linktype=\"self-bookmark\">Queue(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> class that is empty, has the specified initial capacity, and uses the default growth factor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue__ctor_System_Int32_System_Single_\" data-linktype=\"self-bookmark\">Queue(Int32,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> class that is empty, has the specified initial capacity, and uses the specified growth factor.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_IsSynchronized\" data-linktype=\"self-bookmark\">IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_SyncRoot\" data-linktype=\"self-bookmark\">SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all objects from the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_Contains_System_Object_\" data-linktype=\"self-bookmark\">Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an element is in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> elements to an existing one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified array index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_Dequeue\" data-linktype=\"self-bookmark\">Dequeue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes and returns the object at the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_Enqueue_System_Object_\" data-linktype=\"self-bookmark\">Enqueue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an object to the end of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_Peek\" data-linktype=\"self-bookmark\">Peek()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the object at the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> without removing it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_Synchronized_System_Collections_Queue_\" data-linktype=\"self-bookmark\">Synchronized(Queue)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> that wraps the original queue, and is thread safe.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_ToArray\" data-linktype=\"self-bookmark\">ToArray()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> elements to a new array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Queue_TrimToSize\" data-linktype=\"self-bookmark\">TrimToSize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the capacity to the actual number of elements in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue__ctor\">\r\n    \r\n            <a id=\"System_Collections_Queue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Queue()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> class that is empty, has the default initial capacity, and uses the default growth factor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Queue ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is the number of elements the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> can hold.  As elements are added to a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a>.  </p>\n<p> The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is constructed.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue__ctor_System_Collections_ICollection_\">\r\n    \r\n            <a id=\"System_Collections_Queue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Queue(ICollection)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Queue (System.Collections.ICollection col);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>col</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to copy elements from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>col</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is the number of elements the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> can hold.  As elements are added to a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a>.  </p>\n<p> The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is constructed.  </p>\n<p> The elements are copied onto the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> in the same order they are read by the <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>col</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Queue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Queue(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> class that is empty, has the specified initial capacity, and uses the default growth factor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Queue (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial number of elements that the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is the number of elements the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> can hold.  As elements are added to a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a>.  </p>\n<p> The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is constructed.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue__ctor_System_Int32_System_Single_\">\r\n    \r\n            <a id=\"System_Collections_Queue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Queue(Int32,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> class that is empty, has the specified initial capacity, and uses the specified growth factor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Queue (int capacity, float growFactor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial number of elements that the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> can contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>growFactor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The factor by which the capacity of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is expanded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>growFactor</code> is less than 1.0 or greater than 10.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is the number of elements the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> can hold.  As elements are added to a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a>.  </p>\n<p> The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is constructed. The capacity of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> from increasing in size.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_Count\">\r\n    \r\n            <a id=\"System_Collections_Queue_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> can store. Count is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements. The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is constructed. The capacity of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> from increasing in size.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_Queue_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is synchronized (thread safe); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To guarantee the thread safety of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, all operations must be done through the wrapper returned by the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Synchronized_\" data-linktype=\"relative-path\">Synchronized</a> method.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration. Retrieving the value of this property is an O(1) operation.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Queue.IsSynchronized Example#2\">        Queue^ myCollection = gcnew Queue();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.IsSynchronized Example#2\">        Queue myCollection = new Queue();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Queue.IsSynchronized Example#2\">        Dim myCollection As New Queue()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> The following example shows how to synchronize a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, determine if a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is synchronized, and use a synchronized <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Queue.IsSynchronized Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQ = gcnew Queue;\n   myQ-&gt;Enqueue( &quot;The&quot; );\n   myQ-&gt;Enqueue( &quot;quick&quot; );\n   myQ-&gt;Enqueue( &quot;brown&quot; );\n   myQ-&gt;Enqueue( &quot;fox&quot; );\n   \n   // Creates a synchronized wrapper around the Queue.\n   Queue^ mySyncdQ = Queue::Synchronized( myQ );\n   \n   // Displays the sychronization status of both Queues.\n   Console::WriteLine( &quot;myQ is {0}.&quot;, myQ-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n   Console::WriteLine( &quot;mySyncdQ is {0}.&quot;, mySyncdQ-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n}\n\n/*\nThis code produces the following output.\n\nmyQ is not synchronized.\nmySyncdQ is synchronized.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.IsSynchronized Example#1\"> using System;\n using System.Collections;\n public class SamplesQueue  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Queue.\n       Queue myQ = new Queue();\n       myQ.Enqueue( &quot;The&quot; );\n       myQ.Enqueue( &quot;quick&quot; );\n       myQ.Enqueue( &quot;brown&quot; );\n       myQ.Enqueue( &quot;fox&quot; );\n \n       // Creates a synchronized wrapper around the Queue.\n       Queue mySyncdQ = Queue.Synchronized( myQ );\n \n       // Displays the sychronization status of both Queues.\n       Console.WriteLine( &quot;myQ is {0}.&quot;, myQ.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n       Console.WriteLine( &quot;mySyncdQ is {0}.&quot;, mySyncdQ.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n    }\n }\n /* \n This code produces the following output.\n \n myQ is not synchronized.\n mySyncdQ is synchronized.\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Queue.IsSynchronized Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesQueue    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQ As New Queue()\n        myQ.Enqueue(&quot;The&quot;)\n        myQ.Enqueue(&quot;quick&quot;)\n        myQ.Enqueue(&quot;brown&quot;)\n        myQ.Enqueue(&quot;fox&quot;)\n        \n        &#39; Creates a synchronized wrapper around the Queue.\n        Dim mySyncdQ As Queue = Queue.Synchronized(myQ)\n        \n        &#39; Displays the sychronization status of both Queues.\n        Dim msg As String\n        If myQ.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;myQ is {0}.&quot;, msg)\n        If mySyncdQ.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;mySyncdQ is {0}.&quot;, msg)\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myQ is not synchronized.\n&#39; mySyncdQ is synchronized. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_Queue_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To create a synchronized version of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, use the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Synchronized_\" data-linktype=\"relative-path\">Synchronized</a> method. However, derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, not directly on the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the SyncRoot during the entire enumeration. Retrieving the value of this property is an O(1) operation.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Queue.IsSynchronized Example#2\">        Queue^ myCollection = gcnew Queue();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.IsSynchronized Example#2\">        Queue myCollection = new Queue();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Queue.IsSynchronized Example#2\">        Dim myCollection As New Queue()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_Clear\">\r\n    \r\n            <a id=\"System_Collections_Queue_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all objects from the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> The capacity remains unchanged. To reset the capacity of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, call <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a>. Trimming an empty <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to clear the values of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Queue.Clear Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( Queue^ myQ );\nint main()\n{\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQ = gcnew Queue;\n   myQ-&gt;Enqueue( &quot;The&quot; );\n   myQ-&gt;Enqueue( &quot;quick&quot; );\n   myQ-&gt;Enqueue( &quot;brown&quot; );\n   myQ-&gt;Enqueue( &quot;fox&quot; );\n   myQ-&gt;Enqueue( &quot;jumped&quot; );\n   \n   // Displays the count and values of the Queue.\n   Console::WriteLine( &quot;Initially,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myQ-&gt;Count );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myQ );\n   \n   // Clears the Queue.\n   myQ-&gt;Clear();\n   \n   // Displays the count and values of the Queue.\n   Console::WriteLine( &quot;After Clear,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myQ-&gt;Count );\n   Console::Write( &quot;   Values:&quot; );\n   PrintValues( myQ );\n}\n\nvoid PrintValues( Queue^ myQ )\n{\n   IEnumerator^ myEnum = myQ-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ myObj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;    {0}&quot;, myObj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Values:    The    quick    brown    fox    jumped\n After Clear,\n    Count    : 0\n    Values:\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.Clear Example#1\"> using System;\n using System.Collections;\n public class SamplesQueue  {\n\n    public static void Main()  {\n\n       // Creates and initializes a new Queue.\n       Queue myQ = new Queue();\n       myQ.Enqueue( &quot;The&quot; );\n       myQ.Enqueue( &quot;quick&quot; );\n       myQ.Enqueue( &quot;brown&quot; );\n       myQ.Enqueue( &quot;fox&quot; );\n       myQ.Enqueue( &quot;jumped&quot; );\n\n       // Displays the count and values of the Queue.\n       Console.WriteLine( &quot;Initially,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myQ.Count );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myQ );\n\n       // Clears the Queue.\n       myQ.Clear();\n\n       // Displays the count and values of the Queue.\n       Console.WriteLine( &quot;After Clear,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myQ.Count );\n       Console.Write( &quot;   Values:&quot; );\n       PrintValues( myQ );\n\n    }\n\n    public static void PrintValues( Queue myQ )  {\n       foreach ( Object myObj in myQ )  {\n          Console.Write( &quot;    {0}&quot;, myObj );\n       }\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Values:    The    quick    brown    fox    jumped\n After Clear,\n    Count    : 0\n    Values:\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Queue.Clear Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesQueue    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQ As New Queue()\n        myQ.Enqueue(&quot;The&quot;)\n        myQ.Enqueue(&quot;quick&quot;)\n        myQ.Enqueue(&quot;brown&quot;)\n        myQ.Enqueue(&quot;fox&quot;)\n        myQ.Enqueue(&quot;jumped&quot;)\n        \n        &#39; Displays the count and values of the Queue.\n        Console.WriteLine(&quot;Initially,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myQ.Count)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Clears the Queue.\n        myQ.Clear()\n        \n        &#39; Displays the count and values of the Queue.\n        Console.WriteLine(&quot;After Clear,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myQ.Count)\n        Console.Write(&quot;   Values:&quot;)\n        PrintValues(myQ)\n    End Sub\n    \n    Public Shared Sub PrintValues(myQ As Queue)\n        Dim myObj As [Object]\n        For Each myObj In  myQ\n            Console.Write(&quot;    {0}&quot;, myObj)\n        Next myObj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesQueue \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initially,\n&#39;    Count    : 5\n&#39;    Values:    The    quick    brown    fox    jumped\n&#39; After Clear,\n&#39;    Count    : 0\n&#39;    Values:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_Clone\">\r\n    \r\n            <a id=\"System_Collections_Queue_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A shallow copy of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  </p>\n<p> In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Queue_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an element is in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Contains (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is found in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>obj</code> to determine whether <code>item</code> exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>obj</code> parameter on the objects in the collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Queue_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> elements to an existing one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified array index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to copy a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> into a one-dimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Queue.CopyTo Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( Array^ myArr, char mySeparator );\nint main()\n{\n   // Creates and initializes the source Queue.\n   Queue^ mySourceQ = gcnew Queue;\n   mySourceQ-&gt;Enqueue( &quot;three&quot; );\n   mySourceQ-&gt;Enqueue( &quot;napping&quot; );\n   mySourceQ-&gt;Enqueue( &quot;cats&quot; );\n   mySourceQ-&gt;Enqueue( &quot;in&quot; );\n   mySourceQ-&gt;Enqueue( &quot;the&quot; );\n   mySourceQ-&gt;Enqueue( &quot;barn&quot; );\n\n   // Creates and initializes the one-dimensional target Array.\n   Array^ myTargetArray = Array::CreateInstance( String::typeid, 15 );\n   myTargetArray-&gt;SetValue( &quot;The&quot;, 0 );\n   myTargetArray-&gt;SetValue( &quot;quick&quot;, 1 );\n   myTargetArray-&gt;SetValue( &quot;brown&quot;, 2 );\n   myTargetArray-&gt;SetValue( &quot;fox&quot;, 3 );\n   myTargetArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myTargetArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myTargetArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myTargetArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myTargetArray-&gt;SetValue( &quot;dog&quot;, 8 );\n\n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n   PrintValues( myTargetArray, &#39; &#39; );\n\n   // Copies the entire source Queue to the target Array, starting at index 6.\n   mySourceQ-&gt;CopyTo( myTargetArray, 6 );\n\n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n\n   // Copies the entire source Queue to a new standard array.\n   array&lt;Object^&gt;^myStandardArray = mySourceQ-&gt;ToArray();\n\n   // Displays the values of the new standard array.\n   Console::WriteLine( &quot;The new standard array contains the following:&quot; );\n   PrintValues( myStandardArray, &#39; &#39; );\n}\n\nvoid PrintValues( Array^ myArr, char mySeparator )\n{\n   IEnumerator^ myEnum = myArr-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ myObj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, myObj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over three napping cats in the barn\n The new standard array contains the following:\n  three napping cats in the barn\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.CopyTo Example#1\"> using System;\n using System.Collections;\n public class SamplesQueue  {\n \n    public static void Main()  {\n \n       // Creates and initializes the source Queue.\n       Queue mySourceQ = new Queue();\n       mySourceQ.Enqueue( &quot;three&quot; );\n       mySourceQ.Enqueue( &quot;napping&quot; );\n       mySourceQ.Enqueue( &quot;cats&quot; );\n       mySourceQ.Enqueue( &quot;in&quot; );\n       mySourceQ.Enqueue( &quot;the&quot; );\n       mySourceQ.Enqueue( &quot;barn&quot; );\n \n       // Creates and initializes the one-dimensional target Array.\n       Array myTargetArray=Array.CreateInstance( typeof(String), 15 );\n       myTargetArray.SetValue( &quot;The&quot;, 0 );\n       myTargetArray.SetValue( &quot;quick&quot;, 1 );\n       myTargetArray.SetValue( &quot;brown&quot;, 2 );\n       myTargetArray.SetValue( &quot;fox&quot;, 3 );\n       myTargetArray.SetValue( &quot;jumped&quot;, 4 );\n       myTargetArray.SetValue( &quot;over&quot;, 5 );\n       myTargetArray.SetValue( &quot;the&quot;, 6 );\n       myTargetArray.SetValue( &quot;lazy&quot;, 7 );\n       myTargetArray.SetValue( &quot;dog&quot;, 8 );\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source Queue to the target Array, starting at index 6.\n       mySourceQ.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source Queue to a new standard array.\n       Object[] myStandardArray = mySourceQ.ToArray();\n \n       // Displays the values of the new standard array.\n       Console.WriteLine( &quot;The new standard array contains the following:&quot; );\n       PrintValues( myStandardArray, &#39; &#39; );\n    }\n \n \n    public static void PrintValues( Array myArr, char mySeparator )  {\n       foreach ( Object myObj in myArr )  {\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myObj );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over three napping cats in the barn\n The new standard array contains the following:\n  three napping cats in the barn\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Queue.CopyTo Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesQueue    \n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes the source Queue.\n        Dim mySourceQ As New Queue()\n        mySourceQ.Enqueue(&quot;three&quot;)\n        mySourceQ.Enqueue(&quot;napping&quot;)\n        mySourceQ.Enqueue(&quot;cats&quot;)\n        mySourceQ.Enqueue(&quot;in&quot;)\n        mySourceQ.Enqueue(&quot;the&quot;)\n        mySourceQ.Enqueue(&quot;barn&quot;)\n\n        &#39; Creates and initializes the one-dimensional target Array.\n        Dim myTargetArray As Array = Array.CreateInstance(GetType(String), 15)\n        myTargetArray.SetValue(&quot;The&quot;, 0)\n        myTargetArray.SetValue(&quot;quick&quot;, 1)\n        myTargetArray.SetValue(&quot;brown&quot;, 2)\n        myTargetArray.SetValue(&quot;fox&quot;, 3)\n        myTargetArray.SetValue(&quot;jumped&quot;, 4)\n        myTargetArray.SetValue(&quot;over&quot;, 5)\n        myTargetArray.SetValue(&quot;the&quot;, 6)\n        myTargetArray.SetValue(&quot;lazy&quot;, 7)\n        myTargetArray.SetValue(&quot;dog&quot;, 8)\n\n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target Array contains the &quot; &amp; _\n           &quot;following (before and after copying):&quot;)\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the entire source Queue to the target Array, starting\n        &#39; at index 6.\n        mySourceQ.CopyTo(myTargetArray, 6)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the entire source Queue to a new standard array.\n        Dim myStandardArray As Object() = mySourceQ.ToArray()\n\n        &#39; Displays the values of the new standard array.\n        Console.WriteLine(&quot;The new standard array contains the following:&quot;)\n        PrintValues(myStandardArray, &quot; &quot;c)\n\n    End Sub\n\n    Public Shared Sub PrintValues(myArr As Array, mySeparator As Char)\n        Dim myObj As [Object]\n        For Each myObj In  myArr\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, myObj)\n        Next myObj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesQueue\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The target Array contains the following (before and after copying):\n&#39;  The quick brown fox jumped over the lazy dog\n&#39;  The quick brown fox jumped over three napping cats in the barn\n&#39; The new standard array contains the following:\n&#39;  three napping cats in the barn\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_Dequeue\">\r\n    \r\n            <a id=\"System_Collections_Queue_Dequeue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dequeue()</div>        \r\n          </div>\r\n    \r\n            <p>Removes and returns the object at the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Dequeue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object that is removed from the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is similar to the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Peek_\" data-linktype=\"relative-path\">Peek</a> method, but <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Peek_\" data-linktype=\"relative-path\">Peek</a> does not modify the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<p> <code>null</code> can be added to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> as a value. To distinguish between a null value and the end of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, check the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a> property or catch the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>, which is thrown when the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is empty.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to add elements to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, remove elements from the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, or view the element at the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic Queue.Enqueue Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\n\nPublic Class SamplesQueue\n    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQ As New Queue()\n        myQ.Enqueue(&quot;The&quot;)\n        myQ.Enqueue(&quot;quick&quot;)\n        myQ.Enqueue(&quot;brown&quot;)\n        myQ.Enqueue(&quot;fox&quot;)\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Removes an element from the Queue.\n        Console.WriteLine(&quot;(Dequeue)    {0}&quot;, myQ.Dequeue())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Removes another element from the Queue.\n        Console.WriteLine(&quot;(Dequeue)    {0}&quot;, myQ.Dequeue())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Views the first element in the Queue but does not remove it.\n        Console.WriteLine(&quot;(Peek)       {0}&quot;, myQ.Peek())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myCollection As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myCollection\n            Console.Write(&quot;    {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesQueue\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Queue values:    The    quick    brown    fox\n&#39; (Dequeue)    The\n&#39; Queue values:    quick    brown    fox\n&#39; (Dequeue)    quick\n&#39; Queue values:    brown    fox\n&#39; (Peek)       brown\n&#39; Queue values:    brown    fox\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.Enqueue Example#1\"> using System;\n using System.Collections;\n public class SamplesQueue  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Queue.\n       Queue myQ = new Queue();\n       myQ.Enqueue( &quot;The&quot; );\n       myQ.Enqueue( &quot;quick&quot; );\n       myQ.Enqueue( &quot;brown&quot; );\n       myQ.Enqueue( &quot;fox&quot; );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Removes an element from the Queue.\n       Console.WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Dequeue() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Removes another element from the Queue.\n       Console.WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Dequeue() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Views the first element in the Queue but does not remove it.\n       Console.WriteLine( &quot;(Peek)   &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Peek() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n    }\n \n    public static void PrintValues( IEnumerable myCollection )  {\n       foreach ( Object obj in myCollection )\n          Console.Write( &quot;    {0}&quot;, obj );\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n Queue values:    The    quick    brown    fox\n (Dequeue)       The\n Queue values:    quick    brown    fox\n (Dequeue)       quick\n Queue values:    brown    fox\n (Peek)          brown\n Queue values:    brown    fox\n\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Queue.Enqueue Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myCollection );\nint main()\n{\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQ = gcnew Queue;\n   myQ-&gt;Enqueue( &quot;The&quot; );\n   myQ-&gt;Enqueue( &quot;quick&quot; );\n   myQ-&gt;Enqueue( &quot;brown&quot; );\n   myQ-&gt;Enqueue( &quot;fox&quot; );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Removes an element from the Queue.\n   Console::WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Dequeue() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Removes another element from the Queue.\n   Console::WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Dequeue() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Views the first element in the Queue but does not remove it.\n   Console::WriteLine( &quot;(Peek)   &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Peek() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n}\n\nvoid PrintValues( IEnumerable^ myCollection )\n{\n   IEnumerator^ myEnum = myCollection-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;    {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Queue values:    The    quick    brown    fox\n (Dequeue)       The\n Queue values:    quick    brown    fox\n (Dequeue)       quick\n Queue values:    brown    fox\n (Peek)          brown\n Queue values:    brown    fox\n\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_Enqueue_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Queue_Enqueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enqueue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an object to the end of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Enqueue (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to add to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is the number of elements the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> can hold.  As elements are added to a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a>.  </p>\n<p> The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is constructed. The capacity of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> from increasing in size.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a> is less than the capacity of the internal array, this method is an O(1) operation. If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to add elements to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, remove elements from the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, or view the element at the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic Queue.Enqueue Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\n\nPublic Class SamplesQueue\n    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQ As New Queue()\n        myQ.Enqueue(&quot;The&quot;)\n        myQ.Enqueue(&quot;quick&quot;)\n        myQ.Enqueue(&quot;brown&quot;)\n        myQ.Enqueue(&quot;fox&quot;)\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Removes an element from the Queue.\n        Console.WriteLine(&quot;(Dequeue)    {0}&quot;, myQ.Dequeue())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Removes another element from the Queue.\n        Console.WriteLine(&quot;(Dequeue)    {0}&quot;, myQ.Dequeue())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Views the first element in the Queue but does not remove it.\n        Console.WriteLine(&quot;(Peek)       {0}&quot;, myQ.Peek())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myCollection As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myCollection\n            Console.Write(&quot;    {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesQueue\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Queue values:    The    quick    brown    fox\n&#39; (Dequeue)    The\n&#39; Queue values:    quick    brown    fox\n&#39; (Dequeue)    quick\n&#39; Queue values:    brown    fox\n&#39; (Peek)       brown\n&#39; Queue values:    brown    fox\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.Enqueue Example#1\"> using System;\n using System.Collections;\n public class SamplesQueue  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Queue.\n       Queue myQ = new Queue();\n       myQ.Enqueue( &quot;The&quot; );\n       myQ.Enqueue( &quot;quick&quot; );\n       myQ.Enqueue( &quot;brown&quot; );\n       myQ.Enqueue( &quot;fox&quot; );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Removes an element from the Queue.\n       Console.WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Dequeue() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Removes another element from the Queue.\n       Console.WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Dequeue() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Views the first element in the Queue but does not remove it.\n       Console.WriteLine( &quot;(Peek)   &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Peek() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n    }\n \n    public static void PrintValues( IEnumerable myCollection )  {\n       foreach ( Object obj in myCollection )\n          Console.Write( &quot;    {0}&quot;, obj );\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n Queue values:    The    quick    brown    fox\n (Dequeue)       The\n Queue values:    quick    brown    fox\n (Dequeue)       quick\n Queue values:    brown    fox\n (Peek)          brown\n Queue values:    brown    fox\n\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Queue.Enqueue Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myCollection );\nint main()\n{\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQ = gcnew Queue;\n   myQ-&gt;Enqueue( &quot;The&quot; );\n   myQ-&gt;Enqueue( &quot;quick&quot; );\n   myQ-&gt;Enqueue( &quot;brown&quot; );\n   myQ-&gt;Enqueue( &quot;fox&quot; );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Removes an element from the Queue.\n   Console::WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Dequeue() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Removes another element from the Queue.\n   Console::WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Dequeue() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Views the first element in the Queue but does not remove it.\n   Console::WriteLine( &quot;(Peek)   &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Peek() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n}\n\nvoid PrintValues( IEnumerable^ myCollection )\n{\n   IEnumerator^ myEnum = myCollection-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;    {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Queue values:    The    quick    brown    fox\n (Dequeue)       The\n Queue values:    quick    brown    fox\n (Dequeue)       quick\n Queue values:    brown    fox\n (Peek)          brown\n Queue values:    brown    fox\n\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Queue_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_Peek\">\r\n    \r\n            <a id=\"System_Collections_Queue_Peek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Peek()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the object at the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> without removing it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Peek ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object at the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is similar to the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method, but Peek does not modify the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<p> <code>null</code> can be added to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> as a value. To distinguish between a null value and the end of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, check the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a> property or catch the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>, which is thrown when the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is empty.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to add elements to the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, remove elements from the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, or view the element at the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic Queue.Enqueue Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\n\nPublic Class SamplesQueue\n    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQ As New Queue()\n        myQ.Enqueue(&quot;The&quot;)\n        myQ.Enqueue(&quot;quick&quot;)\n        myQ.Enqueue(&quot;brown&quot;)\n        myQ.Enqueue(&quot;fox&quot;)\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Removes an element from the Queue.\n        Console.WriteLine(&quot;(Dequeue)    {0}&quot;, myQ.Dequeue())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Removes another element from the Queue.\n        Console.WriteLine(&quot;(Dequeue)    {0}&quot;, myQ.Dequeue())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n        \n        &#39; Views the first element in the Queue but does not remove it.\n        Console.WriteLine(&quot;(Peek)       {0}&quot;, myQ.Peek())\n        \n        &#39; Displays the Queue.\n        Console.Write(&quot;Queue values:&quot;)\n        PrintValues(myQ)\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myCollection As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myCollection\n            Console.Write(&quot;    {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesQueue\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Queue values:    The    quick    brown    fox\n&#39; (Dequeue)    The\n&#39; Queue values:    quick    brown    fox\n&#39; (Dequeue)    quick\n&#39; Queue values:    brown    fox\n&#39; (Peek)       brown\n&#39; Queue values:    brown    fox\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.Enqueue Example#1\"> using System;\n using System.Collections;\n public class SamplesQueue  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Queue.\n       Queue myQ = new Queue();\n       myQ.Enqueue( &quot;The&quot; );\n       myQ.Enqueue( &quot;quick&quot; );\n       myQ.Enqueue( &quot;brown&quot; );\n       myQ.Enqueue( &quot;fox&quot; );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Removes an element from the Queue.\n       Console.WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Dequeue() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Removes another element from the Queue.\n       Console.WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Dequeue() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n \n       // Views the first element in the Queue but does not remove it.\n       Console.WriteLine( &quot;(Peek)   &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ.Peek() );\n \n       // Displays the Queue.\n       Console.Write( &quot;Queue values:&quot; );\n       PrintValues( myQ );\n    }\n \n    public static void PrintValues( IEnumerable myCollection )  {\n       foreach ( Object obj in myCollection )\n          Console.Write( &quot;    {0}&quot;, obj );\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n Queue values:    The    quick    brown    fox\n (Dequeue)       The\n Queue values:    quick    brown    fox\n (Dequeue)       quick\n Queue values:    brown    fox\n (Peek)          brown\n Queue values:    brown    fox\n\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Queue.Enqueue Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myCollection );\nint main()\n{\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQ = gcnew Queue;\n   myQ-&gt;Enqueue( &quot;The&quot; );\n   myQ-&gt;Enqueue( &quot;quick&quot; );\n   myQ-&gt;Enqueue( &quot;brown&quot; );\n   myQ-&gt;Enqueue( &quot;fox&quot; );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Removes an element from the Queue.\n   Console::WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Dequeue() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Removes another element from the Queue.\n   Console::WriteLine( &quot;(Dequeue)&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Dequeue() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n   \n   // Views the first element in the Queue but does not remove it.\n   Console::WriteLine( &quot;(Peek)   &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myQ-&gt;Peek() );\n   \n   // Displays the Queue.\n   Console::Write( &quot;Queue values:&quot; );\n   PrintValues( myQ );\n}\n\nvoid PrintValues( IEnumerable^ myCollection )\n{\n   IEnumerator^ myEnum = myCollection-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;    {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Queue values:    The    quick    brown    fox\n (Dequeue)       The\n Queue values:    quick    brown    fox\n (Dequeue)       quick\n Queue values:    brown    fox\n (Peek)          brown\n Queue values:    brown    fox\n\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_Synchronized_System_Collections_Queue_\">\r\n    \r\n            <a id=\"System_Collections_Queue_Synchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Synchronized(Queue)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> that wraps the original queue, and is thread safe.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Queue Synchronized (System.Collections.Queue queue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>queue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> to synchronize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> wrapper that is synchronized (thread safe).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>queue</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.  </p>\n<p> To guarantee the thread safety of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, all operations must be done through this wrapper only.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration. This method is an O(1) operation.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Queue.IsSynchronized Example#2\">        Queue^ myCollection = gcnew Queue();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.IsSynchronized Example#2\">        Queue myCollection = new Queue();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Queue.IsSynchronized Example#2\">        Dim myCollection As New Queue()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> The following example shows how to synchronize a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>, determine if a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is synchronized and use a synchronized <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Queue.IsSynchronized Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new Queue.\n   Queue^ myQ = gcnew Queue;\n   myQ-&gt;Enqueue( &quot;The&quot; );\n   myQ-&gt;Enqueue( &quot;quick&quot; );\n   myQ-&gt;Enqueue( &quot;brown&quot; );\n   myQ-&gt;Enqueue( &quot;fox&quot; );\n   \n   // Creates a synchronized wrapper around the Queue.\n   Queue^ mySyncdQ = Queue::Synchronized( myQ );\n   \n   // Displays the sychronization status of both Queues.\n   Console::WriteLine( &quot;myQ is {0}.&quot;, myQ-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n   Console::WriteLine( &quot;mySyncdQ is {0}.&quot;, mySyncdQ-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n}\n\n/*\nThis code produces the following output.\n\nmyQ is not synchronized.\nmySyncdQ is synchronized.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.IsSynchronized Example#1\"> using System;\n using System.Collections;\n public class SamplesQueue  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Queue.\n       Queue myQ = new Queue();\n       myQ.Enqueue( &quot;The&quot; );\n       myQ.Enqueue( &quot;quick&quot; );\n       myQ.Enqueue( &quot;brown&quot; );\n       myQ.Enqueue( &quot;fox&quot; );\n \n       // Creates a synchronized wrapper around the Queue.\n       Queue mySyncdQ = Queue.Synchronized( myQ );\n \n       // Displays the sychronization status of both Queues.\n       Console.WriteLine( &quot;myQ is {0}.&quot;, myQ.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n       Console.WriteLine( &quot;mySyncdQ is {0}.&quot;, mySyncdQ.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n    }\n }\n /* \n This code produces the following output.\n \n myQ is not synchronized.\n mySyncdQ is synchronized.\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Queue.IsSynchronized Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesQueue    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Queue.\n        Dim myQ As New Queue()\n        myQ.Enqueue(&quot;The&quot;)\n        myQ.Enqueue(&quot;quick&quot;)\n        myQ.Enqueue(&quot;brown&quot;)\n        myQ.Enqueue(&quot;fox&quot;)\n        \n        &#39; Creates a synchronized wrapper around the Queue.\n        Dim mySyncdQ As Queue = Queue.Synchronized(myQ)\n        \n        &#39; Displays the sychronization status of both Queues.\n        Dim msg As String\n        If myQ.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;myQ is {0}.&quot;, msg)\n        If mySyncdQ.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;mySyncdQ is {0}.&quot;, msg)\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myQ is not synchronized.\n&#39; mySyncdQ is synchronized. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_ToArray\">\r\n    \r\n            <a id=\"System_Collections_Queue_ToArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToArray()</div>        \r\n          </div>\r\n    \r\n            <p>Copies the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> elements to a new array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object[] ToArray ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>A new array containing elements copied from the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is not modified. The order of the elements in the new array is the same as the order of the elements from the beginning of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> to its end.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to copy a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> into a one-dimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Queue.CopyTo Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( Array^ myArr, char mySeparator );\nint main()\n{\n   // Creates and initializes the source Queue.\n   Queue^ mySourceQ = gcnew Queue;\n   mySourceQ-&gt;Enqueue( &quot;three&quot; );\n   mySourceQ-&gt;Enqueue( &quot;napping&quot; );\n   mySourceQ-&gt;Enqueue( &quot;cats&quot; );\n   mySourceQ-&gt;Enqueue( &quot;in&quot; );\n   mySourceQ-&gt;Enqueue( &quot;the&quot; );\n   mySourceQ-&gt;Enqueue( &quot;barn&quot; );\n\n   // Creates and initializes the one-dimensional target Array.\n   Array^ myTargetArray = Array::CreateInstance( String::typeid, 15 );\n   myTargetArray-&gt;SetValue( &quot;The&quot;, 0 );\n   myTargetArray-&gt;SetValue( &quot;quick&quot;, 1 );\n   myTargetArray-&gt;SetValue( &quot;brown&quot;, 2 );\n   myTargetArray-&gt;SetValue( &quot;fox&quot;, 3 );\n   myTargetArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myTargetArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myTargetArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myTargetArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myTargetArray-&gt;SetValue( &quot;dog&quot;, 8 );\n\n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n   PrintValues( myTargetArray, &#39; &#39; );\n\n   // Copies the entire source Queue to the target Array, starting at index 6.\n   mySourceQ-&gt;CopyTo( myTargetArray, 6 );\n\n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n\n   // Copies the entire source Queue to a new standard array.\n   array&lt;Object^&gt;^myStandardArray = mySourceQ-&gt;ToArray();\n\n   // Displays the values of the new standard array.\n   Console::WriteLine( &quot;The new standard array contains the following:&quot; );\n   PrintValues( myStandardArray, &#39; &#39; );\n}\n\nvoid PrintValues( Array^ myArr, char mySeparator )\n{\n   IEnumerator^ myEnum = myArr-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ myObj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, myObj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over three napping cats in the barn\n The new standard array contains the following:\n  three napping cats in the barn\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Queue.CopyTo Example#1\"> using System;\n using System.Collections;\n public class SamplesQueue  {\n \n    public static void Main()  {\n \n       // Creates and initializes the source Queue.\n       Queue mySourceQ = new Queue();\n       mySourceQ.Enqueue( &quot;three&quot; );\n       mySourceQ.Enqueue( &quot;napping&quot; );\n       mySourceQ.Enqueue( &quot;cats&quot; );\n       mySourceQ.Enqueue( &quot;in&quot; );\n       mySourceQ.Enqueue( &quot;the&quot; );\n       mySourceQ.Enqueue( &quot;barn&quot; );\n \n       // Creates and initializes the one-dimensional target Array.\n       Array myTargetArray=Array.CreateInstance( typeof(String), 15 );\n       myTargetArray.SetValue( &quot;The&quot;, 0 );\n       myTargetArray.SetValue( &quot;quick&quot;, 1 );\n       myTargetArray.SetValue( &quot;brown&quot;, 2 );\n       myTargetArray.SetValue( &quot;fox&quot;, 3 );\n       myTargetArray.SetValue( &quot;jumped&quot;, 4 );\n       myTargetArray.SetValue( &quot;over&quot;, 5 );\n       myTargetArray.SetValue( &quot;the&quot;, 6 );\n       myTargetArray.SetValue( &quot;lazy&quot;, 7 );\n       myTargetArray.SetValue( &quot;dog&quot;, 8 );\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source Queue to the target Array, starting at index 6.\n       mySourceQ.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source Queue to a new standard array.\n       Object[] myStandardArray = mySourceQ.ToArray();\n \n       // Displays the values of the new standard array.\n       Console.WriteLine( &quot;The new standard array contains the following:&quot; );\n       PrintValues( myStandardArray, &#39; &#39; );\n    }\n \n \n    public static void PrintValues( Array myArr, char mySeparator )  {\n       foreach ( Object myObj in myArr )  {\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myObj );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The target Array contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog\n  The quick brown fox jumped over three napping cats in the barn\n The new standard array contains the following:\n  three napping cats in the barn\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Queue.CopyTo Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesQueue    \n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes the source Queue.\n        Dim mySourceQ As New Queue()\n        mySourceQ.Enqueue(&quot;three&quot;)\n        mySourceQ.Enqueue(&quot;napping&quot;)\n        mySourceQ.Enqueue(&quot;cats&quot;)\n        mySourceQ.Enqueue(&quot;in&quot;)\n        mySourceQ.Enqueue(&quot;the&quot;)\n        mySourceQ.Enqueue(&quot;barn&quot;)\n\n        &#39; Creates and initializes the one-dimensional target Array.\n        Dim myTargetArray As Array = Array.CreateInstance(GetType(String), 15)\n        myTargetArray.SetValue(&quot;The&quot;, 0)\n        myTargetArray.SetValue(&quot;quick&quot;, 1)\n        myTargetArray.SetValue(&quot;brown&quot;, 2)\n        myTargetArray.SetValue(&quot;fox&quot;, 3)\n        myTargetArray.SetValue(&quot;jumped&quot;, 4)\n        myTargetArray.SetValue(&quot;over&quot;, 5)\n        myTargetArray.SetValue(&quot;the&quot;, 6)\n        myTargetArray.SetValue(&quot;lazy&quot;, 7)\n        myTargetArray.SetValue(&quot;dog&quot;, 8)\n\n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target Array contains the &quot; &amp; _\n           &quot;following (before and after copying):&quot;)\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the entire source Queue to the target Array, starting\n        &#39; at index 6.\n        mySourceQ.CopyTo(myTargetArray, 6)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the entire source Queue to a new standard array.\n        Dim myStandardArray As Object() = mySourceQ.ToArray()\n\n        &#39; Displays the values of the new standard array.\n        Console.WriteLine(&quot;The new standard array contains the following:&quot;)\n        PrintValues(myStandardArray, &quot; &quot;c)\n\n    End Sub\n\n    Public Shared Sub PrintValues(myArr As Array, mySeparator As Char)\n        Dim myObj As [Object]\n        For Each myObj In  myArr\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, myObj)\n        Next myObj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesQueue\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The target Array contains the following (before and after copying):\n&#39;  The quick brown fox jumped over the lazy dog\n&#39;  The quick brown fox jumped over three napping cats in the barn\n&#39; The new standard array contains the following:\n&#39;  three napping cats in the barn\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Queue_TrimToSize\">\r\n    \r\n            <a id=\"System_Collections_Queue_TrimToSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimToSize()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the capacity to the actual number of elements in the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void TrimToSize ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to minimize a queue&#39;s memory overhead if no new elements will be added to the queue.  </p>\n<p> To reset a <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> to its initial state, call the <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Clear_\" data-linktype=\"relative-path\">Clear</a> method before calling TrimToSize. Trimming an empty <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.queue\" data-linktype=\"relative-path\">Queue</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.queue#System_Collections_Queue_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Queue.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Queue.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.Clone\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.Dequeue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.Enqueue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.Peek\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.Synchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.ToArray\">\r\n<meta name=\"APIName\" content=\"System.Collections.Queue.TrimToSize\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3ddbd781-4a39-0fd3-9015-2f6436588e56\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a first-in, first-out collection of objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Queue\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Queue.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Queue.yml","open_to_public_contributors":true,"api_name":["System.Collections.Queue","System.Collections.Queue..ctor","System.Collections.Queue.Clear","System.Collections.Queue.Clone","System.Collections.Queue.Contains","System.Collections.Queue.CopyTo","System.Collections.Queue.Count","System.Collections.Queue.Dequeue","System.Collections.Queue.Enqueue","System.Collections.Queue.GetEnumerator","System.Collections.Queue.IsSynchronized","System.Collections.Queue.Peek","System.Collections.Queue.Synchronized","System.Collections.Queue.SyncRoot","System.Collections.Queue.ToArray","System.Collections.Queue.TrimToSize"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Queue","System::Collections::Queue","System.Collections.Queue.#ctor","System::Collections::Queue::#ctor","System.Collections.Queue.Clear","System::Collections::Queue::Clear","System.Collections.Queue.Clone","System::Collections::Queue::Clone","System.Collections.Queue.Contains","System::Collections::Queue::Contains","System.Collections.Queue.CopyTo","System::Collections::Queue::CopyTo","System.Collections.Queue.Count","System::Collections::Queue::Count","System.Collections.Queue.Dequeue","System::Collections::Queue::Dequeue","System.Collections.Queue.Enqueue","System::Collections::Queue::Enqueue","System.Collections.Queue.GetEnumerator","System::Collections::Queue::GetEnumerator","System.Collections.Queue.IsSynchronized","System::Collections::Queue::IsSynchronized","System.Collections.Queue.Peek","System::Collections::Queue::Peek","System.Collections.Queue.Synchronized","System::Collections::Queue::Synchronized","System.Collections.Queue.SyncRoot","System::Collections::Queue::SyncRoot","System.Collections.Queue.ToArray","System::Collections::Queue::ToArray","System.Collections.Queue.TrimToSize","System::Collections::Queue::TrimToSize"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3ddbd781-4a39-0fd3-9015-2f6436588e56","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/Queue.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Queue class | Microsoft Docs","_op_ogTitle":"Queue class","description":"Represents a first-in, first-out collection of objects.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.Queue","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.queue","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.queue","fileRelativePath":"System.Collections.Queue.html"},"themesRelativePathToOutputRoot":"_themes/"}