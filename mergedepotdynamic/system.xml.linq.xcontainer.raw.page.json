{"content":"    \r\n    <h1 id=\"System_Xml_Linq_XContainer\">\r\n      <span class=\"lang-csharp\">XContainer</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a node that can contain other nodes.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class XContainer : System.Xml.Linq.XNode</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">System.Xml.Linq.XNode</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XContainer</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddAfterSelf_System_Object_\" data-linktype=\"relative-path\">AddAfterSelf(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddAfterSelf_System_Object___\" data-linktype=\"relative-path\">AddAfterSelf(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddBeforeSelf_System_Object_\" data-linktype=\"relative-path\">AddBeforeSelf(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddBeforeSelf_System_Object___\" data-linktype=\"relative-path\">AddBeforeSelf(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Ancestors\" data-linktype=\"relative-path\">Ancestors()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Ancestors_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Ancestors(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CompareDocumentOrder_System_Xml_Linq_XNode_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">CompareDocumentOrder(XNode,XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CreateReader\" data-linktype=\"relative-path\">CreateReader()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CreateReader_System_Xml_Linq_ReaderOptions_\" data-linktype=\"relative-path\">CreateReader(ReaderOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_DeepEquals_System_Xml_Linq_XNode_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">DeepEquals(XNode,XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_DocumentOrderComparer\" data-linktype=\"relative-path\">DocumentOrderComparer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsAfterSelf\" data-linktype=\"relative-path\">ElementsAfterSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsAfterSelf_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">ElementsAfterSelf(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsBeforeSelf\" data-linktype=\"relative-path\">ElementsBeforeSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsBeforeSelf_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">ElementsBeforeSelf(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_EqualityComparer\" data-linktype=\"relative-path\">EqualityComparer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_IsAfter_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">IsAfter(XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_IsBefore_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">IsBefore(XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NextNode\" data-linktype=\"relative-path\">NextNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NodesAfterSelf\" data-linktype=\"relative-path\">NodesAfterSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NodesBeforeSelf\" data-linktype=\"relative-path\">NodesBeforeSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_PreviousNode\" data-linktype=\"relative-path\">PreviousNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReadFrom_System_Xml_XmlReader_\" data-linktype=\"relative-path\">ReadFrom(XmlReader)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Remove\" data-linktype=\"relative-path\">Remove()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReplaceWith_System_Object_\" data-linktype=\"relative-path\">ReplaceWith(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReplaceWith_System_Object___\" data-linktype=\"relative-path\">ReplaceWith(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ToString_System_Xml_Linq_SaveOptions_\" data-linktype=\"relative-path\">ToString(SaveOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_WriteTo_System_Xml_XmlWriter_\" data-linktype=\"relative-path\">WriteTo(XmlWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_AddAnnotation_System_Object_\" data-linktype=\"relative-path\">AddAnnotation(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotation_System_Type_\" data-linktype=\"relative-path\">Annotation(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotation__1\" data-linktype=\"relative-path\">Annotation&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotations_System_Type_\" data-linktype=\"relative-path\">Annotations(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotations__1\" data-linktype=\"relative-path\">Annotations&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_BaseUri\" data-linktype=\"relative-path\">BaseUri</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Document\" data-linktype=\"relative-path\">Document</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_NodeType\" data-linktype=\"relative-path\">NodeType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Parent\" data-linktype=\"relative-path\">Parent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_RemoveAnnotations_System_Type_\" data-linktype=\"relative-path\">RemoveAnnotations(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_RemoveAnnotations__1\" data-linktype=\"relative-path\">RemoveAnnotations&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_HasLineInfo\" data-linktype=\"relative-path\">IXmlLineInfo.HasLineInfo()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_LineNumber\" data-linktype=\"relative-path\">IXmlLineInfo.LineNumber</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_LinePosition\" data-linktype=\"relative-path\">IXmlLineInfo.LinePosition</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class provides functionality such as finding the next or previous sibling node, or enumerating the direct children of a node.  </p>\n<p> The two classes that derive from XContainer are <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> and <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_FirstNode\" data-linktype=\"self-bookmark\">FirstNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Get the first child node of this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_LastNode\" data-linktype=\"self-bookmark\">LastNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Get the last child node of this node.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_Add_System_Object_\" data-linktype=\"self-bookmark\">Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified content as children of this <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_Add_System_Object___\" data-linktype=\"self-bookmark\">Add(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified content as children of this <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_AddFirst_System_Object_\" data-linktype=\"self-bookmark\">AddFirst(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified content as the first children of this document or element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_AddFirst_System_Object___\" data-linktype=\"self-bookmark\">AddFirst(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified content as the first children of this document or element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_CreateWriter\" data-linktype=\"self-bookmark\">CreateWriter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that can be used to add nodes to the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_DescendantNodes\" data-linktype=\"self-bookmark\">DescendantNodes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of the descendant nodes for this document or element, in document order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_Descendants\" data-linktype=\"self-bookmark\">Descendants()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of the descendant elements for this document or element, in document order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_Descendants_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Descendants(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_Element_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Element(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the first (in document order) child element with the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_Elements\" data-linktype=\"self-bookmark\">Elements()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of the child elements of this element or document, in document order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_Elements_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Elements(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_Nodes\" data-linktype=\"self-bookmark\">Nodes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of the child nodes of this element or document, in document order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_RemoveNodes\" data-linktype=\"self-bookmark\">RemoveNodes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the child nodes from this document or element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_ReplaceNodes_System_Object_\" data-linktype=\"self-bookmark\">ReplaceNodes(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the children nodes of this document or element with the specified content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XContainer_ReplaceNodes_System_Object___\" data-linktype=\"self-bookmark\">ReplaceNodes(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the children nodes of this document or element with the specified content.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_FirstNode\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_FirstNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstNode</div>        \r\n          </div>\r\n    \r\n            <p>Get the first child node of this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XNode FirstNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">System.Xml.Linq.XNode</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> containing the first child node of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element that contains child elements. It then gets the first child node of the parent element.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nXNode firstNode = xmlTree.FirstNode;  \nConsole.WriteLine(firstNode);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n        &lt;/Root&gt;  \n\nDim firstNode As XNode = xmlTree.FirstNode  \nConsole.WriteLine(firstNode)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Child1&gt;1&lt;/Child1&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_LastNode\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_LastNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastNode</div>        \r\n          </div>\r\n    \r\n            <p>Get the last child node of this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XNode LastNode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">System.Xml.Linq.XNode</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> containing the last child node of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element that contains child elements. It then gets the last child node of the parent element.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nXNode lastNode = xmlTree.LastNode;  \nConsole.WriteLine(lastNode);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n        &lt;/Root&gt;  \n\nDim lastNode As XNode = xmlTree.LastNode  \nConsole.WriteLine(lastNode)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Child5&gt;5&lt;/Child5&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified content as children of this <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (object content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A content object containing simple content or a collection of content objects to be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method adds the new content after the existing content of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two XML trees, and then uses this method to add an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object to one of them. It also adds the results of a LINQ query to the XML tree.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Element1&quot;, 1),  \n    new XElement(&quot;Element2&quot;, 2),  \n    new XElement(&quot;Element3&quot;, 3),  \n    new XElement(&quot;Element4&quot;, 4),  \n    new XElement(&quot;Element5&quot;, 5)  \n);  \nXElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nxmlTree.Add(new XElement(&quot;NewChild&quot;, &quot;new content&quot;));  \nxmlTree.Add(  \n    from el in srcTree.Elements()  \n    where (int)el &gt; 3  \n    select el  \n);  \n// Even though Child9 does not exist in srcTree, the following statement will not  \n// throw an exception, and nothing will be added to xmlTree.  \nxmlTree.Add(srcTree.Element(&quot;Child9&quot;));  \nConsole.WriteLine(xmlTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Element1&gt;1&lt;/Element1&gt;  \n            &lt;Element2&gt;2&lt;/Element2&gt;  \n            &lt;Element3&gt;3&lt;/Element3&gt;  \n            &lt;Element4&gt;4&lt;/Element4&gt;  \n            &lt;Element5&gt;5&lt;/Element5&gt;  \n        &lt;/Root&gt;  \n\nDim xmlTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n        &lt;/Root&gt;  \n\nxmlTree.Add(New XElement(&quot;NewChild&quot;, &quot;new content&quot;))  \nxmlTree.Add( _  \n    From el In srcTree.Elements() _  \n    Where CInt(el) &gt; 3 _  \n    Select el _  \n)  \n&#39; Even though Child9 does not exist in srcTree, the following statement will not  \n&#39; throw an exception, and nothing will be added to xmlTree.  \nxmlTree.Add(srcTree.&lt;Child9&gt;)  \nConsole.WriteLine(xmlTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child1&gt;1&lt;/Child1&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n  &lt;Child5&gt;5&lt;/Child5&gt;  \n  &lt;NewChild&gt;new content&lt;/NewChild&gt;  \n  &lt;Element4&gt;4&lt;/Element4&gt;  \n  &lt;Element5&gt;5&lt;/Element5&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_Add_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified content as children of this <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A parameter list of content objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method adds the new content after the existing content of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two XML trees, uses this method to add an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object to one of them. It also adds the results of a LINQ query to the XML tree.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Element1&quot;, 1),  \n    new XElement(&quot;Element2&quot;, 2),  \n    new XElement(&quot;Element3&quot;, 3),  \n    new XElement(&quot;Element4&quot;, 4),  \n    new XElement(&quot;Element5&quot;, 5)  \n);  \nXElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nxmlTree.Add(new XElement(&quot;NewChild&quot;, &quot;new content&quot;));  \nxmlTree.Add(  \n    from el in srcTree.Elements()  \n    where (int)el &gt; 3  \n    select el  \n);  \n// Even though Child9 does not exist in srcTree, the following statement will not  \n// throw an exception, and nothing will be added to xmlTree  \nxmlTree.Add(srcTree.Element(&quot;Child9&quot;));  \nConsole.WriteLine(xmlTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Element1&gt;1&lt;/Element1&gt;  \n            &lt;Element2&gt;2&lt;/Element2&gt;  \n            &lt;Element3&gt;3&lt;/Element3&gt;  \n            &lt;Element4&gt;4&lt;/Element4&gt;  \n            &lt;Element5&gt;5&lt;/Element5&gt;  \n        &lt;/Root&gt;  \n\nDim xmlTree As XElement = _  \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n        &lt;/Root&gt;  \n\nxmlTree.Add(New XElement(&quot;NewChild&quot;, &quot;new content&quot;))  \nxmlTree.Add( _  \n    From el In srcTree.Elements() _  \n    Where CInt(el) &gt; 3 _  \n    Select el _  \n)  \n&#39; Even though Child9 does not exist in srcTree, the following statement will not  \n&#39; throw an exception, and nothing will be added to xmlTree  \nxmlTree.Add(srcTree.&lt;Child9&gt;)  \nConsole.WriteLine(xmlTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child1&gt;1&lt;/Child1&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n  &lt;Child5&gt;5&lt;/Child5&gt;  \n  &lt;NewChild&gt;new content&lt;/NewChild&gt;  \n  &lt;Element4&gt;4&lt;/Element4&gt;  \n  &lt;Element5&gt;5&lt;/Element5&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_AddFirst_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_AddFirst_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddFirst(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified content as the first children of this document or element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddFirst (object content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A content object containing simple content or a collection of content objects to be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method adds the new content before the existing content of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two XML trees, uses this method to add an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object as the first element to one of them. It also adds the results of a LINQ query to the XML tree.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Element1&quot;, 1),  \n    new XElement(&quot;Element2&quot;, 2),  \n    new XElement(&quot;Element3&quot;, 3),  \n    new XElement(&quot;Element4&quot;, 4),  \n    new XElement(&quot;Element5&quot;, 5)  \n);  \nXElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nxmlTree.AddFirst(new XElement(&quot;NewChild&quot;, &quot;new content&quot;));  \nxmlTree.AddFirst(  \n    from el in srcTree.Elements()  \n    where (int)el &gt; 3  \n    select el  \n);  \n// Even though Child9 does not exist in srcTree, the following statement will not  \n// throw an exception, and nothing will be added to xmlTree  \nxmlTree.AddFirst(srcTree.Element(&quot;Child9&quot;));  \nConsole.WriteLine(xmlTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Element1&gt;1&lt;/Element1&gt;  \n            &lt;Element2&gt;2&lt;/Element2&gt;  \n            &lt;Element3&gt;3&lt;/Element3&gt;  \n            &lt;Element4&gt;4&lt;/Element4&gt;  \n            &lt;Element5&gt;5&lt;/Element5&gt;  \n        &lt;/Root&gt;  \n\nDim xmlTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n        &lt;/Root&gt;  \n\nxmlTree.AddFirst(New XElement(&quot;NewChild&quot;, &quot;new content&quot;))  \nxmlTree.AddFirst( _  \n    From el In srcTree.Elements() _  \n    Where CInt(el) &gt; 3 _  \n    Select el _  \n)  \n&#39; Even though Child9 does not exist in srcTree, the following statement will not  \n&#39; throw an exception, and nothing will be added to xmlTree  \nxmlTree.AddFirst(srcTree.&lt;Child9&gt;)  \nConsole.WriteLine(xmlTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Element4&gt;4&lt;/Element4&gt;  \n  &lt;Element5&gt;5&lt;/Element5&gt;  \n  &lt;NewChild&gt;new content&lt;/NewChild&gt;  \n  &lt;Child1&gt;1&lt;/Child1&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n  &lt;Child5&gt;5&lt;/Child5&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_AddFirst_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_AddFirst_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddFirst(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified content as the first children of this document or element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddFirst (object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A parameter list of content objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The parent is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method adds the new content before the existing content of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two XML trees, and uses this method to add an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object as the first element to one of them. It also adds the results of a LINQ query to the XML tree.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Element1&quot;, 1),  \n    new XElement(&quot;Element2&quot;, 2),  \n    new XElement(&quot;Element3&quot;, 3),  \n    new XElement(&quot;Element4&quot;, 4),  \n    new XElement(&quot;Element5&quot;, 5)  \n);  \nXElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nxmlTree.AddFirst(new XElement(&quot;NewChild&quot;, &quot;new content&quot;));  \nxmlTree.AddFirst(  \n    from el in srcTree.Elements()  \n    where (int)el &gt; 3  \n    select el  \n);  \n// Even though Child9 does not exist in srcTree, the following statement will not  \n// throw an exception, and nothing will be added to xmlTree.  \nxmlTree.AddFirst(srcTree.Element(&quot;Child9&quot;));  \nConsole.WriteLine(xmlTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Element1&gt;1&lt;/Element1&gt;  \n            &lt;Element2&gt;2&lt;/Element2&gt;  \n            &lt;Element3&gt;3&lt;/Element3&gt;  \n            &lt;Element4&gt;4&lt;/Element4&gt;  \n            &lt;Element5&gt;5&lt;/Element5&gt;  \n        &lt;/Root&gt;  \n\nDim xmlTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n        &lt;/Root&gt;  \n\nxmlTree.AddFirst(New XElement(&quot;NewChild&quot;, &quot;new content&quot;))  \nxmlTree.AddFirst( _  \n    From el In srcTree.Elements() _  \n    Where CInt(el) &gt; 3 _  \n    Select el _  \n)  \n&#39; Even though Child9 does not exist in srcTree, the following statement will not  \n&#39; throw an exception, and nothing will be added to xmlTree.  \nxmlTree.AddFirst(srcTree.&lt;Child9&gt;)  \nConsole.WriteLine(xmlTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Element4&gt;4&lt;/Element4&gt;  \n  &lt;Element5&gt;5&lt;/Element5&gt;  \n  &lt;NewChild&gt;new content&lt;/NewChild&gt;  \n  &lt;Child1&gt;1&lt;/Child1&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n  &lt;Child5&gt;5&lt;/Child5&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_CreateWriter\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_CreateWriter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateWriter()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that can be used to add nodes to the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlWriter CreateWriter ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that is ready to have content written to it.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>While serializing, namespace prefixes are inferred from the namespace attributes in the XML tree.  </p>\n<p> For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>You can use this method to perform an XSLT transformation. You can create an XML tree, create an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> from the XML tree, create a new document, and create a <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that will write into the new document. Then, you can invoke the XSLT transformation, passing the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> to the transform. After the transformation successfully completes, the new XML tree is populated with the results of the transformation.  </p>\n<pre><code class=\"lang-c#\">\n                string xslMarkup = @&quot;&lt;?xml version=&#39;1.0&#39;?&gt;  \n&lt;xsl:stylesheet xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt;  \n    &lt;xsl:template match=&#39;/Parent&#39;&gt;  \n        &lt;Root&gt;  \n            &lt;C1&gt;&lt;xsl:value-of select=&#39;Child1&#39;/&gt;&lt;/C1&gt;  \n            &lt;C2&gt;&lt;xsl:value-of select=&#39;Child2&#39;/&gt;&lt;/C2&gt;  \n        &lt;/Root&gt;  \n    &lt;/xsl:template&gt;  \n&lt;/xsl:stylesheet&gt;&quot;;  \n\nXDocument xmlTree = new XDocument(  \n    new XElement(&quot;Parent&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;Child1 data&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;Child2 data&quot;)  \n    )  \n);  \n\nXDocument newTree = new XDocument();  \nusing (XmlWriter writer = newTree.CreateWriter()) {  \n    // Load the style sheet.  \n    XslCompiledTransform xslt = new XslCompiledTransform();  \n    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  \n\n    // Execute the transform and output the results to a writer.  \n    xslt.Transform(xmlTree.CreateReader(), writer);  \n}  \n\nConsole.WriteLine(newTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xslMarkup As XDocument = _   \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;xsl:stylesheet xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt;  \n        &lt;xsl:template match=&#39;/Parent&#39;&gt;  \n            &lt;Root&gt;  \n                &lt;C1&gt;&lt;xsl:value-of select=&#39;Child1&#39;/&gt;&lt;/C1&gt;  \n                &lt;C2&gt;&lt;xsl:value-of select=&#39;Child2&#39;/&gt;&lt;/C2&gt;  \n            &lt;/Root&gt;  \n        &lt;/xsl:template&gt;  \n    &lt;/xsl:stylesheet&gt;  \n\nDim xmlTree As XElement = _   \n    &lt;Parent&gt;  \n        &lt;Child1&gt;Child1 data&lt;/Child1&gt;  \n        &lt;Child2&gt;Child2 data&lt;/Child2&gt;  \n    &lt;/Parent&gt;  \n\nDim newTree As XDocument = New XDocument()  \n\nUsing writer As XmlWriter = newTree.CreateWriter()  \n    &#39; Load the style sheet.  \n    Dim xslt As XslCompiledTransform = _  \n        New XslCompiledTransform()  \n    xslt.Load(xslMarkup.CreateReader())  \n\n    &#39; Execute the transform and output the results to a writer.  \n    xslt.Transform(xmlTree.CreateReader(), writer)  \nEnd Using  \n\nConsole.WriteLine(newTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;C1&gt;Child1 data&lt;/C1&gt;  \n  &lt;C2&gt;Child2 data&lt;/C2&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_DescendantNodes\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_DescendantNodes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DescendantNodes()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of the descendant nodes for this document or element, in document order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> containing the descendant nodes of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>, in document order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that attributes are not considered to be nodes in LINQ to XML, so they will not be part of the collection that is returned by this method.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, and then iterates through the DescendantNodes axis.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    // Attributes are not nodes, so will not be returned by DescendantNodes.  \n    new XAttribute(&quot;Att1&quot;, &quot;AttributeContent&quot;),  \n    new XElement(&quot;Child&quot;,  \n        new XElement(&quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nIEnumerable&lt;XNode&gt; dnas =  \n    from node in xmlTree.DescendantNodes()  \n    select node;  \nforeach (XNode node in dnas)  \n{  \n    if (node is XElement)  \n        Console.WriteLine((node as XElement).Name);  \n    else  \n        Console.WriteLine(node);  \n}  \n</code></pre><pre><code class=\"lang-vb\">\n                &#39; Attributes are not nodes, so will not be returned by DescendantNodes.  \nDim xmlTree As XElement = _   \n    &lt;Root Att1=&quot;AttributeContent&quot;&gt;  \n        &lt;Child&gt;  \n            &lt;GrandChild&gt;element content&lt;/GrandChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dnas = From node In xmlTree.DescendantNodes _  \n           Select node  \n\nFor Each node In dnas  \n    If TypeOf node Is XElement Then  \n        Console.WriteLine(DirectCast(node, XElement).Name)  \n    Else  \n        Console.WriteLine(node)  \n    End If  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Child  \nGrandChild  \nelement content  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_Descendants\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_Descendants_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Descendants()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of the descendant elements for this document or element, in document order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> containing the descendant elements of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that this method will not return itself in the resulting <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>. See <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_DescendantsAndSelf_\" data-linktype=\"relative-path\">DescendantsAndSelf</a> if you need to include the current <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> in the results.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, and then uses this axis method to retrieve the descendants.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, &quot;AttributeContent&quot;),  \n    new XElement(&quot;Child&quot;,  \n        new XText(&quot;Some text&quot;),  \n        new XElement(&quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nIEnumerable&lt;XElement&gt; de =  \n    from el in xmlTree.Descendants()  \n    select el;  \nforeach (XElement el in de)  \n    Console.WriteLine(el.Name);  \n</code></pre><pre><code class=\"lang-vb\">&#39; Attributes are not nodes, so will not be returned by DescendantNodes.  \nDim xmlTree As XElement = _  \n    &lt;Root Att1=&quot;AttributeContent&quot;&gt;  \n        &lt;Child&gt;Some text  \n            &lt;GrandChild&gt;element content&lt;/GrandChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \nDim de = From el In xmlTree.Descendants _  \n         Select el  \n\nFor Each el In de  \n    Console.WriteLine(el.Name)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Child  \nGrandChild  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_Descendants_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_Descendants_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Descendants(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> containing the descendant elements of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a> that match the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example prints all descendants of an element.  </p>\n<pre><code class=\"lang-c#\">// Attributes are not nodes, so will not be returned by DescendantNodes.  \nXElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, &quot;AttributeContent&quot;),  \n    new XElement(&quot;Child&quot;,  \n        new XText(&quot;Some text&quot;),  \n        new XElement(&quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nIEnumerable&lt;XElement&gt; de =  \n    from el in xmlTree.Descendants(&quot;Child&quot;)  \n    select el;  \nforeach (XElement el in de)  \n    Console.WriteLine(el.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                &#39; Attributes are not nodes, so will not be returned by the descendants axis.  \nDim xmlTree As XElement = _   \n    &lt;Root Att1=&quot;AttributeContent&quot;&gt;  \n         &lt;Child&gt;Some text  \n             &lt;GrandChild&gt;element content&lt;/GrandChild&gt;  \n         &lt;/Child&gt;  \n     &lt;/Root&gt;  \n\nDim de = From el In xmlTree...&lt;Child&gt; _  \n         Select el  \n\nFor Each el In de  \n    Console.WriteLine(el.Name)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Child  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                // Attributes are not nodes, so will not be returned by DescendantNodes.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(aw + &quot;Att1&quot;, &quot;AttributeContent&quot;),  \n    new XElement(aw + &quot;Child&quot;,  \n        new XText(&quot;Some text&quot;),  \n        new XElement(aw + &quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nIEnumerable&lt;XElement&gt; de =  \n    from el in xmlTree.Descendants(aw + &quot;Child&quot;)  \n    select el;  \nforeach (XElement el in de)  \n    Console.WriteLine(el.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw = &quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        &#39; Attributes are not nodes, so will not be returned by the descendants axis.  \n        Dim xmlTree As XElement = _   \n            &lt;aw:Root aw:Att1=&quot;AttributeContent&quot;&gt;  \n                 &lt;aw:Child&gt;Some text  \n                     &lt;aw:GrandChild&gt;element content&lt;/aw:GrandChild&gt;  \n                 &lt;/aw:Child&gt;  \n             &lt;/aw:Root&gt;  \n\n        Dim de = From el In xmlTree...&lt;aw:Child&gt; _  \n                 Select el  \n\n        For Each el In de  \n            Console.WriteLine(el.Name)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>{http://www.adventure-works.com}Child  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_Element_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_Element_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Element(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the first (in document order) child element with the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XElement Element (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that matches the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Returns <code>null</code> if there is no element with the specified name.  </p>\n<p> Some axis methods return collections of elements or attributes. This method returns only a single element.  </p>\n<p> This method returns <code>null</code> if the element with the specified name is not found. All of the methods that allow you to construct elements (the constructor of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Add_\" data-linktype=\"relative-path\">Add</a>, and so on) accept <code>null</code> as a valid argument. This allows you to use a convenient idiom: you can call this method as part of functional construction, and the element is added to the XML tree being constructed if and only if the element exists in the source tree. The following example shows this idiom.  </p>\n<p> In contrast to <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_\" data-linktype=\"relative-path\">Elements</a>, this method is not an axis method. It does not use deferred execution; it simply returns an element when called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of this method. In one case, the method finds the element in <code>srcTree</code>. In the second case, the method does not find the element in the source tree, no element is added to <code>xmlTree</code>, and no exception is thrown.  </p>\n<p> Note that the Visual Basic example uses the child XML property. It is also allowable to use the Element method directly in Visual Basic.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Element1&quot;, 1),  \n    new XElement(&quot;Element2&quot;, 2),  \n    new XElement(&quot;Element3&quot;, 3),  \n    new XElement(&quot;Element4&quot;, 4),  \n    new XElement(&quot;Element5&quot;, 5)  \n);  \nXElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5),  \n    srcTree.Element(&quot;Element3&quot;),  \n    // Even though Element9 does not exist in srcTree, the following line  \n    // will not throw an exception.  \n    srcTree.Element(&quot;Element9&quot;)  \n);  \nConsole.WriteLine(xmlTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Element1&gt;1&lt;/Element1&gt;  \n            &lt;Element2&gt;2&lt;/Element2&gt;  \n            &lt;Element3&gt;3&lt;/Element3&gt;  \n            &lt;Element4&gt;4&lt;/Element4&gt;  \n            &lt;Element5&gt;5&lt;/Element5&gt;  \n        &lt;/Root&gt;  \n\nDim xmlTree As XElement = _  \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n            &lt;%= srcTree.&lt;Element3&gt; %&gt;  \n            &lt;%= srcTree.&lt;Element9&gt; %&gt;  \n        &lt;/Root&gt;  \n\n&#39; Even though Element9 does not exist in srcTree, adding it to the tree  \n&#39; will not throw an exception.  \n\nConsole.WriteLine(xmlTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child1&gt;1&lt;/Child1&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n  &lt;Child5&gt;5&lt;/Child5&gt;  \n  &lt;Element3&gt;3&lt;/Element3&gt;  \n&lt;/Root&gt;  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement srcTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(aw + &quot;Element1&quot;, 1),  \n    new XElement(aw + &quot;Element2&quot;, 2),  \n    new XElement(aw + &quot;Element3&quot;, 3),  \n    new XElement(aw + &quot;Element4&quot;, 4),  \n    new XElement(aw + &quot;Element5&quot;, 5)  \n);  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(aw + &quot;Child1&quot;, 1),  \n    new XElement(aw + &quot;Child2&quot;, 2),  \n    new XElement(aw + &quot;Child3&quot;, 3),  \n    new XElement(aw + &quot;Child4&quot;, 4),  \n    new XElement(aw + &quot;Child5&quot;, 5),  \n    srcTree.Element(aw + &quot;Element3&quot;),  \n    // Even though Element9 does not exist in srcTree, the following line  \n    // will not throw an exception.  \n    srcTree.Element(aw + &quot;Element9&quot;)  \n);  \nConsole.WriteLine(xmlTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim srcTree As XElement = _   \n            &lt;aw:Root&gt;  \n                &lt;aw:Element1&gt;1&lt;/aw:Element1&gt;  \n                &lt;aw:Element2&gt;2&lt;/aw:Element2&gt;  \n                &lt;aw:Element3&gt;3&lt;/aw:Element3&gt;  \n                &lt;aw:Element4&gt;4&lt;/aw:Element4&gt;  \n                &lt;aw:Element5&gt;5&lt;/aw:Element5&gt;  \n            &lt;/aw:Root&gt;  \n\n        Dim xmlTree As XElement = _  \n            &lt;aw:Root&gt;  \n                &lt;aw:Child1&gt;1&lt;/aw:Child1&gt;  \n                &lt;aw:Child2&gt;2&lt;/aw:Child2&gt;  \n                &lt;aw:Child3&gt;3&lt;/aw:Child3&gt;  \n                &lt;aw:Child4&gt;4&lt;/aw:Child4&gt;  \n                &lt;aw:Child5&gt;5&lt;/aw:Child5&gt;  \n                &lt;%= srcTree.&lt;aw:Element3&gt; %&gt;  \n                &lt;%= srcTree.&lt;aw:Element9&gt; %&gt;  \n            &lt;/aw:Root&gt;  \n\n        &#39; Even though Element9 does not exist in srcTree, adding it to the tree  \n        &#39; will not throw an exception.  \n\n        Console.WriteLine(xmlTree)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;aw:Child1&gt;1&lt;/aw:Child1&gt;  \n  &lt;aw:Child2&gt;2&lt;/aw:Child2&gt;  \n  &lt;aw:Child3&gt;3&lt;/aw:Child3&gt;  \n  &lt;aw:Child4&gt;4&lt;/aw:Child4&gt;  \n  &lt;aw:Child5&gt;5&lt;/aw:Child5&gt;  \n  &lt;aw:Element3&gt;3&lt;/aw:Element3&gt;  \n&lt;/aw:Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_Elements\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_Elements_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Elements()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of the child elements of this element or document, in document order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> containing the child elements of this <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>, in document order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, and then selects some elements using this axis method.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nIEnumerable&lt;XElement&gt; elements =  \n    from el in xmlTree.Elements()  \n    where (int)el &lt;= 3  \n    select el;  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n        &lt;/Root&gt;  \n\nDim elements = From el In xmlTree.Elements _  \n               Where el.Value &lt;= 3 _  \n               Select el  \n\nFor Each el In elements  \n    Console.WriteLine(el)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Child1&gt;1&lt;/Child1&gt;  \n&lt;Child2&gt;2&lt;/Child2&gt;  \n&lt;Child3&gt;3&lt;/Child3&gt;  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(aw + &quot;Child1&quot;, 1),  \n    new XElement(aw + &quot;Child2&quot;, 2),  \n    new XElement(aw + &quot;Child3&quot;, 3),  \n    new XElement(aw + &quot;Child4&quot;, 4),  \n    new XElement(aw + &quot;Child5&quot;, 5)  \n);  \nIEnumerable&lt;XElement&gt; elements =  \n    from el in xmlTree.Elements()  \n    where (int)el &lt;= 3  \n    select el;  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            &lt;aw:Root&gt;  \n                &lt;aw:Child1&gt;1&lt;/aw:Child1&gt;  \n                &lt;aw:Child2&gt;2&lt;/aw:Child2&gt;  \n                &lt;aw:Child3&gt;3&lt;/aw:Child3&gt;  \n                &lt;aw:Child4&gt;4&lt;/aw:Child4&gt;  \n                &lt;aw:Child5&gt;5&lt;/aw:Child5&gt;  \n            &lt;/aw:Root&gt;  \n\n        Dim elements = From el In xmlTree.Elements _  \n                       Where el.Value &lt;= 3 _  \n                       Select el  \n\n        For Each el In elements  \n            Console.WriteLine(el)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aw:Child1 xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;1&lt;/aw:Child1&gt;  \n&lt;aw:Child2 xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;2&lt;/aw:Child2&gt;  \n&lt;aw:Child3 xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;3&lt;/aw:Child3&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_Elements_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_Elements_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Elements(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> containing the children of the <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a> that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, in document order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, and then selects several child elements using this axis method.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Type1&quot;, 1),  \n    new XElement(&quot;Type1&quot;, 2),  \n    new XElement(&quot;Type2&quot;, 3),  \n    new XElement(&quot;Type2&quot;, 4),  \n    new XElement(&quot;Type2&quot;, 5)  \n);  \nIEnumerable&lt;XElement&gt; elements =  \n    from el in xmlTree.Elements(&quot;Type2&quot;)  \n    select el;  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Type1&gt;1&lt;/Type1&gt;  \n            &lt;Type1&gt;2&lt;/Type1&gt;  \n            &lt;Type2&gt;3&lt;/Type2&gt;  \n            &lt;Type2&gt;4&lt;/Type2&gt;  \n            &lt;Type2&gt;5&lt;/Type2&gt;  \n        &lt;/Root&gt;  \n\nDim elements = From el In xmlTree.&lt;Type2&gt; _  \n               Select el  \n\nFor Each el In elements  \n    Console.WriteLine(el)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Type2&gt;3&lt;/Type2&gt;  \n&lt;Type2&gt;4&lt;/Type2&gt;  \n&lt;Type2&gt;5&lt;/Type2&gt;  \n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(aw + &quot;Type1&quot;, 1),  \n    new XElement(aw + &quot;Type1&quot;, 2),  \n    new XElement(aw + &quot;Type2&quot;, 3),  \n    new XElement(aw + &quot;Type2&quot;, 4),  \n    new XElement(aw + &quot;Type2&quot;, 5)  \n);  \nIEnumerable&lt;XElement&gt; elements =  \n    from el in xmlTree.Elements(aw + &quot;Type2&quot;)  \n    select el;  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _   \n            &lt;aw:Root&gt;  \n                &lt;aw:Type1&gt;1&lt;/aw:Type1&gt;  \n                &lt;aw:Type1&gt;2&lt;/aw:Type1&gt;  \n                &lt;aw:Type2&gt;3&lt;/aw:Type2&gt;  \n                &lt;aw:Type2&gt;4&lt;/aw:Type2&gt;  \n                &lt;aw:Type2&gt;5&lt;/aw:Type2&gt;  \n            &lt;/aw:Root&gt;  \n\n        Dim elements = From el In xmlTree.&lt;aw:Type2&gt; _  \n                       Select el  \n\n        For Each el In elements  \n            Console.WriteLine(el)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aw:Type2 xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;3&lt;/aw:Type2&gt;  \n&lt;aw:Type2 xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;4&lt;/aw:Type2&gt;  \n&lt;aw:Type2 xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;5&lt;/aw:Type2&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_Nodes\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_Nodes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Nodes()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of the child nodes of this element or document, in document order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; Nodes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> containing the contents of this <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>, in document order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that the content does not include attributes. In LINQ to XML, attributes are not considered to be nodes of the tree. They are name/value pairs associated with an element.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree with a variety of types of nodes. It then queries this axis method to enumerate and print the nodes.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XComment(&quot;a comment&quot;),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XText(&quot;mixed content&quot;),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nIEnumerable&lt;XNode&gt; nodes =  \n    from nd in xmlTree.Nodes()  \n    select nd;  \nforeach (XNode node in nodes)  \n    Console.WriteLine(node);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;!--a comment--&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;mixed content&lt;Child5&gt;5&lt;/Child5&gt;  \n            &lt;/Root&gt;  \n\nDim nodes = From nd In xmlTree.Nodes() _  \n            Select nd  \n\nFor Each node In nodes  \n    Console.WriteLine(node)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Child1&gt;1&lt;/Child1&gt;  \n&lt;Child2&gt;2&lt;/Child2&gt;  \n&lt;!--a comment--&gt;  \n&lt;Child3&gt;3&lt;/Child3&gt;  \n&lt;Child4&gt;4&lt;/Child4&gt;  \nmixed content  \n&lt;Child5&gt;5&lt;/Child5&gt;  \n</code></pre><p> The following example creates an XML tree that contains a variety of types of nodes. It then enumerates through portions of the tree, printing the node types.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument xmlTree = new XDocument(  \n    new XComment(&quot;a comment&quot;),  \n    new XProcessingInstruction(&quot;xml-stylesheet&quot;, &quot;type=\\&quot;text/xsl\\&quot; href=\\&quot;hello.xsl\\&quot;&quot;),  \n    new XElement(&quot;Root&quot;,  \n        new XAttribute(&quot;Att&quot;, &quot;attContent&quot;),  \n        new XElement(&quot;Child1&quot;,  \n            new XCData(&quot;CDATA content&quot;)  \n        ),  \n        new XElement(&quot;Child2&quot;,  \n            new XText(&quot;Text content&quot;)  \n        )  \n    )  \n);  \n\nforeach (XNode node in xmlTree.Nodes())  \n{  \n    Console.WriteLine(node.NodeType);  \n    if (node.NodeType == XmlNodeType.Element)  \n    {  \n        foreach (XAttribute att in ((XElement)node).Attributes())  \n            Console.WriteLine(att.NodeType);  \n        foreach (XNode node2 in ((XElement)node).Nodes())  \n        {  \n            Console.WriteLine(node2.NodeType);  \n            if (node2.NodeType == XmlNodeType.Element)  \n                foreach (XNode node3 in ((XElement)node2).Nodes())  \n                    Console.WriteLine(node3.NodeType);  \n        }  \n    }  \n}  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XDocument = _   \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n    &lt;!--a comment--&gt;  \n    &lt;?xml-stylesheet type=&#39;text/xsl&#39; href=&#39;hello.xsl&#39;?&gt;  \n    &lt;Root Att=&quot;attContent&quot;&gt;  \n        &lt;Child1&gt;&lt;![CDATA[CDATA content]]&gt;&lt;/Child1&gt;  \n        &lt;Child2&gt;Text content&lt;/Child2&gt;  \n    &lt;/Root&gt;  \n\n&#39; Note that XNode uses XmlNodeType, which is in the System.Xml namespace  \nFor Each node In xmlTree.Nodes  \n    Console.WriteLine(node.NodeType.ToString())  \n    If node.NodeType = XmlNodeType.Element Then  \n        For Each att In DirectCast(node, XElement).Attributes  \n            Console.WriteLine(att.NodeType.ToString())  \n        Next  \n        For Each node2 In DirectCast (node, XElement).Nodes()  \n            Console.WriteLine(node2.NodeType.ToString())  \n            If node2.NodeType = XmlNodeType.Element Then  \n                For Each node3 In DirectCast (node2, XElement).Nodes  \n                    Console.WriteLine(node3.NodeType.ToString())  \n                Next  \n            End If  \n        Next  \n    End If  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Comment  \nProcessingInstruction  \nElement  \nAttribute  \nElement  \nCDATA  \nElement  \nText  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_RemoveNodes\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_RemoveNodes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveNodes()</div>        \r\n          </div>\r\n    \r\n            <p>Removes the child nodes from this document or element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveNodes ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you call this method on an element that contains attributes, this method will not remove the attributes. To remove the attributes of an element, use <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_RemoveAttributes_\" data-linktype=\"relative-path\">RemoveAttributes</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.linq.extensions#System_Xml_Linq_Extensions_Remove_\" data-linktype=\"relative-path\">Remove</a> method has related functionality. It removes the child nodes of every node in a collection.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree that contains some child nodes. It then calls this method to remove the child nodes.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XComment(&quot;a comment&quot;),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XText(&quot;mixed content&quot;),  \n    new XElement(&quot;Child5&quot;, 5)  \n);  \nxmlTree.RemoveNodes();  \nConsole.WriteLine(xmlTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmltree As XElement = _   \n    &lt;Root&gt;  \n        &lt;Child1&gt;1&lt;/Child1&gt;  \n        &lt;Child2&gt;2&lt;/Child2&gt;  \n        &lt;!--a comment--&gt;  \n        &lt;Child3&gt;3&lt;/Child3&gt;  \n        &lt;Child4&gt;4&lt;/Child4&gt;mixed content&lt;Child5&gt;5&lt;/Child5&gt;  \n    &lt;/Root&gt;  \n\nxmltree.RemoveNodes()  \nConsole.WriteLine(xmltree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root /&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_ReplaceNodes_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_ReplaceNodes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReplaceNodes(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the children nodes of this document or element with the specified content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReplaceNodes (object content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A content object containing simple content or a collection of content objects that replace the children nodes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.  </p>\n<p> This method has snapshot semantics. It first creates a copy of the new content. It then removes all children nodes of this node. Finally, it adds the new content as children nodes. This means that you can replace children nodes using a query on the children nodes themselves.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree that contains children nodes. It then replaces all of the children nodes with a single element.  </p>\n<p> To see an example of replacing the children nodes with the results of a LINQ query, see <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_ReplaceNodes_\" data-linktype=\"relative-path\">ReplaceNodes</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, 1),  \n    new XElement(&quot;Child&quot;, 2),  \n    new XElement(&quot;Child&quot;, 3),  \n    new XElement(&quot;Child&quot;, 4),  \n    new XElement(&quot;Child&quot;, 5)  \n);  \nroot.ReplaceNodes(  \n    from el in root.Elements()  \n    where (int)el &gt;= 3  \n    select el  \n);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _   \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \nroot.ReplaceNodes( _  \n    From el In root.Elements _  \n    Where el.Value &gt;= 3 _  \n    Select el)  \nConsole.WriteLine(root)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child&gt;3&lt;/Child&gt;  \n  &lt;Child&gt;4&lt;/Child&gt;  \n  &lt;Child&gt;5&lt;/Child&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XContainer_ReplaceNodes_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XContainer_ReplaceNodes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReplaceNodes(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the children nodes of this document or element with the specified content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReplaceNodes (object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A parameter list of content objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.  </p>\n<p> This method has snapshot semantics. It first creates a copy of the new content. It then removes all children nodes of this node. Finally, it adds the new content as children nodes. This means that you can replace children nodes using a query on the children nodes themselves.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a dictionary and an XML tree. It then queries the dictionary, projects the results to an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, and replaces the contents of the XML tree with the results of the query.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, 1),  \n    new XElement(&quot;Child&quot;, 2),  \n    new XElement(&quot;Child&quot;, 3),  \n    new XElement(&quot;Child&quot;, 4),  \n    new XElement(&quot;Child&quot;, 5)  \n);  \nroot.ReplaceNodes(  \n    from el in root.Elements()  \n    where (int)el &gt;= 3  \n    select el  \n);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _   \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \nroot.ReplaceNodes( _  \n    From el In root.Elements _  \n    Where el.Value &gt;= 3 _  \n    Select el)  \nConsole.WriteLine(root)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child&gt;3&lt;/Child&gt;  \n  &lt;Child&gt;4&lt;/Child&gt;  \n  &lt;Child&gt;5&lt;/Child&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XContainer.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XContainer.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.Add\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.AddFirst\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.CreateWriter\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.DescendantNodes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.Descendants\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.Element\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.Elements\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.FirstNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.LastNode\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.Nodes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.RemoveNodes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XContainer.ReplaceNodes\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7677d6ce-386f-6d4d-b1c2-7226a5682cb1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a node that can contain other nodes.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Linq/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.XContainer\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XContainer.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XContainer.yml","open_to_public_contributors":true,"api_name":["System.Xml.Linq.XContainer","System.Xml.Linq.XContainer.Add","System.Xml.Linq.XContainer.AddFirst","System.Xml.Linq.XContainer.CreateWriter","System.Xml.Linq.XContainer.DescendantNodes","System.Xml.Linq.XContainer.Descendants","System.Xml.Linq.XContainer.Element","System.Xml.Linq.XContainer.Elements","System.Xml.Linq.XContainer.FirstNode","System.Xml.Linq.XContainer.LastNode","System.Xml.Linq.XContainer.Nodes","System.Xml.Linq.XContainer.RemoveNodes","System.Xml.Linq.XContainer.ReplaceNodes"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.XContainer","System::Xml::Linq::XContainer","System.Xml.Linq.XContainer.Add","System::Xml::Linq::XContainer::Add","System.Xml.Linq.XContainer.AddFirst","System::Xml::Linq::XContainer::AddFirst","System.Xml.Linq.XContainer.CreateWriter","System::Xml::Linq::XContainer::CreateWriter","System.Xml.Linq.XContainer.DescendantNodes","System::Xml::Linq::XContainer::DescendantNodes","System.Xml.Linq.XContainer.Descendants","System::Xml::Linq::XContainer::Descendants","System.Xml.Linq.XContainer.Element","System::Xml::Linq::XContainer::Element","System.Xml.Linq.XContainer.Elements","System::Xml::Linq::XContainer::Elements","System.Xml.Linq.XContainer.FirstNode","System::Xml::Linq::XContainer::FirstNode","System.Xml.Linq.XContainer.LastNode","System::Xml::Linq::XContainer::LastNode","System.Xml.Linq.XContainer.Nodes","System::Xml::Linq::XContainer::Nodes","System.Xml.Linq.XContainer.RemoveNodes","System::Xml::Linq::XContainer::RemoveNodes","System.Xml.Linq.XContainer.ReplaceNodes","System::Xml::Linq::XContainer::ReplaceNodes"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7677d6ce-386f-6d4d-b1c2-7226a5682cb1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Linq/XContainer.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XContainer class | Microsoft Docs","_op_ogTitle":"XContainer class","description":"Represents a node that can contain other nodes.\n","toc_asset_id":"_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.XContainer","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xcontainer","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xcontainer","fileRelativePath":"System.Xml.Linq.XContainer.html"},"themesRelativePathToOutputRoot":"_themes/"}