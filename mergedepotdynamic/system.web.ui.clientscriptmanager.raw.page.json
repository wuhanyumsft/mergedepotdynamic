{"content":"    \r\n    <h1 id=\"System_Web_UI_ClientScriptManager\">\r\n      <span class=\"lang-csharp\">ClientScriptManager</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines methods for managing client scripts in Web applications.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class ClientScriptManager</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ClientScriptManager</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The ClientScriptManager class is used to manage client scripts and add them to Web applications. You can get a reference to the ClientScriptManager class from the <a class=\"xref\" href=\"system.web.ui.page#System_Web_UI_Page_ClientScript_\" data-linktype=\"relative-path\">ClientScript</a> property of the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object.  </p>\n<p> You can add a client script to a Web page declaratively by including the script in the HTML markup of the page. However, there are situations when adding client script dynamically is needed. To add a script dynamically, use the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\" data-linktype=\"relative-path\">RegisterClientScriptBlock</a> method, the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\" data-linktype=\"relative-path\">RegisterClientScriptInclude</a> method, the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method, or the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterOnSubmitStatement_\" data-linktype=\"relative-path\">RegisterOnSubmitStatement</a> method, depending on when and how you want to add the script. For more information, see <a href=\"../Topic/How%20to:%20Add%20Client%20Script%20Dynamically%20to%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">How to: Add Client Script Dynamically to ASP.NET Web Pages</a>.  </p>\n<p> The ClientScriptManager class uniquely identifies scripts by a key <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>. Scripts with the same key and type are considered duplicates. Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.  </p>\n<p> The ClientScriptManager class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback. This is referred to as performing an out-of-band callback to the server. In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page. The Web page runs a modified version of its normal life cycle to process the callback. Use the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event. For more information, see <a href=\"../Topic/Implementing%20Client%20Callbacks%20Programmatically%20Without%20Postbacks%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Implementing Client Callbacks Without Postbacks</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client. To check if the browser supports callbacks, use the <a class=\"xref\" href=\"system.web.configuration.httpcapabilitiesbase#System_Web_Configuration_HttpCapabilitiesBase_SupportsCallback_\" data-linktype=\"relative-path\">SupportsCallback</a> property, which is accessible through the <a class=\"xref\" href=\"system.web.httprequest#System_Web_HttpRequest_Browser_\" data-linktype=\"relative-path\">Browser</a> property of the ASP.NET intrinsic <a class=\"xref\" href=\"system.web.httpcontext#System_Web_HttpContext_Request_\" data-linktype=\"relative-path\">Request</a> object.  </p>\n</div>\n<p> Use the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method and the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackClientHyperlink_\" data-linktype=\"relative-path\">GetPostBackClientHyperlink</a> method to define a client postback event. These methods enable client script functions, when invoked, to cause the server to post back to the page. A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you are using a <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control and the <a class=\"xref\" href=\"system.web.ui.webcontrols.button#System_Web_UI_WebControls_Button_UseSubmitBehavior_\" data-linktype=\"relative-path\">UseSubmitBehavior</a> property is set to <code>false</code>, then you can use the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method to return the client postback event for the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.button#System_Web_UI_WebControls_Button_OnClientClick_\" data-linktype=\"relative-path\">OnClientClick</a> property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control, <a class=\"xref\" href=\"system.web.ui.webcontrols.imagebutton\" data-linktype=\"relative-path\">ImageButton</a> control, and <a class=\"xref\" href=\"system.web.ui.webcontrols.linkbutton\" data-linktype=\"relative-path\">LinkButton</a> control can be used to run client script.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetCallbackEventReference_System_Web_UI_Control_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">GetCallbackEventReference(Control,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains a reference to a client function that, when invoked, initiates a client call back to a server event. The client function for this overloaded method includes a specified control, argument, client script, and context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetCallbackEventReference_System_Web_UI_Control_System_String_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetCallbackEventReference(Control,String,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetCallbackEventReference_System_String_System_String_System_String_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetCallbackEventReference(String,String,String,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetCallbackEventReference_System_Web_UI_Control_System_String_System_String_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetCallbackEventReference(Control,String,String,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetPostBackClientHyperlink_System_Web_UI_Control_System_String_\" data-linktype=\"self-bookmark\">GetPostBackClientHyperlink(Control,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a reference, with <code>javascript:</code> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetPostBackClientHyperlink_System_Web_UI_Control_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetPostBackClientHyperlink(Control,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a reference, with <code>javascript:</code> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_PostBackOptions_\" data-linktype=\"self-bookmark\">GetPostBackEventReference(PostBackOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_Control_System_String_\" data-linktype=\"self-bookmark\">GetPostBackEventReference(Control,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_PostBackOptions_System_Boolean_\" data-linktype=\"self-bookmark\">GetPostBackEventReference(PostBackOptions,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> object. Optionally, registers the event reference for validation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_Control_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetPostBackEventReference(Control,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string to use in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information. Optionally, registers the event reference for validation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_GetWebResourceUrl_System_Type_System_String_\" data-linktype=\"self-bookmark\">GetWebResourceUrl(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a URL reference to a resource in an assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_System_String_\" data-linktype=\"self-bookmark\">IsClientScriptBlockRegistered(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the client script block is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_System_Type_System_String_\" data-linktype=\"self-bookmark\">IsClientScriptBlockRegistered(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the client script block is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a key and type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_IsClientScriptIncludeRegistered_System_String_\" data-linktype=\"self-bookmark\">IsClientScriptIncludeRegistered(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the client script include is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_IsClientScriptIncludeRegistered_System_Type_System_String_\" data-linktype=\"self-bookmark\">IsClientScriptIncludeRegistered(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the client script include is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a key and type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_IsOnSubmitStatementRegistered_System_String_\" data-linktype=\"self-bookmark\">IsOnSubmitStatementRegistered(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the OnSubmit statement is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_IsOnSubmitStatementRegistered_System_Type_System_String_\" data-linktype=\"self-bookmark\">IsOnSubmitStatementRegistered(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the OnSubmit statement is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key and type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_System_String_\" data-linktype=\"self-bookmark\">IsStartupScriptRegistered(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the startup script is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_System_Type_System_String_\" data-linktype=\"self-bookmark\">IsStartupScriptRegistered(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the startup script is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key and type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterArrayDeclaration_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterArrayDeclaration(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a JavaScript array declaration with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using an array name and array value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_System_Type_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterClientScriptBlock(Type,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers the client script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, key, and script literal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_System_Type_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">RegisterClientScriptBlock(Type,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers the client script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterClientScriptInclude(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers the client script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a key and a URL, which enables the script to be called from the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_System_Type_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterClientScriptInclude(Type,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers the client script include with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, a key, and a URL.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterClientScriptResource_System_Type_System_String_\" data-linktype=\"self-bookmark\">RegisterClientScriptResource(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers the client script resource with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type and a resource name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterExpandoAttribute_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterExpandoAttribute(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterExpandoAttribute_System_String_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">RegisterExpandoAttribute(String,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterForEventValidation_System_String_\" data-linktype=\"self-bookmark\">RegisterForEventValidation(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an event reference for validation with a unique control ID representing the client control generating the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterForEventValidation_System_Web_UI_PostBackOptions_\" data-linktype=\"self-bookmark\">RegisterForEventValidation(PostBackOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an event reference for validation with <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterForEventValidation_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterForEventValidation(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterHiddenField_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterHiddenField(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a hidden value with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterOnSubmitStatement_System_Type_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterOnSubmitStatement(Type,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an OnSubmit statement with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, a key, and a script literal. The statement executes when the <a class=\"xref\" href=\"system.web.ui.htmlcontrols.htmlform\" data-linktype=\"relative-path\">HtmlForm</a> is submitted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterStartupScript_System_Type_System_String_System_String_\" data-linktype=\"self-bookmark\">RegisterStartupScript(Type,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers the startup script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, a key, and a script literal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_RegisterStartupScript_System_Type_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">RegisterStartupScript(Type,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers the startup script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_ValidateEvent_System_String_\" data-linktype=\"self-bookmark\">ValidateEvent(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Validates a client event that was registered for event validation using the <span class=\"xref\">stem.Web.UI.ClientScriptManager.RegisterForEventValidation*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_ClientScriptManager_ValidateEvent_System_String_System_String_\" data-linktype=\"self-bookmark\">ValidateEvent(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Validates a client event that was registered for event validation using the <span class=\"xref\">stem.Web.UI.ClientScriptManager.RegisterForEventValidation*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetCallbackEventReference_System_Web_UI_Control_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetCallbackEventReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCallbackEventReference(Control,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Obtains a reference to a client function that, when invoked, initiates a client call back to a server event. The client function for this overloaded method includes a specified control, argument, client script, and context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The server <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> that handles the client callback. The control must implement the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler\" data-linktype=\"relative-path\">ICallbackEventHandler</a> interface and provide a <span class=\"xref\">stem.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument passed from the client script to the server  </p>\n<p> <span class=\"xref\">stem.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the client event handler that receives the result of the successful server event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of a client function that invokes the client callback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> specified is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> specified does not implement the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler\" data-linktype=\"relative-path\">ICallbackEventHandler</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetCallbackEventReference method performs an out-of-band callback to the server that is a modified version of a page&#39;s normal life cycle. For more information, see <a href=\"../Topic/Implementing%20Client%20Callbacks%20Programmatically%20Without%20Postbacks%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Implementing Client Callbacks Without Postbacks</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls. For other browsers, an XMLHttpRequest using the browser&#39;s local Document Object Model (DOM) is used. To check whether a browser supports client callbacks, use the <a class=\"xref\" href=\"system.web.configuration.httpcapabilitiesbase#System_Web_Configuration_HttpCapabilitiesBase_SupportsCallback_\" data-linktype=\"relative-path\">SupportsCallback</a> property. To check whether a browser supports XML over HTTP, use the <a class=\"xref\" href=\"system.web.configuration.httpcapabilitiesbase#System_Web_Configuration_HttpCapabilitiesBase_SupportsXmlHttp_\" data-linktype=\"relative-path\">SupportsXmlHttp</a> property. Both properties are accessible through the <a class=\"xref\" href=\"system.web.httprequest#System_Web_HttpRequest_Browser_\" data-linktype=\"relative-path\">Browser</a> property of the intrinsic ASP.NET <a class=\"xref\" href=\"system.web.httpcontext#System_Web_HttpContext_Request_\" data-linktype=\"relative-path\">Request</a> object.  </p>\n</div>\n<p> The GetCallbackEventReference overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method performs a callback synchronously using XML over HTTP. When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser. No two synchronous callbacks callback can execute at the same time in the browser. If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.  </p>\n<p> To send data asynchronously, use one of the overloads that takes the <code>useAsync</code> parameter, which is a Boolean value controlling this behavior. In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.  </p>\n<p> Additionally, this overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method specifies no client function to handle the case of an error condition generated by the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_RaiseCallbackEvent_\" data-linktype=\"relative-path\">RaiseCallbackEvent</a> method. To specify a client error callback handler, use one of the overloads that takes the <code>clientErrorCallback</code> parameter.  </p>\n<p> The GetCallbackEventReference method takes an optional string <code>argument</code> parameter and returns a string. To pass in or to receive multiple values, concatenate values in the input or return string, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations. If the properties are to survive page requests, you can use session state.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use two overloads of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method in a client callback scenario that increments integers.  </p>\n<p> Two callback mechanisms are shown; the difference between them is the use of the <code>context</code> parameter. A <code>ReceiveServerData1</code> client callback function is provided using the <code>context</code> parameter. In contrast, the <code>ReceiveServerData2</code> client callback function is defined in a <code>&lt;script&gt;</code> block on the page. A <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_RaiseCallbackEvent_\" data-linktype=\"relative-path\">RaiseCallbackEvent</a> method is the server handler that increments the value that is passed to it and the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_GetCallbackResult_\" data-linktype=\"relative-path\">GetCallbackResult</a> method returns the incremented value as a string. If the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_RaiseCallbackEvent_\" data-linktype=\"relative-path\">RaiseCallbackEvent</a> method returns an error, then the <code>ProcessCallBackError</code> client function is called.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager7#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    \n    public int cbCount = 0;\n    \n    // Define method that processes the callbacks on server.\n    public void RaiseCallbackEvent(String eventArgument)\n    {\n        cbCount = Convert.ToInt32(eventArgument) + 1;\n    }\n\n    // Define method that returns callback result.\n    public string GetCallbackResult()\n    {\n        return cbCount.ToString();\n    }\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        // Define a StringBuilder to hold messages to output.\n        StringBuilder sb = new StringBuilder();\n\n        // Check if this is a postback.\n        sb.Append(&quot;No page postbacks have occurred.&quot;);\n        if (Page.IsPostBack)\n        {\n            sb.Append(&quot;A page postback has occurred.&quot;);\n        }\n\n        // Write out any messages.\n        MyLabel.Text = sb.ToString();\n\n        // Get a ClientScriptManager reference from the Page class.\n        ClientScriptManager cs = Page.ClientScript;\n\n        // Define one of the callback script&#39;s context.\n        // The callback script will be defined in a script block on the page.\n        StringBuilder context1 = new StringBuilder();\n        context1.Append(&quot;function ReceiveServerData1(arg, context)&quot;);\n        context1.Append(&quot;{&quot;);\n        context1.Append(&quot;Message1.innerText =  arg;&quot;);\n        context1.Append(&quot;value1 = arg;&quot;);\n        context1.Append(&quot;}&quot;);\n\n        // Define callback references.\n        String cbReference1 = cs.GetCallbackEventReference(this, &quot;arg&quot;, \n            &quot;ReceiveServerData1&quot;, context1.ToString());\n        String cbReference2 = cs.GetCallbackEventReference(&quot;&#39;&quot; + \n            Page.UniqueID + &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData2&quot;, &quot;&quot;, \n            &quot;ProcessCallBackError&quot;, false);\n        String callbackScript1 = &quot;function CallTheServer1(arg, context) {&quot; + \n            cbReference1 + &quot;; }&quot;;\n        String callbackScript2 = &quot;function CallTheServer2(arg, context) {&quot; + \n            cbReference2 + &quot;; }&quot;;\n\n        // Register script blocks will perform call to the server.\n        cs.RegisterClientScriptBlock(this.GetType(), &quot;CallTheServer1&quot;, \n            callbackScript1, true);\n        cs.RegisterClientScriptBlock(this.GetType(), &quot;CallTheServer2&quot;, \n            callbackScript2, true);\n\n    }\n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = 0;\nvar value2 = 0;\nfunction ReceiveServerData2(arg, context)\n{\n    Message2.innerText = arg;\n    value2 = arg;\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message2.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; \n          runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback 1 result: &lt;span id=&quot;Message1&quot;&gt;0&lt;/span&gt;\n      &lt;br /&gt;\n      Callback 2 result: &lt;span id=&quot;Message2&quot;&gt;0&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot; \n             value=&quot;ClientCallBack1&quot; \n             onclick=&quot;CallTheServer1(value1, alert(&#39;Increment value&#39;))&quot;/&gt;    \n      &lt;input type=&quot;button&quot; \n             value=&quot;ClientCallBack2&quot; \n             onclick=&quot;CallTheServer2(value2, alert(&#39;Increment value&#39;))&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;MyLabel&quot; \n                 runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager7#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n    Public cbCount As Integer = 0\n    \n    &#39; Define method that processes the callbacks on server.\n    Public Sub RaiseCallbackEvent(ByVal eventArgument As String) _\n    Implements System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent\n        \n        cbCount = Convert.ToInt32(eventArgument) + 1\n        \n    End Sub\n\n    &#39; Define method that returns callback result.\n    Public Function GetCallbackResult() _\n    As String Implements _\n    System.Web.UI.ICallbackEventHandler.GetCallbackResult\n\n        Return cbCount.ToString()\n        \n    End Function\n    \n    \n \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n    \n        &#39; Define a StringBuilder to hold messages to output.\n        Dim sb As New StringBuilder()\n    \n        &#39; Check if this is a postback.\n        sb.Append(&quot;No page postbacks have occurred.&quot;)\n        If (Page.IsPostBack) Then\n      \n            sb.Append(&quot;A page postback has occurred.&quot;)\n      \n        End If\n    \n        &#39; Write out any messages.\n        MyLabel.Text = sb.ToString()\n    \n        &#39; Get a ClientScriptManager reference from the Page class.\n        Dim cs As ClientScriptManager = Page.ClientScript\n\n        &#39; Define one of the callback script&#39;s context.\n        &#39; The callback script will be defined in a script block on the page.\n        Dim context1 As New StringBuilder()\n        context1.Append(&quot;function ReceiveServerData1(arg, context)&quot;)\n        context1.Append(&quot;{&quot;)\n        context1.Append(&quot;Message1.innerText =  arg;&quot;)\n        context1.Append(&quot;value1 = arg;&quot;)\n        context1.Append(&quot;}&quot;)\n    \n        &#39; Define callback references.\n        Dim cbReference1 As String = cs.GetCallbackEventReference(Me, &quot;arg&quot;, _\n            &quot;ReceiveServerData1&quot;, context1.ToString())\n        Dim cbReference2 As String = cs.GetCallbackEventReference(&quot;&#39;&quot; &amp; _\n            Page.UniqueID &amp; &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData2&quot;, &quot;&quot;, &quot;ProcessCallBackError&quot;, False)\n        Dim callbackScript1 As String = &quot;function CallTheServer1(arg, context) {&quot; + _\n            cbReference1 + &quot;; }&quot;\n        Dim callbackScript2 As String = &quot;function CallTheServer2(arg, context) {&quot; + _\n            cbReference2 + &quot;; }&quot;\n    \n        &#39; Register script blocks will perform call to the server.\n        cs.RegisterClientScriptBlock(Me.GetType(), &quot;CallTheServer1&quot;, _\n            callbackScript1, True)\n        cs.RegisterClientScriptBlock(Me.GetType(), &quot;CallTheServer2&quot;, _\n            callbackScript2, True)\n    \n    End Sub\n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = 0;\nvar value2 = 0;\nfunction ReceiveServerData2(arg, context)\n{\n    Message2.innerText = arg;\n    value2 = arg;\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message2.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; \n          runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback 1 result: &lt;span id=&quot;Message1&quot;&gt;0&lt;/span&gt;\n      &lt;br /&gt;\n      Callback 2 result: &lt;span id=&quot;Message2&quot;&gt;0&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot; \n             value=&quot;ClientCallBack1&quot; \n             onclick=&quot;CallTheServer1(value1, alert(&#39;Increment value&#39;))&quot;/&gt;    \n      &lt;input type=&quot;button&quot; \n             value=&quot;ClientCallBack2&quot; \n             onclick=&quot;CallTheServer2(value2, alert(&#39;Increment value&#39;))&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;MyLabel&quot; \n                 runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetCallbackEventReference_System_Web_UI_Control_System_String_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetCallbackEventReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCallbackEventReference(Control,String,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The server <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> that handles the client callback. The control must implement the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler\" data-linktype=\"relative-path\">ICallbackEventHandler</a> interface and provide a <span class=\"xref\">stem.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument passed from the client script to the server  </p>\n<p> <span class=\"xref\">stem.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the client event handler that receives the result of the successful server event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>useAsync</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to perform the callback asynchronously; <code>false</code> to perform the callback synchronously.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of a client function that invokes the client callback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> specified is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> specified does not implement the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler\" data-linktype=\"relative-path\">ICallbackEventHandler</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method requires a <code>useAsync</code> parameter, which allows you to perform the client callback asynchronously by setting the value to <code>true</code>. The overload versions of this method that do not require the <code>useAsync</code> parameter set the value to <code>false</code> by default.  </p>\n<p> For more information on this method, see the remarks for the overload <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetCallbackEventReference_System_String_System_String_System_String_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetCallbackEventReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCallbackEventReference(String,String,String,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a server <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> that handles the client callback. The control must implement the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler\" data-linktype=\"relative-path\">ICallbackEventHandler</a> interface and provide a <span class=\"xref\">stem.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument passed from the client script to the server  </p>\n<p> <span class=\"xref\">stem.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the client event handler that receives the result of the successful server event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientErrorCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the client event handler that receives the result when an error occurs in the server event handler.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>useAsync</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to perform the callback asynchronously; <code>false</code> to perform the callback synchronously.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of a client function that invokes the client callback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method takes a <code>target</code> string parameter instead of a <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> parameter. Use this overload when you want the callback to go back to something other than a string containing the <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_UniqueID_\" data-linktype=\"relative-path\">UniqueID</a> of the control.  </p>\n<p> Additionally, this overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method requires a <code>useAsync</code> and a <code>clientErrorCallback</code> parameter. The <code>useAsync</code> parameter allows you to perform the client callback asynchronously by setting the value to <code>true</code>. The overload versions of this method that do not require the <code>useAsync</code> parameter set the value to <code>false</code> by default. The <code>clientErrorCallback</code> parameter allows you to define the name of the client function that is called if the server handler, the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_RaiseCallbackEvent_\" data-linktype=\"relative-path\">RaiseCallbackEvent</a> method, returns an error. The overload versions of this method that do not require the <code>clientErrorCallback</code> parameter set the value to null.  </p>\n<p> For more information on this method, see the remarks for the overload <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use two overloads of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method in a client callback scenario that increments integers.  </p>\n<p> Two callback mechanisms are shown; the difference between them is the use of the <code>context</code> parameter. A <code>ReceiveServerData1</code> client callback function is provided using the <code>context</code> parameter. In contrast, the <code>ReceiveServerData2</code> client callback function is defined in a <code>&lt;script&gt;</code> block on the page. A <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_RaiseCallbackEvent_\" data-linktype=\"relative-path\">RaiseCallbackEvent</a> method is the server handler that increments the value that is passed to it and the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_GetCallbackResult_\" data-linktype=\"relative-path\">GetCallbackResult</a> method returns the incremented value as a string. If the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_RaiseCallbackEvent_\" data-linktype=\"relative-path\">RaiseCallbackEvent</a> method returns an error, then the client function <code>ProcessCallBackError</code> is called.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager7#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    \n    public int cbCount = 0;\n    \n    // Define method that processes the callbacks on server.\n    public void RaiseCallbackEvent(String eventArgument)\n    {\n        cbCount = Convert.ToInt32(eventArgument) + 1;\n    }\n\n    // Define method that returns callback result.\n    public string GetCallbackResult()\n    {\n        return cbCount.ToString();\n    }\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        // Define a StringBuilder to hold messages to output.\n        StringBuilder sb = new StringBuilder();\n\n        // Check if this is a postback.\n        sb.Append(&quot;No page postbacks have occurred.&quot;);\n        if (Page.IsPostBack)\n        {\n            sb.Append(&quot;A page postback has occurred.&quot;);\n        }\n\n        // Write out any messages.\n        MyLabel.Text = sb.ToString();\n\n        // Get a ClientScriptManager reference from the Page class.\n        ClientScriptManager cs = Page.ClientScript;\n\n        // Define one of the callback script&#39;s context.\n        // The callback script will be defined in a script block on the page.\n        StringBuilder context1 = new StringBuilder();\n        context1.Append(&quot;function ReceiveServerData1(arg, context)&quot;);\n        context1.Append(&quot;{&quot;);\n        context1.Append(&quot;Message1.innerText =  arg;&quot;);\n        context1.Append(&quot;value1 = arg;&quot;);\n        context1.Append(&quot;}&quot;);\n\n        // Define callback references.\n        String cbReference1 = cs.GetCallbackEventReference(this, &quot;arg&quot;, \n            &quot;ReceiveServerData1&quot;, context1.ToString());\n        String cbReference2 = cs.GetCallbackEventReference(&quot;&#39;&quot; + \n            Page.UniqueID + &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData2&quot;, &quot;&quot;, \n            &quot;ProcessCallBackError&quot;, false);\n        String callbackScript1 = &quot;function CallTheServer1(arg, context) {&quot; + \n            cbReference1 + &quot;; }&quot;;\n        String callbackScript2 = &quot;function CallTheServer2(arg, context) {&quot; + \n            cbReference2 + &quot;; }&quot;;\n\n        // Register script blocks will perform call to the server.\n        cs.RegisterClientScriptBlock(this.GetType(), &quot;CallTheServer1&quot;, \n            callbackScript1, true);\n        cs.RegisterClientScriptBlock(this.GetType(), &quot;CallTheServer2&quot;, \n            callbackScript2, true);\n\n    }\n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = 0;\nvar value2 = 0;\nfunction ReceiveServerData2(arg, context)\n{\n    Message2.innerText = arg;\n    value2 = arg;\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message2.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; \n          runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback 1 result: &lt;span id=&quot;Message1&quot;&gt;0&lt;/span&gt;\n      &lt;br /&gt;\n      Callback 2 result: &lt;span id=&quot;Message2&quot;&gt;0&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot; \n             value=&quot;ClientCallBack1&quot; \n             onclick=&quot;CallTheServer1(value1, alert(&#39;Increment value&#39;))&quot;/&gt;    \n      &lt;input type=&quot;button&quot; \n             value=&quot;ClientCallBack2&quot; \n             onclick=&quot;CallTheServer2(value2, alert(&#39;Increment value&#39;))&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;MyLabel&quot; \n                 runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager7#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n    Public cbCount As Integer = 0\n    \n    &#39; Define method that processes the callbacks on server.\n    Public Sub RaiseCallbackEvent(ByVal eventArgument As String) _\n    Implements System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent\n        \n        cbCount = Convert.ToInt32(eventArgument) + 1\n        \n    End Sub\n\n    &#39; Define method that returns callback result.\n    Public Function GetCallbackResult() _\n    As String Implements _\n    System.Web.UI.ICallbackEventHandler.GetCallbackResult\n\n        Return cbCount.ToString()\n        \n    End Function\n    \n    \n \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n    \n        &#39; Define a StringBuilder to hold messages to output.\n        Dim sb As New StringBuilder()\n    \n        &#39; Check if this is a postback.\n        sb.Append(&quot;No page postbacks have occurred.&quot;)\n        If (Page.IsPostBack) Then\n      \n            sb.Append(&quot;A page postback has occurred.&quot;)\n      \n        End If\n    \n        &#39; Write out any messages.\n        MyLabel.Text = sb.ToString()\n    \n        &#39; Get a ClientScriptManager reference from the Page class.\n        Dim cs As ClientScriptManager = Page.ClientScript\n\n        &#39; Define one of the callback script&#39;s context.\n        &#39; The callback script will be defined in a script block on the page.\n        Dim context1 As New StringBuilder()\n        context1.Append(&quot;function ReceiveServerData1(arg, context)&quot;)\n        context1.Append(&quot;{&quot;)\n        context1.Append(&quot;Message1.innerText =  arg;&quot;)\n        context1.Append(&quot;value1 = arg;&quot;)\n        context1.Append(&quot;}&quot;)\n    \n        &#39; Define callback references.\n        Dim cbReference1 As String = cs.GetCallbackEventReference(Me, &quot;arg&quot;, _\n            &quot;ReceiveServerData1&quot;, context1.ToString())\n        Dim cbReference2 As String = cs.GetCallbackEventReference(&quot;&#39;&quot; &amp; _\n            Page.UniqueID &amp; &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData2&quot;, &quot;&quot;, &quot;ProcessCallBackError&quot;, False)\n        Dim callbackScript1 As String = &quot;function CallTheServer1(arg, context) {&quot; + _\n            cbReference1 + &quot;; }&quot;\n        Dim callbackScript2 As String = &quot;function CallTheServer2(arg, context) {&quot; + _\n            cbReference2 + &quot;; }&quot;\n    \n        &#39; Register script blocks will perform call to the server.\n        cs.RegisterClientScriptBlock(Me.GetType(), &quot;CallTheServer1&quot;, _\n            callbackScript1, True)\n        cs.RegisterClientScriptBlock(Me.GetType(), &quot;CallTheServer2&quot;, _\n            callbackScript2, True)\n    \n    End Sub\n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = 0;\nvar value2 = 0;\nfunction ReceiveServerData2(arg, context)\n{\n    Message2.innerText = arg;\n    value2 = arg;\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message2.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; \n          runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback 1 result: &lt;span id=&quot;Message1&quot;&gt;0&lt;/span&gt;\n      &lt;br /&gt;\n      Callback 2 result: &lt;span id=&quot;Message2&quot;&gt;0&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot; \n             value=&quot;ClientCallBack1&quot; \n             onclick=&quot;CallTheServer1(value1, alert(&#39;Increment value&#39;))&quot;/&gt;    \n      &lt;input type=&quot;button&quot; \n             value=&quot;ClientCallBack2&quot; \n             onclick=&quot;CallTheServer2(value2, alert(&#39;Increment value&#39;))&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;MyLabel&quot; \n                 runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetCallbackEventReference_System_Web_UI_Control_System_String_System_String_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetCallbackEventReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCallbackEventReference(Control,String,String,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The server <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> that handles the client callback. The control must implement the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler\" data-linktype=\"relative-path\">ICallbackEventHandler</a> interface and provide a <span class=\"xref\">stem.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument passed from the client script to the server <span class=\"xref\">stem.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the client event handler that receives the result of the successful server event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientErrorCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the client event handler that receives the result when an error occurs in the server event handler.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>useAsync</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code>to perform the callback asynchronously; <code>false</code> to perform the callback synchronously.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of a client function that invokes the client callback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> specified is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> specified does not implement the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler\" data-linktype=\"relative-path\">ICallbackEventHandler</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method requires a <code>useAsync</code> and a <code>clientErrorCallback</code> parameter. The <code>useAsync</code> parameter allows you to perform the client callback asynchronously by setting the value to <code>true</code>. The overload versions of this method that do not require the <code>useAsync</code> parameter set the value to <code>false</code> by default. The <code>clientErrorCallback</code> parameter allows you to define the name of the client function that is called if the server handler (the <a class=\"xref\" href=\"system.web.ui.icallbackeventhandler#System_Web_UI_ICallbackEventHandler_RaiseCallbackEvent_\" data-linktype=\"relative-path\">RaiseCallbackEvent</a> method) returns an error. The overload versions of this method that do not require the <code>clientErrorCallback</code> parameter set the value to null.  </p>\n<p> For more information on this method, see the remarks for the overload <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetCallbackEventReference_\" data-linktype=\"relative-path\">GetCallbackEventReference</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetPostBackClientHyperlink_System_Web_UI_Control_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetPostBackClientHyperlink_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPostBackClientHyperlink(Control,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a reference, with <code>javascript:</code> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The server control to process the postback.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter passed to the server control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representing a JavaScript call to the postback function that includes the target control&#39;s ID and event arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method requires the control that handles the postback to implement the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface. To implement the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface for a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a>,  use the  directive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the GetPostBackClientHyperlink method. The custom control, <code>MyControl</code>, implements the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface. When the HTML anchor element on the page is clicked, the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler#System_Web_UI_IPostBackEventHandler_RaisePostBackEvent_\" data-linktype=\"relative-path\">RaisePostBackEvent</a> method of the custom control is invoked.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager8#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Public Class MyControl\n    Inherits Label\n    Implements IPostBackEventHandler\n     \n    Public Sub New()\n      \n      MyBase.Text = &quot;No postback raised.&quot;\n    \n    End Sub\n    \n    Public Sub RaisePostBackEvent(ByVal eventArgument As String) Implements System.Web.UI.IPostBackEventHandler.RaisePostBackEvent\n      \n      MyBase.Text = &quot;Postback handled by &quot; &amp; Me.ID.ToString() &amp; &quot;. &lt;br/&gt;&quot; &amp; _\n                &quot;Postback caused by &quot; + eventArgument.ToString() &amp; &quot;.&quot;\n\n    End Sub\n    \n  End Class\n   \n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Create an instance of the custom label control and \n    &#39; add it to the page.\n    Dim mycontrol As New MyControl()\n    MyControl.ID = &quot;mycontrol1&quot;\n    PlaceHolder1.Controls.Add(MyControl)\n    PlaceHolder1.Controls.Add(New LiteralControl(&quot;&lt;br/&gt;&quot;))\n    \n    &#39; Create a button element with its onClick attribute defined\n    &#39; to create a postback event reference to the custom label control.\n    Dim b As New HtmlInputButton()\n    b.ID = &quot;mybutton1&quot;\n    b.Value = &quot;Click&quot;\n    b.Attributes.Add(&quot;onclick&quot;, cs.GetPostBackEventReference(MyControl, b.ID.ToString()))\n    PlaceHolder1.Controls.Add(b)\n    PlaceHolder1.Controls.Add(New LiteralControl(&quot;&lt;br/&gt;&quot;))\n    \n    &#39; Create a link element with its href attribute defined\n    &#39; to create a postback event reference to the custom label control.\n    Dim a As New HtmlAnchor()\n    a.ID = &quot;myanchor1&quot;\n    a.InnerText = &quot;link&quot;\n    a.HRef = cs.GetPostBackClientHyperlink(MyControl, a.ID.ToString())\n    PlaceHolder1.Controls.Add(a)\n    \n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:PlaceHolder id=&quot;PlaceHolder1&quot; \n                       runat=&quot;server&quot;&gt;\n      &lt;/asp:PlaceHolder&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager8#1\">&lt;%@ Page Language=&quot;C#&quot;  %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  public class MyControl : Label, IPostBackEventHandler\n  {\n\n    // Use the constructor to defined default label text.\n    public MyControl()\n    {\n      base.Text = &quot;No postback raised.&quot;;\n    }\n    \n    // Implement the RaisePostBackEvent method from the\n    // IPostBackEventHandler interface. \n    public void RaisePostBackEvent(string eventArgument)\n    {\n      base.Text = &quot;Postback handled by &quot; + this.ID.ToString() + &quot;. &lt;br/&gt;&quot; +\n                  &quot;Postback caused by &quot; + eventArgument.ToString() + &quot;.&quot;;\n      \n    }\n  }\n\n  protected void Page_Load(object sender, EventArgs e)\n  {\n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Create an instance of the custom label control and \n    // add it to the page.\n    MyControl mycontrol = new MyControl();\n    mycontrol.ID = &quot;mycontrol1&quot;;\n    PlaceHolder1.Controls.Add(mycontrol);\n    PlaceHolder1.Controls.Add(new LiteralControl(&quot;&lt;br/&gt;&quot;));\n    \n    // Create a button element with its onClick attribute defined\n    // to create a postback event reference to the custom label control.\n    HtmlInputButton b = new HtmlInputButton();\n    b.ID = &quot;mybutton1&quot;;\n    b.Value = &quot;Click&quot;;\n    b.Attributes.Add(&quot;onclick&quot;, cs.GetPostBackEventReference(mycontrol, b.ID.ToString()));\n    PlaceHolder1.Controls.Add(b);\n    PlaceHolder1.Controls.Add(new LiteralControl(&quot;&lt;br/&gt;&quot;));\n    \n    // Create a link element with its href attribute defined\n    // to create a postback event reference to the custom label control.\n    HtmlAnchor a = new HtmlAnchor();\n    a.ID = &quot;myanchor1&quot;;\n    a.InnerText = &quot;link&quot;;\n    a.HRef = cs.GetPostBackClientHyperlink(mycontrol, a.ID.ToString());\n    PlaceHolder1.Controls.Add(a);\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:PlaceHolder id=&quot;PlaceHolder1&quot; \n                       runat=&quot;server&quot;&gt;\n      &lt;/asp:PlaceHolder&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example has the same functionality as the preceding one, except that instead of a custom control, the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> class implements the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager8#2\">&lt;%@ Page Language=&quot;C#&quot;  %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.IPostBackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n  public void RaisePostBackEvent(string eventArgument)\n  {\n    Label1.Text = &quot;Postback handled by &quot; + this.ID.ToString() + &quot;. &lt;br/&gt;&quot; +\n                  &quot;Postback caused by &quot; + eventArgument.ToString() + &quot;.&quot;; ;\n  }\n  \n  protected void Page_Load(object sender, EventArgs e)\n  {\n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n    \n    // Create a button element with its onClick attribute defined\n    // to create a postback event reference to the custom label control.\n    HtmlInputButton b = new HtmlInputButton();\n    b.ID = &quot;mybutton1&quot;;\n    b.Value = &quot;Click&quot;;\n    b.Attributes.Add(&quot;onclick&quot;, cs.GetPostBackEventReference(this, b.ID.ToString()));\n    PlaceHolder1.Controls.Add(b);\n    PlaceHolder1.Controls.Add(new LiteralControl(&quot;&lt;br/&gt;&quot;));\n    \n    // Create a link element with its href attribute defined\n    // to create a postback event reference to the custom label control.\n    HtmlAnchor a = new HtmlAnchor();\n    a.ID = &quot;myanchor1&quot;;\n    a.InnerText = &quot;link&quot;;\n    a.HRef = cs.GetPostBackClientHyperlink(this, a.ID.ToString());\n    PlaceHolder1.Controls.Add(a);\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:Label id=&quot;Label1&quot;\n                 runat=&quot;server&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:PlaceHolder id=&quot;PlaceHolder1&quot; \n                       runat=&quot;server&quot;&gt;\n      &lt;/asp:PlaceHolder&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager8#2\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.IPostBackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n \n  Public Sub RaisePostBackEvent(ByVal eventArgument As String) _\n    Implements IPostBackEventHandler.RaisePostBackEvent\n    \n    Label1.Text = &quot;Postback handled by &quot; &amp; Me.ID.ToString() &amp; &quot;. &lt;br/&gt;&quot; &amp; _\n           &quot;Postback caused by &quot; + eventArgument.ToString() &amp; &quot;.&quot;\n  \n  End Sub\n  \n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n    \n    &#39; Create a button element with its onClick attribute defined\n    &#39; to create a postback event reference to the custom label control.\n    Dim b As New HtmlInputButton()\n    b.ID = &quot;mybutton1&quot;\n    b.Value = &quot;Click&quot;\n    b.Attributes.Add(&quot;onclick&quot;, cs.GetPostBackEventReference(Me, b.ID.ToString()))\n    PlaceHolder1.Controls.Add(b)\n    PlaceHolder1.Controls.Add(New LiteralControl(&quot;&lt;br/&gt;&quot;))\n    \n    &#39; Create a link element with its href attribute defined\n    &#39; to create a postback event reference to the custom label control.\n    Dim a As New HtmlAnchor()\n    a.ID = &quot;myanchor1&quot;\n    a.InnerText = &quot;link&quot;\n    a.HRef = cs.GetPostBackClientHyperlink(Me, a.ID.ToString())\n    PlaceHolder1.Controls.Add(a)\n    \n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:Label id=&quot;Label1&quot;\n                 runat=&quot;server&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:PlaceHolder id=&quot;PlaceHolder1&quot; \n                       runat=&quot;server&quot;&gt;\n      &lt;/asp:PlaceHolder&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetPostBackClientHyperlink_System_Web_UI_Control_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetPostBackClientHyperlink_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPostBackClientHyperlink(Control,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a reference, with <code>javascript:</code> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The server control to process the postback.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter passed to the server control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>registerForEventValidation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to register the postback event for validation; <code>false</code> to not register the post back event for validation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representing a JavaScript call to the postback function that includes the target control&#39;s ID and event arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method requires the control that handles the postback to implement the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface. To implement the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface for a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a>, use the  directive.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_PostBackOptions_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetPostBackEventReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPostBackEventReference(PostBackOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> that defines the postback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that, when treated as script on the client, initiates the client postback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> parameter is <code>null</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To implement the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface for a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a>,  use the  directive.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method can be used with the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control when the <a class=\"xref\" href=\"system.web.ui.webcontrols.button#System_Web_UI_WebControls_Button_UseSubmitBehavior_\" data-linktype=\"relative-path\">UseSubmitBehavior</a> property is <code>false</code>. In this scenario, the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method returns the client postback event for the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_Control_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetPostBackEventReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPostBackEventReference(Control,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetPostBackEventReference (System.Web.UI.Control control, string argument);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The server <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> that processes the postback on the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string of optional arguments to pass to the control that processes the postback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that, when treated as script on the client, initiates the postback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The specified <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To implement the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface for a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a>,  use the  directive.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method can be used with the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control when the <a class=\"xref\" href=\"system.web.ui.webcontrols.button#System_Web_UI_WebControls_Button_UseSubmitBehavior_\" data-linktype=\"relative-path\">UseSubmitBehavior</a> property is <code>false</code>. In this scenario, the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method returns the client postback event for the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the GetPostBackEventReference method. The custom control, <code>MyControl</code>, implements the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface. When the button on the page is clicked, the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler#System_Web_UI_IPostBackEventHandler_RaisePostBackEvent_\" data-linktype=\"relative-path\">RaisePostBackEvent</a> method of the custom control is invoked.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager8#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Public Class MyControl\n    Inherits Label\n    Implements IPostBackEventHandler\n     \n    Public Sub New()\n      \n      MyBase.Text = &quot;No postback raised.&quot;\n    \n    End Sub\n    \n    Public Sub RaisePostBackEvent(ByVal eventArgument As String) Implements System.Web.UI.IPostBackEventHandler.RaisePostBackEvent\n      \n      MyBase.Text = &quot;Postback handled by &quot; &amp; Me.ID.ToString() &amp; &quot;. &lt;br/&gt;&quot; &amp; _\n                &quot;Postback caused by &quot; + eventArgument.ToString() &amp; &quot;.&quot;\n\n    End Sub\n    \n  End Class\n   \n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Create an instance of the custom label control and \n    &#39; add it to the page.\n    Dim mycontrol As New MyControl()\n    MyControl.ID = &quot;mycontrol1&quot;\n    PlaceHolder1.Controls.Add(MyControl)\n    PlaceHolder1.Controls.Add(New LiteralControl(&quot;&lt;br/&gt;&quot;))\n    \n    &#39; Create a button element with its onClick attribute defined\n    &#39; to create a postback event reference to the custom label control.\n    Dim b As New HtmlInputButton()\n    b.ID = &quot;mybutton1&quot;\n    b.Value = &quot;Click&quot;\n    b.Attributes.Add(&quot;onclick&quot;, cs.GetPostBackEventReference(MyControl, b.ID.ToString()))\n    PlaceHolder1.Controls.Add(b)\n    PlaceHolder1.Controls.Add(New LiteralControl(&quot;&lt;br/&gt;&quot;))\n    \n    &#39; Create a link element with its href attribute defined\n    &#39; to create a postback event reference to the custom label control.\n    Dim a As New HtmlAnchor()\n    a.ID = &quot;myanchor1&quot;\n    a.InnerText = &quot;link&quot;\n    a.HRef = cs.GetPostBackClientHyperlink(MyControl, a.ID.ToString())\n    PlaceHolder1.Controls.Add(a)\n    \n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:PlaceHolder id=&quot;PlaceHolder1&quot; \n                       runat=&quot;server&quot;&gt;\n      &lt;/asp:PlaceHolder&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager8#1\">&lt;%@ Page Language=&quot;C#&quot;  %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  public class MyControl : Label, IPostBackEventHandler\n  {\n\n    // Use the constructor to defined default label text.\n    public MyControl()\n    {\n      base.Text = &quot;No postback raised.&quot;;\n    }\n    \n    // Implement the RaisePostBackEvent method from the\n    // IPostBackEventHandler interface. \n    public void RaisePostBackEvent(string eventArgument)\n    {\n      base.Text = &quot;Postback handled by &quot; + this.ID.ToString() + &quot;. &lt;br/&gt;&quot; +\n                  &quot;Postback caused by &quot; + eventArgument.ToString() + &quot;.&quot;;\n      \n    }\n  }\n\n  protected void Page_Load(object sender, EventArgs e)\n  {\n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Create an instance of the custom label control and \n    // add it to the page.\n    MyControl mycontrol = new MyControl();\n    mycontrol.ID = &quot;mycontrol1&quot;;\n    PlaceHolder1.Controls.Add(mycontrol);\n    PlaceHolder1.Controls.Add(new LiteralControl(&quot;&lt;br/&gt;&quot;));\n    \n    // Create a button element with its onClick attribute defined\n    // to create a postback event reference to the custom label control.\n    HtmlInputButton b = new HtmlInputButton();\n    b.ID = &quot;mybutton1&quot;;\n    b.Value = &quot;Click&quot;;\n    b.Attributes.Add(&quot;onclick&quot;, cs.GetPostBackEventReference(mycontrol, b.ID.ToString()));\n    PlaceHolder1.Controls.Add(b);\n    PlaceHolder1.Controls.Add(new LiteralControl(&quot;&lt;br/&gt;&quot;));\n    \n    // Create a link element with its href attribute defined\n    // to create a postback event reference to the custom label control.\n    HtmlAnchor a = new HtmlAnchor();\n    a.ID = &quot;myanchor1&quot;;\n    a.InnerText = &quot;link&quot;;\n    a.HRef = cs.GetPostBackClientHyperlink(mycontrol, a.ID.ToString());\n    PlaceHolder1.Controls.Add(a);\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:PlaceHolder id=&quot;PlaceHolder1&quot; \n                       runat=&quot;server&quot;&gt;\n      &lt;/asp:PlaceHolder&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example has the same functionality as the preceding one, except that instead of a custom control, the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> class implements the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager8#2\">&lt;%@ Page Language=&quot;C#&quot;  %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.IPostBackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n  public void RaisePostBackEvent(string eventArgument)\n  {\n    Label1.Text = &quot;Postback handled by &quot; + this.ID.ToString() + &quot;. &lt;br/&gt;&quot; +\n                  &quot;Postback caused by &quot; + eventArgument.ToString() + &quot;.&quot;; ;\n  }\n  \n  protected void Page_Load(object sender, EventArgs e)\n  {\n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n    \n    // Create a button element with its onClick attribute defined\n    // to create a postback event reference to the custom label control.\n    HtmlInputButton b = new HtmlInputButton();\n    b.ID = &quot;mybutton1&quot;;\n    b.Value = &quot;Click&quot;;\n    b.Attributes.Add(&quot;onclick&quot;, cs.GetPostBackEventReference(this, b.ID.ToString()));\n    PlaceHolder1.Controls.Add(b);\n    PlaceHolder1.Controls.Add(new LiteralControl(&quot;&lt;br/&gt;&quot;));\n    \n    // Create a link element with its href attribute defined\n    // to create a postback event reference to the custom label control.\n    HtmlAnchor a = new HtmlAnchor();\n    a.ID = &quot;myanchor1&quot;;\n    a.InnerText = &quot;link&quot;;\n    a.HRef = cs.GetPostBackClientHyperlink(this, a.ID.ToString());\n    PlaceHolder1.Controls.Add(a);\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:Label id=&quot;Label1&quot;\n                 runat=&quot;server&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:PlaceHolder id=&quot;PlaceHolder1&quot; \n                       runat=&quot;server&quot;&gt;\n      &lt;/asp:PlaceHolder&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager8#2\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.IPostBackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n \n  Public Sub RaisePostBackEvent(ByVal eventArgument As String) _\n    Implements IPostBackEventHandler.RaisePostBackEvent\n    \n    Label1.Text = &quot;Postback handled by &quot; &amp; Me.ID.ToString() &amp; &quot;. &lt;br/&gt;&quot; &amp; _\n           &quot;Postback caused by &quot; + eventArgument.ToString() &amp; &quot;.&quot;\n  \n  End Sub\n  \n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n    \n    &#39; Create a button element with its onClick attribute defined\n    &#39; to create a postback event reference to the custom label control.\n    Dim b As New HtmlInputButton()\n    b.ID = &quot;mybutton1&quot;\n    b.Value = &quot;Click&quot;\n    b.Attributes.Add(&quot;onclick&quot;, cs.GetPostBackEventReference(Me, b.ID.ToString()))\n    PlaceHolder1.Controls.Add(b)\n    PlaceHolder1.Controls.Add(New LiteralControl(&quot;&lt;br/&gt;&quot;))\n    \n    &#39; Create a link element with its href attribute defined\n    &#39; to create a postback event reference to the custom label control.\n    Dim a As New HtmlAnchor()\n    a.ID = &quot;myanchor1&quot;\n    a.InnerText = &quot;link&quot;\n    a.HRef = cs.GetPostBackClientHyperlink(Me, a.ID.ToString())\n    PlaceHolder1.Controls.Add(a)\n    \n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:Label id=&quot;Label1&quot;\n                 runat=&quot;server&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:PlaceHolder id=&quot;PlaceHolder1&quot; \n                       runat=&quot;server&quot;&gt;\n      &lt;/asp:PlaceHolder&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_PostBackOptions_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetPostBackEventReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPostBackEventReference(PostBackOptions,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> object. Optionally, registers the event reference for validation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> that defines the postback.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>registerForEventValidation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to register the event reference for validation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that, when treated as script on the client, initiates the client postback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To implement the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface for a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object, use the  directive.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method can be used with the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control when the <a class=\"xref\" href=\"system.web.ui.webcontrols.button#System_Web_UI_WebControls_Button_UseSubmitBehavior_\" data-linktype=\"relative-path\">UseSubmitBehavior</a> property is <code>false</code>. In this scenario, the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method returns the client postback event for the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control.  </p>\n<p> If <code>registerForEventValidation</code> is <code>true</code>, the GetPostBackEventReference method calls the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterForEventValidation_System_String_System_String_\" data-linktype=\"relative-path\">RegisterForEventValidation(String,String)</a> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_Control_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetPostBackEventReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPostBackEventReference(Control,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string to use in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information. Optionally, registers the event reference for validation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The server <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> that processes the postback on the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string of optional arguments to pass to <code>control</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>registerForEventValidation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to register the event reference for validation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that, when treated as script on the client, initiates the postback.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The specified <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To implement the <a class=\"xref\" href=\"system.web.ui.ipostbackeventhandler\" data-linktype=\"relative-path\">IPostBackEventHandler</a> interface for a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a>, use the  directive.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method can be used with the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control when the <a class=\"xref\" href=\"system.web.ui.webcontrols.button#System_Web_UI_WebControls_Button_UseSubmitBehavior_\" data-linktype=\"relative-path\">UseSubmitBehavior</a> property is <code>false</code>. In this scenario, the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_\" data-linktype=\"relative-path\">GetPostBackEventReference</a> method returns the client postback event for the <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control.  </p>\n<p> If <code>registerForEventValidation</code> is true, the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_GetPostBackEventReference_System_Web_UI_PostBackOptions_System_Boolean_\" data-linktype=\"relative-path\">GetPostBackEventReference(PostBackOptions,Boolean)</a> method calls the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterForEventValidation_System_String_System_String_\" data-linktype=\"relative-path\">RegisterForEventValidation(String,String)</a> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_GetWebResourceUrl_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_GetWebResourceUrl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetWebResourceUrl(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a URL reference to a resource in an assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetWebResourceUrl (Type type, string resourceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the resource in the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The URL reference to the resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The web resource name is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> The web resource name has a length of zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetWebResourceUrl method returns a URL reference to a resource embedded in an assembly. The returned reference is not URL encoded. Resources can be script files, images, or any static file. You specify the type based on the object that will be accessing the resource.  </p>\n<p> A Web resource registered with the page is uniquely identified by its type and name. Only one resource with a given type and name pair can be registered with the page. Attempting to register a resource that is already registered does not create a duplicate of the registered resource.  </p>\n<p> The GetWebResourceUrl method is used in conjunction with the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptResource_\" data-linktype=\"relative-path\">RegisterClientScriptResource</a> method for accessing resources embedded in assemblies. For more information on using resources in applications, see <a href=\"../Topic/ASP.NET%20Web%20Page%20Resources%20Overview.md\" data-linktype=\"relative-path\">ASP.NET Web Page Resources Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the GetWebResourceUrl method. The <em>type</em> parameter in this example is set to the type of class in the assembly containing the resource. The <code>resourceName</code> parameter is specified with the fully qualified path to the resource, which includes the default namespace.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager4#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the resource name and type.\n    Dim rsname As String = &quot;Samples.AspNet.VB.Controls.script_include.js&quot;\n    Dim rstype As Type = GetType(ClientScriptResourceLabel)\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n    \n    &#39; Write out the web resource url.\n    ResourcePath.InnerHtml = cs.GetWebResourceUrl(rstype, rsname)\n    \n    &#39; Register the client resource with the page.\n    cs.RegisterClientScriptResource(rstype, rsname)\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     The web resource path is \n     &lt;span  id=&quot;ResourcePath&quot;\n            runat=&quot;server&quot;/&gt;.\n     &lt;br /&gt;\n     &lt;br /&gt;\n     &lt;input type=&quot;text&quot; \n            id=&quot;Message&quot; /&gt;     \n     &lt;input type=&quot;button&quot; \n            onclick=&quot;DoClick()&quot; \n            value=&quot;ClientClick&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager4#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;%@ Import Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n \n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the resource name and type.\n    String rsname = &quot;Samples.AspNet.CS.Controls.script_include.js&quot;;\n    Type rstype = typeof(ClientScriptResourceLabel);\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Write out the web resource url.\n    ResourcePath.InnerHtml = cs.GetWebResourceUrl(rstype, rsname);\n\n    // Register the client resource with the page.\n    cs.RegisterClientScriptResource(rstype, rsname);\n\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     The web resource path is \n     &lt;span  id=&quot;ResourcePath&quot;\n            runat=&quot;server&quot;/&gt;.\n     &lt;br /&gt;\n     &lt;br /&gt;\n     &lt;input type=&quot;text&quot; \n            id=&quot;Message&quot; /&gt;     \n     &lt;input type=&quot;button&quot; \n            onclick=&quot;DoClick()&quot; \n            value=&quot;ClientClick&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example demonstrates how to programmatically apply the <a class=\"xref\" href=\"system.web.ui.webresourceattribute\" data-linktype=\"relative-path\">WebResourceAttribute</a> metadata attribute to mark the assembly for the resources that will be served. Compile the following class in a class library with a default namespace set to <code>Samples.AspNet.CS.Controls</code> or <code>Samples.AspNet.VB.Controls</code>, depending on what language you are using.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager4#2\">Imports Microsoft.VisualBasic\nImports System\nImports System.Web\nImports System.Web.UI\nImports System.Security.Permissions\n\n&lt;Assembly: WebResource(&quot;Samples.AspNet.VB.Controls.script_include.js&quot;, &quot;application/x-javascript&quot;)&gt; \nNamespace Samples.AspNet.VB.Controls\n\n    &lt;AspNetHostingPermission(SecurityAction.Demand, Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n    Public Class ClientScriptResourceLabel\n\n        &#39; Class code goes here.\n\n    End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager4#2\">using System;\nusing System.Web;\nusing System.Web.UI;\nusing System.Security.Permissions;\n\n[assembly: WebResource(&quot;Samples.AspNet.CS.Controls.script_include.js&quot;, &quot;application/x-javascript&quot;)]\nnamespace Samples.AspNet.CS.Controls\n{\n\t[AspNetHostingPermission(SecurityAction.Demand, Level = AspNetHostingPermissionLevel.Minimal)]\n\tpublic class ClientScriptResourceLabel\n\t{\n\t\t// Class code goes here.\n\n\t}\n\t \n}\n</code></pre><p> This example requires a JavaScript file named <code>Script_include.js</code>. The .js file is an embedded resource in the assembly that contains the <code>ClientScriptResourceLabel</code> object. If you are using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vs-current-short-md.md&quot; -->Visual Studio<!--END INCLUDE -->, in the Properties window of the class library project, set <strong>Build Action</strong> to <strong>Embedded Resource</strong> when the script file is selected. If you are compiling the library at the command line, use the  switch to embed the resource.  </p>\n<pre><code>function DoClick() {Form1.Message.value=&#39;Text from resource script.&#39;}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsClientScriptBlockRegistered(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the client script block is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsClientScriptBlockRegistered (string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the client script block to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the client script block is registered; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\" data-linktype=\"relative-path\">RegisterClientScriptBlock</a> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  </p>\n<p> A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.  </p>\n<p> This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_\" data-linktype=\"relative-path\">IsClientScriptBlockRegistered</a> method calls the overload that takes both a <code>key</code> and a <code>type</code> parameter with the type set as a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager1#2\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client scripts on the page.\n    String csname1 = &quot;PopupScript&quot;;\n    String csname2 = &quot;ButtonClickScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the startup script is already registered.\n    if (!cs.IsStartupScriptRegistered(cstype, csname1))\n    {\n      String cstext1 = &quot;alert(&#39;Hello World&#39;);&quot;;\n      cs.RegisterStartupScript(cstype, csname1, cstext1);\n    }\n\n    // Check to see if the client script is already registered.\n    if (!cs.IsClientScriptBlockRegistered(cstype, csname2))\n    {\n      StringBuilder cstext2 = new StringBuilder();\n      cstext2.Append(&quot;&lt;script type=\\&quot;text/javascript\\&quot;&gt; function DoClick() {&quot;);\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;);\n      cstext2.Append(&quot;script&gt;&quot;);\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString());\n    }\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager1#2\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the name and type of the client scripts on the page.\n    Dim csname1 As String = &quot;PopupScript&quot;\n    Dim csname2 As String = &quot;ButtonClickScript&quot;\n    Dim cstype As Type = Me.GetType()\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Check to see if the startup script is already registered.\n    If (Not cs.IsStartupScriptRegistered(cstype, csname1)) Then\n      \n      Dim cstext1 As String = &quot;alert(&#39;Hello World&#39;);&quot;\n            cs.RegisterStartupScript(cstype, csname1, cstext1)\n      \n    End If\n    \n    &#39; Check to see if the client script is already registered.\n    If (Not cs.IsClientScriptBlockRegistered(cstype, csname2)) Then\n      \n      Dim cstext2 As New StringBuilder()\n            cstext2.Append(&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt; function DoClick() {&quot;)\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;)\n      cstext2.Append(&quot;script&gt;&quot;)\n            cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString())\n      \n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsClientScriptBlockRegistered(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the client script block is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a key and type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsClientScriptBlockRegistered (Type type, string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the client script block to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the client script block to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the client script block is registered; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The client script type is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\" data-linktype=\"relative-path\">RegisterClientScriptBlock</a> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  </p>\n<p> A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a <code>Page</code> instance to access the resource, you specify the <code>Page</code> type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the IsClientScriptBlockRegistered method. Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\" data-linktype=\"relative-path\">RegisterClientScriptBlock</a> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager1#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client scripts on the page.\n    String csname1 = &quot;PopupScript&quot;;\n    String csname2 = &quot;ButtonClickScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the startup script is already registered.\n    if (!cs.IsStartupScriptRegistered(cstype, csname1))\n    {\n      String cstext1 = &quot;alert(&#39;Hello World&#39;);&quot;;\n      cs.RegisterStartupScript(cstype, csname1, cstext1, true);\n    }\n\n    // Check to see if the client script is already registered.\n    if (!cs.IsClientScriptBlockRegistered(cstype, csname2))\n    {\n      StringBuilder cstext2 = new StringBuilder();\n      cstext2.Append(&quot;&lt;script type=\\&quot;text/javascript\\&quot;&gt; function DoClick() {&quot;);\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;);\n      cstext2.Append(&quot;script&gt;&quot;);\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString(), false);\n    }\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager1#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the name and type of the client scripts on the page.\n    Dim csname1 As String = &quot;PopupScript&quot;\n    Dim csname2 As String = &quot;ButtonClickScript&quot;\n    Dim cstype As Type = Me.GetType()\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Check to see if the startup script is already registered.\n    If (Not cs.IsStartupScriptRegistered(cstype, csname1)) Then\n      \n      Dim cstext1 As String = &quot;alert(&#39;Hello World&#39;);&quot;\n      cs.RegisterStartupScript(cstype, csname1, cstext1, True)\n      \n    End If\n    \n    &#39; Check to see if the client script is already registered.\n    If (Not cs.IsClientScriptBlockRegistered(cstype, csname2)) Then\n      \n      Dim cstext2 As New StringBuilder()\n            cstext2.Append(&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt; function DoClick() {&quot;)\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;)\n      cstext2.Append(&quot;script&gt;&quot;)\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString(), False)\n      \n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_IsClientScriptIncludeRegistered_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_IsClientScriptIncludeRegistered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsClientScriptIncludeRegistered(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the client script include is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsClientScriptIncludeRegistered (string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the client script include to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the client script include is registered; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\" data-linktype=\"relative-path\">RegisterClientScriptInclude</a> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  </p>\n<p> A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.  </p>\n<p> This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_\" data-linktype=\"relative-path\">IsStartupScriptRegistered</a> method calls the overload that takes both a <code>key</code> and a <code>type</code> parameter with the type set as a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_IsClientScriptIncludeRegistered_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_IsClientScriptIncludeRegistered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsClientScriptIncludeRegistered(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the client script include is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a key and type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsClientScriptIncludeRegistered (Type type, string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the client script include to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the client script include to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the client script include is registered; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The client script include type is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\" data-linktype=\"relative-path\">RegisterClientScriptInclude</a> method to avoid registering duplicate client script includes. This is particularly important if the script requires a large amount of server resources to create.  </p>\n<p> A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a Page instance to access the resource, you specify the <code>Page</code> type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the IsClientScriptIncludeRegistered method. Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\" data-linktype=\"relative-path\">RegisterClientScriptInclude</a> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager2#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    public void Page_Load(Object sender, EventArgs e)\n    {\n        // Define the name, type and url of the client script on the page.\n        String csname = &quot;ButtonClickScript&quot;;\n        String csurl = &quot;~/script_include.js&quot;;\n        Type cstype = this.GetType();\n\n        // Get a ClientScriptManager reference from the Page class.\n        ClientScriptManager cs = Page.ClientScript;\n\n        // Check to see if the include script exists already.\n        if (!cs.IsClientScriptIncludeRegistered(cstype, csname))\n        {\n            cs.RegisterClientScriptInclude(cstype, csname, ResolveClientUrl(csurl));\n        }\n\n    }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n     &lt;div&gt;\n        &lt;input type=&quot;text&quot;\n               id=&quot;Message&quot;/&gt; \n        &lt;input type=&quot;button&quot; \n               value=&quot;ClickMe&quot;\n               onclick=&quot;DoClick()&quot;/&gt;\n     &lt;/div&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager2#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n        &#39; Define the name, type and url of the client script on the page.\n        Dim csname As String = &quot;ButtonClickScript&quot;\n        Dim csurl As String = &quot;~/script_include.js&quot;\n        Dim cstype As Type = Me.GetType()\n    \n        &#39; Get a ClientScriptManager reference from the Page class.\n        Dim cs As ClientScriptManager = Page.ClientScript\n    \n        &#39; Check to see if the include script is already registered.\n        If (Not cs.IsClientScriptIncludeRegistered(cstype, csname)) Then\n      \n            cs.RegisterClientScriptInclude(cstype, csname, ResolveClientUrl(csurl))\n      \n        End If\n    \n    End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n     &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n     &lt;div&gt;\n        &lt;input type=&quot;text&quot;\n               id=&quot;Message&quot;/&gt; \n        &lt;input type=&quot;button&quot; \n               value=&quot;ClickMe&quot;\n               onclick=&quot;DoClick()&quot;/&gt;\n     &lt;/div&gt;\n     &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> This example requires a JavaScript file named <code>Script_include.js</code>, with the following contents:  </p>\n<pre><code>function DoClick() {Form1.Message.value=&#39;Text from include script.&#39;}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_IsOnSubmitStatementRegistered_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_IsOnSubmitStatementRegistered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsOnSubmitStatementRegistered(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the OnSubmit statement is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsOnSubmitStatementRegistered (string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the OnSubmit statement to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the OnSubmit statement is registered; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterOnSubmitStatement_\" data-linktype=\"relative-path\">RegisterOnSubmitStatement</a> method to avoid registering duplicate OnSubmit statements. This is particularly important if the statement requires a large amount of server resources to create.  </p>\n<p> A statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates.  </p>\n<p> This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsOnSubmitStatementRegistered_\" data-linktype=\"relative-path\">IsOnSubmitStatementRegistered</a> method calls the overload that takes both a <code>key</code> and a <code>type</code> parameter with the type set as a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_IsOnSubmitStatementRegistered_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_IsOnSubmitStatementRegistered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsOnSubmitStatementRegistered(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the OnSubmit statement is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key and type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsOnSubmitStatementRegistered (Type type, string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the OnSubmit statement to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the OnSubmit statement to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the OnSubmit statement is registered; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The OnSubmit statement type is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterOnSubmitStatement_\" data-linktype=\"relative-path\">RegisterOnSubmitStatement</a> method to avoid registering duplicate statements. This is particularly important if the statement requires a large amount of server resources to create.  </p>\n<p> A statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a <code>Page</code> instance to access the resource, you specify the <code>Page</code> type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the IsOnSubmitStatementRegistered method. A script named <code>OnSubmitScript</code> is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> so that when the page&#39;s form is submitted the script is invoked.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager3#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the name and type of the client script on the page.\n    Dim csname As String = &quot;OnSubmitScript&quot;\n    Dim cstype As Type = Me.GetType()\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n    \n    &#39; Check to see if the OnSubmit statement is already registered.\n    If (Not cs.IsOnSubmitStatementRegistered(cstype, csname)) Then\n      \n      Dim cstext As String = &quot;document.write(&#39;Text from OnSubmit statement.&#39;);&quot;\n      cs.RegisterOnSubmitStatement(cstype, csname, cstext)\n      \n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;input type=&quot;submit&quot;\n            value=&quot;Submit&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager3#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client script on the page.\n    String csname = &quot;OnSubmitScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the OnSubmit statement is already registered.\n    if (!cs.IsOnSubmitStatementRegistered(cstype, csname))\n    {\n      String cstext = &quot;document.write(&#39;Text from OnSubmit statement&#39;);&quot;;\n      cs.RegisterOnSubmitStatement(cstype, csname, cstext);\n    }\n\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;input type=&quot;submit&quot;\n            value=&quot;Submit&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStartupScriptRegistered(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the startup script is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsStartupScriptRegistered (string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the startup script to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the startup script is registered; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  </p>\n<p> A startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.  </p>\n<p> This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_\" data-linktype=\"relative-path\">IsStartupScriptRegistered</a> method calls the overload that takes both a string <code>key</code> and a <code>type</code> parameter with the type set as a <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStartupScriptRegistered(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the startup script is registered with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using the specified key and type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsStartupScriptRegistered (Type type, string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the startup script to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the startup script to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the startup script is registered; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The startup script type is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  </p>\n<p> A client startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the IsStartupScriptRegistered method. Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager1#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client scripts on the page.\n    String csname1 = &quot;PopupScript&quot;;\n    String csname2 = &quot;ButtonClickScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the startup script is already registered.\n    if (!cs.IsStartupScriptRegistered(cstype, csname1))\n    {\n      String cstext1 = &quot;alert(&#39;Hello World&#39;);&quot;;\n      cs.RegisterStartupScript(cstype, csname1, cstext1, true);\n    }\n\n    // Check to see if the client script is already registered.\n    if (!cs.IsClientScriptBlockRegistered(cstype, csname2))\n    {\n      StringBuilder cstext2 = new StringBuilder();\n      cstext2.Append(&quot;&lt;script type=\\&quot;text/javascript\\&quot;&gt; function DoClick() {&quot;);\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;);\n      cstext2.Append(&quot;script&gt;&quot;);\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString(), false);\n    }\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager1#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the name and type of the client scripts on the page.\n    Dim csname1 As String = &quot;PopupScript&quot;\n    Dim csname2 As String = &quot;ButtonClickScript&quot;\n    Dim cstype As Type = Me.GetType()\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Check to see if the startup script is already registered.\n    If (Not cs.IsStartupScriptRegistered(cstype, csname1)) Then\n      \n      Dim cstext1 As String = &quot;alert(&#39;Hello World&#39;);&quot;\n      cs.RegisterStartupScript(cstype, csname1, cstext1, True)\n      \n    End If\n    \n    &#39; Check to see if the client script is already registered.\n    If (Not cs.IsClientScriptBlockRegistered(cstype, csname2)) Then\n      \n      Dim cstext2 As New StringBuilder()\n            cstext2.Append(&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt; function DoClick() {&quot;)\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;)\n      cstext2.Append(&quot;script&gt;&quot;)\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString(), False)\n      \n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterArrayDeclaration_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterArrayDeclaration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterArrayDeclaration(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a JavaScript array declaration with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using an array name and array value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterArrayDeclaration (string arrayName, string arrayValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array name to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array value or values to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>arrayName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RegisterArrayDeclaration checks to see whether a registered array exists with the same name as the name specified in the <code>arrayName</code> parameter and, if so, adds the values specified in the <code>arrayValue</code> parameter. Because the underlying storage mechanism is based on an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>, duplicates are allowed. If a registered array with the same name as the <code>arrayName</code> parameter does not exist, it is created and the values in the <code>arrayValue</code> parameter added to it.  </p>\n<p> If you want string literals in the resulting JavaScript array, include single quotation marks (&#39;) or escaped double quotation marks (\\&quot;) in the <code>arrayValue</code> parameter. The value of the <code>arrayValue</code> parameter should be a single element. If more than one value needs to be added to the array, make multiple calls using the RegisterArrayDeclaration method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RegisterArrayDeclaration and <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterHiddenField_\" data-linktype=\"relative-path\">RegisterHiddenField</a> methods. The example registers an array and a hidden value and defines the <code>OnClick</code> event of an <code>&lt;input&gt;</code> button to calculate the sum of two values of the array and the hidden value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager5#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n \n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the array name and values.\n    String arrName = &quot;MyArray&quot;;\n    String arrValue = &quot;\\&quot;1\\&quot;, \\&quot;2\\&quot;, \\&quot;text\\&quot;&quot;;\n    \n    // Define the hidden field name and initial value.\n    String hiddenName = &quot;MyHiddenField&quot;;\n    String hiddenValue = &quot;3&quot;;\n    \n    // Define script name and type.\n    String csname = &quot;ConcatScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Register the array with the Page class.\n    cs.RegisterArrayDeclaration(arrName, arrValue);\n\n    // Register the hidden field with the Page class.\n    cs.RegisterHiddenField(hiddenName, hiddenValue);\n\n    // Check to see if the  script is already registered.\n    if (!cs.IsClientScriptBlockRegistered(cstype, csname))\n    {\n      StringBuilder cstext = new StringBuilder();\n      cstext.Append(&quot;&lt;script type=\\&quot;text/javascript\\&quot;&gt; function DoClick() {&quot;); \n      cstext.Append(&quot;Form1.Message.value=&#39;Sum = &#39; + &quot;);\n      cstext.Append(&quot;(parseInt(&quot; + arrName + &quot;[0])+&quot;);\n      cstext.Append(&quot;parseInt(&quot; + arrName + &quot;[1])+&quot;);\n      cstext.Append(&quot;parseInt(&quot; + Form1.Name + &quot;.&quot; + hiddenName + &quot;.value));} &lt;/&quot;);\n      cstext.Append(&quot;script&gt;&quot;);\n      cs.RegisterClientScriptBlock(cstype, csname, cstext.ToString(), false);\n    }\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;input type=&quot;text&quot;\n            id=&quot;Message&quot; /&gt;\n     &lt;input type=&quot;button&quot; \n            onclick=&quot;DoClick()&quot; \n            value=&quot;Run Script&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager5#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the array name and values.\n    Dim arrName As String = &quot;MyArray&quot;\n    Dim arrValue As String = &quot;&quot;&quot;1&quot;&quot;, &quot;&quot;2&quot;&quot;, &quot;&quot;text&quot;&quot;&quot;\n    \n    &#39; Define the hidden field name and initial value.\n    Dim hiddenName As String = &quot;MyHiddenField&quot;\n    Dim hiddenValue As String = &quot;3&quot;\n    \n    &#39; Define script name and type.\n    Dim csname As String = &quot;ConcatScript&quot;\n    Dim cstype As Type = Me.GetType()\n        \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Register the array with the Page class.\n    cs.RegisterArrayDeclaration(arrName, arrValue)\n    \n    &#39; Register the hidden field with the Page class.\n    cs.RegisterHiddenField(hiddenName, hiddenValue)\n\n    &#39; Check to see if the  script is already registered.\n    If (Not cs.IsClientScriptBlockRegistered(cstype, csname)) Then\n      Dim cstext As StringBuilder = New StringBuilder()\n      cstext.Append(&quot;&lt;script type=&quot;&quot;text/javascript\\&quot;&quot;&gt; function DoClick() {&quot;)\n      cstext.Append(&quot;Form1.Message.value=&#39;Sum = &#39; + &quot;)\n      cstext.Append(&quot;(parseInt(&quot; + arrName + &quot;[0])+&quot;)\n      cstext.Append(&quot;parseInt(&quot; + arrName + &quot;[1])+&quot;)\n      cstext.Append(&quot;parseInt(&quot; + Form1.Name + &quot;.&quot; + hiddenName + &quot;.value));} &lt;/&quot;)\n      cstext.Append(&quot;script&gt;&quot;)\n      cs.RegisterClientScriptBlock(cstype, csname, cstext.ToString(), False)\n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;input type=&quot;text&quot;\n            id=&quot;Message&quot; /&gt;\n     &lt;input type=&quot;button&quot; \n            onclick=&quot;DoClick()&quot; \n            value=&quot;Run Script&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_System_Type_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterClientScriptBlock(Type,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers the client script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, key, and script literal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterClientScriptBlock (Type type, string key, string script);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the client script to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the client script to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>script</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client script literal to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  </p>\n<p> Call the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_\" data-linktype=\"relative-path\">IsClientScriptBlockRegistered</a> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.  </p>\n<p> In this overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\" data-linktype=\"relative-path\">RegisterClientScriptBlock</a> method, you must make sure that the script provided in the <code>script</code> parameter is wrapped in a <code>&lt;script&gt;</code> element block.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\" data-linktype=\"relative-path\">RegisterClientScriptBlock</a> method adds a script block to the top of the rendered page. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to gather the scripts together in a single string, and then register them all in a single client script block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RegisterClientScriptBlock method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager12#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client script on the page.\n    String csName = &quot;ButtonClickScript&quot;;\n    Type csType = this.GetType();\n\n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the client script is already registered.\n    if (!cs.IsClientScriptBlockRegistered(csType, csName))\n    {\n      StringBuilder csText = new StringBuilder();\n      csText.Append(&quot;&lt;script type=\\&quot;text/javascript\\&quot;&gt; function DoClick() {&quot;);\n      csText.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;);\n      csText.Append(&quot;script&gt;&quot;);\n      cs.RegisterClientScriptBlock(csType, csName, csText.ToString());\n    }\n  }\n&lt;/script&gt;\n&lt;html  &gt;\n  &lt;head&gt;\n    &lt;title&gt;RegisterClientScriptBlock Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager12#1\">&lt;%@ Page Language=&quot;VB&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n    Public Sub Page_Load(ByVal sender As [Object], ByVal e As EventArgs)\n        &#39; Define the name and type of the client script on the page. \n        Dim csName As [String] = &quot;ButtonClickScript&quot;\n        Dim csType As Type = Me.[GetType]()\n        \n        &#39; Get a ClientScriptManager reference from the Page class. \n        Dim cs As ClientScriptManager = Page.ClientScript\n        \n        &#39; Check to see if the client script is already registered. \n        If Not cs.IsClientScriptBlockRegistered(csType, csName) Then\n            Dim csText As New StringBuilder()\n            csText.Append(&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt; function DoClick() {&quot;)\n            csText.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;)\n            csText.Append(&quot;script&gt;&quot;)\n            cs.RegisterClientScriptBlock(csType, csName, csText.ToString())\n        End If\n    End Sub\n&lt;/script&gt;\n&lt;html  &gt;\n  &lt;head&gt;\n    &lt;title&gt;RegisterClientScriptBlock Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_System_Type_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterClientScriptBlock(Type,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Registers the client script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the client script to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the client script to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>script</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client script literal to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>addScriptTags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value indicating whether to add script tags.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The client script block type is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  </p>\n<p> Call the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsClientScriptBlockRegistered_\" data-linktype=\"relative-path\">IsClientScriptBlockRegistered</a> method to determine whether a client script with a given key and type pair is already registered. This lets you avoid unnecessarily attempting to add the script.  </p>\n<p> In this overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\" data-linktype=\"relative-path\">RegisterClientScriptBlock</a> method, you can indicate whether the script provided in the <code>script</code> parameter is wrapped with a <code>&lt;script&gt;</code> element block by using the <code>addScriptTags</code> parameter. Setting <code>addScriptTags</code> to <code>true</code> indicates that script tags will be added automatically.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptBlock_\" data-linktype=\"relative-path\">RegisterClientScriptBlock</a> method adds a script block to the top of the rendered page. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to gather the scripts together in a single string, and then register them all in a single client script block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RegisterClientScriptBlock method. Note that the <code>addScriptTags</code> parameter is set to <code>true</code> so the beginning and closing script tags are not included with the <code>script</code> parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager1#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client scripts on the page.\n    String csname1 = &quot;PopupScript&quot;;\n    String csname2 = &quot;ButtonClickScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the startup script is already registered.\n    if (!cs.IsStartupScriptRegistered(cstype, csname1))\n    {\n      String cstext1 = &quot;alert(&#39;Hello World&#39;);&quot;;\n      cs.RegisterStartupScript(cstype, csname1, cstext1, true);\n    }\n\n    // Check to see if the client script is already registered.\n    if (!cs.IsClientScriptBlockRegistered(cstype, csname2))\n    {\n      StringBuilder cstext2 = new StringBuilder();\n      cstext2.Append(&quot;&lt;script type=\\&quot;text/javascript\\&quot;&gt; function DoClick() {&quot;);\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;);\n      cstext2.Append(&quot;script&gt;&quot;);\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString(), false);\n    }\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager1#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the name and type of the client scripts on the page.\n    Dim csname1 As String = &quot;PopupScript&quot;\n    Dim csname2 As String = &quot;ButtonClickScript&quot;\n    Dim cstype As Type = Me.GetType()\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Check to see if the startup script is already registered.\n    If (Not cs.IsStartupScriptRegistered(cstype, csname1)) Then\n      \n      Dim cstext1 As String = &quot;alert(&#39;Hello World&#39;);&quot;\n      cs.RegisterStartupScript(cstype, csname1, cstext1, True)\n      \n    End If\n    \n    &#39; Check to see if the client script is already registered.\n    If (Not cs.IsClientScriptBlockRegistered(cstype, csname2)) Then\n      \n      Dim cstext2 As New StringBuilder()\n            cstext2.Append(&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt; function DoClick() {&quot;)\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;)\n      cstext2.Append(&quot;script&gt;&quot;)\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString(), False)\n      \n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterClientScriptInclude(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers the client script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a key and a URL, which enables the script to be called from the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterClientScriptInclude (string key, string url);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the client script include to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL of the client script include to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  </p>\n<p> Call the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsClientScriptIncludeRegistered_\" data-linktype=\"relative-path\">IsClientScriptIncludeRegistered</a> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To resolve the client URL, use the <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ResolveClientUrl_\" data-linktype=\"relative-path\">ResolveClientUrl</a> method. This method uses the context of the URL on which it is called to resolve the path.  </p>\n</div>\n<p> This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\" data-linktype=\"relative-path\">RegisterClientScriptInclude</a> method calls the overload that takes a <code>key</code>, a <code>URL</code>, and a <code>type</code> parameter.  </p>\n<p> The method adds a script block at the top of the rendered page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>For related information, including syntax, usage, and an example, see <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\" data-linktype=\"relative-path\">RegisterClientScriptInclude</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_System_Type_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterClientScriptInclude(Type,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers the client script include with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, a key, and a URL.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterClientScriptInclude (Type type, string key, string url);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the client script include to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the client script include to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL of the client script include to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The client script include type is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The URL is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> The URL is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\" data-linktype=\"relative-path\">RegisterClientScriptInclude</a> method takes <em>key</em> and <em>url</em> parameters to identify the script, as well as a <code>type</code> parameter to specify the identification of the client script include. You specify the type based on the object that will be accessing the resource. For instance, when using a <code>Page</code> instance to access the resource, you specify the <code>Page</code> type.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To resolve the client URL, use the <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ResolveClientUrl_\" data-linktype=\"relative-path\">ResolveClientUrl</a> method. This method uses the context of the URL on which it is called to resolve the path.  </p>\n</div>\n<p> This method adds a script block at the top of the rendered page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RegisterClientScriptInclude method. Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterClientScriptInclude_\" data-linktype=\"relative-path\">RegisterClientScriptInclude</a> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager2#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    public void Page_Load(Object sender, EventArgs e)\n    {\n        // Define the name, type and url of the client script on the page.\n        String csname = &quot;ButtonClickScript&quot;;\n        String csurl = &quot;~/script_include.js&quot;;\n        Type cstype = this.GetType();\n\n        // Get a ClientScriptManager reference from the Page class.\n        ClientScriptManager cs = Page.ClientScript;\n\n        // Check to see if the include script exists already.\n        if (!cs.IsClientScriptIncludeRegistered(cstype, csname))\n        {\n            cs.RegisterClientScriptInclude(cstype, csname, ResolveClientUrl(csurl));\n        }\n\n    }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n     &lt;div&gt;\n        &lt;input type=&quot;text&quot;\n               id=&quot;Message&quot;/&gt; \n        &lt;input type=&quot;button&quot; \n               value=&quot;ClickMe&quot;\n               onclick=&quot;DoClick()&quot;/&gt;\n     &lt;/div&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager2#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n        &#39; Define the name, type and url of the client script on the page.\n        Dim csname As String = &quot;ButtonClickScript&quot;\n        Dim csurl As String = &quot;~/script_include.js&quot;\n        Dim cstype As Type = Me.GetType()\n    \n        &#39; Get a ClientScriptManager reference from the Page class.\n        Dim cs As ClientScriptManager = Page.ClientScript\n    \n        &#39; Check to see if the include script is already registered.\n        If (Not cs.IsClientScriptIncludeRegistered(cstype, csname)) Then\n      \n            cs.RegisterClientScriptInclude(cstype, csname, ResolveClientUrl(csurl))\n      \n        End If\n    \n    End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n     &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n     &lt;div&gt;\n        &lt;input type=&quot;text&quot;\n               id=&quot;Message&quot;/&gt; \n        &lt;input type=&quot;button&quot; \n               value=&quot;ClickMe&quot;\n               onclick=&quot;DoClick()&quot;/&gt;\n     &lt;/div&gt;\n     &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> This example requires a JavaScript file named Script_include.js with the following contents:  </p>\n<pre><code>function DoClick() {Form1.Message.value=&#39;Text from include script.&#39;}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptResource_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterClientScriptResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterClientScriptResource(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers the client script resource with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type and a resource name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterClientScriptResource (Type type, string resourceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the client script resource to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the client script resource to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The client resource name is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> The client resource name has a length of zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RegisterClientScriptResource method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler. The RegisterClientScriptResource method registers the script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object and prevents duplicate scripts. This method wraps the contents of the resource URL with a <code>&lt;script&gt;</code> element block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RegisterClientScriptResource method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager4#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the resource name and type.\n    Dim rsname As String = &quot;Samples.AspNet.VB.Controls.script_include.js&quot;\n    Dim rstype As Type = GetType(ClientScriptResourceLabel)\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n    \n    &#39; Write out the web resource url.\n    ResourcePath.InnerHtml = cs.GetWebResourceUrl(rstype, rsname)\n    \n    &#39; Register the client resource with the page.\n    cs.RegisterClientScriptResource(rstype, rsname)\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     The web resource path is \n     &lt;span  id=&quot;ResourcePath&quot;\n            runat=&quot;server&quot;/&gt;.\n     &lt;br /&gt;\n     &lt;br /&gt;\n     &lt;input type=&quot;text&quot; \n            id=&quot;Message&quot; /&gt;     \n     &lt;input type=&quot;button&quot; \n            onclick=&quot;DoClick()&quot; \n            value=&quot;ClientClick&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager4#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;%@ Import Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n \n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the resource name and type.\n    String rsname = &quot;Samples.AspNet.CS.Controls.script_include.js&quot;;\n    Type rstype = typeof(ClientScriptResourceLabel);\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Write out the web resource url.\n    ResourcePath.InnerHtml = cs.GetWebResourceUrl(rstype, rsname);\n\n    // Register the client resource with the page.\n    cs.RegisterClientScriptResource(rstype, rsname);\n\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     The web resource path is \n     &lt;span  id=&quot;ResourcePath&quot;\n            runat=&quot;server&quot;/&gt;.\n     &lt;br /&gt;\n     &lt;br /&gt;\n     &lt;input type=&quot;text&quot; \n            id=&quot;Message&quot; /&gt;     \n     &lt;input type=&quot;button&quot; \n            onclick=&quot;DoClick()&quot; \n            value=&quot;ClientClick&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example demonstrates how to programmatically apply the <a class=\"xref\" href=\"system.web.ui.webresourceattribute\" data-linktype=\"relative-path\">WebResourceAttribute</a> metadata attribute to mark the assembly for the resources that will be served.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager4#2\">Imports Microsoft.VisualBasic\nImports System\nImports System.Web\nImports System.Web.UI\nImports System.Security.Permissions\n\n&lt;Assembly: WebResource(&quot;Samples.AspNet.VB.Controls.script_include.js&quot;, &quot;application/x-javascript&quot;)&gt; \nNamespace Samples.AspNet.VB.Controls\n\n    &lt;AspNetHostingPermission(SecurityAction.Demand, Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n    Public Class ClientScriptResourceLabel\n\n        &#39; Class code goes here.\n\n    End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager4#2\">using System;\nusing System.Web;\nusing System.Web.UI;\nusing System.Security.Permissions;\n\n[assembly: WebResource(&quot;Samples.AspNet.CS.Controls.script_include.js&quot;, &quot;application/x-javascript&quot;)]\nnamespace Samples.AspNet.CS.Controls\n{\n\t[AspNetHostingPermission(SecurityAction.Demand, Level = AspNetHostingPermissionLevel.Minimal)]\n\tpublic class ClientScriptResourceLabel\n\t{\n\t\t// Class code goes here.\n\n\t}\n\t \n}\n</code></pre><p> This example requires a JavaScript file named <code>Script_include.js</code>, with the following contents:  </p>\n<pre><code>function DoClick() {Form1.Message.value=&#39;Text from resource script.&#39;}\n</code></pre><p> Compile the <code>Script_include.js</code> file as a resource in the <code>Samples.AspNet.CS.Controls</code> assembly that contains the <code>ClientScriptResourceLabel</code> class.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterExpandoAttribute_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterExpandoAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterExpandoAttribute(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>controlId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> on the page that contains the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the custom attribute to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a>. The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control&#39;s markup. Quotes and backslashes in the custom (expando) attribute&#39;s values are escaped. If you do not want to escape quotes and backslashes, call the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterExpandoAttribute_\" data-linktype=\"relative-path\">RegisterExpandoAttribute</a> overload method and set the <code>encode</code> parameter to <code>false</code>.  </p>\n<p> If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterExpandoAttribute_System_String_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterExpandoAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterExpandoAttribute(String,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>controlId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> on the page that contains the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the custom attribute to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value indicating whether to encode the custom attribute to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a>. The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control&#39;s markup. Set the <code>encode</code> parameter to <code>true</code> if you need to escape quotes and backslashes in your expando attribute&#39;s value.  </p>\n<p> If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the RegisterExpandoAttribute method of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager\" data-linktype=\"relative-path\">ClientScriptManager</a> class. The client script in the rendered page sets the <code>title</code> attribute of a <code>&lt;span&gt;</code> element.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager6#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n        \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n    \n    &#39; Register an expando attribute.\n    cs.RegisterExpandoAttribute(&quot;Message&quot;, &quot;title&quot;, &quot;New title from client script.&quot;, True)    \n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;span  id=&quot;Message&quot; \n            title=&quot;Title to be replaced.&quot;&gt;\n            Place your mouse over this text to see the title.\n     &lt;/span&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager6#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n \n  public void Page_Load(Object sender, EventArgs e)\n  {        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n    \n    // Register an expando attribute.\n    cs.RegisterExpandoAttribute(&quot;Message&quot;, &quot;title&quot;, &quot;New title from client script.&quot;, true);\n    \n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;span  id=&quot;Message&quot; \n            title=&quot;Title to be replaced.&quot;&gt;\n            Place your mouse over this text to see the title.\n     &lt;/span&gt;           \n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterForEventValidation_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterForEventValidation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterForEventValidation(String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an event reference for validation with a unique control ID representing the client control generating the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterForEventValidation (string uniqueId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uniqueId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A unique ID representing the client control generating the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information and examples, see the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterForEventValidation_\" data-linktype=\"relative-path\">RegisterForEventValidation</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the RegisterForEventValidation method and the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_ValidateEvent_\" data-linktype=\"relative-path\">ValidateEvent</a> method in order to register a callback for validation, and how to validate that the callback originated from the page.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager9#2\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot; &gt;\n        \n    string _cbMessage = &quot;&quot;;\n    // Define method that processes the callbacks on server.\n    public void RaiseCallbackEvent(String eventArgument)\n    {\n        try\n        {\n            Page.ClientScript.ValidateEvent(button1.UniqueID);\n            _cbMessage = &quot;Correct event raised callback.&quot;;\n        }\n        catch (Exception ex)\n        {\n            _cbMessage = &quot;Incorrect event raised callback.&quot;;\n        }\n    }\n\n    // Define method that returns callback result.\n    public string GetCallbackResult()\n    {\n        return _cbMessage;\n    }\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            ClientScriptManager cs = Page.ClientScript;\n            String cbReference = cs.GetCallbackEventReference(&quot;&#39;&quot; +\n                Page.UniqueID + &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData&quot;, &quot;&quot;,\n                &quot;ProcessCallBackError&quot;, false);\n            String callbackScript = &quot;function CallTheServer(arg, context) {&quot; +\n                cbReference + &quot;; }&quot;;\n            cs.RegisterClientScriptBlock(this.GetType(), &quot;CallTheServer&quot;,\n                callbackScript, true);\n        }\n    }\n    protected override void Render(HtmlTextWriter writer)\n    {\n        Page.ClientScript.RegisterForEventValidation(button1.UniqueID);\n        base.Render(writer);\n    }\n    \n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var value1 = new Date();\n    function ReceiveServerData(arg, context) {\n        Message.innerText = arg;\n        Label1.innerText = &quot;Callback completed at &quot; + value1;\n        value1 = new Date();\n    }\n    function ProcessCallBackError(arg, context) {\n        Message.innerText = &#39;An error has occurred.&#39;;\n    }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;CallBack Event Validation Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback result: &lt;span id=&quot;Message&quot;&gt;&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot;\n             id=&quot;button1&quot; \n             runat=&quot;server&quot;\n             value=&quot;ClientCallBack&quot; \n             onclick=&quot;CallTheServer(value1, null )&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager9#2\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n    Dim _cbMessage As String = &quot;&quot;\n    &#39; Define method that processes the callbacks on server.\n    Public Sub RaiseCallbackEvent(ByVal eventArgument As String) _\n    Implements System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent\n        \n        Try\n            Page.ClientScript.ValidateEvent(button1.UniqueID)\n            _cbMessage = &quot;Correct event raised callback.&quot;\n            \n        Catch ex As Exception\n            _cbMessage = &quot;Incorrect event raised callback.&quot;\n\n        End Try\n        \n    End Sub\n\n    &#39; Define method that returns callback result.\n    Public Function GetCallbackResult() _\n    As String Implements _\n    System.Web.UI.ICallbackEventHandler.GetCallbackResult\n\n        Return _cbMessage\n        \n    End Function\n    \n    \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n        If (Not IsPostBack) Then\n            Dim cs As ClientScriptManager = Page.ClientScript\n            Dim cbReference As String = cs.GetCallbackEventReference(&quot;&#39;&quot; &amp; _\n                Page.UniqueID &amp; &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData&quot;, &quot;&quot;, _\n                &quot;ProcessCallBackError&quot;, False)\n            Dim callbackScript As String = &quot;function CallTheServer(arg, context) {&quot; &amp; _\n                cbReference &amp; &quot;; }&quot;\n            cs.RegisterClientScriptBlock(Me.GetType(), &quot;CallTheServer&quot;, _\n                callbackScript, True)\n            \n        End If\n    End Sub\n    \n    Protected Overrides Sub Render(ByVal writer As System.Web.UI.HtmlTextWriter)\n        \n        Page.ClientScript.RegisterForEventValidation(button1.UniqueID)\n        MyBase.Render(writer)\n    End Sub\n    \n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = new Date();\nfunction ReceiveServerData(arg, context)\n{\n    Message.innerText = arg;\n    Label1.innerText = &quot;Callback completed at &quot; + value1;\n    value1 = new Date();\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;CallBack Event Validation Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback result: &lt;span id=&quot;Message&quot;&gt;&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot;\n             id=&quot;button1&quot; \n             runat=&quot;server&quot;\n             value=&quot;ClientCallBack&quot; \n             onclick=&quot;CallTheServer(value1, null )&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterForEventValidation_System_Web_UI_PostBackOptions_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterForEventValidation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterForEventValidation(PostBackOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an event reference for validation with <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.postbackoptions\" data-linktype=\"relative-path\">PostBackOptions</a> object that specifies how client JavaScript is generated to initiate a postback event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information and examples, see the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterForEventValidation_\" data-linktype=\"relative-path\">RegisterForEventValidation</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterForEventValidation_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterForEventValidation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterForEventValidation(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterForEventValidation (string uniqueId, string argument);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uniqueId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A unique ID representing the client control generating the event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Event arguments passed with the client event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The method is called prior to the <span class=\"xref\">stem.Web.UI.Page.Render*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the RegisterForEventValidation method and the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_ValidateEvent_\" data-linktype=\"relative-path\">ValidateEvent</a> method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown in the example, you could modify the validation <code>argument</code> parameter to contain information specific to the user such as an identity or role  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager9#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n    Dim _cbMessage As String = &quot;&quot;\n    &#39; Define method that processes the callbacks on server.\n    Public Sub RaiseCallbackEvent(ByVal eventArgument As String) _\n    Implements System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent\n        \n        Try\n            Page.ClientScript.ValidateEvent(button1.UniqueID, Me.ToString())\n            _cbMessage = &quot;Correct event raised callback.&quot;\n            \n        Catch ex As Exception\n            _cbMessage = &quot;Incorrect event raised callback.&quot;\n\n        End Try\n        \n    End Sub\n\n    &#39; Define method that returns callback result.\n    Public Function GetCallbackResult() _\n    As String Implements _\n    System.Web.UI.ICallbackEventHandler.GetCallbackResult\n\n        Return _cbMessage\n        \n    End Function\n    \n    \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n        If (Not IsPostBack) Then\n            Dim cs As ClientScriptManager = Page.ClientScript\n            Dim cbReference As String = cs.GetCallbackEventReference(&quot;&#39;&quot; &amp; _\n                Page.UniqueID &amp; &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData&quot;, &quot;&quot;, _\n                &quot;ProcessCallBackError&quot;, False)\n            Dim callbackScript As String = &quot;function CallTheServer(arg, context) {&quot; &amp; _\n                cbReference &amp; &quot;; }&quot;\n            cs.RegisterClientScriptBlock(Me.GetType(), &quot;CallTheServer&quot;, _\n                callbackScript, True)\n            \n        End If\n    End Sub\n    \n    Protected Overrides Sub Render(ByVal writer As System.Web.UI.HtmlTextWriter)\n        \n        Page.ClientScript.RegisterForEventValidation(button1.UniqueID, Me.ToString())\n        MyBase.Render(writer)\n    End Sub\n    \n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = new Date();\nfunction ReceiveServerData(arg, context)\n{\n    Message.innerText = arg;\n    Label1.innerText = &quot;Callback completed at &quot; + value1;\n    value1 = new Date();\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;CallBack Event Validation Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback result: &lt;span id=&quot;Message&quot;&gt;&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot;\n             id=&quot;button1&quot; \n             runat=&quot;server&quot;\n             value=&quot;ClientCallBack&quot; \n             onclick=&quot;CallTheServer(value1, null )&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager9#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot; &gt;\n        \n    string _cbMessage = &quot;&quot;;\n    // Define method that processes the callbacks on server.\n    public void RaiseCallbackEvent(String eventArgument)\n    {\n        try\n        {\n            Page.ClientScript.ValidateEvent(button1.UniqueID, this.ToString());\n            _cbMessage = &quot;Correct event raised callback.&quot;;\n        }\n        catch (Exception ex)\n        {\n            _cbMessage = &quot;Incorrect event raised callback.&quot;;\n        }\n    }\n\n    // Define method that returns callback result.\n    public string GetCallbackResult()\n    {\n        return _cbMessage;\n    }\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            ClientScriptManager cs = Page.ClientScript;\n            String cbReference = cs.GetCallbackEventReference(&quot;&#39;&quot; +\n                Page.UniqueID + &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData&quot;, &quot;&quot;,\n                &quot;ProcessCallBackError&quot;, false);\n            String callbackScript = &quot;function CallTheServer(arg, context) {&quot; +\n                cbReference + &quot;; }&quot;;\n            cs.RegisterClientScriptBlock(this.GetType(), &quot;CallTheServer&quot;,\n                callbackScript, true);\n        }\n    }\n    protected override void Render(HtmlTextWriter writer)\n    {\n        Page.ClientScript.RegisterForEventValidation(button1.UniqueID, this.ToString());\n        base.Render(writer);\n    }\n    \n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = new Date();\nfunction ReceiveServerData(arg, context)\n{\n    Message.innerText = arg;\n    Label1.innerText = &quot;Callback completed at &quot; + value1;\n    value1 = new Date();\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;CallBack Event Validation Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback result: &lt;span id=&quot;Message&quot;&gt;&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot;\n             id=&quot;button1&quot; \n             runat=&quot;server&quot;\n             value=&quot;ClientCallBack&quot; \n             onclick=&quot;CallTheServer(value1, null )&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example demonstrates using the RegisterForEventValidation method to register a callback for validation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager10#1\">&lt;%@ Page EnableEventValidation=&quot;true&quot; Language=&quot;VB&quot;  %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Register an option for event validation&lt;/title&gt;\n    &lt;script runat=&quot;server&quot;&gt;\n        Protected Overrides Sub Render(ByVal writer As System.Web.UI.HtmlTextWriter)\n            ClientScript.RegisterForEventValidation(&quot;DropDownList1&quot;, &quot;This is Option 1&quot;)\n            ClientScript.RegisterForEventValidation(&quot;DropDownList1&quot;, &quot;This is Option 2&quot;)\n            ClientScript.RegisterForEventValidation(&quot;DropDownList1&quot;, &quot;This is Option 3&quot;)\n            &#39; Uncomment the line below when you want to specifically register the option for event validation.\n            &#39; ClientScript.RegisterForEventValidation(&quot;DropDownList1&quot;, &quot;Is this option registered for event validation?&quot;)\n            MyBase.Render(writer)\n        End Sub\n    &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        function Initialize()\n        {\n            var oOption = document.createElement(&quot;OPTION&quot;);\n            document.all(&quot;DropDownList1&quot;).options.add(oOption);\n            oOption.innerText = &quot;This is Option 1&quot;;            \n            oOption = document.createElement(&quot;OPTION&quot;);            \n            document.all(&quot;DropDownList1&quot;).options.add(oOption);\n            oOption.innerText = &quot;This is Option 2&quot;;\n            oOption = document.createElement(&quot;OPTION&quot;);                \n            document.all(&quot;DropDownList1&quot;).options.add(oOption); \n            oOption.innerText = &quot;This is Option 3&quot;;\n            oOption = document.createElement(&quot;OPTION&quot;);                \n            document.all(&quot;DropDownList1&quot;).options.add(oOption); \n            oOption.innerText = &quot;Is this option registered for event validation?&quot;;\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=&quot;Initialize();&quot;&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n        &lt;asp:DropDownList ID=&quot;DropDownList1&quot; runat=&quot;server&quot;&gt;\n        &lt;/asp:DropDownList&gt;\n        &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; Text=&quot;Postback to server for validation&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager10#1\">&lt;%@ Page EnableEventValidation=&quot;true&quot; Language=&quot;C#&quot;  %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Register an option for event validation&lt;/title&gt;\n    &lt;script runat=&quot;server&quot;&gt;\n        protected override void Render(HtmlTextWriter writer)\n        {\n            ClientScript.RegisterForEventValidation(&quot;DropDownList1&quot;, &quot;This is Option 1&quot;);\n            ClientScript.RegisterForEventValidation(&quot;DropDownList1&quot;, &quot;This is Option 2&quot;);\n            ClientScript.RegisterForEventValidation(&quot;DropDownList1&quot;, &quot;This is Option 3&quot;);\n            // Uncomment the line below when you want to specifically register the option for event validation.\n            // ClientScript.RegisterForEventValidation(&quot;DropDownList1&quot;, &quot;Is this option registered for event validation?&quot;);\n            base.Render(writer);\n        }\n    &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        function Initialize()\n        {\n            var oOption = document.createElement(&quot;OPTION&quot;);\n            document.all(&quot;DropDownList1&quot;).options.add(oOption);\n            oOption.innerText = &quot;This is Option 1&quot;;            \n            oOption = document.createElement(&quot;OPTION&quot;);            \n            document.all(&quot;DropDownList1&quot;).options.add(oOption);\n            oOption.innerText = &quot;This is Option 2&quot;;\n            oOption = document.createElement(&quot;OPTION&quot;);                \n            document.all(&quot;DropDownList1&quot;).options.add(oOption); \n            oOption.innerText = &quot;This is Option 3&quot;;\n            oOption = document.createElement(&quot;OPTION&quot;);                \n            document.all(&quot;DropDownList1&quot;).options.add(oOption); \n            oOption.innerText = &quot;Is this option registered for event validation?&quot;;\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=&quot;Initialize();&quot;&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n        &lt;asp:DropDownList ID=&quot;DropDownList1&quot; runat=&quot;server&quot;&gt;&lt;/asp:DropDownList&gt;\n        &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; Text=&quot;Postback to server for validation&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterHiddenField_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterHiddenField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterHiddenField(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a hidden value with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hiddenFieldName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the hidden field to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hiddenFieldInitialValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial value of the field to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hiddenFieldName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RegisterHiddenField method creates a hidden <code>&lt;input&gt;</code> element on the rendered HTML page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterArrayDeclaration_\" data-linktype=\"relative-path\">RegisterArrayDeclaration</a> and RegisterHiddenField methods. The example registers an array and a hidden value and defines the <code>OnClick</code> event of an <code>&lt;input&gt;</code> button to calculate the sum of two values of the array and the hidden value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager5#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n \n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the array name and values.\n    String arrName = &quot;MyArray&quot;;\n    String arrValue = &quot;\\&quot;1\\&quot;, \\&quot;2\\&quot;, \\&quot;text\\&quot;&quot;;\n    \n    // Define the hidden field name and initial value.\n    String hiddenName = &quot;MyHiddenField&quot;;\n    String hiddenValue = &quot;3&quot;;\n    \n    // Define script name and type.\n    String csname = &quot;ConcatScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Register the array with the Page class.\n    cs.RegisterArrayDeclaration(arrName, arrValue);\n\n    // Register the hidden field with the Page class.\n    cs.RegisterHiddenField(hiddenName, hiddenValue);\n\n    // Check to see if the  script is already registered.\n    if (!cs.IsClientScriptBlockRegistered(cstype, csname))\n    {\n      StringBuilder cstext = new StringBuilder();\n      cstext.Append(&quot;&lt;script type=\\&quot;text/javascript\\&quot;&gt; function DoClick() {&quot;); \n      cstext.Append(&quot;Form1.Message.value=&#39;Sum = &#39; + &quot;);\n      cstext.Append(&quot;(parseInt(&quot; + arrName + &quot;[0])+&quot;);\n      cstext.Append(&quot;parseInt(&quot; + arrName + &quot;[1])+&quot;);\n      cstext.Append(&quot;parseInt(&quot; + Form1.Name + &quot;.&quot; + hiddenName + &quot;.value));} &lt;/&quot;);\n      cstext.Append(&quot;script&gt;&quot;);\n      cs.RegisterClientScriptBlock(cstype, csname, cstext.ToString(), false);\n    }\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;input type=&quot;text&quot;\n            id=&quot;Message&quot; /&gt;\n     &lt;input type=&quot;button&quot; \n            onclick=&quot;DoClick()&quot; \n            value=&quot;Run Script&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager5#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the array name and values.\n    Dim arrName As String = &quot;MyArray&quot;\n    Dim arrValue As String = &quot;&quot;&quot;1&quot;&quot;, &quot;&quot;2&quot;&quot;, &quot;&quot;text&quot;&quot;&quot;\n    \n    &#39; Define the hidden field name and initial value.\n    Dim hiddenName As String = &quot;MyHiddenField&quot;\n    Dim hiddenValue As String = &quot;3&quot;\n    \n    &#39; Define script name and type.\n    Dim csname As String = &quot;ConcatScript&quot;\n    Dim cstype As Type = Me.GetType()\n        \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Register the array with the Page class.\n    cs.RegisterArrayDeclaration(arrName, arrValue)\n    \n    &#39; Register the hidden field with the Page class.\n    cs.RegisterHiddenField(hiddenName, hiddenValue)\n\n    &#39; Check to see if the  script is already registered.\n    If (Not cs.IsClientScriptBlockRegistered(cstype, csname)) Then\n      Dim cstext As StringBuilder = New StringBuilder()\n      cstext.Append(&quot;&lt;script type=&quot;&quot;text/javascript\\&quot;&quot;&gt; function DoClick() {&quot;)\n      cstext.Append(&quot;Form1.Message.value=&#39;Sum = &#39; + &quot;)\n      cstext.Append(&quot;(parseInt(&quot; + arrName + &quot;[0])+&quot;)\n      cstext.Append(&quot;parseInt(&quot; + arrName + &quot;[1])+&quot;)\n      cstext.Append(&quot;parseInt(&quot; + Form1.Name + &quot;.&quot; + hiddenName + &quot;.value));} &lt;/&quot;)\n      cstext.Append(&quot;script&gt;&quot;)\n      cs.RegisterClientScriptBlock(cstype, csname, cstext.ToString(), False)\n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;input type=&quot;text&quot;\n            id=&quot;Message&quot; /&gt;\n     &lt;input type=&quot;button&quot; \n            onclick=&quot;DoClick()&quot; \n            value=&quot;Run Script&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterOnSubmitStatement_System_Type_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterOnSubmitStatement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterOnSubmitStatement(Type,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an OnSubmit statement with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, a key, and a script literal. The statement executes when the <a class=\"xref\" href=\"system.web.ui.htmlcontrols.htmlform\" data-linktype=\"relative-path\">HtmlForm</a> is submitted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterOnSubmitStatement (Type type, string key, string script);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the OnSubmit statement to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the OnSubmit statement to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>script</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The script literal of the OnSubmit statement to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An OnSubmit statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. Only one statement with a given type and key pair can be registered with the page. Attempting to register a statement that is already registered will not create a duplicate of the statement.  </p>\n<p> Call the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsOnSubmitStatementRegistered_\" data-linktype=\"relative-path\">IsOnSubmitStatementRegistered</a> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.  </p>\n<p> The <code>script</code> parameter of the RegisterOnSubmitStatement method can contain multiple script commands as long as they are properly delimited with a semicolon (;).  </p>\n<p> The RegisterOnSubmitStatement adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.  </p>\n<p> For more information on HTML forms and the <code>OnSubmit</code> attribute, see the <a href=\"http://go.microsoft.com/fwlink/?linkid=37125\" data-linktype=\"external\">World Wide Web Consortium (W3C) Web site</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RegisterOnSubmitStatement method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager3#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the name and type of the client script on the page.\n    Dim csname As String = &quot;OnSubmitScript&quot;\n    Dim cstype As Type = Me.GetType()\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n    \n    &#39; Check to see if the OnSubmit statement is already registered.\n    If (Not cs.IsOnSubmitStatementRegistered(cstype, csname)) Then\n      \n      Dim cstext As String = &quot;document.write(&#39;Text from OnSubmit statement.&#39;);&quot;\n      cs.RegisterOnSubmitStatement(cstype, csname, cstext)\n      \n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;input type=&quot;submit&quot;\n            value=&quot;Submit&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager3#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client script on the page.\n    String csname = &quot;OnSubmitScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the OnSubmit statement is already registered.\n    if (!cs.IsOnSubmitStatementRegistered(cstype, csname))\n    {\n      String cstext = &quot;document.write(&#39;Text from OnSubmit statement&#39;);&quot;;\n      cs.RegisterOnSubmitStatement(cstype, csname, cstext);\n    }\n\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form    id=&quot;Form1&quot;\n            runat=&quot;server&quot;&gt;\n     &lt;input type=&quot;submit&quot;\n            value=&quot;Submit&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterStartupScript_System_Type_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterStartupScript_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterStartupScript(Type,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Registers the startup script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, a key, and a script literal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterStartupScript (Type type, string key, string script);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the startup script to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the startup script to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>script</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The startup script literal to register.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  </p>\n<p> Call the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_\" data-linktype=\"relative-path\">IsStartupScriptRegistered</a> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.  </p>\n<p> In this overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method, you must make sure that the script provided in the <code>script</code> parameter is wrapped with a <code>&lt;script&gt;</code> element block.  </p>\n<p> The script block added by the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method executes when the page finishes loading but before the page&#39;s <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_OnLoad_\" data-linktype=\"relative-path\">OnLoad</a> event is raised. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to gather the scripts together in a single string, and then register them all in a single client script block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RegisterStartupScript method. Note that the beginning and closing script tags are included within the <code>script</code> parameter. To have the script tags added based on an additional parameter setting, see the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager11#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client scripts on the page.\n    String csname1 = &quot;PopupScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the startup script is already registered.\n    if (!cs.IsStartupScriptRegistered(cstype, csname1))\n    {\n        StringBuilder cstext1 = new StringBuilder();\n        cstext1.Append(&quot;&lt;script type=text/javascript&gt; alert(&#39;Hello World!&#39;) &lt;/&quot;);\n        cstext1.Append(&quot;script&gt;&quot;);\n\n        cs.RegisterStartupScript(cstype, csname1, cstext1.ToString());\n    }\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;RegisterStartupScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n    \n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager11#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Public Sub Page_Load(ByVal sender As [Object], ByVal e As EventArgs)\n        &#39; Define the name and type of the client scripts on the page. \n        Dim csname1 As [String] = &quot;PopupScript&quot;\n        Dim cstype As Type = Me.[GetType]()\n    \n        &#39; Get a ClientScriptManager reference from the Page class. \n        Dim cs As ClientScriptManager = Page.ClientScript\n    \n        &#39; Check to see if the startup script is already registered. \n        If Not cs.IsStartupScriptRegistered(cstype, csname1) Then\n            Dim cstext1 As New StringBuilder()\n            cstext1.Append(&quot;&lt;script type=text/javascript&gt; alert(&#39;Hello World!&#39;) &lt;/&quot;)\n            cstext1.Append(&quot;script&gt;&quot;)\n        \n            cs.RegisterStartupScript(cstype, csname1, cstext1.ToString())\n        End If\n    End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;RegisterStartupScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n    \n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_RegisterStartupScript_System_Type_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_RegisterStartupScript_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterStartupScript(Type,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Registers the startup script with the <a class=\"xref\" href=\"system.web.ui.page\" data-linktype=\"relative-path\">Page</a> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the startup script to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the startup script to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>script</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The startup script literal to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>addScriptTags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value indicating whether to add script tags.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  </p>\n<p> Call the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_IsStartupScriptRegistered_\" data-linktype=\"relative-path\">IsStartupScriptRegistered</a> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.  </p>\n<p> In this overload of the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method, you can indicate whether the script provided in the <code>script</code> parameter is wrapped with a <code>&lt;script&gt;</code> element block by using the <code>addScriptTags</code> parameter. Setting <code>addScriptTags</code> to <code>true</code> indicates that script tags will be added automatically.  </p>\n<p> The script block added by the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterStartupScript_\" data-linktype=\"relative-path\">RegisterStartupScript</a> method executes when the page finishes loading but before the page&#39;s <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_OnLoad_\" data-linktype=\"relative-path\">OnLoad</a> event is raised. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to gather the scripts together in a single string, and then register them all in a single client script block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RegisterStartupScript method. Note that the <code>addScriptTags</code> parameter is set to <code>false</code> so the beginning and closing script tags are included with the <code>script</code> parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager1#1\">&lt;%@ Page Language=&quot;C#&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  public void Page_Load(Object sender, EventArgs e)\n  {\n    // Define the name and type of the client scripts on the page.\n    String csname1 = &quot;PopupScript&quot;;\n    String csname2 = &quot;ButtonClickScript&quot;;\n    Type cstype = this.GetType();\n        \n    // Get a ClientScriptManager reference from the Page class.\n    ClientScriptManager cs = Page.ClientScript;\n\n    // Check to see if the startup script is already registered.\n    if (!cs.IsStartupScriptRegistered(cstype, csname1))\n    {\n      String cstext1 = &quot;alert(&#39;Hello World&#39;);&quot;;\n      cs.RegisterStartupScript(cstype, csname1, cstext1, true);\n    }\n\n    // Check to see if the client script is already registered.\n    if (!cs.IsClientScriptBlockRegistered(cstype, csname2))\n    {\n      StringBuilder cstext2 = new StringBuilder();\n      cstext2.Append(&quot;&lt;script type=\\&quot;text/javascript\\&quot;&gt; function DoClick() {&quot;);\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;);\n      cstext2.Append(&quot;script&gt;&quot;);\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString(), false);\n    }\n  }\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager1#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n    &#39; Define the name and type of the client scripts on the page.\n    Dim csname1 As String = &quot;PopupScript&quot;\n    Dim csname2 As String = &quot;ButtonClickScript&quot;\n    Dim cstype As Type = Me.GetType()\n    \n    &#39; Get a ClientScriptManager reference from the Page class.\n    Dim cs As ClientScriptManager = Page.ClientScript\n\n    &#39; Check to see if the startup script is already registered.\n    If (Not cs.IsStartupScriptRegistered(cstype, csname1)) Then\n      \n      Dim cstext1 As String = &quot;alert(&#39;Hello World&#39;);&quot;\n      cs.RegisterStartupScript(cstype, csname1, cstext1, True)\n      \n    End If\n    \n    &#39; Check to see if the client script is already registered.\n    If (Not cs.IsClientScriptBlockRegistered(cstype, csname2)) Then\n      \n      Dim cstext2 As New StringBuilder()\n            cstext2.Append(&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt; function DoClick() {&quot;)\n      cstext2.Append(&quot;Form1.Message.value=&#39;Text from client script.&#39;} &lt;/&quot;)\n      cstext2.Append(&quot;script&gt;&quot;)\n      cs.RegisterClientScriptBlock(cstype, csname2, cstext2.ToString(), False)\n      \n    End If\n    \n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;ClientScriptManager Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;form id=&quot;Form1&quot;\n         runat=&quot;server&quot;&gt;\n        &lt;input type=&quot;text&quot; id=&quot;Message&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;ClickMe&quot; onclick=&quot;DoClick()&quot; /&gt;\n     &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_ValidateEvent_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_ValidateEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValidateEvent(String)</div>        \r\n          </div>\r\n    \r\n            <p>Validates a client event that was registered for event validation using the <span class=\"xref\">stem.Web.UI.ClientScriptManager.RegisterForEventValidation*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ValidateEvent (string uniqueId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uniqueId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A unique ID representing the client control generating the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_ClientScriptManager_ValidateEvent_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Web_UI_ClientScriptManager_ValidateEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValidateEvent(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Validates a client event that was registered for event validation using the <span class=\"xref\">stem.Web.UI.ClientScriptManager.RegisterForEventValidation*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ValidateEvent (string uniqueId, string argument);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uniqueId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A unique ID representing the client control generating the event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event arguments passed with the client event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>uniqueId</code> is <code>null</code> or an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the <a class=\"xref\" href=\"system.web.ui.clientscriptmanager#System_Web_UI_ClientScriptManager_RegisterForEventValidation_\" data-linktype=\"relative-path\">RegisterForEventValidation</a> method and the ValidateEvent method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown here, you could modify the validation <code>argument</code> parameter to contain information specific to the user such as an identity or role  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.UI.ClientScriptManager9#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n    Dim _cbMessage As String = &quot;&quot;\n    &#39; Define method that processes the callbacks on server.\n    Public Sub RaiseCallbackEvent(ByVal eventArgument As String) _\n    Implements System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent\n        \n        Try\n            Page.ClientScript.ValidateEvent(button1.UniqueID, Me.ToString())\n            _cbMessage = &quot;Correct event raised callback.&quot;\n            \n        Catch ex As Exception\n            _cbMessage = &quot;Incorrect event raised callback.&quot;\n\n        End Try\n        \n    End Sub\n\n    &#39; Define method that returns callback result.\n    Public Function GetCallbackResult() _\n    As String Implements _\n    System.Web.UI.ICallbackEventHandler.GetCallbackResult\n\n        Return _cbMessage\n        \n    End Function\n    \n    \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)\n\n        If (Not IsPostBack) Then\n            Dim cs As ClientScriptManager = Page.ClientScript\n            Dim cbReference As String = cs.GetCallbackEventReference(&quot;&#39;&quot; &amp; _\n                Page.UniqueID &amp; &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData&quot;, &quot;&quot;, _\n                &quot;ProcessCallBackError&quot;, False)\n            Dim callbackScript As String = &quot;function CallTheServer(arg, context) {&quot; &amp; _\n                cbReference &amp; &quot;; }&quot;\n            cs.RegisterClientScriptBlock(Me.GetType(), &quot;CallTheServer&quot;, _\n                callbackScript, True)\n            \n        End If\n    End Sub\n    \n    Protected Overrides Sub Render(ByVal writer As System.Web.UI.HtmlTextWriter)\n        \n        Page.ClientScript.RegisterForEventValidation(button1.UniqueID, Me.ToString())\n        MyBase.Render(writer)\n    End Sub\n    \n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = new Date();\nfunction ReceiveServerData(arg, context)\n{\n    Message.innerText = arg;\n    Label1.innerText = &quot;Callback completed at &quot; + value1;\n    value1 = new Date();\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;CallBack Event Validation Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback result: &lt;span id=&quot;Message&quot;&gt;&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot;\n             id=&quot;button1&quot; \n             runat=&quot;server&quot;\n             value=&quot;ClientCallBack&quot; \n             onclick=&quot;CallTheServer(value1, null )&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.UI.ClientScriptManager9#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Implements Interface=&quot;System.Web.UI.ICallbackEventHandler&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot; &gt;\n        \n    string _cbMessage = &quot;&quot;;\n    // Define method that processes the callbacks on server.\n    public void RaiseCallbackEvent(String eventArgument)\n    {\n        try\n        {\n            Page.ClientScript.ValidateEvent(button1.UniqueID, this.ToString());\n            _cbMessage = &quot;Correct event raised callback.&quot;;\n        }\n        catch (Exception ex)\n        {\n            _cbMessage = &quot;Incorrect event raised callback.&quot;;\n        }\n    }\n\n    // Define method that returns callback result.\n    public string GetCallbackResult()\n    {\n        return _cbMessage;\n    }\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            ClientScriptManager cs = Page.ClientScript;\n            String cbReference = cs.GetCallbackEventReference(&quot;&#39;&quot; +\n                Page.UniqueID + &quot;&#39;&quot;, &quot;arg&quot;, &quot;ReceiveServerData&quot;, &quot;&quot;,\n                &quot;ProcessCallBackError&quot;, false);\n            String callbackScript = &quot;function CallTheServer(arg, context) {&quot; +\n                cbReference + &quot;; }&quot;;\n            cs.RegisterClientScriptBlock(this.GetType(), &quot;CallTheServer&quot;,\n                callbackScript, true);\n        }\n    }\n    protected override void Render(HtmlTextWriter writer)\n    {\n        Page.ClientScript.RegisterForEventValidation(button1.UniqueID, this.ToString());\n        base.Render(writer);\n    }\n    \n&lt;/script&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar value1 = new Date();\nfunction ReceiveServerData(arg, context)\n{\n    Message.innerText = arg;\n    Label1.innerText = &quot;Callback completed at &quot; + value1;\n    value1 = new Date();\n}\nfunction ProcessCallBackError(arg, context)\n{\n    Message.innerText = &#39;An error has occurred.&#39;;\n}\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;CallBack Event Validation Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      Callback result: &lt;span id=&quot;Message&quot;&gt;&lt;/span&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;input type=&quot;button&quot;\n             id=&quot;button1&quot; \n             runat=&quot;server&quot;\n             value=&quot;ClientCallBack&quot; \n             onclick=&quot;CallTheServer(value1, null )&quot;/&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.ClientScriptManager.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.ClientScriptManager.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.GetCallbackEventReference\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.GetPostBackEventReference\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.GetWebResourceUrl\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.IsStartupScriptRegistered\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterArrayDeclaration\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterClientScriptBlock\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterClientScriptInclude\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterClientScriptResource\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterExpandoAttribute\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterForEventValidation\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterHiddenField\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.RegisterStartupScript\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ClientScriptManager.ValidateEvent\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6c3fe431-b974-8acc-f670-cc69e714084c\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Web.UI\\ClientScriptManager.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines methods for managing client scripts in Web applications.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.ClientScriptManager\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.ClientScriptManager.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.ClientScriptManager.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.ClientScriptManager","System.Web.UI.ClientScriptManager.GetCallbackEventReference","System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink","System.Web.UI.ClientScriptManager.GetPostBackEventReference","System.Web.UI.ClientScriptManager.GetWebResourceUrl","System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered","System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered","System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered","System.Web.UI.ClientScriptManager.IsStartupScriptRegistered","System.Web.UI.ClientScriptManager.RegisterArrayDeclaration","System.Web.UI.ClientScriptManager.RegisterClientScriptBlock","System.Web.UI.ClientScriptManager.RegisterClientScriptInclude","System.Web.UI.ClientScriptManager.RegisterClientScriptResource","System.Web.UI.ClientScriptManager.RegisterExpandoAttribute","System.Web.UI.ClientScriptManager.RegisterForEventValidation","System.Web.UI.ClientScriptManager.RegisterHiddenField","System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement","System.Web.UI.ClientScriptManager.RegisterStartupScript","System.Web.UI.ClientScriptManager.ValidateEvent"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.ClientScriptManager","System::Web::UI::ClientScriptManager","System.Web.UI.ClientScriptManager.GetCallbackEventReference","System::Web::UI::ClientScriptManager::GetCallbackEventReference","System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink","System::Web::UI::ClientScriptManager::GetPostBackClientHyperlink","System.Web.UI.ClientScriptManager.GetPostBackEventReference","System::Web::UI::ClientScriptManager::GetPostBackEventReference","System.Web.UI.ClientScriptManager.GetWebResourceUrl","System::Web::UI::ClientScriptManager::GetWebResourceUrl","System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered","System::Web::UI::ClientScriptManager::IsClientScriptBlockRegistered","System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered","System::Web::UI::ClientScriptManager::IsClientScriptIncludeRegistered","System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered","System::Web::UI::ClientScriptManager::IsOnSubmitStatementRegistered","System.Web.UI.ClientScriptManager.IsStartupScriptRegistered","System::Web::UI::ClientScriptManager::IsStartupScriptRegistered","System.Web.UI.ClientScriptManager.RegisterArrayDeclaration","System::Web::UI::ClientScriptManager::RegisterArrayDeclaration","System.Web.UI.ClientScriptManager.RegisterClientScriptBlock","System::Web::UI::ClientScriptManager::RegisterClientScriptBlock","System.Web.UI.ClientScriptManager.RegisterClientScriptInclude","System::Web::UI::ClientScriptManager::RegisterClientScriptInclude","System.Web.UI.ClientScriptManager.RegisterClientScriptResource","System::Web::UI::ClientScriptManager::RegisterClientScriptResource","System.Web.UI.ClientScriptManager.RegisterExpandoAttribute","System::Web::UI::ClientScriptManager::RegisterExpandoAttribute","System.Web.UI.ClientScriptManager.RegisterForEventValidation","System::Web::UI::ClientScriptManager::RegisterForEventValidation","System.Web.UI.ClientScriptManager.RegisterHiddenField","System::Web::UI::ClientScriptManager::RegisterHiddenField","System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement","System::Web::UI::ClientScriptManager::RegisterOnSubmitStatement","System.Web.UI.ClientScriptManager.RegisterStartupScript","System::Web::UI::ClientScriptManager::RegisterStartupScript","System.Web.UI.ClientScriptManager.ValidateEvent","System::Web::UI::ClientScriptManager::ValidateEvent"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6c3fe431-b974-8acc-f670-cc69e714084c","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Web.UI\\ClientScriptManager.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI/ClientScriptManager.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ClientScriptManager class | Microsoft Docs","_op_ogTitle":"ClientScriptManager class","description":"Defines methods for managing client scripts in Web applications.\n","toc_asset_id":"_splitted/System.Web.UI/toc.json","toc_rel":"_splitted/System.Web.UI/toc.json","source_url":"","ms.assetid":"System.Web.UI.ClientScriptManager","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.clientscriptmanager","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.clientscriptmanager","fileRelativePath":"System.Web.UI.ClientScriptManager.html"},"themesRelativePathToOutputRoot":"_themes/"}