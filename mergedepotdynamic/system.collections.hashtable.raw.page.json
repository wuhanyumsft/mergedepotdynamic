{"content":"    \r\n    <h1 id=\"System_Collections_Hashtable\">\r\n      <span class=\"lang-csharp\">Hashtable</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a collection of key/value pairs that are organized based on the hash code of the key.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Hashtable</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Each element is a key/value pair stored in a <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> object. A key cannot be <code>null</code>, but a value can be.  </p>\n<p> The objects used as keys by a Hashtable are required to override the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method (or the <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> interface) and the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method (or the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface). The implementation of both methods and interfaces must handle case sensitivity the same way; otherwise, the Hashtable might behave incorrectly. For example, when creating a Hashtable, you must use the <a class=\"xref\" href=\"system.collections.caseinsensitivehashcodeprovider\" data-linktype=\"relative-path\">CaseInsensitiveHashCodeProvider</a> class (or any case-insensitive <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> implementation) with the <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a> class (or any case-insensitive <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation).  </p>\n<p> Furthermore, these methods must produce the same results when called with the same parameters while the key exists in the Hashtable. An alternative is to use a Hashtable constructor with an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> parameter. If key equality were simply reference equality, the inherited implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> would suffice.  </p>\n<p> Key objects must be immutable as long as they are used as keys in the Hashtable.  </p>\n<p> When an element is added to the Hashtable, the element is placed into a bucket based on the hash code of the key. Subsequent lookups of the key use the hash code of the key to search in only one particular bucket, thus substantially reducing the number of key comparisons required to find an element.  </p>\n<p> The load factor of a Hashtable determines the maximum ratio of elements to buckets. Smaller load factors cause faster average lookup times at the cost of increased memory consumption. The default load factor of 1.0 generally provides the best balance between speed and size. A different load factor can also be specified when the Hashtable is created.  </p>\n<p> As elements are added to a Hashtable, the actual load factor of the Hashtable increases. When the actual load factor reaches the specified load factor, the number of buckets in the Hashtable is automatically increased to the smallest prime number that is larger than twice the current number of Hashtable buckets.  </p>\n<p> Each key object in the Hashtable must provide its own hash function, which can be accessed by calling <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_GetHash_\" data-linktype=\"relative-path\">GetHash</a>. However, any object implementing <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> can be passed to a Hashtable constructor, and that hash function is used for all objects in the table.  </p>\n<p> The capacity of a Hashtable is the number of elements the Hashtable can hold. As elements are added to a Hashtable, the capacity is automatically increased as required through reallocation.  </p>\n<p> For very large Hashtable objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <code>enabled</code> attribute of the  configuration element to <code>true</code> in the run-time environment.  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>For Each</code> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the Hashtable is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a>. For example:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ClassExample#01\">        for each(DictionaryEntry de in myHashtable)\n        {\n            // ...\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ClassExample#01\">        foreach(DictionaryEntry de in myHashtable)\n        {\n            // ...\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ClassExample#01\">        For Each de As DictionaryEntry In myHashtable\n            &#39; ...\n        Next de\n</code></pre><p> The <code>foreach</code> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.  </p>\n<p> Because serializing and deserializing an enumerator for a Hashtable can cause the elements to become reordered, it is not possible to continue enumeration without calling the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <a class=\"xref\" href=\"system.type#System_Type_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor\" data-linktype=\"self-bookmark\">Hashtable()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the default initial capacity, load factor, hash code provider, and comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Collections_IDictionary_\" data-linktype=\"self-bookmark\">Hashtable(IDictionary)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">Hashtable(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the default initial capacity and load factor, and the specified <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Int32_\" data-linktype=\"self-bookmark\">Hashtable(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">Hashtable(IDictionary,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to a new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Single_\" data-linktype=\"self-bookmark\">Hashtable(IDictionary,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Collections_IHashCodeProvider_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Hashtable(IHashCodeProvider,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the default initial capacity and load factor, and the specified hash code provider and comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Int32_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">Hashtable(Int32,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity and <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a>, and the default load factor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Int32_System_Single_\" data-linktype=\"self-bookmark\">Hashtable(Int32,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">Hashtable(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class that is serializable using the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Collections_IHashCodeProvider_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Hashtable(IDictionary,IHashCodeProvider,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer. This API is obsolete. For an alternative, see <span class=\"xref\">stem.Collections.Hashtable.#ctor*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Single_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">Hashtable(IDictionary,Single,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Int32_System_Collections_IHashCodeProvider_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Hashtable(Int32,IHashCodeProvider,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity, hash code provider, comparer, and the default load factor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Int32_System_Single_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">Hashtable(Int32,Single,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity, load factor, and <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Single_System_Collections_IHashCodeProvider_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable__ctor_System_Int32_System_Single_System_Collections_IHashCodeProvider_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Hashtable(Int32,Single,IHashCodeProvider,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity, load factor, hash code provider, and comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_comparer\" data-linktype=\"self-bookmark\">comparer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> to use for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of key/value pairs contained in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_EqualityComparer\" data-linktype=\"self-bookmark\">EqualityComparer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> to use for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_hcp\" data-linktype=\"self-bookmark\">hcp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the object that can dispense hash codes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_IsFixedSize\" data-linktype=\"self-bookmark\">IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_IsSynchronized\" data-linktype=\"self-bookmark\">IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Item_System_Object_\" data-linktype=\"self-bookmark\">Item(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value associated with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Keys\" data-linktype=\"self-bookmark\">Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_SyncRoot\" data-linktype=\"self-bookmark\">SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Values\" data-linktype=\"self-bookmark\">Values</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the values in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Add_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Add(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an element with the specified key and value into the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Contains_System_Object_\" data-linktype=\"self-bookmark\">Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_ContainsKey_System_Object_\" data-linktype=\"self-bookmark\">ContainsKey(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_ContainsValue_System_Object_\" data-linktype=\"self-bookmark\">ContainsValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> elements to a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_GetHash_System_Object_\" data-linktype=\"self-bookmark\">GetHash(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and returns the data needed to serialize the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_KeyEquals_System_Object_System_Object_\" data-linktype=\"self-bookmark\">KeyEquals(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares a specific <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> with a specific key in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_OnDeserialization_System_Object_\" data-linktype=\"self-bookmark\">OnDeserialization(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and raises the deserialization event when the deserialization is complete.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Remove_System_Object_\" data-linktype=\"self-bookmark\">Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_Synchronized_System_Collections_Hashtable_\" data-linktype=\"self-bookmark\">Synchronized(Hashtable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a synchronized (thread-safe) wrapper for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Hashtable_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the default initial capacity, load factor, hash code provider, and comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A hash table&#39;s capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctor#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myComparer : IEqualityComparer\n{\npublic:\n    virtual bool Equals(Object^ x, Object^ y) \n    {\n        return x-&gt;Equals(y);\n    }\n\n    virtual int GetHashCode(Object^ obj)\n    {\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\nref class myCultureComparer : IEqualityComparer\n{\nprivate:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\n    virtual bool Equals(Object^ x, Object^ y) \n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    virtual int GetHashCode(Object^ obj)\n    {\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\nint main()\n{\n   \n   // Create a hash table using the default hash code provider and the default comparer.\n   Hashtable^ myHT1 = gcnew Hashtable((IEqualityComparer^)nullptr);\n   myHT1-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT1-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT1-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using the specified IEqualityComparer that uses\n   // the default Object.Equals to determine equality.\n   Hashtable^ myHT2 = gcnew Hashtable(gcnew myComparer());\n   myHT2-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT2-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT2-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using a case-insensitive hash code provider and\n   // case-insensitive comparer based on the InvariantCulture.\n   Hashtable^ myHT3 = gcnew Hashtable(\n            CaseInsensitiveHashCodeProvider::DefaultInvariant,\n            CaseInsensitiveComparer::DefaultInvariant);\n   myHT3-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT3-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT3-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using an IEqualityComparer that is based on\n   // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n   // version of &quot;i&quot;.\n   CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n   Hashtable^ myHT4 = gcnew Hashtable( gcnew myCultureComparer(myCul) );\n   myHT4-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT4-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT4-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Search for a key in each hash table.\n   Console::WriteLine( &quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT4: {0}&quot;, myHT4-&gt;ContainsKey( &quot;first&quot; ) );\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: False\nfirst is in myHT3: True\nfirst is in myHT4: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctor#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myComparer : IEqualityComparer\n{\n    public new bool Equals(object x, object y)\n    {\n        return x.Equals(y);\n    }\n\n    public int GetHashCode(object obj)\n    {\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable();\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the default Object.Equals to determine equality.\n        Hashtable myHT2 = new Hashtable(new myComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using a case-insensitive hash code provider and\n        // case-insensitive comparer based on the InvariantCulture.\n        Hashtable myHT3 = new Hashtable(\n            CaseInsensitiveHashCodeProvider.DefaultInvariant,\n            CaseInsensitiveComparer.DefaultInvariant);\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT4 = new Hashtable(new myCultureComparer(myCul));\n        myHT4.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT4.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT4.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT4: {0}&quot;, myHT4.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: False\nfirst is in myHT3: True\nfirst is in myHT4: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctor#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myComparer\n    Implements IEqualityComparer\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        Return x.Equals(y)\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\n\nEnd Class\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Create a hash table using the default comparer.\n        Dim myHT1 As New Hashtable()\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using the specified IEqualityComparer that uses\n        &#39; the default Object.Equals to determine equality.\n        Dim myHT2 As New Hashtable(New myComparer())\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using a case-insensitive hash code provider and\n        &#39; case-insensitive comparer based on the InvariantCulture.\n        Dim myHT3 As New Hashtable( _\n            CaseInsensitiveHashCodeProvider.DefaultInvariant, _\n            CaseInsensitiveComparer.DefaultInvariant)\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using an IEqualityComparer that is based on\n        &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        &#39; version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim myHT4 As New Hashtable(New myCultureComparer(myCul))\n        myHT4.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT4.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT4.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT4: {0}&quot;, myHT4.ContainsKey(&quot;first&quot;))\n\n    End Sub\n\nEnd Class\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n\n&#39;first is in myHT1: False\n&#39;first is in myHT2: False\n&#39;first is in myHT3: True\n&#39;first is in myHT4: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Collections_IDictionary_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(IDictionary)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (System.Collections.IDictionary d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object to copy to a new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The elements of the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are sorted in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>d</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorDictionary#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n    static void Main()\n    {\n        // Create the dictionary.\n        SortedList^ mySL = gcnew SortedList();\n        mySL-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(mySL);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(mySL, gcnew myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(mySL, gcnew myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n    }\n};\n\nint main()\n{\n    SamplesHashtable::Main();\n};\n\n/* \nThis code produces the following output. \nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorDictionary#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create the dictionary.\n        SortedList mySL = new SortedList();\n        mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(mySL);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(mySL, new myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(mySL, new myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output. \nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorDictionary#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create the dictionary.\n      Dim mySL As New SortedList()\n      mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      mySL.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      mySL.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(mySL)\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(mySL, New myCultureComparer())\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(mySL, New myCultureComparer(myCul))\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the default initial capacity and load factor, and the specified <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (System.Collections.IEqualityComparer equalityComparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>equalityComparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object that defines the hash code provider and the comparer to use with the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider and the default comparer. The default hash code provider is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span> and the default comparer is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A hash table&#39;s capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object includes both the hash code provider and the comparer. If an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> is used in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructor, the objects used as keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object are not required to override the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> enables scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctor#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myComparer : IEqualityComparer\n{\npublic:\n    virtual bool Equals(Object^ x, Object^ y) \n    {\n        return x-&gt;Equals(y);\n    }\n\n    virtual int GetHashCode(Object^ obj)\n    {\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\nref class myCultureComparer : IEqualityComparer\n{\nprivate:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\n    virtual bool Equals(Object^ x, Object^ y) \n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    virtual int GetHashCode(Object^ obj)\n    {\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\nint main()\n{\n   \n   // Create a hash table using the default hash code provider and the default comparer.\n   Hashtable^ myHT1 = gcnew Hashtable((IEqualityComparer^)nullptr);\n   myHT1-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT1-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT1-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using the specified IEqualityComparer that uses\n   // the default Object.Equals to determine equality.\n   Hashtable^ myHT2 = gcnew Hashtable(gcnew myComparer());\n   myHT2-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT2-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT2-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using a case-insensitive hash code provider and\n   // case-insensitive comparer based on the InvariantCulture.\n   Hashtable^ myHT3 = gcnew Hashtable(\n            CaseInsensitiveHashCodeProvider::DefaultInvariant,\n            CaseInsensitiveComparer::DefaultInvariant);\n   myHT3-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT3-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT3-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using an IEqualityComparer that is based on\n   // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n   // version of &quot;i&quot;.\n   CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n   Hashtable^ myHT4 = gcnew Hashtable( gcnew myCultureComparer(myCul) );\n   myHT4-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT4-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT4-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Search for a key in each hash table.\n   Console::WriteLine( &quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT4: {0}&quot;, myHT4-&gt;ContainsKey( &quot;first&quot; ) );\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: False\nfirst is in myHT3: True\nfirst is in myHT4: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctor#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myComparer : IEqualityComparer\n{\n    public new bool Equals(object x, object y)\n    {\n        return x.Equals(y);\n    }\n\n    public int GetHashCode(object obj)\n    {\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable();\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the default Object.Equals to determine equality.\n        Hashtable myHT2 = new Hashtable(new myComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using a case-insensitive hash code provider and\n        // case-insensitive comparer based on the InvariantCulture.\n        Hashtable myHT3 = new Hashtable(\n            CaseInsensitiveHashCodeProvider.DefaultInvariant,\n            CaseInsensitiveComparer.DefaultInvariant);\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT4 = new Hashtable(new myCultureComparer(myCul));\n        myHT4.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT4.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT4.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT4: {0}&quot;, myHT4.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: False\nfirst is in myHT3: True\nfirst is in myHT4: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctor#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myComparer\n    Implements IEqualityComparer\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        Return x.Equals(y)\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\n\nEnd Class\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Create a hash table using the default comparer.\n        Dim myHT1 As New Hashtable()\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using the specified IEqualityComparer that uses\n        &#39; the default Object.Equals to determine equality.\n        Dim myHT2 As New Hashtable(New myComparer())\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using a case-insensitive hash code provider and\n        &#39; case-insensitive comparer based on the InvariantCulture.\n        Dim myHT3 As New Hashtable( _\n            CaseInsensitiveHashCodeProvider.DefaultInvariant, _\n            CaseInsensitiveComparer.DefaultInvariant)\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using an IEqualityComparer that is based on\n        &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        &#39; version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim myHT4 As New Hashtable(New myCultureComparer(myCul))\n        myHT4.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT4.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT4.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT4: {0}&quot;, myHT4.ContainsKey(&quot;first&quot;))\n\n    End Sub\n\nEnd Class\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n\n&#39;first is in myHT1: False\n&#39;first is in myHT2: False\n&#39;first is in myHT3: True\n&#39;first is in myHT4: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of elements that the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object can initially contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorInt#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(3);\n        myHT1-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(3, gcnew myCultureComparer());\n        myHT2-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(3, gcnew myCultureComparer(myCul));\n        myHT3-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n\t\tConsole::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorInt#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(3);\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(3, new myCultureComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(3, new myCultureComparer(myCul));\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorInt#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(3)\n      myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(3, New myCultureComparer())\n      myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(3, New myCultureComparer(myCul))\n      myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(IDictionary,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to a new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object to copy to a new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>equalityComparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object that defines the hash code provider and the comparer to use with the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider and the default comparer. The default hash code provider is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span> and the default comparer is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object includes both the hash code provider and the comparer. If an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> is used in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructor, the objects used as keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object are not required to override the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> enables scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> The elements of the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are sorted in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>d</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorDictionary#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n    static void Main()\n    {\n        // Create the dictionary.\n        SortedList^ mySL = gcnew SortedList();\n        mySL-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(mySL);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(mySL, gcnew myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(mySL, gcnew myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n    }\n};\n\nint main()\n{\n    SamplesHashtable::Main();\n};\n\n/* \nThis code produces the following output. \nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorDictionary#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create the dictionary.\n        SortedList mySL = new SortedList();\n        mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(mySL);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(mySL, new myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(mySL, new myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output. \nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorDictionary#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create the dictionary.\n      Dim mySL As New SortedList()\n      mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      mySL.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      mySL.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(mySL)\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(mySL, New myCultureComparer())\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(mySL, New myCultureComparer(myCul))\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Single_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(IDictionary,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (System.Collections.IDictionary d, float loadFactor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object to copy to a new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadFactor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>loadFactor</code> is less than 0.1.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is greater than 1.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The elements of the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are sorted in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>d</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create the dictionary.\n        SortedList mySL = new SortedList();\n        mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(mySL, (float).8);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(mySL, (float).8, \n            new myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(mySL, (float).8, \n            new myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n\t   \n\t   // Create the dictionary.\n\t   SortedList^ mySL = gcnew SortedList;\n\t   mySL-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n\t   mySL-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n\t   mySL-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\t   \n\t   // Create a hash table using the default hash code provider and the default comparer.\n\t   Hashtable^ myHT1 = gcnew Hashtable( mySL,(float).8 );\n\t   \n\t   // Create a hash table using the specified case-insensitive hash code provider and case-insensitive comparer.\n\t   Hashtable^ myHT2 = gcnew Hashtable( mySL,(float).8,gcnew myCultureComparer() );\n\t   \n\t   // Create a hash table using the specified KeyComparer.\n\t   // The KeyComparer uses a case-insensitive hash code provider and a case-insensitive comparer,\n\t   // which are based on the Turkish culture (tr-TR), where &quot;I&quot; is not the uppercase version of &quot;i&quot;.\n\t   CultureInfo^ myCul = gcnew CultureInfo( &quot;tr-TR&quot; );\n\t   Hashtable^ myHT3 = gcnew Hashtable( mySL,(float).8, gcnew myCultureComparer( myCul ) );\n\t   \n\t   // Search for a key in each hash table.\n\t   Console::WriteLine( &quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey( &quot;first&quot; ) );\n\t   Console::WriteLine( &quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey( &quot;first&quot; ) );\n\t   Console::WriteLine( &quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey( &quot;first&quot; ) );\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create the dictionary.\n      Dim mySL As New SortedList()\n      mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      mySL.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      mySL.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(mySL, System.Convert.ToSingle(0.8))\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(mySL, System.Convert.ToSingle(0.8), _\n        New myCultureComparer())\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(mySL, System.Convert.ToSingle(0.8), _\n        New myCultureComparer(myCul))\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Collections_IHashCodeProvider_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(IHashCodeProvider,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the default initial capacity and load factor, and the specified hash code provider and comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hcp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> object that supplies the hash codes for all keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> object to use to determine whether two keys are equal.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default comparer, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A hash table&#39;s capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctor#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myComparer : IEqualityComparer\n{\npublic:\n    virtual bool Equals(Object^ x, Object^ y) \n    {\n        return x-&gt;Equals(y);\n    }\n\n    virtual int GetHashCode(Object^ obj)\n    {\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\nref class myCultureComparer : IEqualityComparer\n{\nprivate:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\n    virtual bool Equals(Object^ x, Object^ y) \n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    virtual int GetHashCode(Object^ obj)\n    {\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\nint main()\n{\n   \n   // Create a hash table using the default hash code provider and the default comparer.\n   Hashtable^ myHT1 = gcnew Hashtable((IEqualityComparer^)nullptr);\n   myHT1-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT1-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT1-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using the specified IEqualityComparer that uses\n   // the default Object.Equals to determine equality.\n   Hashtable^ myHT2 = gcnew Hashtable(gcnew myComparer());\n   myHT2-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT2-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT2-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using a case-insensitive hash code provider and\n   // case-insensitive comparer based on the InvariantCulture.\n   Hashtable^ myHT3 = gcnew Hashtable(\n            CaseInsensitiveHashCodeProvider::DefaultInvariant,\n            CaseInsensitiveComparer::DefaultInvariant);\n   myHT3-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT3-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT3-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a hash table using an IEqualityComparer that is based on\n   // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n   // version of &quot;i&quot;.\n   CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n   Hashtable^ myHT4 = gcnew Hashtable( gcnew myCultureComparer(myCul) );\n   myHT4-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT4-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT4-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Search for a key in each hash table.\n   Console::WriteLine( &quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey( &quot;first&quot; ) );\n   Console::WriteLine( &quot;first is in myHT4: {0}&quot;, myHT4-&gt;ContainsKey( &quot;first&quot; ) );\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: False\nfirst is in myHT3: True\nfirst is in myHT4: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctor#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myComparer : IEqualityComparer\n{\n    public new bool Equals(object x, object y)\n    {\n        return x.Equals(y);\n    }\n\n    public int GetHashCode(object obj)\n    {\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable();\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the default Object.Equals to determine equality.\n        Hashtable myHT2 = new Hashtable(new myComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using a case-insensitive hash code provider and\n        // case-insensitive comparer based on the InvariantCulture.\n        Hashtable myHT3 = new Hashtable(\n            CaseInsensitiveHashCodeProvider.DefaultInvariant,\n            CaseInsensitiveComparer.DefaultInvariant);\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT4 = new Hashtable(new myCultureComparer(myCul));\n        myHT4.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT4.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT4.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT4: {0}&quot;, myHT4.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: False\nfirst is in myHT3: True\nfirst is in myHT4: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctor#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myComparer\n    Implements IEqualityComparer\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        Return x.Equals(y)\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\n\nEnd Class\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Create a hash table using the default comparer.\n        Dim myHT1 As New Hashtable()\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using the specified IEqualityComparer that uses\n        &#39; the default Object.Equals to determine equality.\n        Dim myHT2 As New Hashtable(New myComparer())\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using a case-insensitive hash code provider and\n        &#39; case-insensitive comparer based on the InvariantCulture.\n        Dim myHT3 As New Hashtable( _\n            CaseInsensitiveHashCodeProvider.DefaultInvariant, _\n            CaseInsensitiveComparer.DefaultInvariant)\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using an IEqualityComparer that is based on\n        &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        &#39; version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim myHT4 As New Hashtable(New myCultureComparer(myCul))\n        myHT4.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT4.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT4.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT4: {0}&quot;, myHT4.ContainsKey(&quot;first&quot;))\n\n    End Sub\n\nEnd Class\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n\n&#39;first is in myHT1: False\n&#39;first is in myHT2: False\n&#39;first is in myHT3: True\n&#39;first is in myHT4: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Int32_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(Int32,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity and <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a>, and the default load factor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of elements that the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object can initially contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>equalityComparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object that defines the hash code provider and the comparer to use with the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider and the default comparer. The default hash code provider is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span> and the default comparer is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object includes both the hash code provider and the comparer. If an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> is used in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructor, the objects used as keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are not required to override the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> enables scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the <code>capacity</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorInt#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(3);\n        myHT1-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(3, gcnew myCultureComparer());\n        myHT2-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(3, gcnew myCultureComparer(myCul));\n        myHT3-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n\t\tConsole::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorInt#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(3);\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(3, new myCultureComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(3, new myCultureComparer(myCul));\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorInt#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(3)\n      myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(3, New myCultureComparer())\n      myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(3, New myCultureComparer(myCul))\n      myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Int32_System_Single_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(Int32,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (int capacity, float loadFactor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of elements that the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object can initially contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadFactor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is less than 0.1.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is greater than 1.0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is causing an overflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the <code>capacity</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(3, (float).8);\n        myHT1-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(3, (float).8, gcnew myCultureComparer());\n        myHT2-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(3, (float).8, gcnew myCultureComparer(myCul));\n        myHT3-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n\t\tConsole::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(3, (float).8);\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(3, (float).8, new myCultureComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(3, (float).8, \n            new myCultureComparer(myCul));\n\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Create a hash table using the default comparer.\n        Dim myHT1 As New Hashtable(3, System.Convert.ToSingle(0.8))\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using the specified IEqualityComparer that uses\n        &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Dim myHT2 As New Hashtable(3, System.Convert.ToSingle(0.8), _\n            New myCultureComparer())\n\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using an IEqualityComparer that is based on\n        &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        &#39; version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim myHT3 As New Hashtable(3, System.Convert.ToSingle(0.8), _\n            New myCultureComparer(myCul))\n\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n    End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class that is serializable using the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object containing the information required to serialize the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object containing the source and destination of the serialized stream associated with the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>info</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A hash table&#39;s capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Because serializing and deserializing an enumerator for a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Collections_IHashCodeProvider_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(IDictionary,IHashCodeProvider,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer. This API is obsolete. For an alternative, see <span class=\"xref\">stem.Collections.Hashtable.#ctor*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object to copy to a new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hcp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> object that supplies the hash codes for all keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> object to use to determine whether two keys are equal.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default comparer, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> The elements of the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are sorted in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>d</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorDictionary#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n    static void Main()\n    {\n        // Create the dictionary.\n        SortedList^ mySL = gcnew SortedList();\n        mySL-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(mySL);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(mySL, gcnew myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(mySL, gcnew myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n    }\n};\n\nint main()\n{\n    SamplesHashtable::Main();\n};\n\n/* \nThis code produces the following output. \nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorDictionary#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create the dictionary.\n        SortedList mySL = new SortedList();\n        mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(mySL);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(mySL, new myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(mySL, new myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output. \nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorDictionary#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create the dictionary.\n      Dim mySL As New SortedList()\n      mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      mySL.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      mySL.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(mySL)\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(mySL, New myCultureComparer())\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(mySL, New myCultureComparer(myCul))\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Single_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(IDictionary,Single,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object to copy to a new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadFactor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>equalityComparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object that defines the hash code provider and the comparer to use with the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider and the default comparer. The default hash code provider is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span> and the default comparer is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>loadFactor</code> is less than 0.1.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is greater than 1.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object includes both the hash code provider and the comparer. If an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> is used in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructor, the objects used as keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object are not required to override the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> enables scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> The elements of the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are sorted in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>d</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create the dictionary.\n        SortedList mySL = new SortedList();\n        mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(mySL, (float).8);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(mySL, (float).8, \n            new myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(mySL, (float).8, \n            new myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n\t   \n\t   // Create the dictionary.\n\t   SortedList^ mySL = gcnew SortedList;\n\t   mySL-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n\t   mySL-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n\t   mySL-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\t   \n\t   // Create a hash table using the default hash code provider and the default comparer.\n\t   Hashtable^ myHT1 = gcnew Hashtable( mySL,(float).8 );\n\t   \n\t   // Create a hash table using the specified case-insensitive hash code provider and case-insensitive comparer.\n\t   Hashtable^ myHT2 = gcnew Hashtable( mySL,(float).8,gcnew myCultureComparer() );\n\t   \n\t   // Create a hash table using the specified KeyComparer.\n\t   // The KeyComparer uses a case-insensitive hash code provider and a case-insensitive comparer,\n\t   // which are based on the Turkish culture (tr-TR), where &quot;I&quot; is not the uppercase version of &quot;i&quot;.\n\t   CultureInfo^ myCul = gcnew CultureInfo( &quot;tr-TR&quot; );\n\t   Hashtable^ myHT3 = gcnew Hashtable( mySL,(float).8, gcnew myCultureComparer( myCul ) );\n\t   \n\t   // Search for a key in each hash table.\n\t   Console::WriteLine( &quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey( &quot;first&quot; ) );\n\t   Console::WriteLine( &quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey( &quot;first&quot; ) );\n\t   Console::WriteLine( &quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey( &quot;first&quot; ) );\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create the dictionary.\n      Dim mySL As New SortedList()\n      mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      mySL.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      mySL.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(mySL, System.Convert.ToSingle(0.8))\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(mySL, System.Convert.ToSingle(0.8), _\n        New myCultureComparer())\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(mySL, System.Convert.ToSingle(0.8), _\n        New myCultureComparer(myCul))\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Int32_System_Collections_IHashCodeProvider_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(Int32,IHashCodeProvider,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity, hash code provider, comparer, and the default load factor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of elements that the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object can initially contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hcp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> object that supplies the hash codes for all keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> object to use to determine whether two keys are equal.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default comparer, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the <code>capacity</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorInt#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(3);\n        myHT1-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(3, gcnew myCultureComparer());\n        myHT2-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(3, gcnew myCultureComparer(myCul));\n        myHT3-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n\t\tConsole::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorInt#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(3);\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(3, new myCultureComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(3, new myCultureComparer(myCul));\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorInt#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(3)\n      myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(3, New myCultureComparer())\n      myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(3, New myCultureComparer(myCul))\n      myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Int32_System_Single_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(Int32,Single,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity, load factor, and <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of elements that the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object can initially contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadFactor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>equalityComparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object that defines the hash code provider and the comparer to use with the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider and the default comparer. The default hash code provider is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span> and the default comparer is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is less than 0.1.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is greater than 1.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object includes both the hash code provider and the comparer. If an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> is used in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructor, the objects used as keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are not required to override the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> enables scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the <code>capacity</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(3, (float).8);\n        myHT1-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(3, (float).8, gcnew myCultureComparer());\n        myHT2-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(3, (float).8, gcnew myCultureComparer(myCul));\n        myHT3-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n\t\tConsole::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(3, (float).8);\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(3, (float).8, new myCultureComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(3, (float).8, \n            new myCultureComparer(myCul));\n\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Create a hash table using the default comparer.\n        Dim myHT1 As New Hashtable(3, System.Convert.ToSingle(0.8))\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using the specified IEqualityComparer that uses\n        &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Dim myHT2 As New Hashtable(3, System.Convert.ToSingle(0.8), _\n            New myCultureComparer())\n\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using an IEqualityComparer that is based on\n        &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        &#39; version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim myHT3 As New Hashtable(3, System.Convert.ToSingle(0.8), _\n            New myCultureComparer(myCul))\n\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n    End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Collections_IDictionary_System_Single_System_Collections_IHashCodeProvider_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class by copying the elements from the specified dictionary to the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object to copy to a new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadFactor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hcp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> object that supplies the hash codes for all keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> object to use to determine whether two keys are equal.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default comparer, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>loadFactor</code> is less than 0.1.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is greater than 1.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> The elements of the new <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are sorted in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>d</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create the dictionary.\n        SortedList mySL = new SortedList();\n        mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(mySL, (float).8);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(mySL, (float).8, \n            new myCultureComparer());\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(mySL, (float).8, \n            new myCultureComparer(myCul));\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n\t   \n\t   // Create the dictionary.\n\t   SortedList^ mySL = gcnew SortedList;\n\t   mySL-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n\t   mySL-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n\t   mySL-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\t   \n\t   // Create a hash table using the default hash code provider and the default comparer.\n\t   Hashtable^ myHT1 = gcnew Hashtable( mySL,(float).8 );\n\t   \n\t   // Create a hash table using the specified case-insensitive hash code provider and case-insensitive comparer.\n\t   Hashtable^ myHT2 = gcnew Hashtable( mySL,(float).8,gcnew myCultureComparer() );\n\t   \n\t   // Create a hash table using the specified KeyComparer.\n\t   // The KeyComparer uses a case-insensitive hash code provider and a case-insensitive comparer,\n\t   // which are based on the Turkish culture (tr-TR), where &quot;I&quot; is not the uppercase version of &quot;i&quot;.\n\t   CultureInfo^ myCul = gcnew CultureInfo( &quot;tr-TR&quot; );\n\t   Hashtable^ myHT3 = gcnew Hashtable( mySL,(float).8, gcnew myCultureComparer( myCul ) );\n\t   \n\t   // Search for a key in each hash table.\n\t   Console::WriteLine( &quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey( &quot;first&quot; ) );\n\t   Console::WriteLine( &quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey( &quot;first&quot; ) );\n\t   Console::WriteLine( &quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey( &quot;first&quot; ) );\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorDictionaryFloat#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable   \n\n   Public Shared Sub Main()\n\n      &#39; Create the dictionary.\n      Dim mySL As New SortedList()\n      mySL.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n      mySL.Add(&quot;SECOND&quot;, &quot;World&quot;)\n      mySL.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n      &#39; Create a hash table using the default comparer.\n      Dim myHT1 As New Hashtable(mySL, System.Convert.ToSingle(0.8))\n\n      &#39; Create a hash table using the specified IEqualityComparer that uses\n      &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n      Dim myHT2 As New Hashtable(mySL, System.Convert.ToSingle(0.8), _\n        New myCultureComparer())\n\n      &#39; Create a hash table using an IEqualityComparer that is based on\n      &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n      &#39; version of &quot;i&quot;.\n      Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n      Dim myHT3 As New Hashtable(mySL, System.Convert.ToSingle(0.8), _\n        New myCultureComparer(myCul))\n\n      &#39; Search for a key in each hash table.\n      Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n      Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable__ctor_System_Int32_System_Single_System_Collections_IHashCodeProvider_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hashtable(Int32,Single,IHashCodeProvider,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new, empty instance of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class using the specified initial capacity, load factor, hash code provider, and comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of elements that the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object can initially contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadFactor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hcp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> object that supplies the hash codes for all keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default hash code provider, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.GetHashCode*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> object to use to determine whether two keys are equal.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default comparer, which is each key&#39;s implementation of <span class=\"xref\">stem.Object.Equals*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is less than 0.1.  </p>\n<p> -or-  </p>\n<p> <code>loadFactor</code> is greater than 1.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object. Capacity is automatically increased as required based on the load factor.  </p>\n<p> The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  </p>\n<p> When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The default hash code provider is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> The comparer determines whether two keys are equal. Every key in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> must be unique. The default comparer is the key&#39;s implementation of <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the <code>capacity</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates hash tables using different <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nref class myCultureComparer : public IEqualityComparer\n{\npublic:\n    CaseInsensitiveComparer^ myComparer;\n\npublic:\n    myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer::DefaultInvariant;\n    }\n\npublic:\n    myCultureComparer(CultureInfo^ myCulture)\n    {\n        myComparer = gcnew CaseInsensitiveComparer(myCulture);\n    }\n\npublic:\n    virtual bool Equals(Object^ x, Object^ y)\n    {\n        if (myComparer-&gt;Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\npublic:\n    virtual int GetHashCode(Object^ obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj-&gt;ToString()-&gt;ToLower()-&gt;GetHashCode();\n    }\n};\n\npublic ref class SamplesHashtable\n{\n\npublic:\n\tstatic void Main()\n\t{\n        // Create a hash table using the default comparer.\n        Hashtable^ myHT1 = gcnew Hashtable(3, (float).8);\n        myHT1-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable^ myHT2 = gcnew Hashtable(3, (float).8, gcnew myCultureComparer());\n        myHT2-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n        Hashtable^ myHT3 = gcnew Hashtable(3, (float).8, gcnew myCultureComparer(myCul));\n        myHT3-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n\t\tConsole::WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2-&gt;ContainsKey(&quot;first&quot;));\n        Console::WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3-&gt;ContainsKey(&quot;first&quot;));\n\n\t}\n};\n\nint main()\n{\n\tSamplesHashtable::Main();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\nclass myCultureComparer : IEqualityComparer\n{\n    public CaseInsensitiveComparer myComparer;\n\n    public myCultureComparer()\n    {\n        myComparer = CaseInsensitiveComparer.DefaultInvariant;\n    }\n\n    public myCultureComparer(CultureInfo myCulture)\n    {\n        myComparer = new CaseInsensitiveComparer(myCulture);\n    }\n\n    public new bool Equals(object x, object y)\n    {\n        if (myComparer.Compare(x, y) == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public int GetHashCode(object obj)\n    {\n        // Compare the hash code for the lowercase versions of the strings.\n        return obj.ToString().ToLower().GetHashCode();\n    }\n}\n\npublic class SamplesHashtable\n{\n\n    public static void Main()\n    {\n\n        // Create a hash table using the default comparer.\n        Hashtable myHT1 = new Hashtable(3, (float).8);\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using the specified IEqualityComparer that uses\n        // the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Hashtable myHT2 = new Hashtable(3, (float).8, new myCultureComparer());\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a hash table using an IEqualityComparer that is based on\n        // the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        // version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        Hashtable myHT3 = new Hashtable(3, (float).8, \n            new myCultureComparer(myCul));\n\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;));\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;));\n\n    }\n\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nfirst is in myHT1: False\nfirst is in myHT2: True\nfirst is in myHT3: False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Hashtable_ctorIntFloat#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class myCultureComparer\n    Implements IEqualityComparer\n\n    Dim myComparer As CaseInsensitiveComparer\n\n    Public Sub New()\n        myComparer = CaseInsensitiveComparer.DefaultInvariant\n    End Sub\n\n    Public Sub New(ByVal myCulture As CultureInfo)\n        myComparer = New CaseInsensitiveComparer(myCulture)\n    End Sub\n\n    Public Function Equals1(ByVal x As Object, ByVal y As Object) _\n        As Boolean Implements IEqualityComparer.Equals\n\n        If (myComparer.Compare(x, y) = 0) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Function GetHashCode1(ByVal obj As Object) _\n        As Integer Implements IEqualityComparer.GetHashCode\n        Return obj.ToString().ToLower().GetHashCode()\n    End Function\nEnd Class\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Create a hash table using the default comparer.\n        Dim myHT1 As New Hashtable(3, System.Convert.ToSingle(0.8))\n        myHT1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using the specified IEqualityComparer that uses\n        &#39; the CaseInsensitiveComparer.DefaultInvariant to determine equality.\n        Dim myHT2 As New Hashtable(3, System.Convert.ToSingle(0.8), _\n            New myCultureComparer())\n\n        myHT2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a hash table using an IEqualityComparer that is based on\n        &#39; the Turkish culture (tr-TR) where &quot;I&quot; is not the uppercase\n        &#39; version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim myHT3 As New Hashtable(3, System.Convert.ToSingle(0.8), _\n            New myCultureComparer(myCul))\n\n        myHT3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Search for a key in each hash table.\n        Console.WriteLine(&quot;first is in myHT1: {0}&quot;, myHT1.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT2: {0}&quot;, myHT2.ContainsKey(&quot;first&quot;))\n        Console.WriteLine(&quot;first is in myHT3: {0}&quot;, myHT3.ContainsKey(&quot;first&quot;))\n\n    End Sub &#39;Main \n\nEnd Class &#39;SamplesHashtable\n\n\n&#39;This code produces the following output.\n&#39;Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;first is in myHT1: False\n&#39;first is in myHT2: True\n&#39;first is in myHT3: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_comparer\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_comparer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">comparer</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> to use for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.IComparer comparer { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> to use for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is set to a value, but the hash table was created using an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Count\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of key/value pairs contained in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of key/value pairs contained in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_EqualityComparer\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_EqualityComparer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EqualityComparer</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> to use for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.IEqualityComparer EqualityComparer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> to use for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is set to a value, but the hash table was created using an <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> and an <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> includes both the comparer and the hash code provider. If an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> is used in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> constructor, the objects used as keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are not required to override the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_hcp\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_hcp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">hcp</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the object that can dispense hash codes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.IHashCodeProvider hcp { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a></div>\r\n                  </div>\r\n                  <p>The object that can dispense hash codes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is set to a value, but the hash table was created using an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> has a fixed size; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is read-only; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is synchronized (thread safe); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> can support one writer and multiple readers concurrently. To support multiple writers, all operations must be done through the wrapper returned by the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Synchronized_\" data-linktype=\"relative-path\">Synchronized</a> method.  </p>\n<p> Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration:  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Hashtable^ myCollection = gcnew Hashtable();\n        bool lockTaken = false;\n\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Dim myCollection As New Hashtable()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Hashtable myCollection = new Hashtable();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to synchronize a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, determine if a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is synchronized, and use a synchronized <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Hashtable.IsSynchronized Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Hashtable.\n       Hashtable myHT = new Hashtable();\n       myHT.Add( 0, &quot;zero&quot; );\n       myHT.Add( 1, &quot;one&quot; );\n       myHT.Add( 2, &quot;two&quot; );\n       myHT.Add( 3, &quot;three&quot; );\n       myHT.Add( 4, &quot;four&quot; );\n \n       // Creates a synchronized wrapper around the Hashtable.\n       Hashtable mySyncdHT = Hashtable.Synchronized( myHT );\n \n       // Displays the sychronization status of both Hashtables.\n       Console.WriteLine( &quot;myHT is {0}.&quot;, myHT.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n       Console.WriteLine( &quot;mySyncdHT is {0}.&quot;, mySyncdHT.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n    }\n }\n /* \n This code produces the following output.\n \n myHT is not synchronized.\n mySyncdHT is synchronized.\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Hashtable.IsSynchronized Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid main()\n{\n   \n   // Creates and initializes a new Hashtable.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( (int^)0, &quot;zero&quot; );\n   myHT-&gt;Add( 1, &quot;one&quot; );\n   myHT-&gt;Add( 2, &quot;two&quot; );\n   myHT-&gt;Add( 3, &quot;three&quot; );\n   myHT-&gt;Add( 4, &quot;four&quot; );\n   \n   // Creates a synchronized wrapper around the Hashtable.\n   Hashtable^ mySyncdHT = Hashtable::Synchronized( myHT );\n   \n   // Displays the sychronization status of both Hashtables.\n   Console::WriteLine( &quot;myHT is {0}.&quot;, myHT-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n   Console::WriteLine( &quot;mySyncdHT is {0}.&quot;, mySyncdHT-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n}\n\n/*\n This code produces the following output.\n\n myHT is not synchronized.\n mySyncdHT is synchronized.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.IsSynchronized Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesHashtable    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Hashtable.\n        Dim myHT As New Hashtable()\n        myHT.Add(0, &quot;zero&quot;)\n        myHT.Add(1, &quot;one&quot;)\n        myHT.Add(2, &quot;two&quot;)\n        myHT.Add(3, &quot;three&quot;)\n        myHT.Add(4, &quot;four&quot;)\n        \n        &#39; Creates a synchronized wrapper around the Hashtable.\n        Dim mySyncdHT As Hashtable = Hashtable.Synchronized(myHT)\n        \n        &#39; Displays the sychronization status of both Hashtables.\n        Dim msg As String\n        If myHT.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;myHT is {0}.&quot;, msg)\n        If mySyncdHT.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If        \n        Console.WriteLine(&quot;mySyncdHT is {0}.&quot;, msg)\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myHT is not synchronized.\n&#39; mySyncdHT is synchronized. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Item_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value associated with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object this[object key] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key whose value to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <code>null</code>, and attempting to set it creates a new element using the specified key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The property is set and the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The property is set, <code>key</code> does not exist in the collection, and the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.  </p>\n<p> You can also use the Item property to add new elements by setting the value of a key that does not exist in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>. However, if the specified key already exists in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, setting the Item property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> A key cannot be <code>null</code>, but a value can be. To distinguish between <code>null</code> that is returned because the specified key is not found and <code>null</code> that is returned because the value of the specified key is <code>null</code>, use the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Contains_\" data-linktype=\"relative-path\">Contains</a> method or the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a> method to determine if the key exists in the list.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the <a class=\"xref\" href=\"system.collections.ilist#System_Collections_IList_Item_\" data-linktype=\"relative-path\">Item</a> property. Visual Basic implements Item as a default property, which provides the same indexing functionality.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Keys\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.ICollection Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is unspecified, but it is the same order as the associated values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> returned by the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Values_\" data-linktype=\"relative-path\">Values</a> method.  </p>\n<p> The returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is not a static copy; instead, the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> refers back to the keys in the original <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. Therefore, changes to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> continue to be reflected in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To create a synchronized version of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, use the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Synchronized_\" data-linktype=\"relative-path\">Synchronized</a> method. However, derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, not directly on the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> . This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Hashtable^ myCollection = gcnew Hashtable();\n        bool lockTaken = false;\n\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Dim myCollection As New Hashtable()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Hashtable myCollection = new Hashtable();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Values\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Values</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the values in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.ICollection Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the values in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is unspecified, but it is the same order as the associated keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> returned by the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Keys_\" data-linktype=\"relative-path\">Keys</a> method.  </p>\n<p> The returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is not a static copy; instead, the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> refers back to the values in the original <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. Therefore, changes to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> continue to be reflected in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Add_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an element with the specified key and value into the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Add (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to add. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element with the same key already exists in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A key cannot be <code>null</code>, but a value can be.  </p>\n<p> An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>. However, if the specified key already exists in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, setting the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the Add method does not modify existing elements.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a> is less than the capacity of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to add elements to the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.Add Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintKeysAndValues( Hashtable^ myHT );\nint main()\n{\n   \n   // Creates and initializes a new Hashtable.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( &quot;one&quot;, &quot;The&quot; );\n   myHT-&gt;Add( &quot;two&quot;, &quot;quick&quot; );\n   myHT-&gt;Add( &quot;three&quot;, &quot;brown&quot; );\n   myHT-&gt;Add( &quot;four&quot;, &quot;fox&quot; );\n   \n   // Displays the Hashtable.\n   Console::WriteLine( &quot;The Hashtable contains the following:&quot; );\n   PrintKeysAndValues( myHT );\n}\n\nvoid PrintKeysAndValues( Hashtable^ myHT )\n{\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   IEnumerator^ myEnum = myHT-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      DictionaryEntry de = *safe_cast&lt;DictionaryEntry ^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, de.Key, de.Value );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The Hashtable contains the following:\n         -KEY-   -VALUE-\n         two:    quick\n         three:  brown\n         four:   fox\n         one:    The\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.Add Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Hashtable.\n       Hashtable myHT = new Hashtable();\n       myHT.Add( &quot;one&quot;, &quot;The&quot; );\n       myHT.Add( &quot;two&quot;, &quot;quick&quot; );\n       myHT.Add( &quot;three&quot;, &quot;brown&quot; );\n       myHT.Add( &quot;four&quot;, &quot;fox&quot; );\n \n       // Displays the Hashtable.\n       Console.WriteLine( &quot;The Hashtable contains the following:&quot; );\n       PrintKeysAndValues( myHT );\n    }\n \n \n    public static void PrintKeysAndValues( Hashtable myHT )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       foreach ( DictionaryEntry de in myHT )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, de.Key, de.Value );\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The Hashtable contains the following:\n         -KEY-   -VALUE-\n         two:    quick\n         three:  brown\n         four:   fox\n         one:    The\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.Add Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new Hashtable.\n        Dim myHT As New Hashtable()\n        myHT.Add(&quot;one&quot;, &quot;The&quot;)\n        myHT.Add(&quot;two&quot;, &quot;quick&quot;)\n        myHT.Add(&quot;three&quot;, &quot;brown&quot;)\n        myHT.Add(&quot;four&quot;, &quot;fox&quot;)\n\n        &#39; Displays the Hashtable.\n        Console.WriteLine(&quot;The Hashtable contains the following:&quot;)\n        PrintKeysAndValues(myHT)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintKeysAndValues(myHT As Hashtable)\n        Console.WriteLine(vbTab + &quot;-KEY-&quot; + vbTab + &quot;-VALUE-&quot;)\n        Dim de As DictionaryEntry\n        For Each de In  myHT\n            Console.WriteLine(vbTab + &quot;{0}:&quot; + vbTab + &quot;{1}&quot;, de.Key, de.Value)\n        Next de\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesHashtable\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Hashtable contains the following:\n&#39;         -KEY-   -VALUE-\n&#39;         two:    quick\n&#39;         three:  brown\n&#39;         four:   fox\n&#39;         one:    The\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Clear\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released. The capacity remains unchanged.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to clear the values of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.Clear Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintKeysAndValues( Hashtable^ myHT );\nint main()\n{\n   \n   // Creates and initializes a new Hashtable.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( &quot;one&quot;, &quot;The&quot; );\n   myHT-&gt;Add( &quot;two&quot;, &quot;quick&quot; );\n   myHT-&gt;Add( &quot;three&quot;, &quot;brown&quot; );\n   myHT-&gt;Add( &quot;four&quot;, &quot;fox&quot; );\n   myHT-&gt;Add( &quot;five&quot;, &quot;jumped&quot; );\n   \n   // Displays the count and values of the Hashtable.\n   Console::WriteLine( &quot;Initially,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myHT-&gt;Count );\n   Console::WriteLine( &quot;   Values:&quot; );\n   PrintKeysAndValues( myHT );\n   \n   // Clears the Hashtable.\n   myHT-&gt;Clear();\n   \n   // Displays the count and values of the Hashtable.\n   Console::WriteLine( &quot;After Clear,&quot; );\n   Console::WriteLine( &quot;   Count    : {0}&quot;, myHT-&gt;Count );\n   Console::WriteLine( &quot;   Values:&quot; );\n   PrintKeysAndValues( myHT );\n}\n\nvoid PrintKeysAndValues( Hashtable^ myHT )\n{\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   IEnumerator^ myEnum = myHT-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      DictionaryEntry de = *safe_cast&lt;DictionaryEntry ^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, de.Key, de.Value );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Values:\n         -KEY-   -VALUE-\n         two:    quick\n         three:  brown\n         four:   fox\n         five:   jumped\n         one:    The\n\n After Clear,\n    Count    : 0\n    Values:\n         -KEY-   -VALUE-\n\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.Clear Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new Hashtable.\n        Dim myHT As New Hashtable()\n        myHT.Add(&quot;one&quot;, &quot;The&quot;)\n        myHT.Add(&quot;two&quot;, &quot;quick&quot;)\n        myHT.Add(&quot;three&quot;, &quot;brown&quot;)\n        myHT.Add(&quot;four&quot;, &quot;fox&quot;)\n        myHT.Add(&quot;five&quot;, &quot;jumped&quot;)\n\n        &#39; Displays the count and values of the Hashtable.\n        Console.WriteLine(&quot;Initially,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myHT.Count)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(myHT)\n\n        &#39; Clears the Hashtable.\n        myHT.Clear()\n\n        &#39; Displays the count and values of the Hashtable.\n        Console.WriteLine(&quot;After Clear,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, myHT.Count)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(myHT)\n\n    End Sub &#39;Main\n\n\n    Public Shared Sub PrintKeysAndValues(myHT As Hashtable)\n        Console.WriteLine(vbTab + &quot;-KEY-&quot; + vbTab + &quot;-VALUE-&quot;)\n        Dim de As DictionaryEntry\n        For Each de In  myHT\n            Console.WriteLine(vbTab + &quot;{0}:&quot; + vbTab + &quot;{1}&quot;, de.Key, de.Value)\n        Next de\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesHashtable \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initially,\n&#39;    Count    : 5\n&#39;    Values:\n&#39;         -KEY-   -VALUE-\n&#39;         two:    quick\n&#39;         three:  brown\n&#39;         four:   fox\n&#39;         five:   jumped\n&#39;         one:    The\n&#39;\n&#39; After Clear,\n&#39;    Count    : 0\n&#39;    Values:\n&#39;         -KEY-   -VALUE-\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.Clear Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Hashtable.\n       Hashtable myHT = new Hashtable();\n       myHT.Add( &quot;one&quot;, &quot;The&quot; );\n       myHT.Add( &quot;two&quot;, &quot;quick&quot; );\n       myHT.Add( &quot;three&quot;, &quot;brown&quot; );\n       myHT.Add( &quot;four&quot;, &quot;fox&quot; );\n       myHT.Add( &quot;five&quot;, &quot;jumped&quot; );\n \n       // Displays the count and values of the Hashtable.\n       Console.WriteLine( &quot;Initially,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myHT.Count );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( myHT );\n \n       // Clears the Hashtable.\n       myHT.Clear();\n \n       // Displays the count and values of the Hashtable.\n       Console.WriteLine( &quot;After Clear,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, myHT.Count );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( myHT );\n    }\n \n \n    public static void PrintKeysAndValues( Hashtable myHT )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       foreach ( DictionaryEntry de in myHT )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, de.Key, de.Value );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Values:\n         -KEY-   -VALUE-\n         two:    quick\n         three:  brown\n         four:   fox\n         five:   jumped\n         one:    The\n\n After Clear,\n    Count    : 0\n    Values:\n         -KEY-   -VALUE-\n\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Clone\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A shallow copy of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  </p>\n<p> In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> clone has the same count, the same capacity, the same <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> implementation, and the same <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation as the original <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Contains (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains an element with the specified key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Contains implements <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Contains_\" data-linktype=\"relative-path\">Contains</a>. It behaves exactly as <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to determine whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.Contains Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( Hashtable^ myHT );\nint main()\n{\n   \n   // Creates and initializes a new Hashtable.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( (int^)0, &quot;zero&quot; );\n   myHT-&gt;Add( 1, &quot;one&quot; );\n   myHT-&gt;Add( 2, &quot;two&quot; );\n   myHT-&gt;Add( 3, &quot;three&quot; );\n   myHT-&gt;Add( 4, &quot;four&quot; );\n   \n   // Displays the values of the Hashtable.\n   Console::WriteLine( &quot;The Hashtable contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( myHT );\n   \n   // Searches for a specific key.\n   int myKey = 2;\n   Console::WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT-&gt;ContainsKey( myKey ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   myKey = 6;\n   Console::WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT-&gt;ContainsKey( myKey ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   \n   // Searches for a specific value.\n   String^ myValue = &quot;three&quot;;\n   Console::WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT-&gt;ContainsValue( myValue ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   myValue = &quot;nine&quot;;\n   Console::WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT-&gt;ContainsValue( myValue ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n}\n\nvoid PrintIndexAndKeysAndValues( Hashtable^ myHT )\n{\n   int i = 0;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   IEnumerator^ myEnum = myHT-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      DictionaryEntry de =  *safe_cast&lt;DictionaryEntry ^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i++, de.Key, de.Value );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The Hashtable contains the following values:\n         -INDEX- -KEY-   -VALUE-\n         [0]:    4       four\n         [1]:    3       three\n         [2]:    2       two\n         [3]:    1       one\n         [4]:    0       zero\n\n The key &quot;2&quot; is in the Hashtable.\n The key &quot;6&quot; is NOT in the Hashtable.\n The value &quot;three&quot; is in the Hashtable.\n The value &quot;nine&quot; is NOT in the Hashtable.\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.Contains Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Hashtable.\n       Hashtable myHT = new Hashtable();\n       myHT.Add( 0, &quot;zero&quot; );\n       myHT.Add( 1, &quot;one&quot; );\n       myHT.Add( 2, &quot;two&quot; );\n       myHT.Add( 3, &quot;three&quot; );\n       myHT.Add( 4, &quot;four&quot; );\n \n       // Displays the values of the Hashtable.\n       Console.WriteLine( &quot;The Hashtable contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( myHT );\n \n       // Searches for a specific key.\n       int myKey = 2;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT.ContainsKey( myKey ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n       myKey = 6;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT.ContainsKey( myKey ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n \n       // Searches for a specific value.\n       String myValue = &quot;three&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT.ContainsValue( myValue ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n       myValue = &quot;nine&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT.ContainsValue( myValue ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( Hashtable myHT )  {\n       int i = 0;\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       foreach ( DictionaryEntry de in myHT )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i++, de.Key, de.Value );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The Hashtable contains the following values:\n         -INDEX- -KEY-   -VALUE-\n         [0]:    4       four\n         [1]:    3       three\n         [2]:    2       two\n         [3]:    1       one\n         [4]:    0       zero\n\n The key &quot;2&quot; is in the Hashtable.\n The key &quot;6&quot; is NOT in the Hashtable.\n The value &quot;three&quot; is in the Hashtable.\n The value &quot;nine&quot; is NOT in the Hashtable.\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.Contains Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new Hashtable.\n        Dim myHT As New Hashtable()\n        myHT.Add(0, &quot;zero&quot;)\n        myHT.Add(1, &quot;one&quot;)\n        myHT.Add(2, &quot;two&quot;)\n        myHT.Add(3, &quot;three&quot;)\n        myHT.Add(4, &quot;four&quot;)\n\n        &#39; Displays the values of the Hashtable.\n        Console.WriteLine(&quot;The Hashtable contains the following values:&quot;)\n        PrintIndexAndKeysAndValues(myHT)\n\n        &#39; Searches for a specific key.\n        Dim myKey As Integer = 2\n        Console.Write(&quot;The key &quot;&quot;{0}&quot;&quot; is &quot;, myKey)\n        If(myHT.ContainsKey(myKey))\n           Console.WriteLine(&quot;in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot;NOT in the Hashtable.&quot;)\n        End If\n\n        myKey = 6\n        Console.Write(&quot;The key &quot;&quot;{0}&quot;&quot; is &quot;, myKey)\n        If(myHT.ContainsKey(myKey))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n        &#39; Searches for a specific value.\n        Dim myValue As String = &quot;three&quot;\n        Console.Write(&quot;The value &quot;&quot;{0}&quot;&quot; is &quot;, myValue)\n        If(myHT.ContainsValue(myValue))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n        myValue = &quot;nine&quot;\n        Console.Write(&quot;The value &quot;&quot;{0}&quot;&quot; is &quot;, myValue)\n        If(myHT.ContainsValue(myValue))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndKeysAndValues(myHT As Hashtable)\n        Dim i As Integer = 0\n        Console.WriteLine(vbTab + &quot;-INDEX-&quot; + vbTab + &quot;-KEY-&quot; + vbTab + &quot;-VALUE-&quot;)\n        Dim de As DictionaryEntry\n        For Each de In  myHT\n            Console.WriteLine(vbTab + &quot;[{0}]:&quot; + vbTab + &quot;{1}&quot; + vbTab + &quot;{2}&quot;, i, de.Key, de.Value)\n            i = i + 1\n        Next de\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndKeysAndValues\n\nEnd Class &#39;SamplesHashtable \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Hashtable contains the following values:\n&#39;         -INDEX- -KEY-   -VALUE-\n&#39;         [0]:    4       four\n&#39;         [1]:    3       three\n&#39;         [2]:    2       two\n&#39;         [3]:    1       one\n&#39;         [4]:    0       zero\n&#39;\n&#39; The key &quot;2&quot; is in the Hashtable.\n&#39; The key &quot;6&quot; is NOT in the Hashtable.\n&#39; The value &quot;three&quot; is in the Hashtable.\n&#39; The value &quot;nine&quot; is NOT in the Hashtable.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_ContainsKey_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_ContainsKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsKey(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ContainsKey (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains an element with the specified key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method behaves exactly as <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Contains_\" data-linktype=\"relative-path\">Contains</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to determine whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.Contains Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( Hashtable^ myHT );\nint main()\n{\n   \n   // Creates and initializes a new Hashtable.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( (int^)0, &quot;zero&quot; );\n   myHT-&gt;Add( 1, &quot;one&quot; );\n   myHT-&gt;Add( 2, &quot;two&quot; );\n   myHT-&gt;Add( 3, &quot;three&quot; );\n   myHT-&gt;Add( 4, &quot;four&quot; );\n   \n   // Displays the values of the Hashtable.\n   Console::WriteLine( &quot;The Hashtable contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( myHT );\n   \n   // Searches for a specific key.\n   int myKey = 2;\n   Console::WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT-&gt;ContainsKey( myKey ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   myKey = 6;\n   Console::WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT-&gt;ContainsKey( myKey ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   \n   // Searches for a specific value.\n   String^ myValue = &quot;three&quot;;\n   Console::WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT-&gt;ContainsValue( myValue ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   myValue = &quot;nine&quot;;\n   Console::WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT-&gt;ContainsValue( myValue ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n}\n\nvoid PrintIndexAndKeysAndValues( Hashtable^ myHT )\n{\n   int i = 0;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   IEnumerator^ myEnum = myHT-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      DictionaryEntry de =  *safe_cast&lt;DictionaryEntry ^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i++, de.Key, de.Value );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The Hashtable contains the following values:\n         -INDEX- -KEY-   -VALUE-\n         [0]:    4       four\n         [1]:    3       three\n         [2]:    2       two\n         [3]:    1       one\n         [4]:    0       zero\n\n The key &quot;2&quot; is in the Hashtable.\n The key &quot;6&quot; is NOT in the Hashtable.\n The value &quot;three&quot; is in the Hashtable.\n The value &quot;nine&quot; is NOT in the Hashtable.\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.Contains Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Hashtable.\n       Hashtable myHT = new Hashtable();\n       myHT.Add( 0, &quot;zero&quot; );\n       myHT.Add( 1, &quot;one&quot; );\n       myHT.Add( 2, &quot;two&quot; );\n       myHT.Add( 3, &quot;three&quot; );\n       myHT.Add( 4, &quot;four&quot; );\n \n       // Displays the values of the Hashtable.\n       Console.WriteLine( &quot;The Hashtable contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( myHT );\n \n       // Searches for a specific key.\n       int myKey = 2;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT.ContainsKey( myKey ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n       myKey = 6;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT.ContainsKey( myKey ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n \n       // Searches for a specific value.\n       String myValue = &quot;three&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT.ContainsValue( myValue ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n       myValue = &quot;nine&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT.ContainsValue( myValue ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( Hashtable myHT )  {\n       int i = 0;\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       foreach ( DictionaryEntry de in myHT )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i++, de.Key, de.Value );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The Hashtable contains the following values:\n         -INDEX- -KEY-   -VALUE-\n         [0]:    4       four\n         [1]:    3       three\n         [2]:    2       two\n         [3]:    1       one\n         [4]:    0       zero\n\n The key &quot;2&quot; is in the Hashtable.\n The key &quot;6&quot; is NOT in the Hashtable.\n The value &quot;three&quot; is in the Hashtable.\n The value &quot;nine&quot; is NOT in the Hashtable.\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.Contains Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new Hashtable.\n        Dim myHT As New Hashtable()\n        myHT.Add(0, &quot;zero&quot;)\n        myHT.Add(1, &quot;one&quot;)\n        myHT.Add(2, &quot;two&quot;)\n        myHT.Add(3, &quot;three&quot;)\n        myHT.Add(4, &quot;four&quot;)\n\n        &#39; Displays the values of the Hashtable.\n        Console.WriteLine(&quot;The Hashtable contains the following values:&quot;)\n        PrintIndexAndKeysAndValues(myHT)\n\n        &#39; Searches for a specific key.\n        Dim myKey As Integer = 2\n        Console.Write(&quot;The key &quot;&quot;{0}&quot;&quot; is &quot;, myKey)\n        If(myHT.ContainsKey(myKey))\n           Console.WriteLine(&quot;in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot;NOT in the Hashtable.&quot;)\n        End If\n\n        myKey = 6\n        Console.Write(&quot;The key &quot;&quot;{0}&quot;&quot; is &quot;, myKey)\n        If(myHT.ContainsKey(myKey))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n        &#39; Searches for a specific value.\n        Dim myValue As String = &quot;three&quot;\n        Console.Write(&quot;The value &quot;&quot;{0}&quot;&quot; is &quot;, myValue)\n        If(myHT.ContainsValue(myValue))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n        myValue = &quot;nine&quot;\n        Console.Write(&quot;The value &quot;&quot;{0}&quot;&quot; is &quot;, myValue)\n        If(myHT.ContainsValue(myValue))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndKeysAndValues(myHT As Hashtable)\n        Dim i As Integer = 0\n        Console.WriteLine(vbTab + &quot;-INDEX-&quot; + vbTab + &quot;-KEY-&quot; + vbTab + &quot;-VALUE-&quot;)\n        Dim de As DictionaryEntry\n        For Each de In  myHT\n            Console.WriteLine(vbTab + &quot;[{0}]:&quot; + vbTab + &quot;{1}&quot; + vbTab + &quot;{2}&quot;, i, de.Key, de.Value)\n            i = i + 1\n        Next de\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndKeysAndValues\n\nEnd Class &#39;SamplesHashtable \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Hashtable contains the following values:\n&#39;         -INDEX- -KEY-   -VALUE-\n&#39;         [0]:    4       four\n&#39;         [1]:    3       three\n&#39;         [2]:    2       two\n&#39;         [3]:    1       one\n&#39;         [4]:    0       zero\n&#39;\n&#39; The key &quot;2&quot; is in the Hashtable.\n&#39; The key &quot;6&quot; is NOT in the Hashtable.\n&#39; The value &quot;three&quot; is in the Hashtable.\n&#39; The value &quot;nine&quot; is NOT in the Hashtable.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_ContainsValue_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_ContainsValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ContainsValue (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to locate in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains an element with the specified <code>value</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The values of the elements of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to determine whether the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> contains a specific element.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.Contains Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( Hashtable^ myHT );\nint main()\n{\n   \n   // Creates and initializes a new Hashtable.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( (int^)0, &quot;zero&quot; );\n   myHT-&gt;Add( 1, &quot;one&quot; );\n   myHT-&gt;Add( 2, &quot;two&quot; );\n   myHT-&gt;Add( 3, &quot;three&quot; );\n   myHT-&gt;Add( 4, &quot;four&quot; );\n   \n   // Displays the values of the Hashtable.\n   Console::WriteLine( &quot;The Hashtable contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( myHT );\n   \n   // Searches for a specific key.\n   int myKey = 2;\n   Console::WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT-&gt;ContainsKey( myKey ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   myKey = 6;\n   Console::WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT-&gt;ContainsKey( myKey ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   \n   // Searches for a specific value.\n   String^ myValue = &quot;three&quot;;\n   Console::WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT-&gt;ContainsValue( myValue ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n   myValue = &quot;nine&quot;;\n   Console::WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT-&gt;ContainsValue( myValue ) ? (String^)&quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n}\n\nvoid PrintIndexAndKeysAndValues( Hashtable^ myHT )\n{\n   int i = 0;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   IEnumerator^ myEnum = myHT-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      DictionaryEntry de =  *safe_cast&lt;DictionaryEntry ^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i++, de.Key, de.Value );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The Hashtable contains the following values:\n         -INDEX- -KEY-   -VALUE-\n         [0]:    4       four\n         [1]:    3       three\n         [2]:    2       two\n         [3]:    1       one\n         [4]:    0       zero\n\n The key &quot;2&quot; is in the Hashtable.\n The key &quot;6&quot; is NOT in the Hashtable.\n The value &quot;three&quot; is in the Hashtable.\n The value &quot;nine&quot; is NOT in the Hashtable.\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.Contains Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Hashtable.\n       Hashtable myHT = new Hashtable();\n       myHT.Add( 0, &quot;zero&quot; );\n       myHT.Add( 1, &quot;one&quot; );\n       myHT.Add( 2, &quot;two&quot; );\n       myHT.Add( 3, &quot;three&quot; );\n       myHT.Add( 4, &quot;four&quot; );\n \n       // Displays the values of the Hashtable.\n       Console.WriteLine( &quot;The Hashtable contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( myHT );\n \n       // Searches for a specific key.\n       int myKey = 2;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT.ContainsKey( myKey ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n       myKey = 6;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, myHT.ContainsKey( myKey ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n \n       // Searches for a specific value.\n       String myValue = &quot;three&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT.ContainsValue( myValue ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n       myValue = &quot;nine&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, myHT.ContainsValue( myValue ) ? &quot;in the Hashtable&quot; : &quot;NOT in the Hashtable&quot; );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( Hashtable myHT )  {\n       int i = 0;\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       foreach ( DictionaryEntry de in myHT )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i++, de.Key, de.Value );\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The Hashtable contains the following values:\n         -INDEX- -KEY-   -VALUE-\n         [0]:    4       four\n         [1]:    3       three\n         [2]:    2       two\n         [3]:    1       one\n         [4]:    0       zero\n\n The key &quot;2&quot; is in the Hashtable.\n The key &quot;6&quot; is NOT in the Hashtable.\n The value &quot;three&quot; is in the Hashtable.\n The value &quot;nine&quot; is NOT in the Hashtable.\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.Contains Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes a new Hashtable.\n        Dim myHT As New Hashtable()\n        myHT.Add(0, &quot;zero&quot;)\n        myHT.Add(1, &quot;one&quot;)\n        myHT.Add(2, &quot;two&quot;)\n        myHT.Add(3, &quot;three&quot;)\n        myHT.Add(4, &quot;four&quot;)\n\n        &#39; Displays the values of the Hashtable.\n        Console.WriteLine(&quot;The Hashtable contains the following values:&quot;)\n        PrintIndexAndKeysAndValues(myHT)\n\n        &#39; Searches for a specific key.\n        Dim myKey As Integer = 2\n        Console.Write(&quot;The key &quot;&quot;{0}&quot;&quot; is &quot;, myKey)\n        If(myHT.ContainsKey(myKey))\n           Console.WriteLine(&quot;in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot;NOT in the Hashtable.&quot;)\n        End If\n\n        myKey = 6\n        Console.Write(&quot;The key &quot;&quot;{0}&quot;&quot; is &quot;, myKey)\n        If(myHT.ContainsKey(myKey))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n        &#39; Searches for a specific value.\n        Dim myValue As String = &quot;three&quot;\n        Console.Write(&quot;The value &quot;&quot;{0}&quot;&quot; is &quot;, myValue)\n        If(myHT.ContainsValue(myValue))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n        myValue = &quot;nine&quot;\n        Console.Write(&quot;The value &quot;&quot;{0}&quot;&quot; is &quot;, myValue)\n        If(myHT.ContainsValue(myValue))\n           Console.WriteLine(&quot; in the Hashtable.&quot;)\n        Else\n           Console.WriteLine(&quot; NOT in the Hashtable.&quot;)\n        End If\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndKeysAndValues(myHT As Hashtable)\n        Dim i As Integer = 0\n        Console.WriteLine(vbTab + &quot;-INDEX-&quot; + vbTab + &quot;-KEY-&quot; + vbTab + &quot;-VALUE-&quot;)\n        Dim de As DictionaryEntry\n        For Each de In  myHT\n            Console.WriteLine(vbTab + &quot;[{0}]:&quot; + vbTab + &quot;{1}&quot; + vbTab + &quot;{2}&quot;, i, de.Key, de.Value)\n            i = i + 1\n        Next de\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndKeysAndValues\n\nEnd Class &#39;SamplesHashtable \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Hashtable contains the following values:\n&#39;         -INDEX- -KEY-   -VALUE-\n&#39;         [0]:    4       four\n&#39;         [1]:    3       three\n&#39;         [2]:    2       two\n&#39;         [3]:    1       one\n&#39;         [4]:    0       zero\n&#39;\n&#39; The key &quot;2&quot; is in the Hashtable.\n&#39; The key &quot;6&quot; is NOT in the Hashtable.\n&#39; The value &quot;three&quot; is in the Hashtable.\n&#39; The value &quot;nine&quot; is NOT in the Hashtable.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> elements to a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void CopyTo (Array array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects copied from <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> To copy only the keys in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, use <code>Hashtable.Keys.CopyTo</code>.  </p>\n<p> To copy only the values in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, use <code>Hashtable.Values.CopyTo</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to copy the list of keys or the list of values in a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> into a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Hashtable.CopyTo Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes the source Hashtable.\n       Hashtable mySourceHT = new Hashtable();\n       mySourceHT.Add( &quot;A&quot;, &quot;valueA&quot; );\n       mySourceHT.Add( &quot;B&quot;, &quot;valueB&quot; );\n \n       // Creates and initializes the one-dimensional target Array.\n       String[] myTargetArray = new String[15];\n       myTargetArray[0] = &quot;The&quot;;\n       myTargetArray[1] = &quot;quick&quot;;\n       myTargetArray[2] = &quot;brown&quot;;\n       myTargetArray[3] = &quot;fox&quot;;\n       myTargetArray[4] = &quot;jumped&quot;;\n       myTargetArray[5] = &quot;over&quot;;\n       myTargetArray[6] = &quot;the&quot;;\n       myTargetArray[7] = &quot;lazy&quot;;\n       myTargetArray[8] = &quot;dog&quot;;\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target Array contains the following before:&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the keys in the source Hashtable to the target Hashtable, starting at index 6.\n       Console.WriteLine( &quot;After copying the keys, starting at index 6:&quot; );\n       mySourceHT.Keys.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the values in the source Hashtable to the target Hashtable, starting at index 6.\n       Console.WriteLine( &quot;After copying the values, starting at index 6:&quot; );\n       mySourceHT.Values.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n    }\n \n    public static void PrintValues( String[] myArr, char mySeparator )  {\n       for ( int i = 0; i &lt; myArr.Length; i++ )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myArr[i] );\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The target Array contains the following before:\n  The quick brown fox jumped over the lazy dog\n After copying the keys, starting at index 6:\n  The quick brown fox jumped over B A dog\n After copying the values, starting at index 6:\n  The quick brown fox jumped over valueB valueA dog\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.CopyTo Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesHashtable\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes the source Hashtable.\n        Dim mySourceHT As New Hashtable()\n        mySourceHT.Add(&quot;A&quot;, &quot;valueA&quot;)\n        mySourceHT.Add(&quot;B&quot;, &quot;valueB&quot;)\n\n        &#39; Creates and initializes the one-dimensional target Array.\n        Dim myTargetArray(14) As String\n        myTargetArray(0) = &quot;The&quot;\n        myTargetArray(1) = &quot;quick&quot;\n        myTargetArray(2) = &quot;brown&quot;\n        myTargetArray(3) = &quot;fox&quot;\n        myTargetArray(4) = &quot;jumped&quot;\n        myTargetArray(5) = &quot;over&quot;\n        myTargetArray(6) = &quot;the&quot;\n        myTargetArray(7) = &quot;lazy&quot;\n        myTargetArray(8) = &quot;dog&quot;\n\n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target Array contains the following before:&quot;)\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the keys in the source Hashtable to the target Hashtable, starting at index 6.\n        Console.WriteLine(&quot;After copying the keys, starting at index 6:&quot;)\n        mySourceHT.Keys.CopyTo(myTargetArray, 6)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n        &#39; Copies the values in the source Hashtable to the target Hashtable, starting at index 6.\n        Console.WriteLine(&quot;After copying the values, starting at index 6:&quot;)\n        mySourceHT.Values.CopyTo(myTargetArray, 6)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myArr() As String, mySeparator As Char)\n        Dim i As Integer\n        For i = 0 To myArr.Length - 1\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesHashtable\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The target Array contains the following before:\n&#39;  The quick brown fox jumped over the lazy dog\n&#39; After copying the keys, starting at index 6:\n&#39;  The quick brown fox jumped over B A dog\n&#39; After copying the values, starting at index 6:\n&#39;  The quick brown fox jumped over valueB valueA dog\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Hashtable.CopyTo Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( array&lt;String^&gt;^myArr, char mySeparator );\nint main()\n{\n   \n   // Creates and initializes the source Hashtable.\n   Hashtable^ mySourceHT = gcnew Hashtable;\n   mySourceHT-&gt;Add( &quot;A&quot;, &quot;valueA&quot; );\n   mySourceHT-&gt;Add( &quot;B&quot;, &quot;valueB&quot; );\n   \n   // Creates and initializes the one-dimensional target Array.\n   array&lt;String^&gt;^myTargetArray = gcnew array&lt;String^&gt;(15);\n   myTargetArray[ 0 ] = &quot;The&quot;;\n   myTargetArray[ 1 ] = &quot;quick&quot;;\n   myTargetArray[ 2 ] = &quot;brown&quot;;\n   myTargetArray[ 3 ] = &quot;fox&quot;;\n   myTargetArray[ 4 ] = &quot;jumped&quot;;\n   myTargetArray[ 5 ] = &quot;over&quot;;\n   myTargetArray[ 6 ] = &quot;the&quot;;\n   myTargetArray[ 7 ] = &quot;lazy&quot;;\n   myTargetArray[ 8 ] = &quot;dog&quot;;\n   \n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target Array contains the following before:&quot; );\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the keys in the source Hashtable to the target Hashtable, starting at index 6.\n   Console::WriteLine( &quot;After copying the keys, starting at index 6:&quot; );\n   mySourceHT-&gt;Keys-&gt;CopyTo( myTargetArray, 6 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the values in the source Hashtable to the target Hashtable, starting at index 6.\n   Console::WriteLine( &quot;After copying the values, starting at index 6:&quot; );\n   mySourceHT-&gt;Values-&gt;CopyTo( myTargetArray, 6 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n}\n\nvoid PrintValues( array&lt;String^&gt;^myArr, char mySeparator )\n{\n   for ( int i = 0; i &lt; myArr-&gt;Length; i++ )\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, myArr[ i ] );\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The target Array contains the following before:\n  The quick brown fox jumped over the lazy dog\n After copying the keys, starting at index 6:\n  The quick brown fox jumped over B A dog\n After copying the values, starting at index 6:\n  The quick brown fox jumped over valueB valueA dog\n\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.  </p>\n<p> Because serializing and deserializing an enumerator for a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares the use of GetEnumerator and <code>foreach</code> to enumerate the contents of a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable Example#2\">using namespace System;\nusing namespace System::Collections;\n\npublic class HashtableExample\n{\npublic:\n    static void Main()\n    {\n        // Creates and initializes a new Hashtable.\n        Hashtable^ clouds = gcnew Hashtable();\n        clouds-&gt;Add(&quot;Cirrus&quot;, &quot;Castellanus&quot;);\n        clouds-&gt;Add(&quot;Cirrocumulus&quot;, &quot;Stratiformis&quot;);\n        clouds-&gt;Add(&quot;Altostratus&quot;, &quot;Radiatus&quot;);\n        clouds-&gt;Add(&quot;Stratocumulus&quot;, &quot;Perlucidus&quot;);\n        clouds-&gt;Add(&quot;Stratus&quot;, &quot;Fractus&quot;);\n        clouds-&gt;Add(&quot;Nimbostratus&quot;, &quot;Pannus&quot;);\n        clouds-&gt;Add(&quot;Cumulus&quot;, &quot;Humilis&quot;);\n        clouds-&gt;Add(&quot;Cumulonimbus&quot;, &quot;Incus&quot;);\n\n        // Displays the keys and values of the Hashtable using GetEnumerator()\n\n        IDictionaryEnumerator^ denum = clouds-&gt;GetEnumerator();\n        DictionaryEntry dentry;\n\n        Console::WriteLine();\n        Console::WriteLine(&quot;    Cloud Type       Variation&quot;);\n        Console::WriteLine(&quot;    -----------------------------&quot;);\n        while (denum-&gt;MoveNext())\n        {\n            dentry = (DictionaryEntry) denum-&gt;Current;\n            Console::WriteLine(&quot;    {0,-17}{1}&quot;, dentry.Key, dentry.Value);\n        }\n        Console::WriteLine();\n\n        // Displays the keys and values of the Hashtable using foreach statement\n\n        Console::WriteLine(&quot;    Cloud Type       Variation&quot;);\n        Console::WriteLine(&quot;    -----------------------------&quot;);\n        for each (DictionaryEntry de in clouds)\n        {\n            Console::WriteLine(&quot;    {0,-17}{1}&quot;, de.Key, de.Value);\n        }\n        Console::WriteLine();\n    }\n};\n\nint main()\n{\n    HashtableExample::Main();\n}\n\n// The program displays the following output to the console:\n//\n//    Cloud Type       Variation\n//    -----------------------------\n//    Cirrocumulus     Stratiformis\n//    Stratocumulus    Perlucidus\n//    Cirrus           Castellanus\n//    Cumulus          Humilis\n//    Nimbostratus     Pannus\n//    Stratus          Fractus\n//    Altostratus      Radiatus\n//    Cumulonimbus     Incus\n//\n//    Cloud Type       Variation\n//    -----------------------------\n//    Cirrocumulus     Stratiformis\n//    Stratocumulus    Perlucidus\n//    Cirrus           Castellanus\n//    Cumulus          Humilis\n//    Nimbostratus     Pannus\n//    Stratus          Fractus\n//    Altostratus      Radiatus\n//    Cumulonimbus     Incus*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable Example#2\">using System;\nusing System.Collections;\n\npublic class HashtableExample\n{\n    public static void Main()\n    {\n        // Creates and initializes a new Hashtable.\n        Hashtable clouds = new Hashtable();\n        clouds.Add(&quot;Cirrus&quot;, &quot;Castellanus&quot;);\n        clouds.Add(&quot;Cirrocumulus&quot;, &quot;Stratiformis&quot;);\n        clouds.Add(&quot;Altostratus&quot;, &quot;Radiatus&quot;);\n        clouds.Add(&quot;Stratocumulus&quot;, &quot;Perlucidus&quot;);\n        clouds.Add(&quot;Stratus&quot;, &quot;Fractus&quot;);\n        clouds.Add(&quot;Nimbostratus&quot;, &quot;Pannus&quot;);\n        clouds.Add(&quot;Cumulus&quot;, &quot;Humilis&quot;);\n        clouds.Add(&quot;Cumulonimbus&quot;, &quot;Incus&quot;);\n\n        // Displays the keys and values of the Hashtable using GetEnumerator()\n\n        IDictionaryEnumerator denum = clouds.GetEnumerator();\n        DictionaryEntry dentry;\n\n        Console.WriteLine();\n        Console.WriteLine(&quot;    Cloud Type       Variation&quot;);\n        Console.WriteLine(&quot;    -----------------------------&quot;);\n        while (denum.MoveNext())\n        {\n            dentry = (DictionaryEntry) denum.Current;\n            Console.WriteLine(&quot;    {0,-17}{1}&quot;, dentry.Key, dentry.Value);\n        }\n        Console.WriteLine();\n\n        // Displays the keys and values of the Hashtable using foreach statement\n\n        Console.WriteLine(&quot;    Cloud Type       Variation&quot;);\n        Console.WriteLine(&quot;    -----------------------------&quot;);\n        foreach (DictionaryEntry de in clouds)\n        {\n            Console.WriteLine(&quot;    {0,-17}{1}&quot;, de.Key, de.Value);\n        }\n        Console.WriteLine();\n    }\n}\n\n// The program displays the following output to the console:\n//\n//    Cloud Type       Variation\n//    -----------------------------\n//    Cirrocumulus     Stratiformis\n//    Stratocumulus    Perlucidus\n//    Cirrus           Castellanus\n//    Cumulus          Humilis\n//    Nimbostratus     Pannus\n//    Stratus          Fractus\n//    Altostratus      Radiatus\n//    Cumulonimbus     Incus\n//\n//    Cloud Type       Variation\n//    -----------------------------\n//    Cirrocumulus     Stratiformis\n//    Stratocumulus    Perlucidus\n//    Cirrus           Castellanus\n//    Cumulus          Humilis\n//    Nimbostratus     Pannus\n//    Stratus          Fractus\n//    Altostratus      Radiatus\n//    Cumulonimbus     Incus*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable Example#2\">Imports System\nImports System.Collections\n\nPublic Class HashtableExample\n    Public Shared Sub Main()\n        &#39; Creates and initializes a new Hashtable.\n        Dim clouds As New Hashtable()\n        clouds.Add(&quot;Cirrus&quot;, &quot;Castellanus&quot;)\n        clouds.Add(&quot;Cirrocumulus&quot;, &quot;Stratiformis&quot;)\n        clouds.Add(&quot;Altostratus&quot;, &quot;Radiatus&quot;)\n        clouds.Add(&quot;Stratocumulus&quot;, &quot;Perlucidus&quot;)\n        clouds.Add(&quot;Stratus&quot;, &quot;Fractus&quot;)\n        clouds.Add(&quot;Nimbostratus&quot;, &quot;Pannus&quot;)\n        clouds.Add(&quot;Cumulus&quot;, &quot;Humilis&quot;)\n        clouds.Add(&quot;Cumulonimbus&quot;, &quot;Incus&quot;)\n\n        &#39; Displays the keys and values of the Hashtable using GetEnumerator()\n\n        Dim denum As IDictionaryEnumerator = clouds.GetEnumerator()\n        Dim dentry As DictionaryEntry\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;    Cloud Type       Variation&quot;)\n        Console.WriteLine(&quot;    -----------------------------&quot;)\n        While denum.MoveNext()\n            dentry = CType(denum.Current, DictionaryEntry)\n            Console.WriteLine(&quot;    {0,-17}{1}&quot;, dentry.Key, dentry.Value)\n        End While\n        Console.WriteLine()\n\n        &#39; Displays the keys and values of the Hashtable using foreach statement\n\n        Console.WriteLine(&quot;    Cloud Type       Variation&quot;)\n        Console.WriteLine(&quot;    -----------------------------&quot;)\n        For Each de As DictionaryEntry in clouds\n            Console.WriteLine(&quot;    {0,-17}{1}&quot;, de.Key, de.Value)\n        Next de\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; The program displays the following output to the console:\n&#39;\n&#39;    Cloud Type       Variation\n&#39;    -----------------------------\n&#39;    Cirrocumulus     Stratiformis\n&#39;    Stratocumulus    Perlucidus\n&#39;    Cirrus           Castellanus\n&#39;    Cumulus          Humilis\n&#39;    Nimbostratus     Pannus\n&#39;    Stratus          Fractus\n&#39;    Altostratus      Radiatus\n&#39;    Cumulonimbus     Incus\n&#39;\n&#39;    Cloud Type       Variation\n&#39;    -----------------------------\n&#39;    Cirrocumulus     Stratiformis\n&#39;    Stratocumulus    Perlucidus\n&#39;    Cirrus           Castellanus\n&#39;    Cumulus          Humilis\n&#39;    Nimbostratus     Pannus\n&#39;    Stratus          Fractus\n&#39;    Altostratus      Radiatus\n&#39;    Cumulonimbus     Incus*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_GetHash_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_GetHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHash(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual int GetHash (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> for which a hash code is to be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The hash code for <code>key</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the hash table was created with a specific <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> implementation, this method uses that hash code provider; otherwise, it uses the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> implementation of <code>key</code>.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and returns the data needed to serialize the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object containing the information required to serialize the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object containing the source and destination of the serialized stream associated with the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>info</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The collection was modified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_KeyEquals_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_KeyEquals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyEquals(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares a specific <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> with a specific key in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool KeyEquals (object item, object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to compare with <code>key</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> to compare with <code>item</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> and <code>key</code> are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>item</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the hash table was created with a specific <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation, this method uses that comparer; that is, <a class=\"xref\" href=\"system.collections.icomparer#System_Collections_IComparer_Compare_\" data-linktype=\"relative-path\">Compare</a> (<code>item</code>, <code>key</code>). Otherwise, it uses <code>item.Equals(key)</code>.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_OnDeserialization_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_OnDeserialization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDeserialization(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and raises the deserialization event when the deserialization is complete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void OnDeserialization (object sender);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sender</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source of the deserialization event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object associated with the current <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Because serializing and deserializing an enumerator for a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Remove (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> does not contain an element with the specified key, the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> remains unchanged. No exception is thrown.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to remove elements from the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.Remove Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintKeysAndValues( Hashtable^ myHT );\nint main()\n{\n   \n   // Creates and initializes a new Hashtable.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( &quot;1a&quot;, &quot;The&quot; );\n   myHT-&gt;Add( &quot;1b&quot;, &quot;quick&quot; );\n   myHT-&gt;Add( &quot;1c&quot;, &quot;brown&quot; );\n   myHT-&gt;Add( &quot;2a&quot;, &quot;fox&quot; );\n   myHT-&gt;Add( &quot;2b&quot;, &quot;jumped&quot; );\n   myHT-&gt;Add( &quot;2c&quot;, &quot;over&quot; );\n   myHT-&gt;Add( &quot;3a&quot;, &quot;the&quot; );\n   myHT-&gt;Add( &quot;3b&quot;, &quot;lazy&quot; );\n   myHT-&gt;Add( &quot;3c&quot;, &quot;dog&quot; );\n   \n   // Displays the Hashtable.\n   Console::WriteLine( &quot;The Hashtable initially contains the following:&quot; );\n   PrintKeysAndValues( myHT );\n   \n   // Removes the element with the key &quot;3b&quot;.\n   myHT-&gt;Remove( &quot;3b&quot; );\n   \n   // Displays the current state of the Hashtable.\n   Console::WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n   PrintKeysAndValues( myHT );\n}\n\nvoid PrintKeysAndValues( Hashtable^ myHT )\n{\n   IEnumerator^ myEnum = myHT-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      DictionaryEntry de = *safe_cast&lt;DictionaryEntry ^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;    {0}:    {1}&quot;, de.Key, de.Value );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n The Hashtable initially contains the following:\n     2c:    over\n     3a:    the\n     2b:    jumped\n     3b:    lazy\n     1b:    quick\n     3c:    dog\n     2a:    fox\n     1c:    brown\n     1a:    The\n\n After removing &quot;lazy&quot;:\n     2c:    over\n     3a:    the\n     2b:    jumped\n     1b:    quick\n     3c:    dog\n     2a:    fox\n     1c:    brown\n     1a:    The\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.Remove Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Hashtable.\n       Hashtable myHT = new Hashtable();\n       myHT.Add( &quot;1a&quot;, &quot;The&quot; );\n       myHT.Add( &quot;1b&quot;, &quot;quick&quot; );\n       myHT.Add( &quot;1c&quot;, &quot;brown&quot; );\n       myHT.Add( &quot;2a&quot;, &quot;fox&quot; );\n       myHT.Add( &quot;2b&quot;, &quot;jumped&quot; );\n       myHT.Add( &quot;2c&quot;, &quot;over&quot; );\n       myHT.Add( &quot;3a&quot;, &quot;the&quot; );\n       myHT.Add( &quot;3b&quot;, &quot;lazy&quot; );\n       myHT.Add( &quot;3c&quot;, &quot;dog&quot; );\n \n       // Displays the Hashtable.\n       Console.WriteLine( &quot;The Hashtable initially contains the following:&quot; );\n       PrintKeysAndValues( myHT );\n \n       // Removes the element with the key &quot;3b&quot;.\n       myHT.Remove( &quot;3b&quot; );\n \n       // Displays the current state of the Hashtable.\n       Console.WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n       PrintKeysAndValues( myHT );\n    }\n \n \n    public static void PrintKeysAndValues( Hashtable myHT )  {\n       foreach ( DictionaryEntry de in myHT )\n          Console.WriteLine( &quot;    {0}:    {1}&quot;, de.Key, de.Value );\n       Console.WriteLine();\n    }\n\n }\n\n\n /*\n This code produces the following output.\n \n The Hashtable initially contains the following:\n     2c:    over\n     3a:    the\n     2b:    jumped\n     3b:    lazy\n     1b:    quick\n     3c:    dog\n     2a:    fox\n     1c:    brown\n     1a:    The\n\n After removing &quot;lazy&quot;:\n     2c:    over\n     3a:    the\n     2b:    jumped\n     1b:    quick\n     3c:    dog\n     2a:    fox\n     1c:    brown\n     1a:    The\n\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.Remove Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesHashtable    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Hashtable.\n        Dim myHT As New Hashtable()\n        myHT.Add(&quot;1a&quot;, &quot;The&quot;)\n        myHT.Add(&quot;1b&quot;, &quot;quick&quot;)\n        myHT.Add(&quot;1c&quot;, &quot;brown&quot;)\n        myHT.Add(&quot;2a&quot;, &quot;fox&quot;)\n        myHT.Add(&quot;2b&quot;, &quot;jumped&quot;)\n        myHT.Add(&quot;2c&quot;, &quot;over&quot;)\n        myHT.Add(&quot;3a&quot;, &quot;the&quot;)\n        myHT.Add(&quot;3b&quot;, &quot;lazy&quot;)\n        myHT.Add(&quot;3c&quot;, &quot;dog&quot;)\n        \n        &#39; Displays the Hashtable.\n        Console.WriteLine(&quot;The Hashtable initially contains the following:&quot;)\n        PrintKeysAndValues(myHT)\n        \n        &#39; Removes the element with the key &quot;3b&quot;.\n        myHT.Remove(&quot;3b&quot;)\n        \n        &#39; Displays the current state of the Hashtable.\n        Console.WriteLine(&quot;After removing &quot;&quot;lazy&quot;&quot;:&quot;)\n        PrintKeysAndValues(myHT)\n    End Sub    \n    \n    \n    Public Shared Sub PrintKeysAndValues(myHT As Hashtable)\n        Dim de As DictionaryEntry\n        For Each de In  myHT\n            Console.WriteLine(&quot;    {0}:    {1}&quot;, de.Key, de.Value)\n        Next de\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39;The Hashtable initially contains the following:\n&#39;    2c:    over\n&#39;    3a:    the\n&#39;    2b:    jumped\n&#39;    3b:    lazy\n&#39;    1b:    quick\n&#39;    3c:    dog\n&#39;    2a:    fox\n&#39;    1c:    brown\n&#39;    1a:    The\n&#39;\n&#39;After removing &quot;lazy&quot;:\n&#39;    2c:    over\n&#39;    3a:    the\n&#39;    2b:    jumped\n&#39;    1b:    quick\n&#39;    3c:    dog\n&#39;    2a:    fox\n&#39;    1c:    brown\n&#39;    1a:    The\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_Synchronized_System_Collections_Hashtable_\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_Synchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Synchronized(Hashtable)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a synchronized (thread-safe) wrapper for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> to synchronize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a></div>\r\n                  </div>\r\n                  <p>A synchronized (thread-safe) wrapper for the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>table</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Synchronized method is thread safe for multiple readers and writers. Furthermore, the synchronized wrapper ensures that there is only one writer writing at a time.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.hashtable#System_Collections_Hashtable_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration:  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Hashtable^ myCollection = gcnew Hashtable();\n        bool lockTaken = false;\n\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Dim myCollection As New Hashtable()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Hashtable.IsSynchronized Example#2\">        Hashtable myCollection = new Hashtable();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to synchronize a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>, determine if a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> is synchronized, and use a synchronized <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Hashtable.IsSynchronized Example#1\"> using System;\n using System.Collections;\n public class SamplesHashtable  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Hashtable.\n       Hashtable myHT = new Hashtable();\n       myHT.Add( 0, &quot;zero&quot; );\n       myHT.Add( 1, &quot;one&quot; );\n       myHT.Add( 2, &quot;two&quot; );\n       myHT.Add( 3, &quot;three&quot; );\n       myHT.Add( 4, &quot;four&quot; );\n \n       // Creates a synchronized wrapper around the Hashtable.\n       Hashtable mySyncdHT = Hashtable.Synchronized( myHT );\n \n       // Displays the sychronization status of both Hashtables.\n       Console.WriteLine( &quot;myHT is {0}.&quot;, myHT.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n       Console.WriteLine( &quot;mySyncdHT is {0}.&quot;, mySyncdHT.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n    }\n }\n /* \n This code produces the following output.\n \n myHT is not synchronized.\n mySyncdHT is synchronized.\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Hashtable.IsSynchronized Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid main()\n{\n   \n   // Creates and initializes a new Hashtable.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( (int^)0, &quot;zero&quot; );\n   myHT-&gt;Add( 1, &quot;one&quot; );\n   myHT-&gt;Add( 2, &quot;two&quot; );\n   myHT-&gt;Add( 3, &quot;three&quot; );\n   myHT-&gt;Add( 4, &quot;four&quot; );\n   \n   // Creates a synchronized wrapper around the Hashtable.\n   Hashtable^ mySyncdHT = Hashtable::Synchronized( myHT );\n   \n   // Displays the sychronization status of both Hashtables.\n   Console::WriteLine( &quot;myHT is {0}.&quot;, myHT-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n   Console::WriteLine( &quot;mySyncdHT is {0}.&quot;, mySyncdHT-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n}\n\n/*\n This code produces the following output.\n\n myHT is not synchronized.\n mySyncdHT is synchronized.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Hashtable.IsSynchronized Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesHashtable    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Hashtable.\n        Dim myHT As New Hashtable()\n        myHT.Add(0, &quot;zero&quot;)\n        myHT.Add(1, &quot;one&quot;)\n        myHT.Add(2, &quot;two&quot;)\n        myHT.Add(3, &quot;three&quot;)\n        myHT.Add(4, &quot;four&quot;)\n        \n        &#39; Creates a synchronized wrapper around the Hashtable.\n        Dim mySyncdHT As Hashtable = Hashtable.Synchronized(myHT)\n        \n        &#39; Displays the sychronization status of both Hashtables.\n        Dim msg As String\n        If myHT.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;myHT is {0}.&quot;, msg)\n        If mySyncdHT.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If        \n        Console.WriteLine(&quot;mySyncdHT is {0}.&quot;, msg)\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myHT is not synchronized.\n&#39; mySyncdHT is synchronized. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Hashtable_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Hashtable_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position. At this position, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. If the collection is modified between <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the element that it is set to, even if the enumerator is already invalidated.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Hashtable.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Hashtable.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Clone\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.comparer\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.ContainsKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.ContainsValue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.EqualityComparer\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.GetHash\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.hcp\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.KeyEquals\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.OnDeserialization\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Synchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Hashtable.Values\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ce4b5f3c-db43-5724-4eee-78e4f03d5ae6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections\\Hashtable.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a collection of key/value pairs that are organized based on the hash code of the key.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Hashtable\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Hashtable.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Hashtable.yml","open_to_public_contributors":true,"api_name":["System.Collections.Hashtable","System.Collections.Hashtable..ctor","System.Collections.Hashtable.Add","System.Collections.Hashtable.Clear","System.Collections.Hashtable.Clone","System.Collections.Hashtable.comparer","System.Collections.Hashtable.Contains","System.Collections.Hashtable.ContainsKey","System.Collections.Hashtable.ContainsValue","System.Collections.Hashtable.CopyTo","System.Collections.Hashtable.Count","System.Collections.Hashtable.EqualityComparer","System.Collections.Hashtable.GetEnumerator","System.Collections.Hashtable.GetHash","System.Collections.Hashtable.GetObjectData","System.Collections.Hashtable.hcp","System.Collections.Hashtable.IsFixedSize","System.Collections.Hashtable.IsReadOnly","System.Collections.Hashtable.IsSynchronized","System.Collections.Hashtable.Item","System.Collections.Hashtable.KeyEquals","System.Collections.Hashtable.Keys","System.Collections.Hashtable.OnDeserialization","System.Collections.Hashtable.Remove","System.Collections.Hashtable.Synchronized","System.Collections.Hashtable.SyncRoot","System.Collections.Hashtable.IEnumerable.GetEnumerator","System.Collections.Hashtable.Values"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Hashtable","System::Collections::Hashtable","System.Collections.Hashtable.#ctor","System::Collections::Hashtable::#ctor","System.Collections.Hashtable.Add","System::Collections::Hashtable::Add","System.Collections.Hashtable.Clear","System::Collections::Hashtable::Clear","System.Collections.Hashtable.Clone","System::Collections::Hashtable::Clone","System.Collections.Hashtable.comparer","System::Collections::Hashtable::comparer","System.Collections.Hashtable.Contains","System::Collections::Hashtable::Contains","System.Collections.Hashtable.ContainsKey","System::Collections::Hashtable::ContainsKey","System.Collections.Hashtable.ContainsValue","System::Collections::Hashtable::ContainsValue","System.Collections.Hashtable.CopyTo","System::Collections::Hashtable::CopyTo","System.Collections.Hashtable.Count","System::Collections::Hashtable::Count","System.Collections.Hashtable.EqualityComparer","System::Collections::Hashtable::EqualityComparer","System.Collections.Hashtable.GetEnumerator","System::Collections::Hashtable::GetEnumerator","System.Collections.Hashtable.GetHash","System::Collections::Hashtable::GetHash","System.Collections.Hashtable.GetObjectData","System::Collections::Hashtable::GetObjectData","System.Collections.Hashtable.hcp","System::Collections::Hashtable::hcp","System.Collections.Hashtable.IsFixedSize","System::Collections::Hashtable::IsFixedSize","System.Collections.Hashtable.IsReadOnly","System::Collections::Hashtable::IsReadOnly","System.Collections.Hashtable.IsSynchronized","System::Collections::Hashtable::IsSynchronized","System.Collections.Hashtable.Item","System::Collections::Hashtable::Item","System.Collections.Hashtable.KeyEquals","System::Collections::Hashtable::KeyEquals","System.Collections.Hashtable.Keys","System::Collections::Hashtable::Keys","System.Collections.Hashtable.OnDeserialization","System::Collections::Hashtable::OnDeserialization","System.Collections.Hashtable.Remove","System::Collections::Hashtable::Remove","System.Collections.Hashtable.Synchronized","System::Collections::Hashtable::Synchronized","System.Collections.Hashtable.SyncRoot","System::Collections::Hashtable::SyncRoot","System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator","System::Collections::Hashtable::System#Collections#IEnumerable#GetEnumerator","System.Collections.Hashtable.Values","System::Collections::Hashtable::Values"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ce4b5f3c-db43-5724-4eee-78e4f03d5ae6","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections\\Hashtable.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/Hashtable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Hashtable class | Microsoft Docs","_op_ogTitle":"Hashtable class","description":"Represents a collection of key/value pairs that are organized based on the hash code of the key.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.Hashtable","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.hashtable","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.hashtable","fileRelativePath":"System.Collections.Hashtable.html"},"themesRelativePathToOutputRoot":"_themes/"}