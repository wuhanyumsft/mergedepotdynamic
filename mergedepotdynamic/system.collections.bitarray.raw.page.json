{"content":"    \r\n    <h1 id=\"System_Collections_BitArray\">\r\n      <span class=\"lang-csharp\">BitArray</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Manages a compact array of bit values, which are represented as Booleans, where <code>true</code> indicates that the bit is on (1) and <code>false</code> indicates the bit is off (0).</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class BitArray : ICloneable, System.Collections.ICollection</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">BitArray</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The BitArray class is a collection class in which the capacity is always the same as the count. Elements are added to a BitArray by increasing the <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Length_\" data-linktype=\"relative-path\">Length</a> property; elements are deleted by decreasing the <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Length_\" data-linktype=\"relative-path\">Length</a> property. The size of a BitArray is controlled by the client; indexing past the end of the BitArray throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.The BitArray class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_And_\" data-linktype=\"relative-path\">And</a>, <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Or_\" data-linktype=\"relative-path\">Or</a>, <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Xor_\" data-linktype=\"relative-path\">Xor</a> , <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Not_\" data-linktype=\"relative-path\">Not</a>, and <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_SetAll_\" data-linktype=\"relative-path\">SetAll</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> class is a structure that provides the same functionality as BitArray, but with faster performance. <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> is faster because it is a value type and therefore allocated on the stack, whereas BitArray is a reference type and, therefore, allocated on the heap.  </p>\n<p> <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">System.Collections.Specialized.BitVector32</a> can store exactly 32 bits, whereas BitArray can store a variable number of bits. <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user. However, if the number of required bit flags is unknown, is variable, or is greater than 32, use BitArray instead.  </p>\n<p> BitArray is in the <a class=\"xref\" href=\"system.collections\" data-linktype=\"relative-path\">System.Collections</a> namespace; <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> is in the <a class=\"xref\" href=\"system.collections.specialized\" data-linktype=\"relative-path\">System.Collections.Specialized</a> namespace.  </p>\n<p> Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray__ctor_System_Boolean___\" data-linktype=\"self-bookmark\">BitArray(Boolean[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that contains bit values copied from the specified array of Booleans.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray__ctor_System_Byte___\" data-linktype=\"self-bookmark\">BitArray(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that contains bit values copied from the specified array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray__ctor_System_Collections_BitArray_\" data-linktype=\"self-bookmark\">BitArray(BitArray)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that contains bit values copied from the specified <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray__ctor_System_Int32_\" data-linktype=\"self-bookmark\">BitArray(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that can hold the specified number of bit values, which are initially set to <code>false</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray__ctor_System_Int32___\" data-linktype=\"self-bookmark\">BitArray(Int32[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that contains bit values copied from the specified array of 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray__ctor_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">BitArray(Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that can hold the specified number of bit values, which are initially set to the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_IsSynchronized\" data-linktype=\"self-bookmark\">IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the bit at a specific position in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of elements in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_SyncRoot\" data-linktype=\"self-bookmark\">SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_And_System_Collections_BitArray_\" data-linktype=\"self-bookmark\">And(BitArray)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the bitwise AND operation between the elements of the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object and the corresponding elements in the specified array. The current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object will be modified to store the result of the bitwise AND operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Get_System_Int32_\" data-linktype=\"self-bookmark\">Get(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the bit at a specific position in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Not\" data-linktype=\"self-bookmark\">Not()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inverts all the bit values in the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>, so that elements set to <code>true</code> are changed to <code>false</code>, and elements set to <code>false</code> are changed to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Or_System_Collections_BitArray_\" data-linktype=\"self-bookmark\">Or(BitArray)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the bitwise OR operation between the elements of the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object and the corresponding elements in the specified array. The current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object will be modified to store the result of the bitwise OR operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Set_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">Set(Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the bit at a specific position in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> to the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_SetAll_System_Boolean_\" data-linktype=\"self-bookmark\">SetAll(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets all bits in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> to the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_BitArray_Xor_System_Collections_BitArray_\" data-linktype=\"self-bookmark\">Xor(BitArray)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the bitwise exclusive OR operation between the elements of the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object against the corresponding elements in the specified array. The current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object will be modified to store the result of the bitwise exclusive OR operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray__ctor_System_Boolean___\">\r\n    \r\n            <a id=\"System_Collections_BitArray__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitArray(Boolean[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that contains bit values copied from the specified array of Booleans.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BitArray (bool[] values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Booleans to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>values</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>values</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray__ctor_System_Byte___\">\r\n    \r\n            <a id=\"System_Collections_BitArray__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitArray(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that contains bit values copied from the specified array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BitArray (byte[] bytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>bytes</code> is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on. The Least Significant Bit of each byte represents the lowest index value: &quot; <code>bytes</code> [0] &amp; 1&quot; represents bit 0, &quot; <code>bytes</code> [0] &amp; 2&quot; represents bit 1, &quot; <code>bytes</code> [0] &amp; 4&quot; represents bit 2, and so on.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>bytes</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray__ctor_System_Collections_BitArray_\">\r\n    \r\n            <a id=\"System_Collections_BitArray__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitArray(BitArray)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that contains bit values copied from the specified <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BitArray (System.Collections.BitArray bits);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bits</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bits</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>bits</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_BitArray__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitArray(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that can hold the specified number of bit values, which are initially set to <code>false</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BitArray (int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bit values in the new <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray__ctor_System_Int32___\">\r\n    \r\n            <a id=\"System_Collections_BitArray__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitArray(Int32[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that contains bit values copied from the specified array of 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BitArray (int[] values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>values</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>values</code> is greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The number in the first <code>values</code> array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on. The Least Significant Bit of each integer represents the lowest index value: &quot; <code>values</code> [0] &amp; 1&quot; represents bit 0, &quot; <code>values</code> [0] &amp; 2&quot; represents bit 1, &quot; <code>values</code> [0] &amp; 4&quot; represents bit 2, and so on.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>values</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray__ctor_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Collections_BitArray__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitArray(Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> class that can hold the specified number of bit values, which are initially set to the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BitArray (int length, bool defaultValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bit values in the new <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to assign to each bit.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Count\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Length_\" data-linktype=\"relative-path\">Length</a> and Count return the same value. <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Length_\" data-linktype=\"relative-path\">Length</a> can be set to a specific value, but Count is read-only.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_BitArray_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property is always <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> implements the IsReadOnly property because it is required by the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">System.Collections.IList</a> interface.  </p>\n<p> A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_BitArray_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property is always <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> implements the IsSynchronized property because it is required by the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">System.Collections.ICollection</a> interface.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic BitArray Example#2\">        BitArray^ myCollection = gcnew BitArray(64, true);\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BitArray Example#2\">        BitArray myCollection = new BitArray(64, true);\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray Example#2\">        Dim myCollection As New BitArray(64, true)\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the bit at a specific position in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool this[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the value to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>The value of the bit at position <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.BitArray.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Length\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of elements in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Length { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property is set to a value that is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Length and <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a> return the same value. Length can be set to a specific value, but <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a> is read-only.  </p>\n<p> If Length is set to a value that is less than <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>, the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> is truncated and the elements after the index <code>value</code> -1 are deleted.  </p>\n<p> If Length is set to a value that is greater than <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>, the new elements are set to <code>false</code>.  </p>\n<p> Retrieving the value of this property is an O(1) operation. Setting this property is an O(<code>n</code>) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_BitArray_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>, not directly on the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic BitArray Example#2\">        BitArray^ myCollection = gcnew BitArray(64, true);\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BitArray Example#2\">        BitArray myCollection = new BitArray(64, true);\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray Example#2\">        Dim myCollection As New BitArray(64, true)\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_And_System_Collections_BitArray_\">\r\n    \r\n            <a id=\"System_Collections_BitArray_And_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">And(BitArray)</div>        \r\n          </div>\r\n    \r\n            <p>Performs the bitwise AND operation between the elements of the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object and the corresponding elements in the specified array. The current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object will be modified to store the result of the bitwise AND operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.BitArray And (System.Collections.BitArray value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array with which to perform the bitwise AND operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a></div>\r\n                  </div>\r\n                  <p>An array containing the result of the bitwise AND operation, which is a reference to the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> and the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> do not have the same number of elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The bitwise AND operation returns <code>true</code> if both operands are <code>true</code>, and returns <code>false</code> if one or both operands are <code>false</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to perform the bitwise AND operation between two <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic BitArray.And Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, int myWidth );\nint main()\n{\n   \n   // Creates and initializes two BitArrays of the same size.\n   BitArray^ myBA1 = gcnew BitArray( 4 );\n   BitArray^ myBA2 = gcnew BitArray( 4 );\n   myBA1[ 0 ] = false;\n   myBA1[ 1 ] = false;\n   myBA1[ 2 ] = true;\n   myBA1[ 3 ] = true;\n   myBA2[ 0 ] = false;\n   myBA2[ 2 ] = false;\n   myBA2[ 1 ] = true;\n   myBA2[ 3 ] = true;\n   \n   // Performs a bitwise AND operation between BitArray instances of the same size.\n   Console::WriteLine( &quot;Initial values&quot; );\n   Console::Write( &quot;myBA1:&quot; );\n   PrintValues( myBA1, 8 );\n   Console::Write( &quot;myBA2:&quot; );\n   PrintValues( myBA2, 8 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Result&quot; );\n   Console::Write( &quot;AND:&quot; );\n   PrintValues( myBA1-&gt;And( myBA2 ), 8 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;After AND&quot; );\n   Console::Write( &quot;myBA1:&quot; );\n   PrintValues( myBA1, 8 );\n   Console::Write( &quot;myBA2:&quot; );\n   PrintValues( myBA2, 8 );\n   Console::WriteLine();\n   \n   // Performing AND between BitArray instances of different sizes returns an exception.\n   try\n   {\n      BitArray^ myBA3 = gcnew BitArray( 8 );\n      myBA3[ 0 ] = false;\n      myBA3[ 1 ] = false;\n      myBA3[ 2 ] = false;\n      myBA3[ 3 ] = false;\n      myBA3[ 4 ] = true;\n      myBA3[ 5 ] = true;\n      myBA3[ 6 ] = true;\n      myBA3[ 7 ] = true;\n      myBA1-&gt;And( myBA3 );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n}\n\nvoid PrintValues( IEnumerable^ myList, int myWidth )\n{\n   int i = myWidth;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      if ( i &lt;= 0 )\n      {\n         i = myWidth;\n         Console::WriteLine();\n      }\n\n      i--;\n      Console::Write( &quot;{0,8}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Initial values\n myBA1:   False   False    True    True\n myBA2:   False    True   False    True\n\n Result\n AND:   False   False   False    True\n\n After AND\n myBA1:   False   False   False    True\n myBA2:   False    True   False    True\n\n Exception: System.ArgumentException: Array lengths must be the same.\n    at System.Collections.BitArray.And(BitArray value)\n    at SamplesBitArray.Main()\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BitArray.And Example#1\"> using System;\n using System.Collections;\n public class SamplesBitArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes two BitArrays of the same size.\n       BitArray myBA1 = new BitArray( 4 );\n       BitArray myBA2 = new BitArray( 4 );\n       myBA1[0] = myBA1[1] = false;\n       myBA1[2] = myBA1[3] = true;\n       myBA2[0] = myBA2[2] = false;\n       myBA2[1] = myBA2[3] = true;\n \n       // Performs a bitwise AND operation between BitArray instances of the same size.\n       Console.WriteLine( &quot;Initial values&quot; );\n       Console.Write( &quot;myBA1:&quot; );\n       PrintValues( myBA1, 8 );\n       Console.Write( &quot;myBA2:&quot; );\n       PrintValues( myBA2, 8 );\n       Console.WriteLine();\n \n       Console.WriteLine( &quot;Result&quot; );\n       Console.Write( &quot;AND:&quot; );\n       PrintValues( myBA1.And( myBA2 ), 8 );\n       Console.WriteLine();\n \n       Console.WriteLine( &quot;After AND&quot; );\n       Console.Write( &quot;myBA1:&quot; );\n       PrintValues( myBA1, 8 );\n       Console.Write( &quot;myBA2:&quot; );\n       PrintValues( myBA2, 8 );\n       Console.WriteLine();\n \n       // Performing AND between BitArray instances of different sizes returns an exception.\n       try  {\n          BitArray myBA3 = new BitArray( 8 );\n          myBA3[0] = myBA3[1] = myBA3[2] = myBA3[3] = false;\n          myBA3[4] = myBA3[5] = myBA3[6] = myBA3[7] = true;\n          myBA1.And( myBA3 );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n    }\n \n \n    public static void PrintValues( IEnumerable myList, int myWidth )  {\n       int i = myWidth;\n       foreach ( Object obj in myList ) {\n          if ( i &lt;= 0 )  {\n             i = myWidth;\n             Console.WriteLine();\n          }\n          i--;\n          Console.Write( &quot;{0,8}&quot;, obj );\n       }\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n Initial values\n myBA1:   False   False    True    True\n myBA2:   False    True   False    True\n\n Result\n AND:   False   False   False    True\n\n After AND\n myBA1:   False   False   False    True\n myBA2:   False    True   False    True\n\n Exception: System.ArgumentException: Array lengths must be the same.\n    at System.Collections.BitArray.And(BitArray value)\n    at SamplesBitArray.Main()\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray.And Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesBitArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes two BitArrays of the same size.\n        Dim myBA1 As New BitArray(4)\n        Dim myBA2 As New BitArray(4)\n        myBA1(1) = False\n        myBA1(0) = False\n        myBA1(3) = True\n        myBA1(2) = True\n        myBA2(2) = False\n        myBA2(0) = False\n        myBA2(3) = True\n        myBA2(1) = True\n        \n        &#39; Performs a bitwise AND operation between BitArray instances of the same size.\n        Console.WriteLine(&quot;Initial values&quot;)\n        Console.Write(&quot;myBA1:&quot;)\n        PrintValues(myBA1, 8)\n        Console.Write(&quot;myBA2:&quot;)\n        PrintValues(myBA2, 8)\n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;Result&quot;)\n        Console.Write(&quot;AND:&quot;)\n        PrintValues(myBA1.And(myBA2), 8)\n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;After AND&quot;)\n        Console.Write(&quot;myBA1:&quot;)\n        PrintValues(myBA1, 8)\n        Console.Write(&quot;myBA2:&quot;)\n        PrintValues(myBA2, 8)\n        Console.WriteLine()\n        \n        &#39; Performing AND between BitArray instances of different sizes returns an exception.\n        Try\n            Dim myBA3 As New BitArray(8)\n            myBA3(0) = False\n            myBA3(1) = False\n            myBA3(2) = False\n            myBA3(3) = False\n            myBA3(4) = True\n            myBA3(5) = True\n            myBA3(6) = True\n            myBA3(7) = True\n            myBA1.And(myBA3)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n    End Sub\n\n    Public Shared Sub PrintValues(myList As IEnumerable, myWidth As Integer)\n        Dim i As Integer = myWidth\n        Dim obj As [Object]\n        For Each obj In  myList\n            If i &lt;= 0 Then\n                i = myWidth\n                Console.WriteLine()\n            End If\n            i -= 1\n            Console.Write(&quot;{0,8}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initial values\n&#39; myBA1:   False   False    True    True\n&#39; myBA2:   False    True   False    True\n&#39;\n&#39; Result\n&#39; AND:   False   False   False    True\n&#39;\n&#39; After AND\n&#39; myBA1:   False   False   False    True\n&#39; myBA2:   False    True   False    True\n&#39;\n&#39; Exception: System.ArgumentException: Array lengths must be the same.\n&#39;    at System.Collections.BitArray.And(BitArray value)\n&#39;    at SamplesBitArray.Main()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Clone\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A shallow copy of the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  </p>\n<p> In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_BitArray_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type. Only <code>bool</code>, <code>int</code>, and <code>byte</code> types of arrays are supported.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy a <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> into a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic BitArray.CopyTo Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myArr );\nint main()\n{\n   // Creates and initializes the source BitArray.\n   BitArray^ myBA = gcnew BitArray( 4 );\n   myBA[ 0 ] = true;\n   myBA[ 1 ] = true;\n   myBA[ 2 ] = true;\n   myBA[ 3 ] = true;\n\n   // Creates and initializes the one-dimensional target Array of type Boolean.\n   array&lt;Boolean&gt;^myBoolArray = gcnew array&lt;Boolean&gt;(8);\n   myBoolArray[ 0 ] = false;\n   myBoolArray[ 1 ] = false;\n\n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target Boolean Array contains the following (before and after copying):&quot; );\n   PrintValues( dynamic_cast&lt;IEnumerable^&gt;(myBoolArray) );\n\n   // Copies the entire source BitArray to the target BitArray, starting at index 3.\n   myBA-&gt;CopyTo( myBoolArray, 3 );\n\n   // Displays the values of the target Array.\n   PrintValues( dynamic_cast&lt;IEnumerable^&gt;(myBoolArray) );\n\n   // Creates and initializes the one-dimensional target Array of type integer.\n   array&lt;Int32&gt;^myIntArray = gcnew array&lt;Int32&gt;(8);\n   myIntArray[ 0 ] = 42;\n   myIntArray[ 1 ] = 43;\n\n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target integer Array contains the following (before and after copying):&quot; );\n   PrintValues( dynamic_cast&lt;IEnumerable^&gt;(myIntArray) );\n\n   // Copies the entire source BitArray to the target BitArray, starting at index 3.\n   myBA-&gt;CopyTo( myIntArray, 3 );\n\n   // Displays the values of the target Array.\n   PrintValues( dynamic_cast&lt;IEnumerable^&gt;(myIntArray) );\n\n   // Creates and initializes the one-dimensional target Array of type byte.\n   Array^ myByteArray = Array::CreateInstance( Byte::typeid, 8 );\n   myByteArray-&gt;SetValue( (Byte)10, 0 );\n   myByteArray-&gt;SetValue( (Byte)11, 1 );\n\n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target byte Array contains the following (before and after copying):&quot; );\n   PrintValues( myByteArray );\n\n   // Copies the entire source BitArray to the target BitArray, starting at index 3.\n   myBA-&gt;CopyTo( myByteArray, 3 );\n\n   // Displays the values of the target Array.\n   PrintValues( myByteArray );\n\n   // Returns an exception if the array is not of type Boolean, integer or byte.\n   try\n   {\n      Array^ myStringArray = Array::CreateInstance( String::typeid, 8 );\n      myStringArray-&gt;SetValue( &quot;Hello&quot;, 0 );\n      myStringArray-&gt;SetValue( &quot;World&quot;, 1 );\n      myBA-&gt;CopyTo( myStringArray, 3 );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n}\n\nvoid PrintValues( IEnumerable^ myArr )\n{\n   IEnumerator^ myEnum = myArr-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;{0,8}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The target Boolean Array contains the following (before and after copying):\n    False   False   False   False   False   False   False   False\n    False   False   False    True    True    True    True   False\n The target integer Array contains the following (before and after copying):\n       42      43       0       0       0       0       0       0\n       42      43       0      15       0       0       0       0\n The target byte Array contains the following (before and after copying):\n       10      11       0       0       0       0       0       0\n       10      11       0      15       0       0       0       0\n Exception: System.ArgumentException: Only supported array types for CopyTo on BitArrays are Boolean[], Int32[] and Byte[].\n    at System.Collections.BitArray.CopyTo(Array array, Int32 index)\n    at SamplesBitArray.Main()\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BitArray.CopyTo Example#1\"> using System;\n using System.Collections;\n public class SamplesBitArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes the source BitArray.\n       BitArray myBA = new BitArray( 4 );\n       myBA[0] = myBA[1] = myBA[2] = myBA[3] = true;\n \n       // Creates and initializes the one-dimensional target Array of type Boolean.\n       bool[] myBoolArray = new bool[8];\n       myBoolArray[0] = false;\n       myBoolArray[1] = false;\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target Boolean Array contains the following (before and after copying):&quot; );\n       PrintValues( myBoolArray );\n \n       // Copies the entire source BitArray to the target BitArray, starting at index 3.\n       myBA.CopyTo( myBoolArray, 3 );\n \n       // Displays the values of the target Array.\n       PrintValues( myBoolArray );\n \n       // Creates and initializes the one-dimensional target Array of type integer.\n       int[] myIntArray = new int[8];\n       myIntArray[0] = 42;\n       myIntArray[1] = 43;\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target integer Array contains the following (before and after copying):&quot; );\n       PrintValues( myIntArray );\n \n       // Copies the entire source BitArray to the target BitArray, starting at index 3.\n       myBA.CopyTo( myIntArray, 3 );\n \n       // Displays the values of the target Array.\n       PrintValues( myIntArray );\n \n       // Creates and initializes the one-dimensional target Array of type byte.\n       Array myByteArray = Array.CreateInstance( typeof(byte), 8 );\n       myByteArray.SetValue( (byte) 10, 0 );\n       myByteArray.SetValue( (byte) 11, 1 );\n \n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target byte Array contains the following (before and after copying):&quot; );\n       PrintValues( myByteArray );\n \n       // Copies the entire source BitArray to the target BitArray, starting at index 3.\n       myBA.CopyTo( myByteArray, 3 );\n \n       // Displays the values of the target Array.\n       PrintValues( myByteArray );\n \n       // Returns an exception if the array is not of type Boolean, integer or byte.\n       try  {\n          Array myStringArray=Array.CreateInstance( typeof(String), 8 );\n          myStringArray.SetValue( &quot;Hello&quot;, 0 );\n          myStringArray.SetValue( &quot;World&quot;, 1 );\n          myBA.CopyTo( myStringArray, 3 );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n    }\n\n    public static void PrintValues( IEnumerable myArr )  {\n       foreach ( Object obj in myArr ) {\n          Console.Write( &quot;{0,8}&quot;, obj );\n       }\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n The target Boolean Array contains the following (before and after copying):\n    False   False   False   False   False   False   False   False\n    False   False   False    True    True    True    True   False\n The target integer Array contains the following (before and after copying):\n       42      43       0       0       0       0       0       0\n       42      43       0      15       0       0       0       0\n The target byte Array contains the following (before and after copying):\n       10      11       0       0       0       0       0       0\n       10      11       0      15       0       0       0       0\n Exception: System.ArgumentException: Only supported array types for CopyTo on BitArrays are Boolean[], Int32[] and Byte[].\n    at System.Collections.BitArray.CopyTo(Array array, Int32 index)\n    at SamplesBitArray.Main()\n\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray.CopyTo Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesBitArray\n\n    Public Shared Sub Main()\n\n        &#39; Creates and initializes the source BitArray.\n        Dim myBA As New BitArray(4)\n        myBA(0) = True\n        myBA(1) = True\n        myBA(2) = True\n        myBA(3) = True\n\n        &#39; Creates and initializes the one-dimensional target Array of type Boolean.\n        Dim myBoolArray(7) As Boolean\n        myBoolArray(0) = False\n        myBoolArray(1) = False\n\n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target Boolean Array contains the following (before and after copying):&quot;)\n        PrintValues(myBoolArray)\n\n        &#39; Copies the entire source BitArray to the target BitArray, starting at index 3.\n        myBA.CopyTo(myBoolArray, 3)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myBoolArray)\n\n        &#39; Creates and initializes the one-dimensional target Array of type integer.\n        Dim myIntArray(7) As Integer\n        myIntArray(0) = 42\n        myIntArray(1) = 43\n\n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target integer Array contains the following (before and after copying):&quot;)\n        PrintValues(myIntArray)\n\n        &#39; Copies the entire source BitArray to the target BitArray, starting at index 3.\n        myBA.CopyTo(myIntArray, 3)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myIntArray)\n\n        &#39; Creates and initializes the one-dimensional target Array of type byte.\n        Dim myByteArray As Array = Array.CreateInstance(GetType(Byte), 8)\n        myByteArray.SetValue(System.Convert.ToByte(10), 0)\n        myByteArray.SetValue(System.Convert.ToByte(11), 1)\n\n        &#39; Displays the values of the target Array.\n        Console.WriteLine(&quot;The target byte Array contains the following (before and after copying):&quot;)\n        PrintValues(myByteArray)\n\n        &#39; Copies the entire source BitArray to the target BitArray, starting at index 3.\n        myBA.CopyTo(myByteArray, 3)\n\n        &#39; Displays the values of the target Array.\n        PrintValues(myByteArray)\n\n        &#39; Returns an exception if the array is not of type Boolean, integer or byte.\n        Try\n            Dim myStringArray As Array = Array.CreateInstance(GetType(String), 8)\n            myStringArray.SetValue(&quot;Hello&quot;, 0)\n            myStringArray.SetValue(&quot;World&quot;, 1)\n            myBA.CopyTo(myStringArray, 3)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintValues(myArr As IEnumerable)\n        Dim obj As [Object]\n        For Each obj In  myArr\n            Console.Write(&quot;{0,8}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesBitArray \n\n\n&#39; This code produces the following output.\n&#39; \n&#39; The target Boolean Array contains the following (before and after copying):\n&#39;    False   False   False   False   False   False   False   False\n&#39;    False   False   False    True    True    True    True   False\n&#39; The target integer Array contains the following (before and after copying):\n&#39;       42      43       0       0       0       0       0       0\n&#39;       42      43       0      15       0       0       0       0\n&#39; The target byte Array contains the following (before and after copying):\n&#39;       10      11       0       0       0       0       0       0\n&#39;       10      11       0      15       0       0       0       0\n&#39; Exception: System.ArgumentException: Only supported array types for CopyTo on BitArrays are Boolean[], Int32[] and Byte[].\n&#39;    at System.Collections.BitArray.CopyTo(Array array, Int32 index)\n&#39;    at SamplesBitArray.Main()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Get_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Get_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Get(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the bit at a specific position in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Get (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the value to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>The value of the bit at position <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than or equal to the number of elements in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to set and get specific elements in a <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic BitArray.Get Example#1\"> using System;\n using System.Collections;\n public class SamplesBitArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a BitArray.\n       BitArray myBA = new BitArray( 5 );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;myBA values:&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Sets all the elements to true.\n       myBA.SetAll( true );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;After setting all elements to true,&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Sets the last index to false.\n       myBA.Set( myBA.Count - 1, false );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;After setting the last element to false,&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Gets the value of the last two elements.\n       Console.WriteLine( &quot;The last two elements are: &quot; );\n       Console.WriteLine( &quot;    at index {0} : {1}&quot;, myBA.Count - 2, myBA.Get( myBA.Count - 2 ) );\n       Console.WriteLine( &quot;    at index {0} : {1}&quot;, myBA.Count - 1, myBA.Get( myBA.Count - 1 ) );\n    }\n \n \n    public static void PrintIndexAndValues( IEnumerable myCol )  {\n       int i = 0;\n       foreach ( Object obj in myCol ) {\n          Console.WriteLine( &quot;    [{0}]:    {1}&quot;, i++, obj );\n       }\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n myBA values:\n     [0]:    False\n     [1]:    False\n     [2]:    False\n     [3]:    False\n     [4]:    False\n\n After setting all elements to true,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    True\n\n After setting the last element to false,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    False\n\n The last two elements are:\n     at index 3 : True\n     at index 4 : False\n\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic BitArray.Get Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a BitArray.\n   BitArray^ myBA = gcnew BitArray( 5 );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;myBA values:&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Sets all the elements to true.\n   myBA-&gt;SetAll( true );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;After setting all elements to true,&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Sets the last index to false.\n   myBA-&gt;Set( myBA-&gt;Count - 1, false );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;After setting the last element to false,&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Gets the value of the last two elements.\n   Console::WriteLine( &quot;The last two elements are: &quot; );\n   Console::WriteLine( &quot;    at index {0} : {1}&quot;, myBA-&gt;Count - 2, myBA-&gt;Get( myBA-&gt;Count - 2 ) );\n   Console::WriteLine( &quot;    at index {0} : {1}&quot;, myBA-&gt;Count - 1, myBA-&gt;Get( myBA-&gt;Count - 1 ) );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myCol )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;    [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n myBA values:\n     [0]:    False\n     [1]:    False\n     [2]:    False\n     [3]:    False\n     [4]:    False\n\n After setting all elements to true,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    True\n\n After setting the last element to false,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    False\n\n The last two elements are:\n     at index 3 : True\n     at index 4 : False\n\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray.Get Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesBitArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a BitArray.\n        Dim myBA As New BitArray(5)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;myBA values:&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Sets all the elements to true.\n        myBA.SetAll(True)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;After setting all elements to true,&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Sets the last index to false.\n        myBA.Set(myBA.Count - 1, False)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;After setting the last element to false,&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Gets the value of the last two elements.\n        Console.WriteLine(&quot;The last two elements are: &quot;)\n        Console.WriteLine(&quot;    at index {0} : {1}&quot;, _\n           myBA.Count - 2, myBA.Get(myBA.Count - 2))\n        Console.WriteLine(&quot;    at index {0} : {1}&quot;, _\n           myBA.Count - 1, myBA.Get(myBA.Count - 1))\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(myCol As IEnumerable)\n        Dim i As Integer\n        Dim obj As Object\n        i = 0\n        For Each obj In  myCol\n            Console.WriteLine(&quot;    [{0}]:    {1}&quot;, i, obj)\n            i = i + 1\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myBA values:\n&#39;     [0]:    False\n&#39;     [1]:    False\n&#39;     [2]:    False\n&#39;     [3]:    False\n&#39;     [4]:    False\n&#39; \n&#39; After setting all elements to true,\n&#39;     [0]:    True\n&#39;     [1]:    True\n&#39;     [2]:    True\n&#39;     [3]:    True\n&#39;     [4]:    True\n&#39; \n&#39; After setting the last element to false,\n&#39;     [0]:    True\n&#39;     [1]:    True\n&#39;     [2]:    True\n&#39;     [3]:    True\n&#39;     [4]:    False\n&#39; \n&#39; The last two elements are:\n&#39;     at index 3 : True\n&#39;     at index 4 : False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_BitArray_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the entire <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Not\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Not_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Not()</div>        \r\n          </div>\r\n    \r\n            <p>Inverts all the bit values in the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>, so that elements set to <code>true</code> are changed to <code>false</code>, and elements set to <code>false</code> are changed to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.BitArray Not ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a></div>\r\n                  </div>\r\n                  <p>The current instance with inverted bit values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to apply NOT to a <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic BitArray.Not Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, int myWidth );\nint main()\n{\n   \n   // Creates and initializes two BitArrays of the same size.\n   BitArray^ myBA1 = gcnew BitArray( 4 );\n   BitArray^ myBA2 = gcnew BitArray( 4 );\n   myBA1[ 0 ] = false;\n   myBA1[ 1 ] = false;\n   myBA1[ 2 ] = true;\n   myBA1[ 3 ] = true;\n   myBA2[ 0 ] = false;\n   myBA2[ 1 ] = true;\n   myBA2[ 2 ] = false;\n   myBA2[ 3 ] = true;\n   \n   // Performs a bitwise NOT operation between BitArray instances of the same size.\n   Console::WriteLine( &quot;Initial values&quot; );\n   Console::Write( &quot;myBA1:&quot; );\n   PrintValues( myBA1, 8 );\n   Console::Write( &quot;myBA2:&quot; );\n   PrintValues( myBA2, 8 );\n   Console::WriteLine();\n   myBA1-&gt;Not();\n   myBA2-&gt;Not();\n   Console::WriteLine( &quot;After NOT&quot; );\n   Console::Write( &quot;myBA1:&quot; );\n   PrintValues( myBA1, 8 );\n   Console::Write( &quot;myBA2:&quot; );\n   PrintValues( myBA2, 8 );\n   Console::WriteLine();\n}\n\nvoid PrintValues( IEnumerable^ myList, int myWidth )\n{\n   int i = myWidth;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      if ( i &lt;= 0 )\n      {\n         i = myWidth;\n         Console::WriteLine();\n      }\n\n      i--;\n      Console::Write( &quot;{0,8}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n\n Initial values\n myBA1:   False   False    True    True\n myBA2:   False    True   False    True\n\n After NOT\n myBA1:    True    True   False   False\n myBA2:    True   False    True   False\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BitArray.Not Example#1\"> using System;\n using System.Collections;\n public class SamplesBitArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes two BitArrays of the same size.\n       BitArray myBA1 = new BitArray( 4 );\n       BitArray myBA2 = new BitArray( 4 );\n       myBA1[0] = myBA1[1] = false;\n       myBA1[2] = myBA1[3] = true;\n       myBA2[0] = myBA2[2] = false;\n       myBA2[1] = myBA2[3] = true;\n \n       // Performs a bitwise NOT operation between BitArray instances of the same size.\n       Console.WriteLine( &quot;Initial values&quot; );\n       Console.Write( &quot;myBA1:&quot; );\n       PrintValues( myBA1, 8 );\n       Console.Write( &quot;myBA2:&quot; );\n       PrintValues( myBA2, 8 );\n       Console.WriteLine();\n \n       myBA1.Not();\n       myBA2.Not();\n \n       Console.WriteLine( &quot;After NOT&quot; );\n       Console.Write( &quot;myBA1:&quot; );\n       PrintValues( myBA1, 8 );\n       Console.Write( &quot;myBA2:&quot; );\n       PrintValues( myBA2, 8 );\n       Console.WriteLine();\n    }\n \n \n    public static void PrintValues( IEnumerable myList, int myWidth )  {\n       int i = myWidth;\n       foreach ( Object obj in myList ) {\n          if ( i &lt;= 0 )  {\n             i = myWidth;\n             Console.WriteLine();\n          }\n          i--;\n          Console.Write( &quot;{0,8}&quot;, obj );\n       }\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n\n Initial values\n myBA1:   False   False    True    True\n myBA2:   False    True   False    True\n\n After NOT\n myBA1:    True    True   False   False\n myBA2:    True   False    True   False\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray.Not Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesBitArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes two BitArrays of the same size.\n        Dim myBA1 As New BitArray(4)\n        Dim myBA2 As New BitArray(4)\n        myBA1(0) = False\n        myBA1(1) = False\n        myBA1(2) = True\n        myBA1(3) = True\n        myBA2(0) = False\n        myBA2(2) = False\n        myBA2(1) = True\n        myBA2(3) = True\n        \n        &#39; Performs a bitwise NOT operation between BitArray instances of the same size.\n        Console.WriteLine(&quot;Initial values&quot;)\n        Console.Write(&quot;myBA1:&quot;)\n        PrintValues(myBA1, 8)\n        Console.Write(&quot;myBA2:&quot;)\n        PrintValues(myBA2, 8)\n        Console.WriteLine()\n        \n        myBA1.Not()\n        myBA2.Not()\n        \n        Console.WriteLine(&quot;After NOT&quot;)\n        Console.Write(&quot;myBA1:&quot;)\n        PrintValues(myBA1, 8)\n        Console.Write(&quot;myBA2:&quot;)\n        PrintValues(myBA2, 8)\n        Console.WriteLine()\n    End Sub    \n    \n    Public Shared Sub PrintValues(myList As IEnumerable, myWidth As Integer)\n        Dim i As Integer = myWidth\n        Dim obj As [Object]\n        For Each obj In  myList\n            If i &lt;= 0 Then\n                i = myWidth\n                Console.WriteLine()\n            End If\n            i -= 1\n            Console.Write(&quot;{0,8}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initial values\n&#39; myBA1:    False    False    True    True\n&#39; myBA2:    False    True    False    True\n&#39; \n&#39; After NOT\n&#39; myBA1:    True    True    False    False\n&#39; myBA2:    True    False    True    False \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Or_System_Collections_BitArray_\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Or_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Or(BitArray)</div>        \r\n          </div>\r\n    \r\n            <p>Performs the bitwise OR operation between the elements of the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object and the corresponding elements in the specified array. The current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object will be modified to store the result of the bitwise OR operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.BitArray Or (System.Collections.BitArray value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array with which to perform the bitwise OR operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a></div>\r\n                  </div>\r\n                  <p>An array containing the result of the bitwise OR operation, which is a reference to the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> and the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> do not have the same number of elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The bitwise OR operation returns <code>true</code> if one or both operands are <code>true</code>, and returns <code>false</code> if both operands are <code>false</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to perform the OR operation between two <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic BitArray.Or Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, int myWidth );\nint main()\n{\n   \n   // Creates and initializes two BitArrays of the same size.\n   BitArray^ myBA1 = gcnew BitArray( 4 );\n   BitArray^ myBA2 = gcnew BitArray( 4 );\n   myBA1[ 0 ] = false;\n   myBA1[ 1 ] = false;\n   myBA1[ 2 ] = true;\n   myBA1[ 3 ] = true;\n   myBA2[ 0 ] = false;\n   myBA2[ 1 ] = true;\n   myBA2[ 2 ] = false;\n   myBA2[ 3 ] = true;\n   \n   // Performs a bitwise OR operation between BitArray instances of the same size.\n   Console::WriteLine( &quot;Initial values&quot; );\n   Console::Write( &quot;myBA1:&quot; );\n   PrintValues( myBA1, 8 );\n   Console::Write( &quot;myBA2:&quot; );\n   PrintValues( myBA2, 8 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Result&quot; );\n   Console::Write( &quot;OR:&quot; );\n   PrintValues( myBA1-&gt;Or( myBA2 ), 8 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;After OR&quot; );\n   Console::Write( &quot;myBA1:&quot; );\n   PrintValues( myBA1, 8 );\n   Console::Write( &quot;myBA2:&quot; );\n   PrintValues( myBA2, 8 );\n   Console::WriteLine();\n   \n   // Performing OR between BitArray instances of different sizes returns an exception.\n   try\n   {\n      BitArray^ myBA3 = gcnew BitArray( 8 );\n      myBA3[ 0 ] = false;\n      myBA3[ 1 ] = false;\n      myBA3[ 2 ] = false;\n      myBA3[ 3 ] = false;\n      myBA3[ 4 ] = true;\n      myBA3[ 5 ] = true;\n      myBA3[ 6 ] = true;\n      myBA3[ 7 ] = true;\n      myBA1-&gt;Or( myBA3 );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n}\n\nvoid PrintValues( IEnumerable^ myList, int myWidth )\n{\n   int i = myWidth;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      if ( i &lt;= 0 )\n      {\n         i = myWidth;\n         Console::WriteLine();\n      }\n\n      i--;\n      Console::Write( &quot;{0,8}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Initial values\n myBA1:   False   False    True    True\n myBA2:   False    True   False    True\n\n Result\n OR:   False    True    True    True\n\n After OR\n myBA1:   False    True    True    True\n myBA2:   False    True   False    True\n\n Exception: System.ArgumentException: Array lengths must be the same.\n    at System.Collections.BitArray.Or(BitArray value)\n    at SamplesBitArray.Main()\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray.Or Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesBitArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes two BitArrays of the same size.\n        Dim myBA1 As New BitArray(4)\n        Dim myBA2 As New BitArray(4)\n        myBA1(0) = False\n        myBA1(1) = False\n        myBA1(2) = True\n        myBA1(3) = True\n        myBA2(0) = False\n        myBA2(2) = False\n        myBA2(1) = True\n        myBA2(3) = True\n        \n        &#39; Performs a bitwise OR operation between BitArray instances of the same size.\n        Console.WriteLine(&quot;Initial values&quot;)\n        Console.Write(&quot;myBA1:&quot;)\n        PrintValues(myBA1, 8)\n        Console.Write(&quot;myBA2:&quot;)\n        PrintValues(myBA2, 8)\n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;Result&quot;)\n        Console.Write(&quot;OR:&quot;)\n        PrintValues(myBA1.Or(myBA2), 8)\n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;After OR&quot;)\n        Console.Write(&quot;myBA1:&quot;)\n        PrintValues(myBA1, 8)\n        Console.Write(&quot;myBA2:&quot;)\n        PrintValues(myBA2, 8)\n        Console.WriteLine()\n        \n        &#39; Performing OR between BitArray instances of different sizes returns an exception.\n        Try\n            Dim myBA3 As New BitArray(8)\n            myBA3(0) = False\n            myBA3(1) = False\n            myBA3(2) = False\n            myBA3(3) = False\n            myBA3(4) = True\n            myBA3(5) = True\n            myBA3(6) = True\n            myBA3(7) = True\n            myBA1.Or(myBA3)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n    End Sub\n    \n    Public Shared Sub PrintValues(myList As IEnumerable, myWidth As Integer)\n        Dim i As Integer = myWidth\n        Dim obj As [Object]\n        For Each obj In  myList\n            If i &lt;= 0 Then\n                i = myWidth\n                Console.WriteLine()\n            End If\n            i -= 1\n            Console.Write(&quot;{0,8}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initial values\n&#39; myBA1:   False   False    True    True\n&#39; myBA2:   False    True   False    True\n&#39; \n&#39; Result\n&#39; OR:   False    True    True    True\n&#39; \n&#39; After OR\n&#39; myBA1:   False    True    True    True\n&#39; myBA2:   False    True   False    True\n&#39; \n&#39; Exception: System.ArgumentException: Array lengths must be the same.\n&#39;    at System.Collections.BitArray.Or(BitArray value)\n&#39;    at SamplesBitArray.Main()\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BitArray.Or Example#1\"> using System;\n using System.Collections;\n public class SamplesBitArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes two BitArrays of the same size.\n       BitArray myBA1 = new BitArray( 4 );\n       BitArray myBA2 = new BitArray( 4 );\n       myBA1[0] = myBA1[1] = false;\n       myBA1[2] = myBA1[3] = true;\n       myBA2[0] = myBA2[2] = false;\n       myBA2[1] = myBA2[3] = true;\n \n       // Performs a bitwise OR operation between BitArray instances of the same size.\n       Console.WriteLine( &quot;Initial values&quot; );\n       Console.Write( &quot;myBA1:&quot; );\n       PrintValues( myBA1, 8 );\n       Console.Write( &quot;myBA2:&quot; );\n       PrintValues( myBA2, 8 );\n       Console.WriteLine();\n \n       Console.WriteLine( &quot;Result&quot; );\n       Console.Write( &quot;OR:&quot; );\n       PrintValues( myBA1.Or( myBA2 ), 8 );\n       Console.WriteLine();\n \n       Console.WriteLine( &quot;After OR&quot; );\n       Console.Write( &quot;myBA1:&quot; );\n       PrintValues( myBA1, 8 );\n       Console.Write( &quot;myBA2:&quot; );\n       PrintValues( myBA2, 8 );\n       Console.WriteLine();\n \n       // Performing OR between BitArray instances of different sizes returns an exception.\n       try  {\n          BitArray myBA3 = new BitArray( 8 );\n          myBA3[0] = myBA3[1] = myBA3[2] = myBA3[3] = false;\n          myBA3[4] = myBA3[5] = myBA3[6] = myBA3[7] = true;\n          myBA1.Or( myBA3 );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n    }\n \n \n    public static void PrintValues( IEnumerable myList, int myWidth )  {\n       int i = myWidth;\n       foreach ( Object obj in myList ) {\n          if ( i &lt;= 0 )  {\n             i = myWidth;\n             Console.WriteLine();\n          }\n          i--;\n          Console.Write( &quot;{0,8}&quot;, obj );\n       }\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n Initial values\n myBA1:   False   False    True    True\n myBA2:   False    True   False    True\n\n Result\n OR:   False    True    True    True\n\n After OR\n myBA1:   False    True    True    True\n myBA2:   False    True   False    True\n\n Exception: System.ArgumentException: Array lengths must be the same.\n    at System.Collections.BitArray.Or(BitArray value)\n    at SamplesBitArray.Main()\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Set_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Set_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Set(Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the bit at a specific position in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> to the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Set (int index, bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the bit to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to assign to the bit.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than or equal to the number of elements in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to set and get specific elements in a <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic BitArray.Get Example#1\"> using System;\n using System.Collections;\n public class SamplesBitArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a BitArray.\n       BitArray myBA = new BitArray( 5 );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;myBA values:&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Sets all the elements to true.\n       myBA.SetAll( true );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;After setting all elements to true,&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Sets the last index to false.\n       myBA.Set( myBA.Count - 1, false );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;After setting the last element to false,&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Gets the value of the last two elements.\n       Console.WriteLine( &quot;The last two elements are: &quot; );\n       Console.WriteLine( &quot;    at index {0} : {1}&quot;, myBA.Count - 2, myBA.Get( myBA.Count - 2 ) );\n       Console.WriteLine( &quot;    at index {0} : {1}&quot;, myBA.Count - 1, myBA.Get( myBA.Count - 1 ) );\n    }\n \n \n    public static void PrintIndexAndValues( IEnumerable myCol )  {\n       int i = 0;\n       foreach ( Object obj in myCol ) {\n          Console.WriteLine( &quot;    [{0}]:    {1}&quot;, i++, obj );\n       }\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n myBA values:\n     [0]:    False\n     [1]:    False\n     [2]:    False\n     [3]:    False\n     [4]:    False\n\n After setting all elements to true,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    True\n\n After setting the last element to false,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    False\n\n The last two elements are:\n     at index 3 : True\n     at index 4 : False\n\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic BitArray.Get Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a BitArray.\n   BitArray^ myBA = gcnew BitArray( 5 );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;myBA values:&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Sets all the elements to true.\n   myBA-&gt;SetAll( true );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;After setting all elements to true,&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Sets the last index to false.\n   myBA-&gt;Set( myBA-&gt;Count - 1, false );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;After setting the last element to false,&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Gets the value of the last two elements.\n   Console::WriteLine( &quot;The last two elements are: &quot; );\n   Console::WriteLine( &quot;    at index {0} : {1}&quot;, myBA-&gt;Count - 2, myBA-&gt;Get( myBA-&gt;Count - 2 ) );\n   Console::WriteLine( &quot;    at index {0} : {1}&quot;, myBA-&gt;Count - 1, myBA-&gt;Get( myBA-&gt;Count - 1 ) );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myCol )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;    [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n myBA values:\n     [0]:    False\n     [1]:    False\n     [2]:    False\n     [3]:    False\n     [4]:    False\n\n After setting all elements to true,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    True\n\n After setting the last element to false,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    False\n\n The last two elements are:\n     at index 3 : True\n     at index 4 : False\n\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray.Get Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesBitArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a BitArray.\n        Dim myBA As New BitArray(5)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;myBA values:&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Sets all the elements to true.\n        myBA.SetAll(True)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;After setting all elements to true,&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Sets the last index to false.\n        myBA.Set(myBA.Count - 1, False)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;After setting the last element to false,&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Gets the value of the last two elements.\n        Console.WriteLine(&quot;The last two elements are: &quot;)\n        Console.WriteLine(&quot;    at index {0} : {1}&quot;, _\n           myBA.Count - 2, myBA.Get(myBA.Count - 2))\n        Console.WriteLine(&quot;    at index {0} : {1}&quot;, _\n           myBA.Count - 1, myBA.Get(myBA.Count - 1))\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(myCol As IEnumerable)\n        Dim i As Integer\n        Dim obj As Object\n        i = 0\n        For Each obj In  myCol\n            Console.WriteLine(&quot;    [{0}]:    {1}&quot;, i, obj)\n            i = i + 1\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myBA values:\n&#39;     [0]:    False\n&#39;     [1]:    False\n&#39;     [2]:    False\n&#39;     [3]:    False\n&#39;     [4]:    False\n&#39; \n&#39; After setting all elements to true,\n&#39;     [0]:    True\n&#39;     [1]:    True\n&#39;     [2]:    True\n&#39;     [3]:    True\n&#39;     [4]:    True\n&#39; \n&#39; After setting the last element to false,\n&#39;     [0]:    True\n&#39;     [1]:    True\n&#39;     [2]:    True\n&#39;     [3]:    True\n&#39;     [4]:    False\n&#39; \n&#39; The last two elements are:\n&#39;     at index 3 : True\n&#39;     at index 4 : False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_SetAll_System_Boolean_\">\r\n    \r\n            <a id=\"System_Collections_BitArray_SetAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAll(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Sets all bits in the <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> to the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAll (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to assign to all bits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to set and get specific elements in a <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic BitArray.Get Example#1\"> using System;\n using System.Collections;\n public class SamplesBitArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a BitArray.\n       BitArray myBA = new BitArray( 5 );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;myBA values:&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Sets all the elements to true.\n       myBA.SetAll( true );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;After setting all elements to true,&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Sets the last index to false.\n       myBA.Set( myBA.Count - 1, false );\n \n       // Displays the properties and values of the BitArray.\n       Console.WriteLine( &quot;After setting the last element to false,&quot; );\n       PrintIndexAndValues( myBA );\n \n       // Gets the value of the last two elements.\n       Console.WriteLine( &quot;The last two elements are: &quot; );\n       Console.WriteLine( &quot;    at index {0} : {1}&quot;, myBA.Count - 2, myBA.Get( myBA.Count - 2 ) );\n       Console.WriteLine( &quot;    at index {0} : {1}&quot;, myBA.Count - 1, myBA.Get( myBA.Count - 1 ) );\n    }\n \n \n    public static void PrintIndexAndValues( IEnumerable myCol )  {\n       int i = 0;\n       foreach ( Object obj in myCol ) {\n          Console.WriteLine( &quot;    [{0}]:    {1}&quot;, i++, obj );\n       }\n       Console.WriteLine();\n    }\n\n }\n /* \n This code produces the following output.\n \n myBA values:\n     [0]:    False\n     [1]:    False\n     [2]:    False\n     [3]:    False\n     [4]:    False\n\n After setting all elements to true,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    True\n\n After setting the last element to false,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    False\n\n The last two elements are:\n     at index 3 : True\n     at index 4 : False\n\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic BitArray.Get Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a BitArray.\n   BitArray^ myBA = gcnew BitArray( 5 );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;myBA values:&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Sets all the elements to true.\n   myBA-&gt;SetAll( true );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;After setting all elements to true,&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Sets the last index to false.\n   myBA-&gt;Set( myBA-&gt;Count - 1, false );\n   \n   // Displays the properties and values of the BitArray.\n   Console::WriteLine( &quot;After setting the last element to false,&quot; );\n   PrintIndexAndValues( myBA );\n   \n   // Gets the value of the last two elements.\n   Console::WriteLine( &quot;The last two elements are: &quot; );\n   Console::WriteLine( &quot;    at index {0} : {1}&quot;, myBA-&gt;Count - 2, myBA-&gt;Get( myBA-&gt;Count - 2 ) );\n   Console::WriteLine( &quot;    at index {0} : {1}&quot;, myBA-&gt;Count - 1, myBA-&gt;Get( myBA-&gt;Count - 1 ) );\n}\n\nvoid PrintIndexAndValues( IEnumerable^ myCol )\n{\n   int i = 0;\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;    [{0}]:    {1}&quot;, i++, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n myBA values:\n     [0]:    False\n     [1]:    False\n     [2]:    False\n     [3]:    False\n     [4]:    False\n\n After setting all elements to true,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    True\n\n After setting the last element to false,\n     [0]:    True\n     [1]:    True\n     [2]:    True\n     [3]:    True\n     [4]:    False\n\n The last two elements are:\n     at index 3 : True\n     at index 4 : False\n\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray.Get Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesBitArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a BitArray.\n        Dim myBA As New BitArray(5)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;myBA values:&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Sets all the elements to true.\n        myBA.SetAll(True)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;After setting all elements to true,&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Sets the last index to false.\n        myBA.Set(myBA.Count - 1, False)\n        \n        &#39; Displays the properties and values of the BitArray.\n        Console.WriteLine(&quot;After setting the last element to false,&quot;)\n        PrintIndexAndValues(myBA)\n        \n        &#39; Gets the value of the last two elements.\n        Console.WriteLine(&quot;The last two elements are: &quot;)\n        Console.WriteLine(&quot;    at index {0} : {1}&quot;, _\n           myBA.Count - 2, myBA.Get(myBA.Count - 2))\n        Console.WriteLine(&quot;    at index {0} : {1}&quot;, _\n           myBA.Count - 1, myBA.Get(myBA.Count - 1))\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(myCol As IEnumerable)\n        Dim i As Integer\n        Dim obj As Object\n        i = 0\n        For Each obj In  myCol\n            Console.WriteLine(&quot;    [{0}]:    {1}&quot;, i, obj)\n            i = i + 1\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; myBA values:\n&#39;     [0]:    False\n&#39;     [1]:    False\n&#39;     [2]:    False\n&#39;     [3]:    False\n&#39;     [4]:    False\n&#39; \n&#39; After setting all elements to true,\n&#39;     [0]:    True\n&#39;     [1]:    True\n&#39;     [2]:    True\n&#39;     [3]:    True\n&#39;     [4]:    True\n&#39; \n&#39; After setting the last element to false,\n&#39;     [0]:    True\n&#39;     [1]:    True\n&#39;     [2]:    True\n&#39;     [3]:    True\n&#39;     [4]:    False\n&#39; \n&#39; The last two elements are:\n&#39;     at index 3 : True\n&#39;     at index 4 : False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_BitArray_Xor_System_Collections_BitArray_\">\r\n    \r\n            <a id=\"System_Collections_BitArray_Xor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Xor(BitArray)</div>        \r\n          </div>\r\n    \r\n            <p>Performs the bitwise exclusive OR operation between the elements of the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object against the corresponding elements in the specified array. The current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object will be modified to store the result of the bitwise exclusive OR operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.BitArray Xor (System.Collections.BitArray value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array with which to perform the bitwise exclusive OR operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a></div>\r\n                  </div>\r\n                  <p>An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> and the current <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> do not have the same number of elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The bitwise exclusive OR operation returns <code>true</code> if exactly one operand is <code>true</code>, and returns <code>false</code> if both operands have the same Boolean value.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.bitarray#System_Collections_BitArray_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to perform the XOR operation between two <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic BitArray.Xor Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( IEnumerable^ myList, int myWidth );\nint main()\n{\n   \n   // Creates and initializes two BitArrays of the same size.\n   BitArray^ myBA1 = gcnew BitArray( 4 );\n   BitArray^ myBA2 = gcnew BitArray( 4 );\n   myBA1[ 0 ] = false;\n   myBA1[ 1 ] = false;\n   myBA1[ 2 ] = true;\n   myBA1[ 3 ] = true;\n   myBA2[ 0 ] = false;\n   myBA2[ 1 ] = true;\n   myBA2[ 2 ] = false;\n   myBA2[ 3 ] = true;\n   \n   // Performs a bitwise XOR operation between BitArray instances of the same size.\n   Console::WriteLine( &quot;Initial values&quot; );\n   Console::Write( &quot;myBA1:&quot; );\n   PrintValues( myBA1, 8 );\n   Console::Write( &quot;myBA2:&quot; );\n   PrintValues( myBA2, 8 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Result&quot; );\n   Console::Write( &quot;XOR:&quot; );\n   PrintValues( myBA1-&gt;Xor( myBA2 ), 8 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;After XOR&quot; );\n   Console::Write( &quot;myBA1:&quot; );\n   PrintValues( myBA1, 8 );\n   Console::Write( &quot;myBA2:&quot; );\n   PrintValues( myBA2, 8 );\n   Console::WriteLine();\n   \n   // Performing XOR between BitArray instances of different sizes returns an exception.\n   try\n   {\n      BitArray^ myBA3 = gcnew BitArray( 8 );\n      myBA3[ 0 ] = false;\n      myBA3[ 1 ] = false;\n      myBA3[ 2 ] = false;\n      myBA3[ 3 ] = false;\n      myBA3[ 4 ] = true;\n      myBA3[ 5 ] = true;\n      myBA3[ 6 ] = true;\n      myBA3[ 7 ] = true;\n      myBA1-&gt;Xor( myBA3 );\n   }\n   catch ( Exception^ myException ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, myException );\n   }\n\n}\n\nvoid PrintValues( IEnumerable^ myList, int myWidth )\n{\n   int i = myWidth;\n   IEnumerator^ myEnum = myList-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      if ( i &lt;= 0 )\n      {\n         i = myWidth;\n         Console::WriteLine();\n      }\n\n      i--;\n      Console::Write( &quot;{0,8}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Initial values\n myBA1:   False   False    True    True\n myBA2:   False    True   False    True\n\n Result\n XOR:   False    True    True   False\n\n After XOR\n myBA1:   False    True    True   False\n myBA2:   False    True   False    True\n\n Exception: System.ArgumentException: Array lengths must be the same.\n    at System.Collections.BitArray.Xor(BitArray value)\n    at SamplesBitArray.Main()\n\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BitArray.Xor Example#1\"> using System;\n using System.Collections;\n public class SamplesBitArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes two BitArrays of the same size.\n       BitArray myBA1 = new BitArray( 4 );\n       BitArray myBA2 = new BitArray( 4 );\n       myBA1[0] = myBA1[1] = false;\n       myBA1[2] = myBA1[3] = true;\n       myBA2[0] = myBA2[2] = false;\n       myBA2[1] = myBA2[3] = true;\n \n       // Performs a bitwise XOR operation between BitArray instances of the same size.\n       Console.WriteLine( &quot;Initial values&quot; );\n       Console.Write( &quot;myBA1:&quot; );\n       PrintValues( myBA1, 8 );\n       Console.Write( &quot;myBA2:&quot; );\n       PrintValues( myBA2, 8 );\n       Console.WriteLine();\n \n       Console.WriteLine( &quot;Result&quot; );\n       Console.Write( &quot;XOR:&quot; );\n       PrintValues( myBA1.Xor( myBA2 ), 8 );\n       Console.WriteLine();\n \n       Console.WriteLine( &quot;After XOR&quot; );\n       Console.Write( &quot;myBA1:&quot; );\n       PrintValues( myBA1, 8 );\n       Console.Write( &quot;myBA2:&quot; );\n       PrintValues( myBA2, 8 );\n       Console.WriteLine();\n \n       // Performing XOR between BitArray instances of different sizes returns an exception.\n       try  {\n          BitArray myBA3 = new BitArray( 8 );\n          myBA3[0] = myBA3[1] = myBA3[2] = myBA3[3] = false;\n          myBA3[4] = myBA3[5] = myBA3[6] = myBA3[7] = true;\n          myBA1.Xor( myBA3 );\n       } catch ( Exception myException )  {\n          Console.WriteLine(&quot;Exception: &quot; + myException.ToString());\n       }\n    }\n \n \n    public static void PrintValues( IEnumerable myList, int myWidth )  {\n       int i = myWidth;\n       foreach ( Object obj in myList ) {\n          if ( i &lt;= 0 )  {\n             i = myWidth;\n             Console.WriteLine();\n          }\n          i--;\n          Console.Write( &quot;{0,8}&quot;, obj );\n       }\n       Console.WriteLine();\n    }\n\n }\n\n\n /* \n This code produces the following output.\n \n Initial values\n myBA1:   False   False    True    True\n myBA2:   False    True   False    True\n\n Result\n XOR:   False    True    True   False\n\n After XOR\n myBA1:   False    True    True   False\n myBA2:   False    True   False    True\n\n Exception: System.ArgumentException: Array lengths must be the same.\n    at System.Collections.BitArray.Xor(BitArray value)\n    at SamplesBitArray.Main()\n\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BitArray.Xor Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesBitArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes two BitArrays of the same size.\n        Dim myBA1 As New BitArray(4)\n        Dim myBA2 As New BitArray(4)\n        myBA1(0) = False\n        myBA1(1) = False\n        myBA1(2) = True\n        myBA1(3) = True\n        myBA2(0) = False\n        myBA2(2) = False\n        myBA2(1) = True\n        myBA2(3) = True\n        \n        &#39; Performs a bitwise XOR operation between BitArray instances of the same size.\n        Console.WriteLine(&quot;Initial values&quot;)\n        Console.Write(&quot;myBA1:&quot;)\n        PrintValues(myBA1, 8)\n        Console.Write(&quot;myBA2:&quot;)\n        PrintValues(myBA2, 8)\n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;Result&quot;)\n        Console.Write(&quot;XOR:&quot;)\n        PrintValues(myBA1.Xor(myBA2), 8)\n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;After XOR&quot;)\n        Console.Write(&quot;myBA1:&quot;)\n        PrintValues(myBA1, 8)\n        Console.Write(&quot;myBA2:&quot;)\n        PrintValues(myBA2, 8)\n        Console.WriteLine()\n        \n        &#39; Performing XOR between BitArray instances of different sizes returns an exception.\n        Try\n            Dim myBA3 As New BitArray(8)\n            myBA3(0) = False\n            myBA3(1) = False\n            myBA3(2) = False\n            myBA3(3) = False\n            myBA3(4) = True\n            myBA3(5) = True\n            myBA3(6) = True\n            myBA3(7) = True\n            myBA1.Xor(myBA3)\n        Catch myException As Exception\n            Console.WriteLine(&quot;Exception: &quot; + myException.ToString())\n        End Try\n    End Sub\n    \n    Public Shared Sub PrintValues(myList As IEnumerable, myWidth As Integer)\n        Dim i As Integer = myWidth\n        Dim obj As [Object]\n        For Each obj In  myList\n            If i &lt;= 0 Then\n                i = myWidth\n                Console.WriteLine()\n            End If\n            i -= 1\n            Console.Write(&quot;{0,8}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues\n\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initial values\n&#39; myBA1:   False   False    True    True\n&#39; myBA2:   False    True   False    True\n&#39; \n&#39; Result\n&#39; XOR:   False    True    True   False\n&#39; \n&#39; After XOR\n&#39; myBA1:   False    True    True   False\n&#39; myBA2:   False    True   False    True\n&#39; \n&#39; Exception: System.ArgumentException: Array lengths must be the same.\n&#39;    at System.Collections.BitArray.Xor(BitArray value)\n&#39;    at SamplesBitArray.Main()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.BitArray.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.BitArray.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.And\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Clone\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Get\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Length\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Not\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Or\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Set\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.SetAll\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.BitArray.Xor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5d88c72d-6036-6838-e59d-a8360c1a5217\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Manages a compact array of bit values, which are represented as Booleans, where true indicates that the bit is on (1) and false indicates the bit is off (0).\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.BitArray\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.BitArray.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.BitArray.yml","open_to_public_contributors":true,"api_name":["System.Collections.BitArray","System.Collections.BitArray..ctor","System.Collections.BitArray.And","System.Collections.BitArray.Clone","System.Collections.BitArray.CopyTo","System.Collections.BitArray.Count","System.Collections.BitArray.Get","System.Collections.BitArray.GetEnumerator","System.Collections.BitArray.IsReadOnly","System.Collections.BitArray.IsSynchronized","System.Collections.BitArray.Item","System.Collections.BitArray.Length","System.Collections.BitArray.Not","System.Collections.BitArray.Or","System.Collections.BitArray.Set","System.Collections.BitArray.SetAll","System.Collections.BitArray.SyncRoot","System.Collections.BitArray.Xor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.BitArray","System::Collections::BitArray","System.Collections.BitArray.#ctor","System::Collections::BitArray::#ctor","System.Collections.BitArray.And","System::Collections::BitArray::And","System.Collections.BitArray.Clone","System::Collections::BitArray::Clone","System.Collections.BitArray.CopyTo","System::Collections::BitArray::CopyTo","System.Collections.BitArray.Count","System::Collections::BitArray::Count","System.Collections.BitArray.Get","System::Collections::BitArray::Get","System.Collections.BitArray.GetEnumerator","System::Collections::BitArray::GetEnumerator","System.Collections.BitArray.IsReadOnly","System::Collections::BitArray::IsReadOnly","System.Collections.BitArray.IsSynchronized","System::Collections::BitArray::IsSynchronized","System.Collections.BitArray.Item","System::Collections::BitArray::Item","System.Collections.BitArray.Length","System::Collections::BitArray::Length","System.Collections.BitArray.Not","System::Collections::BitArray::Not","System.Collections.BitArray.Or","System::Collections::BitArray::Or","System.Collections.BitArray.Set","System::Collections::BitArray::Set","System.Collections.BitArray.SetAll","System::Collections::BitArray::SetAll","System.Collections.BitArray.SyncRoot","System::Collections::BitArray::SyncRoot","System.Collections.BitArray.Xor","System::Collections::BitArray::Xor"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5d88c72d-6036-6838-e59d-a8360c1a5217","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/BitArray.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BitArray class | Microsoft Docs","_op_ogTitle":"BitArray class","description":"Manages a compact array of bit values, which are represented as Booleans, where true indicates that the bit is on (1) and false indicates the bit is off (0).\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.BitArray","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.bitarray","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.bitarray","fileRelativePath":"System.Collections.BitArray.html"},"themesRelativePathToOutputRoot":"_themes/"}