{"content":"    \r\n    <h1 id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection\">\r\n      <span class=\"lang-csharp\">SqlBulkCopyColumnMappingCollection</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Collection of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> objects that inherits from <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class SqlBulkCopyColumnMappingCollection : System.Collections.CollectionBase</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">System.Collections.CollectionBase</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SqlBulkCopyColumnMappingCollection</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Capacity\" data-linktype=\"relative-path\">Capacity</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count\" data-linktype=\"relative-path\">Count</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_GetEnumerator\" data-linktype=\"relative-path\">GetEnumerator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList\" data-linktype=\"relative-path\">InnerList</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List\" data-linktype=\"relative-path\">List</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnClear\" data-linktype=\"relative-path\">OnClear()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnClearComplete\" data-linktype=\"relative-path\">OnClearComplete()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnInsert_System_Int32_System_Object_\" data-linktype=\"relative-path\">OnInsert(Int32,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnInsertComplete_System_Int32_System_Object_\" data-linktype=\"relative-path\">OnInsertComplete(Int32,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnRemove_System_Int32_System_Object_\" data-linktype=\"relative-path\">OnRemove(Int32,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnRemoveComplete_System_Int32_System_Object_\" data-linktype=\"relative-path\">OnRemoveComplete(Int32,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnSet_System_Int32_System_Object_System_Object_\" data-linktype=\"relative-path\">OnSet(Int32,Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnSetComplete_System_Int32_System_Object_System_Object_\" data-linktype=\"relative-path\">OnSetComplete(Int32,Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnValidate_System_Object_\" data-linktype=\"relative-path\">OnValidate(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"relative-path\">ICollection.CopyTo(Array,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_ICollection_IsSynchronized\" data-linktype=\"relative-path\">ICollection.IsSynchronized</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_ICollection_SyncRoot\" data-linktype=\"relative-path\">ICollection.SyncRoot</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_IList_Add_System_Object_\" data-linktype=\"relative-path\">IList.Add(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_IList_Contains_System_Object_\" data-linktype=\"relative-path\">IList.Contains(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_IList_IndexOf_System_Object_\" data-linktype=\"relative-path\">IList.IndexOf(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_IList_Insert_System_Int32_System_Object_\" data-linktype=\"relative-path\">IList.Insert(Int32,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_IList_IsFixedSize\" data-linktype=\"relative-path\">IList.IsFixedSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_IList_IsReadOnly\" data-linktype=\"relative-path\">IList.IsReadOnly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_IList_Item_System_Int32_\" data-linktype=\"relative-path\">IList.Item(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_System_Collections_IList_Remove_System_Object_\" data-linktype=\"relative-path\">IList.Remove(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Column mappings define the mapping between data source and the target table.  </p>\n<p> If mappings are not definedâ€”that is, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection is emptyâ€”the columns are mapped implicitly based on ordinal position. For this to work, source and target schemas must match. If they do not, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.  </p>\n<p> If the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection is not empty, not every column present in the data source has to be specified. Those not mapped by the collection are ignored.  </p>\n<p> You can refer to source and target columns by either name or ordinal. You can mix by-name and by-ordinal column references in the same mappings collection.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_Data_SqlClient_SqlBulkCopyColumnMapping_\" data-linktype=\"self-bookmark\">Add(SqlBulkCopyColumnMapping)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified mapping to the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Add(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> and adds it to the collection, using ordinals to specify both source and destination columns.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_Int32_System_String_\" data-linktype=\"self-bookmark\">Add(Int32,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> and adds it to the collection, using an ordinal for the source column and a string for the destination column.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Add(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> and adds it to the collection, using a column name to describe the source column and an ordinal to specify the destination column.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_String_System_String_\" data-linktype=\"self-bookmark\">Add(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> and adds it to the collection, using column names to specify both source and destination columns.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clears the contents of the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Contains_System_Data_SqlClient_SqlBulkCopyColumnMapping_\" data-linktype=\"self-bookmark\">Contains(SqlBulkCopyColumnMapping)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a specified <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object exists in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_CopyTo_System_Data_SqlClient_SqlBulkCopyColumnMapping___System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(SqlBulkCopyColumnMapping[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a> to an array of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> items, starting at a particular index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_IndexOf_System_Data_SqlClient_SqlBulkCopyColumnMapping_\" data-linktype=\"self-bookmark\">IndexOf(SqlBulkCopyColumnMapping)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the index of the specified <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Insert_System_Int32_System_Data_SqlClient_SqlBulkCopyColumnMapping_\" data-linktype=\"self-bookmark\">Insert(Int32,SqlBulkCopyColumnMapping)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Insert a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> at the index specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Remove_System_Data_SqlClient_SqlBulkCopyColumnMapping_\" data-linktype=\"self-bookmark\">Remove(SqlBulkCopyColumnMapping)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the specified <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> element from the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the mapping at the specified index from the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlBulkCopyColumnMapping this[int index] { get; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> to find.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_Data_SqlClient_SqlBulkCopyColumnMapping_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(SqlBulkCopyColumnMapping)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified mapping to the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlBulkCopyColumnMapping Add (System.Data.SqlClient.SqlBulkCopyColumnMapping bulkCopyColumnMapping);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bulkCopyColumnMapping</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object that describes the mapping to be added to the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> objects are used to create a column map for the bulk copy.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ColumnMapping#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoDifferentColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Set up the bulk copy object.\n            Using bulkCopy As SqlBulkCopy = New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = _\n                &quot;dbo.BulkCopyDemoDifferentColumns&quot;\n\n                &#39; Set up the column mappings by name.\n                Dim mapID As New _\n                  SqlBulkCopyColumnMapping(&quot;ProductID&quot;, &quot;ProdID&quot;)\n                bulkCopy.ColumnMappings.Add(mapID)\n\n                Dim mapName As New _\n                 SqlBulkCopyColumnMapping(&quot;Name&quot;, &quot;ProdName&quot;)\n                bulkCopy.ColumnMappings.Add(mapName)\n\n                Dim mapMumber As New _\n                 SqlBulkCopyColumnMapping(&quot;ProductNumber&quot;, &quot;ProdNum&quot;)\n                bulkCopy.ColumnMappings.Add(mapMumber)\n\n                &#39; Write from the source to the destination.\n                Try\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ColumnMapping#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoDifferentColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Set up the bulk copy object.\n            using (SqlBulkCopy bulkCopy =\n                       new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoDifferentColumns&quot;;\n\n                // Set up the column mappings by name.\n                SqlBulkCopyColumnMapping mapID =\n                    new SqlBulkCopyColumnMapping(&quot;ProductID&quot;, &quot;ProdID&quot;);\n                bulkCopy.ColumnMappings.Add(mapID);\n\n                SqlBulkCopyColumnMapping mapName =\n                    new SqlBulkCopyColumnMapping(&quot;Name&quot;, &quot;ProdName&quot;);\n                bulkCopy.ColumnMappings.Add(mapName);\n\n                SqlBulkCopyColumnMapping mapMumber =\n                    new SqlBulkCopyColumnMapping(&quot;ProductNumber&quot;, &quot;ProdNum&quot;);\n                bulkCopy.ColumnMappings.Add(mapMumber);\n\n                // Write from the source to the destination.\n                try\n                {\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> and adds it to the collection, using ordinals to specify both source and destination columns.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlBulkCopyColumnMapping Add (int sourceColumnIndex, int destinationColumnIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceColumnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The ordinal position of the source column within the data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationColumnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The ordinal position of the destination column within the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </div>\r\n                  <p>A column mapping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> objects are used to create a column map for the bulk copy using the ordinal position of the source and destination columns.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ColumnMappingCollectionOrdinal#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoDifferentColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Set up the bulk copy object.\n            Using bulkCopy As SqlBulkCopy = New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = _\n                &quot;dbo.BulkCopyDemoDifferentColumns&quot;\n\n                &#39; The column order in the source doesn&#39;t match the order \n                &#39; in the destination, so ColumnMappings must be defined.\n                bulkCopy.ColumnMappings.Add(0, 0)\n                bulkCopy.ColumnMappings.Add(1, 2)\n                bulkCopy.ColumnMappings.Add(2, 1)\n\n                &#39; Write from the source to the destination.\n                Try\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ColumnMappingCollectionOrdinal#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoDifferentColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Set up the bulk copy object. \n            using (SqlBulkCopy bulkCopy =\n                       new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoDifferentColumns&quot;;\n\n                // The column order in the source doesn&#39;t match the order \n                // in the destination, so ColumnMappings must be defined.\n                bulkCopy.ColumnMappings.Add(0, 0);\n                bulkCopy.ColumnMappings.Add(1, 2);\n                bulkCopy.ColumnMappings.Add(2, 1);\n\n                // Write from the source to the destination.\n                try\n                {\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_Int32_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Int32,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> and adds it to the collection, using an ordinal for the source column and a string for the destination column.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlBulkCopyColumnMapping Add (int sourceColumnIndex, string destinationColumn);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceColumnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The ordinal position of the source column within the data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationColumn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the destination column within the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </div>\r\n                  <p>A column mapping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> objects are used to create a column map for the bulk copy.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ColumnMappingIndexColName#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoDifferentColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Set up the bulk copy object.\n            Using bulkCopy As SqlBulkCopy = New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = _\n                &quot;dbo.BulkCopyDemoDifferentColumns&quot;\n\n                &#39; The column order in the source doesn&#39;t match the order \n                &#39; in the destination, so ColumnMappings must be defined.\n                bulkCopy.ColumnMappings.Add(0, &quot;ProdID&quot;)\n                bulkCopy.ColumnMappings.Add(1, &quot;ProdName&quot;)\n                bulkCopy.ColumnMappings.Add(2, &quot;ProdNum&quot;)\n\n                &#39; Write from the source to the destination.\n                Try\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ColumnMappingIndexColName#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoDifferentColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Set up the bulk copy object. \n            using (SqlBulkCopy bulkCopy =\n                       new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoDifferentColumns&quot;;\n\n                // The column order in the source doesn&#39;t match the order \n                // in the destination, so ColumnMappings must be defined.\n                bulkCopy.ColumnMappings.Add(0, &quot;ProdID&quot;);\n                bulkCopy.ColumnMappings.Add(1, &quot;ProdName&quot;);\n                bulkCopy.ColumnMappings.Add(2, &quot;ProdNum&quot;);\n\n                // Write from the source to the destination.\n                try\n                {\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> and adds it to the collection, using a column name to describe the source column and an ordinal to specify the destination column.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlBulkCopyColumnMapping Add (string sourceColumn, int destinationColumnIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceColumn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the source column within the data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationColumnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The ordinal position of the destination column within the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </div>\r\n                  <p>A column mapping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> objects are used to create a column map for the bulk copy.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ColumnMappingColNameIndex#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoDifferentColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Set up the bulk copy object. \n            using (SqlBulkCopy bulkCopy =\n                       new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoDifferentColumns&quot;;\n\n                // The column order in the source doesn&#39;t match the order \n                // in the destination, so ColumnMappings must be defined.\n                bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, 0);\n                bulkCopy.ColumnMappings.Add(&quot;ProductNumber&quot;, 1);\n                bulkCopy.ColumnMappings.Add(&quot;Name&quot;, 2);\n\n                // Write from the source to the destination.\n                try\n                {\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ColumnMappingColNameIndex#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoDifferentColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Set up the bulk copy object.\n            Using bulkCopy As SqlBulkCopy = New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = _\n                &quot;dbo.BulkCopyDemoDifferentColumns&quot;\n\n                &#39; The column order in the source doesn&#39;t match the order \n                &#39; in the destination, so ColumnMappings must be defined.\n                bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, 0)\n                bulkCopy.ColumnMappings.Add(&quot;ProductNumber&quot;, 1)\n                bulkCopy.ColumnMappings.Add(&quot;Name&quot;, 2)\n\n                &#39; Write from the source to the destination.\n                Try\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> and adds it to the collection, using column names to specify both source and destination columns.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlBulkCopyColumnMapping Add (string sourceColumn, string destinationColumn);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceColumn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the source column within the data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationColumn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the destination column within the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </div>\r\n                  <p>A column mapping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a mapping that is different from others already in the collection, an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. The code creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object by specifying the column names.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ColumnMappingCollection#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoDifferentColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Set up the bulk copy object. \n            using (SqlBulkCopy bulkCopy =\n                       new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoDifferentColumns&quot;;\n\n                // The column order in the source doesn&#39;t match the order \n                // in the destination, so ColumnMappings must be defined.\n                bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, &quot;ProdID&quot;);\n                bulkCopy.ColumnMappings.Add(&quot;Name&quot;, &quot;ProdName&quot;);\n                bulkCopy.ColumnMappings.Add(&quot;ProductNumber&quot;, &quot;ProdNum&quot;);\n\n                // Write from the source to the destination.\n                try\n                {\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ColumnMappingCollection#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoDifferentColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Set up the bulk copy object.\n            Using bulkCopy As SqlBulkCopy = New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = _\n                &quot;dbo.BulkCopyDemoDifferentColumns&quot;\n\n                &#39; The column order in the source doesn&#39;t match the order \n                &#39; in the destination, so ColumnMappings must be defined.\n                bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, &quot;ProdID&quot;)\n                bulkCopy.ColumnMappings.Add(&quot;Name&quot;, &quot;ProdName&quot;)\n                bulkCopy.ColumnMappings.Add(&quot;ProductNumber&quot;, &quot;ProdNum&quot;)\n\n                &#39; Write from the source to the destination.\n                Try\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Clear\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Clears the contents of the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Clear method is most commonly used when you use a single <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must clear the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a> after the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> method and before processing the next bulk copy.  </p>\n<p> Performing several bulk copies using the same <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance will usually be more efficient from a performance point of view than using a separate <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> for each operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. The Clear method must be used after the first bulk copy is performed and before the next bulk copy&#39;s column mappings are defined.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ColumnMappingOrdersDetails#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using connection As SqlConnection = New SqlConnection(connectionString)\n            connection.Open()\n\n            &#39; Empty the destination tables.\n            Dim deleteHeader As New SqlCommand( _\n              &quot;DELETE FROM dbo.BulkCopyDemoOrderHeader;&quot;, connection)\n            deleteHeader.ExecuteNonQuery()\n            deleteHeader.Dispose()\n            Dim deleteDetail As New SqlCommand( _\n              &quot;DELETE FROM dbo.BulkCopyDemoOrderDetail;&quot;, connection)\n            deleteDetail.ExecuteNonQuery()\n\n            &#39; Perform an initial count on the destination table \n            &#39; with matching columns.\n            Dim countRowHeader As New SqlCommand( _\n               &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;&quot;, _\n                connection)\n            Dim countStartHeader As Long = System.Convert.ToInt32( _\n             countRowHeader.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count for Header table = {0}&quot;, _\n             countStartHeader)\n\n            &#39; Perform an initial count on the destination table \n            &#39; with different column positions.\n            Dim countRowDetail As New SqlCommand( _\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;&quot;, _\n                connection)\n            Dim countStartDetail As Long = System.Convert.ToInt32( _\n                countRowDetail.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count for Detail table = &quot; &amp; _\n               countStartDetail)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            &#39; The Sales.SalesOrderHeader and Sales.SalesOrderDetail\n            &#39; tables are quite large and could easily cause a timeout\n            &#39; if all data from the tables is added to the destination.\n            &#39; To keep the example simple and quick, a parameter is \n            &#39; used to select only orders for a particular account as\n            &#39; the source for the bulk insert.\n            Dim headerData As SqlCommand = New SqlCommand( _\n             &quot;SELECT [SalesOrderID], [OrderDate], &quot; &amp; _\n             &quot;[AccountNumber] FROM [Sales].[SalesOrderHeader] &quot; &amp; _\n             &quot;WHERE [AccountNumber] = @accountNumber;&quot;, _\n             connection)\n\n            Dim parameterAccount As SqlParameter = New SqlParameter()\n            parameterAccount.ParameterName = &quot;@accountNumber&quot;\n            parameterAccount.SqlDbType = SqlDbType.NVarChar\n            parameterAccount.Direction = ParameterDirection.Input\n            parameterAccount.Value = &quot;10-4020-000034&quot;\n            headerData.Parameters.Add(parameterAccount)\n\n            Dim readerHeader As SqlDataReader = _\n             headerData.ExecuteReader()\n\n            &#39; Get the Detail data in a separate connection.\n            Using connection2 As SqlConnection = New SqlConnection(connectionString)\n                connection2.Open()\n\n                Dim sourceDetailData As SqlCommand = New SqlCommand( _\n                 &quot;SELECT [Sales].[SalesOrderDetail].[SalesOrderID], &quot; &amp; _\n                 &quot;[SalesOrderDetailID], [OrderQty], [ProductID], [UnitPrice] &quot; &amp; _\n                 &quot;FROM [Sales].[SalesOrderDetail] INNER JOIN &quot; &amp; _\n                 &quot;[Sales].[SalesOrderHeader] &quot; &amp; _\n                 &quot;ON [Sales].[SalesOrderDetail].[SalesOrderID] = &quot; &amp; _\n                 &quot;[Sales].[SalesOrderHeader].[SalesOrderID] &quot; &amp; _\n                 &quot;WHERE [AccountNumber] = @accountNumber;&quot;, connection2)\n\n                Dim accountDetail As SqlParameter = New SqlParameter()\n                accountDetail.ParameterName = &quot;@accountNumber&quot;\n                accountDetail.SqlDbType = SqlDbType.NVarChar\n                accountDetail.Direction = ParameterDirection.Input\n                accountDetail.Value = &quot;10-4020-000034&quot;\n                sourceDetailData.Parameters.Add( _\n                 accountDetail)\n\n                Dim readerDetail As SqlDataReader = _\n                 sourceDetailData.ExecuteReader()\n\n                &#39; Create the SqlBulkCopy object.\n                Using bulkCopy As SqlBulkCopy = _\n                  New SqlBulkCopy(connectionString)\n                    bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoOrderHeader&quot;\n\n                    &#39; Guarantee that columns are mapped correctly by\n                    &#39; defining the column mappings for the order.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderID&quot;, &quot;SalesOrderID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;OrderDate&quot;, &quot;OrderDate&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;AccountNumber&quot;, &quot;AccountNumber&quot;)\n \n                   &#39; Write readerHeader to the destination.\n                    Try\n                        bulkCopy.WriteToServer(readerHeader)\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n                    Finally\n                        readerHeader.Close()\n                    End Try\n\n                    &#39; Set up the order details destination.\n                    bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoOrderDetail&quot;\n\n                    &#39; Clear the ColumnMappingCollection.\n                    bulkCopy.ColumnMappings.Clear()\n\n                    &#39; Add order detail column mappings.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderID&quot;, &quot;SalesOrderID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderDetailID&quot;, &quot;SalesOrderDetailID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;OrderQty&quot;, &quot;OrderQty&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, &quot;ProductID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;UnitPrice&quot;, &quot;UnitPrice&quot;)\n\n                    &#39; Write readerDetail to the destination.\n                    Try\n                        bulkCopy.WriteToServer(readerDetail)\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n                    Finally\n                        readerDetail.Close()\n                    End Try\n                End Using\n\n                &#39; Perform a final count on the destination tables\n                &#39; to see how many rows were added.\n                Dim countEndHeader As Long = System.Convert.ToInt32( _\n                  countRowHeader.ExecuteScalar())\n                Console.WriteLine(&quot;{0} rows were added to the Header table.&quot;, _\n                  countEndHeader - countStartHeader)\n                Dim countEndDetail As Long = System.Convert.ToInt32( _\n                   countRowDetail.ExecuteScalar())\n                Console.WriteLine(&quot;{0} rows were added to the Detail table.&quot;, _\n                    countEndDetail - countStartDetail)\n\n                Console.WriteLine(&quot;Press Enter to finish.&quot;)\n                Console.ReadLine()\n            End Using\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ColumnMappingOrdersDetails#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a connection to the AdventureWorks database.\n        using (SqlConnection connection =\n                   new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            // Empty the destination tables. \n            SqlCommand deleteHeader = new SqlCommand(\n                &quot;DELETE FROM dbo.BulkCopyDemoOrderHeader;&quot;,\n                connection);\n            deleteHeader.ExecuteNonQuery();\n            SqlCommand deleteDetail = new SqlCommand(\n                &quot;DELETE FROM dbo.BulkCopyDemoOrderDetail;&quot;,\n                connection);\n            deleteDetail.ExecuteNonQuery();\n\n            // Perform an initial count on the destination\n            //  table with matching columns. \n            SqlCommand countRowHeader = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;&quot;,\n                connection);\n            long countStartHeader = System.Convert.ToInt32(\n                countRowHeader.ExecuteScalar());\n            Console.WriteLine(\n                &quot;Starting row count for Header table = {0}&quot;,\n                countStartHeader);\n\n            // Perform an initial count on the destination\n            // table with different column positions. \n            SqlCommand countRowDetail = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;&quot;,\n                connection);\n            long countStartDetail = System.Convert.ToInt32(\n                countRowDetail.ExecuteScalar());\n            Console.WriteLine(\n                &quot;Starting row count for Detail table = {0}&quot;,\n                countStartDetail);\n\n            // Get data from the source table as a SqlDataReader.\n            // The Sales.SalesOrderHeader and Sales.SalesOrderDetail\n            // tables are quite large and could easily cause a timeout\n            // if all data from the tables is added to the destination. \n            // To keep the example simple and quick, a parameter is  \n            // used to select only orders for a particular account \n            // as the source for the bulk insert. \n            SqlCommand headerData = new SqlCommand(\n                &quot;SELECT [SalesOrderID], [OrderDate], &quot; +\n                &quot;[AccountNumber] FROM [Sales].[SalesOrderHeader] &quot; +\n                &quot;WHERE [AccountNumber] = @accountNumber;&quot;,\n                connection);\n            SqlParameter parameterAccount = new SqlParameter();\n            parameterAccount.ParameterName = &quot;@accountNumber&quot;;\n            parameterAccount.SqlDbType = SqlDbType.NVarChar;\n            parameterAccount.Direction = ParameterDirection.Input;\n            parameterAccount.Value = &quot;10-4020-000034&quot;;\n            headerData.Parameters.Add(parameterAccount);\n            SqlDataReader readerHeader = headerData.ExecuteReader();\n\n            // Get the Detail data in a separate connection.\n            using (SqlConnection connection2 = new SqlConnection(connectionString))\n            {\n                connection2.Open();\n                SqlCommand sourceDetailData = new SqlCommand(\n                    &quot;SELECT [Sales].[SalesOrderDetail].[SalesOrderID], [SalesOrderDetailID], &quot; +\n                    &quot;[OrderQty], [ProductID], [UnitPrice] FROM [Sales].[SalesOrderDetail] &quot; +\n                    &quot;INNER JOIN [Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].&quot; +\n                    &quot;[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] &quot; +\n                    &quot;WHERE [AccountNumber] = @accountNumber;&quot;, connection2);\n\n                SqlParameter accountDetail = new SqlParameter();\n                accountDetail.ParameterName = &quot;@accountNumber&quot;;\n                accountDetail.SqlDbType = SqlDbType.NVarChar;\n                accountDetail.Direction = ParameterDirection.Input;\n                accountDetail.Value = &quot;10-4020-000034&quot;;\n                sourceDetailData.Parameters.Add(accountDetail);\n                SqlDataReader readerDetail = sourceDetailData.ExecuteReader();\n\n                // Create the SqlBulkCopy object. \n                using (SqlBulkCopy bulkCopy =\n                           new SqlBulkCopy(connectionString))\n                {\n                    bulkCopy.DestinationTableName =\n                        &quot;dbo.BulkCopyDemoOrderHeader&quot;;\n\n                    // Guarantee that columns are mapped correctly by\n                    // defining the column mappings for the order.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderID&quot;, &quot;SalesOrderID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;OrderDate&quot;, &quot;OrderDate&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;AccountNumber&quot;, &quot;AccountNumber&quot;);\n\n                    // Write readerHeader to the destination.\n                    try\n                    {\n                        bulkCopy.WriteToServer(readerHeader);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        readerHeader.Close();\n                    }\n\n                    // Set up the order details destination. \n                    bulkCopy.DestinationTableName =&quot;dbo.BulkCopyDemoOrderDetail&quot;;\n\n                    // Clear the ColumnMappingCollection.\n                    bulkCopy.ColumnMappings.Clear();\n\n                    // Add order detail column mappings.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderID&quot;, &quot;SalesOrderID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderDetailID&quot;, &quot;SalesOrderDetailID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;OrderQty&quot;, &quot;OrderQty&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, &quot;ProductID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;UnitPrice&quot;, &quot;UnitPrice&quot;);\n\n                    // Write readerDetail to the destination.\n                    try\n                    {\n                        bulkCopy.WriteToServer(readerDetail);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        readerDetail.Close();\n                    }\n                }\n\n                // Perform a final count on the destination\n                // tables to see how many rows were added. \n                long countEndHeader = System.Convert.ToInt32(\n                    countRowHeader.ExecuteScalar());\n                Console.WriteLine(&quot;{0} rows were added to the Header table.&quot;,\n                    countEndHeader - countStartHeader);\n                long countEndDetail = System.Convert.ToInt32(\n                    countRowDetail.ExecuteScalar());\n                Console.WriteLine(&quot;{0} rows were added to the Detail table.&quot;,\n                    countEndDetail - countStartDetail);\n                Console.WriteLine(&quot;Press Enter to finish.&quot;);\n                Console.ReadLine();\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Contains_System_Data_SqlClient_SqlBulkCopyColumnMapping_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(SqlBulkCopyColumnMapping)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a specified <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object exists in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (System.Data.SqlClient.SqlBulkCopyColumnMapping value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A valid <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified mapping exists in the collection; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_CopyTo_System_Data_SqlClient_SqlBulkCopyColumnMapping___System_Int32_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(SqlBulkCopyColumnMapping[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a> to an array of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> items, starting at a particular index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (System.Data.SqlClient.SqlBulkCopyColumnMapping[] array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> array that is the destination of the elements copied from <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a>. The array must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_IndexOf_System_Data_SqlClient_SqlBulkCopyColumnMapping_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(SqlBulkCopyColumnMapping)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the index of the specified <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (System.Data.SqlClient.SqlBulkCopyColumnMapping value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object for which to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the column mapping, or -1 if the column mapping is not found in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Insert_System_Int32_System_Data_SqlClient_SqlBulkCopyColumnMapping_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,SqlBulkCopyColumnMapping)</div>        \r\n          </div>\r\n    \r\n            <p>Insert a new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> at the index specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Insert (int index, System.Data.SqlClient.SqlBulkCopyColumnMapping value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Integer value of the location within the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a> at which to insert the new <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object to be inserted in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Remove_System_Data_SqlClient_SqlBulkCopyColumnMapping_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(SqlBulkCopyColumnMapping)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the specified <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> element from the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove (System.Data.SqlClient.SqlBulkCopyColumnMapping value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object to be removed from the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Remove method is most commonly used when you use a single <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must remove mappings that no longer apply after the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> method is called and before defining mapping for the next bulk copy. You can clear the entire collection by using the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Clear_\" data-linktype=\"relative-path\">Clear</a> method, or remove mappings individually using the Remove method or the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method.  </p>\n<p> Performing several bulk copies using the same <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance will usually be more efficient from a performance point of view than using a separate <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> for each operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. Both bulk copies include a mapping for the <strong>SalesOrderID</strong>, so rather than clearing the entire collection between bulk copy operations, the example removes all mappings except for the <strong>SalesOrderID</strong> mapping and then adds the appropriate mappings for the second bulk copy operation.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ColumnMappingRemove#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using connection As SqlConnection = New SqlConnection(connectionString)\n            connection.Open()\n\n            &#39; Empty the destination tables.\n            Dim deleteHeader As New SqlCommand( _\n              &quot;DELETE FROM dbo.BulkCopyDemoOrderHeader;&quot;, connection)\n            deleteHeader.ExecuteNonQuery()\n            deleteHeader.Dispose()\n            Dim deleteDetail As New SqlCommand( _\n              &quot;DELETE FROM dbo.BulkCopyDemoOrderDetail;&quot;, connection)\n            deleteDetail.ExecuteNonQuery()\n\n            &#39; Perform an initial count on the destination table \n            &#39; with matching columns.\n            Dim countRowHeader As New SqlCommand( _\n               &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;&quot;, _\n                connection)\n            Dim countStartHeader As Long = System.Convert.ToInt32( _\n             countRowHeader.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count for Header table = {0}&quot;, _\n             countStartHeader)\n\n            &#39; Perform an initial count on the destination table \n            &#39; with different column positions.\n            Dim countRowDetail As New SqlCommand( _\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;&quot;, _\n                connection)\n            Dim countStartDetail As Long = System.Convert.ToInt32( _\n                countRowDetail.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count for Detail table = &quot; &amp; _\n               countStartDetail)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            &#39; The Sales.SalesOrderHeader and Sales.SalesOrderDetail\n            &#39; tables are quite large and could easily cause a timeout\n            &#39; if all data from the tables is added to the destination.\n            &#39; To keep the example simple and quick, a parameter is \n            &#39; used to select only orders for a particular account as\n            &#39; the source for the bulk insert.\n            Dim headerData As SqlCommand = New SqlCommand( _\n             &quot;SELECT [SalesOrderID], [OrderDate], &quot; &amp; _\n             &quot;[AccountNumber] FROM [Sales].[SalesOrderHeader] &quot; &amp; _\n             &quot;WHERE [AccountNumber] = @accountNumber;&quot;, _\n             connection)\n\n            Dim parameterAccount As SqlParameter = New SqlParameter()\n            parameterAccount.ParameterName = &quot;@accountNumber&quot;\n            parameterAccount.SqlDbType = SqlDbType.NVarChar\n            parameterAccount.Direction = ParameterDirection.Input\n            parameterAccount.Value = &quot;10-4020-000034&quot;\n            headerData.Parameters.Add(parameterAccount)\n\n            Dim readerHeader As SqlDataReader = _\n             headerData.ExecuteReader()\n\n            &#39; Get the Detail data in a separate connection.\n            Using connection2 As SqlConnection = New SqlConnection(connectionString)\n                connection2.Open()\n\n                Dim sourceDetailData As SqlCommand = New SqlCommand( _\n                 &quot;SELECT [Sales].[SalesOrderDetail].[SalesOrderID], &quot; &amp; _\n                 &quot;[SalesOrderDetailID], [OrderQty], [ProductID], [UnitPrice] &quot; &amp; _\n                 &quot;FROM [Sales].[SalesOrderDetail] INNER JOIN &quot; &amp; _\n                 &quot;[Sales].[SalesOrderHeader] &quot; &amp; _\n                 &quot;ON [Sales].[SalesOrderDetail].[SalesOrderID] = &quot; &amp; _\n                 &quot;[Sales].[SalesOrderHeader].[SalesOrderID] &quot; &amp; _\n                 &quot;WHERE [AccountNumber] = @accountNumber;&quot;, connection2)\n\n                Dim accountDetail As SqlParameter = New SqlParameter()\n                accountDetail.ParameterName = &quot;@accountNumber&quot;\n                accountDetail.SqlDbType = SqlDbType.NVarChar\n                accountDetail.Direction = ParameterDirection.Input\n                accountDetail.Value = &quot;10-4020-000034&quot;\n                sourceDetailData.Parameters.Add( _\n                 accountDetail)\n\n                Dim readerDetail As SqlDataReader = _\n                 sourceDetailData.ExecuteReader()\n\n                &#39; Create the SqlBulkCopy object.\n                Using bulkCopy As SqlBulkCopy = _\n                  New SqlBulkCopy(connectionString)\n                    bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoOrderHeader&quot;\n\n                    &#39; Guarantee that columns are mapped correctly by\n                    &#39; defining the column mappings for the order.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderID&quot;, &quot;SalesOrderID&quot;)\n\n                    &#39; Define SqlBulkCopyColumnMapping objects so they\n                    &#39; can be referenced later.\n                    Dim columnMappingDate As SqlBulkCopyColumnMapping = _\n                        bulkCopy.ColumnMappings.Add(&quot;OrderDate&quot;, &quot;OrderDate&quot;)\n                    Dim columnMappingAccount As SqlBulkCopyColumnMapping = _\n                        bulkCopy.ColumnMappings.Add(&quot;AccountNumber&quot;, &quot;AccountNumber&quot;)\n \n                   &#39; Write readerHeader to the destination.\n                    Try\n                        bulkCopy.WriteToServer(readerHeader)\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n                    Finally\n                        readerHeader.Close()\n                    End Try\n\n                    &#39; Set up the order details destination.\n                    bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoOrderDetail&quot;\n\n                    &#39; Rather than clearing mappings that are not necessary\n                    &#39; for the next bulk copy operation, the unneeded         \n                    &#39; mappings are removed with the Remove method.\n                    bulkCopy.ColumnMappings.Remove(columnMappingDate)\n                    bulkCopy.ColumnMappings.Remove(columnMappingAccount)\n\n                    &#39; Add order detail column mappings.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderDetailID&quot;, &quot;SalesOrderDetailID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;OrderQty&quot;, &quot;OrderQty&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, &quot;ProductID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;UnitPrice&quot;, &quot;UnitPrice&quot;)\n\n                    &#39; Write readerDetail to the destination.\n                    Try\n                        bulkCopy.WriteToServer(readerDetail)\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n                    Finally\n                        readerDetail.Close()\n                    End Try\n                End Using\n\n                &#39; Perform a final count on the destination tables\n                &#39; to see how many rows were added.\n                Dim countEndHeader As Long = System.Convert.ToInt32( _\n                  countRowHeader.ExecuteScalar())\n                Console.WriteLine(&quot;{0} rows were added to the Header table.&quot;, _\n                  countEndHeader - countStartHeader)\n                Dim countEndDetail As Long = System.Convert.ToInt32( _\n                   countRowDetail.ExecuteScalar())\n                Console.WriteLine(&quot;{0} rows were added to the Detail table.&quot;, _\n                    countEndDetail - countStartDetail)\n\n                Console.WriteLine(&quot;Press Enter to finish.&quot;)\n                Console.ReadLine()\n            End Using\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ColumnMappingRemove#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a connection to the AdventureWorks database.\n        using (SqlConnection connection =\n                   new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            // Empty the destination tables. \n            SqlCommand deleteHeader = new SqlCommand(\n                &quot;DELETE FROM dbo.BulkCopyDemoOrderHeader;&quot;,\n                connection);\n            deleteHeader.ExecuteNonQuery();\n            SqlCommand deleteDetail = new SqlCommand(\n                &quot;DELETE FROM dbo.BulkCopyDemoOrderDetail;&quot;,\n                connection);\n            deleteDetail.ExecuteNonQuery();\n\n            // Perform an initial count on the destination\n            //  table with matching columns. \n            SqlCommand countRowHeader = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;&quot;,\n                connection);\n            long countStartHeader = System.Convert.ToInt32(\n                countRowHeader.ExecuteScalar());\n            Console.WriteLine(\n                &quot;Starting row count for Header table = {0}&quot;,\n                countStartHeader);\n\n            // Perform an initial count on the destination\n            // table with different column positions. \n            SqlCommand countRowDetail = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;&quot;,\n                connection);\n            long countStartDetail = System.Convert.ToInt32(\n                countRowDetail.ExecuteScalar());\n            Console.WriteLine(\n                &quot;Starting row count for Detail table = {0}&quot;,\n                countStartDetail);\n\n            // Get data from the source table as a SqlDataReader.\n            // The Sales.SalesOrderHeader and Sales.SalesOrderDetail\n            // tables are quite large and could easily cause a timeout\n            // if all data from the tables is added to the destination. \n            // To keep the example simple and quick, a parameter is  \n            // used to select only orders for a particular account \n            // as the source for the bulk insert. \n            SqlCommand headerData = new SqlCommand(\n                &quot;SELECT [SalesOrderID], [OrderDate], &quot; +\n                &quot;[AccountNumber] FROM [Sales].[SalesOrderHeader] &quot; +\n                &quot;WHERE [AccountNumber] = @accountNumber;&quot;,\n                connection);\n            SqlParameter parameterAccount = new SqlParameter();\n            parameterAccount.ParameterName = &quot;@accountNumber&quot;;\n            parameterAccount.SqlDbType = SqlDbType.NVarChar;\n            parameterAccount.Direction = ParameterDirection.Input;\n            parameterAccount.Value = &quot;10-4020-000034&quot;;\n            headerData.Parameters.Add(parameterAccount);\n            SqlDataReader readerHeader = headerData.ExecuteReader();\n\n            // Get the Detail data in a separate connection.\n            using (SqlConnection connection2 = new SqlConnection(connectionString))\n            {\n                connection2.Open();\n                SqlCommand sourceDetailData = new SqlCommand(\n                    &quot;SELECT [Sales].[SalesOrderDetail].[SalesOrderID], [SalesOrderDetailID], &quot; +\n                    &quot;[OrderQty], [ProductID], [UnitPrice] FROM [Sales].[SalesOrderDetail] &quot; +\n                    &quot;INNER JOIN [Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].&quot; +\n                    &quot;[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] &quot; +\n                    &quot;WHERE [AccountNumber] = @accountNumber;&quot;, connection2);\n\n                SqlParameter accountDetail = new SqlParameter();\n                accountDetail.ParameterName = &quot;@accountNumber&quot;;\n                accountDetail.SqlDbType = SqlDbType.NVarChar;\n                accountDetail.Direction = ParameterDirection.Input;\n                accountDetail.Value = &quot;10-4020-000034&quot;;\n                sourceDetailData.Parameters.Add(accountDetail);\n                SqlDataReader readerDetail = sourceDetailData.ExecuteReader();\n\n                // Create the SqlBulkCopy object. \n                using (SqlBulkCopy bulkCopy =\n                           new SqlBulkCopy(connectionString))\n                {\n                    bulkCopy.DestinationTableName =\n                        &quot;dbo.BulkCopyDemoOrderHeader&quot;;\n\n                    // Guarantee that columns are mapped correctly by\n                    // defining the column mappings for the order.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderID&quot;, &quot;SalesOrderID&quot;);\n\n                    // Define SqlBulkCopyColumnMapping objects so they\n                    // can be referenced later.\n                    SqlBulkCopyColumnMapping columnMappingDate =\n                        bulkCopy.ColumnMappings.Add(&quot;OrderDate&quot;, &quot;OrderDate&quot;);\n                    SqlBulkCopyColumnMapping columnMappingAccount =\n                        bulkCopy.ColumnMappings.Add(&quot;AccountNumber&quot;, &quot;AccountNumber&quot;);\n\n                    // Write readerHeader to the destination.\n                    try\n                    {\n                        bulkCopy.WriteToServer(readerHeader);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        readerHeader.Close();\n                    }\n\n                    // Set up the order details destination. \n                    bulkCopy.DestinationTableName =&quot;dbo.BulkCopyDemoOrderDetail&quot;;\n\n                    // Rather than clearing mappings that are not necessary\n                    // for the next bulk copyo peration, the unneeded mappings\n                    //  are removed with the Remove method.\n                    bulkCopy.ColumnMappings.Remove(columnMappingDate);\n                    bulkCopy.ColumnMappings.Remove(columnMappingAccount);\n\n                    // Add order detail column mappings.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderDetailID&quot;, &quot;SalesOrderDetailID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;OrderQty&quot;, &quot;OrderQty&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, &quot;ProductID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;UnitPrice&quot;, &quot;UnitPrice&quot;);\n                    bulkCopy.WriteToServer(readerDetail);\n\n                    // Write readerDetail to the destination.\n                    try\n                    {\n                        bulkCopy.WriteToServer(readerDetail);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        readerDetail.Close();\n                    }\n                }\n\n                // Perform a final count on the destination\n                // tables to see how many rows were added. \n                long countEndHeader = System.Convert.ToInt32(\n                    countRowHeader.ExecuteScalar());\n                Console.WriteLine(&quot;{0} rows were added to the Header table.&quot;,\n                    countEndHeader - countStartHeader);\n                long countEndDetail = System.Convert.ToInt32(\n                    countRowDetail.ExecuteScalar());\n                Console.WriteLine(&quot;{0} rows were added to the Detail table.&quot;,\n                    countEndDetail - countStartDetail);\n                Console.WriteLine(&quot;Press Enter to finish.&quot;);\n                Console.ReadLine();\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the mapping at the specified index from the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> object to be removed from the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RemoveAt method is most commonly used when you use a single <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must remove mappings that no longer apply after the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> method is called and before defining mapping for the next bulk copy. You can clear the entire collection by using the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Clear_\" data-linktype=\"relative-path\">Clear</a> method, or remove mappings individually using the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection#System_Data_SqlClient_SqlBulkCopyColumnMappingCollection_Remove_\" data-linktype=\"relative-path\">Remove</a> method or the RemoveAt method.  </p>\n<p> Performing several bulk copies using the same <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance will usually be more efficient from a performance point of view than using a separate <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> for each operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. Both bulk copies include a mapping for the <strong>SalesOrderID</strong>, so rather than clearing the entire collection between bulk copy operations, the example removes all mappings except for the <strong>SalesOrderID</strong> mapping and then adds the appropriate mappings for the second bulk copy operation.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ColumnMappingRemoveAt#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using connection As SqlConnection = New SqlConnection(connectionString)\n            connection.Open()\n\n            &#39; Empty the destination tables.\n            Dim deleteHeader As New SqlCommand( _\n              &quot;DELETE FROM dbo.BulkCopyDemoOrderHeader;&quot;, connection)\n            deleteHeader.ExecuteNonQuery()\n            deleteHeader.Dispose()\n            Dim deleteDetail As New SqlCommand( _\n              &quot;DELETE FROM dbo.BulkCopyDemoOrderDetail;&quot;, connection)\n            deleteDetail.ExecuteNonQuery()\n\n            &#39; Perform an initial count on the destination table \n            &#39; with matching columns.\n            Dim countRowHeader As New SqlCommand( _\n               &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;&quot;, _\n                connection)\n            Dim countStartHeader As Long = System.Convert.ToInt32( _\n             countRowHeader.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count for Header table = {0}&quot;, _\n             countStartHeader)\n\n            &#39; Perform an initial count on the destination table \n            &#39; with different column positions.\n            Dim countRowDetail As New SqlCommand( _\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;&quot;, _\n                connection)\n            Dim countStartDetail As Long = System.Convert.ToInt32( _\n                countRowDetail.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count for Detail table = &quot; &amp; _\n               countStartDetail)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            &#39; The Sales.SalesOrderHeader and Sales.SalesOrderDetail\n            &#39; tables are quite large and could easily cause a timeout\n            &#39; if all data from the tables is added to the destination.\n            &#39; To keep the example simple and quick, a parameter is \n            &#39; used to select only orders for a particular account as\n            &#39; the source for the bulk insert.\n            Dim headerData As SqlCommand = New SqlCommand( _\n             &quot;SELECT [SalesOrderID], [OrderDate], &quot; &amp; _\n             &quot;[AccountNumber] FROM [Sales].[SalesOrderHeader] &quot; &amp; _\n             &quot;WHERE [AccountNumber] = @accountNumber;&quot;, _\n             connection)\n\n            Dim parameterAccount As SqlParameter = New SqlParameter()\n            parameterAccount.ParameterName = &quot;@accountNumber&quot;\n            parameterAccount.SqlDbType = SqlDbType.NVarChar\n            parameterAccount.Direction = ParameterDirection.Input\n            parameterAccount.Value = &quot;10-4020-000034&quot;\n            headerData.Parameters.Add(parameterAccount)\n\n            Dim readerHeader As SqlDataReader = _\n             headerData.ExecuteReader()\n\n            &#39; Get the Detail data in a separate connection.\n            Using connection2 As SqlConnection = New SqlConnection(connectionString)\n                connection2.Open()\n\n                Dim sourceDetailData As SqlCommand = New SqlCommand( _\n                 &quot;SELECT [Sales].[SalesOrderDetail].[SalesOrderID], &quot; &amp; _\n                 &quot;[SalesOrderDetailID], [OrderQty], [ProductID], [UnitPrice] &quot; &amp; _\n                 &quot;FROM [Sales].[SalesOrderDetail] INNER JOIN &quot; &amp; _\n                 &quot;[Sales].[SalesOrderHeader] &quot; &amp; _\n                 &quot;ON [Sales].[SalesOrderDetail].[SalesOrderID] = &quot; &amp; _\n                 &quot;[Sales].[SalesOrderHeader].[SalesOrderID] &quot; &amp; _\n                 &quot;WHERE [AccountNumber] = @accountNumber;&quot;, connection2)\n\n                Dim accountDetail As SqlParameter = New SqlParameter()\n                accountDetail.ParameterName = &quot;@accountNumber&quot;\n                accountDetail.SqlDbType = SqlDbType.NVarChar\n                accountDetail.Direction = ParameterDirection.Input\n                accountDetail.Value = &quot;10-4020-000034&quot;\n                sourceDetailData.Parameters.Add( _\n                 accountDetail)\n\n                Dim readerDetail As SqlDataReader = _\n                 sourceDetailData.ExecuteReader()\n\n                &#39; Create the SqlBulkCopy object.\n                Using bulkCopy As SqlBulkCopy = _\n                  New SqlBulkCopy(connectionString)\n                    bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoOrderHeader&quot;\n\n                    &#39; Guarantee that columns are mapped correctly by\n                    &#39; defining the column mappings for the order.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderID&quot;, &quot;SalesOrderID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;OrderDate&quot;, &quot;OrderDate&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;AccountNumber&quot;, &quot;AccountNumber&quot;)\n \n                   &#39; Write readerHeader to the destination.\n                    Try\n                        bulkCopy.WriteToServer(readerHeader)\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n                    Finally\n                        readerHeader.Close()\n                    End Try\n\n                    &#39; Set up the order details destination.\n                    bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoOrderDetail&quot;\n\n                    &#39; Rather than clearing mappings that are not necessary\n                    &#39; for the next bulk copy operation, the unneeded         \n                    &#39; mappings are removed with the RemoveAt method.\n                    bulkCopy.ColumnMappings.RemoveAt(2)\n                    bulkCopy.ColumnMappings.RemoveAt(1)\n\n                    &#39; Add order detail column mappings.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderDetailID&quot;, &quot;SalesOrderDetailID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;OrderQty&quot;, &quot;OrderQty&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, &quot;ProductID&quot;)\n                    bulkCopy.ColumnMappings.Add(&quot;UnitPrice&quot;, &quot;UnitPrice&quot;)\n\n                    &#39; Write readerDetail to the destination.\n                    Try\n                        bulkCopy.WriteToServer(readerDetail)\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n                    Finally\n                        readerDetail.Close()\n                    End Try\n                End Using\n\n                &#39; Perform a final count on the destination tables\n                &#39; to see how many rows were added.\n                Dim countEndHeader As Long = System.Convert.ToInt32( _\n                  countRowHeader.ExecuteScalar())\n                Console.WriteLine(&quot;{0} rows were added to the Header table.&quot;, _\n                  countEndHeader - countStartHeader)\n                Dim countEndDetail As Long = System.Convert.ToInt32( _\n                   countRowDetail.ExecuteScalar())\n                Console.WriteLine(&quot;{0} rows were added to the Detail table.&quot;, _\n                    countEndDetail - countStartDetail)\n\n                Console.WriteLine(&quot;Press Enter to finish.&quot;)\n                Console.ReadLine()\n            End Using\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ColumnMappingRemoveAt#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a connection to the AdventureWorks database.\n        using (SqlConnection connection =\n                   new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            // Empty the destination tables. \n            SqlCommand deleteHeader = new SqlCommand(\n                &quot;DELETE FROM dbo.BulkCopyDemoOrderHeader;&quot;,\n                connection);\n            deleteHeader.ExecuteNonQuery();\n            SqlCommand deleteDetail = new SqlCommand(\n                &quot;DELETE FROM dbo.BulkCopyDemoOrderDetail;&quot;,\n                connection);\n            deleteDetail.ExecuteNonQuery();\n\n            // Perform an initial count on the destination\n            //  table with matching columns. \n            SqlCommand countRowHeader = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;&quot;,\n                connection);\n            long countStartHeader = System.Convert.ToInt32(\n                countRowHeader.ExecuteScalar());\n            Console.WriteLine(\n                &quot;Starting row count for Header table = {0}&quot;,\n                countStartHeader);\n\n            // Perform an initial count on the destination\n            // table with different column positions. \n            SqlCommand countRowDetail = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;&quot;,\n                connection);\n            long countStartDetail = System.Convert.ToInt32(\n                countRowDetail.ExecuteScalar());\n            Console.WriteLine(\n                &quot;Starting row count for Detail table = {0}&quot;,\n                countStartDetail);\n\n            // Get data from the source table as a SqlDataReader.\n            // The Sales.SalesOrderHeader and Sales.SalesOrderDetail\n            // tables are quite large and could easily cause a timeout\n            // if all data from the tables is added to the destination. \n            // To keep the example simple and quick, a parameter is  \n            // used to select only orders for a particular account \n            // as the source for the bulk insert. \n            SqlCommand headerData = new SqlCommand(\n                &quot;SELECT [SalesOrderID], [OrderDate], &quot; +\n                &quot;[AccountNumber] FROM [Sales].[SalesOrderHeader] &quot; +\n                &quot;WHERE [AccountNumber] = @accountNumber;&quot;,\n                connection);\n            SqlParameter parameterAccount = new SqlParameter();\n            parameterAccount.ParameterName = &quot;@accountNumber&quot;;\n            parameterAccount.SqlDbType = SqlDbType.NVarChar;\n            parameterAccount.Direction = ParameterDirection.Input;\n            parameterAccount.Value = &quot;10-4020-000034&quot;;\n            headerData.Parameters.Add(parameterAccount);\n            SqlDataReader readerHeader = headerData.ExecuteReader();\n\n            // Get the Detail data in a separate connection.\n            using (SqlConnection connection2 = new SqlConnection(connectionString))\n            {\n                connection2.Open();\n                SqlCommand sourceDetailData = new SqlCommand(\n                    &quot;SELECT [Sales].[SalesOrderDetail].[SalesOrderID], [SalesOrderDetailID], &quot; +\n                    &quot;[OrderQty], [ProductID], [UnitPrice] FROM [Sales].[SalesOrderDetail] &quot; +\n                    &quot;INNER JOIN [Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].&quot; +\n                    &quot;[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] &quot; +\n                    &quot;WHERE [AccountNumber] = @accountNumber;&quot;, connection2);\n\n                    SqlParameter accountDetail = new SqlParameter();\n                    accountDetail.ParameterName = &quot;@accountNumber&quot;;\n                    accountDetail.SqlDbType = SqlDbType.NVarChar;\n                    accountDetail.Direction = ParameterDirection.Input;\n                    accountDetail.Value = &quot;10-4020-000034&quot;;\n                    sourceDetailData.Parameters.Add(accountDetail);\n                    SqlDataReader readerDetail = sourceDetailData.ExecuteReader();\n\n                // Create the SqlBulkCopy object. \n                using (SqlBulkCopy bulkCopy =\n                           new SqlBulkCopy(connectionString))\n                {\n                    bulkCopy.DestinationTableName =\n                        &quot;dbo.BulkCopyDemoOrderHeader&quot;;\n\n                    // Guarantee that columns are mapped correctly by\n                    // defining the column mappings for the order.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderID&quot;, &quot;SalesOrderID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;OrderDate&quot;, &quot;OrderDate&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;AccountNumber&quot;, &quot;AccountNumber&quot;);\n\n                    // Write readerHeader to the destination.\n                    try\n                    {\n                        bulkCopy.WriteToServer(readerHeader);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        readerHeader.Close();\n                    }\n\n                    // Set up the order details destination. \n                    bulkCopy.DestinationTableName =&quot;dbo.BulkCopyDemoOrderDetail&quot;;\n\n                    // Rather than clearing mappings that are not necessary\n                    // for the next bulk copyo peration, the unneeded mappings\n                    //  are removed with the RemoveAt method.\n                    bulkCopy.ColumnMappings.RemoveAt(2);\n                    bulkCopy.ColumnMappings.RemoveAt(1);\n\n                    // Add order detail column mappings.\n                    bulkCopy.ColumnMappings.Add(&quot;SalesOrderDetailID&quot;, &quot;SalesOrderDetailID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;OrderQty&quot;, &quot;OrderQty&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;ProductID&quot;, &quot;ProductID&quot;);\n                    bulkCopy.ColumnMappings.Add(&quot;UnitPrice&quot;, &quot;UnitPrice&quot;);\n                    bulkCopy.WriteToServer(readerDetail);\n\n                    // Write readerDetail to the destination.\n                    try\n                    {\n                        bulkCopy.WriteToServer(readerDetail);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        readerDetail.Close();\n                    }\n                }\n\n                // Perform a final count on the destination\n                // tables to see how many rows were added. \n                long countEndHeader = System.Convert.ToInt32(\n                    countRowHeader.ExecuteScalar());\n                Console.WriteLine(&quot;{0} rows were added to the Header table.&quot;,\n                    countEndHeader - countStartHeader);\n                long countEndDetail = System.Convert.ToInt32(\n                    countRowDetail.ExecuteScalar());\n                Console.WriteLine(&quot;{0} rows were added to the Detail table.&quot;,\n                    countEndDetail - countStartDetail);\n                Console.WriteLine(&quot;Press Enter to finish.&quot;);\n                Console.ReadLine();\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"99119cfd-4942-af64-4a19-2e0db93577f2\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Data.SqlClient\\SqlBulkCopyColumnMappingCollection.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Collection of  objects that inherits from .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Data.SqlClient/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.yml","open_to_public_contributors":true,"api_name":["System.Data.SqlClient.SqlBulkCopyColumnMappingCollection","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.SqlClient.SqlBulkCopyColumnMappingCollection","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::Add","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::Clear","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::Contains","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::CopyTo","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::IndexOf","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::Insert","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::Item","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::Remove","System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt","System::Data::SqlClient::SqlBulkCopyColumnMappingCollection::RemoveAt"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"99119cfd-4942-af64-4a19-2e0db93577f2","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Data.SqlClient\\SqlBulkCopyColumnMappingCollection.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Data.SqlClient/SqlBulkCopyColumnMappingCollection.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SqlBulkCopyColumnMappingCollection class | Microsoft Docs","_op_ogTitle":"SqlBulkCopyColumnMappingCollection class","description":"Collection of  objects that inherits from .\n","toc_asset_id":"_splitted/System.Data.SqlClient/toc.json","toc_rel":"_splitted/System.Data.SqlClient/toc.json","source_url":"","ms.assetid":"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlbulkcopycolumnmappingcollection","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlbulkcopycolumnmappingcollection","fileRelativePath":"System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.html"},"themesRelativePathToOutputRoot":"_themes/"}