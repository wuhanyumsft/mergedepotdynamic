{"content":"    \r\n    <h1 id=\"System_Net_NetworkInformation_IPInterfaceProperties\">\r\n      <span class=\"lang-csharp\">IPInterfaceProperties</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class IPInterfaceProperties</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">IPInterfaceProperties</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class provides access to configuration and address information for network interfaces that support IPv4 or IPv6. You do not create instances of this class; they are returned by the <a class=\"xref\" href=\"system.net.networkinformation.networkinterface#System_Net_NetworkInformation_NetworkInterface_GetIPProperties_\" data-linktype=\"relative-path\">GetIPProperties</a> method.  </p>\n<p> To access IPv4-specific properties, use the object returned by the <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties#System_Net_NetworkInformation_IPInterfaceProperties_GetIPv4Properties_\" data-linktype=\"relative-path\">GetIPv4Properties</a> method. To access IPv6-specific properties, use the object returned by the <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties#System_Net_NetworkInformation_IPInterfaceProperties_GetIPv6Properties_\" data-linktype=\"relative-path\">GetIPv6Properties</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties__ctor\" data-linktype=\"self-bookmark\">IPInterfaceProperties()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties\" data-linktype=\"relative-path\">IPInterfaceProperties</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_AnycastAddresses\" data-linktype=\"self-bookmark\">AnycastAddresses</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the anycast IP addresses assigned to this interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_DhcpServerAddresses\" data-linktype=\"self-bookmark\">DhcpServerAddresses</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the addresses of Dynamic Host Configuration Protocol (DHCP) servers for this interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_DnsAddresses\" data-linktype=\"self-bookmark\">DnsAddresses</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the addresses of Domain Name System (DNS) servers for this interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_DnsSuffix\" data-linktype=\"self-bookmark\">DnsSuffix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Domain Name System (DNS) suffix associated with this interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_GatewayAddresses\" data-linktype=\"self-bookmark\">GatewayAddresses</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the IPv4 network gateway addresses for this interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_IsDnsEnabled\" data-linktype=\"self-bookmark\">IsDnsEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether NetBt is configured to use DNS name resolution on this interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_IsDynamicDnsEnabled\" data-linktype=\"self-bookmark\">IsDynamicDnsEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this interface is configured to automatically register its IP address information with the Domain Name System (DNS).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_MulticastAddresses\" data-linktype=\"self-bookmark\">MulticastAddresses</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the multicast addresses assigned to this interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_UnicastAddresses\" data-linktype=\"self-bookmark\">UnicastAddresses</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the unicast addresses assigned to this interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_WinsServersAddresses\" data-linktype=\"self-bookmark\">WinsServersAddresses</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the addresses of Windows Internet Name Service (WINS) servers.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_GetIPv4Properties\" data-linktype=\"self-bookmark\">GetIPv4Properties()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides Internet Protocol version 4 (IPv4) configuration data for this network interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPInterfaceProperties_GetIPv6Properties\" data-linktype=\"self-bookmark\">GetIPv6Properties()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides Internet Protocol version 6 (IPv6) configuration data for this network interface.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties__ctor\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPInterfaceProperties()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties\" data-linktype=\"relative-path\">IPInterfaceProperties</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected IPInterfaceProperties ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor can be called only from classes that derive from <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties\" data-linktype=\"relative-path\">IPInterfaceProperties</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_AnycastAddresses\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_AnycastAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AnycastAddresses</div>        \r\n          </div>\r\n    \r\n            <p>Gets the anycast IP addresses assigned to this interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.IPAddressInformationCollection AnycastAddresses { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipaddressinformationcollection\" data-linktype=\"relative-path\">IPAddressInformationCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.ipaddressinformationcollection\" data-linktype=\"relative-path\">IPAddressInformationCollection</a> that contains the anycast addresses for this interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An anycast address identifies multiple computers. Packets sent to an anycast address are sent to one of the computers identified by the address. Anycast addressing is an IPv6 feature used to update router tables for a group of hosts.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the anycast addresses for the network interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#43\">        public static void DisplayAnycastAddresses()\n        {\n            int count = 0;\n            \n            Console.WriteLine(&quot;Anycast Addresses&quot;);\n            NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                IPAddressInformationCollection anyCast = adapterProperties.AnycastAddresses;\n                if (anyCast.Count &gt;0)\n                {\n                    \n                    Console.WriteLine(adapter.Description);\n                    foreach (IPAddressInformation any in anyCast)\n                    {\n                        Console.WriteLine(&quot;  Anycast Address .......................... : {0} {1} {2}&quot;, \n                            any.Address,\n                            any.IsTransient ? &quot;Transient&quot; : &quot;&quot;, \n                            any.IsDnsEligible ? &quot;DNS Eligible&quot; : &quot;&quot;\n                        );\n                        count++;\n                    }\n                    Console.WriteLine();\n                }\n            }\n            if (count == 0)\n            {\n                Console.WriteLine(&quot;  No anycast addressses were found.&quot;);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#43\">    Public Shared Sub DisplayAnycastAddresses() \n        Dim count as Integer = 0\n        \n        Console.WriteLine(&quot;Anycast Addresses&quot;)\n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim anyCast As IPAddressInformationCollection = adapterProperties.AnycastAddresses\n            If anyCast.Count &gt; 0 Then\n                Console.WriteLine(adapter.Description)\n                Dim any As IPAddressInformation\n                For Each any In  anyCast\n                    Console.WriteLine(&quot;  Anycast Address .......................... : {0} {1} {2}&quot;, any.Address, IIf(any.IsTransient, &quot;Transient&quot;, &quot;&quot;), IIf(any.IsDnsEligible, &quot;DNS Eligible&quot;, &quot;&quot;))\n                &#39;TODO: For performance reasons this should be changed to nested IF statements\n                &#39;TODO: For performance reasons this should be changed to nested IF statements\n                    count += 1\n                Next any\n                Console.WriteLine()\n            End If\n        Next adapter\n    \n        if count = 0 then\n            Console.WriteLine(&quot;  No anycast addresses were found.&quot;)\n            Console.WriteLine()\n        End if\n    End Sub &#39;DisplayAnycastAddresses\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#43\">void DisplayAnycastAddresses()\n{\n    int count = 0;\n            \n    Console::WriteLine( &quot;Anycast Addresses&quot; );\n    array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n    System::Collections::IEnumerator^ myEnum13 = adapters-&gt;GetEnumerator();\n    while ( myEnum13-&gt;MoveNext() )\n    {\n        NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum13-&gt;Current);\n        IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n        IPAddressInformationCollection ^ anyCast = adapterProperties-&gt;AnycastAddresses;\n        if ( anyCast-&gt;Count &gt; 0 )\n        {\n            Console::WriteLine( adapter-&gt;Description );\n            System::Collections::IEnumerator^ myEnum14 = anyCast-&gt;GetEnumerator();\n            while ( myEnum14-&gt;MoveNext() )\n            {\n                IPAddressInformation ^ any = safe_cast&lt;IPAddressInformation ^&gt;(myEnum14-&gt;Current);\n                Console::WriteLine( &quot;  Anycast Address .......................... : {0} {1} {2}&quot;, \n                    any-&gt;Address, any-&gt;IsTransient ? &quot;Transient&quot; : &quot;&quot;, \n                    any-&gt;IsDnsEligible ? &quot;DNS Eligible&quot; : &quot;&quot; );\n                count++;\n            } \n            Console::WriteLine();\n        }\n    }\n    if (count == 0)\n    {\n        Console::WriteLine(&quot;  No anycast addresses were found.&quot;);\n        Console::WriteLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_DhcpServerAddresses\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_DhcpServerAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DhcpServerAddresses</div>        \r\n          </div>\r\n    \r\n            <p>Gets the addresses of Dynamic Host Configuration Protocol (DHCP) servers for this interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.IPAddressCollection DhcpServerAddresses { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipaddresscollection\" data-linktype=\"relative-path\">IPAddressCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.ipaddresscollection\" data-linktype=\"relative-path\">IPAddressCollection</a> that contains the address information for DHCP servers, or an empty array if no servers are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dynamic Host Configuration Protocol (DHCP) allows a computer to obtain a network address from a DHCP server, as opposed to using a static (fixed) network address. A DHCP server does not permanently assign addresses; instead, it temporarily uses one of a number of available addresses to the computer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the DHCP address information for the network interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#46\">        public static void DisplayDhcpServerAddresses()\n        {\n            Console.WriteLine(&quot;DHCP Servers&quot;);\n            NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                IPAddressCollection addresses = adapterProperties.DhcpServerAddresses;\n                if (addresses.Count &gt;0)\n                {\n                    Console.WriteLine(adapter.Description);\n                    foreach (IPAddress address in addresses)\n                    {\n                        Console.WriteLine(&quot;  Dhcp Address ............................ : {0}&quot;, \n                            address.ToString());\n                    }\n                    Console.WriteLine();\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#46\">    Public Shared Sub DisplayDhcpServerAddresses() \n        Console.WriteLine(&quot;DHCP Servers&quot;)\n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            \n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim addresses As IPAddressCollection = adapterProperties.DhcpServerAddresses\n            If addresses.Count &gt; 0 Then\n                Console.WriteLine(adapter.Description)\n                Dim address As IPAddress\n                For Each address In  addresses\n                    Console.WriteLine(&quot;  Dhcp Address ............................ : {0}&quot;, address.ToString())\n                Next address\n                Console.WriteLine()\n            End If\n        Next adapter\n    \n    End Sub &#39;DisplayDhcpServerAddresses\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#46\">void DisplayDhcpServerAddresses()\n{\n   Console::WriteLine( &quot;DHCP Servers&quot; );\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum19 = adapters-&gt;GetEnumerator();\n   while ( myEnum19-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum19-&gt;Current);\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n      IPAddressCollection ^ addresses = adapterProperties-&gt;DhcpServerAddresses;\n      if ( addresses-&gt;Count &gt; 0 )\n      {\n         Console::WriteLine( adapter-&gt;Description );\n         System::Collections::IEnumerator^ myEnum20 = addresses-&gt;GetEnumerator();\n         while ( myEnum20-&gt;MoveNext() )\n         {\n            IPAddress^ address = safe_cast&lt;IPAddress^&gt;(myEnum20-&gt;Current);\n            Console::WriteLine( &quot;  Dhcp Address ............................ : {0}&quot;, \n               address );\n         }\n         Console::WriteLine();\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_DnsAddresses\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_DnsAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DnsAddresses</div>        \r\n          </div>\r\n    \r\n            <p>Gets the addresses of Domain Name System (DNS) servers for this interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.IPAddressCollection DnsAddresses { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipaddresscollection\" data-linktype=\"relative-path\">IPAddressCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.networkinformation.ipaddresscollection\" data-linktype=\"relative-path\">IPAddressCollection</a> that contains the DNS server addresses.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>DNS is a hierarchical naming system used to map host names to IP addresses.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the DNS addresses for the network interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#42\">        public static void DisplayDnsAddresses()\n        {\n            NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                IPAddressCollection dnsServers = adapterProperties.DnsAddresses;\n                if (dnsServers.Count &gt; 0)\n                {\n                    Console.WriteLine(adapter.Description);\n                    foreach (IPAddress dns in dnsServers)\n                    {\n                        Console.WriteLine(&quot;  DNS Servers ............................. : {0}&quot;, \n                            dns.ToString());\n                    }\n                    Console.WriteLine();\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#42\">    Public Shared Sub DisplayDnsAddresses() \n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            \n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim dnsServers As IPAddressCollection = adapterProperties.DnsAddresses\n            If dnsServers.Count &gt; 0 Then\n                Console.WriteLine(adapter.Description)\n                Dim dns As IPAddress\n                For Each dns In  dnsServers\n                    Console.WriteLine(&quot;  DNS Servers ............................. : {0}&quot;,dns.ToString() )\n                Next dns\n            End If\n        Next adapter\n    \n    End Sub &#39;DisplayDnsAddresses\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#42\">void DisplayDnsAddresses()\n{\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum11 = adapters-&gt;GetEnumerator();\n   while ( myEnum11-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum11-&gt;Current);\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n      IPAddressCollection ^ dnsServers = adapterProperties-&gt;DnsAddresses;\n      if ( dnsServers-&gt;Count &gt; 0 )\n      {\n         Console::WriteLine( adapter-&gt;Description );\n         System::Collections::IEnumerator^ myEnum12 = dnsServers-&gt;GetEnumerator();\n         while ( myEnum12-&gt;MoveNext() )\n         {\n            IPAddress ^ dns = safe_cast&lt;IPAddress ^&gt;(myEnum12-&gt;Current);\n            Console::WriteLine( &quot;  DNS Servers ............................. : {0}&quot;, \n               dns-&gt;ToString());\n         }\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_DnsSuffix\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_DnsSuffix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DnsSuffix</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Domain Name System (DNS) suffix associated with this interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string DnsSuffix { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the DNS suffix for this interface, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if there is no DNS suffix for the interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This property is not valid on computers running operating systems earlier than Windows 2000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DNS suffix identifies the domain name (for example, &quot;contoso.com&quot;) that is appended to an unqualified host name to obtain a fully qualified domain name (FQDN) suitable for a DNS name query. For example, if the local machine has &quot;contoso.com&quot; as its DnsSuffix, and must resolve the unqualified host name &quot;www&quot;, the FQDN to query is &quot;www.contoso.com&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the DNS suffix.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#41\">        public static void DisplayDnsConfiguration()\n        {\n            NetworkInterface[] adapters = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(&quot;  DNS suffix .............................. : {0}&quot;,\n                    properties.DnsSuffix);\n                Console.WriteLine(&quot;  DNS enabled ............................. : {0}&quot;, \n                    properties.IsDnsEnabled);\n                Console.WriteLine(&quot;  Dynamically configured DNS .............. : {0}&quot;, \n                    properties.IsDynamicDnsEnabled);\n            }\n            Console.WriteLine();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#41\">    Public Shared Sub DisplayDnsConfiguration() \n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(&quot;  DNS suffix................................. :{0}&quot;, properties.DnsSuffix)\n            Console.WriteLine(&quot;  DNS enabled ............................. : {0}&quot;, properties.IsDnsEnabled)\n            Console.WriteLine(&quot;  Dynamically configured DNS .............. : {0}&quot;, properties.IsDynamicDnsEnabled)\n        Next adapter\n    \n    End Sub &#39;DisplayDnsConfiguration\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#41\">void DisplayDnsConfiguration()\n{\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum10 = adapters-&gt;GetEnumerator();\n   while ( myEnum10-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum10-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( &quot;  DNS suffix................................. :{0}&quot;, \n         properties-&gt;DnsSuffix );\n      Console::WriteLine( &quot;  DNS enabled ............................. : {0}&quot;, \n         properties-&gt;IsDnsEnabled );\n      Console::WriteLine( &quot;  Dynamically configured DNS .............. : {0}&quot;, \n         properties-&gt;IsDynamicDnsEnabled );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_GatewayAddresses\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_GatewayAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GatewayAddresses</div>        \r\n          </div>\r\n    \r\n            <p>Gets the IPv4 network gateway addresses for this interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.GatewayIPAddressInformationCollection GatewayAddresses { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.gatewayipaddressinformationcollection\" data-linktype=\"relative-path\">GatewayIPAddressInformationCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.gatewayipaddressinformationcollection\" data-linktype=\"relative-path\">GatewayIPAddressInformationCollection</a> that contains the address information for network gateways, or an empty array if no gateways are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Gateways that implement the Internet Protocol Version 4 (IPv4) to forward packets between networks are returned by this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the gateway addresses for the network interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#47\">        public static void DisplayGatewayAddresses()\n        {\n            Console.WriteLine(&quot;Gateways&quot;);\n            NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                GatewayIPAddressInformationCollection addresses = adapterProperties.GatewayAddresses;\n                if (addresses.Count &gt;0)\n                {\n                    Console.WriteLine(adapter.Description);\n                    foreach (GatewayIPAddressInformation address in addresses)\n                    {\n                        Console.WriteLine(&quot;  Gateway Address ......................... : {0}&quot;, \n                            address.Address.ToString());\n                    }\n                    Console.WriteLine();\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#47\">    Public Shared Sub DisplayGatewayAddresses() \n        Console.WriteLine(&quot;Gateways&quot;)\n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim addresses As GatewayIPAddressInformationCollection = adapterProperties.GatewayAddresses\n            If addresses.Count &gt; 0 Then\n                Console.WriteLine(adapter.Description)\n                Dim address As GatewayIPAddressInformation\n                For Each address In  addresses\n                    Console.WriteLine(&quot;  Gateway Address ......................... : {0}&quot;, address.ToString())\n                Next address\n                Console.WriteLine()\n            End If\n        Next adapter\n    \n    End Sub &#39;DisplayGatewayAddresses\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#47\">void DisplayGatewayAddresses()\n{\n   Console::WriteLine( &quot;Gateways&quot; );\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum21 = adapters-&gt;GetEnumerator();\n   while ( myEnum21-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum21-&gt;Current);\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n      GatewayIPAddressInformationCollection ^ addresses = adapterProperties-&gt;GatewayAddresses;\n      if ( addresses-&gt;Count &gt; 0 )\n      {\n         Console::WriteLine( adapter-&gt;Description );\n         System::Collections::IEnumerator^ myEnum22 = addresses-&gt;GetEnumerator();\n         while ( myEnum22-&gt;MoveNext() )\n         {\n            GatewayIPAddressInformation^ address = safe_cast&lt;GatewayIPAddressInformation^&gt;(myEnum22-&gt;Current);\n            Console::WriteLine( &quot;  Gateway Address ......................... : {0}&quot;, \n               address-&gt;Address-&gt;ToString() );\n         }\n         Console::WriteLine();\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_IsDnsEnabled\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_IsDnsEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDnsEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether NetBt is configured to use DNS name resolution on this interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsDnsEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if NetBt is configured to use DNS name resolution on this interface; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>DNS is a hierarchical naming system used to map host names to IP addresses.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#41\">        public static void DisplayDnsConfiguration()\n        {\n            NetworkInterface[] adapters = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(&quot;  DNS suffix .............................. : {0}&quot;,\n                    properties.DnsSuffix);\n                Console.WriteLine(&quot;  DNS enabled ............................. : {0}&quot;, \n                    properties.IsDnsEnabled);\n                Console.WriteLine(&quot;  Dynamically configured DNS .............. : {0}&quot;, \n                    properties.IsDynamicDnsEnabled);\n            }\n            Console.WriteLine();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#41\">    Public Shared Sub DisplayDnsConfiguration() \n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(&quot;  DNS suffix................................. :{0}&quot;, properties.DnsSuffix)\n            Console.WriteLine(&quot;  DNS enabled ............................. : {0}&quot;, properties.IsDnsEnabled)\n            Console.WriteLine(&quot;  Dynamically configured DNS .............. : {0}&quot;, properties.IsDynamicDnsEnabled)\n        Next adapter\n    \n    End Sub &#39;DisplayDnsConfiguration\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#41\">void DisplayDnsConfiguration()\n{\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum10 = adapters-&gt;GetEnumerator();\n   while ( myEnum10-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum10-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( &quot;  DNS suffix................................. :{0}&quot;, \n         properties-&gt;DnsSuffix );\n      Console::WriteLine( &quot;  DNS enabled ............................. : {0}&quot;, \n         properties-&gt;IsDnsEnabled );\n      Console::WriteLine( &quot;  Dynamically configured DNS .............. : {0}&quot;, \n         properties-&gt;IsDynamicDnsEnabled );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_IsDynamicDnsEnabled\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_IsDynamicDnsEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDynamicDnsEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this interface is configured to automatically register its IP address information with the Domain Name System (DNS).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsDynamicDnsEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this interface is configured to automatically register a mapping between its dynamic IP address and static domain names; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dynamic DNS enables a client to inform the DNS servers that its dynamic IP address is mapped to its static host name.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#41\">        public static void DisplayDnsConfiguration()\n        {\n            NetworkInterface[] adapters = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties properties = adapter.GetIPProperties();\n                Console.WriteLine(adapter.Description);\n                Console.WriteLine(&quot;  DNS suffix .............................. : {0}&quot;,\n                    properties.DnsSuffix);\n                Console.WriteLine(&quot;  DNS enabled ............................. : {0}&quot;, \n                    properties.IsDnsEnabled);\n                Console.WriteLine(&quot;  Dynamically configured DNS .............. : {0}&quot;, \n                    properties.IsDynamicDnsEnabled);\n            }\n            Console.WriteLine();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#41\">    Public Shared Sub DisplayDnsConfiguration() \n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim properties As IPInterfaceProperties = adapter.GetIPProperties()\n            Console.WriteLine(adapter.Description)\n            Console.WriteLine(&quot;  DNS suffix................................. :{0}&quot;, properties.DnsSuffix)\n            Console.WriteLine(&quot;  DNS enabled ............................. : {0}&quot;, properties.IsDnsEnabled)\n            Console.WriteLine(&quot;  Dynamically configured DNS .............. : {0}&quot;, properties.IsDynamicDnsEnabled)\n        Next adapter\n    \n    End Sub &#39;DisplayDnsConfiguration\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#41\">void DisplayDnsConfiguration()\n{\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum10 = adapters-&gt;GetEnumerator();\n   while ( myEnum10-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum10-&gt;Current);\n      IPInterfaceProperties ^ properties = adapter-&gt;GetIPProperties();\n      Console::WriteLine( adapter-&gt;Description );\n      Console::WriteLine( &quot;  DNS suffix................................. :{0}&quot;, \n         properties-&gt;DnsSuffix );\n      Console::WriteLine( &quot;  DNS enabled ............................. : {0}&quot;, \n         properties-&gt;IsDnsEnabled );\n      Console::WriteLine( &quot;  Dynamically configured DNS .............. : {0}&quot;, \n         properties-&gt;IsDynamicDnsEnabled );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_MulticastAddresses\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_MulticastAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MulticastAddresses</div>        \r\n          </div>\r\n    \r\n            <p>Gets the multicast addresses assigned to this interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.MulticastIPAddressInformationCollection MulticastAddresses { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.multicastipaddressinformationcollection\" data-linktype=\"relative-path\">MulticastIPAddressInformationCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.multicastipaddressinformationcollection\" data-linktype=\"relative-path\">MulticastIPAddressInformationCollection</a> that contains the multicast addresses for this interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A multicast address identifies multiple computers. Packets sent to a multicast address are sent to all computers identified by the address.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the multicast addresses for the network interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#44\">        public static void DisplayMulticastAddresses()\n        {\n            int count = 0;\n            \n            Console.WriteLine(&quot;Multicast Addresses&quot;);\n            NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                MulticastIPAddressInformationCollection multiCast = adapterProperties.MulticastAddresses;\n                if (multiCast.Count &gt; 0)\n                {\n                    Console.WriteLine(adapter.Description);\n                    foreach (IPAddressInformation multi in multiCast)\n                    {\n                        Console.WriteLine(&quot;  Multicast Address ....................... : {0} {1} {2}&quot;, \n                            multi.Address,\n                            multi.IsTransient ? &quot;Transient&quot; : &quot;&quot;, \n                            multi.IsDnsEligible ? &quot;DNS Eligible&quot; : &quot;&quot;\n                        );\n                        count++;\n                    }\n                    Console.WriteLine();\n                }\n            }\n            if (count == 0)\n            {\n                Console.WriteLine(&quot;  No multicast addressses were found.&quot;);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#44\">    Public Shared Sub DisplayMulticastAddresses() \n        Dim count as Integer = 0\n        \n        Console.WriteLine(&quot;Multicast Addresses&quot;)\n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim multiCast As MulticastIPAddressInformationCollection = adapterProperties.MulticastAddresses\n            If multiCast.Count &gt; 0 Then\n                Console.WriteLine(adapter.Description)\n                Dim multi As IPAddressInformation\n                For Each multi In  multiCast\n                    Console.WriteLine(&quot;  Multicast Address ....................... : {0} {1} {2}&quot;, multi.Address, IIf(multi.IsTransient, &quot;Transient&quot;, &quot;&quot;), IIf(multi.IsDnsEligible, &quot;DNS Eligible&quot;, &quot;&quot;))\n                &#39;TODO: For performance reasons this should be changed to nested IF statements\n                &#39;TODO: For performance reasons this should be changed to nested IF statements\n                    count += 1\n                Next multi\n                Console.WriteLine()\n            End If\n        Next adapter\n    \n        if count = 0 then\n            Console.WriteLine(&quot;  No multicast addresses were found.&quot;)\n            Console.WriteLine()\n        End if\n    \n    End Sub &#39;DisplayMulticastAddresses\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#44\">void DisplayMulticastAddresses()\n{\n   int count = 0;\n   \n   Console::WriteLine( &quot;Multicast Addresses&quot; );\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum15 = adapters-&gt;GetEnumerator();\n   while ( myEnum15-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum15-&gt;Current);\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n      MulticastIPAddressInformationCollection ^ multiCast = adapterProperties-&gt;MulticastAddresses;\n      if ( multiCast-&gt;Count &gt; 0 )\n      {\n         Console::WriteLine( adapter-&gt;Description );\n         System::Collections::IEnumerator^ myEnum16 = multiCast-&gt;GetEnumerator();\n         while ( myEnum16-&gt;MoveNext() )\n         {\n            MulticastIPAddressInformation ^ multi = safe_cast&lt;MulticastIPAddressInformation ^&gt;(myEnum16-&gt;Current);\n            Console::WriteLine( &quot;  Multicast Address ....................... : {0} {1} {2}&quot;, \n               multi-&gt;Address, multi-&gt;IsTransient ? &quot;Transient&quot; : &quot;&quot;, \n               multi-&gt;IsDnsEligible ? &quot;DNS Eligible&quot; : &quot;&quot; );\n            count++;   \n         }\n         Console::WriteLine();\n      }\n   }\n    if (count == 0)\n    {\n        Console::WriteLine(&quot;  No multicast addresses were found.&quot;);\n        Console::WriteLine();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_UnicastAddresses\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_UnicastAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnicastAddresses</div>        \r\n          </div>\r\n    \r\n            <p>Gets the unicast addresses assigned to this interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.UnicastIPAddressInformationCollection UnicastAddresses { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.unicastipaddressinformationcollection\" data-linktype=\"relative-path\">UnicastIPAddressInformationCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.unicastipaddressinformationcollection\" data-linktype=\"relative-path\">UnicastIPAddressInformationCollection</a> that contains the unicast addresses for this interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A unicast address identifies a single computer. Packets sent to a unicast address are sent to the computer identified by the address.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the unicast addresses for the network interfaces on the local computer.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#45\">        public static void DisplayUnicastAddresses()\n        {\n            Console.WriteLine(&quot;Unicast Addresses&quot;);\n            NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n            foreach (NetworkInterface adapter in adapters)\n            {\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                UnicastIPAddressInformationCollection uniCast = adapterProperties.UnicastAddresses;\n                if (uniCast.Count &gt;0)\n                {\n                    Console.WriteLine(adapter.Description);\n                    string lifeTimeFormat = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;;\n                    foreach (UnicastIPAddressInformation uni in uniCast)\n                    {\n                        DateTime when;\n                        \n                        Console.WriteLine(&quot;  Unicast Address ......................... : {0}&quot;, uni.Address);\n                        Console.WriteLine(&quot;     Prefix Origin ........................ : {0}&quot;, uni.PrefixOrigin);\n                        Console.WriteLine(&quot;     Suffix Origin ........................ : {0}&quot;, uni.SuffixOrigin);\n                        Console.WriteLine(&quot;     Duplicate Address Detection .......... : {0}&quot;, \n                            uni.DuplicateAddressDetectionState);\n                            \n                        // Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n                        // if en-us is the current culture.\n                        \n                        // Calculate the date and time at the end of the lifetimes.    \n                        when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressValidLifetime);\n                        when = when.ToLocalTime();    \n                        Console.WriteLine(&quot;     Valid Life Time ...................... : {0}&quot;, \n                            when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                        );\n                        when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressPreferredLifetime);   \n                        when = when.ToLocalTime();\n                        Console.WriteLine(&quot;     Preferred life time .................. : {0}&quot;, \n                            when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                        ); \n                        \n                        when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.DhcpLeaseLifetime);\n                        when = when.ToLocalTime(); \n                        Console.WriteLine(&quot;     DHCP Leased Life Time ................ : {0}&quot;, \n                            when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                        );\n                    }\n                    Console.WriteLine();\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#45\">    Public Shared Sub DisplayUnicastAddresses() \n\n        Console.WriteLine(&quot;Unicast Addresses&quot;)\n        Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim adapter As NetworkInterface\n        For Each adapter In  adapters\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            Dim uniCast As UnicastIPAddressInformationCollection = adapterProperties.UnicastAddresses\n            If uniCast.Count &gt; 0 Then\n                Console.WriteLine(adapter.Description)\n                Dim lifeTimeFormat As String = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;\n                Dim uni As UnicastIPAddressInformation\n                For Each uni In  uniCast\n                    Dim [when] As DateTime\n                    \n                    Console.WriteLine(&quot;  Unicast Address ......................... : {0}&quot;, uni.Address)\n                    Console.WriteLine(&quot;     Prefix Origin ........................ : {0}&quot;, uni.PrefixOrigin)\n                    Console.WriteLine(&quot;     Suffix Origin ........................ : {0}&quot;, uni.SuffixOrigin)\n                    Console.WriteLine(&quot;     Duplicate Address Detection .......... : {0}&quot;, uni.DuplicateAddressDetectionState)\n                    \n                    &#39; Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n                    &#39; if en-us is the current culture.\n                    &#39; Calculate the date and time at the end of the lifetimes.    \n                    [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressValidLifetime)\n                    [when] = [when].ToLocalTime()\n                    Console.WriteLine(&quot;     Valid Life Time ...................... : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n                    [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressPreferredLifetime)\n                    [when] = [when].ToLocalTime()\n                    Console.WriteLine(&quot;     Preferred life time .................. : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n                    \n                    [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.DhcpLeaseLifetime)\n                    [when] = [when].ToLocalTime()\n                    Console.WriteLine(&quot;     DHCP Leased Life Time ................ : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n                Next uni\n                Console.WriteLine()\n            End If\n        Next adapter\n    \n    End Sub &#39;DisplayUnicastAddresses\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#45\">void DisplayUnicastAddresses()\n{\n   Console::WriteLine( &quot;Unicast Addresses&quot; );\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum17 = adapters-&gt;GetEnumerator();\n   while ( myEnum17-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum17-&gt;Current);\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n      UnicastIPAddressInformationCollection ^ uniCast = adapterProperties-&gt;UnicastAddresses;\n      if ( uniCast-&gt;Count &gt; 0 )\n      {\n         Console::WriteLine( adapter-&gt;Description );\n         String^ lifeTimeFormat = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;;\n         System::Collections::IEnumerator^ myEnum18 = uniCast-&gt;GetEnumerator();\n         while ( myEnum18-&gt;MoveNext() )\n         {\n            UnicastIPAddressInformation ^ uni = safe_cast&lt;UnicastIPAddressInformation ^&gt;(myEnum18-&gt;Current);\n            DateTime when;\n            Console::WriteLine( &quot;  Unicast Address ......................... : {0}&quot;, \n               uni-&gt;Address );\n            Console::WriteLine( &quot;     Prefix Origin ........................ : {0}&quot;, \n               uni-&gt;PrefixOrigin );\n            Console::WriteLine( &quot;     Suffix Origin ........................ : {0}&quot;, \n               uni-&gt;SuffixOrigin );\n            Console::WriteLine( &quot;     Duplicate Address Detection .......... : {0}&quot;, \n               uni-&gt;DuplicateAddressDetectionState );\n            \n            // Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n            // if en-us is the current culture.\n            // Calculate the date and time at the end of the lifetimes.    \n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;AddressValidLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     Valid Life Time ...................... : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;AddressPreferredLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     Preferred life time .................. : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;DhcpLeaseLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     DHCP Leased Life Time ................ : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n         }\n         Console::WriteLine();\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_WinsServersAddresses\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_WinsServersAddresses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WinsServersAddresses</div>        \r\n          </div>\r\n    \r\n            <p>Gets the addresses of Windows Internet Name Service (WINS) servers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.IPAddressCollection WinsServersAddresses { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipaddresscollection\" data-linktype=\"relative-path\">IPAddressCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.ipaddresscollection\" data-linktype=\"relative-path\">IPAddressCollection</a> that contains the address information for WINS servers, or an empty array if no servers are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>WINS provides a distributed database for registering and querying dynamic NetBIOS names to IP address mappings.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_GetIPv4Properties\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_GetIPv4Properties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIPv4Properties()</div>        \r\n          </div>\r\n    \r\n            <p>Provides Internet Protocol version 4 (IPv4) configuration data for this network interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.IPv4InterfaceProperties GetIPv4Properties ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> object that contains IPv4 configuration data, or <code>null</code> if no data is available for the interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.networkinformationexception\" data-linktype=\"relative-path\">NetworkInformationException</a></div>\r\n                  </div>\r\n                  <p>The interface does not support the IPv4 protocol.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns <code>null</code> for <a class=\"xref\" href=\"system.net.networkinformation.networkinterfacetype\" data-linktype=\"relative-path\">NetworkInterfaceType</a> interfaces.  </p>\n<p> For a detailed description of the information available for an interface that supports IPv4, see the <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> class documentation. Note that the object returned by the GetIPv4Properties method reflects the configuration as of the time the object is created. This information is not updated dynamically.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPInterfaceProperties_GetIPv6Properties\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPInterfaceProperties_GetIPv6Properties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIPv6Properties()</div>        \r\n          </div>\r\n    \r\n            <p>Provides Internet Protocol version 6 (IPv6) configuration data for this network interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Net.NetworkInformation.IPv6InterfaceProperties GetIPv6Properties ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.ipv6interfaceproperties\" data-linktype=\"relative-path\">IPv6InterfaceProperties</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkinformation.ipv6interfaceproperties\" data-linktype=\"relative-path\">IPv6InterfaceProperties</a> object that contains IPv6 configuration data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkinformation.networkinformationexception\" data-linktype=\"relative-path\">NetworkInformationException</a></div>\r\n                  </div>\r\n                  <p>The interface does not support the IPv6 protocol.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a detailed description of the information available for an interface that supports IPv6, see the <a class=\"xref\" href=\"system.net.networkinformation.ipv6interfaceproperties\" data-linktype=\"relative-path\">IPv6InterfaceProperties</a> documentation. Note that the object returned by the GetIPv6Properties method reflects the configuration as of the time the object is created. This information is not updated dynamically.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.IPInterfaceProperties.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.IPInterfaceProperties.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"87da41de-68e6-0b2f-3dbe-efee784cc1d2\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Net.NetworkInformation\\IPInterfaceProperties.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.NetworkInformation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.IPInterfaceProperties\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.IPInterfaceProperties.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.IPInterfaceProperties.yml","open_to_public_contributors":true,"api_name":["System.Net.NetworkInformation.IPInterfaceProperties","System.Net.NetworkInformation.IPInterfaceProperties..ctor","System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses","System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses","System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses","System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix","System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses","System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties","System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties","System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled","System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled","System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses","System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses","System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.IPInterfaceProperties","System::Net::NetworkInformation::IPInterfaceProperties","System.Net.NetworkInformation.IPInterfaceProperties.#ctor","System::Net::NetworkInformation::IPInterfaceProperties::#ctor","System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses","System::Net::NetworkInformation::IPInterfaceProperties::AnycastAddresses","System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses","System::Net::NetworkInformation::IPInterfaceProperties::DhcpServerAddresses","System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses","System::Net::NetworkInformation::IPInterfaceProperties::DnsAddresses","System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix","System::Net::NetworkInformation::IPInterfaceProperties::DnsSuffix","System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses","System::Net::NetworkInformation::IPInterfaceProperties::GatewayAddresses","System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties","System::Net::NetworkInformation::IPInterfaceProperties::GetIPv4Properties","System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties","System::Net::NetworkInformation::IPInterfaceProperties::GetIPv6Properties","System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled","System::Net::NetworkInformation::IPInterfaceProperties::IsDnsEnabled","System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled","System::Net::NetworkInformation::IPInterfaceProperties::IsDynamicDnsEnabled","System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses","System::Net::NetworkInformation::IPInterfaceProperties::MulticastAddresses","System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses","System::Net::NetworkInformation::IPInterfaceProperties::UnicastAddresses","System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses","System::Net::NetworkInformation::IPInterfaceProperties::WinsServersAddresses"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"87da41de-68e6-0b2f-3dbe-efee784cc1d2","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Net.NetworkInformation\\IPInterfaceProperties.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.NetworkInformation/IPInterfaceProperties.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IPInterfaceProperties class | Microsoft Docs","_op_ogTitle":"IPInterfaceProperties class","description":"Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).\n","toc_asset_id":"_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.IPInterfaceProperties","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.ipinterfaceproperties","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.ipinterfaceproperties","fileRelativePath":"System.Net.NetworkInformation.IPInterfaceProperties.html"},"themesRelativePathToOutputRoot":"_themes/"}