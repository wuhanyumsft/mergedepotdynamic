{"content":"    \r\n    <h1 id=\"System_Windows_Media_StreamGeometryContext\">\r\n      <span class=\"lang-csharp\">StreamGeometryContext</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Describes a geometry using drawing commands. This class is used with the <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> class to create a lightweight geometry that does not support data binding, animation, or modification.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class StreamGeometryContext : System.Windows.Threading.DispatcherObject, IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject\" data-linktype=\"relative-path\">System.Windows.Threading.DispatcherObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StreamGeometryContext</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_CheckAccess\" data-linktype=\"relative-path\">CheckAccess()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_Dispatcher\" data-linktype=\"relative-path\">Dispatcher</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_VerifyAccess\" data-linktype=\"relative-path\">VerifyAccess()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_ArcTo_System_Windows_Point_System_Windows_Size_System_Double_System_Boolean_System_Windows_Media_SweepDirection_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">ArcTo(Point,Size,Double,Boolean,SweepDirection,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Draws an arc to the specified point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_BeginFigure_System_Windows_Point_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">BeginFigure(Point,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the starting point for a new figure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_BezierTo_System_Windows_Point_System_Windows_Point_System_Windows_Point_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">BezierTo(Point,Point,Point,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Draws a Bezier curve to the specified point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes this context and flushes its content so that it can be rendered.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_LineTo_System_Windows_Point_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">LineTo(Point,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Draws a straight line to the specified <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_PolyBezierTo_System_Collections_Generic_IList_System_Windows_Point__System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">PolyBezierTo(IList&lt;Point&gt;,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Draws one or more connected Bezier curves.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_PolyLineTo_System_Collections_Generic_IList_System_Windows_Point__System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">PolyLineTo(IList&lt;Point&gt;,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Draws one or more connected straight lines.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_PolyQuadraticBezierTo_System_Collections_Generic_IList_System_Windows_Point__System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">PolyQuadraticBezierTo(IList&lt;Point&gt;,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Draws one or more connected quadratic Bezier curves.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_QuadraticBezierTo_System_Windows_Point_System_Windows_Point_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">QuadraticBezierTo(Point,Point,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Draws a quadratic Bezier curve.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_StreamGeometryContext_System_IDisposable_Dispose\" data-linktype=\"self-bookmark\">IDisposable.Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_ArcTo_System_Windows_Point_System_Windows_Size_System_Double_System_Boolean_System_Windows_Media_SweepDirection_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_ArcTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArcTo(Point,Size,Double,Boolean,SweepDirection,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Draws an arc to the specified point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void ArcTo (System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination point for the end of the arc.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>size</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The radii (half the width and half the height) of an oval whose perimeter is used to draw the angle. If the oval is very rounded in all directions, the arc will be rounded, if it is nearly flat, so will the arc. For example, a very large width and height would represent a very large oval, which would give a slight curvature for the angle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rotationAngle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rotation angle of the oval that specifies the curve. The curvature of the arc can be rotated with this parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isLargeArc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to draw the arc greater than 180 degrees; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sweepDirection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.sweepdirection\" data-linktype=\"relative-path\">SweepDirection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that indicates whether the arc is drawn in the <a class=\"xref\" href=\"system.windows.media.sweepdirection\" data-linktype=\"relative-path\">SweepDirection</a> or <a class=\"xref\" href=\"system.windows.media.sweepdirection\" data-linktype=\"relative-path\">SweepDirection</a> direction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isStroked</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the segment stroked when a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a> is used to render the segment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSmoothJoin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to treat the join between this segment and the previous segment as a corner when stroked with a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <a class=\"xref\" href=\"system.windows.media.streamgeometrycontext#System_Windows_Media_StreamGeometryContext_BeginFigure_\" data-linktype=\"relative-path\">BeginFigure</a> method as its start point.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> cannot be serialized if it contains a <a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a> or any non-stroked or unfilled segments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to draw an arc using the ArcTo method.  </p>\n<pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryArcToExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class StreamGeometryArcToExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\t&#39; Create a path to draw a geometry with.\n\t\t\tDim myPath As New Path()\n\t\t\tmyPath.Stroke = Brushes.Black\n\t\t\tmyPath.StrokeThickness = 1\n\n\t\t\t&#39; Create a StreamGeometry to use to specify myPath.\n\t\t\tDim geometry As New StreamGeometry()\n\t\t\tgeometry.FillRule = FillRule.EvenOdd\n\n\t\t\t&#39; Open a StreamGeometryContext that can be used to describe this StreamGeometry object&#39;s contents. \n\t\t\tUsing ctx As StreamGeometryContext = geometry.Open()\n\t\t\t\t&#39; Set the begin point of the shape.\n\t\t\t\tctx.BeginFigure(New Point(10, 100), True, False) &#39; is closed  -  is filled \n\n\t\t\t\t&#39; Create an arc. Draw the arc from the begin point to 200,100 with the specified parameters.\n\t\t\t\tctx.ArcTo(New Point(200, 100), New Size(100, 50), 45, True, SweepDirection.Counterclockwise, True, False) &#39; is smooth join  -  is stroked  -  is large arc  -  rotation angle \n\n\t\t\tEnd Using\n\n\t\t\t&#39; Freeze the geometry (make it unmodifiable)\n\t\t\t&#39; for additional performance benefits.\n\t\t\tgeometry.Freeze()\n\n\t\t\t&#39; specify the shape (arc) of the path using the StreamGeometry.\n\t\t\tmyPath.Data = geometry\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim mainPanel As New StackPanel()\n\t\t\tmainPanel.Children.Add(myPath)\n\t\t\tMe.Content = mainPanel\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryArcToExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class StreamGeometryArcToExample : Page\n    {\n        public StreamGeometryArcToExample()\n        {\n            // Create a path to draw a geometry with.\n            Path myPath = new Path();\n            myPath.Stroke = Brushes.Black;\n            myPath.StrokeThickness = 1;\n\n            // Create a StreamGeometry to use to specify myPath.\n            StreamGeometry geometry = new StreamGeometry();\n            geometry.FillRule = FillRule.EvenOdd;\n\n            // Open a StreamGeometryContext that can be used to describe this StreamGeometry object&#39;s contents. \n            using (StreamGeometryContext ctx = geometry.Open())\n            {\n                // Set the begin point of the shape.\n                ctx.BeginFigure(new Point(10, 100), true /* is filled */, false /* is closed */);\n\n                // Create an arc. Draw the arc from the begin point to 200,100 with the specified parameters.\n                ctx.ArcTo(new Point(200, 100), new Size(100, 50), 45 /* rotation angle */, true /* is large arc */, \n                          SweepDirection.Counterclockwise, true /* is stroked */, false /* is smooth join */);\n\n            }\n\n            // Freeze the geometry (make it unmodifiable)\n            // for additional performance benefits.\n            geometry.Freeze();\n            \n            // specify the shape (arc) of the path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            // Add path shape to the UI.\n            StackPanel mainPanel = new StackPanel();\n            mainPanel.Children.Add(myPath);\n            this.Content = mainPanel;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_BeginFigure_System_Windows_Point_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_BeginFigure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginFigure(Point,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the starting point for a new figure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void BeginFigure (System.Windows.Point startPoint, bool isFilled, bool isClosed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startPoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a> where the figure begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isFilled</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to use the area contained by this figure for hit-testing, rendering, and clipping; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isClosed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to close the figure; otherwise, <code>false</code>. For example, if two connecting lines are drawn, and <code>isClosed</code> is set to <code>false</code>, the drawing will just be of two lines but if <code>isClosed</code> is set to <code>true</code>, the two lines will be closed to create a triangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By calling this method multiple times, you can create multiple figures (self-contained geometric shapes) within this <a class=\"xref\" href=\"system.windows.media.streamgeometrycontext\" data-linktype=\"relative-path\">StreamGeometryContext</a>.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> cannot be serialized if it contains a <a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a> or any non-stroked or unfilled segments.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_BezierTo_System_Windows_Point_System_Windows_Point_System_Windows_Point_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_BezierTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BezierTo(Point,Point,Point,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Draws a Bezier curve to the specified point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void BezierTo (System.Windows.Point point1, System.Windows.Point point2, System.Windows.Point point3, bool isStroked, bool isSmoothJoin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first control point used to specify the shape of the curve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>point2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second control point used to specify the shape of the curve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>point3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination point for the end of the curve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isStroked</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the segment stroked when a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a> is used to render the segment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSmoothJoin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to treat the join between this segment and the previous segment as a corner when stroked with a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to add a segment without starting a figure by calling the <span class=\"xref\">stem.Windows.Media.StreamGeometryContext.BeginFigure*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A cubic Bezier curve is defined by a start point, end point, and two control points. The first control point determines the curvature of the first half of the segment, and the second control point determines the curvature of the second half of the segment.  </p>\n<p> This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <a class=\"xref\" href=\"system.windows.media.streamgeometrycontext#System_Windows_Media_StreamGeometryContext_BeginFigure_\" data-linktype=\"relative-path\">BeginFigure</a> method as its start point.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> cannot be serialized if it contains a <a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a> or any non-stroked or unfilled segments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to draw a Bezier curve using the BezierTo method.  </p>\n<pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryBezierToExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class StreamGeometryBezierToExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a StreamGeometry to use to specify myPath.\n\t\t\tDim geometry As New StreamGeometry()\n\t\t\tgeometry.FillRule = FillRule.EvenOdd\n\n\t\t\t&#39; Open a StreamGeometryContext that can be used to describe this StreamGeometry \n\t\t\t&#39; object&#39;s contents.\n\t\t\tUsing ctx As StreamGeometryContext = geometry.Open()\n\t\t\t\t&#39; Set the begin point of the shape.\n\t\t\t\tctx.BeginFigure(New Point(10, 100), True, False) &#39; is closed  -  is filled \n\n\t\t\t\t&#39; Create a Bezier curve using the 3 specifed points where the first two points\n\t\t\t\t&#39; are control points and the last point is the destination point for the curve.\n\t\t\t\tctx.BezierTo(New Point(100, 0), New Point(200,200), New Point(300,100), True, False) &#39; is smooth join  -  is stroked \n\n\t\t\tEnd Using\n\n\t\t\t&#39; Create a path to draw a geometry with.\n\t\t\tDim myPath As New Path()\n\t\t\tmyPath.Stroke = Brushes.Black\n\t\t\tmyPath.StrokeThickness = 1\n\n\t\t\t&#39; Freeze the geometry (make it unmodifiable)\n\t\t\t&#39; for additional performance benefits.\n\t\t\tgeometry.Freeze()\n\n\t\t\t&#39; specify the shape (Bezier Curve) of the path using the StreamGeometry.\n\t\t\tmyPath.Data = geometry\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim mainPanel As New StackPanel()\n\t\t\tmainPanel.Children.Add(myPath)\n\t\t\tMe.Content = mainPanel\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryBezierToExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class StreamGeometryBezierToExample : Page\n    {\n        public StreamGeometryBezierToExample()\n        {\n\n            // Create a StreamGeometry to use to specify myPath.\n            StreamGeometry geometry = new StreamGeometry();\n            geometry.FillRule = FillRule.EvenOdd;\n\n            // Open a StreamGeometryContext that can be used to describe this StreamGeometry \n            // object&#39;s contents.\n            using (StreamGeometryContext ctx = geometry.Open())\n            {\n                // Set the begin point of the shape.\n                ctx.BeginFigure(new Point(10, 100), true /* is filled */, false /* is closed */);\n\n                // Create a Bezier curve using the 3 specifed points where the first two points\n                // are control points and the last point is the destination point for the curve.\n                ctx.BezierTo(new Point(100, 0), new Point(200,200), new Point(300,100), \n                             true /* is stroked */, false /* is smooth join */);\n\n            }\n\n            // Create a path to draw a geometry with.\n            Path myPath = new Path();\n            myPath.Stroke = Brushes.Black;\n            myPath.StrokeThickness = 1;\n\n            // Freeze the geometry (make it unmodifiable)\n            // for additional performance benefits.\n            geometry.Freeze();\n\n            // specify the shape (Bezier Curve) of the path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            // Add path shape to the UI.\n            StackPanel mainPanel = new StackPanel();\n            mainPanel.Children.Add(myPath);\n            this.Content = mainPanel;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_Close\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes this context and flushes its content so that it can be rendered.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This context has already been closed or disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Once closed, the context cannot be modified. The context must be closed before its content can be rendered.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_LineTo_System_Windows_Point_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_LineTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LineTo(Point,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Draws a straight line to the specified <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void LineTo (System.Windows.Point point, bool isStroked, bool isSmoothJoin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination point for the end of the line.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isStroked</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the segment stroked when a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a> is used to render the segment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSmoothJoin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to treat the join between this segment and the previous segment as a corner when stroked with a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to add a segment without starting a figure by calling the <span class=\"xref\">stem.Windows.Media.StreamGeometryContext.BeginFigure*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <a class=\"xref\" href=\"system.windows.media.streamgeometrycontext#System_Windows_Media_StreamGeometryContext_BeginFigure_\" data-linktype=\"relative-path\">BeginFigure</a> method as its start point.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> cannot be serialized if it contains a <a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a> or any non-stroked or unfilled segments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to draw a triangle using the LineTo method.  </p>\n<pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryTriangleExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\t&#39; Use StreamGeometry with StreamGeometryContext to define a triangle shape.\n\tPartial Public Class StreamGeometryTriangleExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\t&#39; Create a path to draw a geometry with.\n\t\t\tDim myPath As New Path()\n\t\t\tmyPath.Stroke = Brushes.Black\n\t\t\tmyPath.StrokeThickness = 1\n\n\t\t\t&#39; Create a StreamGeometry to use to specify myPath.\n\t\t\tDim geometry As New StreamGeometry()\n\t\t\tgeometry.FillRule = FillRule.EvenOdd\n\n\t\t\t&#39; Open a StreamGeometryContext that can be used to describe this StreamGeometry \n\t\t\t&#39; object&#39;s contents.\n\t\t\tUsing ctx As StreamGeometryContext = geometry.Open()\n\n\t\t\t\t&#39; Begin the triangle at the point specified. Notice that the shape is set to \n\t\t\t\t&#39; be closed so only two lines need to be specified below to make the triangle.\n\t\t\t\tctx.BeginFigure(New Point(10, 100), True, True) &#39; is closed  -  is filled \n\n\t\t\t\t&#39; Draw a line to the next specified point.\n\t\t\t\tctx.LineTo(New Point(100, 100), True, False) &#39; is smooth join  -  is stroked \n\n\t\t\t\t&#39; Draw another line to the next specified point.\n\t\t\t\tctx.LineTo(New Point(100, 50), True, False) &#39; is smooth join  -  is stroked \n\t\t\tEnd Using\n\n\t\t\t&#39; Freeze the geometry (make it unmodifiable)\n\t\t\t&#39; for additional performance benefits.\n\t\t\tgeometry.Freeze()\n\n\t\t\t&#39; Specify the shape (triangle) of the Path using the StreamGeometry.\n\t\t\tmyPath.Data = geometry\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim mainPanel As New StackPanel()\n\t\t\tmainPanel.Children.Add(myPath)\n\t\t\tMe.Content = mainPanel\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryTriangleExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    // Use StreamGeometry with StreamGeometryContext to define a triangle shape.\n    public partial class StreamGeometryTriangleExample : Page\n    {\n        public StreamGeometryTriangleExample()\n        {\n            // Create a path to draw a geometry with.\n            Path myPath = new Path();\n            myPath.Stroke = Brushes.Black;\n            myPath.StrokeThickness = 1;\n\n            // Create a StreamGeometry to use to specify myPath.\n            StreamGeometry geometry = new StreamGeometry();\n            geometry.FillRule = FillRule.EvenOdd;\n\n            // Open a StreamGeometryContext that can be used to describe this StreamGeometry \n            // object&#39;s contents.\n            using (StreamGeometryContext ctx = geometry.Open())\n            {\n                \n                // Begin the triangle at the point specified. Notice that the shape is set to \n                // be closed so only two lines need to be specified below to make the triangle.\n                ctx.BeginFigure(new Point(10, 100), true /* is filled */, true /* is closed */);\n\n                // Draw a line to the next specified point.\n                ctx.LineTo(new Point(100, 100), true /* is stroked */, false /* is smooth join */);\n\n                // Draw another line to the next specified point.\n                ctx.LineTo(new Point(100, 50), true /* is stroked */, false /* is smooth join */);\n            }\n\n            // Freeze the geometry (make it unmodifiable)\n            // for additional performance benefits.\n            geometry.Freeze();\n\n            // Specify the shape (triangle) of the Path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            // Add path shape to the UI.\n            StackPanel mainPanel = new StackPanel();\n            mainPanel.Children.Add(myPath);\n            this.Content = mainPanel;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_PolyBezierTo_System_Collections_Generic_IList_System_Windows_Point__System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_PolyBezierTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PolyBezierTo(IList&lt;Point&gt;,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Draws one or more connected Bezier curves.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void PolyBezierTo (System.Collections.Generic.IList&lt;System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>points</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The list of points that specify control points and destination points for one or more Bezier curves. The number of points in this list should be a multiple of three.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isStroked</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the segment stroked when a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a> is used to render the segment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSmoothJoin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to treat the join between this segment and the previous segment as a corner when stroked with a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to add a segment without starting a figure by calling the <span class=\"xref\">stem.Windows.Media.StreamGeometryContext.BeginFigure*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The first point in <code>points</code> specifies the first control point, the next specifies the second control point, the third point specifies the end point, the next point specifies the first control point of the next curve, and so on.  </p>\n<p> This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <a class=\"xref\" href=\"system.windows.media.streamgeometrycontext#System_Windows_Media_StreamGeometryContext_BeginFigure_\" data-linktype=\"relative-path\">BeginFigure</a> method as its start point.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> cannot be serialized if it contains a <a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a> or any non-stroked or unfilled segments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to draw multiple connected Bezier curves using the PolyBezierTo method.  </p>\n<pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyBezierToExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Collections.Generic\n\nNamespace SDKSample\n\tPartial Public Class StreamGeometryPolyBezierToExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\t&#39; Create a path to draw a geometry with.\n\t\t\tDim myPath As New Path()\n\t\t\tmyPath.Stroke = Brushes.Black\n\t\t\tmyPath.StrokeThickness = 1\n\n\t\t\t&#39; Create a StreamGeometry to use to specify myPath.\n\t\t\tDim geometry As New StreamGeometry()\n\t\t\tgeometry.FillRule = FillRule.EvenOdd\n\n\t\t\t&#39; Open a StreamGeometryContext that can be used to describe this StreamGeometry \n\t\t\t&#39; object&#39;s contents.\n\t\t\tUsing ctx As StreamGeometryContext = geometry.Open()\n\t\t\t\t&#39; Set the begin point of the shape.\n\t\t\t\tctx.BeginFigure(New Point(10, 100), True, False) &#39; is closed  -  is filled \n\n\t\t\t\t&#39; Create a collection of Point structures that will be used with the PolyBezierTo \n\t\t\t\t&#39; Method to create the Bezier curve.\n\t\t\t\tDim pointList As New List(Of Point)()\n\n\t\t\t\t&#39; First Bezier curve is specified with these three points.\n\n\t\t\t\t&#39; First control point for first Bezier curve.\n\t\t\t\tpointList.Add(New Point(100,0))\n\n\t\t\t\t&#39; Second control point for first Bezier curve.\n\t\t\t\tpointList.Add(New Point(200, 200))\n\n\t\t\t\t&#39; Destination point for first Bezier curve.\n\t\t\t\tpointList.Add(New Point(300, 100))\n\n\t\t\t\t&#39; Second Bezier curve is specified with these three points.\n\n\t\t\t\t&#39; First control point for second Bezier curve.\n\t\t\t\tpointList.Add(New Point(400, 0))\n\n\t\t\t\t&#39; Second control point for second Bezier curve.\n\t\t\t\tpointList.Add(New Point(500, 200))\n\n\t\t\t\t&#39; Destination point for second Bezier curve.\n\t\t\t\tpointList.Add(New Point(600, 100))\n\n\t\t\t\t&#39; Create a Bezier curve using the collection of Point Structures.\n\t\t\t\tctx.PolyBezierTo(pointList, True, False) &#39; is smooth join  -  is stroked \n\n\t\t\tEnd Using\n\n\t\t\t&#39; Freeze the geometry (make it unmodifiable)\n\t\t\t&#39; for additional performance benefits.\n\t\t\tgeometry.Freeze()\n\n\t\t\t&#39; specify the shape (Bezier curve) of the path using the StreamGeometry.\n\t\t\tmyPath.Data = geometry\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim mainPanel As New StackPanel()\n\t\t\tmainPanel.Children.Add(myPath)\n\t\t\tMe.Content = mainPanel\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyBezierToExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Collections.Generic;\n\nnamespace SDKSample\n{\n    public partial class StreamGeometryPolyBezierToExample : Page\n    {\n        public StreamGeometryPolyBezierToExample()\n        {\n            // Create a path to draw a geometry with.\n            Path myPath = new Path();\n            myPath.Stroke = Brushes.Black;\n            myPath.StrokeThickness = 1;\n\n            // Create a StreamGeometry to use to specify myPath.\n            StreamGeometry geometry = new StreamGeometry();\n            geometry.FillRule = FillRule.EvenOdd;\n\n            // Open a StreamGeometryContext that can be used to describe this StreamGeometry \n            // object&#39;s contents.\n            using (StreamGeometryContext ctx = geometry.Open())\n            {\n                // Set the begin point of the shape.\n                ctx.BeginFigure(new Point(10, 100), true /* is filled */, false /* is closed */);\n\n                // Create a collection of Point structures that will be used with the PolyBezierTo \n                // Method to create the Bezier curve.\n                List&lt;Point&gt; pointList = new List&lt;Point&gt;();\n\n                // First Bezier curve is specified with these three points.\n\n                // First control point for first Bezier curve.\n                pointList.Add(new Point(100,0));\n\n                // Second control point for first Bezier curve.\n                pointList.Add(new Point(200, 200));\n\n                // Destination point for first Bezier curve.\n                pointList.Add(new Point(300, 100));\n\n                // Second Bezier curve is specified with these three points.\n\n                // First control point for second Bezier curve.\n                pointList.Add(new Point(400, 0));\n\n                // Second control point for second Bezier curve.\n                pointList.Add(new Point(500, 200));\n\n                // Destination point for second Bezier curve.\n                pointList.Add(new Point(600, 100));\n\n                // Create a Bezier curve using the collection of Point Structures.\n                ctx.PolyBezierTo(pointList, true /* is stroked */, false /* is smooth join */);\n\n            }\n\n            // Freeze the geometry (make it unmodifiable)\n            // for additional performance benefits.\n            geometry.Freeze();\n            \n            // specify the shape (Bezier curve) of the path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            // Add path shape to the UI.\n            StackPanel mainPanel = new StackPanel();\n            mainPanel.Children.Add(myPath);\n            this.Content = mainPanel;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_PolyLineTo_System_Collections_Generic_IList_System_Windows_Point__System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_PolyLineTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PolyLineTo(IList&lt;Point&gt;,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Draws one or more connected straight lines.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void PolyLineTo (System.Collections.Generic.IList&lt;System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>points</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection of points that specify destination points for one or more connected straight lines.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isStroked</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the segment stroked when a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a> is used to render the segment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSmoothJoin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to treat the join between this segment and the previous segment as a corner when stroked with a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to add a segment without starting a figure by calling the <span class=\"xref\">stem.Windows.Media.StreamGeometryContext.BeginFigure*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <a class=\"xref\" href=\"system.windows.media.streamgeometrycontext#System_Windows_Media_StreamGeometryContext_BeginFigure_\" data-linktype=\"relative-path\">BeginFigure</a> method as its start point.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> cannot be serialized if it contains a <a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a> or any non-stroked or unfilled segments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to draw a triangle using the PolyLineTo method.  </p>\n<pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyLineToExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Collections.Generic;\n\nnamespace SDKSample\n{\n    public partial class StreamGeometryPolyLineToExample : Page\n    {\n        public StreamGeometryPolyLineToExample()\n        {\n            // Create a path to draw a geometry with.\n            Path myPath = new Path();\n            myPath.Stroke = Brushes.Black;\n            myPath.StrokeThickness = 1;\n\n            // Create a StreamGeometry to use to specify myPath.\n            StreamGeometry geometry = new StreamGeometry();\n\n            // Open a StreamGeometryContext that can be used to describe this StreamGeometry \n            // object&#39;s contents. \n            using (StreamGeometryContext ctx = geometry.Open())\n            {\n                // Begin the triangle at the point specified.\n                ctx.BeginFigure(new Point(10, 100), true /* is filled */, true /* is closed */);\n\n                // Create a collection of Point structures that will be used with the PolyLineTo \n                // Method to create a triangle.\n                List&lt;Point&gt; pointList = new List&lt;Point&gt;();\n\n                // Two Points are added to the collection. The PolyLineTo method will draw lines\n                // between the Points of the collection.\n                pointList.Add(new Point(100, 100));\n                pointList.Add(new Point(100, 50));\n\n                // Create a triangle using the collection of Point Structures.\n                ctx.PolyLineTo(pointList, true /* is stroked */, false /* is smooth join */);\n\n            }\n\n            // Freeze the geometry (make it unmodifiable)\n            // for additional performance benefits.\n            geometry.Freeze();\n            \n            // specify the shape (triangle) of the path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            // Add path shape to the UI.\n            StackPanel mainPanel = new StackPanel();\n            mainPanel.Children.Add(myPath);\n            this.Content = mainPanel;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyLineToExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Collections.Generic\n\nNamespace SDKSample\n\tPartial Public Class StreamGeometryPolyLineToExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\t&#39; Create a path to draw a geometry with.\n\t\t\tDim myPath As New Path()\n\t\t\tmyPath.Stroke = Brushes.Black\n\t\t\tmyPath.StrokeThickness = 1\n\n\t\t\t&#39; Create a StreamGeometry to use to specify myPath.\n\t\t\tDim geometry As New StreamGeometry()\n\n\t\t\t&#39; Open a StreamGeometryContext that can be used to describe this StreamGeometry \n\t\t\t&#39; object&#39;s contents. \n\t\t\tUsing ctx As StreamGeometryContext = geometry.Open()\n\t\t\t\t&#39; Begin the triangle at the point specified.\n\t\t\t\tctx.BeginFigure(New Point(10, 100), True, True) &#39; is closed  -  is filled \n\n\t\t\t\t&#39; Create a collection of Point structures that will be used with the PolyLineTo \n\t\t\t\t&#39; Method to create a triangle.\n\t\t\t\tDim pointList As New List(Of Point)()\n\n\t\t\t\t&#39; Two Points are added to the collection. The PolyLineTo method will draw lines\n\t\t\t\t&#39; between the Points of the collection.\n\t\t\t\tpointList.Add(New Point(100, 100))\n\t\t\t\tpointList.Add(New Point(100, 50))\n\n\t\t\t\t&#39; Create a triangle using the collection of Point Structures.\n\t\t\t\tctx.PolyLineTo(pointList, True, False) &#39; is smooth join  -  is stroked \n\n\t\t\tEnd Using\n\n\t\t\t&#39; Freeze the geometry (make it unmodifiable)\n\t\t\t&#39; for additional performance benefits.\n\t\t\tgeometry.Freeze()\n\n\t\t\t&#39; specify the shape (triangle) of the path using the StreamGeometry.\n\t\t\tmyPath.Data = geometry\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim mainPanel As New StackPanel()\n\t\t\tmainPanel.Children.Add(myPath)\n\t\t\tMe.Content = mainPanel\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_PolyQuadraticBezierTo_System_Collections_Generic_IList_System_Windows_Point__System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_PolyQuadraticBezierTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PolyQuadraticBezierTo(IList&lt;Point&gt;,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Draws one or more connected quadratic Bezier curves.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void PolyQuadraticBezierTo (System.Collections.Generic.IList&lt;System.Windows.Point&gt; points, bool isStroked, bool isSmoothJoin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>points</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection of points that specify control points and destination points for one or more quadratic Bezier curves. The first point in the list specifies the curve&#39;s control point, the next point specifies the destination point, the next point specifies the control point of the next curve, and so on. The list must contain an even number of points.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isStroked</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the segment stroked when a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a> is used to render the segment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSmoothJoin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to treat the join between this segment and the previous segment as a corner when stroked with a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to add a segment without starting a figure by calling the <span class=\"xref\">stem.Windows.Media.StreamGeometryContext.BeginFigure*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <a class=\"xref\" href=\"system.windows.media.streamgeometrycontext#System_Windows_Media_StreamGeometryContext_BeginFigure_\" data-linktype=\"relative-path\">BeginFigure</a> method as its start point.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> cannot be serialized if it contains a <a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a> or any non-stroked or unfilled segments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to draw multiple connected quadratic Bezier curves using the PolyQuadraticBezierTo method.  </p>\n<pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyQuadraticBezierToExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Collections.Generic\n\nNamespace SDKSample\n\tPartial Public Class StreamGeometryPolyQuadraticBezierToExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\t&#39; Create a path to draw a geometry with.\n\t\t\tDim myPath As New Path()\n\t\t\tmyPath.Stroke = Brushes.Black\n\t\t\tmyPath.StrokeThickness = 1\n\n\t\t\t&#39; Create a StreamGeometry to use to specify myPath.\n\t\t\tDim geometry As New StreamGeometry()\n\t\t\tgeometry.FillRule = FillRule.EvenOdd\n\n\t\t\t&#39; Open a StreamGeometryContext that can be used to describe this StreamGeometry object&#39;s contents. \n\t\t\tUsing ctx As StreamGeometryContext = geometry.Open()\n\t\t\t\t&#39; Set the begin point of the shape.\n\t\t\t\tctx.BeginFigure(New Point(10, 100), True, False) &#39; is closed  -  is filled \n\n\t\t\t\t&#39; Create a collection of Point structures that will be used with the PolyQuadraticBezierTo \n\t\t\t\t&#39; Method to create two quadratic Bezier curves.\n\t\t\t\tDim pointList As New List(Of Point)()\n\n\t\t\t\t&#39; First quadratic Bezier curve is specified with these two points.\n\n\t\t\t\t&#39; Control point for first quadratic Bezier curve.\n\t\t\t\tpointList.Add(New Point(100, 0))\n\n\t\t\t\t&#39; End point for first quadratic Bezier curve.\n\t\t\t\tpointList.Add(New Point(200, 200))\n\n\t\t\t\t&#39; Second quadratic Bezier curve is specified with these two points.\n\n\t\t\t\t&#39; Control point for second quadratic Bezier curve.\n\t\t\t\tpointList.Add(New Point(300, 300))\n\n\t\t\t\t&#39; End point for second quadratic Bezier curve.\n\t\t\t\tpointList.Add(New Point(400, 100))\n\n\t\t\t\t&#39; Create a Bezier curve using the collection of Point Structures.\n\t\t\t\tctx.PolyQuadraticBezierTo(pointList, True, False) &#39; is smooth join  -  is stroked \n\n\t\t\tEnd Using\n\n\t\t\t&#39; Freeze the geometry (make it unmodifiable)\n\t\t\t&#39; for additional performance benefits.\n\t\t\tgeometry.Freeze()\n\n\t\t\t&#39; specify the shape (quadratic Benzier curve) of the path using the StreamGeometry.\n\t\t\tmyPath.Data = geometry\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim mainPanel As New StackPanel()\n\t\t\tmainPanel.Children.Add(myPath)\n\t\t\tMe.Content = mainPanel\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryPolyQuadraticBezierToExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Collections.Generic;\n\nnamespace SDKSample\n{\n    public partial class StreamGeometryPolyQuadraticBezierToExample : Page\n    {\n        public StreamGeometryPolyQuadraticBezierToExample()\n        {\n            // Create a path to draw a geometry with.\n            Path myPath = new Path();\n            myPath.Stroke = Brushes.Black;\n            myPath.StrokeThickness = 1;\n\n            // Create a StreamGeometry to use to specify myPath.\n            StreamGeometry geometry = new StreamGeometry();\n            geometry.FillRule = FillRule.EvenOdd;\n\n            // Open a StreamGeometryContext that can be used to describe this StreamGeometry object&#39;s contents. \n            using (StreamGeometryContext ctx = geometry.Open())\n            {\n                // Set the begin point of the shape.\n                ctx.BeginFigure(new Point(10, 100), true /* is filled */, false /* is closed */);\n\n                // Create a collection of Point structures that will be used with the PolyQuadraticBezierTo \n                // Method to create two quadratic Bezier curves.\n                List&lt;Point&gt; pointList = new List&lt;Point&gt;();\n\n                // First quadratic Bezier curve is specified with these two points.\n\n                // Control point for first quadratic Bezier curve.\n                pointList.Add(new Point(100, 0));\n\n                // End point for first quadratic Bezier curve.\n                pointList.Add(new Point(200, 200));\n\n                // Second quadratic Bezier curve is specified with these two points.\n\n                // Control point for second quadratic Bezier curve.\n                pointList.Add(new Point(300, 300));\n\n                // End point for second quadratic Bezier curve.\n                pointList.Add(new Point(400, 100));\n\n                // Create a Bezier curve using the collection of Point Structures.\n                ctx.PolyQuadraticBezierTo(pointList, true /* is stroked */, false /* is smooth join */);\n\n            }\n\n            // Freeze the geometry (make it unmodifiable)\n            // for additional performance benefits.\n            geometry.Freeze();\n            \n            // specify the shape (quadratic Benzier curve) of the path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            // Add path shape to the UI.\n            StackPanel mainPanel = new StackPanel();\n            mainPanel.Children.Add(myPath);\n            this.Content = mainPanel;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_QuadraticBezierTo_System_Windows_Point_System_Windows_Point_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_QuadraticBezierTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QuadraticBezierTo(Point,Point,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Draws a quadratic Bezier curve.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void QuadraticBezierTo (System.Windows.Point point1, System.Windows.Point point2, bool isStroked, bool isSmoothJoin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The control point used to specify the shape of the curve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>point2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination point for the end of the curve.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isStroked</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the segment stroked when a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a> is used to render the segment; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSmoothJoin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to treat the join between this segment and the previous segment as a corner when stroked with a <a class=\"xref\" href=\"system.windows.media.pen\" data-linktype=\"relative-path\">Pen</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to add a segment without starting a figure by calling the <span class=\"xref\">stem.Windows.Media.StreamGeometryContext.BeginFigure*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike a cubic Bezier curve, which uses two control points, a quadratic cubic Bezier curve uses a single control point.  </p>\n<p> This method uses the end point of the previous segment as its starting point. If this is the first segment in a figure, it uses the point specified by the <a class=\"xref\" href=\"system.windows.media.streamgeometrycontext#System_Windows_Media_StreamGeometryContext_BeginFigure_\" data-linktype=\"relative-path\">BeginFigure</a> method as its start point.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.streamgeometry\" data-linktype=\"relative-path\">StreamGeometry</a> cannot be serialized if it contains a <a class=\"xref\" href=\"system.windows.media.transform\" data-linktype=\"relative-path\">Transform</a> or any non-stroked or unfilled segments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to draw a quadratic Bezier curve using the QuadraticBezierTo method.  </p>\n<pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryQuadraticBezierToExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class StreamGeometryQuadraticBezierToExample : Page\n    {\n        public StreamGeometryQuadraticBezierToExample()\n        {\n            // Create a path to draw a geometry with.\n            Path myPath = new Path();\n            myPath.Stroke = Brushes.Black;\n            myPath.StrokeThickness = 1;\n\n            // Create a StreamGeometry to use to specify myPath.\n            StreamGeometry geometry = new StreamGeometry();\n\n            // Open a StreamGeometryContext that can be used to describe this StreamGeometry \n            // object&#39;s contents.\n            using (StreamGeometryContext ctx = geometry.Open())\n            {\n                // Set the begin point of the shape.\n                ctx.BeginFigure(new Point(10, 100), true /* is filled */, false /* is closed */);\n\n                // Create a Quadratic Bezier curve using the 2 specifed points. The first point\n                // specifies the control point while the second point specifies the end point \n                // of the curve.\n                ctx.QuadraticBezierTo(new Point(100, 0), new Point(200, 200), true /* is stroked */, \n                                      false /* is smooth join */);\n\n            }\n\n            // Freeze the geometry (make it unmodifiable)\n            // for additional performance benefits.\n            geometry.Freeze();\n            \n            // specify the shape (quadratic Bezier curve) of the path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            // Add path shape to the UI.\n            StackPanel mainPanel = new StackPanel();\n            mainPanel.Children.Add(myPath);\n            this.Content = mainPanel;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_procedural_snip#StreamGeometryQuadraticBezierToExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class StreamGeometryQuadraticBezierToExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\t&#39; Create a path to draw a geometry with.\n\t\t\tDim myPath As New Path()\n\t\t\tmyPath.Stroke = Brushes.Black\n\t\t\tmyPath.StrokeThickness = 1\n\n\t\t\t&#39; Create a StreamGeometry to use to specify myPath.\n\t\t\tDim geometry As New StreamGeometry()\n\n\t\t\t&#39; Open a StreamGeometryContext that can be used to describe this StreamGeometry \n\t\t\t&#39; object&#39;s contents.\n\t\t\tUsing ctx As StreamGeometryContext = geometry.Open()\n\t\t\t\t&#39; Set the begin point of the shape.\n\t\t\t\tctx.BeginFigure(New Point(10, 100), True, False) &#39; is closed  -  is filled \n\n\t\t\t\t&#39; Create a Quadratic Bezier curve using the 2 specifed points. The first point\n\t\t\t\t&#39; specifies the control point while the second point specifies the end point \n\t\t\t\t&#39; of the curve.\n\t\t\t\tctx.QuadraticBezierTo(New Point(100, 0), New Point(200, 200), True, False) &#39; is smooth join  -  is stroked \n\n\t\t\tEnd Using\n\n\t\t\t&#39; Freeze the geometry (make it unmodifiable)\n\t\t\t&#39; for additional performance benefits.\n\t\t\tgeometry.Freeze()\n\n\t\t\t&#39; specify the shape (quadratic Bezier curve) of the path using the StreamGeometry.\n\t\t\tmyPath.Data = geometry\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim mainPanel As New StackPanel()\n\t\t\tmainPanel.Children.Add(myPath)\n\t\t\tMe.Content = mainPanel\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_StreamGeometryContext_System_IDisposable_Dispose\">\r\n    \r\n            <a id=\"System_Windows_Media_StreamGeometryContext_System_IDisposable_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDisposable.Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDisposable.Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Media.StreamGeometryContext.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Media.StreamGeometryContext.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.ArcTo\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.BeginFigure\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.BezierTo\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.Close\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.LineTo\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.PolyBezierTo\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.PolyLineTo\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.PolyQuadraticBezierTo\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.QuadraticBezierTo\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.StreamGeometryContext.IDisposable.Dispose\">\r\n<meta name=\"APILocation\" content=\"PresentationCore.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"14397f72-a9ca-5f56-05bf-da3eedbce5e4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes a geometry using drawing commands. This class is used with the  class to create a lightweight geometry that does not support data binding, animation, or modification.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Media/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Media.StreamGeometryContext\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Media.StreamGeometryContext.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Media.StreamGeometryContext.yml","open_to_public_contributors":true,"api_name":["System.Windows.Media.StreamGeometryContext","System.Windows.Media.StreamGeometryContext.ArcTo","System.Windows.Media.StreamGeometryContext.BeginFigure","System.Windows.Media.StreamGeometryContext.BezierTo","System.Windows.Media.StreamGeometryContext.Close","System.Windows.Media.StreamGeometryContext.LineTo","System.Windows.Media.StreamGeometryContext.PolyBezierTo","System.Windows.Media.StreamGeometryContext.PolyLineTo","System.Windows.Media.StreamGeometryContext.PolyQuadraticBezierTo","System.Windows.Media.StreamGeometryContext.QuadraticBezierTo","System.Windows.Media.StreamGeometryContext.IDisposable.Dispose"],"api_location":["PresentationCore.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Media.StreamGeometryContext","System::Windows::Media::StreamGeometryContext","System.Windows.Media.StreamGeometryContext.ArcTo","System::Windows::Media::StreamGeometryContext::ArcTo","System.Windows.Media.StreamGeometryContext.BeginFigure","System::Windows::Media::StreamGeometryContext::BeginFigure","System.Windows.Media.StreamGeometryContext.BezierTo","System::Windows::Media::StreamGeometryContext::BezierTo","System.Windows.Media.StreamGeometryContext.Close","System::Windows::Media::StreamGeometryContext::Close","System.Windows.Media.StreamGeometryContext.LineTo","System::Windows::Media::StreamGeometryContext::LineTo","System.Windows.Media.StreamGeometryContext.PolyBezierTo","System::Windows::Media::StreamGeometryContext::PolyBezierTo","System.Windows.Media.StreamGeometryContext.PolyLineTo","System::Windows::Media::StreamGeometryContext::PolyLineTo","System.Windows.Media.StreamGeometryContext.PolyQuadraticBezierTo","System::Windows::Media::StreamGeometryContext::PolyQuadraticBezierTo","System.Windows.Media.StreamGeometryContext.QuadraticBezierTo","System::Windows::Media::StreamGeometryContext::QuadraticBezierTo","System.Windows.Media.StreamGeometryContext.System#IDisposable#Dispose","System::Windows::Media::StreamGeometryContext::System#IDisposable#Dispose"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"14397f72-a9ca-5f56-05bf-da3eedbce5e4","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Media/StreamGeometryContext.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StreamGeometryContext class | Microsoft Docs","_op_ogTitle":"StreamGeometryContext class","description":"Describes a geometry using drawing commands. This class is used with the  class to create a lightweight geometry that does not support data binding, animation, or modification.\n","toc_asset_id":"_splitted/System.Windows.Media/toc.json","toc_rel":"_splitted/System.Windows.Media/toc.json","source_url":"","ms.assetid":"System.Windows.Media.StreamGeometryContext","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.media.streamgeometrycontext","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.media.streamgeometrycontext","fileRelativePath":"System.Windows.Media.StreamGeometryContext.html"},"themesRelativePathToOutputRoot":"_themes/"}