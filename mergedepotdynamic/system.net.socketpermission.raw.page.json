{"content":"    \r\n    <h1 id=\"System_Net_SocketPermission\">\r\n      <span class=\"lang-csharp\">SocketPermission</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Controls rights to make or accept connections on a transport address.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class SocketPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">System.Security.CodeAccessPermission</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SocketPermission</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert\" data-linktype=\"relative-path\">Assert()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand\" data-linktype=\"relative-path\">Demand()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny\" data-linktype=\"relative-path\">Deny()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_PermitOnly\" data-linktype=\"relative-path\">PermitOnly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAll\" data-linktype=\"relative-path\">RevertAll()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAssert\" data-linktype=\"relative-path\">RevertAssert()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertDeny\" data-linktype=\"relative-path\">RevertDeny()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertPermitOnly\" data-linktype=\"relative-path\">RevertPermitOnly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>SocketPermission instances control permission to accept connections or initiate <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> connections. A <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> permission can be established for a host name or IP address, a port number, and a transport protocol.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Avoid creating socket permissions using host names, as these names have to be resolved to IP addresses, and this might block the stack.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission__ctor_System_Security_Permissions_PermissionState_\" data-linktype=\"self-bookmark\">SocketPermission(PermissionState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> class that allows unrestricted access to the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> or disallows access to the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission__ctor_System_Net_NetworkAccess_System_Net_TransportType_System_String_System_Int32_\" data-linktype=\"self-bookmark\">SocketPermission(NetworkAccess,TransportType,String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> class for the given transport address with the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_AllPorts\" data-linktype=\"self-bookmark\">AllPorts</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a constant that represents all ports.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_AcceptList\" data-linktype=\"self-bookmark\">AcceptList</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list of <a class=\"xref\" href=\"system.net.endpointpermission\" data-linktype=\"relative-path\">EndpointPermission</a> instances that identifies the endpoints that can be accepted under this permission instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_ConnectList\" data-linktype=\"self-bookmark\">ConnectList</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list of <a class=\"xref\" href=\"system.net.endpointpermission\" data-linktype=\"relative-path\">EndpointPermission</a> instances that identifies the endpoints that can be connected to under this permission instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_AddPermission_System_Net_NetworkAccess_System_Net_TransportType_System_String_System_Int32_\" data-linktype=\"self-bookmark\">AddPermission(NetworkAccess,TransportType,String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a permission to the set of permissions for a transport address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a copy of a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_FromXml_System_Security_SecurityElement_\" data-linktype=\"self-bookmark\">FromXml(SecurityElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reconstructs a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance for an XML encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_Intersect_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Intersect(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the logical intersection between two <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instances.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_IsSubsetOf_System_Security_IPermission_\" data-linktype=\"self-bookmark\">IsSubsetOf(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines if the current permission is a subset of the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_IsUnrestricted\" data-linktype=\"self-bookmark\">IsUnrestricted()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks the overall permission state of the object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_ToXml\" data-linktype=\"self-bookmark\">ToXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an XML encoding of a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance and its current state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_SocketPermission_Union_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Union(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the logical union between two <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instances.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission__ctor_System_Security_Permissions_PermissionState_\">\r\n    \r\n            <a id=\"System_Net_SocketPermission__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SocketPermission(PermissionState)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> class that allows unrestricted access to the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> or disallows access to the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SocketPermission (System.Security.Permissions.PermissionState state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance is created with the <code>Unrestricted</code> value from <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> then the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance passes all demands. Any other value for <code>state</code> results in a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance that fails all demands unless a transport address permission is added with <a class=\"xref\" href=\"system.net.socketpermission#System_Net_SocketPermission_AddPermission_\" data-linktype=\"relative-path\">AddPermission</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> using a <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> enumerated value.  </p>\n<pre><code class=\"lang-cpp\" name=\"dateClient_SocketPermission_Constructor#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement1 = socketPermission2-&gt;ToXml();\n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39;ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement4 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement2-&gt;AddChild( securityElement3 );\n      securityElement2-&gt;AddChild( securityElement4 );\n      securityElement1-&gt;AddChild( securityElement2 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement1 );\n\n      Console::WriteLine( &quot;<br>Displays the result of FromXml method : <br>&quot; );\n      Console::WriteLine( socketPermission2 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 =\n         gcnew SocketPermission( NetworkAccess::Connect,\n            TransportType::All,\n            &quot;192.168.144.238&quot;,\n            SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect,\n         TransportType::All,\n         &quot;192.168.144.239&quot;,\n         SocketPermission::AllPorts );\n\n      Console::WriteLine( &quot;Displays the result of AddPermission method : <br>&quot; );\n      Console::WriteLine( socketPermission3 );\n      \n      // Find the intersection between two &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission2-&gt;Intersect( socketPermission3 ));\n\n      Console::WriteLine( &quot;Displays the result of Intersect method :<br> &quot; );\n      Console::WriteLine( socketPermission1 );\n      \n      // Demand that the calling method have the requsite socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"dateClient_SocketPermission_Constructor#1\">\n        Dim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n        \n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement1 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement2 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39;\n        &#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement4 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement2.AddChild(securityElement3)\n        securityElement2.AddChild(securityElement4)\n        securityElement1.AddChild(securityElement2)\n        \n\n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n        socketPermission2.FromXml(securityElement1)\n        \n        Console.WriteLine(ControlChars.Cr + &quot;Displays the result of FromXml method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission2.ToString())\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n        \n        Console.WriteLine(&quot;Displays the result of AddPermission method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission3.ToString())\n        \n        &#39;Find the intersection between two &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission2.Intersect(socketPermission3), SocketPermission)\n        \n        Console.WriteLine(&quot;Displays the result of Intersect method :&quot; + ControlChars.Cr + &quot; &quot;)\n        Console.WriteLine(socketPermission1.ToString())\n        &#39;Demand that the calling method have the requsite socket permission.\n        socketPermission1.Demand()\n</code></pre><pre><code class=\"lang-cs\" name=\"dateClient_SocketPermission_Constructor#1\">\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement1 = socketPermission2.ToXml();\n\t\t// &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;ConnectAccess&quot;);\n\t\t// Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39;ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n\t\t// Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement4 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement2.AddChild(securityElement3);\n\t\tsecurityElement2.AddChild(securityElement4);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n\t\tsocketPermission2.FromXml(securityElement1);\n\n\t\tConsole.WriteLine(&quot;<br>Displays the result of FromXml method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission2.ToString());\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n\t   // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;Displays the result of AddPermission method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission3.ToString());\n\n\t   // Find the intersection between two &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission2.Intersect(socketPermission3);\n\n\t\tConsole.WriteLine(&quot;Displays the result of Intersect method :<br> &quot;);\n\t\tConsole.WriteLine(socketPermission1.ToString());\n\n\t\t// Demand that the calling method have the requsite socket permission.\n\t\tsocketPermission1.Demand();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission__ctor_System_Net_NetworkAccess_System_Net_TransportType_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_SocketPermission__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SocketPermission(NetworkAccess,TransportType,String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> class for the given transport address with the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SocketPermission (System.Net.NetworkAccess access, System.Net.TransportType transport, string hostName, int portNumber);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkaccess\" data-linktype=\"relative-path\">NetworkAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.networkaccess\" data-linktype=\"relative-path\">NetworkAccess</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transport</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.transporttype\" data-linktype=\"relative-path\">TransportType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.transporttype\" data-linktype=\"relative-path\">TransportType</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The host name for the transport address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>portNumber</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The port number for the transport address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> that controls access to the specified <code>hostName</code> and <code>portNumber</code> using the specified <code>transport</code>.  </p>\n<p> The <code>hostName</code> can be a DNS name, an IP address, or a specified IP subnet, such as 192.168.1.*.  </p>\n<p> The <code>portNumber</code> can be any valid port number defined by the transport, or <a class=\"xref\" href=\"system.net.socketpermission#System_Net_SocketPermission_AllPorts\" data-linktype=\"relative-path\">System.Net.SocketPermission.AllPorts</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> using a <a class=\"xref\" href=\"system.net.networkaccess\" data-linktype=\"relative-path\">NetworkAccess</a> enumerated value, a <a class=\"xref\" href=\"system.net.transporttype\" data-linktype=\"relative-path\">TransportType</a> enumerated value, the hostname, and the port number.  </p>\n<pre><code class=\"lang-cpp\" name=\"dateClient_SocketPermission_Constructor#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement1 = socketPermission2-&gt;ToXml();\n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39;ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement4 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement2-&gt;AddChild( securityElement3 );\n      securityElement2-&gt;AddChild( securityElement4 );\n      securityElement1-&gt;AddChild( securityElement2 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement1 );\n\n      Console::WriteLine( &quot;<br>Displays the result of FromXml method : <br>&quot; );\n      Console::WriteLine( socketPermission2 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 =\n         gcnew SocketPermission( NetworkAccess::Connect,\n            TransportType::All,\n            &quot;192.168.144.238&quot;,\n            SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect,\n         TransportType::All,\n         &quot;192.168.144.239&quot;,\n         SocketPermission::AllPorts );\n\n      Console::WriteLine( &quot;Displays the result of AddPermission method : <br>&quot; );\n      Console::WriteLine( socketPermission3 );\n      \n      // Find the intersection between two &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission2-&gt;Intersect( socketPermission3 ));\n\n      Console::WriteLine( &quot;Displays the result of Intersect method :<br> &quot; );\n      Console::WriteLine( socketPermission1 );\n      \n      // Demand that the calling method have the requsite socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"dateClient_SocketPermission_Constructor#1\">\n        Dim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n        \n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement1 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement2 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39;\n        &#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement4 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement2.AddChild(securityElement3)\n        securityElement2.AddChild(securityElement4)\n        securityElement1.AddChild(securityElement2)\n        \n\n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n        socketPermission2.FromXml(securityElement1)\n        \n        Console.WriteLine(ControlChars.Cr + &quot;Displays the result of FromXml method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission2.ToString())\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n        \n        Console.WriteLine(&quot;Displays the result of AddPermission method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission3.ToString())\n        \n        &#39;Find the intersection between two &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission2.Intersect(socketPermission3), SocketPermission)\n        \n        Console.WriteLine(&quot;Displays the result of Intersect method :&quot; + ControlChars.Cr + &quot; &quot;)\n        Console.WriteLine(socketPermission1.ToString())\n        &#39;Demand that the calling method have the requsite socket permission.\n        socketPermission1.Demand()\n</code></pre><pre><code class=\"lang-cs\" name=\"dateClient_SocketPermission_Constructor#1\">\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement1 = socketPermission2.ToXml();\n\t\t// &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;ConnectAccess&quot;);\n\t\t// Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39;ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n\t\t// Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement4 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement2.AddChild(securityElement3);\n\t\tsecurityElement2.AddChild(securityElement4);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n\t\tsocketPermission2.FromXml(securityElement1);\n\n\t\tConsole.WriteLine(&quot;<br>Displays the result of FromXml method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission2.ToString());\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n\t   // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;Displays the result of AddPermission method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission3.ToString());\n\n\t   // Find the intersection between two &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission2.Intersect(socketPermission3);\n\n\t\tConsole.WriteLine(&quot;Displays the result of Intersect method :<br> &quot;);\n\t\tConsole.WriteLine(socketPermission1.ToString());\n\n\t\t// Demand that the calling method have the requsite socket permission.\n\t\tsocketPermission1.Demand();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_AllPorts\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllPorts</div>        \r\n          </div>\r\n    \r\n            <p>Defines a constant that represents all ports.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int AllPorts = -1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is read-only. The value of this field is -1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the AllPorts property to provide connection permissions to all of the resources ports.  </p>\n<pre><code class=\"lang-cpp\" name=\"DateClient_SocketPermission_Constructor#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement1 = socketPermission2-&gt;ToXml();\n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39;ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement4 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement2-&gt;AddChild( securityElement3 );\n      securityElement2-&gt;AddChild( securityElement4 );\n      securityElement1-&gt;AddChild( securityElement2 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement1 );\n\n      Console::WriteLine( &quot;<br>Displays the result of FromXml method : <br>&quot; );\n      Console::WriteLine( socketPermission2 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 =\n         gcnew SocketPermission( NetworkAccess::Connect,\n            TransportType::All,\n            &quot;192.168.144.238&quot;,\n            SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect,\n         TransportType::All,\n         &quot;192.168.144.239&quot;,\n         SocketPermission::AllPorts );\n\n      Console::WriteLine( &quot;Displays the result of AddPermission method : <br>&quot; );\n      Console::WriteLine( socketPermission3 );\n      \n      // Find the intersection between two &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission2-&gt;Intersect( socketPermission3 ));\n\n      Console::WriteLine( &quot;Displays the result of Intersect method :<br> &quot; );\n      Console::WriteLine( socketPermission1 );\n      \n      // Demand that the calling method have the requsite socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"DateClient_SocketPermission_Constructor#1\">\n        Dim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n        \n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement1 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement2 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39;\n        &#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement4 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement2.AddChild(securityElement3)\n        securityElement2.AddChild(securityElement4)\n        securityElement1.AddChild(securityElement2)\n        \n\n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n        socketPermission2.FromXml(securityElement1)\n        \n        Console.WriteLine(ControlChars.Cr + &quot;Displays the result of FromXml method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission2.ToString())\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n        \n        Console.WriteLine(&quot;Displays the result of AddPermission method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission3.ToString())\n        \n        &#39;Find the intersection between two &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission2.Intersect(socketPermission3), SocketPermission)\n        \n        Console.WriteLine(&quot;Displays the result of Intersect method :&quot; + ControlChars.Cr + &quot; &quot;)\n        Console.WriteLine(socketPermission1.ToString())\n        &#39;Demand that the calling method have the requsite socket permission.\n        socketPermission1.Demand()\n</code></pre><pre><code class=\"lang-cs\" name=\"DateClient_SocketPermission_Constructor#1\">\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement1 = socketPermission2.ToXml();\n\t\t// &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;ConnectAccess&quot;);\n\t\t// Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39;ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n\t\t// Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement4 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement2.AddChild(securityElement3);\n\t\tsecurityElement2.AddChild(securityElement4);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n\t\tsocketPermission2.FromXml(securityElement1);\n\n\t\tConsole.WriteLine(&quot;<br>Displays the result of FromXml method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission2.ToString());\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n\t   // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;Displays the result of AddPermission method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission3.ToString());\n\n\t   // Find the intersection between two &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission2.Intersect(socketPermission3);\n\n\t\tConsole.WriteLine(&quot;Displays the result of Intersect method :<br> &quot;);\n\t\tConsole.WriteLine(socketPermission1.ToString());\n\n\t\t// Demand that the calling method have the requsite socket permission.\n\t\tsocketPermission1.Demand();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_AcceptList\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_AcceptList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcceptList</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list of <a class=\"xref\" href=\"system.net.endpointpermission\" data-linktype=\"relative-path\">EndpointPermission</a> instances that identifies the endpoints that can be accepted under this permission instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator AcceptList { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An instance that implements the <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> interface that contains <a class=\"xref\" href=\"system.net.endpointpermission\" data-linktype=\"relative-path\">EndpointPermission</a> instances.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the AcceptList property to return a list of endpoints to which accept privileges are granted.  </p>\n<pre><code class=\"lang-cs\" name=\"SocketPermissionExample#2\">\n     // Creates a SocketPermission restricting access to and from all URIs.\n     SocketPermission mySocketPermission1 = new SocketPermission(PermissionState.None);\n\n     // The socket to which this permission will apply will allow connections from www.contoso.com.\n     mySocketPermission1.AddPermission(NetworkAccess.Accept, TransportType.Tcp, &quot;www.contoso.com&quot;, 11000);\n\n     // Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n     SocketPermission mySocketPermission2 =\n                                new SocketPermission(NetworkAccess.Connect, TransportType.Tcp, &quot;www.southridgevideo.com&quot;, 11002);\n\n     // Creates a SocketPermission from the union of two SocketPermissions.\n     SocketPermission mySocketPermissionUnion = \n                                (SocketPermission)mySocketPermission1.Union(mySocketPermission2);\n\n     // Checks to see if the union was successfully created by using the IsSubsetOf method.\n     if (mySocketPermission1.IsSubsetOf(mySocketPermissionUnion) &amp;&amp; \n     \t   mySocketPermission2.IsSubsetOf(mySocketPermissionUnion)){\n          Console.WriteLine(&quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot;); \n\n          // Prints the allowable accept URIs to the console.\n          Console.WriteLine(&quot;This union accepts connections on :&quot;);\n\n          IEnumerator myEnumerator = mySocketPermissionUnion.AcceptList;\n\t   while (myEnumerator.MoveNext()) {\n               Console.WriteLine(((EndpointPermission)myEnumerator.Current).ToString());\n\t        }      \n\n             // Prints the allowable connect URIs to the console.\n          Console.WriteLine(&quot;This union permits connections to :&quot;);\n\n          myEnumerator = mySocketPermissionUnion.ConnectList;\n\t   while (myEnumerator.MoveNext()) {\n               Console.WriteLine(((EndpointPermission)myEnumerator.Current).ToString());\n\t        }      \n\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"SocketPermissionExample#2\">      &#39; Creates a SocketPermission restricting access to and from all URIs.\n      Dim mySocketPermission1 As New SocketPermission(PermissionState.None)\n      \n      &#39; The socket to which this permission will apply will allow connections from www.contoso.com.\n      mySocketPermission1.AddPermission(NetworkAccess.Accept, TransportType.Tcp, &quot;www.contoso.com&quot;, 11000)\n      \n      &#39; Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n      Dim mySocketPermission2 As New SocketPermission(NetworkAccess.Connect, TransportType.Tcp, &quot;www.southridgevideo.com&quot;, 11002)\n      \n      &#39; Creates a SocketPermission from the union of two SocketPermissions.\n      Dim mySocketPermissionUnion As SocketPermission = CType(mySocketPermission1.Union(mySocketPermission2), SocketPermission)\n      \n      &#39; Checks to see if the union was successfully created by using the IsSubsetOf method.\n      If mySocketPermission1.IsSubsetOf(mySocketPermissionUnion) And mySocketPermission2.IsSubsetOf(mySocketPermissionUnion) Then\n         Console.WriteLine(&quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot;)\n         \n         &#39; Prints the allowable accept URIs to the console.\n         Console.WriteLine(&quot;This union accepts connections on :&quot;)\n         \n         Dim myEnumerator As IEnumerator = mySocketPermissionUnion.AcceptList\n         While myEnumerator.MoveNext()\n            Console.WriteLine(CType(myEnumerator.Current, EndpointPermission).ToString())\n         End While\n         \n         Console.WriteLine(&quot;This union establishes connections on : &quot;)\n         \n         &#39; Prints the allowable connect URIs to the console.\n         Console.WriteLine(&quot;This union permits connections to :&quot;)\n         \n         myEnumerator = mySocketPermissionUnion.ConnectList\n         While myEnumerator.MoveNext()\n            Console.WriteLine(CType(myEnumerator.Current, EndpointPermission).ToString())\n         End While\n      End If \n</code></pre><pre><code class=\"lang-cpp\" name=\"SocketPermissionExample#2\">   // Creates a SocketPermission restricting access to and from all URIs.\n   SocketPermission^ mySocketPermission1 = gcnew SocketPermission( PermissionState::None );\n   \n   // The socket to which this permission will apply will allow connections from www.contoso.com.\n   mySocketPermission1-&gt;AddPermission( NetworkAccess::Accept, TransportType::Tcp,  &quot;www.contoso.com&quot;, 11000 );\n   \n   // Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n   SocketPermission^ mySocketPermission2 = gcnew SocketPermission( NetworkAccess::Connect,TransportType::Tcp, &quot;www.southridgevideo.com&quot;,11002 );\n   \n   // Creates a SocketPermission from the union of two SocketPermissions.\n   SocketPermission^ mySocketPermissionUnion =\n      (SocketPermission^)( mySocketPermission1-&gt;Union( mySocketPermission2 ) );\n   \n   // Checks to see if the union was successfully created by using the IsSubsetOf method.\n   if ( mySocketPermission1-&gt;IsSubsetOf( mySocketPermissionUnion ) &amp;&amp;\n      mySocketPermission2-&gt;IsSubsetOf( mySocketPermissionUnion ) )\n   {\n      Console::WriteLine(  &quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot; );\n      \n      // Prints the allowable accept URIs to the console.\n      Console::WriteLine(  &quot;This union accepts connections on :&quot; );\n\n      IEnumerator^ myEnumerator = mySocketPermissionUnion-&gt;AcceptList;\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( safe_cast&lt;EndpointPermission^&gt;( myEnumerator-&gt;Current )-&gt;ToString() );\n      }\n      \n      // Prints the allowable connect URIs to the console.\n      Console::WriteLine(  &quot;This union permits connections to :&quot; );\n\n      myEnumerator = mySocketPermissionUnion-&gt;ConnectList;\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( safe_cast&lt;EndpointPermission^&gt;( myEnumerator-&gt;Current )-&gt;ToString() );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_ConnectList\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_ConnectList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConnectList</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list of <a class=\"xref\" href=\"system.net.endpointpermission\" data-linktype=\"relative-path\">EndpointPermission</a> instances that identifies the endpoints that can be connected to under this permission instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator ConnectList { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An instance that implements the <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> interface that contains <a class=\"xref\" href=\"system.net.endpointpermission\" data-linktype=\"relative-path\">EndpointPermission</a> instances.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ConnectList property to return a list of endpoints to which connection privileges are granted.  </p>\n<pre><code class=\"lang-cs\" name=\"dateClient_SocketPermission_ToXml#1\">using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Collections;\nusing System.Security;\nusing System.Security.Permissions;\n\npublic class DateClient {\n\n\tprivate Socket serverSocket;\n\tprivate Encoding asciiEncoding; \n\tprivate IPAddress serverAddress;\n\n\tprivate int serverPort;\n\n\t// The constructor takes the address and port of the remote server.\n\tpublic DateClient(IPAddress serverIpAddress, int port) {\n\t\tserverAddress = serverIpAddress;\n\t\tserverPort = port;\n\t\tserverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n\t\tasciiEncoding = Encoding.ASCII;\n\t}\n\n\t// Print a security element and all its children, in a depth-first manner.\n\tprivate void PrintSecurityElement(SecurityElement securityElementObj, int depth) {\n\n\t\tConsole.WriteLine(&quot;Depth    : {0}&quot;, depth);\n\t\tConsole.WriteLine(&quot;Tag      : {0}&quot;, securityElementObj.Tag);\n\t\tConsole.WriteLine(&quot;Text     : {0}&quot;, securityElementObj.Text);\n\t\tif(securityElementObj.Children != null)\n\t\t\tConsole.WriteLine(&quot;Children : {0}&quot;, securityElementObj.Children.Count);\n\n\t\tif(securityElementObj.Attributes != null) {\n\t\t\tIEnumerator attributeEnumerator = securityElementObj.Attributes.GetEnumerator();\n\t\t\twhile(attributeEnumerator.MoveNext())\n\t\t\tConsole.WriteLine(&quot;Attribute - \\&quot;{0}\\&quot; , Value - \\&quot;{1}\\&quot;&quot;, ((IDictionaryEnumerator)attributeEnumerator).Key, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((IDictionaryEnumerator)attributeEnumerator).Value); \n\t\t}\n\n\t\tConsole.WriteLine(&quot;&quot;);\n\n\t\tif(securityElementObj.Children != null) {\n\t\t\tdepth += 1;\n\t\t\tfor(int i = 0; i &lt; securityElementObj.Children.Count; i++) \n\t\t\t\tPrintSecurityElement((SecurityElement)(securityElementObj.Children[i]), depth);\n\t\t}\n\t}\n\n\tpublic String GetDate() \n\t{\n\n\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement4 = socketPermission2.ToXml();\n      // &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement1 = new SecurityElement(&quot;ConnectAccess&quot;);\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\tsecurityElement1.AddChild(securityElement3);\n\t\tsecurityElement4.AddChild(securityElement1);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\t\n\t\tsocketPermission2.FromXml(securityElement4);\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;<br>Checks the Socket permissions using IsUnrestricted method : &quot;);\n\t\tif(socketPermission1.IsUnrestricted())\n\t\t\tConsole.WriteLine(&quot;Socket permission is unrestricted&quot;);\n\t\telse\n\t\t\tConsole.WriteLine(&quot;Socket permission is restricted&quot;);\n\n\t\tConsole.WriteLine();\n\n\t\tConsole.WriteLine(&quot;Display result of ConnectList property : <br>&quot;);\n\t\tIEnumerator enumerator = socketPermission3.ConnectList;\n\t\twhile(enumerator.MoveNext()) {\n\t\t\tConsole.WriteLine(&quot;The hostname is       : {0}&quot;, ((EndpointPermission)enumerator.Current).Hostname);\n\t\t\tConsole.WriteLine(&quot;The port is           : {0}&quot;, ((EndpointPermission)enumerator.Current).Port);\n\t\t\tConsole.WriteLine(&quot;The Transport type is : {0}&quot;, ((EndpointPermission)enumerator.Current).Transport);\n\t\t}\n\t\tConsole.WriteLine(&quot;&quot;);\n\n\t\tConsole.WriteLine(&quot;Display Security Elements :<br> &quot;);\n\t\tPrintSecurityElement(socketPermission2.ToXml(), 0);\n\n\t\t// Get a &#39;SocketPermission&#39; object which is a union of two other &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission3.Union(socketPermission2);\n\n\t\t// Demand that the calling method have the socket permission.\n\t\tsocketPermission1.Demand();\n\n\t\t// Get the current date from the remote date server.\n\t\ttry {\n\t\t\tint bytesReceived;\t\t\n\t\t\tbyte[] getByte = new byte[100];\n\t\t\tserverSocket.Connect(new IPEndPoint( serverAddress, serverPort));\n\t\t\tbytesReceived = serverSocket.Receive( getByte, getByte.Length, 0 );\n\t\t\treturn asciiEncoding.GetString( getByte, 0, bytesReceived );\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;<br>Exception raised : {0}&quot;, e.Message);\n\t\t\treturn &quot;&quot;;\n\t\t}\n\t}\n};\n</code></pre><pre><code class=\"lang-cpp\" name=\"dateClient_SocketPermission_ToXml#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement4 = socketPermission2-&gt;ToXml();\n      \n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement1 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      \n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement1-&gt;AddChild( securityElement2 );\n      securityElement1-&gt;AddChild( securityElement3 );\n      securityElement4-&gt;AddChild( securityElement1 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement4 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 = gcnew SocketPermission( NetworkAccess::Connect,TransportType::All,&quot;192.168.144.238&quot;,SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect, TransportType::All, &quot;192.168.144.239&quot;, SocketPermission::AllPorts );\n      Console::WriteLine( &quot;<br>Checks the Socket permissions using IsUnrestricted method : &quot; );\n      if ( socketPermission1-&gt;IsUnrestricted() )\n            Console::WriteLine( &quot;Socket permission is unrestricted&quot; );\n      else\n            Console::WriteLine( &quot;Socket permission is restricted&quot; );\n\n      Console::WriteLine();\n      Console::WriteLine( &quot;Display result of ConnectList property : <br>&quot; );\n      IEnumerator^ enumerator = socketPermission3-&gt;ConnectList;\n      while ( enumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;The hostname is       : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Hostname );\n         Console::WriteLine( &quot;The port is           : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Port );\n         Console::WriteLine( &quot;The Transport type is : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Transport );\n      }\n\n      Console::WriteLine( &quot;&quot; );\n      Console::WriteLine( &quot;Display Security Elements :<br> &quot; );\n      PrintSecurityElement( socketPermission2-&gt;ToXml(), 0 );\n      \n      // Get a &#39;SocketPermission&#39; Object* which is a union of two other &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission3-&gt;Union( socketPermission2 ));\n      \n      // Demand that the calling method have the socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"dateClient_SocketPermission_ToXml#1\">\n\tDim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n\t\n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement4 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement1 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement2 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement1.AddChild(securityElement2)\n        securityElement1.AddChild(securityElement3)\n        securityElement4.AddChild(securityElement1)\n        \n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\t\n        socketPermission2.FromXml(securityElement4)\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n\n        Console.WriteLine(ControlChars.Cr + &quot;Checks the Socket permissions using IsUnrestricted method : &quot;)\n        If socketPermission1.IsUnrestricted() Then\n            Console.WriteLine(&quot;Socket permission is unrestricted&quot;)\n        Else\n            Console.WriteLine(&quot;Socket permission is restricted&quot;)\n        End If \n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;Display result of ConnectList property : &quot; + ControlChars.Cr)\n        Dim enumerator As IEnumerator = socketPermission3.ConnectList\n        While enumerator.MoveNext()\n            Console.WriteLine(&quot;The hostname is       : {0}&quot;, CType(enumerator.Current, EndpointPermission).Hostname)\n            Console.WriteLine(&quot;The port is           : {0}&quot;, CType(enumerator.Current, EndpointPermission).Port)\n            Console.WriteLine(&quot;The Transport type is : {0}&quot;, CType(enumerator.Current, EndpointPermission).Transport)\n        End While\n        \n        Console.WriteLine(&quot;&quot;)\n        \n        Console.WriteLine(&quot;Display Security Elements :&quot; + ControlChars.Cr + &quot; &quot;)\n        PrintSecurityElement(socketPermission2.ToXml(), 0)\n        \n        &#39;Get a &#39;SocketPermission&#39; object which is a union of two other &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission3.Union(socketPermission2), SocketPermission)\n        \n        &#39;Demand that the calling method have the socket permission.\n        socketPermission1.Demand()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_AddPermission_System_Net_NetworkAccess_System_Net_TransportType_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_AddPermission_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddPermission(NetworkAccess,TransportType,String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a permission to the set of permissions for a transport address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddPermission (System.Net.NetworkAccess access, System.Net.TransportType transport, string hostName, int portNumber);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkaccess\" data-linktype=\"relative-path\">NetworkAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.networkaccess\" data-linktype=\"relative-path\">NetworkAccess</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transport</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.transporttype\" data-linktype=\"relative-path\">TransportType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.transporttype\" data-linktype=\"relative-path\">TransportType</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The host name for the transport address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>portNumber</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The port number for the transport address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>hostName</code> can be a DNS name, an IP address, or a specified IP subnet, such as 192.168.1.*.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the AddPermission method to add connection permissions to the specified host.  </p>\n<pre><code class=\"lang-cpp\" name=\"dateClient_SocketPermission_Constructor#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement1 = socketPermission2-&gt;ToXml();\n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39;ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement4 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement2-&gt;AddChild( securityElement3 );\n      securityElement2-&gt;AddChild( securityElement4 );\n      securityElement1-&gt;AddChild( securityElement2 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement1 );\n\n      Console::WriteLine( &quot;<br>Displays the result of FromXml method : <br>&quot; );\n      Console::WriteLine( socketPermission2 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 =\n         gcnew SocketPermission( NetworkAccess::Connect,\n            TransportType::All,\n            &quot;192.168.144.238&quot;,\n            SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect,\n         TransportType::All,\n         &quot;192.168.144.239&quot;,\n         SocketPermission::AllPorts );\n\n      Console::WriteLine( &quot;Displays the result of AddPermission method : <br>&quot; );\n      Console::WriteLine( socketPermission3 );\n      \n      // Find the intersection between two &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission2-&gt;Intersect( socketPermission3 ));\n\n      Console::WriteLine( &quot;Displays the result of Intersect method :<br> &quot; );\n      Console::WriteLine( socketPermission1 );\n      \n      // Demand that the calling method have the requsite socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"dateClient_SocketPermission_Constructor#1\">\n        Dim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n        \n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement1 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement2 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39;\n        &#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement4 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement2.AddChild(securityElement3)\n        securityElement2.AddChild(securityElement4)\n        securityElement1.AddChild(securityElement2)\n        \n\n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n        socketPermission2.FromXml(securityElement1)\n        \n        Console.WriteLine(ControlChars.Cr + &quot;Displays the result of FromXml method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission2.ToString())\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n        \n        Console.WriteLine(&quot;Displays the result of AddPermission method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission3.ToString())\n        \n        &#39;Find the intersection between two &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission2.Intersect(socketPermission3), SocketPermission)\n        \n        Console.WriteLine(&quot;Displays the result of Intersect method :&quot; + ControlChars.Cr + &quot; &quot;)\n        Console.WriteLine(socketPermission1.ToString())\n        &#39;Demand that the calling method have the requsite socket permission.\n        socketPermission1.Demand()\n</code></pre><pre><code class=\"lang-cs\" name=\"dateClient_SocketPermission_Constructor#1\">\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement1 = socketPermission2.ToXml();\n\t\t// &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;ConnectAccess&quot;);\n\t\t// Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39;ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n\t\t// Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement4 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement2.AddChild(securityElement3);\n\t\tsecurityElement2.AddChild(securityElement4);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n\t\tsocketPermission2.FromXml(securityElement1);\n\n\t\tConsole.WriteLine(&quot;<br>Displays the result of FromXml method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission2.ToString());\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n\t   // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;Displays the result of AddPermission method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission3.ToString());\n\n\t   // Find the intersection between two &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission2.Intersect(socketPermission3);\n\n\t\tConsole.WriteLine(&quot;Displays the result of Intersect method :<br> &quot;);\n\t\tConsole.WriteLine(socketPermission1.ToString());\n\n\t\t// Demand that the calling method have the requsite socket permission.\n\t\tsocketPermission1.Demand();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_Copy\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a copy of a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new instance of the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> class that is a copy of the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The object returned by this method represents the same level of access as the current instance. This method overrides <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Copy_\" data-linktype=\"relative-path\">Copy</a> and is implemented to support the <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> by taking a copy of an existing <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"SocketPermissionExample#4\">// Creates a copy of the intersect SocketPermission.\n     SocketPermission mySocketPermissionIntersectCopy = \n                               (SocketPermission)mySocketPermissionIntersect.Copy();\n\n     if (mySocketPermissionIntersectCopy.Equals(mySocketPermissionIntersect)){\n     Console.WriteLine(&quot;Copy successfull&quot;);\n     }\n</code></pre><pre><code class=\"lang-vb\" name=\"SocketPermissionExample#4\">      &#39; Creates a copy of the intersect SocketPermission.\n      Dim mySocketPermissionIntersectCopy As SocketPermission = CType(mySocketPermissionIntersect.Copy(), SocketPermission)\n      \n      If mySocketPermissionIntersectCopy.Equals(mySocketPermissionIntersect) Then\n         Console.WriteLine(&quot;Copy successfull&quot;)\n      End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"SocketPermissionExample#4\">   // Creates a copy of the intersect SocketPermission.\n   SocketPermission^ mySocketPermissionIntersectCopy =\n      (SocketPermission^)( mySocketPermissionIntersect-&gt;Copy() );\n   if ( mySocketPermissionIntersectCopy-&gt;Equals( mySocketPermissionIntersect ) )\n   {\n      Console::WriteLine(  &quot;Copy successfull&quot; );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_FromXml_System_Security_SecurityElement_\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_FromXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXml(SecurityElement)</div>        \r\n          </div>\r\n    \r\n            <p>Reconstructs a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance for an XML encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void FromXml (System.Security.SecurityElement securityElement);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityElement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML encoding used to reconstruct the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>securityElement</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>securityElement</code> is not a permission element for this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FromXml method reconstructs a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance from an XML encoding defined by the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.socketpermission#System_Net_SocketPermission_ToXml_\" data-linktype=\"relative-path\">ToXml</a> method to encode the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance, including state information, in XML.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the FromXml method to convert XML encoded data to a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"dateClient_SocketPermission_Constructor#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement1 = socketPermission2-&gt;ToXml();\n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39;ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement4 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement2-&gt;AddChild( securityElement3 );\n      securityElement2-&gt;AddChild( securityElement4 );\n      securityElement1-&gt;AddChild( securityElement2 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement1 );\n\n      Console::WriteLine( &quot;<br>Displays the result of FromXml method : <br>&quot; );\n      Console::WriteLine( socketPermission2 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 =\n         gcnew SocketPermission( NetworkAccess::Connect,\n            TransportType::All,\n            &quot;192.168.144.238&quot;,\n            SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect,\n         TransportType::All,\n         &quot;192.168.144.239&quot;,\n         SocketPermission::AllPorts );\n\n      Console::WriteLine( &quot;Displays the result of AddPermission method : <br>&quot; );\n      Console::WriteLine( socketPermission3 );\n      \n      // Find the intersection between two &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission2-&gt;Intersect( socketPermission3 ));\n\n      Console::WriteLine( &quot;Displays the result of Intersect method :<br> &quot; );\n      Console::WriteLine( socketPermission1 );\n      \n      // Demand that the calling method have the requsite socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"dateClient_SocketPermission_Constructor#1\">\n        Dim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n        \n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement1 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement2 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39;\n        &#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement4 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement2.AddChild(securityElement3)\n        securityElement2.AddChild(securityElement4)\n        securityElement1.AddChild(securityElement2)\n        \n\n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n        socketPermission2.FromXml(securityElement1)\n        \n        Console.WriteLine(ControlChars.Cr + &quot;Displays the result of FromXml method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission2.ToString())\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n        \n        Console.WriteLine(&quot;Displays the result of AddPermission method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission3.ToString())\n        \n        &#39;Find the intersection between two &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission2.Intersect(socketPermission3), SocketPermission)\n        \n        Console.WriteLine(&quot;Displays the result of Intersect method :&quot; + ControlChars.Cr + &quot; &quot;)\n        Console.WriteLine(socketPermission1.ToString())\n        &#39;Demand that the calling method have the requsite socket permission.\n        socketPermission1.Demand()\n</code></pre><pre><code class=\"lang-cs\" name=\"dateClient_SocketPermission_Constructor#1\">\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement1 = socketPermission2.ToXml();\n\t\t// &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;ConnectAccess&quot;);\n\t\t// Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39;ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n\t\t// Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement4 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement2.AddChild(securityElement3);\n\t\tsecurityElement2.AddChild(securityElement4);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n\t\tsocketPermission2.FromXml(securityElement1);\n\n\t\tConsole.WriteLine(&quot;<br>Displays the result of FromXml method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission2.ToString());\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n\t   // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;Displays the result of AddPermission method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission3.ToString());\n\n\t   // Find the intersection between two &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission2.Intersect(socketPermission3);\n\n\t\tConsole.WriteLine(&quot;Displays the result of Intersect method :<br> &quot;);\n\t\tConsole.WriteLine(socketPermission1.ToString());\n\n\t\t// Demand that the calling method have the requsite socket permission.\n\t\tsocketPermission1.Demand();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_Intersect_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_Intersect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the logical intersection between two <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instances.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Intersect (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance to intersect with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance that represents the intersection of two <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instances. If the intersection is empty, the method returns <code>null</code>. If the <code>target</code> parameter is a null reference, the method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> is not granted to the method caller.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The intersection of two permissions is a permission that helps to protect the resources and operations protected by both permissions. Specifically, it represents the minimum permission such that any demand that passes both permissions also passes their intersection. This method overrides <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Intersect_\" data-linktype=\"relative-path\">Intersect</a> and is implemented to support the <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Intersect method to obtain a logical intersection between two <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instances.  </p>\n<pre><code class=\"lang-cpp\" name=\"DateClient_SocketPermission_Constructor#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement1 = socketPermission2-&gt;ToXml();\n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39;ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and\n      // for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement4 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement2-&gt;AddChild( securityElement3 );\n      securityElement2-&gt;AddChild( securityElement4 );\n      securityElement1-&gt;AddChild( securityElement2 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement1 );\n\n      Console::WriteLine( &quot;<br>Displays the result of FromXml method : <br>&quot; );\n      Console::WriteLine( socketPermission2 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 =\n         gcnew SocketPermission( NetworkAccess::Connect,\n            TransportType::All,\n            &quot;192.168.144.238&quot;,\n            SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect,\n         TransportType::All,\n         &quot;192.168.144.239&quot;,\n         SocketPermission::AllPorts );\n\n      Console::WriteLine( &quot;Displays the result of AddPermission method : <br>&quot; );\n      Console::WriteLine( socketPermission3 );\n      \n      // Find the intersection between two &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission2-&gt;Intersect( socketPermission3 ));\n\n      Console::WriteLine( &quot;Displays the result of Intersect method :<br> &quot; );\n      Console::WriteLine( socketPermission1 );\n      \n      // Demand that the calling method have the requsite socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"DateClient_SocketPermission_Constructor#1\">\n        Dim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n        \n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement1 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement2 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39;\n        &#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement4 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement2.AddChild(securityElement3)\n        securityElement2.AddChild(securityElement4)\n        securityElement1.AddChild(securityElement2)\n        \n\n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n        socketPermission2.FromXml(securityElement1)\n        \n        Console.WriteLine(ControlChars.Cr + &quot;Displays the result of FromXml method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission2.ToString())\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n        \n        Console.WriteLine(&quot;Displays the result of AddPermission method : &quot; + ControlChars.Cr)\n        Console.WriteLine(socketPermission3.ToString())\n        \n        &#39;Find the intersection between two &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission2.Intersect(socketPermission3), SocketPermission)\n        \n        Console.WriteLine(&quot;Displays the result of Intersect method :&quot; + ControlChars.Cr + &quot; &quot;)\n        Console.WriteLine(socketPermission1.ToString())\n        &#39;Demand that the calling method have the requsite socket permission.\n        socketPermission1.Demand()\n</code></pre><pre><code class=\"lang-cs\" name=\"DateClient_SocketPermission_Constructor#1\">\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement1 = socketPermission2.ToXml();\n\t\t// &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;ConnectAccess&quot;);\n\t\t// Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39;ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n\t\t// Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and \n      // for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement4 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement2.AddChild(securityElement3);\n\t\tsecurityElement2.AddChild(securityElement4);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\n\t\tsocketPermission2.FromXml(securityElement1);\n\n\t\tConsole.WriteLine(&quot;<br>Displays the result of FromXml method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission2.ToString());\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n\t   // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;Displays the result of AddPermission method : <br>&quot;);\n\t\tConsole.WriteLine(socketPermission3.ToString());\n\n\t   // Find the intersection between two &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission2.Intersect(socketPermission3);\n\n\t\tConsole.WriteLine(&quot;Displays the result of Intersect method :<br> &quot;);\n\t\tConsole.WriteLine(socketPermission1.ToString());\n\n\t\t// Demand that the calling method have the requsite socket permission.\n\t\tsocketPermission1.Demand();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_IsSubsetOf_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_IsSubsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubsetOf(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Determines if the current permission is a subset of the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSubsetOf (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> that is to be tested for the subset relationship.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>If <code>target</code> is <code>null</code>, this method returns <code>true</code> if the current instance defines no permissions; otherwise, <code>false</code>. If <code>target</code> is not <code>null</code>, this method returns <code>true</code> if the current instance defines a subset of <code>target</code> permissions; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is not a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> is not granted to the method caller.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.  </p>\n<p> For example, a permission that represents access to 192.168.1.1:80 is a subset of a permission that represents access to 192.168.1.1:Any. If this method returns <code>true</code>, the current permission represents no more access to the protected resource than does the specified permission.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the IsSubsetOf method to determine if one <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> is the subset of another.  </p>\n<pre><code class=\"lang-cs\" name=\"SocketPermissionExample#2\">\n     // Creates a SocketPermission restricting access to and from all URIs.\n     SocketPermission mySocketPermission1 = new SocketPermission(PermissionState.None);\n\n     // The socket to which this permission will apply will allow connections from www.contoso.com.\n     mySocketPermission1.AddPermission(NetworkAccess.Accept, TransportType.Tcp, &quot;www.contoso.com&quot;, 11000);\n\n     // Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n     SocketPermission mySocketPermission2 =\n                                new SocketPermission(NetworkAccess.Connect, TransportType.Tcp, &quot;www.southridgevideo.com&quot;, 11002);\n\n     // Creates a SocketPermission from the union of two SocketPermissions.\n     SocketPermission mySocketPermissionUnion = \n                                (SocketPermission)mySocketPermission1.Union(mySocketPermission2);\n\n     // Checks to see if the union was successfully created by using the IsSubsetOf method.\n     if (mySocketPermission1.IsSubsetOf(mySocketPermissionUnion) &amp;&amp; \n     \t   mySocketPermission2.IsSubsetOf(mySocketPermissionUnion)){\n          Console.WriteLine(&quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot;); \n\n          // Prints the allowable accept URIs to the console.\n          Console.WriteLine(&quot;This union accepts connections on :&quot;);\n\n          IEnumerator myEnumerator = mySocketPermissionUnion.AcceptList;\n\t   while (myEnumerator.MoveNext()) {\n               Console.WriteLine(((EndpointPermission)myEnumerator.Current).ToString());\n\t        }      \n\n             // Prints the allowable connect URIs to the console.\n          Console.WriteLine(&quot;This union permits connections to :&quot;);\n\n          myEnumerator = mySocketPermissionUnion.ConnectList;\n\t   while (myEnumerator.MoveNext()) {\n               Console.WriteLine(((EndpointPermission)myEnumerator.Current).ToString());\n\t        }      \n\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"SocketPermissionExample#2\">      &#39; Creates a SocketPermission restricting access to and from all URIs.\n      Dim mySocketPermission1 As New SocketPermission(PermissionState.None)\n      \n      &#39; The socket to which this permission will apply will allow connections from www.contoso.com.\n      mySocketPermission1.AddPermission(NetworkAccess.Accept, TransportType.Tcp, &quot;www.contoso.com&quot;, 11000)\n      \n      &#39; Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n      Dim mySocketPermission2 As New SocketPermission(NetworkAccess.Connect, TransportType.Tcp, &quot;www.southridgevideo.com&quot;, 11002)\n      \n      &#39; Creates a SocketPermission from the union of two SocketPermissions.\n      Dim mySocketPermissionUnion As SocketPermission = CType(mySocketPermission1.Union(mySocketPermission2), SocketPermission)\n      \n      &#39; Checks to see if the union was successfully created by using the IsSubsetOf method.\n      If mySocketPermission1.IsSubsetOf(mySocketPermissionUnion) And mySocketPermission2.IsSubsetOf(mySocketPermissionUnion) Then\n         Console.WriteLine(&quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot;)\n         \n         &#39; Prints the allowable accept URIs to the console.\n         Console.WriteLine(&quot;This union accepts connections on :&quot;)\n         \n         Dim myEnumerator As IEnumerator = mySocketPermissionUnion.AcceptList\n         While myEnumerator.MoveNext()\n            Console.WriteLine(CType(myEnumerator.Current, EndpointPermission).ToString())\n         End While\n         \n         Console.WriteLine(&quot;This union establishes connections on : &quot;)\n         \n         &#39; Prints the allowable connect URIs to the console.\n         Console.WriteLine(&quot;This union permits connections to :&quot;)\n         \n         myEnumerator = mySocketPermissionUnion.ConnectList\n         While myEnumerator.MoveNext()\n            Console.WriteLine(CType(myEnumerator.Current, EndpointPermission).ToString())\n         End While\n      End If \n</code></pre><pre><code class=\"lang-cpp\" name=\"SocketPermissionExample#2\">   // Creates a SocketPermission restricting access to and from all URIs.\n   SocketPermission^ mySocketPermission1 = gcnew SocketPermission( PermissionState::None );\n   \n   // The socket to which this permission will apply will allow connections from www.contoso.com.\n   mySocketPermission1-&gt;AddPermission( NetworkAccess::Accept, TransportType::Tcp,  &quot;www.contoso.com&quot;, 11000 );\n   \n   // Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n   SocketPermission^ mySocketPermission2 = gcnew SocketPermission( NetworkAccess::Connect,TransportType::Tcp, &quot;www.southridgevideo.com&quot;,11002 );\n   \n   // Creates a SocketPermission from the union of two SocketPermissions.\n   SocketPermission^ mySocketPermissionUnion =\n      (SocketPermission^)( mySocketPermission1-&gt;Union( mySocketPermission2 ) );\n   \n   // Checks to see if the union was successfully created by using the IsSubsetOf method.\n   if ( mySocketPermission1-&gt;IsSubsetOf( mySocketPermissionUnion ) &amp;&amp;\n      mySocketPermission2-&gt;IsSubsetOf( mySocketPermissionUnion ) )\n   {\n      Console::WriteLine(  &quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot; );\n      \n      // Prints the allowable accept URIs to the console.\n      Console::WriteLine(  &quot;This union accepts connections on :&quot; );\n\n      IEnumerator^ myEnumerator = mySocketPermissionUnion-&gt;AcceptList;\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( safe_cast&lt;EndpointPermission^&gt;( myEnumerator-&gt;Current )-&gt;ToString() );\n      }\n      \n      // Prints the allowable connect URIs to the console.\n      Console::WriteLine(  &quot;This union permits connections to :&quot; );\n\n      myEnumerator = mySocketPermissionUnion-&gt;ConnectList;\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( safe_cast&lt;EndpointPermission^&gt;( myEnumerator-&gt;Current )-&gt;ToString() );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_IsUnrestricted\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_IsUnrestricted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUnrestricted()</div>        \r\n          </div>\r\n    \r\n            <p>Checks the overall permission state of the object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsUnrestricted ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance is created with the <code>Unrestricted</code> value from <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the IsUnrestricted property to determine if the specified <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> has any restrictions.  </p>\n<pre><code class=\"lang-cs\" name=\"dateClient_SocketPermission_ToXml#1\">using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Collections;\nusing System.Security;\nusing System.Security.Permissions;\n\npublic class DateClient {\n\n\tprivate Socket serverSocket;\n\tprivate Encoding asciiEncoding; \n\tprivate IPAddress serverAddress;\n\n\tprivate int serverPort;\n\n\t// The constructor takes the address and port of the remote server.\n\tpublic DateClient(IPAddress serverIpAddress, int port) {\n\t\tserverAddress = serverIpAddress;\n\t\tserverPort = port;\n\t\tserverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n\t\tasciiEncoding = Encoding.ASCII;\n\t}\n\n\t// Print a security element and all its children, in a depth-first manner.\n\tprivate void PrintSecurityElement(SecurityElement securityElementObj, int depth) {\n\n\t\tConsole.WriteLine(&quot;Depth    : {0}&quot;, depth);\n\t\tConsole.WriteLine(&quot;Tag      : {0}&quot;, securityElementObj.Tag);\n\t\tConsole.WriteLine(&quot;Text     : {0}&quot;, securityElementObj.Text);\n\t\tif(securityElementObj.Children != null)\n\t\t\tConsole.WriteLine(&quot;Children : {0}&quot;, securityElementObj.Children.Count);\n\n\t\tif(securityElementObj.Attributes != null) {\n\t\t\tIEnumerator attributeEnumerator = securityElementObj.Attributes.GetEnumerator();\n\t\t\twhile(attributeEnumerator.MoveNext())\n\t\t\tConsole.WriteLine(&quot;Attribute - \\&quot;{0}\\&quot; , Value - \\&quot;{1}\\&quot;&quot;, ((IDictionaryEnumerator)attributeEnumerator).Key, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((IDictionaryEnumerator)attributeEnumerator).Value); \n\t\t}\n\n\t\tConsole.WriteLine(&quot;&quot;);\n\n\t\tif(securityElementObj.Children != null) {\n\t\t\tdepth += 1;\n\t\t\tfor(int i = 0; i &lt; securityElementObj.Children.Count; i++) \n\t\t\t\tPrintSecurityElement((SecurityElement)(securityElementObj.Children[i]), depth);\n\t\t}\n\t}\n\n\tpublic String GetDate() \n\t{\n\n\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement4 = socketPermission2.ToXml();\n      // &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement1 = new SecurityElement(&quot;ConnectAccess&quot;);\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\tsecurityElement1.AddChild(securityElement3);\n\t\tsecurityElement4.AddChild(securityElement1);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\t\n\t\tsocketPermission2.FromXml(securityElement4);\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;<br>Checks the Socket permissions using IsUnrestricted method : &quot;);\n\t\tif(socketPermission1.IsUnrestricted())\n\t\t\tConsole.WriteLine(&quot;Socket permission is unrestricted&quot;);\n\t\telse\n\t\t\tConsole.WriteLine(&quot;Socket permission is restricted&quot;);\n\n\t\tConsole.WriteLine();\n\n\t\tConsole.WriteLine(&quot;Display result of ConnectList property : <br>&quot;);\n\t\tIEnumerator enumerator = socketPermission3.ConnectList;\n\t\twhile(enumerator.MoveNext()) {\n\t\t\tConsole.WriteLine(&quot;The hostname is       : {0}&quot;, ((EndpointPermission)enumerator.Current).Hostname);\n\t\t\tConsole.WriteLine(&quot;The port is           : {0}&quot;, ((EndpointPermission)enumerator.Current).Port);\n\t\t\tConsole.WriteLine(&quot;The Transport type is : {0}&quot;, ((EndpointPermission)enumerator.Current).Transport);\n\t\t}\n\t\tConsole.WriteLine(&quot;&quot;);\n\n\t\tConsole.WriteLine(&quot;Display Security Elements :<br> &quot;);\n\t\tPrintSecurityElement(socketPermission2.ToXml(), 0);\n\n\t\t// Get a &#39;SocketPermission&#39; object which is a union of two other &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission3.Union(socketPermission2);\n\n\t\t// Demand that the calling method have the socket permission.\n\t\tsocketPermission1.Demand();\n\n\t\t// Get the current date from the remote date server.\n\t\ttry {\n\t\t\tint bytesReceived;\t\t\n\t\t\tbyte[] getByte = new byte[100];\n\t\t\tserverSocket.Connect(new IPEndPoint( serverAddress, serverPort));\n\t\t\tbytesReceived = serverSocket.Receive( getByte, getByte.Length, 0 );\n\t\t\treturn asciiEncoding.GetString( getByte, 0, bytesReceived );\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;<br>Exception raised : {0}&quot;, e.Message);\n\t\t\treturn &quot;&quot;;\n\t\t}\n\t}\n};\n</code></pre><pre><code class=\"lang-cpp\" name=\"dateClient_SocketPermission_ToXml#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement4 = socketPermission2-&gt;ToXml();\n      \n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement1 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      \n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement1-&gt;AddChild( securityElement2 );\n      securityElement1-&gt;AddChild( securityElement3 );\n      securityElement4-&gt;AddChild( securityElement1 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement4 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 = gcnew SocketPermission( NetworkAccess::Connect,TransportType::All,&quot;192.168.144.238&quot;,SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect, TransportType::All, &quot;192.168.144.239&quot;, SocketPermission::AllPorts );\n      Console::WriteLine( &quot;<br>Checks the Socket permissions using IsUnrestricted method : &quot; );\n      if ( socketPermission1-&gt;IsUnrestricted() )\n            Console::WriteLine( &quot;Socket permission is unrestricted&quot; );\n      else\n            Console::WriteLine( &quot;Socket permission is restricted&quot; );\n\n      Console::WriteLine();\n      Console::WriteLine( &quot;Display result of ConnectList property : <br>&quot; );\n      IEnumerator^ enumerator = socketPermission3-&gt;ConnectList;\n      while ( enumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;The hostname is       : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Hostname );\n         Console::WriteLine( &quot;The port is           : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Port );\n         Console::WriteLine( &quot;The Transport type is : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Transport );\n      }\n\n      Console::WriteLine( &quot;&quot; );\n      Console::WriteLine( &quot;Display Security Elements :<br> &quot; );\n      PrintSecurityElement( socketPermission2-&gt;ToXml(), 0 );\n      \n      // Get a &#39;SocketPermission&#39; Object* which is a union of two other &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission3-&gt;Union( socketPermission2 ));\n      \n      // Demand that the calling method have the socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"dateClient_SocketPermission_ToXml#1\">\n\tDim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n\t\n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement4 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement1 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement2 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement1.AddChild(securityElement2)\n        securityElement1.AddChild(securityElement3)\n        securityElement4.AddChild(securityElement1)\n        \n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\t\n        socketPermission2.FromXml(securityElement4)\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n\n        Console.WriteLine(ControlChars.Cr + &quot;Checks the Socket permissions using IsUnrestricted method : &quot;)\n        If socketPermission1.IsUnrestricted() Then\n            Console.WriteLine(&quot;Socket permission is unrestricted&quot;)\n        Else\n            Console.WriteLine(&quot;Socket permission is restricted&quot;)\n        End If \n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;Display result of ConnectList property : &quot; + ControlChars.Cr)\n        Dim enumerator As IEnumerator = socketPermission3.ConnectList\n        While enumerator.MoveNext()\n            Console.WriteLine(&quot;The hostname is       : {0}&quot;, CType(enumerator.Current, EndpointPermission).Hostname)\n            Console.WriteLine(&quot;The port is           : {0}&quot;, CType(enumerator.Current, EndpointPermission).Port)\n            Console.WriteLine(&quot;The Transport type is : {0}&quot;, CType(enumerator.Current, EndpointPermission).Transport)\n        End While\n        \n        Console.WriteLine(&quot;&quot;)\n        \n        Console.WriteLine(&quot;Display Security Elements :&quot; + ControlChars.Cr + &quot; &quot;)\n        PrintSecurityElement(socketPermission2.ToXml(), 0)\n        \n        &#39;Get a &#39;SocketPermission&#39; object which is a union of two other &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission3.Union(socketPermission2), SocketPermission)\n        \n        &#39;Demand that the calling method have the socket permission.\n        socketPermission1.Demand()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_ToXml\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_ToXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXml()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an XML encoding of a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance and its current state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.SecurityElement ToXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> instance that contains an XML-encoded representation of the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance, including state information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToXml method creates a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> instance to encode a representation of the <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance, including state information, in XML.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.socketpermission#System_Net_SocketPermission_FromXml_\" data-linktype=\"relative-path\">FromXml</a> method to restore the state information from a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToXml method to convert a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> to XML.  </p>\n<pre><code class=\"lang-cs\" name=\"dateClient_SocketPermission_ToXml#1\">using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Collections;\nusing System.Security;\nusing System.Security.Permissions;\n\npublic class DateClient {\n\n\tprivate Socket serverSocket;\n\tprivate Encoding asciiEncoding; \n\tprivate IPAddress serverAddress;\n\n\tprivate int serverPort;\n\n\t// The constructor takes the address and port of the remote server.\n\tpublic DateClient(IPAddress serverIpAddress, int port) {\n\t\tserverAddress = serverIpAddress;\n\t\tserverPort = port;\n\t\tserverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n\t\tasciiEncoding = Encoding.ASCII;\n\t}\n\n\t// Print a security element and all its children, in a depth-first manner.\n\tprivate void PrintSecurityElement(SecurityElement securityElementObj, int depth) {\n\n\t\tConsole.WriteLine(&quot;Depth    : {0}&quot;, depth);\n\t\tConsole.WriteLine(&quot;Tag      : {0}&quot;, securityElementObj.Tag);\n\t\tConsole.WriteLine(&quot;Text     : {0}&quot;, securityElementObj.Text);\n\t\tif(securityElementObj.Children != null)\n\t\t\tConsole.WriteLine(&quot;Children : {0}&quot;, securityElementObj.Children.Count);\n\n\t\tif(securityElementObj.Attributes != null) {\n\t\t\tIEnumerator attributeEnumerator = securityElementObj.Attributes.GetEnumerator();\n\t\t\twhile(attributeEnumerator.MoveNext())\n\t\t\tConsole.WriteLine(&quot;Attribute - \\&quot;{0}\\&quot; , Value - \\&quot;{1}\\&quot;&quot;, ((IDictionaryEnumerator)attributeEnumerator).Key, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((IDictionaryEnumerator)attributeEnumerator).Value); \n\t\t}\n\n\t\tConsole.WriteLine(&quot;&quot;);\n\n\t\tif(securityElementObj.Children != null) {\n\t\t\tdepth += 1;\n\t\t\tfor(int i = 0; i &lt; securityElementObj.Children.Count; i++) \n\t\t\t\tPrintSecurityElement((SecurityElement)(securityElementObj.Children[i]), depth);\n\t\t}\n\t}\n\n\tpublic String GetDate() \n\t{\n\n\t\tSocketPermission socketPermission1 = new SocketPermission(PermissionState.Unrestricted);\n\n\t\t// Create a &#39;SocketPermission&#39; object for two ip addresses.\n\t\tSocketPermission socketPermission2 = new SocketPermission(PermissionState.None);\n\t\tSecurityElement securityElement4 = socketPermission2.ToXml();\n      // &#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n\t\tSecurityElement securityElement1 = new SecurityElement(&quot;ConnectAccess&quot;);\n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n\t\t// First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement2 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;);\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSecurityElement securityElement3 = new SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;);\n\t\tsecurityElement1.AddChild(securityElement2);\n\t\tsecurityElement1.AddChild(securityElement3);\n\t\tsecurityElement4.AddChild(securityElement1);\n\t\t\n\t   // Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\t\n\t\tsocketPermission2.FromXml(securityElement4);\n\n\t\t// Create another &#39;SocketPermission&#39; object with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tSocketPermission socketPermission3 = \n\t\t\t\t\t\tnew SocketPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t\t\t TransportType.All,\n\t\t\t\t\t\t\t\t\t\t\t &quot;192.168.144.238&quot;,\n\t\t\t\t\t\t\t\t\t\t\t SocketPermission.AllPorts);\n\n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n\t\tsocketPermission3.AddPermission(NetworkAccess.Connect,\n\t\t\t\t\t\t\t\t\t   TransportType.All,\n\t\t\t\t\t\t\t\t\t   &quot;192.168.144.239&quot;,\n\t\t\t\t\t\t\t\t\t   SocketPermission.AllPorts);\n\n\t\tConsole.WriteLine(&quot;<br>Checks the Socket permissions using IsUnrestricted method : &quot;);\n\t\tif(socketPermission1.IsUnrestricted())\n\t\t\tConsole.WriteLine(&quot;Socket permission is unrestricted&quot;);\n\t\telse\n\t\t\tConsole.WriteLine(&quot;Socket permission is restricted&quot;);\n\n\t\tConsole.WriteLine();\n\n\t\tConsole.WriteLine(&quot;Display result of ConnectList property : <br>&quot;);\n\t\tIEnumerator enumerator = socketPermission3.ConnectList;\n\t\twhile(enumerator.MoveNext()) {\n\t\t\tConsole.WriteLine(&quot;The hostname is       : {0}&quot;, ((EndpointPermission)enumerator.Current).Hostname);\n\t\t\tConsole.WriteLine(&quot;The port is           : {0}&quot;, ((EndpointPermission)enumerator.Current).Port);\n\t\t\tConsole.WriteLine(&quot;The Transport type is : {0}&quot;, ((EndpointPermission)enumerator.Current).Transport);\n\t\t}\n\t\tConsole.WriteLine(&quot;&quot;);\n\n\t\tConsole.WriteLine(&quot;Display Security Elements :<br> &quot;);\n\t\tPrintSecurityElement(socketPermission2.ToXml(), 0);\n\n\t\t// Get a &#39;SocketPermission&#39; object which is a union of two other &#39;SocketPermission&#39; objects.\n\t\tsocketPermission1 = (SocketPermission)socketPermission3.Union(socketPermission2);\n\n\t\t// Demand that the calling method have the socket permission.\n\t\tsocketPermission1.Demand();\n\n\t\t// Get the current date from the remote date server.\n\t\ttry {\n\t\t\tint bytesReceived;\t\t\n\t\t\tbyte[] getByte = new byte[100];\n\t\t\tserverSocket.Connect(new IPEndPoint( serverAddress, serverPort));\n\t\t\tbytesReceived = serverSocket.Receive( getByte, getByte.Length, 0 );\n\t\t\treturn asciiEncoding.GetString( getByte, 0, bytesReceived );\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;<br>Exception raised : {0}&quot;, e.Message);\n\t\t\treturn &quot;&quot;;\n\t\t}\n\t}\n};\n</code></pre><pre><code class=\"lang-cpp\" name=\"dateClient_SocketPermission_ToXml#1\">      SocketPermission^ socketPermission1 = gcnew SocketPermission( PermissionState::Unrestricted );\n      \n      // Create a &#39;SocketPermission&#39; Object* for two ip addresses.\n      SocketPermission^ socketPermission2 = gcnew SocketPermission( PermissionState::None );\n      SecurityElement^ securityElement4 = socketPermission2-&gt;ToXml();\n      \n      // &#39;SocketPermission&#39; Object* for &#39;Connect&#39; permission\n      SecurityElement^ securityElement1 = gcnew SecurityElement( &quot;ConnectAccess&quot; );\n      \n      // Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement2 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.238#-1#3&quot; );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SecurityElement^ securityElement3 = gcnew SecurityElement( &quot;URI&quot;,&quot;192.168.144.240#-1#3&quot; );\n      securityElement1-&gt;AddChild( securityElement2 );\n      securityElement1-&gt;AddChild( securityElement3 );\n      securityElement4-&gt;AddChild( securityElement1 );\n      \n      // Obtain a &#39;SocketPermission&#39; Object* using &#39;FromXml&#39; method.\n      socketPermission2-&gt;FromXml( securityElement4 );\n      \n      // Create another &#39;SocketPermission&#39; Object* with two ip addresses.\n      // First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      SocketPermission^ socketPermission3 = gcnew SocketPermission( NetworkAccess::Connect,TransportType::All,&quot;192.168.144.238&quot;,SocketPermission::AllPorts );\n      \n      // Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n      socketPermission3-&gt;AddPermission( NetworkAccess::Connect, TransportType::All, &quot;192.168.144.239&quot;, SocketPermission::AllPorts );\n      Console::WriteLine( &quot;<br>Checks the Socket permissions using IsUnrestricted method : &quot; );\n      if ( socketPermission1-&gt;IsUnrestricted() )\n            Console::WriteLine( &quot;Socket permission is unrestricted&quot; );\n      else\n            Console::WriteLine( &quot;Socket permission is restricted&quot; );\n\n      Console::WriteLine();\n      Console::WriteLine( &quot;Display result of ConnectList property : <br>&quot; );\n      IEnumerator^ enumerator = socketPermission3-&gt;ConnectList;\n      while ( enumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;The hostname is       : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Hostname );\n         Console::WriteLine( &quot;The port is           : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Port );\n         Console::WriteLine( &quot;The Transport type is : {0}&quot;, dynamic_cast&lt;EndpointPermission^&gt;(enumerator-&gt;Current)-&gt;Transport );\n      }\n\n      Console::WriteLine( &quot;&quot; );\n      Console::WriteLine( &quot;Display Security Elements :<br> &quot; );\n      PrintSecurityElement( socketPermission2-&gt;ToXml(), 0 );\n      \n      // Get a &#39;SocketPermission&#39; Object* which is a union of two other &#39;SocketPermission&#39; objects.\n      socketPermission1 = dynamic_cast&lt;SocketPermission^&gt;(socketPermission3-&gt;Union( socketPermission2 ));\n      \n      // Demand that the calling method have the socket permission.\n      socketPermission1-&gt;Demand();\n</code></pre><pre><code class=\"lang-vb\" name=\"dateClient_SocketPermission_ToXml#1\">\n\tDim socketPermission1 As New SocketPermission(PermissionState.Unrestricted)\n\t\n        &#39;Create a &#39;SocketPermission&#39; object for two ip addresses.\n        Dim socketPermission2 As New SocketPermission(PermissionState.None)\n        Dim securityElement4 As SecurityElement = socketPermission2.ToXml()\n        &#39;&#39;SocketPermission&#39; object for &#39;Connect&#39; permission\n        Dim securityElement1 As New SecurityElement(&quot;ConnectAccess&quot;)\n        &#39;Format to specify ip address are &lt;ip-address&gt;#&lt;port&gt;#&lt;transport-type&gt;\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement2 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.238#-1#3&quot;)\n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.240&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim securityElement3 As New SecurityElement(&quot;URI&quot;, &quot;192.168.144.240#-1#3&quot;)\n        securityElement1.AddChild(securityElement2)\n        securityElement1.AddChild(securityElement3)\n        securityElement4.AddChild(securityElement1)\n        \n        &#39;Obtain a &#39;SocketPermission&#39; object using &#39;FromXml&#39; method.\t\n        socketPermission2.FromXml(securityElement4)\n        \n        &#39;Create another &#39;SocketPermission&#39; object with two ip addresses.\n        &#39;First &#39;SocketPermission&#39; ip-address is &#39;192.168.144.238&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        Dim socketPermission3 As New SocketPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.238&quot;, SocketPermission.AllPorts)\n        \n        &#39;Second &#39;SocketPermission&#39; ip-address is &#39;192.168.144.239&#39; for &#39;All&#39; transport types and for &#39;All&#39; ports for the ip-address.\n        socketPermission3.AddPermission(NetworkAccess.Connect, TransportType.All, &quot;192.168.144.239&quot;, SocketPermission.AllPorts)\n\n        Console.WriteLine(ControlChars.Cr + &quot;Checks the Socket permissions using IsUnrestricted method : &quot;)\n        If socketPermission1.IsUnrestricted() Then\n            Console.WriteLine(&quot;Socket permission is unrestricted&quot;)\n        Else\n            Console.WriteLine(&quot;Socket permission is restricted&quot;)\n        End If \n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;Display result of ConnectList property : &quot; + ControlChars.Cr)\n        Dim enumerator As IEnumerator = socketPermission3.ConnectList\n        While enumerator.MoveNext()\n            Console.WriteLine(&quot;The hostname is       : {0}&quot;, CType(enumerator.Current, EndpointPermission).Hostname)\n            Console.WriteLine(&quot;The port is           : {0}&quot;, CType(enumerator.Current, EndpointPermission).Port)\n            Console.WriteLine(&quot;The Transport type is : {0}&quot;, CType(enumerator.Current, EndpointPermission).Transport)\n        End While\n        \n        Console.WriteLine(&quot;&quot;)\n        \n        Console.WriteLine(&quot;Display Security Elements :&quot; + ControlChars.Cr + &quot; &quot;)\n        PrintSecurityElement(socketPermission2.ToXml(), 0)\n        \n        &#39;Get a &#39;SocketPermission&#39; object which is a union of two other &#39;SocketPermission&#39; objects.\n        socketPermission1 = CType(socketPermission3.Union(socketPermission2), SocketPermission)\n        \n        &#39;Demand that the calling method have the socket permission.\n        socketPermission1.Demand()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_SocketPermission_Union_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Net_SocketPermission_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the logical union between two <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instances.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Union (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance to combine with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instance that represents the union of two <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instances. If <code>target</code> parameter is <code>null</code>, it returns a copy of the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is not a <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The result of a call to Union is a permission that represents all of the access to <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> connections represented by the current instance as well as the access represented by <code>target</code>. Any demand that passes either the current instance or <code>target</code> passes their union. This method overrides <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Union_\" data-linktype=\"relative-path\">Union</a> and is implemented to support the <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Union method to return the logical union of two existing <a class=\"xref\" href=\"system.net.socketpermission\" data-linktype=\"relative-path\">SocketPermission</a> instances.  </p>\n<pre><code class=\"lang-cs\" name=\"SocketPermissionExample#2\">\n     // Creates a SocketPermission restricting access to and from all URIs.\n     SocketPermission mySocketPermission1 = new SocketPermission(PermissionState.None);\n\n     // The socket to which this permission will apply will allow connections from www.contoso.com.\n     mySocketPermission1.AddPermission(NetworkAccess.Accept, TransportType.Tcp, &quot;www.contoso.com&quot;, 11000);\n\n     // Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n     SocketPermission mySocketPermission2 =\n                                new SocketPermission(NetworkAccess.Connect, TransportType.Tcp, &quot;www.southridgevideo.com&quot;, 11002);\n\n     // Creates a SocketPermission from the union of two SocketPermissions.\n     SocketPermission mySocketPermissionUnion = \n                                (SocketPermission)mySocketPermission1.Union(mySocketPermission2);\n\n     // Checks to see if the union was successfully created by using the IsSubsetOf method.\n     if (mySocketPermission1.IsSubsetOf(mySocketPermissionUnion) &amp;&amp; \n     \t   mySocketPermission2.IsSubsetOf(mySocketPermissionUnion)){\n          Console.WriteLine(&quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot;); \n\n          // Prints the allowable accept URIs to the console.\n          Console.WriteLine(&quot;This union accepts connections on :&quot;);\n\n          IEnumerator myEnumerator = mySocketPermissionUnion.AcceptList;\n\t   while (myEnumerator.MoveNext()) {\n               Console.WriteLine(((EndpointPermission)myEnumerator.Current).ToString());\n\t        }      \n\n             // Prints the allowable connect URIs to the console.\n          Console.WriteLine(&quot;This union permits connections to :&quot;);\n\n          myEnumerator = mySocketPermissionUnion.ConnectList;\n\t   while (myEnumerator.MoveNext()) {\n               Console.WriteLine(((EndpointPermission)myEnumerator.Current).ToString());\n\t        }      \n\n           }\n</code></pre><pre><code class=\"lang-vb\" name=\"SocketPermissionExample#2\">      &#39; Creates a SocketPermission restricting access to and from all URIs.\n      Dim mySocketPermission1 As New SocketPermission(PermissionState.None)\n      \n      &#39; The socket to which this permission will apply will allow connections from www.contoso.com.\n      mySocketPermission1.AddPermission(NetworkAccess.Accept, TransportType.Tcp, &quot;www.contoso.com&quot;, 11000)\n      \n      &#39; Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n      Dim mySocketPermission2 As New SocketPermission(NetworkAccess.Connect, TransportType.Tcp, &quot;www.southridgevideo.com&quot;, 11002)\n      \n      &#39; Creates a SocketPermission from the union of two SocketPermissions.\n      Dim mySocketPermissionUnion As SocketPermission = CType(mySocketPermission1.Union(mySocketPermission2), SocketPermission)\n      \n      &#39; Checks to see if the union was successfully created by using the IsSubsetOf method.\n      If mySocketPermission1.IsSubsetOf(mySocketPermissionUnion) And mySocketPermission2.IsSubsetOf(mySocketPermissionUnion) Then\n         Console.WriteLine(&quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot;)\n         \n         &#39; Prints the allowable accept URIs to the console.\n         Console.WriteLine(&quot;This union accepts connections on :&quot;)\n         \n         Dim myEnumerator As IEnumerator = mySocketPermissionUnion.AcceptList\n         While myEnumerator.MoveNext()\n            Console.WriteLine(CType(myEnumerator.Current, EndpointPermission).ToString())\n         End While\n         \n         Console.WriteLine(&quot;This union establishes connections on : &quot;)\n         \n         &#39; Prints the allowable connect URIs to the console.\n         Console.WriteLine(&quot;This union permits connections to :&quot;)\n         \n         myEnumerator = mySocketPermissionUnion.ConnectList\n         While myEnumerator.MoveNext()\n            Console.WriteLine(CType(myEnumerator.Current, EndpointPermission).ToString())\n         End While\n      End If \n</code></pre><pre><code class=\"lang-cpp\" name=\"SocketPermissionExample#2\">   // Creates a SocketPermission restricting access to and from all URIs.\n   SocketPermission^ mySocketPermission1 = gcnew SocketPermission( PermissionState::None );\n   \n   // The socket to which this permission will apply will allow connections from www.contoso.com.\n   mySocketPermission1-&gt;AddPermission( NetworkAccess::Accept, TransportType::Tcp,  &quot;www.contoso.com&quot;, 11000 );\n   \n   // Creates a SocketPermission which will allow the target Socket to connect with www.southridgevideo.com.\n   SocketPermission^ mySocketPermission2 = gcnew SocketPermission( NetworkAccess::Connect,TransportType::Tcp, &quot;www.southridgevideo.com&quot;,11002 );\n   \n   // Creates a SocketPermission from the union of two SocketPermissions.\n   SocketPermission^ mySocketPermissionUnion =\n      (SocketPermission^)( mySocketPermission1-&gt;Union( mySocketPermission2 ) );\n   \n   // Checks to see if the union was successfully created by using the IsSubsetOf method.\n   if ( mySocketPermission1-&gt;IsSubsetOf( mySocketPermissionUnion ) &amp;&amp;\n      mySocketPermission2-&gt;IsSubsetOf( mySocketPermissionUnion ) )\n   {\n      Console::WriteLine(  &quot;This union contains permissions from both mySocketPermission1 and mySocketPermission2&quot; );\n      \n      // Prints the allowable accept URIs to the console.\n      Console::WriteLine(  &quot;This union accepts connections on :&quot; );\n\n      IEnumerator^ myEnumerator = mySocketPermissionUnion-&gt;AcceptList;\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( safe_cast&lt;EndpointPermission^&gt;( myEnumerator-&gt;Current )-&gt;ToString() );\n      }\n      \n      // Prints the allowable connect URIs to the console.\n      Console::WriteLine(  &quot;This union permits connections to :&quot; );\n\n      myEnumerator = mySocketPermissionUnion-&gt;ConnectList;\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( safe_cast&lt;EndpointPermission^&gt;( myEnumerator-&gt;Current )-&gt;ToString() );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.SocketPermission.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.SocketPermission.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.AcceptList\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.AddPermission\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.AllPorts\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.ConnectList\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.Copy\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.FromXml\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.Intersect\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.IsSubsetOf\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.IsUnrestricted\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.ToXml\">\r\n<meta name=\"APIName\" content=\"System.Net.SocketPermission.Union\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9c5b059d-81b4-7f97-ab35-dbbc4b210cd6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\SocketPermission.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Controls rights to make or accept connections on a transport address.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.SocketPermission\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.SocketPermission.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.SocketPermission.yml","open_to_public_contributors":true,"api_name":["System.Net.SocketPermission","System.Net.SocketPermission..ctor","System.Net.SocketPermission.AcceptList","System.Net.SocketPermission.AddPermission","System.Net.SocketPermission.AllPorts","System.Net.SocketPermission.ConnectList","System.Net.SocketPermission.Copy","System.Net.SocketPermission.FromXml","System.Net.SocketPermission.Intersect","System.Net.SocketPermission.IsSubsetOf","System.Net.SocketPermission.IsUnrestricted","System.Net.SocketPermission.ToXml","System.Net.SocketPermission.Union"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.SocketPermission","System::Net::SocketPermission","System.Net.SocketPermission.#ctor","System::Net::SocketPermission::#ctor","System.Net.SocketPermission.AcceptList","System::Net::SocketPermission::AcceptList","System.Net.SocketPermission.AddPermission","System::Net::SocketPermission::AddPermission","System.Net.SocketPermission.AllPorts","System::Net::SocketPermission::AllPorts","System.Net.SocketPermission.ConnectList","System::Net::SocketPermission::ConnectList","System.Net.SocketPermission.Copy","System::Net::SocketPermission::Copy","System.Net.SocketPermission.FromXml","System::Net::SocketPermission::FromXml","System.Net.SocketPermission.Intersect","System::Net::SocketPermission::Intersect","System.Net.SocketPermission.IsSubsetOf","System::Net::SocketPermission::IsSubsetOf","System.Net.SocketPermission.IsUnrestricted","System::Net::SocketPermission::IsUnrestricted","System.Net.SocketPermission.ToXml","System::Net::SocketPermission::ToXml","System.Net.SocketPermission.Union","System::Net::SocketPermission::Union"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9c5b059d-81b4-7f97-ab35-dbbc4b210cd6","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\SocketPermission.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/SocketPermission.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SocketPermission class | Microsoft Docs","_op_ogTitle":"SocketPermission class","description":"Controls rights to make or accept connections on a transport address.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.SocketPermission","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.socketpermission","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.socketpermission","fileRelativePath":"System.Net.SocketPermission.html"},"themesRelativePathToOutputRoot":"_themes/"}