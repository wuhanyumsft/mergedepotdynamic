{"content":"    \r\n    <h1 id=\"System_Reflection_CustomAttributeData\">\r\n      <span class=\"lang-csharp\">CustomAttributeData</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class CustomAttributeData</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CustomAttributeData</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.  </p>\n<p> The CustomAttributeData class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes. The members of this class can be used to obtain the positional arguments and named arguments of the attribute. Use the <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_ConstructorArguments_\" data-linktype=\"relative-path\">ConstructorArguments</a> property to get a list of <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> structures that represent the positional arguments, and use the <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_NamedArguments_\" data-linktype=\"relative-path\">NamedArguments</a> property to get a list of <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> structures that represent the named arguments.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> structure only provides information about the attribute property used to get and set the argument value. To obtain the type and value of the argument, use the <a class=\"xref\" href=\"system.reflection.customattributenamedargument#System_Reflection_CustomAttributeNamedArgument_TypedValue_\" data-linktype=\"relative-path\">TypedValue</a> property to obtain a <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> structure.  </p>\n</div>\n<p> When you have a <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> structure for an argument, whether named or positional, use the <a class=\"xref\" href=\"system.reflection.customattributetypedargument#System_Reflection_CustomAttributeTypedArgument_ArgumentType_\" data-linktype=\"relative-path\">ArgumentType</a> property to get the type and the <a class=\"xref\" href=\"system.reflection.customattributetypedargument#System_Reflection_CustomAttributeTypedArgument_Value_\" data-linktype=\"relative-path\">Value</a> property to get the value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For an array argument, the <a class=\"xref\" href=\"system.reflection.customattributetypedargument#System_Reflection_CustomAttributeTypedArgument_Value_\" data-linktype=\"relative-path\">Value</a> property returns a generic <a class=\"xref\" href=\"system.collections.objectmodel.readonlycollection-1\" data-linktype=\"relative-path\">ReadOnlyCollection&lt;T&gt;</a> of <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> objects. Each <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> object in the collection represents the corresponding element of the array.  </p>\n</div>\n<p> CustomAttributeData can be used in the execution context as well as in the reflection-only context. For example, you might want to avoid loading the assembly that contains the code for a custom attribute. Using the CustomAttributeData class is different from using methods like <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>:  </p>\n<ul>\n<li><p>The properties and methods of CustomAttributeData only provide you with the values that were specified for the attribute instance, not the semantics of the constructor. For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.  </p>\n</li>\n<li><p>The properties and methods of CustomAttributeData do not allow you to retrieve the custom attributes inherited from base classes.  </p>\n<p>To create instances of the CustomAttributeData class, use the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> factory methods.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData__ctor\" data-linktype=\"self-bookmark\">CustomAttributeData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_AttributeType\" data-linktype=\"self-bookmark\">AttributeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_Constructor\" data-linktype=\"self-bookmark\">Constructor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object that represents the constructor that would have initialized the custom attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_ConstructorArguments\" data-linktype=\"self-bookmark\">ConstructorArguments</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of positional arguments specified for the attribute instance represented by the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_NamedArguments\" data-linktype=\"self-bookmark\">NamedArguments</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of named arguments specified for the attribute instance represented by the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Assembly)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"self-bookmark\">GetCustomAttributes(MemberInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Module)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"self-bookmark\">GetCustomAttributes(ParameterInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for a particular type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_CustomAttributeData_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representation of the custom attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData__ctor\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CustomAttributeData()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected CustomAttributeData ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is invoked by derived classes during the construction of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_AttributeType\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_AttributeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AttributeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type AttributeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The type of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_Constructor\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_Constructor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Constructor</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object that represents the constructor that would have initialized the custom attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.ConstructorInfo Constructor { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </div>\r\n                  <p>An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  </p>\n<p> The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  </p>\n<p> The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  </p>\n<p> The Constructor property is used in the <code>ShowAttributeData</code> method that displays custom attribute data. In this code example, the <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> returned by this property is used to display a text string that describes the constructor, demonstrating that the property returns the constructor that would initialize the attribute.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomAttributeData#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind.ThirdKind, Note=&quot;This is a note on the assembly.&quot;)]\n\n// An enumeration used by the ExampleAttribute class.\npublic enum ExampleKind\n{\n    FirstKind, \n    SecondKind, \n    ThirdKind, \n    FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets.All)]\npublic class ExampleAttribute : Attribute\n{\n    // Data for properties.\n    private ExampleKind kindValue;\n    private string noteValue;\n    private string[] arrayStrings;\n    private int[] arrayNumbers;\n\n    // Constructors. The parameterless constructor (.ctor) calls\n    // the constructor that specifies ExampleKind and an array of \n    // strings, and supplies the default values.\n    //\n    public ExampleAttribute(ExampleKind initKind, string[] initStrings)\n    {\n        kindValue = initKind;\n        arrayStrings = initStrings;\n    }\n    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}\n    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}\n\n    // Properties. The Note and Numbers properties must be read/write, so they\n    // can be used as named parameters.\n    //\n    public ExampleKind Kind { get { return kindValue; }}\n    public string[] Strings { get { return arrayStrings; }}\n    public string Note    \n    {\n        get { return noteValue; }\n        set { noteValue = value; }\n    }\n    public int[] Numbers\n    {\n        get { return arrayNumbers; }\n        set { arrayNumbers = value; }\n    }\n}\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind.SecondKind, \n         new string[] { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = new int[] { 53, 57, 59 })] \npublic class Test\n{\n    // The example attribute is applied to a method, using the\n    // parameterless constructor and supplying a named argument.\n    // The attribute is also applied to the method parameter.\n    //\n    [Example(Note=&quot;This is a note on a method.&quot;)]\n    public void TestMethod([Example] object arg) { }\n\n    // Main() gets objects representing the assembly, the test\n    // type, the test method, and the method parameter. Custom\n    // attribute data is displayed for each of these.\n    //\n    public static void Main()\n    {\n        Assembly asm = Assembly.ReflectionOnlyLoad(&quot;Source&quot;);\n        Type t = asm.GetType(&quot;Test&quot;);\n        MethodInfo m = t.GetMethod(&quot;TestMethod&quot;);\n        ParameterInfo[] p = m.GetParameters();\n\n        Console.WriteLine(&quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, asm);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));\n        Console.WriteLine(&quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));\n        Console.WriteLine(&quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));\n        Console.WriteLine(&quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));\n    }\n\n    private static void ShowAttributeData(\n        IList&lt;CustomAttributeData&gt; attributes)\n    {\n        foreach( CustomAttributeData cad in attributes )\n        {\n            Console.WriteLine(&quot;   {0}&quot;, cad);\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor);\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;);\n            foreach( CustomAttributeTypedArgument cata \n                in cad.ConstructorArguments )\n            {\n                ShowValueOrArray(cata);\n            }\n\n            Console.WriteLine(&quot;      Named arguments:&quot;);\n            foreach( CustomAttributeNamedArgument cana \n                in cad.NamedArguments )\n            {\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, \n                    cana.MemberInfo);\n                ShowValueOrArray(cana.TypedValue);\n            }\n        }\n    }\n\n    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)\n    {\n        if (cata.Value.GetType() == typeof(ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;))\n        {\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType);\n\n            foreach (CustomAttributeTypedArgument cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;) cata.Value)\n            {\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement.ArgumentType, cataElement.Value);\n            }\n        }\n        else\n        {\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, \n                cata.ArgumentType, cata.Value);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"CustomAttributeData#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\n// An enumeration used by the ExampleAttribute class.\npublic enum class ExampleKind\n{\n   FirstKind, SecondKind, ThirdKind, FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets::All)]\npublic ref class ExampleAttribute: public Attribute\n{\nprivate:\n   // Data for properties.\n   ExampleKind kindValue;\n   String^ noteValue;\n   array&lt;String^&gt;^ arrayStrings;\n   array&lt;int&gt;^ arrayNumbers;\n\n   // Constructors. \n   void ExampleAttributeInitialize( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      kindValue = initKind;\n      arrayStrings = initStrings;\n   }\npublic:\n   ExampleAttribute()\n   {\n      ExampleAttributeInitialize( ExampleKind::FirstKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind )\n   {\n      ExampleAttributeInitialize( initKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      ExampleAttributeInitialize( initKind, initStrings );\n   }\n\n   // Properties. The Note and Numbers properties must be read/write, so they\n   // can be used as named parameters.\n   //\n   property ExampleKind Kind \n   {\n      ExampleKind get()\n      {\n         return kindValue;\n      }\n   }\n   property array&lt;String^&gt;^ Strings\n   {\n      array&lt;String^&gt;^ get()\n      {\n         return arrayStrings;\n      }\n   }\n   property String^ Note \n   {\n      String^ get()\n      {\n         return noteValue;\n      }\n\n      void set( String^ value )\n      {\n         noteValue = value;\n      }\n   }\n   property array&lt;int&gt;^ Numbers\n   {\n      array&lt;int&gt;^ get()\n      {\n         return arrayNumbers;\n      }\n\n      void set( array&lt;int&gt;^ value )\n      {\n         arrayNumbers = value;\n      }\n   }\n};\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind::ThirdKind,Note=&quot;This is a note on the assembly.&quot;)];\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind::SecondKind, \n         gcnew array&lt;String^&gt; { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = gcnew array&lt;int&gt; { 53, 57, 59 })] \npublic ref class Test\n{\npublic:\n   // The example attribute is applied to a method, using the\n   // parameterless constructor and supplying a named argument.\n   // The attribute is also applied to the method parameter.\n   //\n   [Example(Note=&quot;This is a note on a method.&quot;)]\n   void TestMethod( [Example] Object^ arg ){}\n\n   // Main() gets objects representing the assembly, the test\n   // type, the test method, and the method parameter. Custom\n   // attribute data is displayed for each of these.\n   //\n   static void Main()\n   {\n      Assembly^ assembly = Assembly::ReflectionOnlyLoad( &quot;Source&quot; );\n      Type^ t = assembly-&gt;GetType( &quot;Test&quot; );\n      MethodInfo^ m = t-&gt;GetMethod( &quot;TestMethod&quot; );\n      array&lt;ParameterInfo^&gt;^p = m-&gt;GetParameters();\n\n      Console::WriteLine( &quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, assembly );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( assembly ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( t ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( m ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( p[ 0 ] ) );\n   }\n\nprivate:\n    static void ShowValueOrArray(CustomAttributeTypedArgument^ cata)\n    {\n        if (cata-&gt;Value-&gt;GetType() == ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;::typeid)\n        {\n            Console::WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata-&gt;ArgumentType);\n\n            for each (CustomAttributeTypedArgument^ cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;^) cata-&gt;Value)\n            {\n                Console::WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement-&gt;ArgumentType, cataElement-&gt;Value);\n            }\n        }\n        else\n        {\n            Console::WriteLine( &quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n               cata-&gt;ArgumentType, cata-&gt;Value );\n        }\n    }\n\n   static void ShowAttributeData( IList&lt; CustomAttributeData^ &gt;^ attributes )\n   {\n      for each ( CustomAttributeData^ cad in attributes )\n      {\n         Console::WriteLine( &quot;   {0}&quot;, cad );\n         Console::WriteLine( &quot;      Constructor: &#39;{0}&#39;&quot;, cad-&gt;Constructor );\n\n         Console::WriteLine( &quot;      Constructor arguments:&quot; );\n         for each ( CustomAttributeTypedArgument^ cata in cad-&gt;ConstructorArguments )\n         {\n            ShowValueOrArray(cata);\n         }\n\n         Console::WriteLine( &quot;      Named arguments:&quot; );\n         for each ( CustomAttributeNamedArgument cana in cad-&gt;NamedArguments )\n         {\n            Console::WriteLine( &quot;         MemberInfo: &#39;{0}&#39;&quot;, cana.MemberInfo );\n            ShowValueOrArray(cana.TypedValue);\n         }\n      }\n   }\n};\n\nint main()\n{\n   Test::Main();\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomAttributeData#1\">Imports System\nImports System.Reflection\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\n&#39; The example attribute is applied to the assembly.\n&lt;Assembly:Example(ExampleKind.ThirdKind, Note:=&quot;This is a note on the assembly.&quot;)&gt;\n\n&#39; An enumeration used by the ExampleAttribute class.\nPublic Enum ExampleKind\n    FirstKind\n    SecondKind\n    ThirdKind\n    FourthKind\nEnd Enum\n\n&#39; An example attribute. The attribute can be applied to all\n&#39; targets, from assemblies to parameters.\n&#39;\n&lt;AttributeUsage(AttributeTargets.All)&gt; _\nPublic Class ExampleAttribute\n    Inherits Attribute\n\n    &#39; Data for properties.\n    Private kindValue As ExampleKind\n    Private noteValue As String\n    Private arrayStrings() As String\n    Private arrayNumbers() As Integer\n\n    &#39; Constructors. The parameterless constructor (.ctor) calls\n    &#39; the constructor that specifies ExampleKind and an array of\n    &#39; strings, and supplies the default values.\n    &#39;\n    Public Sub New(ByVal initKind As ExampleKind, ByVal initStrings() As String)\n        kindValue = initKind\n        arrayStrings = initStrings\n    End Sub\n    Public Sub New(ByVal initKind As ExampleKind)\n        Me.New(initKind, Nothing)\n    End Sub\n    Public Sub New()\n        Me.New(ExampleKind.FirstKind, Nothing)\n    End Sub\n\n    &#39; Properties. The Note and Numbers properties must be read/write, so they \n    &#39; can be used as named parameters.\n    &#39;\n    Public ReadOnly Property Kind As ExampleKind\n        Get\n            Return kindValue \n        End Get\n    End Property\n    Public ReadOnly Property Strings As String()\n        Get\n            Return arrayStrings \n        End Get\n    End Property\n    Public Property Note As String\n        Get\n            Return noteValue \n        End Get\n        Set\n            noteValue = value\n        End Set\n    End Property\n    Public Property Numbers As Integer()\n        Get\n            Return arrayNumbers \n        End Get\n        Set\n            arrayNumbers = value\n        End Set\n    End Property\nEnd Class\n\n&#39; The example attribute is applied to the test class.\n&#39;\n&lt;Example(ExampleKind.SecondKind, _\n         New String() { &quot;String array argument, line 1&quot;, _\n                        &quot;String array argument, line 2&quot;, _\n                        &quot;String array argument, line 3&quot; }, _\n         Note := &quot;This is a note on the class.&quot;, _\n         Numbers := New Integer() { 53, 57, 59 })&gt; _\nPublic Class Test\n    &#39; The example attribute is applied to a method, using the\n    &#39; parameterless constructor and supplying a named argument.\n    &#39; The attribute is also applied to the method parameter.\n    &#39;\n    &lt;Example(Note:=&quot;This is a note on a method.&quot;)&gt; _\n    Public Sub TestMethod(&lt;Example()&gt; ByVal arg As Object)\n    End Sub\n\n    &#39; Sub Main gets objects representing the assembly, the test\n    &#39; type, the test method, and the method parameter. Custom\n    &#39; attribute data is displayed for each of these.\n    &#39;\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = Assembly.ReflectionOnlyLoad(&quot;source&quot;)\n        Dim t As Type = asm.GetType(&quot;Test&quot;)\n        Dim m As MethodInfo = t.GetMethod(&quot;TestMethod&quot;)\n        Dim p() As ParameterInfo = m.GetParameters()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for assembly: &#39;{0}&#39;&quot;, asm)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for type: &#39;{0}&#39;&quot;, t)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for member: &#39;{0}&#39;&quot;, m)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for parameter: &#39;{0}&#39;&quot;, p)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p(0)))\n    End Sub\n\n    Private Shared Sub ShowAttributeData( _\n        ByVal attributes As IList(Of CustomAttributeData))\n\n        For Each cad As CustomAttributeData _\n            In CType(attributes, IEnumerable(Of CustomAttributeData))\n\n            Console.WriteLine(&quot;   {0}&quot;, cad)\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor)\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;)\n            For Each cata As CustomAttributeTypedArgument _\n                In CType(cad.ConstructorArguments, IEnumerable(Of CustomAttributeTypedArgument))\n\n                ShowValueOrArray(cata)\n            Next\n\n            Console.WriteLine(&quot;      Named arguments:&quot;)\n            For Each cana As CustomAttributeNamedArgument _\n                In CType(cad.NamedArguments, IEnumerable(Of CustomAttributeNamedArgument))\n\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, _\n                    cana.MemberInfo)\n                ShowValueOrArray(cana.TypedValue)\n            Next\n        Next\n    End Sub\n\n    Private Shared Sub ShowValueOrArray(ByVal cata As CustomAttributeTypedArgument)\n        If cata.Value.GetType() Is GetType(ReadOnlyCollection(Of CustomAttributeTypedArgument)) Then\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType)\n\n            For Each cataElement As CustomAttributeTypedArgument In cata.Value\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                    cataElement.ArgumentType, cataElement.Value)\n            Next\n        Else\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                cata.ArgumentType, cata.Value)\n        End If       \n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Attributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n&#39;   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n&#39;      Constructor: &#39;Void .ctor(Int32)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n&#39;      Named arguments:\n&#39;   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n&#39;         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n&#39;   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n&#39;\n&#39;Attributes for type: &#39;Test&#39;\n&#39;   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n&#39;         Array of &#39;System.String[]&#39;:\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n&#39;         MemberInfo: &#39;Int32[] Numbers&#39;\n&#39;         Array of &#39;System.Int32[]&#39;:\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n&#39;\n&#39;Attributes for member: &#39;Void TestMethod(System.Object)&#39;\n&#39;   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n&#39;\n&#39;Attributes for parameter: &#39;System.Object arg&#39;\n&#39;   [ExampleAttribute()]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_ConstructorArguments\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_ConstructorArguments_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConstructorArguments</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of positional arguments specified for the attribute instance represented by the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeTypedArgument&gt; ConstructorArguments { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of structures that represent the positional arguments specified for the custom attribute instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the reflection-only context.  </p>\n<p> Use the <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_NamedArguments_\" data-linktype=\"relative-path\">NamedArguments</a> method to get the named arguments specified for the attribute instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  </p>\n<p> The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  </p>\n<p> The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  </p>\n<p> The ConstructorArguments property is used in the <code>ShowAttributeData</code> method that displays custom attribute data. In this code example, this property is used to display the list of arguments passed to the constructor that initialized the attribute.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomAttributeData#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind.ThirdKind, Note=&quot;This is a note on the assembly.&quot;)]\n\n// An enumeration used by the ExampleAttribute class.\npublic enum ExampleKind\n{\n    FirstKind, \n    SecondKind, \n    ThirdKind, \n    FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets.All)]\npublic class ExampleAttribute : Attribute\n{\n    // Data for properties.\n    private ExampleKind kindValue;\n    private string noteValue;\n    private string[] arrayStrings;\n    private int[] arrayNumbers;\n\n    // Constructors. The parameterless constructor (.ctor) calls\n    // the constructor that specifies ExampleKind and an array of \n    // strings, and supplies the default values.\n    //\n    public ExampleAttribute(ExampleKind initKind, string[] initStrings)\n    {\n        kindValue = initKind;\n        arrayStrings = initStrings;\n    }\n    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}\n    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}\n\n    // Properties. The Note and Numbers properties must be read/write, so they\n    // can be used as named parameters.\n    //\n    public ExampleKind Kind { get { return kindValue; }}\n    public string[] Strings { get { return arrayStrings; }}\n    public string Note    \n    {\n        get { return noteValue; }\n        set { noteValue = value; }\n    }\n    public int[] Numbers\n    {\n        get { return arrayNumbers; }\n        set { arrayNumbers = value; }\n    }\n}\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind.SecondKind, \n         new string[] { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = new int[] { 53, 57, 59 })] \npublic class Test\n{\n    // The example attribute is applied to a method, using the\n    // parameterless constructor and supplying a named argument.\n    // The attribute is also applied to the method parameter.\n    //\n    [Example(Note=&quot;This is a note on a method.&quot;)]\n    public void TestMethod([Example] object arg) { }\n\n    // Main() gets objects representing the assembly, the test\n    // type, the test method, and the method parameter. Custom\n    // attribute data is displayed for each of these.\n    //\n    public static void Main()\n    {\n        Assembly asm = Assembly.ReflectionOnlyLoad(&quot;Source&quot;);\n        Type t = asm.GetType(&quot;Test&quot;);\n        MethodInfo m = t.GetMethod(&quot;TestMethod&quot;);\n        ParameterInfo[] p = m.GetParameters();\n\n        Console.WriteLine(&quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, asm);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));\n        Console.WriteLine(&quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));\n        Console.WriteLine(&quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));\n        Console.WriteLine(&quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));\n    }\n\n    private static void ShowAttributeData(\n        IList&lt;CustomAttributeData&gt; attributes)\n    {\n        foreach( CustomAttributeData cad in attributes )\n        {\n            Console.WriteLine(&quot;   {0}&quot;, cad);\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor);\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;);\n            foreach( CustomAttributeTypedArgument cata \n                in cad.ConstructorArguments )\n            {\n                ShowValueOrArray(cata);\n            }\n\n            Console.WriteLine(&quot;      Named arguments:&quot;);\n            foreach( CustomAttributeNamedArgument cana \n                in cad.NamedArguments )\n            {\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, \n                    cana.MemberInfo);\n                ShowValueOrArray(cana.TypedValue);\n            }\n        }\n    }\n\n    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)\n    {\n        if (cata.Value.GetType() == typeof(ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;))\n        {\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType);\n\n            foreach (CustomAttributeTypedArgument cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;) cata.Value)\n            {\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement.ArgumentType, cataElement.Value);\n            }\n        }\n        else\n        {\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, \n                cata.ArgumentType, cata.Value);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"CustomAttributeData#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\n// An enumeration used by the ExampleAttribute class.\npublic enum class ExampleKind\n{\n   FirstKind, SecondKind, ThirdKind, FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets::All)]\npublic ref class ExampleAttribute: public Attribute\n{\nprivate:\n   // Data for properties.\n   ExampleKind kindValue;\n   String^ noteValue;\n   array&lt;String^&gt;^ arrayStrings;\n   array&lt;int&gt;^ arrayNumbers;\n\n   // Constructors. \n   void ExampleAttributeInitialize( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      kindValue = initKind;\n      arrayStrings = initStrings;\n   }\npublic:\n   ExampleAttribute()\n   {\n      ExampleAttributeInitialize( ExampleKind::FirstKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind )\n   {\n      ExampleAttributeInitialize( initKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      ExampleAttributeInitialize( initKind, initStrings );\n   }\n\n   // Properties. The Note and Numbers properties must be read/write, so they\n   // can be used as named parameters.\n   //\n   property ExampleKind Kind \n   {\n      ExampleKind get()\n      {\n         return kindValue;\n      }\n   }\n   property array&lt;String^&gt;^ Strings\n   {\n      array&lt;String^&gt;^ get()\n      {\n         return arrayStrings;\n      }\n   }\n   property String^ Note \n   {\n      String^ get()\n      {\n         return noteValue;\n      }\n\n      void set( String^ value )\n      {\n         noteValue = value;\n      }\n   }\n   property array&lt;int&gt;^ Numbers\n   {\n      array&lt;int&gt;^ get()\n      {\n         return arrayNumbers;\n      }\n\n      void set( array&lt;int&gt;^ value )\n      {\n         arrayNumbers = value;\n      }\n   }\n};\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind::ThirdKind,Note=&quot;This is a note on the assembly.&quot;)];\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind::SecondKind, \n         gcnew array&lt;String^&gt; { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = gcnew array&lt;int&gt; { 53, 57, 59 })] \npublic ref class Test\n{\npublic:\n   // The example attribute is applied to a method, using the\n   // parameterless constructor and supplying a named argument.\n   // The attribute is also applied to the method parameter.\n   //\n   [Example(Note=&quot;This is a note on a method.&quot;)]\n   void TestMethod( [Example] Object^ arg ){}\n\n   // Main() gets objects representing the assembly, the test\n   // type, the test method, and the method parameter. Custom\n   // attribute data is displayed for each of these.\n   //\n   static void Main()\n   {\n      Assembly^ assembly = Assembly::ReflectionOnlyLoad( &quot;Source&quot; );\n      Type^ t = assembly-&gt;GetType( &quot;Test&quot; );\n      MethodInfo^ m = t-&gt;GetMethod( &quot;TestMethod&quot; );\n      array&lt;ParameterInfo^&gt;^p = m-&gt;GetParameters();\n\n      Console::WriteLine( &quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, assembly );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( assembly ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( t ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( m ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( p[ 0 ] ) );\n   }\n\nprivate:\n    static void ShowValueOrArray(CustomAttributeTypedArgument^ cata)\n    {\n        if (cata-&gt;Value-&gt;GetType() == ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;::typeid)\n        {\n            Console::WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata-&gt;ArgumentType);\n\n            for each (CustomAttributeTypedArgument^ cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;^) cata-&gt;Value)\n            {\n                Console::WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement-&gt;ArgumentType, cataElement-&gt;Value);\n            }\n        }\n        else\n        {\n            Console::WriteLine( &quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n               cata-&gt;ArgumentType, cata-&gt;Value );\n        }\n    }\n\n   static void ShowAttributeData( IList&lt; CustomAttributeData^ &gt;^ attributes )\n   {\n      for each ( CustomAttributeData^ cad in attributes )\n      {\n         Console::WriteLine( &quot;   {0}&quot;, cad );\n         Console::WriteLine( &quot;      Constructor: &#39;{0}&#39;&quot;, cad-&gt;Constructor );\n\n         Console::WriteLine( &quot;      Constructor arguments:&quot; );\n         for each ( CustomAttributeTypedArgument^ cata in cad-&gt;ConstructorArguments )\n         {\n            ShowValueOrArray(cata);\n         }\n\n         Console::WriteLine( &quot;      Named arguments:&quot; );\n         for each ( CustomAttributeNamedArgument cana in cad-&gt;NamedArguments )\n         {\n            Console::WriteLine( &quot;         MemberInfo: &#39;{0}&#39;&quot;, cana.MemberInfo );\n            ShowValueOrArray(cana.TypedValue);\n         }\n      }\n   }\n};\n\nint main()\n{\n   Test::Main();\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomAttributeData#1\">Imports System\nImports System.Reflection\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\n&#39; The example attribute is applied to the assembly.\n&lt;Assembly:Example(ExampleKind.ThirdKind, Note:=&quot;This is a note on the assembly.&quot;)&gt;\n\n&#39; An enumeration used by the ExampleAttribute class.\nPublic Enum ExampleKind\n    FirstKind\n    SecondKind\n    ThirdKind\n    FourthKind\nEnd Enum\n\n&#39; An example attribute. The attribute can be applied to all\n&#39; targets, from assemblies to parameters.\n&#39;\n&lt;AttributeUsage(AttributeTargets.All)&gt; _\nPublic Class ExampleAttribute\n    Inherits Attribute\n\n    &#39; Data for properties.\n    Private kindValue As ExampleKind\n    Private noteValue As String\n    Private arrayStrings() As String\n    Private arrayNumbers() As Integer\n\n    &#39; Constructors. The parameterless constructor (.ctor) calls\n    &#39; the constructor that specifies ExampleKind and an array of\n    &#39; strings, and supplies the default values.\n    &#39;\n    Public Sub New(ByVal initKind As ExampleKind, ByVal initStrings() As String)\n        kindValue = initKind\n        arrayStrings = initStrings\n    End Sub\n    Public Sub New(ByVal initKind As ExampleKind)\n        Me.New(initKind, Nothing)\n    End Sub\n    Public Sub New()\n        Me.New(ExampleKind.FirstKind, Nothing)\n    End Sub\n\n    &#39; Properties. The Note and Numbers properties must be read/write, so they \n    &#39; can be used as named parameters.\n    &#39;\n    Public ReadOnly Property Kind As ExampleKind\n        Get\n            Return kindValue \n        End Get\n    End Property\n    Public ReadOnly Property Strings As String()\n        Get\n            Return arrayStrings \n        End Get\n    End Property\n    Public Property Note As String\n        Get\n            Return noteValue \n        End Get\n        Set\n            noteValue = value\n        End Set\n    End Property\n    Public Property Numbers As Integer()\n        Get\n            Return arrayNumbers \n        End Get\n        Set\n            arrayNumbers = value\n        End Set\n    End Property\nEnd Class\n\n&#39; The example attribute is applied to the test class.\n&#39;\n&lt;Example(ExampleKind.SecondKind, _\n         New String() { &quot;String array argument, line 1&quot;, _\n                        &quot;String array argument, line 2&quot;, _\n                        &quot;String array argument, line 3&quot; }, _\n         Note := &quot;This is a note on the class.&quot;, _\n         Numbers := New Integer() { 53, 57, 59 })&gt; _\nPublic Class Test\n    &#39; The example attribute is applied to a method, using the\n    &#39; parameterless constructor and supplying a named argument.\n    &#39; The attribute is also applied to the method parameter.\n    &#39;\n    &lt;Example(Note:=&quot;This is a note on a method.&quot;)&gt; _\n    Public Sub TestMethod(&lt;Example()&gt; ByVal arg As Object)\n    End Sub\n\n    &#39; Sub Main gets objects representing the assembly, the test\n    &#39; type, the test method, and the method parameter. Custom\n    &#39; attribute data is displayed for each of these.\n    &#39;\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = Assembly.ReflectionOnlyLoad(&quot;source&quot;)\n        Dim t As Type = asm.GetType(&quot;Test&quot;)\n        Dim m As MethodInfo = t.GetMethod(&quot;TestMethod&quot;)\n        Dim p() As ParameterInfo = m.GetParameters()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for assembly: &#39;{0}&#39;&quot;, asm)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for type: &#39;{0}&#39;&quot;, t)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for member: &#39;{0}&#39;&quot;, m)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for parameter: &#39;{0}&#39;&quot;, p)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p(0)))\n    End Sub\n\n    Private Shared Sub ShowAttributeData( _\n        ByVal attributes As IList(Of CustomAttributeData))\n\n        For Each cad As CustomAttributeData _\n            In CType(attributes, IEnumerable(Of CustomAttributeData))\n\n            Console.WriteLine(&quot;   {0}&quot;, cad)\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor)\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;)\n            For Each cata As CustomAttributeTypedArgument _\n                In CType(cad.ConstructorArguments, IEnumerable(Of CustomAttributeTypedArgument))\n\n                ShowValueOrArray(cata)\n            Next\n\n            Console.WriteLine(&quot;      Named arguments:&quot;)\n            For Each cana As CustomAttributeNamedArgument _\n                In CType(cad.NamedArguments, IEnumerable(Of CustomAttributeNamedArgument))\n\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, _\n                    cana.MemberInfo)\n                ShowValueOrArray(cana.TypedValue)\n            Next\n        Next\n    End Sub\n\n    Private Shared Sub ShowValueOrArray(ByVal cata As CustomAttributeTypedArgument)\n        If cata.Value.GetType() Is GetType(ReadOnlyCollection(Of CustomAttributeTypedArgument)) Then\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType)\n\n            For Each cataElement As CustomAttributeTypedArgument In cata.Value\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                    cataElement.ArgumentType, cataElement.Value)\n            Next\n        Else\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                cata.ArgumentType, cata.Value)\n        End If       \n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Attributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n&#39;   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n&#39;      Constructor: &#39;Void .ctor(Int32)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n&#39;      Named arguments:\n&#39;   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n&#39;         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n&#39;   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n&#39;\n&#39;Attributes for type: &#39;Test&#39;\n&#39;   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n&#39;         Array of &#39;System.String[]&#39;:\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n&#39;         MemberInfo: &#39;Int32[] Numbers&#39;\n&#39;         Array of &#39;System.Int32[]&#39;:\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n&#39;\n&#39;Attributes for member: &#39;Void TestMethod(System.Object)&#39;\n&#39;   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n&#39;\n&#39;Attributes for parameter: &#39;System.Object arg&#39;\n&#39;   [ExampleAttribute()]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_NamedArguments\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_NamedArguments_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NamedArguments</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of named arguments specified for the attribute instance represented by the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeNamedArgument&gt; NamedArguments { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of structures that represent the named arguments specified for the custom attribute instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the Reflection-only context.  </p>\n<p> The list that is returned contains only the named arguments that were specified for the attribute instance.  </p>\n<p> Use the <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_ConstructorArguments_\" data-linktype=\"relative-path\">ConstructorArguments</a> method to get the positional arguments that were specified for the attribute instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  </p>\n<p> The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  </p>\n<p> The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  </p>\n<p> The NamedArguments property is used in the <code>ShowAttributeData</code> method that displays custom attribute data. In this code example, this property is used to display the list of named arguments specified for the attribute.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomAttributeData#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind.ThirdKind, Note=&quot;This is a note on the assembly.&quot;)]\n\n// An enumeration used by the ExampleAttribute class.\npublic enum ExampleKind\n{\n    FirstKind, \n    SecondKind, \n    ThirdKind, \n    FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets.All)]\npublic class ExampleAttribute : Attribute\n{\n    // Data for properties.\n    private ExampleKind kindValue;\n    private string noteValue;\n    private string[] arrayStrings;\n    private int[] arrayNumbers;\n\n    // Constructors. The parameterless constructor (.ctor) calls\n    // the constructor that specifies ExampleKind and an array of \n    // strings, and supplies the default values.\n    //\n    public ExampleAttribute(ExampleKind initKind, string[] initStrings)\n    {\n        kindValue = initKind;\n        arrayStrings = initStrings;\n    }\n    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}\n    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}\n\n    // Properties. The Note and Numbers properties must be read/write, so they\n    // can be used as named parameters.\n    //\n    public ExampleKind Kind { get { return kindValue; }}\n    public string[] Strings { get { return arrayStrings; }}\n    public string Note    \n    {\n        get { return noteValue; }\n        set { noteValue = value; }\n    }\n    public int[] Numbers\n    {\n        get { return arrayNumbers; }\n        set { arrayNumbers = value; }\n    }\n}\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind.SecondKind, \n         new string[] { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = new int[] { 53, 57, 59 })] \npublic class Test\n{\n    // The example attribute is applied to a method, using the\n    // parameterless constructor and supplying a named argument.\n    // The attribute is also applied to the method parameter.\n    //\n    [Example(Note=&quot;This is a note on a method.&quot;)]\n    public void TestMethod([Example] object arg) { }\n\n    // Main() gets objects representing the assembly, the test\n    // type, the test method, and the method parameter. Custom\n    // attribute data is displayed for each of these.\n    //\n    public static void Main()\n    {\n        Assembly asm = Assembly.ReflectionOnlyLoad(&quot;Source&quot;);\n        Type t = asm.GetType(&quot;Test&quot;);\n        MethodInfo m = t.GetMethod(&quot;TestMethod&quot;);\n        ParameterInfo[] p = m.GetParameters();\n\n        Console.WriteLine(&quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, asm);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));\n        Console.WriteLine(&quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));\n        Console.WriteLine(&quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));\n        Console.WriteLine(&quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));\n    }\n\n    private static void ShowAttributeData(\n        IList&lt;CustomAttributeData&gt; attributes)\n    {\n        foreach( CustomAttributeData cad in attributes )\n        {\n            Console.WriteLine(&quot;   {0}&quot;, cad);\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor);\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;);\n            foreach( CustomAttributeTypedArgument cata \n                in cad.ConstructorArguments )\n            {\n                ShowValueOrArray(cata);\n            }\n\n            Console.WriteLine(&quot;      Named arguments:&quot;);\n            foreach( CustomAttributeNamedArgument cana \n                in cad.NamedArguments )\n            {\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, \n                    cana.MemberInfo);\n                ShowValueOrArray(cana.TypedValue);\n            }\n        }\n    }\n\n    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)\n    {\n        if (cata.Value.GetType() == typeof(ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;))\n        {\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType);\n\n            foreach (CustomAttributeTypedArgument cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;) cata.Value)\n            {\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement.ArgumentType, cataElement.Value);\n            }\n        }\n        else\n        {\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, \n                cata.ArgumentType, cata.Value);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"CustomAttributeData#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\n// An enumeration used by the ExampleAttribute class.\npublic enum class ExampleKind\n{\n   FirstKind, SecondKind, ThirdKind, FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets::All)]\npublic ref class ExampleAttribute: public Attribute\n{\nprivate:\n   // Data for properties.\n   ExampleKind kindValue;\n   String^ noteValue;\n   array&lt;String^&gt;^ arrayStrings;\n   array&lt;int&gt;^ arrayNumbers;\n\n   // Constructors. \n   void ExampleAttributeInitialize( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      kindValue = initKind;\n      arrayStrings = initStrings;\n   }\npublic:\n   ExampleAttribute()\n   {\n      ExampleAttributeInitialize( ExampleKind::FirstKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind )\n   {\n      ExampleAttributeInitialize( initKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      ExampleAttributeInitialize( initKind, initStrings );\n   }\n\n   // Properties. The Note and Numbers properties must be read/write, so they\n   // can be used as named parameters.\n   //\n   property ExampleKind Kind \n   {\n      ExampleKind get()\n      {\n         return kindValue;\n      }\n   }\n   property array&lt;String^&gt;^ Strings\n   {\n      array&lt;String^&gt;^ get()\n      {\n         return arrayStrings;\n      }\n   }\n   property String^ Note \n   {\n      String^ get()\n      {\n         return noteValue;\n      }\n\n      void set( String^ value )\n      {\n         noteValue = value;\n      }\n   }\n   property array&lt;int&gt;^ Numbers\n   {\n      array&lt;int&gt;^ get()\n      {\n         return arrayNumbers;\n      }\n\n      void set( array&lt;int&gt;^ value )\n      {\n         arrayNumbers = value;\n      }\n   }\n};\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind::ThirdKind,Note=&quot;This is a note on the assembly.&quot;)];\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind::SecondKind, \n         gcnew array&lt;String^&gt; { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = gcnew array&lt;int&gt; { 53, 57, 59 })] \npublic ref class Test\n{\npublic:\n   // The example attribute is applied to a method, using the\n   // parameterless constructor and supplying a named argument.\n   // The attribute is also applied to the method parameter.\n   //\n   [Example(Note=&quot;This is a note on a method.&quot;)]\n   void TestMethod( [Example] Object^ arg ){}\n\n   // Main() gets objects representing the assembly, the test\n   // type, the test method, and the method parameter. Custom\n   // attribute data is displayed for each of these.\n   //\n   static void Main()\n   {\n      Assembly^ assembly = Assembly::ReflectionOnlyLoad( &quot;Source&quot; );\n      Type^ t = assembly-&gt;GetType( &quot;Test&quot; );\n      MethodInfo^ m = t-&gt;GetMethod( &quot;TestMethod&quot; );\n      array&lt;ParameterInfo^&gt;^p = m-&gt;GetParameters();\n\n      Console::WriteLine( &quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, assembly );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( assembly ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( t ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( m ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( p[ 0 ] ) );\n   }\n\nprivate:\n    static void ShowValueOrArray(CustomAttributeTypedArgument^ cata)\n    {\n        if (cata-&gt;Value-&gt;GetType() == ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;::typeid)\n        {\n            Console::WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata-&gt;ArgumentType);\n\n            for each (CustomAttributeTypedArgument^ cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;^) cata-&gt;Value)\n            {\n                Console::WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement-&gt;ArgumentType, cataElement-&gt;Value);\n            }\n        }\n        else\n        {\n            Console::WriteLine( &quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n               cata-&gt;ArgumentType, cata-&gt;Value );\n        }\n    }\n\n   static void ShowAttributeData( IList&lt; CustomAttributeData^ &gt;^ attributes )\n   {\n      for each ( CustomAttributeData^ cad in attributes )\n      {\n         Console::WriteLine( &quot;   {0}&quot;, cad );\n         Console::WriteLine( &quot;      Constructor: &#39;{0}&#39;&quot;, cad-&gt;Constructor );\n\n         Console::WriteLine( &quot;      Constructor arguments:&quot; );\n         for each ( CustomAttributeTypedArgument^ cata in cad-&gt;ConstructorArguments )\n         {\n            ShowValueOrArray(cata);\n         }\n\n         Console::WriteLine( &quot;      Named arguments:&quot; );\n         for each ( CustomAttributeNamedArgument cana in cad-&gt;NamedArguments )\n         {\n            Console::WriteLine( &quot;         MemberInfo: &#39;{0}&#39;&quot;, cana.MemberInfo );\n            ShowValueOrArray(cana.TypedValue);\n         }\n      }\n   }\n};\n\nint main()\n{\n   Test::Main();\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomAttributeData#1\">Imports System\nImports System.Reflection\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\n&#39; The example attribute is applied to the assembly.\n&lt;Assembly:Example(ExampleKind.ThirdKind, Note:=&quot;This is a note on the assembly.&quot;)&gt;\n\n&#39; An enumeration used by the ExampleAttribute class.\nPublic Enum ExampleKind\n    FirstKind\n    SecondKind\n    ThirdKind\n    FourthKind\nEnd Enum\n\n&#39; An example attribute. The attribute can be applied to all\n&#39; targets, from assemblies to parameters.\n&#39;\n&lt;AttributeUsage(AttributeTargets.All)&gt; _\nPublic Class ExampleAttribute\n    Inherits Attribute\n\n    &#39; Data for properties.\n    Private kindValue As ExampleKind\n    Private noteValue As String\n    Private arrayStrings() As String\n    Private arrayNumbers() As Integer\n\n    &#39; Constructors. The parameterless constructor (.ctor) calls\n    &#39; the constructor that specifies ExampleKind and an array of\n    &#39; strings, and supplies the default values.\n    &#39;\n    Public Sub New(ByVal initKind As ExampleKind, ByVal initStrings() As String)\n        kindValue = initKind\n        arrayStrings = initStrings\n    End Sub\n    Public Sub New(ByVal initKind As ExampleKind)\n        Me.New(initKind, Nothing)\n    End Sub\n    Public Sub New()\n        Me.New(ExampleKind.FirstKind, Nothing)\n    End Sub\n\n    &#39; Properties. The Note and Numbers properties must be read/write, so they \n    &#39; can be used as named parameters.\n    &#39;\n    Public ReadOnly Property Kind As ExampleKind\n        Get\n            Return kindValue \n        End Get\n    End Property\n    Public ReadOnly Property Strings As String()\n        Get\n            Return arrayStrings \n        End Get\n    End Property\n    Public Property Note As String\n        Get\n            Return noteValue \n        End Get\n        Set\n            noteValue = value\n        End Set\n    End Property\n    Public Property Numbers As Integer()\n        Get\n            Return arrayNumbers \n        End Get\n        Set\n            arrayNumbers = value\n        End Set\n    End Property\nEnd Class\n\n&#39; The example attribute is applied to the test class.\n&#39;\n&lt;Example(ExampleKind.SecondKind, _\n         New String() { &quot;String array argument, line 1&quot;, _\n                        &quot;String array argument, line 2&quot;, _\n                        &quot;String array argument, line 3&quot; }, _\n         Note := &quot;This is a note on the class.&quot;, _\n         Numbers := New Integer() { 53, 57, 59 })&gt; _\nPublic Class Test\n    &#39; The example attribute is applied to a method, using the\n    &#39; parameterless constructor and supplying a named argument.\n    &#39; The attribute is also applied to the method parameter.\n    &#39;\n    &lt;Example(Note:=&quot;This is a note on a method.&quot;)&gt; _\n    Public Sub TestMethod(&lt;Example()&gt; ByVal arg As Object)\n    End Sub\n\n    &#39; Sub Main gets objects representing the assembly, the test\n    &#39; type, the test method, and the method parameter. Custom\n    &#39; attribute data is displayed for each of these.\n    &#39;\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = Assembly.ReflectionOnlyLoad(&quot;source&quot;)\n        Dim t As Type = asm.GetType(&quot;Test&quot;)\n        Dim m As MethodInfo = t.GetMethod(&quot;TestMethod&quot;)\n        Dim p() As ParameterInfo = m.GetParameters()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for assembly: &#39;{0}&#39;&quot;, asm)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for type: &#39;{0}&#39;&quot;, t)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for member: &#39;{0}&#39;&quot;, m)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for parameter: &#39;{0}&#39;&quot;, p)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p(0)))\n    End Sub\n\n    Private Shared Sub ShowAttributeData( _\n        ByVal attributes As IList(Of CustomAttributeData))\n\n        For Each cad As CustomAttributeData _\n            In CType(attributes, IEnumerable(Of CustomAttributeData))\n\n            Console.WriteLine(&quot;   {0}&quot;, cad)\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor)\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;)\n            For Each cata As CustomAttributeTypedArgument _\n                In CType(cad.ConstructorArguments, IEnumerable(Of CustomAttributeTypedArgument))\n\n                ShowValueOrArray(cata)\n            Next\n\n            Console.WriteLine(&quot;      Named arguments:&quot;)\n            For Each cana As CustomAttributeNamedArgument _\n                In CType(cad.NamedArguments, IEnumerable(Of CustomAttributeNamedArgument))\n\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, _\n                    cana.MemberInfo)\n                ShowValueOrArray(cana.TypedValue)\n            Next\n        Next\n    End Sub\n\n    Private Shared Sub ShowValueOrArray(ByVal cata As CustomAttributeTypedArgument)\n        If cata.Value.GetType() Is GetType(ReadOnlyCollection(Of CustomAttributeTypedArgument)) Then\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType)\n\n            For Each cataElement As CustomAttributeTypedArgument In cata.Value\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                    cataElement.ArgumentType, cataElement.Value)\n            Next\n        Else\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                cata.ArgumentType, cata.Value)\n        End If       \n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Attributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n&#39;   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n&#39;      Constructor: &#39;Void .ctor(Int32)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n&#39;      Named arguments:\n&#39;   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n&#39;         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n&#39;   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n&#39;\n&#39;Attributes for type: &#39;Test&#39;\n&#39;   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n&#39;         Array of &#39;System.String[]&#39;:\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n&#39;         MemberInfo: &#39;Int32[] Numbers&#39;\n&#39;         Array of &#39;System.Int32[]&#39;:\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n&#39;\n&#39;Attributes for member: &#39;Void TestMethod(System.Object)&#39;\n&#39;   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n&#39;\n&#39;Attributes for parameter: &#39;System.Object arg&#39;\n&#39;   [ExampleAttribute()]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is equal to the current instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_GetCustomAttributes_System_Reflection_Assembly_\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Assembly)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.Assembly target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The assembly whose custom attribute data is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A list of objects that represent data about the attributes that have been applied to the target assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method provides an alternative to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method that can always be used in the Reflection-only context.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  </p>\n<p> The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  </p>\n<p> The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  </p>\n<p> The <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method is used in <code>Main()</code> to get the custom attributes applied to the assembly. The return value of the method is passed to the <code>ShowAttributeData</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomAttributeData#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind.ThirdKind, Note=&quot;This is a note on the assembly.&quot;)]\n\n// An enumeration used by the ExampleAttribute class.\npublic enum ExampleKind\n{\n    FirstKind, \n    SecondKind, \n    ThirdKind, \n    FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets.All)]\npublic class ExampleAttribute : Attribute\n{\n    // Data for properties.\n    private ExampleKind kindValue;\n    private string noteValue;\n    private string[] arrayStrings;\n    private int[] arrayNumbers;\n\n    // Constructors. The parameterless constructor (.ctor) calls\n    // the constructor that specifies ExampleKind and an array of \n    // strings, and supplies the default values.\n    //\n    public ExampleAttribute(ExampleKind initKind, string[] initStrings)\n    {\n        kindValue = initKind;\n        arrayStrings = initStrings;\n    }\n    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}\n    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}\n\n    // Properties. The Note and Numbers properties must be read/write, so they\n    // can be used as named parameters.\n    //\n    public ExampleKind Kind { get { return kindValue; }}\n    public string[] Strings { get { return arrayStrings; }}\n    public string Note    \n    {\n        get { return noteValue; }\n        set { noteValue = value; }\n    }\n    public int[] Numbers\n    {\n        get { return arrayNumbers; }\n        set { arrayNumbers = value; }\n    }\n}\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind.SecondKind, \n         new string[] { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = new int[] { 53, 57, 59 })] \npublic class Test\n{\n    // The example attribute is applied to a method, using the\n    // parameterless constructor and supplying a named argument.\n    // The attribute is also applied to the method parameter.\n    //\n    [Example(Note=&quot;This is a note on a method.&quot;)]\n    public void TestMethod([Example] object arg) { }\n\n    // Main() gets objects representing the assembly, the test\n    // type, the test method, and the method parameter. Custom\n    // attribute data is displayed for each of these.\n    //\n    public static void Main()\n    {\n        Assembly asm = Assembly.ReflectionOnlyLoad(&quot;Source&quot;);\n        Type t = asm.GetType(&quot;Test&quot;);\n        MethodInfo m = t.GetMethod(&quot;TestMethod&quot;);\n        ParameterInfo[] p = m.GetParameters();\n\n        Console.WriteLine(&quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, asm);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));\n        Console.WriteLine(&quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));\n        Console.WriteLine(&quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));\n        Console.WriteLine(&quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));\n    }\n\n    private static void ShowAttributeData(\n        IList&lt;CustomAttributeData&gt; attributes)\n    {\n        foreach( CustomAttributeData cad in attributes )\n        {\n            Console.WriteLine(&quot;   {0}&quot;, cad);\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor);\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;);\n            foreach( CustomAttributeTypedArgument cata \n                in cad.ConstructorArguments )\n            {\n                ShowValueOrArray(cata);\n            }\n\n            Console.WriteLine(&quot;      Named arguments:&quot;);\n            foreach( CustomAttributeNamedArgument cana \n                in cad.NamedArguments )\n            {\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, \n                    cana.MemberInfo);\n                ShowValueOrArray(cana.TypedValue);\n            }\n        }\n    }\n\n    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)\n    {\n        if (cata.Value.GetType() == typeof(ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;))\n        {\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType);\n\n            foreach (CustomAttributeTypedArgument cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;) cata.Value)\n            {\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement.ArgumentType, cataElement.Value);\n            }\n        }\n        else\n        {\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, \n                cata.ArgumentType, cata.Value);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"CustomAttributeData#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\n// An enumeration used by the ExampleAttribute class.\npublic enum class ExampleKind\n{\n   FirstKind, SecondKind, ThirdKind, FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets::All)]\npublic ref class ExampleAttribute: public Attribute\n{\nprivate:\n   // Data for properties.\n   ExampleKind kindValue;\n   String^ noteValue;\n   array&lt;String^&gt;^ arrayStrings;\n   array&lt;int&gt;^ arrayNumbers;\n\n   // Constructors. \n   void ExampleAttributeInitialize( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      kindValue = initKind;\n      arrayStrings = initStrings;\n   }\npublic:\n   ExampleAttribute()\n   {\n      ExampleAttributeInitialize( ExampleKind::FirstKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind )\n   {\n      ExampleAttributeInitialize( initKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      ExampleAttributeInitialize( initKind, initStrings );\n   }\n\n   // Properties. The Note and Numbers properties must be read/write, so they\n   // can be used as named parameters.\n   //\n   property ExampleKind Kind \n   {\n      ExampleKind get()\n      {\n         return kindValue;\n      }\n   }\n   property array&lt;String^&gt;^ Strings\n   {\n      array&lt;String^&gt;^ get()\n      {\n         return arrayStrings;\n      }\n   }\n   property String^ Note \n   {\n      String^ get()\n      {\n         return noteValue;\n      }\n\n      void set( String^ value )\n      {\n         noteValue = value;\n      }\n   }\n   property array&lt;int&gt;^ Numbers\n   {\n      array&lt;int&gt;^ get()\n      {\n         return arrayNumbers;\n      }\n\n      void set( array&lt;int&gt;^ value )\n      {\n         arrayNumbers = value;\n      }\n   }\n};\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind::ThirdKind,Note=&quot;This is a note on the assembly.&quot;)];\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind::SecondKind, \n         gcnew array&lt;String^&gt; { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = gcnew array&lt;int&gt; { 53, 57, 59 })] \npublic ref class Test\n{\npublic:\n   // The example attribute is applied to a method, using the\n   // parameterless constructor and supplying a named argument.\n   // The attribute is also applied to the method parameter.\n   //\n   [Example(Note=&quot;This is a note on a method.&quot;)]\n   void TestMethod( [Example] Object^ arg ){}\n\n   // Main() gets objects representing the assembly, the test\n   // type, the test method, and the method parameter. Custom\n   // attribute data is displayed for each of these.\n   //\n   static void Main()\n   {\n      Assembly^ assembly = Assembly::ReflectionOnlyLoad( &quot;Source&quot; );\n      Type^ t = assembly-&gt;GetType( &quot;Test&quot; );\n      MethodInfo^ m = t-&gt;GetMethod( &quot;TestMethod&quot; );\n      array&lt;ParameterInfo^&gt;^p = m-&gt;GetParameters();\n\n      Console::WriteLine( &quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, assembly );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( assembly ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( t ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( m ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( p[ 0 ] ) );\n   }\n\nprivate:\n    static void ShowValueOrArray(CustomAttributeTypedArgument^ cata)\n    {\n        if (cata-&gt;Value-&gt;GetType() == ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;::typeid)\n        {\n            Console::WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata-&gt;ArgumentType);\n\n            for each (CustomAttributeTypedArgument^ cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;^) cata-&gt;Value)\n            {\n                Console::WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement-&gt;ArgumentType, cataElement-&gt;Value);\n            }\n        }\n        else\n        {\n            Console::WriteLine( &quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n               cata-&gt;ArgumentType, cata-&gt;Value );\n        }\n    }\n\n   static void ShowAttributeData( IList&lt; CustomAttributeData^ &gt;^ attributes )\n   {\n      for each ( CustomAttributeData^ cad in attributes )\n      {\n         Console::WriteLine( &quot;   {0}&quot;, cad );\n         Console::WriteLine( &quot;      Constructor: &#39;{0}&#39;&quot;, cad-&gt;Constructor );\n\n         Console::WriteLine( &quot;      Constructor arguments:&quot; );\n         for each ( CustomAttributeTypedArgument^ cata in cad-&gt;ConstructorArguments )\n         {\n            ShowValueOrArray(cata);\n         }\n\n         Console::WriteLine( &quot;      Named arguments:&quot; );\n         for each ( CustomAttributeNamedArgument cana in cad-&gt;NamedArguments )\n         {\n            Console::WriteLine( &quot;         MemberInfo: &#39;{0}&#39;&quot;, cana.MemberInfo );\n            ShowValueOrArray(cana.TypedValue);\n         }\n      }\n   }\n};\n\nint main()\n{\n   Test::Main();\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomAttributeData#1\">Imports System\nImports System.Reflection\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\n&#39; The example attribute is applied to the assembly.\n&lt;Assembly:Example(ExampleKind.ThirdKind, Note:=&quot;This is a note on the assembly.&quot;)&gt;\n\n&#39; An enumeration used by the ExampleAttribute class.\nPublic Enum ExampleKind\n    FirstKind\n    SecondKind\n    ThirdKind\n    FourthKind\nEnd Enum\n\n&#39; An example attribute. The attribute can be applied to all\n&#39; targets, from assemblies to parameters.\n&#39;\n&lt;AttributeUsage(AttributeTargets.All)&gt; _\nPublic Class ExampleAttribute\n    Inherits Attribute\n\n    &#39; Data for properties.\n    Private kindValue As ExampleKind\n    Private noteValue As String\n    Private arrayStrings() As String\n    Private arrayNumbers() As Integer\n\n    &#39; Constructors. The parameterless constructor (.ctor) calls\n    &#39; the constructor that specifies ExampleKind and an array of\n    &#39; strings, and supplies the default values.\n    &#39;\n    Public Sub New(ByVal initKind As ExampleKind, ByVal initStrings() As String)\n        kindValue = initKind\n        arrayStrings = initStrings\n    End Sub\n    Public Sub New(ByVal initKind As ExampleKind)\n        Me.New(initKind, Nothing)\n    End Sub\n    Public Sub New()\n        Me.New(ExampleKind.FirstKind, Nothing)\n    End Sub\n\n    &#39; Properties. The Note and Numbers properties must be read/write, so they \n    &#39; can be used as named parameters.\n    &#39;\n    Public ReadOnly Property Kind As ExampleKind\n        Get\n            Return kindValue \n        End Get\n    End Property\n    Public ReadOnly Property Strings As String()\n        Get\n            Return arrayStrings \n        End Get\n    End Property\n    Public Property Note As String\n        Get\n            Return noteValue \n        End Get\n        Set\n            noteValue = value\n        End Set\n    End Property\n    Public Property Numbers As Integer()\n        Get\n            Return arrayNumbers \n        End Get\n        Set\n            arrayNumbers = value\n        End Set\n    End Property\nEnd Class\n\n&#39; The example attribute is applied to the test class.\n&#39;\n&lt;Example(ExampleKind.SecondKind, _\n         New String() { &quot;String array argument, line 1&quot;, _\n                        &quot;String array argument, line 2&quot;, _\n                        &quot;String array argument, line 3&quot; }, _\n         Note := &quot;This is a note on the class.&quot;, _\n         Numbers := New Integer() { 53, 57, 59 })&gt; _\nPublic Class Test\n    &#39; The example attribute is applied to a method, using the\n    &#39; parameterless constructor and supplying a named argument.\n    &#39; The attribute is also applied to the method parameter.\n    &#39;\n    &lt;Example(Note:=&quot;This is a note on a method.&quot;)&gt; _\n    Public Sub TestMethod(&lt;Example()&gt; ByVal arg As Object)\n    End Sub\n\n    &#39; Sub Main gets objects representing the assembly, the test\n    &#39; type, the test method, and the method parameter. Custom\n    &#39; attribute data is displayed for each of these.\n    &#39;\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = Assembly.ReflectionOnlyLoad(&quot;source&quot;)\n        Dim t As Type = asm.GetType(&quot;Test&quot;)\n        Dim m As MethodInfo = t.GetMethod(&quot;TestMethod&quot;)\n        Dim p() As ParameterInfo = m.GetParameters()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for assembly: &#39;{0}&#39;&quot;, asm)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for type: &#39;{0}&#39;&quot;, t)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for member: &#39;{0}&#39;&quot;, m)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for parameter: &#39;{0}&#39;&quot;, p)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p(0)))\n    End Sub\n\n    Private Shared Sub ShowAttributeData( _\n        ByVal attributes As IList(Of CustomAttributeData))\n\n        For Each cad As CustomAttributeData _\n            In CType(attributes, IEnumerable(Of CustomAttributeData))\n\n            Console.WriteLine(&quot;   {0}&quot;, cad)\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor)\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;)\n            For Each cata As CustomAttributeTypedArgument _\n                In CType(cad.ConstructorArguments, IEnumerable(Of CustomAttributeTypedArgument))\n\n                ShowValueOrArray(cata)\n            Next\n\n            Console.WriteLine(&quot;      Named arguments:&quot;)\n            For Each cana As CustomAttributeNamedArgument _\n                In CType(cad.NamedArguments, IEnumerable(Of CustomAttributeNamedArgument))\n\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, _\n                    cana.MemberInfo)\n                ShowValueOrArray(cana.TypedValue)\n            Next\n        Next\n    End Sub\n\n    Private Shared Sub ShowValueOrArray(ByVal cata As CustomAttributeTypedArgument)\n        If cata.Value.GetType() Is GetType(ReadOnlyCollection(Of CustomAttributeTypedArgument)) Then\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType)\n\n            For Each cataElement As CustomAttributeTypedArgument In cata.Value\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                    cataElement.ArgumentType, cataElement.Value)\n            Next\n        Else\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                cata.ArgumentType, cata.Value)\n        End If       \n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Attributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n&#39;   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n&#39;      Constructor: &#39;Void .ctor(Int32)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n&#39;      Named arguments:\n&#39;   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n&#39;         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n&#39;   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n&#39;\n&#39;Attributes for type: &#39;Test&#39;\n&#39;   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n&#39;         Array of &#39;System.String[]&#39;:\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n&#39;         MemberInfo: &#39;Int32[] Numbers&#39;\n&#39;         Array of &#39;System.Int32[]&#39;:\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n&#39;\n&#39;Attributes for member: &#39;Void TestMethod(System.Object)&#39;\n&#39;   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n&#39;\n&#39;Attributes for parameter: &#39;System.Object arg&#39;\n&#39;   [ExampleAttribute()]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_GetCustomAttributes_System_Reflection_MemberInfo_\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(MemberInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.MemberInfo target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The member whose attribute data is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A list of objects that represent data about the attributes that have been applied to the target member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overload gets custom attribute data for types, nested types, and type members, because the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> class and the classes in the <a class=\"xref\" href=\"system.reflection\" data-linktype=\"relative-path\">System.Reflection</a> namespace that represent type members all derive from <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  </p>\n<p> The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  </p>\n<p> The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  </p>\n<p> The <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method is used in <code>Main()</code> to get the custom attributes that were applied to a type and to a test method (<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> derives from <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>). The return value of <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> is passed to the <code>ShowAttributeData</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomAttributeData#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind.ThirdKind, Note=&quot;This is a note on the assembly.&quot;)]\n\n// An enumeration used by the ExampleAttribute class.\npublic enum ExampleKind\n{\n    FirstKind, \n    SecondKind, \n    ThirdKind, \n    FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets.All)]\npublic class ExampleAttribute : Attribute\n{\n    // Data for properties.\n    private ExampleKind kindValue;\n    private string noteValue;\n    private string[] arrayStrings;\n    private int[] arrayNumbers;\n\n    // Constructors. The parameterless constructor (.ctor) calls\n    // the constructor that specifies ExampleKind and an array of \n    // strings, and supplies the default values.\n    //\n    public ExampleAttribute(ExampleKind initKind, string[] initStrings)\n    {\n        kindValue = initKind;\n        arrayStrings = initStrings;\n    }\n    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}\n    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}\n\n    // Properties. The Note and Numbers properties must be read/write, so they\n    // can be used as named parameters.\n    //\n    public ExampleKind Kind { get { return kindValue; }}\n    public string[] Strings { get { return arrayStrings; }}\n    public string Note    \n    {\n        get { return noteValue; }\n        set { noteValue = value; }\n    }\n    public int[] Numbers\n    {\n        get { return arrayNumbers; }\n        set { arrayNumbers = value; }\n    }\n}\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind.SecondKind, \n         new string[] { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = new int[] { 53, 57, 59 })] \npublic class Test\n{\n    // The example attribute is applied to a method, using the\n    // parameterless constructor and supplying a named argument.\n    // The attribute is also applied to the method parameter.\n    //\n    [Example(Note=&quot;This is a note on a method.&quot;)]\n    public void TestMethod([Example] object arg) { }\n\n    // Main() gets objects representing the assembly, the test\n    // type, the test method, and the method parameter. Custom\n    // attribute data is displayed for each of these.\n    //\n    public static void Main()\n    {\n        Assembly asm = Assembly.ReflectionOnlyLoad(&quot;Source&quot;);\n        Type t = asm.GetType(&quot;Test&quot;);\n        MethodInfo m = t.GetMethod(&quot;TestMethod&quot;);\n        ParameterInfo[] p = m.GetParameters();\n\n        Console.WriteLine(&quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, asm);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));\n        Console.WriteLine(&quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));\n        Console.WriteLine(&quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));\n        Console.WriteLine(&quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));\n    }\n\n    private static void ShowAttributeData(\n        IList&lt;CustomAttributeData&gt; attributes)\n    {\n        foreach( CustomAttributeData cad in attributes )\n        {\n            Console.WriteLine(&quot;   {0}&quot;, cad);\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor);\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;);\n            foreach( CustomAttributeTypedArgument cata \n                in cad.ConstructorArguments )\n            {\n                ShowValueOrArray(cata);\n            }\n\n            Console.WriteLine(&quot;      Named arguments:&quot;);\n            foreach( CustomAttributeNamedArgument cana \n                in cad.NamedArguments )\n            {\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, \n                    cana.MemberInfo);\n                ShowValueOrArray(cana.TypedValue);\n            }\n        }\n    }\n\n    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)\n    {\n        if (cata.Value.GetType() == typeof(ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;))\n        {\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType);\n\n            foreach (CustomAttributeTypedArgument cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;) cata.Value)\n            {\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement.ArgumentType, cataElement.Value);\n            }\n        }\n        else\n        {\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, \n                cata.ArgumentType, cata.Value);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"CustomAttributeData#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\n// An enumeration used by the ExampleAttribute class.\npublic enum class ExampleKind\n{\n   FirstKind, SecondKind, ThirdKind, FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets::All)]\npublic ref class ExampleAttribute: public Attribute\n{\nprivate:\n   // Data for properties.\n   ExampleKind kindValue;\n   String^ noteValue;\n   array&lt;String^&gt;^ arrayStrings;\n   array&lt;int&gt;^ arrayNumbers;\n\n   // Constructors. \n   void ExampleAttributeInitialize( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      kindValue = initKind;\n      arrayStrings = initStrings;\n   }\npublic:\n   ExampleAttribute()\n   {\n      ExampleAttributeInitialize( ExampleKind::FirstKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind )\n   {\n      ExampleAttributeInitialize( initKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      ExampleAttributeInitialize( initKind, initStrings );\n   }\n\n   // Properties. The Note and Numbers properties must be read/write, so they\n   // can be used as named parameters.\n   //\n   property ExampleKind Kind \n   {\n      ExampleKind get()\n      {\n         return kindValue;\n      }\n   }\n   property array&lt;String^&gt;^ Strings\n   {\n      array&lt;String^&gt;^ get()\n      {\n         return arrayStrings;\n      }\n   }\n   property String^ Note \n   {\n      String^ get()\n      {\n         return noteValue;\n      }\n\n      void set( String^ value )\n      {\n         noteValue = value;\n      }\n   }\n   property array&lt;int&gt;^ Numbers\n   {\n      array&lt;int&gt;^ get()\n      {\n         return arrayNumbers;\n      }\n\n      void set( array&lt;int&gt;^ value )\n      {\n         arrayNumbers = value;\n      }\n   }\n};\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind::ThirdKind,Note=&quot;This is a note on the assembly.&quot;)];\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind::SecondKind, \n         gcnew array&lt;String^&gt; { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = gcnew array&lt;int&gt; { 53, 57, 59 })] \npublic ref class Test\n{\npublic:\n   // The example attribute is applied to a method, using the\n   // parameterless constructor and supplying a named argument.\n   // The attribute is also applied to the method parameter.\n   //\n   [Example(Note=&quot;This is a note on a method.&quot;)]\n   void TestMethod( [Example] Object^ arg ){}\n\n   // Main() gets objects representing the assembly, the test\n   // type, the test method, and the method parameter. Custom\n   // attribute data is displayed for each of these.\n   //\n   static void Main()\n   {\n      Assembly^ assembly = Assembly::ReflectionOnlyLoad( &quot;Source&quot; );\n      Type^ t = assembly-&gt;GetType( &quot;Test&quot; );\n      MethodInfo^ m = t-&gt;GetMethod( &quot;TestMethod&quot; );\n      array&lt;ParameterInfo^&gt;^p = m-&gt;GetParameters();\n\n      Console::WriteLine( &quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, assembly );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( assembly ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( t ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( m ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( p[ 0 ] ) );\n   }\n\nprivate:\n    static void ShowValueOrArray(CustomAttributeTypedArgument^ cata)\n    {\n        if (cata-&gt;Value-&gt;GetType() == ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;::typeid)\n        {\n            Console::WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata-&gt;ArgumentType);\n\n            for each (CustomAttributeTypedArgument^ cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;^) cata-&gt;Value)\n            {\n                Console::WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement-&gt;ArgumentType, cataElement-&gt;Value);\n            }\n        }\n        else\n        {\n            Console::WriteLine( &quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n               cata-&gt;ArgumentType, cata-&gt;Value );\n        }\n    }\n\n   static void ShowAttributeData( IList&lt; CustomAttributeData^ &gt;^ attributes )\n   {\n      for each ( CustomAttributeData^ cad in attributes )\n      {\n         Console::WriteLine( &quot;   {0}&quot;, cad );\n         Console::WriteLine( &quot;      Constructor: &#39;{0}&#39;&quot;, cad-&gt;Constructor );\n\n         Console::WriteLine( &quot;      Constructor arguments:&quot; );\n         for each ( CustomAttributeTypedArgument^ cata in cad-&gt;ConstructorArguments )\n         {\n            ShowValueOrArray(cata);\n         }\n\n         Console::WriteLine( &quot;      Named arguments:&quot; );\n         for each ( CustomAttributeNamedArgument cana in cad-&gt;NamedArguments )\n         {\n            Console::WriteLine( &quot;         MemberInfo: &#39;{0}&#39;&quot;, cana.MemberInfo );\n            ShowValueOrArray(cana.TypedValue);\n         }\n      }\n   }\n};\n\nint main()\n{\n   Test::Main();\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomAttributeData#1\">Imports System\nImports System.Reflection\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\n&#39; The example attribute is applied to the assembly.\n&lt;Assembly:Example(ExampleKind.ThirdKind, Note:=&quot;This is a note on the assembly.&quot;)&gt;\n\n&#39; An enumeration used by the ExampleAttribute class.\nPublic Enum ExampleKind\n    FirstKind\n    SecondKind\n    ThirdKind\n    FourthKind\nEnd Enum\n\n&#39; An example attribute. The attribute can be applied to all\n&#39; targets, from assemblies to parameters.\n&#39;\n&lt;AttributeUsage(AttributeTargets.All)&gt; _\nPublic Class ExampleAttribute\n    Inherits Attribute\n\n    &#39; Data for properties.\n    Private kindValue As ExampleKind\n    Private noteValue As String\n    Private arrayStrings() As String\n    Private arrayNumbers() As Integer\n\n    &#39; Constructors. The parameterless constructor (.ctor) calls\n    &#39; the constructor that specifies ExampleKind and an array of\n    &#39; strings, and supplies the default values.\n    &#39;\n    Public Sub New(ByVal initKind As ExampleKind, ByVal initStrings() As String)\n        kindValue = initKind\n        arrayStrings = initStrings\n    End Sub\n    Public Sub New(ByVal initKind As ExampleKind)\n        Me.New(initKind, Nothing)\n    End Sub\n    Public Sub New()\n        Me.New(ExampleKind.FirstKind, Nothing)\n    End Sub\n\n    &#39; Properties. The Note and Numbers properties must be read/write, so they \n    &#39; can be used as named parameters.\n    &#39;\n    Public ReadOnly Property Kind As ExampleKind\n        Get\n            Return kindValue \n        End Get\n    End Property\n    Public ReadOnly Property Strings As String()\n        Get\n            Return arrayStrings \n        End Get\n    End Property\n    Public Property Note As String\n        Get\n            Return noteValue \n        End Get\n        Set\n            noteValue = value\n        End Set\n    End Property\n    Public Property Numbers As Integer()\n        Get\n            Return arrayNumbers \n        End Get\n        Set\n            arrayNumbers = value\n        End Set\n    End Property\nEnd Class\n\n&#39; The example attribute is applied to the test class.\n&#39;\n&lt;Example(ExampleKind.SecondKind, _\n         New String() { &quot;String array argument, line 1&quot;, _\n                        &quot;String array argument, line 2&quot;, _\n                        &quot;String array argument, line 3&quot; }, _\n         Note := &quot;This is a note on the class.&quot;, _\n         Numbers := New Integer() { 53, 57, 59 })&gt; _\nPublic Class Test\n    &#39; The example attribute is applied to a method, using the\n    &#39; parameterless constructor and supplying a named argument.\n    &#39; The attribute is also applied to the method parameter.\n    &#39;\n    &lt;Example(Note:=&quot;This is a note on a method.&quot;)&gt; _\n    Public Sub TestMethod(&lt;Example()&gt; ByVal arg As Object)\n    End Sub\n\n    &#39; Sub Main gets objects representing the assembly, the test\n    &#39; type, the test method, and the method parameter. Custom\n    &#39; attribute data is displayed for each of these.\n    &#39;\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = Assembly.ReflectionOnlyLoad(&quot;source&quot;)\n        Dim t As Type = asm.GetType(&quot;Test&quot;)\n        Dim m As MethodInfo = t.GetMethod(&quot;TestMethod&quot;)\n        Dim p() As ParameterInfo = m.GetParameters()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for assembly: &#39;{0}&#39;&quot;, asm)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for type: &#39;{0}&#39;&quot;, t)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for member: &#39;{0}&#39;&quot;, m)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for parameter: &#39;{0}&#39;&quot;, p)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p(0)))\n    End Sub\n\n    Private Shared Sub ShowAttributeData( _\n        ByVal attributes As IList(Of CustomAttributeData))\n\n        For Each cad As CustomAttributeData _\n            In CType(attributes, IEnumerable(Of CustomAttributeData))\n\n            Console.WriteLine(&quot;   {0}&quot;, cad)\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor)\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;)\n            For Each cata As CustomAttributeTypedArgument _\n                In CType(cad.ConstructorArguments, IEnumerable(Of CustomAttributeTypedArgument))\n\n                ShowValueOrArray(cata)\n            Next\n\n            Console.WriteLine(&quot;      Named arguments:&quot;)\n            For Each cana As CustomAttributeNamedArgument _\n                In CType(cad.NamedArguments, IEnumerable(Of CustomAttributeNamedArgument))\n\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, _\n                    cana.MemberInfo)\n                ShowValueOrArray(cana.TypedValue)\n            Next\n        Next\n    End Sub\n\n    Private Shared Sub ShowValueOrArray(ByVal cata As CustomAttributeTypedArgument)\n        If cata.Value.GetType() Is GetType(ReadOnlyCollection(Of CustomAttributeTypedArgument)) Then\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType)\n\n            For Each cataElement As CustomAttributeTypedArgument In cata.Value\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                    cataElement.ArgumentType, cataElement.Value)\n            Next\n        Else\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                cata.ArgumentType, cata.Value)\n        End If       \n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Attributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n&#39;   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n&#39;      Constructor: &#39;Void .ctor(Int32)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n&#39;      Named arguments:\n&#39;   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n&#39;         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n&#39;   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n&#39;\n&#39;Attributes for type: &#39;Test&#39;\n&#39;   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n&#39;         Array of &#39;System.String[]&#39;:\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n&#39;         MemberInfo: &#39;Int32[] Numbers&#39;\n&#39;         Array of &#39;System.Int32[]&#39;:\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n&#39;\n&#39;Attributes for member: &#39;Void TestMethod(System.Object)&#39;\n&#39;   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n&#39;\n&#39;Attributes for parameter: &#39;System.Object arg&#39;\n&#39;   [ExampleAttribute()]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_GetCustomAttributes_System_Reflection_Module_\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Module)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.Module target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The module whose custom attribute data is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A list of objects that represent data about the attributes that have been applied to the target module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_GetCustomAttributes_System_Reflection_ParameterInfo_\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(ParameterInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.ParameterInfo target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter whose attribute data is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A list of objects that represent data about the attributes that have been applied to the target parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method provides an alternative to the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method that can always be used in the Reflection-only context.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  </p>\n<p> The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  </p>\n<p> The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  </p>\n<p> The <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method is used in <code>Main()</code> to retrieve the custom attributes applied to a parameter of a test method. The return value of <a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> is passed to the <code>ShowAttributeData</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomAttributeData#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind.ThirdKind, Note=&quot;This is a note on the assembly.&quot;)]\n\n// An enumeration used by the ExampleAttribute class.\npublic enum ExampleKind\n{\n    FirstKind, \n    SecondKind, \n    ThirdKind, \n    FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets.All)]\npublic class ExampleAttribute : Attribute\n{\n    // Data for properties.\n    private ExampleKind kindValue;\n    private string noteValue;\n    private string[] arrayStrings;\n    private int[] arrayNumbers;\n\n    // Constructors. The parameterless constructor (.ctor) calls\n    // the constructor that specifies ExampleKind and an array of \n    // strings, and supplies the default values.\n    //\n    public ExampleAttribute(ExampleKind initKind, string[] initStrings)\n    {\n        kindValue = initKind;\n        arrayStrings = initStrings;\n    }\n    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}\n    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}\n\n    // Properties. The Note and Numbers properties must be read/write, so they\n    // can be used as named parameters.\n    //\n    public ExampleKind Kind { get { return kindValue; }}\n    public string[] Strings { get { return arrayStrings; }}\n    public string Note    \n    {\n        get { return noteValue; }\n        set { noteValue = value; }\n    }\n    public int[] Numbers\n    {\n        get { return arrayNumbers; }\n        set { arrayNumbers = value; }\n    }\n}\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind.SecondKind, \n         new string[] { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = new int[] { 53, 57, 59 })] \npublic class Test\n{\n    // The example attribute is applied to a method, using the\n    // parameterless constructor and supplying a named argument.\n    // The attribute is also applied to the method parameter.\n    //\n    [Example(Note=&quot;This is a note on a method.&quot;)]\n    public void TestMethod([Example] object arg) { }\n\n    // Main() gets objects representing the assembly, the test\n    // type, the test method, and the method parameter. Custom\n    // attribute data is displayed for each of these.\n    //\n    public static void Main()\n    {\n        Assembly asm = Assembly.ReflectionOnlyLoad(&quot;Source&quot;);\n        Type t = asm.GetType(&quot;Test&quot;);\n        MethodInfo m = t.GetMethod(&quot;TestMethod&quot;);\n        ParameterInfo[] p = m.GetParameters();\n\n        Console.WriteLine(&quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, asm);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));\n        Console.WriteLine(&quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));\n        Console.WriteLine(&quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));\n        Console.WriteLine(&quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));\n    }\n\n    private static void ShowAttributeData(\n        IList&lt;CustomAttributeData&gt; attributes)\n    {\n        foreach( CustomAttributeData cad in attributes )\n        {\n            Console.WriteLine(&quot;   {0}&quot;, cad);\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor);\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;);\n            foreach( CustomAttributeTypedArgument cata \n                in cad.ConstructorArguments )\n            {\n                ShowValueOrArray(cata);\n            }\n\n            Console.WriteLine(&quot;      Named arguments:&quot;);\n            foreach( CustomAttributeNamedArgument cana \n                in cad.NamedArguments )\n            {\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, \n                    cana.MemberInfo);\n                ShowValueOrArray(cana.TypedValue);\n            }\n        }\n    }\n\n    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)\n    {\n        if (cata.Value.GetType() == typeof(ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;))\n        {\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType);\n\n            foreach (CustomAttributeTypedArgument cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;) cata.Value)\n            {\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement.ArgumentType, cataElement.Value);\n            }\n        }\n        else\n        {\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, \n                cata.ArgumentType, cata.Value);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"CustomAttributeData#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\n// An enumeration used by the ExampleAttribute class.\npublic enum class ExampleKind\n{\n   FirstKind, SecondKind, ThirdKind, FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets::All)]\npublic ref class ExampleAttribute: public Attribute\n{\nprivate:\n   // Data for properties.\n   ExampleKind kindValue;\n   String^ noteValue;\n   array&lt;String^&gt;^ arrayStrings;\n   array&lt;int&gt;^ arrayNumbers;\n\n   // Constructors. \n   void ExampleAttributeInitialize( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      kindValue = initKind;\n      arrayStrings = initStrings;\n   }\npublic:\n   ExampleAttribute()\n   {\n      ExampleAttributeInitialize( ExampleKind::FirstKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind )\n   {\n      ExampleAttributeInitialize( initKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      ExampleAttributeInitialize( initKind, initStrings );\n   }\n\n   // Properties. The Note and Numbers properties must be read/write, so they\n   // can be used as named parameters.\n   //\n   property ExampleKind Kind \n   {\n      ExampleKind get()\n      {\n         return kindValue;\n      }\n   }\n   property array&lt;String^&gt;^ Strings\n   {\n      array&lt;String^&gt;^ get()\n      {\n         return arrayStrings;\n      }\n   }\n   property String^ Note \n   {\n      String^ get()\n      {\n         return noteValue;\n      }\n\n      void set( String^ value )\n      {\n         noteValue = value;\n      }\n   }\n   property array&lt;int&gt;^ Numbers\n   {\n      array&lt;int&gt;^ get()\n      {\n         return arrayNumbers;\n      }\n\n      void set( array&lt;int&gt;^ value )\n      {\n         arrayNumbers = value;\n      }\n   }\n};\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind::ThirdKind,Note=&quot;This is a note on the assembly.&quot;)];\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind::SecondKind, \n         gcnew array&lt;String^&gt; { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = gcnew array&lt;int&gt; { 53, 57, 59 })] \npublic ref class Test\n{\npublic:\n   // The example attribute is applied to a method, using the\n   // parameterless constructor and supplying a named argument.\n   // The attribute is also applied to the method parameter.\n   //\n   [Example(Note=&quot;This is a note on a method.&quot;)]\n   void TestMethod( [Example] Object^ arg ){}\n\n   // Main() gets objects representing the assembly, the test\n   // type, the test method, and the method parameter. Custom\n   // attribute data is displayed for each of these.\n   //\n   static void Main()\n   {\n      Assembly^ assembly = Assembly::ReflectionOnlyLoad( &quot;Source&quot; );\n      Type^ t = assembly-&gt;GetType( &quot;Test&quot; );\n      MethodInfo^ m = t-&gt;GetMethod( &quot;TestMethod&quot; );\n      array&lt;ParameterInfo^&gt;^p = m-&gt;GetParameters();\n\n      Console::WriteLine( &quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, assembly );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( assembly ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( t ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( m ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( p[ 0 ] ) );\n   }\n\nprivate:\n    static void ShowValueOrArray(CustomAttributeTypedArgument^ cata)\n    {\n        if (cata-&gt;Value-&gt;GetType() == ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;::typeid)\n        {\n            Console::WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata-&gt;ArgumentType);\n\n            for each (CustomAttributeTypedArgument^ cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;^) cata-&gt;Value)\n            {\n                Console::WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement-&gt;ArgumentType, cataElement-&gt;Value);\n            }\n        }\n        else\n        {\n            Console::WriteLine( &quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n               cata-&gt;ArgumentType, cata-&gt;Value );\n        }\n    }\n\n   static void ShowAttributeData( IList&lt; CustomAttributeData^ &gt;^ attributes )\n   {\n      for each ( CustomAttributeData^ cad in attributes )\n      {\n         Console::WriteLine( &quot;   {0}&quot;, cad );\n         Console::WriteLine( &quot;      Constructor: &#39;{0}&#39;&quot;, cad-&gt;Constructor );\n\n         Console::WriteLine( &quot;      Constructor arguments:&quot; );\n         for each ( CustomAttributeTypedArgument^ cata in cad-&gt;ConstructorArguments )\n         {\n            ShowValueOrArray(cata);\n         }\n\n         Console::WriteLine( &quot;      Named arguments:&quot; );\n         for each ( CustomAttributeNamedArgument cana in cad-&gt;NamedArguments )\n         {\n            Console::WriteLine( &quot;         MemberInfo: &#39;{0}&#39;&quot;, cana.MemberInfo );\n            ShowValueOrArray(cana.TypedValue);\n         }\n      }\n   }\n};\n\nint main()\n{\n   Test::Main();\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomAttributeData#1\">Imports System\nImports System.Reflection\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\n&#39; The example attribute is applied to the assembly.\n&lt;Assembly:Example(ExampleKind.ThirdKind, Note:=&quot;This is a note on the assembly.&quot;)&gt;\n\n&#39; An enumeration used by the ExampleAttribute class.\nPublic Enum ExampleKind\n    FirstKind\n    SecondKind\n    ThirdKind\n    FourthKind\nEnd Enum\n\n&#39; An example attribute. The attribute can be applied to all\n&#39; targets, from assemblies to parameters.\n&#39;\n&lt;AttributeUsage(AttributeTargets.All)&gt; _\nPublic Class ExampleAttribute\n    Inherits Attribute\n\n    &#39; Data for properties.\n    Private kindValue As ExampleKind\n    Private noteValue As String\n    Private arrayStrings() As String\n    Private arrayNumbers() As Integer\n\n    &#39; Constructors. The parameterless constructor (.ctor) calls\n    &#39; the constructor that specifies ExampleKind and an array of\n    &#39; strings, and supplies the default values.\n    &#39;\n    Public Sub New(ByVal initKind As ExampleKind, ByVal initStrings() As String)\n        kindValue = initKind\n        arrayStrings = initStrings\n    End Sub\n    Public Sub New(ByVal initKind As ExampleKind)\n        Me.New(initKind, Nothing)\n    End Sub\n    Public Sub New()\n        Me.New(ExampleKind.FirstKind, Nothing)\n    End Sub\n\n    &#39; Properties. The Note and Numbers properties must be read/write, so they \n    &#39; can be used as named parameters.\n    &#39;\n    Public ReadOnly Property Kind As ExampleKind\n        Get\n            Return kindValue \n        End Get\n    End Property\n    Public ReadOnly Property Strings As String()\n        Get\n            Return arrayStrings \n        End Get\n    End Property\n    Public Property Note As String\n        Get\n            Return noteValue \n        End Get\n        Set\n            noteValue = value\n        End Set\n    End Property\n    Public Property Numbers As Integer()\n        Get\n            Return arrayNumbers \n        End Get\n        Set\n            arrayNumbers = value\n        End Set\n    End Property\nEnd Class\n\n&#39; The example attribute is applied to the test class.\n&#39;\n&lt;Example(ExampleKind.SecondKind, _\n         New String() { &quot;String array argument, line 1&quot;, _\n                        &quot;String array argument, line 2&quot;, _\n                        &quot;String array argument, line 3&quot; }, _\n         Note := &quot;This is a note on the class.&quot;, _\n         Numbers := New Integer() { 53, 57, 59 })&gt; _\nPublic Class Test\n    &#39; The example attribute is applied to a method, using the\n    &#39; parameterless constructor and supplying a named argument.\n    &#39; The attribute is also applied to the method parameter.\n    &#39;\n    &lt;Example(Note:=&quot;This is a note on a method.&quot;)&gt; _\n    Public Sub TestMethod(&lt;Example()&gt; ByVal arg As Object)\n    End Sub\n\n    &#39; Sub Main gets objects representing the assembly, the test\n    &#39; type, the test method, and the method parameter. Custom\n    &#39; attribute data is displayed for each of these.\n    &#39;\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = Assembly.ReflectionOnlyLoad(&quot;source&quot;)\n        Dim t As Type = asm.GetType(&quot;Test&quot;)\n        Dim m As MethodInfo = t.GetMethod(&quot;TestMethod&quot;)\n        Dim p() As ParameterInfo = m.GetParameters()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for assembly: &#39;{0}&#39;&quot;, asm)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for type: &#39;{0}&#39;&quot;, t)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for member: &#39;{0}&#39;&quot;, m)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for parameter: &#39;{0}&#39;&quot;, p)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p(0)))\n    End Sub\n\n    Private Shared Sub ShowAttributeData( _\n        ByVal attributes As IList(Of CustomAttributeData))\n\n        For Each cad As CustomAttributeData _\n            In CType(attributes, IEnumerable(Of CustomAttributeData))\n\n            Console.WriteLine(&quot;   {0}&quot;, cad)\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor)\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;)\n            For Each cata As CustomAttributeTypedArgument _\n                In CType(cad.ConstructorArguments, IEnumerable(Of CustomAttributeTypedArgument))\n\n                ShowValueOrArray(cata)\n            Next\n\n            Console.WriteLine(&quot;      Named arguments:&quot;)\n            For Each cana As CustomAttributeNamedArgument _\n                In CType(cad.NamedArguments, IEnumerable(Of CustomAttributeNamedArgument))\n\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, _\n                    cana.MemberInfo)\n                ShowValueOrArray(cana.TypedValue)\n            Next\n        Next\n    End Sub\n\n    Private Shared Sub ShowValueOrArray(ByVal cata As CustomAttributeTypedArgument)\n        If cata.Value.GetType() Is GetType(ReadOnlyCollection(Of CustomAttributeTypedArgument)) Then\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType)\n\n            For Each cataElement As CustomAttributeTypedArgument In cata.Value\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                    cataElement.ArgumentType, cataElement.Value)\n            Next\n        Else\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                cata.ArgumentType, cata.Value)\n        End If       \n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Attributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n&#39;   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n&#39;      Constructor: &#39;Void .ctor(Int32)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n&#39;      Named arguments:\n&#39;   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n&#39;         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n&#39;   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n&#39;\n&#39;Attributes for type: &#39;Test&#39;\n&#39;   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n&#39;         Array of &#39;System.String[]&#39;:\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n&#39;         MemberInfo: &#39;Int32[] Numbers&#39;\n&#39;         Array of &#39;System.Int32[]&#39;:\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n&#39;\n&#39;Attributes for member: &#39;Void TestMethod(System.Object)&#39;\n&#39;   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n&#39;\n&#39;Attributes for parameter: &#39;System.Object arg&#39;\n&#39;   [ExampleAttribute()]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for a particular type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_CustomAttributeData_ToString\">\r\n    \r\n            <a id=\"System_Reflection_CustomAttributeData_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representation of the custom attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string value that represents the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string value includes the attribute type, the attribute parameters, and the named parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  </p>\n<p> The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  </p>\n<p> The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  </p>\n<p> In this example, the ToString method is used in the <code>ShowAttributeData</code> method, to identify the attribute whose data is being displayed.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomAttributeData#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind.ThirdKind, Note=&quot;This is a note on the assembly.&quot;)]\n\n// An enumeration used by the ExampleAttribute class.\npublic enum ExampleKind\n{\n    FirstKind, \n    SecondKind, \n    ThirdKind, \n    FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets.All)]\npublic class ExampleAttribute : Attribute\n{\n    // Data for properties.\n    private ExampleKind kindValue;\n    private string noteValue;\n    private string[] arrayStrings;\n    private int[] arrayNumbers;\n\n    // Constructors. The parameterless constructor (.ctor) calls\n    // the constructor that specifies ExampleKind and an array of \n    // strings, and supplies the default values.\n    //\n    public ExampleAttribute(ExampleKind initKind, string[] initStrings)\n    {\n        kindValue = initKind;\n        arrayStrings = initStrings;\n    }\n    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}\n    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}\n\n    // Properties. The Note and Numbers properties must be read/write, so they\n    // can be used as named parameters.\n    //\n    public ExampleKind Kind { get { return kindValue; }}\n    public string[] Strings { get { return arrayStrings; }}\n    public string Note    \n    {\n        get { return noteValue; }\n        set { noteValue = value; }\n    }\n    public int[] Numbers\n    {\n        get { return arrayNumbers; }\n        set { arrayNumbers = value; }\n    }\n}\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind.SecondKind, \n         new string[] { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = new int[] { 53, 57, 59 })] \npublic class Test\n{\n    // The example attribute is applied to a method, using the\n    // parameterless constructor and supplying a named argument.\n    // The attribute is also applied to the method parameter.\n    //\n    [Example(Note=&quot;This is a note on a method.&quot;)]\n    public void TestMethod([Example] object arg) { }\n\n    // Main() gets objects representing the assembly, the test\n    // type, the test method, and the method parameter. Custom\n    // attribute data is displayed for each of these.\n    //\n    public static void Main()\n    {\n        Assembly asm = Assembly.ReflectionOnlyLoad(&quot;Source&quot;);\n        Type t = asm.GetType(&quot;Test&quot;);\n        MethodInfo m = t.GetMethod(&quot;TestMethod&quot;);\n        ParameterInfo[] p = m.GetParameters();\n\n        Console.WriteLine(&quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, asm);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));\n        Console.WriteLine(&quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));\n        Console.WriteLine(&quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));\n        Console.WriteLine(&quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));\n    }\n\n    private static void ShowAttributeData(\n        IList&lt;CustomAttributeData&gt; attributes)\n    {\n        foreach( CustomAttributeData cad in attributes )\n        {\n            Console.WriteLine(&quot;   {0}&quot;, cad);\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor);\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;);\n            foreach( CustomAttributeTypedArgument cata \n                in cad.ConstructorArguments )\n            {\n                ShowValueOrArray(cata);\n            }\n\n            Console.WriteLine(&quot;      Named arguments:&quot;);\n            foreach( CustomAttributeNamedArgument cana \n                in cad.NamedArguments )\n            {\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, \n                    cana.MemberInfo);\n                ShowValueOrArray(cana.TypedValue);\n            }\n        }\n    }\n\n    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)\n    {\n        if (cata.Value.GetType() == typeof(ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;))\n        {\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType);\n\n            foreach (CustomAttributeTypedArgument cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;) cata.Value)\n            {\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement.ArgumentType, cataElement.Value);\n            }\n        }\n        else\n        {\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, \n                cata.ArgumentType, cata.Value);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"CustomAttributeData#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\n// An enumeration used by the ExampleAttribute class.\npublic enum class ExampleKind\n{\n   FirstKind, SecondKind, ThirdKind, FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets::All)]\npublic ref class ExampleAttribute: public Attribute\n{\nprivate:\n   // Data for properties.\n   ExampleKind kindValue;\n   String^ noteValue;\n   array&lt;String^&gt;^ arrayStrings;\n   array&lt;int&gt;^ arrayNumbers;\n\n   // Constructors. \n   void ExampleAttributeInitialize( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      kindValue = initKind;\n      arrayStrings = initStrings;\n   }\npublic:\n   ExampleAttribute()\n   {\n      ExampleAttributeInitialize( ExampleKind::FirstKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind )\n   {\n      ExampleAttributeInitialize( initKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      ExampleAttributeInitialize( initKind, initStrings );\n   }\n\n   // Properties. The Note and Numbers properties must be read/write, so they\n   // can be used as named parameters.\n   //\n   property ExampleKind Kind \n   {\n      ExampleKind get()\n      {\n         return kindValue;\n      }\n   }\n   property array&lt;String^&gt;^ Strings\n   {\n      array&lt;String^&gt;^ get()\n      {\n         return arrayStrings;\n      }\n   }\n   property String^ Note \n   {\n      String^ get()\n      {\n         return noteValue;\n      }\n\n      void set( String^ value )\n      {\n         noteValue = value;\n      }\n   }\n   property array&lt;int&gt;^ Numbers\n   {\n      array&lt;int&gt;^ get()\n      {\n         return arrayNumbers;\n      }\n\n      void set( array&lt;int&gt;^ value )\n      {\n         arrayNumbers = value;\n      }\n   }\n};\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind::ThirdKind,Note=&quot;This is a note on the assembly.&quot;)];\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind::SecondKind, \n         gcnew array&lt;String^&gt; { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = gcnew array&lt;int&gt; { 53, 57, 59 })] \npublic ref class Test\n{\npublic:\n   // The example attribute is applied to a method, using the\n   // parameterless constructor and supplying a named argument.\n   // The attribute is also applied to the method parameter.\n   //\n   [Example(Note=&quot;This is a note on a method.&quot;)]\n   void TestMethod( [Example] Object^ arg ){}\n\n   // Main() gets objects representing the assembly, the test\n   // type, the test method, and the method parameter. Custom\n   // attribute data is displayed for each of these.\n   //\n   static void Main()\n   {\n      Assembly^ assembly = Assembly::ReflectionOnlyLoad( &quot;Source&quot; );\n      Type^ t = assembly-&gt;GetType( &quot;Test&quot; );\n      MethodInfo^ m = t-&gt;GetMethod( &quot;TestMethod&quot; );\n      array&lt;ParameterInfo^&gt;^p = m-&gt;GetParameters();\n\n      Console::WriteLine( &quot;\\r<br>Attributes for assembly: &#39;{0}&#39;&quot;, assembly );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( assembly ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for type: &#39;{0}&#39;&quot;, t );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( t ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for member: &#39;{0}&#39;&quot;, m );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( m ) );\n      Console::WriteLine( &quot;\\r<br>Attributes for parameter: &#39;{0}&#39;&quot;, p );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( p[ 0 ] ) );\n   }\n\nprivate:\n    static void ShowValueOrArray(CustomAttributeTypedArgument^ cata)\n    {\n        if (cata-&gt;Value-&gt;GetType() == ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;::typeid)\n        {\n            Console::WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata-&gt;ArgumentType);\n\n            for each (CustomAttributeTypedArgument^ cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;^) cata-&gt;Value)\n            {\n                Console::WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement-&gt;ArgumentType, cataElement-&gt;Value);\n            }\n        }\n        else\n        {\n            Console::WriteLine( &quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n               cata-&gt;ArgumentType, cata-&gt;Value );\n        }\n    }\n\n   static void ShowAttributeData( IList&lt; CustomAttributeData^ &gt;^ attributes )\n   {\n      for each ( CustomAttributeData^ cad in attributes )\n      {\n         Console::WriteLine( &quot;   {0}&quot;, cad );\n         Console::WriteLine( &quot;      Constructor: &#39;{0}&#39;&quot;, cad-&gt;Constructor );\n\n         Console::WriteLine( &quot;      Constructor arguments:&quot; );\n         for each ( CustomAttributeTypedArgument^ cata in cad-&gt;ConstructorArguments )\n         {\n            ShowValueOrArray(cata);\n         }\n\n         Console::WriteLine( &quot;      Named arguments:&quot; );\n         for each ( CustomAttributeNamedArgument cana in cad-&gt;NamedArguments )\n         {\n            Console::WriteLine( &quot;         MemberInfo: &#39;{0}&#39;&quot;, cana.MemberInfo );\n            ShowValueOrArray(cana.TypedValue);\n         }\n      }\n   }\n};\n\nint main()\n{\n   Test::Main();\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomAttributeData#1\">Imports System\nImports System.Reflection\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\n&#39; The example attribute is applied to the assembly.\n&lt;Assembly:Example(ExampleKind.ThirdKind, Note:=&quot;This is a note on the assembly.&quot;)&gt;\n\n&#39; An enumeration used by the ExampleAttribute class.\nPublic Enum ExampleKind\n    FirstKind\n    SecondKind\n    ThirdKind\n    FourthKind\nEnd Enum\n\n&#39; An example attribute. The attribute can be applied to all\n&#39; targets, from assemblies to parameters.\n&#39;\n&lt;AttributeUsage(AttributeTargets.All)&gt; _\nPublic Class ExampleAttribute\n    Inherits Attribute\n\n    &#39; Data for properties.\n    Private kindValue As ExampleKind\n    Private noteValue As String\n    Private arrayStrings() As String\n    Private arrayNumbers() As Integer\n\n    &#39; Constructors. The parameterless constructor (.ctor) calls\n    &#39; the constructor that specifies ExampleKind and an array of\n    &#39; strings, and supplies the default values.\n    &#39;\n    Public Sub New(ByVal initKind As ExampleKind, ByVal initStrings() As String)\n        kindValue = initKind\n        arrayStrings = initStrings\n    End Sub\n    Public Sub New(ByVal initKind As ExampleKind)\n        Me.New(initKind, Nothing)\n    End Sub\n    Public Sub New()\n        Me.New(ExampleKind.FirstKind, Nothing)\n    End Sub\n\n    &#39; Properties. The Note and Numbers properties must be read/write, so they \n    &#39; can be used as named parameters.\n    &#39;\n    Public ReadOnly Property Kind As ExampleKind\n        Get\n            Return kindValue \n        End Get\n    End Property\n    Public ReadOnly Property Strings As String()\n        Get\n            Return arrayStrings \n        End Get\n    End Property\n    Public Property Note As String\n        Get\n            Return noteValue \n        End Get\n        Set\n            noteValue = value\n        End Set\n    End Property\n    Public Property Numbers As Integer()\n        Get\n            Return arrayNumbers \n        End Get\n        Set\n            arrayNumbers = value\n        End Set\n    End Property\nEnd Class\n\n&#39; The example attribute is applied to the test class.\n&#39;\n&lt;Example(ExampleKind.SecondKind, _\n         New String() { &quot;String array argument, line 1&quot;, _\n                        &quot;String array argument, line 2&quot;, _\n                        &quot;String array argument, line 3&quot; }, _\n         Note := &quot;This is a note on the class.&quot;, _\n         Numbers := New Integer() { 53, 57, 59 })&gt; _\nPublic Class Test\n    &#39; The example attribute is applied to a method, using the\n    &#39; parameterless constructor and supplying a named argument.\n    &#39; The attribute is also applied to the method parameter.\n    &#39;\n    &lt;Example(Note:=&quot;This is a note on a method.&quot;)&gt; _\n    Public Sub TestMethod(&lt;Example()&gt; ByVal arg As Object)\n    End Sub\n\n    &#39; Sub Main gets objects representing the assembly, the test\n    &#39; type, the test method, and the method parameter. Custom\n    &#39; attribute data is displayed for each of these.\n    &#39;\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = Assembly.ReflectionOnlyLoad(&quot;source&quot;)\n        Dim t As Type = asm.GetType(&quot;Test&quot;)\n        Dim m As MethodInfo = t.GetMethod(&quot;TestMethod&quot;)\n        Dim p() As ParameterInfo = m.GetParameters()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for assembly: &#39;{0}&#39;&quot;, asm)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for type: &#39;{0}&#39;&quot;, t)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for member: &#39;{0}&#39;&quot;, m)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for parameter: &#39;{0}&#39;&quot;, p)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p(0)))\n    End Sub\n\n    Private Shared Sub ShowAttributeData( _\n        ByVal attributes As IList(Of CustomAttributeData))\n\n        For Each cad As CustomAttributeData _\n            In CType(attributes, IEnumerable(Of CustomAttributeData))\n\n            Console.WriteLine(&quot;   {0}&quot;, cad)\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor)\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;)\n            For Each cata As CustomAttributeTypedArgument _\n                In CType(cad.ConstructorArguments, IEnumerable(Of CustomAttributeTypedArgument))\n\n                ShowValueOrArray(cata)\n            Next\n\n            Console.WriteLine(&quot;      Named arguments:&quot;)\n            For Each cana As CustomAttributeNamedArgument _\n                In CType(cad.NamedArguments, IEnumerable(Of CustomAttributeNamedArgument))\n\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, _\n                    cana.MemberInfo)\n                ShowValueOrArray(cana.TypedValue)\n            Next\n        Next\n    End Sub\n\n    Private Shared Sub ShowValueOrArray(ByVal cata As CustomAttributeTypedArgument)\n        If cata.Value.GetType() Is GetType(ReadOnlyCollection(Of CustomAttributeTypedArgument)) Then\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType)\n\n            For Each cataElement As CustomAttributeTypedArgument In cata.Value\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                    cataElement.ArgumentType, cataElement.Value)\n            Next\n        Else\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                cata.ArgumentType, cata.Value)\n        End If       \n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Attributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n&#39;   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n&#39;      Constructor: &#39;Void .ctor(Int32)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n&#39;      Named arguments:\n&#39;   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n&#39;         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n&#39;   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n&#39;\n&#39;Attributes for type: &#39;Test&#39;\n&#39;   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n&#39;         Array of &#39;System.String[]&#39;:\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n&#39;         MemberInfo: &#39;Int32[] Numbers&#39;\n&#39;         Array of &#39;System.Int32[]&#39;:\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n&#39;\n&#39;Attributes for member: &#39;Void TestMethod(System.Object)&#39;\n&#39;   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n&#39;\n&#39;Attributes for parameter: &#39;System.Object arg&#39;\n&#39;   [ExampleAttribute()]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.CustomAttributeData.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.CustomAttributeData.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData.AttributeType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData.Constructor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData.ConstructorArguments\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData.NamedArguments\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeData.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"54a46043-1c55-44c4-883a-cb420d8de8b1\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection\\CustomAttributeData.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.CustomAttributeData\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.CustomAttributeData.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.CustomAttributeData.yml","open_to_public_contributors":true,"api_name":["System.Reflection.CustomAttributeData","System.Reflection.CustomAttributeData..ctor","System.Reflection.CustomAttributeData.AttributeType","System.Reflection.CustomAttributeData.Constructor","System.Reflection.CustomAttributeData.ConstructorArguments","System.Reflection.CustomAttributeData.Equals","System.Reflection.CustomAttributeData.GetCustomAttributes","System.Reflection.CustomAttributeData.GetHashCode","System.Reflection.CustomAttributeData.NamedArguments","System.Reflection.CustomAttributeData.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.CustomAttributeData","System::Reflection::CustomAttributeData","System.Reflection.CustomAttributeData.#ctor","System::Reflection::CustomAttributeData::#ctor","System.Reflection.CustomAttributeData.AttributeType","System::Reflection::CustomAttributeData::AttributeType","System.Reflection.CustomAttributeData.Constructor","System::Reflection::CustomAttributeData::Constructor","System.Reflection.CustomAttributeData.ConstructorArguments","System::Reflection::CustomAttributeData::ConstructorArguments","System.Reflection.CustomAttributeData.Equals","System::Reflection::CustomAttributeData::Equals","System.Reflection.CustomAttributeData.GetCustomAttributes","System::Reflection::CustomAttributeData::GetCustomAttributes","System.Reflection.CustomAttributeData.GetHashCode","System::Reflection::CustomAttributeData::GetHashCode","System.Reflection.CustomAttributeData.NamedArguments","System::Reflection::CustomAttributeData::NamedArguments","System.Reflection.CustomAttributeData.ToString","System::Reflection::CustomAttributeData::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"54a46043-1c55-44c4-883a-cb420d8de8b1","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection\\CustomAttributeData.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/CustomAttributeData.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CustomAttributeData class | Microsoft Docs","_op_ogTitle":"CustomAttributeData class","description":"Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.CustomAttributeData","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.customattributedata","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.customattributedata","fileRelativePath":"System.Reflection.CustomAttributeData.html"},"themesRelativePathToOutputRoot":"_themes/"}