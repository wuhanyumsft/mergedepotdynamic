{"content":"    \r\n    <h1 id=\"System_Linq_Enumerable\">\r\n      <span class=\"lang-csharp\">Enumerable</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a set of <code>static</code> (<code>Shared</code> in Visual Basic) methods for querying objects that implement <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Enumerable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Enumerable</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The methods in this class provide an implementation of the standard query operators for querying data sources that implement <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>. The standard query operators are general purpose methods that follow the LINQ pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.  </p>\n<p> The majority of the methods in this class are defined as extension methods that extend <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>. This means they can be called like an instance method on any object that implements <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>.  </p>\n<p> Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated. This is known as deferred execution. Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Aggregate__1_System_Collections_Generic_IEnumerable___0__System_Func___0___0___0__\" data-linktype=\"self-bookmark\">Aggregate&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TSource,TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an accumulator function over a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Aggregate__2_System_Collections_Generic_IEnumerable___0____1_System_Func___1___0___1__\" data-linktype=\"self-bookmark\">Aggregate&lt;TSource,TAccumulate&gt;(IEnumerable&lt;TSource&gt;,TAccumulate,Func&lt;TAccumulate,TSource,TAccumulate&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Aggregate__3_System_Collections_Generic_IEnumerable___0____1_System_Func___1___0___1__System_Func___1___2__\" data-linktype=\"self-bookmark\">Aggregate&lt;TSource,TAccumulate,TResult&gt;(IEnumerable&lt;TSource&gt;,TAccumulate,Func&lt;TAccumulate,TSource,TAccumulate&gt;,Func&lt;TAccumulate,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_All__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">All&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether all elements of a sequence satisfy a condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Any__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Any&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a sequence contains any elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Any__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">Any&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether any element of a sequence satisfies a condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_AsEnumerable__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">AsEnumerable&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the input typed as <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Decimal__\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Double__\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Int64__\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Single__\" data-linktype=\"self-bookmark\">Average(IEnumerable&lt;Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Decimal__\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Single__\" data-linktype=\"self-bookmark\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Cast__1_System_Collections_IEnumerable_\" data-linktype=\"self-bookmark\">Cast&lt;TResult&gt;(IEnumerable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Casts the elements of an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> to the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Concat__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Concat&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Concatenates two sequences.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Contains__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"self-bookmark\">Contains&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a sequence contains a specified element by using the default equality comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Contains__1_System_Collections_Generic_IEnumerable___0____0_System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Contains&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a sequence contains a specified element by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Count__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Count&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of elements in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Count__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">Count&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a number that represents how many elements in the specified sequence satisfy a condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the elements of the specified sequence or the type parameter&#39;s default value in a singleton collection if the sequence is empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"self-bookmark\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Distinct__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Distinct&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns distinct elements from a sequence by using the default equality comparer to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Distinct__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Distinct&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns distinct elements from a sequence by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ElementAt__1_System_Collections_Generic_IEnumerable___0__System_Int32_\" data-linktype=\"self-bookmark\">ElementAt&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the element at a specified index in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ElementAtOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Int32_\" data-linktype=\"self-bookmark\">ElementAtOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the element at a specified index in a sequence or a default value if the index is out of range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Empty__1\" data-linktype=\"self-bookmark\">Empty&lt;TResult&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an empty <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that has the specified type argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Except__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Except&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set difference of two sequences by using the default equality comparer to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Except__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Except&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set difference of two sequences by using the specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_First__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">First&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first element of a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_First__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">First&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first element in a sequence that satisfies a specified condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_FirstOrDefault__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">FirstOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_FirstOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">FirstOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group&#39;s elements are projected by using a specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___1_System_Collections_Generic_IEnumerable___0____2__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___1_System_Collections_Generic_IEnumerable___0____2__System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupBy__4_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Func___1_System_Collections_Generic_IEnumerable___2____3__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupBy__4_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Func___1_System_Collections_Generic_IEnumerable___2____3__System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupJoin__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0_System_Collections_Generic_IEnumerable___1____3__\" data-linktype=\"self-bookmark\">GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;(IEnumerable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Func&lt;TOuter,TKey&gt;,Func&lt;TInner,TKey&gt;,Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_GroupJoin__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0_System_Collections_Generic_IEnumerable___1____3__System_Collections_Generic_IEqualityComparer___2__\" data-linktype=\"self-bookmark\">GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;(IEnumerable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Func&lt;TOuter,TKey&gt;,Func&lt;TInner,TKey&gt;,Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Correlates the elements of two sequences based on key equality and groups the results. A specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> is used to compare keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Intersect__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Intersect&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set intersection of two sequences by using the default equality comparer to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Intersect__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Intersect&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set intersection of two sequences by using the specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Join__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0___1___3__\" data-linktype=\"self-bookmark\">Join&lt;TOuter,TInner,TKey,TResult&gt;(IEnumerable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Func&lt;TOuter,TKey&gt;,Func&lt;TInner,TKey&gt;,Func&lt;TOuter,TInner,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Join__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0___1___3__System_Collections_Generic_IEqualityComparer___2__\" data-linktype=\"self-bookmark\">Join&lt;TOuter,TInner,TKey,TResult&gt;(IEnumerable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Func&lt;TOuter,TKey&gt;,Func&lt;TInner,TKey&gt;,Func&lt;TOuter,TInner,TResult&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Correlates the elements of two sequences based on matching keys. A specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> is used to compare keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Last__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Last&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the last element of a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Last__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">Last&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the last element of a sequence that satisfies a specified condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_LastOrDefault__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">LastOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the last element of a sequence, or a default value if the sequence contains no elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_LastOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">LastOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_LongCount__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">LongCount&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that represents the total number of elements in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_LongCount__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">LongCount&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that represents how many elements in a sequence satisfy a condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Decimal__\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Double__\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Int64__\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Single__\" data-linktype=\"self-bookmark\">Max(IEnumerable&lt;Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the maximum value in a generic sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Decimal__\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Single__\" data-linktype=\"self-bookmark\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Max__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">Max&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Decimal__\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Double__\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Int64__\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Single__\" data-linktype=\"self-bookmark\">Min(IEnumerable&lt;Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the minimum value in a generic sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Decimal__\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Single__\" data-linktype=\"self-bookmark\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Min__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">Min&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_OfType__1_System_Collections_IEnumerable_\" data-linktype=\"self-bookmark\">OfType&lt;TResult&gt;(IEnumerable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Filters the elements of an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> based on a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_OrderBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">OrderBy&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements of a sequence in ascending order according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_OrderBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\" data-linktype=\"self-bookmark\">OrderBy&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements of a sequence in ascending order by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_OrderByDescending__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">OrderByDescending&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements of a sequence in descending order according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_OrderByDescending__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\" data-linktype=\"self-bookmark\">OrderByDescending&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Range_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Range(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a sequence of integral numbers within a specified range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Repeat__1___0_System_Int32_\" data-linktype=\"self-bookmark\">Repeat&lt;TResult&gt;(TResult,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a sequence that contains one repeated value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Reverse__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Reverse&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inverts the order of the elements in a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Select__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32___1__\" data-linktype=\"self-bookmark\">Select&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence into a new form by incorporating the element&#39;s index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Select__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">Select&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence into a new form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SelectMany__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___1___\" data-linktype=\"self-bookmark\">SelectMany&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,IEnumerable&lt;TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and flattens the resulting sequences into one sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SelectMany__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1___\" data-linktype=\"self-bookmark\">SelectMany&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,IEnumerable&lt;TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SelectMany__3_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___1___System_Func___0___1___2__\" data-linktype=\"self-bookmark\">SelectMany&lt;TSource,TCollection,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,IEnumerable&lt;TCollection&gt;&gt;,Func&lt;TSource,TCollection,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SelectMany__3_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1___System_Func___0___1___2__\" data-linktype=\"self-bookmark\">SelectMany&lt;TSource,TCollection,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,IEnumerable&lt;TCollection&gt;&gt;,Func&lt;TSource,TCollection,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SequenceEqual__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">SequenceEqual&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SequenceEqual__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">SequenceEqual&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two sequences are equal by comparing their elements by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Single__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Single&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Single__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">Single&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SingleOrDefault__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">SingleOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SingleOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">SingleOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Skip__1_System_Collections_Generic_IEnumerable___0__System_Int32_\" data-linktype=\"self-bookmark\">Skip&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SkipWhile__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">SkipWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_SkipWhile__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Boolean__\" data-linktype=\"self-bookmark\">SkipWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element&#39;s index is used in the logic of the predicate function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Decimal__\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Double__\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Int64__\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Single__\" data-linktype=\"self-bookmark\">Sum(IEnumerable&lt;Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Decimal__\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Decimal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Decimal___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Double___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Double&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int32___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int32&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int64___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int64&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Single___\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Single&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Single__\" data-linktype=\"self-bookmark\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Single&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Take__1_System_Collections_Generic_IEnumerable___0__System_Int32_\" data-linktype=\"self-bookmark\">Take&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a specified number of contiguous elements from the start of a sequence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_TakeWhile__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">TakeWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns elements from a sequence as long as a specified condition is true.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_TakeWhile__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Boolean__\" data-linktype=\"self-bookmark\">TakeWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns elements from a sequence as long as a specified condition is true. The element&#39;s index is used in the logic of the predicate function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ThenBy__2_System_Linq_IOrderedEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">ThenBy&lt;TSource,TKey&gt;(IOrderedEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ThenBy__2_System_Linq_IOrderedEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\" data-linktype=\"self-bookmark\">ThenBy&lt;TSource,TKey&gt;(IOrderedEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ThenByDescending__2_System_Linq_IOrderedEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">ThenByDescending&lt;TSource,TKey&gt;(IOrderedEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ThenByDescending__2_System_Linq_IOrderedEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\" data-linktype=\"self-bookmark\">ThenByDescending&lt;TSource,TKey&gt;(IOrderedEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToArray__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">ToArray&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an array from a <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToDictionary__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">ToDictionary&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToDictionary__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">ToDictionary&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function and key comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToDictionary__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\" data-linktype=\"self-bookmark\">ToDictionary&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to specified key selector and element selector functions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToDictionary__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">ToDictionary&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function, a comparer, and an element selector function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToList__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">ToList&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.List`1</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToLookup__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\" data-linktype=\"self-bookmark\">ToLookup&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Linq.Lookup`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToLookup__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">ToLookup&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Linq.Lookup`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function and key comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToLookup__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\" data-linktype=\"self-bookmark\">ToLookup&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Linq.Lookup`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to specified key selector and element selector functions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_ToLookup__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Collections_Generic_IEqualityComparer___1__\" data-linktype=\"self-bookmark\">ToLookup&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,IEqualityComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Linq.Lookup`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function, a comparer and an element selector function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Union__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\" data-linktype=\"self-bookmark\">Union&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set union of two sequences by using the default equality comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Union__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"self-bookmark\">Union&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces the set union of two sequences by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Where__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"self-bookmark\">Where&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Filters a sequence of values based on a predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Where__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Boolean__\" data-linktype=\"self-bookmark\">Where&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Filters a sequence of values based on a predicate. Each element&#39;s index is used in the logic of the predicate function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Enumerable_Zip__3_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___1___2__\" data-linktype=\"self-bookmark\">Zip&lt;TFirst,TSecond,TResult&gt;(IEnumerable&lt;TFirst&gt;,IEnumerable&lt;TSecond&gt;,Func&lt;TFirst,TSecond,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Aggregate__1_System_Collections_Generic_IEnumerable___0__System_Func___0___0___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Aggregate_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Aggregate&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TSource,TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an accumulator function over a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to aggregate over.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>func</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TSource</span>,<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An accumulator function to be invoked on each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The final accumulator value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>func</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Aggregate(TSource) method makes it simple to perform a calculation over a sequence of values. This method works by calling <code>func</code> one time for each element in <code>source</code>except the first one. Each time <code>func</code> is called, Aggregate(TSource) passes both the element from the sequence and an aggregated value (as the first argument to <code>func</code>). The first element of <code>source</code> is used as the initial aggregate value. The result of <code>func</code> replaces the previous aggregated value. Aggregate(TSource) returns the final result of <code>func</code>.  </p>\n<p> This overload of the Aggregate(TSource)methodisn&#39;t suitable for all casesbecause it uses the first element of <code>source</code> as the initial aggregate value. You should choose another overload if the return value should include only the elements of <code>source</code> that meet a certain condition. For example, this overload isn&#39;t reliableif you want to calculate the sum of the even numbers in <code>source</code>. The result will be incorrect if the first element is odd instead of even.  </p>\n<p> To simplify common aggregation operations, the standard query operators also include a general purpose count method, &lt;xref:System.Linq.Enumerable.Count%2A&gt;, and four numeric aggregation methods, namely <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>, and <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to reverse the order of words in a string by usingAggregate(TSource).  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#1\">string sentence = &quot;the quick brown fox jumps over the lazy dog&quot;;\n\n// Split the string into individual words.\nstring[] words = sentence.Split(&#39; &#39;);\n\n// Prepend each word to the beginning of the \n// new sentence to reverse the word order.\nstring reversed = words.Aggregate((workingSentence, next) =&gt;\n                                      next + &quot; &quot; + workingSentence);\n\nConsole.WriteLine(reversed);\n\n// This code produces the following output:\n//\n// dog lazy the over jumps fox brown quick the \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#1\">        Sub AggregateEx1()\n            Dim sentence As String =\n            &quot;the quick brown fox jumps over the lazy dog&quot;\n            &#39; Split the string into individual words.\n            Dim words() As String = sentence.Split(&quot; &quot;c)\n            &#39; Prepend each word to the beginning of the new sentence to reverse the word order.\n            Dim reversed As String =\n            words.Aggregate(Function(ByVal current, ByVal word) word &amp; &quot; &quot; &amp; current)\n\n            &#39; Display the output.\n            MsgBox(reversed)\n        End Sub\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; dog lazy the over jumps fox brown quick the\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Aggregate__2_System_Collections_Generic_IEnumerable___0____1_System_Func___1___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Aggregate_TSource_TAccumulate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Aggregate&lt;TSource,TAccumulate&gt;(IEnumerable&lt;TSource&gt;,TAccumulate,Func&lt;TAccumulate,TSource,TAccumulate&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to aggregate over.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>seed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TAccumulate</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial accumulator value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>func</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TAccumulate</span>,<span class=\"xref\">TSource</span>,<span class=\"xref\">TAccumulate</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An accumulator function to be invoked on each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TAccumulate</span></div>\r\n                  </div>\r\n                  <p>The final accumulator value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>func</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Aggregate(TSource, method makes it simple to perform a calculation over a sequence of values. This method works by calling <code>func</code> one time for each element in <code>source</code>. Each time <code>func</code> is called, Aggregate(TSource, passes both the element from the sequence and an aggregated value (as the first argument to <code>func</code>). The value of the <code>seed</code> parameter is used as the initial aggregate value. The result of <code>func</code> replaces the previous aggregated value. Aggregate(TSource, returns the final result of <code>func</code>.  </p>\n<p> To simplify common aggregation operations, the standard query operators also include a general purpose count method, &lt;xref:System.Linq.Enumerable.Count%2A&gt;, and four numeric aggregation methods, namely <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>, and <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Aggregate(TSource, to apply an accumulator function and use a seed value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#2\">int[] ints = { 4, 8, 8, 3, 9, 0, 7, 8, 2 };\n\n// Count the even numbers in the array, using a seed value of 0.\nint numEven = ints.Aggregate(0, (total, next) =&gt;\n                                    next % 2 == 0 ? total + 1 : total);\n\nConsole.WriteLine(&quot;The number of even integers is: {0}&quot;, numEven);\n\n// This code produces the following output:\n//\n// The number of even integers is: 6 \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#2\">        Sub AggregateEx2()\n            &#39; Create an array of Integers.\n            Dim ints() As Integer = {4, 8, 8, 3, 9, 0, 7, 8, 2}\n\n            &#39; Count the even numbers in the array, using a seed value of 0.\n            Dim numEven As Integer =\n            ints.Aggregate(0,\n                           Function(ByVal total, ByVal number) _\n                               IIf(number Mod 2 = 0, total + 1, total))\n\n            &#39; Display the output.\n            MsgBox(&quot;The number of even integers is &quot; &amp; numEven)\n        End Sub\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39;The number of even integers is 6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Aggregate__3_System_Collections_Generic_IEnumerable___0____1_System_Func___1___0___1__System_Func___1___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Aggregate_TSource_TAccumulate_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Aggregate&lt;TSource,TAccumulate,TResult&gt;(IEnumerable&lt;TSource&gt;,TAccumulate,Func&lt;TAccumulate,TSource,TAccumulate&gt;,Func&lt;TAccumulate,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to aggregate over.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>seed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TAccumulate</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial accumulator value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>func</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TAccumulate</span>,<span class=\"xref\">TSource</span>,<span class=\"xref\">TAccumulate</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An accumulator function to be invoked on each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TAccumulate</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to transform the final accumulator value into the result value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>The transformed final accumulator value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>func</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Aggregate(TSource, method makes it simple to perform a calculation over a sequence of values. This method works by calling <code>func</code> one time for each element in <code>source</code>. Each time <code>func</code> is called, Aggregate(TSource, passes both the element from the sequence and an aggregated value (as the first argument to <code>func</code>). The value of the <code>seed</code> parameter is used as the initial aggregate value. The result of <code>func</code> replaces the previous aggregated value. The final result of <code>func</code> is passed to <code>resultSelector</code> to obtain the final result of Aggregate(TSource,.  </p>\n<p> To simplify common aggregation operations, the standard query operators also include a general purpose count method, &lt;xref:System.Linq.Enumerable.Count%2A&gt;, and four numeric aggregation methods, namely <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>, and <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Aggregate(TSource, to apply an accumulator function and a result selector.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#3\">string[] fruits = { &quot;apple&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\n// Determine whether any string in the array is longer than &quot;banana&quot;.\nstring longestName =\n    fruits.Aggregate(&quot;banana&quot;,\n                    (longest, next) =&gt;\n                        next.Length &gt; longest.Length ? next : longest,\n    // Return the final result as an upper case string.\n                    fruit =&gt; fruit.ToUpper());\n\nConsole.WriteLine(\n    &quot;The fruit with the longest name is {0}.&quot;,\n    longestName);\n\n// This code produces the following output:\n//\n// The fruit with the longest name is PASSIONFRUIT. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#3\">        Sub AggregateEx3()\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Determine whether any string in the array is longer than &quot;banana&quot;.\n            Dim longestName As String =\n            fruits.Aggregate(&quot;banana&quot;,\n                             Function(ByVal longest, ByVal fruit) _\n                                 IIf(fruit.Length &gt; longest.Length, fruit, longest),\n                             Function(ByVal fruit) fruit.ToUpper())\n\n            &#39; Display the output.\n            MsgBox(&quot;The fruit with the longest name is &quot; &amp; longestName)\n        End Sub\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; The fruit with the longest name is PASSIONFRUIT\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_All__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_All_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">All&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether all elements of a sequence satisfy a condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements to apply the predicate to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method does not return all the elements of a collection. Instead, it determines whether all the elements of a collection satisfy a condition.  </p>\n</div>\n<p> The enumeration of <code>source</code> is stopped as soon as the result can be determined.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into All()</code> clause translates to an invocation of All(TSource).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use All(TSource) to determine whether all the elements in a sequence satisfy a condition. Variable <code>allStartWithB</code> is true if all the pet names start with &quot;B&quot; or if the <code>pets</code> array is empty.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#4\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void AllEx()\n{\n    // Create an array of Pets.\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=10 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=6 } };\n\n    // Determine whether all pet names \n    // in the array start with &#39;B&#39;.\n    bool allStartWithB = pets.All(pet =&gt;\n                                      pet.Name.StartsWith(&quot;B&quot;));\n\n    Console.WriteLine(\n        &quot;{0} pet names start with &#39;B&#39;.&quot;,\n        allStartWithB ? &quot;All&quot; : &quot;Not all&quot;);\n}\n\n// This code produces the following output:\n//\n//  Not all pet names start with &#39;B&#39;. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#4\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub AllEx()\n                &#39; Create an array of Pets.\n                Dim pets() As Pet =\n            {New Pet With {.Name = &quot;Barley&quot;, .Age = 2},\n             New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n             New Pet With {.Name = &quot;Whiskers&quot;, .Age = 7}}\n\n                &#39; Determine whether all pet names in the array start with &quot;B&quot;.\n                Dim allNames As Boolean =\n            pets.All(Function(ByVal pet) pet.Name.StartsWith(&quot;B&quot;))\n\n                &#39; Display the output.\n                Dim text As String = IIf(allNames, &quot;All&quot;, &quot;Not all&quot;)\n                MsgBox(text &amp; &quot; pet names start with &#39;B&#39;.&quot;)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Not all pet names start with &#39;B&#39;.\n</code></pre><p> The Boolean value that the All(TSource) method returns is typically used in the predicate of a <code>where</code> clause (<code>Where</code> clause in Visual Basic) or a direct call to the &lt;xref:System.Linq.Enumerable.Where%2A&gt; method. The following example demonstrates this use of the <code>All</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#129\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\nclass Person\n{\n    public string LastName { get; set; }\n    public Pet[] Pets { get; set; }\n}\n\npublic static void AllEx2()\n{\n    List&lt;Person&gt; people = new List&lt;Person&gt;\n        { new Person { LastName = &quot;Haas&quot;,\n                       Pets = new Pet[] { new Pet { Name=&quot;Barley&quot;, Age=10 },\n                                          new Pet { Name=&quot;Boots&quot;, Age=14 },\n                                          new Pet { Name=&quot;Whiskers&quot;, Age=6 }}},\n          new Person { LastName = &quot;Fakhouri&quot;,\n                       Pets = new Pet[] { new Pet { Name = &quot;Snowball&quot;, Age = 1}}},\n          new Person { LastName = &quot;Antebi&quot;,\n                       Pets = new Pet[] { new Pet { Name = &quot;Belle&quot;, Age = 8} }},\n          new Person { LastName = &quot;Philips&quot;,\n                       Pets = new Pet[] { new Pet { Name = &quot;Sweetie&quot;, Age = 2},\n                                          new Pet { Name = &quot;Rover&quot;, Age = 13}} }\n        };\n\n    // Determine which people have pets that are all older than 5.\n    IEnumerable&lt;string&gt; names = from person in people\n                                where person.Pets.All(pet =&gt; pet.Age &gt; 5)\n                                select person.LastName;\n\n    foreach (string name in names)\n    {\n        Console.WriteLine(name);\n    }\n\n    /* This code produces the following output:\n     * \n     * Haas\n     * Antebi\n     */\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#129\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Structure Person\n                Public LastName As String\n                Public Pets() As Pet\n            End Structure\n\n            Sub AllEx2()\n                Dim people As New List(Of Person)(New Person() _\n            {New Person With {.LastName = &quot;Haas&quot;,\n                              .Pets = New Pet() {New Pet With {.Name = &quot;Barley&quot;, .Age = 10},\n                                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 14},\n                                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 6}}},\n              New Person With {.LastName = &quot;Fakhouri&quot;,\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Snowball&quot;, .Age = 1}}},\n              New Person With {.LastName = &quot;Antebi&quot;,\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Belle&quot;, .Age = 8}}},\n              New Person With {.LastName = &quot;Philips&quot;,\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Sweetie&quot;, .Age = 2},\n                                                  New Pet With {.Name = &quot;Rover&quot;, .Age = 13}}}})\n\n                &#39; Determine which people have pets that are all older than 5.\n                Dim names = From person In people\n                            Where person.Pets.All(Function(pet) pet.Age &gt; 5)\n                            Select person.LastName\n\n                For Each name As String In names\n                    Console.WriteLine(name)\n                Next\n\n                &#39; This code produces the following output:\n                &#39;\n                &#39; Haas\n                &#39; Antebi\n\n            End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Any__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Any_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Any&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a sequence contains any elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to check for emptiness.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the source sequence contains any elements; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method does not return any one element of a collection. Instead, it determines whether the collection contains any elements.  </p>\n</div>\n<p> The enumeration of <code>source</code> is stopped as soon as the result can be determined.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Any()</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.Any%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Any(TSource) to determine whether a sequence contains any elements.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#5\">List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2 };\nbool hasElements = numbers.Any();\n\nConsole.WriteLine(&quot;The list {0} empty.&quot;,\n    hasElements ? &quot;is not&quot; : &quot;is&quot;);\n\n// This code produces the following output:\n//\n// The list is not empty. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#5\">                &#39; Create a list of Integers.\n                Dim numbers As New List(Of Integer)(New Integer() {1, 2})\n\n                &#39; Determine if the list contains any items.\n                Dim hasElements As Boolean = numbers.Any()\n\n                &#39; Display the output.\n                Dim text As String = IIf(hasElements, &quot;not &quot;, &quot;&quot;)\n                MsgBox(&quot;The list is &quot; &amp; text &amp; &quot;empty.&quot;)\n\n                &#39; This code produces the following output:\n                &#39;\n                &#39; The list is not empty.\n</code></pre><p> The Boolean value that the Any(TSource) method returns is typically used in the predicate of a <code>where</code> clause (<code>Where</code> clause in Visual Basic) or a direct call to the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Where__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"relative-path\">Where&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a> method. The following example demonstrates this use of the <code>Any</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#130\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\nclass Person\n{\n    public string LastName { get; set; }\n    public Pet[] Pets { get; set; }\n}\n\npublic static void AnyEx2()\n{\n    List&lt;Person&gt; people = new List&lt;Person&gt;\n        { new Person { LastName = &quot;Haas&quot;,\n                       Pets = new Pet[] { new Pet { Name=&quot;Barley&quot;, Age=10 },\n                                          new Pet { Name=&quot;Boots&quot;, Age=14 },\n                                          new Pet { Name=&quot;Whiskers&quot;, Age=6 }}},\n          new Person { LastName = &quot;Fakhouri&quot;,\n                       Pets = new Pet[] { new Pet { Name = &quot;Snowball&quot;, Age = 1}}},\n          new Person { LastName = &quot;Antebi&quot;,\n                       Pets = new Pet[] { }},\n          new Person { LastName = &quot;Philips&quot;,\n                       Pets = new Pet[] { new Pet { Name = &quot;Sweetie&quot;, Age = 2},\n                                          new Pet { Name = &quot;Rover&quot;, Age = 13}} }\n        };\n\n    // Determine which people have a non-empty Pet array.\n    IEnumerable&lt;string&gt; names = from person in people\n                                where person.Pets.Any()\n                                select person.LastName;\n\n    foreach (string name in names)\n    {\n        Console.WriteLine(name);\n    }\n\n    /* This code produces the following output:\n      \n       Haas\n       Fakhouri\n       Philips\n    */\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#130\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Structure Person\n                Public LastName As String\n                Public Pets() As Pet\n            End Structure\n\n            Sub AnyEx2()\n                Dim people As New List(Of Person)(New Person() _\n            {New Person With {.LastName = &quot;Haas&quot;,\n                              .Pets = New Pet() {New Pet With {.Name = &quot;Barley&quot;, .Age = 10},\n                                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 14},\n                                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 6}}},\n              New Person With {.LastName = &quot;Fakhouri&quot;,\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Snowball&quot;, .Age = 1}}},\n              New Person With {.LastName = &quot;Antebi&quot;,\n                               .Pets = New Pet() {}},\n              New Person With {.LastName = &quot;Philips&quot;,\n                               .Pets = New Pet() {New Pet With {.Name = &quot;Sweetie&quot;, .Age = 2},\n                                                  New Pet With {.Name = &quot;Rover&quot;, .Age = 13}}}})\n\n                &#39; Determine which people have a non-empty Pet array.\n                Dim names = From person In people\n                            Where person.Pets.Any()\n                            Select person.LastName\n\n                For Each name As String In names\n                    Console.WriteLine(name)\n                Next\n\n                &#39; This code produces the following output:\n                &#39;\n                &#39; Haas\n                &#39; Fakhouri\n                &#39; Philips\n\n            End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Any__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Any_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Any&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether any element of a sequence satisfies a condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to apply the predicate to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if any elements in the source sequence pass the test in the specified predicate; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method does not return any one element of a collection. Instead, it determines whether any elements of a collection satisfy a condition.  </p>\n</div>\n<p> The enumeration of <code>source</code> is stopped as soon as the result can be determined.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Any()</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.Any%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Any(TSource) to determine whether any element in a sequence satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#6\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public bool Vaccinated { get; set; }\n}\n\npublic static void AnyEx3()\n{\n    // Create an array of Pets.\n    Pet[] pets =\n        { new Pet { Name=&quot;Barley&quot;, Age=8, Vaccinated=true },\n          new Pet { Name=&quot;Boots&quot;, Age=4, Vaccinated=false },\n          new Pet { Name=&quot;Whiskers&quot;, Age=1, Vaccinated=false } };\n\n    // Determine whether any pets over age 1 are also unvaccinated.\n    bool unvaccinated =\n        pets.Any(p =&gt; p.Age &gt; 1 &amp;&amp; p.Vaccinated == false);\n\n    Console.WriteLine(\n        &quot;There {0} unvaccinated animals over age one.&quot;,\n        unvaccinated ? &quot;are&quot; : &quot;are not any&quot;);\n}\n\n// This code produces the following output:\n//\n//  There are unvaccinated animals over age one. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#6\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n                Public Vaccinated As Boolean\n            End Structure\n\n            Shared Sub AnyEx3()\n                &#39; Create a list of Pets\n                Dim pets As New List(Of Pet)(New Pet() _\n                                     {New Pet With {.Name = &quot;Barley&quot;, .Age = 8, .Vaccinated = True},\n                                      New Pet With {.Name = &quot;Boots&quot;, .Age = 4, .Vaccinated = False},\n                                      New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1, .Vaccinated = False}})\n\n                &#39; Determine whether any pets over age 1 are also unvaccinated.\n                Dim unvaccinated As Boolean =\n            pets.Any(Function(pet) pet.Age &gt; 1 And pet.Vaccinated = False)\n\n                &#39; Display the output.\n                Dim text As String = IIf(unvaccinated, &quot;are&quot;, &quot;are not&quot;)\n                MsgBox(&quot;There &quot; &amp; text &amp; &quot; unvaccinated animals over age 1.&quot;)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; There are unvaccinated animals over age 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_AsEnumerable__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_AsEnumerable_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsEnumerable&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the input typed as <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to type as <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>The input sequence typed as <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AsEnumerable(TSource) method has no effect other than to change the compile-time type of <code>source</code> from a type that implements <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> to <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> itself.  </p>\n<p> AsEnumerable(TSource) can be used to choose between query implementations when a sequence implements <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> but also has a different set of public query methods available. For example, given a generic class <code>Table</code> that implements <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> and has its own methods such as <code>Where</code>, <code>Select</code>, and <code>SelectMany</code>, a call to <code>Where</code> would invoke the public <code>Where</code> method of <code>Table</code>. A <code>Table</code> type that represents a database table could have a <code>Where</code>method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution. If remote execution is not desired, for example because the predicate invokes a local method, the AsEnumerable(TSource) method can be used to hide the custom methods and instead make the standard query operators available.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use AsEnumerable(TSource) to hide a type&#39;s custom <code>Where</code> method when the standard query operator implementation is desired.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#108\">// Custom class.\nclass Clump&lt;T&gt; : List&lt;T&gt;\n{\n    // Custom implementation of Where().\n    public IEnumerable&lt;T&gt; Where(Func&lt;T, bool&gt; predicate)\n    {\n        Console.WriteLine(&quot;In Clump&#39;s implementation of Where().&quot;);\n        return Enumerable.Where(this, predicate);\n    }\n}\n\nstatic void AsEnumerableEx1()\n{\n    // Create a new Clump&lt;T&gt; object.\n    Clump&lt;string&gt; fruitClump =\n        new Clump&lt;string&gt; { &quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, \n            &quot;mango&quot;, &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot; };\n\n    // First call to Where():\n    // Call Clump&#39;s Where() method with a predicate.\n    IEnumerable&lt;string&gt; query1 =\n        fruitClump.Where(fruit =&gt; fruit.Contains(&quot;o&quot;));\n\n    Console.WriteLine(&quot;query1 has been created.<br>&quot;);\n\n    // Second call to Where():\n    // First call AsEnumerable() to hide Clump&#39;s Where() method and thereby\n    // force System.Linq.Enumerable&#39;s Where() method to be called.\n    IEnumerable&lt;string&gt; query2 =\n        fruitClump.AsEnumerable().Where(fruit =&gt; fruit.Contains(&quot;o&quot;));\n\n    // Display the output.\n    Console.WriteLine(&quot;query2 has been created.&quot;);\n}\n\n// This code produces the following output:\n//\n// In Clump&#39;s implementation of Where().\n// query1 has been created.\n//\n// query2 has been created.\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#108\">        Dim output As New System.Text.StringBuilder\n\n        &#39; A custom class.\n        Class Clump(Of T)\n            Inherits List(Of T)\n\n            &#39; Constructor.\n            Public Sub New(ByVal collection As IEnumerable(Of T))\n                MyBase.New(collection)\n            End Sub\n\n            &#39; Custom implementation of Where().\n            Function Where(ByVal predicate As Func(Of T, Boolean)) As IEnumerable(Of T)\n                output.AppendLine(&quot;In Clump&#39;s implementation of Where().&quot;)\n                Return Enumerable.Where(Me, predicate)\n            End Function\n        End Class\n\n        Sub AsEnumerableEx1()\n            &#39; Create a new Clump(Of T) object.\n            Dim fruitClump As New Clump(Of String)(New String() _\n                                               {&quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;,\n                                                &quot;mango&quot;, &quot;orange&quot;, &quot;blueberry&quot;,\n                                                &quot;grape&quot;, &quot;strawberry&quot;})\n\n            &#39; First call to Where():\n            &#39; Call Clump&#39;s Where() method with a predicate.\n            Dim query1 As IEnumerable(Of String) =\n            fruitClump.Where(Function(fruit) fruit.Contains(&quot;o&quot;))\n            output.AppendLine(&quot;query1 has been created.&quot; &amp; vbCrLf)\n\n            &#39; Second call to Where():\n            &#39; First call AsEnumerable() to hide Clump&#39;s Where() method and thereby\n            &#39; force System.Linq.Enumerable&#39;s Where() method to be called.\n            Dim query2 As IEnumerable(Of String) =\n            fruitClump.AsEnumerable().Where(Function(fruit) fruit.Contains(&quot;o&quot;))\n            output.AppendLine(&quot;query2 has been created.&quot;)\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n        End Sub\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; In Clump&#39;s implementation of Where().\n        &#39; query1 has been created.\n        &#39;\n        &#39; query2 has been created.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"relative-path\">Average(IEnumerable&lt;Int32&gt;)</a> to calculate the average of a sequence of values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#8\">List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\ndouble average = grades.Average();\n\nConsole.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average grade is 77.6. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#8\">            &#39; Create a list of integers.\n            Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n            &#39; Determine the average value in the list.\n            Dim avg As Double = grades.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average grade is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average grade is 77.6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the sum of the elements is too large to represent as a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, this method returns positive or negative infinity.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"relative-path\">Average(IEnumerable&lt;Int32&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#8\">List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\ndouble average = grades.Average();\n\nConsole.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average grade is 77.6. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#8\">            &#39; Create a list of integers.\n            Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n            &#39; Determine the average value in the list.\n            Dim avg As Double = grades.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average grade is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average grade is 77.6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Average to calculate an average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#8\">List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\ndouble average = grades.Average();\n\nConsole.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average grade is 77.6. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#8\">            &#39; Create a list of integers.\n            Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n            &#39; Determine the average value in the list.\n            Dim avg As Double = grades.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average grade is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average grade is 77.6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"relative-path\">Average(IEnumerable&lt;Int32&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#8\">List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\ndouble average = grades.Average();\n\nConsole.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average grade is 77.6. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#8\">            &#39; Create a list of integers.\n            Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n            &#39; Determine the average value in the list.\n            Dim avg As Double = grades.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average grade is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average grade is 77.6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of the elements in the sequence is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\" data-linktype=\"relative-path\">Average(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#12\">long?[] longs = { null, 10007L, 37L, 399846234235L };\n\ndouble? average = longs.Average();\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 133282081426.333. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#12\">            &#39; Create an array of nullable long values.\n            Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n            &#39; Determine the average value in the array.\n            Dim avg As Nullable(Of Double) = longs.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg.ToString)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 133282081426.333\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the sum of the elements is too large to represent as a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, this method returns positive or negative infinity.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\" data-linktype=\"relative-path\">Average(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#12\">long?[] longs = { null, 10007L, 37L, 399846234235L };\n\ndouble? average = longs.Average();\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 133282081426.333. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#12\">            &#39; Create an array of nullable long values.\n            Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n            &#39; Determine the average value in the array.\n            Dim avg As Nullable(Of Double) = longs.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg.ToString)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 133282081426.333\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of the elements in the sequence is larger than <a class=\"xref\" href=\"system.int64#System_Int64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\" data-linktype=\"relative-path\">Average(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#12\">long?[] longs = { null, 10007L, 37L, 399846234235L };\n\ndouble? average = longs.Average();\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 133282081426.333. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#12\">            &#39; Create an array of nullable long values.\n            Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n            &#39; Determine the average value in the array.\n            Dim avg As Nullable(Of Double) = longs.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg.ToString)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 133282081426.333\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of the elements in the sequence is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Average to calculate an average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#12\">long?[] longs = { null, 10007L, 37L, 399846234235L };\n\ndouble? average = longs.Average();\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 133282081426.333. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#12\">            &#39; Create an array of nullable long values.\n            Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n            &#39; Determine the average value in the array.\n            Dim avg As Nullable(Of Double) = longs.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg.ToString)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 133282081426.333\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\" data-linktype=\"relative-path\">Average(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#12\">long?[] longs = { null, 10007L, 37L, 399846234235L };\n\ndouble? average = longs.Average();\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 133282081426.333. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#12\">            &#39; Create an array of nullable long values.\n            Dim longs() As Nullable(Of Long) = {Nothing, 10007L, 37L, 399846234235L}\n\n            &#39; Determine the average value in the array.\n            Dim avg As Nullable(Of Double) = longs.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg.ToString)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 133282081426.333\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average(IEnumerable&lt;Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to calculate the average of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"relative-path\">Average(IEnumerable&lt;Int32&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#8\">List&lt;int&gt; grades = new List&lt;int&gt; { 78, 92, 100, 37, 81 };\n\ndouble average = grades.Average();\n\nConsole.WriteLine(&quot;The average grade is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average grade is 77.6. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#8\">            &#39; Create a list of integers.\n            Dim grades As New List(Of Integer)(New Integer() {78, 92, 100, 37, 81})\n\n            &#39; Determine the average value in the list.\n            Dim avg As Double = grades.Average()\n\n            &#39; Display the output.\n            MsgBox(&quot;The average grade is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average grade is 77.6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate an average.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of the elements in the sequence is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#16\">string[] numbers = { &quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot; };\n\ndouble average = numbers.Average(num =&gt; Convert.ToInt64(num));\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 99948748093. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#16\">            &#39; Create an array of strings.\n            Dim numbers() As String = {&quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot;}\n\n            &#39; Determine the average number after converting each\n            &#39; string to an Int64 value.\n            Dim avg As Double =\n            numbers.Average(Function(number) Convert.ToInt64(number))\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 99948748093\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#16\">string[] numbers = { &quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot; };\n\ndouble average = numbers.Average(num =&gt; Convert.ToInt64(num));\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 99948748093. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#16\">            &#39; Create an array of strings.\n            Dim numbers() As String = {&quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot;}\n\n            &#39; Determine the average number after converting each\n            &#39; string to an Int64 value.\n            Dim avg As Double =\n            numbers.Average(Function(number) Convert.ToInt64(number))\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 99948748093\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of the elements in the sequence is larger than <a class=\"xref\" href=\"system.int64#System_Int64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Average(TSource) to calculate an average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#18\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\ndouble average = fruits.Average(s =&gt; s.Length);\n\nConsole.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average string length is 6.5. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#18\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Determine the average length of the strings in the array.\n            Dim avg As Double = fruits.Average(Function(s) s.Length)\n\n            &#39; Display the output.\n            MsgBox(&quot;The average string length is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average string length is 6.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of the elements in the sequence is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Average(TSource) to calculate an average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#16\">string[] numbers = { &quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot; };\n\ndouble average = numbers.Average(num =&gt; Convert.ToInt64(num));\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 99948748093. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#16\">            &#39; Create an array of strings.\n            Dim numbers() As String = {&quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot;}\n\n            &#39; Determine the average number after converting each\n            &#39; string to an Int64 value.\n            Dim avg As Double =\n            numbers.Average(Function(number) Convert.ToInt64(number))\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 99948748093\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of the elements in the sequence is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#16\">string[] numbers = { &quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot; };\n\ndouble average = numbers.Average(num =&gt; Convert.ToInt64(num));\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 99948748093. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#16\">            &#39; Create an array of strings.\n            Dim numbers() As String = {&quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot;}\n\n            &#39; Determine the average number after converting each\n            &#39; string to an Int64 value.\n            Dim avg As Double =\n            numbers.Average(Function(number) Convert.ToInt64(number))\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 99948748093\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#16\">string[] numbers = { &quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot; };\n\ndouble average = numbers.Average(num =&gt; Convert.ToInt64(num));\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 99948748093. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#16\">            &#39; Create an array of strings.\n            Dim numbers() As String = {&quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot;}\n\n            &#39; Determine the average number after converting each\n            &#39; string to an Int64 value.\n            Dim avg As Double =\n            numbers.Average(Function(number) Convert.ToInt64(number))\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 99948748093\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of the elements in the sequence is larger than <a class=\"xref\" href=\"system.int64#System_Int64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#18\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\ndouble average = fruits.Average(s =&gt; s.Length);\n\nConsole.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average string length is 6.5. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#18\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Determine the average length of the strings in the array.\n            Dim avg As Double = fruits.Average(Function(s) s.Length)\n\n            &#39; Display the output.\n            MsgBox(&quot;The average string length is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average string length is 6.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#16\">string[] numbers = { &quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot; };\n\ndouble average = numbers.Average(num =&gt; Convert.ToInt64(num));\n\nConsole.WriteLine(&quot;The average is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average is 99948748093. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#16\">            &#39; Create an array of strings.\n            Dim numbers() As String = {&quot;10007&quot;, &quot;37&quot;, &quot;299846234235&quot;}\n\n            &#39; Determine the average number after converting each\n            &#39; string to an Int64 value.\n            Dim avg As Double =\n            numbers.Average(Function(number) Convert.ToInt64(number))\n\n            &#39; Display the output.\n            MsgBox(&quot;The average is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average is 99948748093\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The average of the sequence of values, or <code>null</code> if the source sequence is empty or contains only values that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#18\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\ndouble average = fruits.Average(s =&gt; s.Length);\n\nConsole.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average string length is 6.5. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#18\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Determine the average length of the strings in the array.\n            Dim avg As Double = fruits.Average(Function(s) s.Length)\n\n            &#39; Display the output.\n            MsgBox(&quot;The average string length is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average string length is 6.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Average_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the average of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to calculate the average of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The average of the sequence of values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to calculate an average.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#18\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\ndouble average = fruits.Average(s =&gt; s.Length);\n\nConsole.WriteLine(&quot;The average string length is {0}.&quot;, average);\n\n// This code produces the following output:\n//\n// The average string length is 6.5. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#18\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Determine the average length of the strings in the array.\n            Dim avg As Double = fruits.Average(Function(s) s.Length)\n\n            &#39; Display the output.\n            MsgBox(&quot;The average string length is &quot; &amp; avg)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The average string length is 6.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Cast__1_System_Collections_IEnumerable_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Cast_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cast&lt;TResult&gt;(IEnumerable)</div>        \r\n          </div>\r\n    \r\n            <p>Casts the elements of an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> to the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> that contains the elements to be cast to type <code>TResult</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains each element of the source sequence cast to the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>An element in the sequence cannot be cast to type <code>TResult</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The Cast(TResult) method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information. For example, <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> does not implement <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, but by calling Cast(TResult) on the <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> object, the standard query operators can then be used to query the sequence.  </p>\n<p> If an element cannot be cast to type <code>TResult</code>, this method will throw an exception. To obtain only those elements that can be cast to type <code>TResult</code>, use the &lt;xref:System.Linq.Enumerable.OfType%2A&gt; method instead of Cast(TResult).  </p>\n<p> In a query expression, an explicitly typed iteration variable translates to an invocation of Cast(TResult). This example shows the syntax for an explicitly typed range variable.  </p>\n<pre><code class=\"lang-c#\">from int i in objects  \n</code></pre><pre><code class=\"lang-vb#\">From i As Integer In objects  \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Cast(TResult) to enable the use of the standard query operators on an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#19\">System.Collections.ArrayList fruits = new System.Collections.ArrayList();\nfruits.Add(&quot;mango&quot;);\nfruits.Add(&quot;apple&quot;);\nfruits.Add(&quot;lemon&quot;);\n\nIEnumerable&lt;string&gt; query =\n    fruits.Cast&lt;string&gt;().OrderBy(fruit =&gt; fruit).Select(fruit =&gt; fruit);\n\n// The following code, without the cast, doesn&#39;t compile.\n//IEnumerable&lt;string&gt; query1 =\n//    fruits.OrderBy(fruit =&gt; fruit).Select(fruit =&gt; fruit);\n\nforeach (string fruit in query)\n{\n    Console.WriteLine(fruit);\n}\n\n// This code produces the following output: \n//\n// apple \n// lemon\n// mango\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#19\">            &#39; Create an ArrayList and add items to it.\n            Dim fruits As New System.Collections.ArrayList()\n            fruits.Add(&quot;mango&quot;)\n            fruits.Add(&quot;apple&quot;)\n            fruits.Add(&quot;lemon&quot;)\n\n            &#39; Call Cast(Of String) to cast the ArrayList elements to strings.\n            Dim query As IEnumerable(Of String) =\n            fruits.Cast(Of String)().OrderBy(Function(fruit) fruit).Select(Function(fruit) fruit)\n\n            &#39;&#39; The following code, without the cast, doesn&#39;t compile.\n            &#39;Dim query As IEnumerable(Of String) = _\n            &#39;    fruits.OrderBy(Function(fruit) fruit).Select(Function(fruit) fruit)\n\n            Dim output As New System.Text.StringBuilder\n            For Each fruit As String In query\n                output.AppendLine(fruit)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; apple\n            &#39; lemon\n            &#39; mango\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Concat__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Concat_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Concat&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Concatenates two sequences.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to concatenate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to concatenate to the first sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the concatenated elements of the two input sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The Concat(TSource) method differs from the &lt;xref:System.Linq.Enumerable.Union%2A&gt; method because the Concat(TSource) method returns all the original elements in the input sequences. The &lt;xref:System.Linq.Enumerable.Union%2A&gt; method returns only unique elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Concat(TSource) to concatenate two sequences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#20\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nstatic Pet[] GetCats()\n{\n    Pet[] cats = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n    return cats;\n}\n\nstatic Pet[] GetDogs()\n{\n    Pet[] dogs = { new Pet { Name=&quot;Bounder&quot;, Age=3 },\n                   new Pet { Name=&quot;Snoopy&quot;, Age=14 },\n                   new Pet { Name=&quot;Fido&quot;, Age=9 } };\n    return dogs;\n}\n\npublic static void ConcatEx1()\n{\n    Pet[] cats = GetCats();\n    Pet[] dogs = GetDogs();\n\n    IEnumerable&lt;string&gt; query =\n        cats.Select(cat =&gt; cat.Name).Concat(dogs.Select(dog =&gt; dog.Name));\n\n    foreach (string name in query)\n    {\n        Console.WriteLine(name);\n    }\n}\n\n// This code produces the following output:\n//\n// Barley\n// Boots\n// Whiskers\n// Bounder\n// Snoopy\n// Fido\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#20\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            &#39; Returns an array of Pet objects.\n            Function GetCats() As Pet()\n                Dim cats() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                             New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                             New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                Return cats\n            End Function\n\n            &#39; Returns an array of Pet objects.\n            Function GetDogs() As Pet()\n                Dim dogs() As Pet = {New Pet With {.Name = &quot;Bounder&quot;, .Age = 3},\n                             New Pet With {.Name = &quot;Snoopy&quot;, .Age = 14},\n                             New Pet With {.Name = &quot;Fido&quot;, .Age = 9}}\n                Return dogs\n            End Function\n\n            Sub ConcatEx1()\n                &#39; Create two arrays of Pet objects.\n                Dim cats() As Pet = GetCats()\n                Dim dogs() As Pet = GetDogs()\n\n                &#39; Project the Name of each cat and concatenate\n                &#39; the collection of cat name strings with a collection\n                &#39; of dog name strings.\n                Dim query As IEnumerable(Of String) =\n            cats _\n            .Select(Function(cat) cat.Name) _\n            .Concat(dogs.Select(Function(dog) dog.Name))\n\n                Dim output As New System.Text.StringBuilder\n                For Each name As String In query\n                    output.AppendLine(name)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString())\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Barley\n            &#39; Boots\n            &#39; Whiskers\n            &#39; Bounder\n            &#39; Snoopy\n            &#39; Fido\n</code></pre><p> An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the &lt;xref:System.Linq.Enumerable.SelectMany%2A&gt; method, passing it the identity selector function. The following example demonstrates this use of &lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#112\">Pet[] cats = GetCats();\nPet[] dogs = GetDogs();\n\nIEnumerable&lt;string&gt; query =\n    new[] { cats.Select(cat =&gt; cat.Name), dogs.Select(dog =&gt; dog.Name) }\n    .SelectMany(name =&gt; name);\n\nforeach (string name in query)\n{\n    Console.WriteLine(name);\n}\n\n// This code produces the following output:\n//\n// Barley\n// Boots\n// Whiskers\n// Bounder\n// Snoopy\n// Fido\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#112\">                &#39; Create two arrays of Pet objects.\n                Dim cats() As Pet = GetCats()\n                Dim dogs() As Pet = GetDogs()\n\n                &#39; Create an IEnumerable collection that contains two elements.\n                &#39; Each element is an array of Pet objects.\n                Dim animals() As IEnumerable(Of Pet) = {cats, dogs}\n\n                Dim query As IEnumerable(Of String) =\n            (animals.SelectMany(Function(pets) _\n                                    pets.Select(Function(pet) pet.Name)))\n\n                Dim output As New System.Text.StringBuilder\n                For Each name As String In query\n                    output.AppendLine(name)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString())\n\n                &#39; This code produces the following output:\n                &#39;\n                &#39; Barley\n                &#39; Boots\n                &#39; Whiskers\n                &#39; Bounder\n                &#39; Snoopy\n                &#39; Fido\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Contains__1_System_Collections_Generic_IEnumerable___0____0_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Contains_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a sequence contains a specified element by using the default equality comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence in which to locate a value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to locate in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the source sequence contains an element that has the specified value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type of <code>source</code> implements <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a>, the <code>Contains</code> method in that implementation is invoked to obtain the result. Otherwise, this method determines whether <code>source</code> contains the specified element.  </p>\n<p> Enumeration is terminated as soon as a matching element is found.  </p>\n<p> Elements are compared to the specified value by using the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Contains(TSource) to determine whether an array contains a specific element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#21\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\nstring fruit = &quot;mango&quot;;\n\nbool hasMango = fruits.Contains(fruit);\n\nConsole.WriteLine(\n    &quot;The array {0} contain &#39;{1}&#39;.&quot;,\n    hasMango ? &quot;does&quot; : &quot;does not&quot;,\n    fruit);\n\n// This code produces the following output:\n//\n// The array does contain &#39;mango&#39;. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#21\">            &#39; Create an array of strings.\n            Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; This is the string to search the array for.\n            Dim fruit As String = &quot;mango&quot;\n\n            &#39; Determine if the array contains the specified string.\n            Dim hasMango As Boolean = fruits.Contains(fruit)\n\n            Dim text As String = IIf(hasMango, &quot;does&quot;, &quot;does not&quot;)\n\n            &#39; Display the output.\n            MsgBox(&quot;The array &quot; &amp; text &amp; &quot; contain &quot; &amp; fruit)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The array does contain mango\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Contains__1_System_Collections_Generic_IEnumerable___0____0_System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Contains_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a sequence contains a specified element by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence in which to locate a value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to locate in the sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An equality comparer to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the source sequence contains an element that has the specified value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Enumeration is terminated as soon as a matching element is found.  </p>\n<p> If c<code>omparer</code> is <code>null</code>, the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare elements to the specified value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to implement an equality comparer that can be used in the Contains(TSource) method.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#1\">Public Class Product\n    Public Property Name As String\n    Public Property Code As Integer\nEnd Class\n\n&#39; Custom comparer for the Product class\nPublic Class ProductComparer\n    Implements IEqualityComparer(Of Product)\n\n    Public Function Equals1(\n        ByVal x As Product, \n        ByVal y As Product\n        ) As Boolean Implements IEqualityComparer(Of Product).Equals\n\n        &#39; Check whether the compared objects reference the same data.\n        If x Is y Then Return True\n\n        &#39;Check whether any of the compared objects is null.\n        If x Is Nothing OrElse y Is Nothing Then Return False\n\n        &#39; Check whether the products&#39; properties are equal.\n        Return (x.Code = y.Code) AndAlso (x.Name = y.Name)\n    End Function\n\n    Public Function GetHashCode1(\n        ByVal product As Product\n        ) As Integer Implements IEqualityComparer(Of Product).GetHashCode\n\n        &#39; Check whether the object is null.\n        If product Is Nothing Then Return 0\n\n        &#39; Get hash code for the Name field if it is not null.\n        Dim hashProductName = \n            If(product.Name Is Nothing, 0, product.Name.GetHashCode())\n\n        &#39; Get hash code for the Code field.\n        Dim hashProductCode = product.Code.GetHashCode()\n\n        &#39; Calculate the hash code for the product.\n        Return hashProductName Xor hashProductCode\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#1\">public class Product\n{\n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\n// Custom comparer for the Product class\nclass ProductComparer : IEqualityComparer&lt;Product&gt;\n{\n    // Products are equal if their names and product numbers are equal.\n    public bool Equals(Product x, Product y)\n    {\n       \n        //Check whether the compared objects reference the same data.\n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether any of the compared objects is null.\n        if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))\n            return false;\n\n        //Check whether the products&#39; properties are equal.\n        return x.Code == y.Code &amp;&amp; x.Name == y.Name;\n    }\n\n    // If Equals() returns true for a pair of objects \n    // then GetHashCode() must return the same value for these objects.\n\n    public int GetHashCode(Product product)\n    {\n        //Check whether the object is null\n        if (Object.ReferenceEquals(product, null)) return 0;\n\n        //Get hash code for the Name field if it is not null.\n        int hashProductName = product.Name == null ? 0 : product.Name.GetHashCode();\n\n        //Get hash code for the Code field.\n        int hashProductCode = product.Code.GetHashCode();\n\n        //Calculate the hash code for the product.\n        return hashProductName ^ hashProductCode;\n    }\n\n}\n</code></pre><p> After you implement this comparer, you can use a sequence of <code>Product</code> objects in the Contains(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#6\">\n        Dim fruits() As Product = \n           {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n            New Product With {.Name = &quot;orange&quot;, .Code = 4}, \n            New Product With {.Name = &quot;lemon&quot;, .Code = 12}}\n\n        Dim apple = New Product With {.Name = &quot;apple&quot;, .Code = 9}\n        Dim kiwi = New Product With {.Name = &quot;kiwi&quot;, .Code = 8}\n\n        Dim prodc As New ProductComparer()\n\n        Dim hasApple = fruits.Contains(apple, prodc)\n        Dim hasKiwi = fruits.Contains(kiwi, prodc)\n\n        Console.WriteLine(&quot;Apple? &quot; &amp; hasApple)\n        Console.WriteLine(&quot;Kiwi? &quot; &amp; hasKiwi)\n\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Apple? True\n        &#39; Kiwi? False\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#6\">\n        Product[] fruits = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;orange&quot;, Code = 4 }, \n                               new Product { Name = &quot;lemon&quot;, Code = 12 } };\n\n        Product apple = new Product { Name = &quot;apple&quot;, Code = 9 };\n        Product kiwi = new Product {Name = &quot;kiwi&quot;, Code = 8 };\n\n        ProductComparer prodc = new ProductComparer();\n\n        bool hasApple = fruits.Contains(apple, prodc);\n        bool hasKiwi = fruits.Contains(kiwi, prodc);\n\n        Console.WriteLine(&quot;Apple? &quot; + hasApple);\n        Console.WriteLine(&quot;Kiwi? &quot; + hasKiwi);\n\n        /*\n            This code produces the following output:\n         \n            Apple? True\n            Kiwi? False\n        */    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Count__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Count_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of elements in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence that contains elements to be counted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>source</code> is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type of <code>source</code> implements <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.  </p>\n<p> Use the &lt;xref:System.Linq.Enumerable.LongCount%2A&gt; method when you expect and want to allow the result to be greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Count()</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.Count%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Count(TSource) to count the elements in an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#22\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\ntry\n{\n    int numberOfFruits = fruits.Count();\n    Console.WriteLine(\n        &quot;There are {0} fruits in the collection.&quot;,\n        numberOfFruits);\n\n}\ncatch (OverflowException)\n{\n    Console.WriteLine(&quot;The count is too large to store as an Int32.&quot;);\n    Console.WriteLine(&quot;Try using the LongCount() method instead.&quot;);\n}\n\n// This code produces the following output:\n//\n// There are 6 fruits in the collection. \n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#22\">            &#39; Create an array of strings.\n            Dim fruits() As String = {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            Try\n                &#39; Count the number of items in the array.\n                Dim numberOfFruits As Integer = fruits.Count()\n                &#39; Display the output.\n                MsgBox(&quot;There are &quot; &amp; numberOfFruits &amp; &quot; fruits in the collection.&quot;)\n            Catch e As OverflowException\n                MsgBox(&quot;The count is too large to store as an Int32. Try using LongCount() instead.&quot;)\n            End Try\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; There are 6 fruits in the collection.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Count__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Count_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a number that represents how many elements in the specified sequence satisfy a condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence that contains elements to be tested and counted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in <code>source</code> is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type of <code>source</code> implements <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.  </p>\n<p> You should use the &lt;xref:System.Linq.Enumerable.LongCount%2A&gt; method when you expect and want to allow the result to be greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Count()</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.Count%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Count(TSource) to count the elements in an array that satisfy a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#23\">class Pet\n{\n    public string Name { get; set; }\n    public bool Vaccinated { get; set; }\n}\n\npublic static void CountEx2()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Vaccinated=true },\n                   new Pet { Name=&quot;Boots&quot;, Vaccinated=false },\n                   new Pet { Name=&quot;Whiskers&quot;, Vaccinated=false } };\n\n    try\n    {\n        int numberUnvaccinated = pets.Count(p =&gt; p.Vaccinated == false);\n        Console.WriteLine(&quot;There are {0} unvaccinated animals.&quot;, numberUnvaccinated);\n    }\n    catch (OverflowException)\n    {\n        Console.WriteLine(&quot;The count is too large to store as an Int32.&quot;);\n        Console.WriteLine(&quot;Try using the LongCount() method instead.&quot;);\n    }\n}\n\n// This code produces the following output:\n//\n// There are 2 unvaccinated animals.\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#23\">            Structure Pet\n                Public Name As String\n                Public Vaccinated As Boolean\n            End Structure\n\n            Public Shared Sub CountEx2()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Vaccinated = True},\n                             New Pet With {.Name = &quot;Boots&quot;, .Vaccinated = False},\n                             New Pet With {.Name = &quot;Whiskers&quot;, .Vaccinated = False}}\n\n                Try\n                    &#39; Count the number of Pets in the array where the Vaccinated property is False.\n                    Dim numberUnvaccinated As Integer =\n                pets.Count(Function(p) p.Vaccinated = False)\n                    &#39; Display the output.\n                    MsgBox(&quot;There are &quot; &amp; numberUnvaccinated &amp; &quot; unvaccinated animals.&quot;)\n                Catch e As OverflowException\n                    MsgBox(&quot;The count is too large to store as an Int32. Try using LongCount() instead.&quot;)\n                End Try\n\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; There are 2 unvaccinated animals.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_DefaultIfEmpty_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the elements of the specified sequence or the type parameter&#39;s default value in a singleton collection if the sequence is empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to return a default value for if it is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> object that contains the default value for the <code>TSource</code> type if <code>source</code> is empty; otherwise, <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The default value for reference and nullable types is <code>null</code>.  </p>\n<p> This method can be used to produce a left outer join when it is combined with the &lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;) method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code examples demonstrate how to use DefaultIfEmpty(TSource) to provide a default value in case the source sequence is empty.  </p>\n<p> This example uses a non-empty sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#24\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void DefaultIfEmptyEx1()\n{\n    List&lt;Pet&gt; pets =\n        new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8 },\n                       new Pet { Name=&quot;Boots&quot;, Age=4 },\n                       new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    foreach (Pet pet in pets.DefaultIfEmpty())\n    {\n        Console.WriteLine(pet.Name);\n    }\n}\n\n/*\n This code produces the following output:\n\n Barley\n Boots\n Whiskers\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#24\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub DefaultIfEmptyEx1()\n                &#39; Create a List of Pet objects.\n                Dim pets As New List(Of Pet)(New Pet() _\n                                     {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                      New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                      New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}})\n\n                Dim output As New System.Text.StringBuilder\n                &#39; Iterate through the items in the List, calling DefaultIfEmpty().\n                For Each pet As Pet In pets.DefaultIfEmpty()\n                    output.AppendLine(pet.Name)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString())\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Barley\n            &#39; Boots\n            &#39; Whiskers\n</code></pre><p> This example uses an empty sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#25\">List&lt;int&gt; numbers = new List&lt;int&gt;();\n\nforeach (int number in numbers.DefaultIfEmpty())\n{\n    Console.WriteLine(number);\n}\n\n/*\n This code produces the following output:\n\n 0\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#25\">            &#39; Create an empty List.\n            Dim numbers As New List(Of Integer)()\n\n            Dim output As New System.Text.StringBuilder\n            &#39; Iterate through the items in the List, calling DefaultIfEmpty().\n            For Each number As Integer In numbers.DefaultIfEmpty()\n                output.AppendLine(number)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_DefaultIfEmpty_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to return the specified value for if it is empty.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to return if the sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> This method can be used to produce a left outer join when it is combined with the &lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;) method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the DefaultIfEmpty(TSource) method and specify a default value. The first sequence is not empty and the second sequence is empty.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#26\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void DefaultIfEmptyEx2()\n{\n    Pet defaultPet = new Pet { Name = &quot;Default Pet&quot;, Age = 0 };\n\n    List&lt;Pet&gt; pets1 =\n        new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8 },\n                       new Pet { Name=&quot;Boots&quot;, Age=4 },\n                       new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    foreach (Pet pet in pets1.DefaultIfEmpty(defaultPet))\n    {\n        Console.WriteLine(&quot;Name: {0}&quot;, pet.Name);\n    }\n\n    List&lt;Pet&gt; pets2 = new List&lt;Pet&gt;();\n\n    foreach (Pet pet in pets2.DefaultIfEmpty(defaultPet))\n    {\n        Console.WriteLine(&quot;<br>Name: {0}&quot;, pet.Name);\n    }\n}\n\n/*\n This code produces the following output:\n\n Name: Barley\n Name: Boots\n Name: Whiskers\n\n Name: Default Pet\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#26\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub DefaultIfEmptyEx2()\n                &#39; Create a Pet object to use as the default value.\n                Dim defaultPet As New Pet With {.Name = &quot;Default Pet&quot;, .Age = 0}\n\n                &#39; Create a List of Pet objects.\n                Dim pets1 As New List(Of Pet)(New Pet() _\n                                      {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                       New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                       New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}})\n\n                Dim output1 As New System.Text.StringBuilder\n                &#39; Enumerate the items in the list, calling DefaultIfEmpty() \n                &#39; with a default value.\n                For Each pet As Pet In pets1.DefaultIfEmpty(defaultPet)\n                    output1.AppendLine(&quot;Name: &quot; &amp; pet.Name)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output1.ToString())\n\n                &#39; Create an empty List.\n                Dim pets2 As New List(Of Pet)\n\n                Dim output2 As New System.Text.StringBuilder\n                &#39; Enumerate the items in the list, calling DefaultIfEmpty() \n                &#39; with a default value.\n                For Each pet As Pet In pets2.DefaultIfEmpty(defaultPet)\n                    output2.AppendLine(&quot;Name: &quot; &amp; pet.Name)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output2.ToString())\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Name: Barley\n            &#39; Name: Boots\n            &#39; Name: Whiskers\n            &#39;\n            &#39; Name: Default Pet\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Distinct__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Distinct_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Distinct&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns distinct elements from a sequence by using the default equality comparer to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to remove duplicate elements from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains distinct elements from the source sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The Distinct(TSource) method returns an unordered sequence that contains no duplicate values. It uses the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, to compare values.  </p>\n<p> In Visual Basic query expression syntax, a <code>Distinct</code> clause translates to an invocation of Distinct(TSource).  </p>\n<p> The default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values of the types that implement the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> generic interface. To compare a custom data type, you need to implement this interface and provide your own <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods for the type.  </p>\n<p> For an example that uses <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a>to define a custom comparer, see <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Distinct__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\" data-linktype=\"relative-path\">Distinct&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Distinct(TSource) to return distinct elements from a sequence of integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#27\">List&lt;int&gt; ages = new List&lt;int&gt; { 21, 46, 46, 55, 17, 21, 55, 55 };\n\nIEnumerable&lt;int&gt; distinctAges = ages.Distinct();\n\nConsole.WriteLine(&quot;Distinct ages:&quot;);\n\nforeach (int age in distinctAges)\n{\n    Console.WriteLine(age);\n}\n\n/*\n This code produces the following output:\n\n Distinct ages:\n 21\n 46\n 55\n 17\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#27\">            &#39; Create a list of integers.\n            Dim ages As New List(Of Integer)(New Integer() _\n                                         {21, 46, 46, 55, 17, 21, 55, 55})\n\n            &#39; Select the unique numbers in the List.\n            Dim distinctAges As IEnumerable(Of Integer) = ages.Distinct()\n\n            Dim output As New System.Text.StringBuilder(&quot;Distinct ages:&quot; &amp; vbCrLf)\n            For Each age As Integer In distinctAges\n                output.AppendLine(age)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Distinct ages:\n            &#39; 21\n            &#39; 46\n            &#39; 55\n            &#39; 17\n</code></pre><p> If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> generic interface in the class. The following code example shows how to implement this interface in a custom data type and provide <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#1\">public class Product : IEquatable&lt;Product&gt;\n{\n    public string Name { get; set; }\n    public int Code { get; set; }\n\n    public bool Equals(Product other)\n    {\n\n        //Check whether the compared object is null. \n        if (Object.ReferenceEquals(other, null)) return false;\n\n        //Check whether the compared object references the same data. \n        if (Object.ReferenceEquals(this, other)) return true;\n\n        //Check whether the products&#39; properties are equal. \n        return Code.Equals(other.Code) &amp;&amp; Name.Equals(other.Name);\n    }\n\n    // If Equals() returns true for a pair of objects  \n    // then GetHashCode() must return the same value for these objects. \n\n    public override int GetHashCode()\n    {\n\n        //Get hash code for the Name field if it is not null. \n        int hashProductName = Name == null ? 0 : Name.GetHashCode();\n\n        //Get hash code for the Code field. \n        int hashProductCode = Code.GetHashCode();\n\n        //Calculate the hash code for the product. \n        return hashProductName ^ hashProductCode;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CSLINQEncapsulatedComparer#1\">Public Class Product\n    Implements IEquatable(Of Product)\n\n    Public Property Name As String\n    Public Property Code As Integer\n\n    Public Function Equals1(\n        ByVal other As Product\n        ) As Boolean Implements IEquatable(Of Product).Equals\n\n        &#39; Check whether the compared object is null.\n        If other Is Nothing Then Return False\n\n        &#39; Check whether the compared object references the same data.\n        If Me Is Other Then Return True\n\n        &#39; Check whether the products&#39; properties are equal.\n        Return Code.Equals(other.Code) AndAlso Name.Equals(other.Name)\n    End Function\n\n    Public Overrides Function GetHashCode() As Integer\n\n        &#39; Get hash code for the Name field if it is not null.\n        Dim hashProductName = If(Name Is Nothing, 0, Name.GetHashCode())\n\n        &#39; Get hash code for the Code field.\n        Dim hashProductCode = Code.GetHashCode()\n\n        &#39; Calculate the hash code for the product.\n        Return hashProductName Xor hashProductCode\n    End Function\nEnd Class\n</code></pre><p> After you implement this interface, you can use a sequence of <code>Product</code> objects in the Distinct(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#5\">        Product[] products = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;orange&quot;, Code = 4 }, \n                               new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;lemon&quot;, Code = 12 } };\n\n        //Exclude duplicates.\n        \n        IEnumerable&lt;Product&gt; noduplicates =\n            products.Distinct();\n\n        foreach (var product in noduplicates)\n            Console.WriteLine(product.Name + &quot; &quot; + product.Code);\n\n        /*\n            This code produces the following output:\n            apple 9 \n            orange 4\n            lemon 12\n        */\n</code></pre><pre><code class=\"lang-vb\" name=\"CSLINQEncapsulatedComparer#5\">\n        Dim products() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}, \n             New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;lemon&quot;, .Code = 12}}\n\n        &#39; Exclude duplicates.\n\n        Dim noduplicates = products.Distinct()\n\n        For Each product In noduplicates\n            Console.WriteLine(product.Name &amp; &quot; &quot; &amp; product.Code)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; apple 9\n        &#39; orange 4\n        &#39; lemon 12\n        &#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Distinct__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Distinct_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Distinct&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns distinct elements from a sequence by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to remove duplicate elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains distinct elements from the source sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The Distinct(TSource) method returns an unordered sequence that contains no duplicate values. If c<code>omparer</code> is <code>null</code>, the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to implement an equality comparer that can be used in the Distinct(TSource) method.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#1\">Public Class Product\n    Public Property Name As String\n    Public Property Code As Integer\nEnd Class\n\n&#39; Custom comparer for the Product class\nPublic Class ProductComparer\n    Implements IEqualityComparer(Of Product)\n\n    Public Function Equals1(\n        ByVal x As Product, \n        ByVal y As Product\n        ) As Boolean Implements IEqualityComparer(Of Product).Equals\n\n        &#39; Check whether the compared objects reference the same data.\n        If x Is y Then Return True\n\n        &#39;Check whether any of the compared objects is null.\n        If x Is Nothing OrElse y Is Nothing Then Return False\n\n        &#39; Check whether the products&#39; properties are equal.\n        Return (x.Code = y.Code) AndAlso (x.Name = y.Name)\n    End Function\n\n    Public Function GetHashCode1(\n        ByVal product As Product\n        ) As Integer Implements IEqualityComparer(Of Product).GetHashCode\n\n        &#39; Check whether the object is null.\n        If product Is Nothing Then Return 0\n\n        &#39; Get hash code for the Name field if it is not null.\n        Dim hashProductName = \n            If(product.Name Is Nothing, 0, product.Name.GetHashCode())\n\n        &#39; Get hash code for the Code field.\n        Dim hashProductCode = product.Code.GetHashCode()\n\n        &#39; Calculate the hash code for the product.\n        Return hashProductName Xor hashProductCode\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#1\">public class Product\n{\n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\n// Custom comparer for the Product class\nclass ProductComparer : IEqualityComparer&lt;Product&gt;\n{\n    // Products are equal if their names and product numbers are equal.\n    public bool Equals(Product x, Product y)\n    {\n       \n        //Check whether the compared objects reference the same data.\n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether any of the compared objects is null.\n        if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))\n            return false;\n\n        //Check whether the products&#39; properties are equal.\n        return x.Code == y.Code &amp;&amp; x.Name == y.Name;\n    }\n\n    // If Equals() returns true for a pair of objects \n    // then GetHashCode() must return the same value for these objects.\n\n    public int GetHashCode(Product product)\n    {\n        //Check whether the object is null\n        if (Object.ReferenceEquals(product, null)) return 0;\n\n        //Get hash code for the Name field if it is not null.\n        int hashProductName = product.Name == null ? 0 : product.Name.GetHashCode();\n\n        //Get hash code for the Code field.\n        int hashProductCode = product.Code.GetHashCode();\n\n        //Calculate the hash code for the product.\n        return hashProductName ^ hashProductCode;\n    }\n\n}\n</code></pre><p> After you implement this comparer, you can use a sequence of <code>Product</code> objects in the Distinct(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#5\">\n        Dim products() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}, \n             New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;lemon&quot;, .Code = 12}}\n\n        &#39; Exclude duplicates.\n\n        Dim noduplicates = products.Distinct(New ProductComparer())\n\n        For Each product In noduplicates\n            Console.WriteLine(product.Name &amp; &quot; &quot; &amp; product.Code)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; apple 9\n        &#39; orange 4\n        &#39; lemon 12\n        &#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#5\">        Product[] products = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;orange&quot;, Code = 4 }, \n                               new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;lemon&quot;, Code = 12 } };\n\n        //Exclude duplicates.\n        \n        IEnumerable&lt;Product&gt; noduplicates =\n            products.Distinct(new ProductComparer());\n\n        foreach (var product in noduplicates)\n            Console.WriteLine(product.Name + &quot; &quot; + product.Code);\n\n        /*\n            This code produces the following output:\n            apple 9 \n            orange 4\n            lemon 12\n        */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ElementAt__1_System_Collections_Generic_IEnumerable___0__System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ElementAt_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ElementAt&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the element at a specified index in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The element at the specified position in the source sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than 0 or greater than or equal to the number of elements in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type of <code>source</code> implements <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.  </p>\n<p> This method throws an exception if <code>index</code> is out of range. To instead return a default value when the specified index is out of range, use the &lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt; method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ElementAt(TSource) to return an element at a specific position.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#28\">string[] names =\n    { &quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, &quot;Andersen, Henriette Thaulow&quot;, \n        \n        &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot; };\nRandom random = new Random(DateTime.Now.Millisecond);\n\nstring name = names.ElementAt(random.Next(0, names.Length));\n\nConsole.WriteLine(&quot;The name chosen at random is &#39;{0}&#39;.&quot;, name);\n\n/*\n This code produces the following sample output:\n\n The name chosen at random is &#39;Ito, Shu&#39;.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#28\">            &#39; Create an array of strings.\n            Dim names() As String =\n            {&quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, &quot;Andersen, Henriette Thaulow&quot;, &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot;}\n\n            Dim random As Random = New Random(DateTime.Now.Millisecond)\n\n            &#39; Get a string at a random index within the array.\n            Dim name As String = names.ElementAt(random.Next(0, names.Length))\n\n            &#39; Display the output.\n            MsgBox(&quot;The name chosen at random is &quot; &amp; name)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The name chosen at random is Ito, Shu\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ElementAtOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ElementAtOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ElementAtOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the element at a specified index in a sequence or a default value if the index is out of range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type of <code>source</code> implements <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.  </p>\n<p> The default value for reference and nullable types is <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ElementAtOrDefault(TSource). This example uses an index that is outside the bounds of the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#29\">string[] names =\n    { &quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, &quot;Andersen, Henriette Thaulow&quot;,\n        &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot; };\n\nint index = 20;\n\nstring name = names.ElementAtOrDefault(index);\n\nConsole.WriteLine(\n    &quot;The name chosen at index {0} is &#39;{1}&#39;.&quot;,\n    index,\n    String.IsNullOrEmpty(name) ? &quot;&lt;no name at this index&gt;&quot; : name);\n\n/*\n This code produces the following output:\n\n The name chosen at index 20 is &#39;&lt;no name at this index&gt;&#39;.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#29\">            &#39; Create an array of strings.\n            Dim names() As String =\n            {&quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, &quot;Andersen, Henriette Thaulow&quot;, &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot;}\n\n            Dim index As Integer = 20\n\n            &#39; Get a string at an index that is out of range in the array.\n            Dim name As String = names.ElementAtOrDefault(index)\n\n            Dim text As String = If(String.IsNullOrEmpty(name), &quot;[THERE IS NO NAME AT THIS INDEX]&quot;, name)\n\n            &#39; Display the output.\n            MsgBox(&quot;The name chosen at index &quot; &amp; index &amp; &quot; is &quot; &amp; text)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The name chosen at index 20 is [THERE IS NO NAME AT THIS INDEX]\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Empty__1\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Empty_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Empty&lt;TResult&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an empty <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that has the specified type argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An empty <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose type argument is <code>TResult</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Empty(TResult) method caches an empty sequence of type <code>TResult</code>. When the object it returns is enumerated, it yields no elements.  </p>\n<p> In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>. It can also be used to generate a neutral element for methods such as &lt;xref:System.Linq.Enumerable.Union%2A&gt;. See the Example section for an example of this use of Empty(TResult).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Empty(TResult) to generate an empty <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#30\">IEnumerable&lt;decimal&gt; empty = Enumerable.Empty&lt;decimal&gt;();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#30\">            &#39; Create an empty sequence.\n            Dim empty As IEnumerable(Of Decimal) = Enumerable.Empty(Of Decimal)()\n</code></pre><p> The following code example demonstrates a possible application of the Empty(TResult) method. The &lt;xref:System.Linq.Enumerable.Aggregate%2A&gt; method is applied to a collection of string arrays. The elements of each array in the collection are added to the resulting <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> only if that array contains four or more elements. Empty(TResult) is used to generate the seed value for &lt;xref:System.Linq.Enumerable.Aggregate%2A&gt; because if no array in the collection has four or more elements, only the empty sequence is returned.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#31\">string[] names1 = { &quot;Hartono, Tommy&quot; };\nstring[] names2 = { &quot;Adams, Terry&quot;, &quot;Andersen, Henriette Thaulow&quot;,\n                      &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot; };\nstring[] names3 = { &quot;Solanki, Ajay&quot;, &quot;Hoeing, Helge&quot;,\n                      &quot;Andersen, Henriette Thaulow&quot;,\n                      &quot;Potra, Cristina&quot;, &quot;Iallo, Lucio&quot; };\n\nList&lt;string[]&gt; namesList =\n    new List&lt;string[]&gt; { names1, names2, names3 };\n\n// Only include arrays that have four or more elements\nIEnumerable&lt;string&gt; allNames =\n    namesList.Aggregate(Enumerable.Empty&lt;string&gt;(),\n    (current, next) =&gt; next.Length &gt; 3 ? current.Union(next) : current);\n\nforeach (string name in allNames)\n{\n    Console.WriteLine(name);\n}\n\n/*\n This code produces the following output:\n\n Adams, Terry\n Andersen, Henriette Thaulow\n Hedlund, Magnus\n Ito, Shu\n Solanki, Ajay\n Hoeing, Helge\n Potra, Cristina\n Iallo, Lucio\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#31\">            &#39; Create three string arrays.\n            Dim names1() As String =\n            {&quot;Hartono, Tommy&quot;}\n            Dim names2() As String =\n            {&quot;Adams, Terry&quot;, &quot;Andersen, Henriette Thaulow&quot;, &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot;}\n            Dim names3() As String =\n            {&quot;Solanki, Ajay&quot;, &quot;Hoeing, Helge&quot;, &quot;Andersen, Henriette Thaulow&quot;, &quot;Potra, Cristina&quot;, &quot;Iallo, Lucio&quot;}\n\n            &#39; Create a List that contains 3 elements, where\n            &#39; each element is an array of strings.\n            Dim namesList As New List(Of String())(New String()() {names1, names2, names3})\n\n            &#39; Select arrays that have four or more elements and union\n            &#39; them into one collection, using Empty() to generate the \n            &#39; empty collection for the seed value.\n            Dim allNames As IEnumerable(Of String) =\n            namesList.Aggregate(Enumerable.Empty(Of String)(),\n                                Function(current, nextOne) _\n                                    IIf(nextOne.Length &gt; 3, current.Union(nextOne), current))\n\n            Dim output As New System.Text.StringBuilder\n            For Each name As String In allNames\n                output.AppendLine(name)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Adams, Terry\n            &#39; Andersen, Henriette Thaulow\n            &#39; Hedlund, Magnus\n            &#39; Ito, Shu\n            &#39; Solanki, Ajay\n            &#39; Hoeing, Helge\n            &#39; Potra, Cristina\n            &#39; Iallo, Lucio\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Except__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Except_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Except&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set difference of two sequences by using the default equality comparer to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements that are not also in <code>second</code> will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A sequence that contains the set difference of the elements of two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The set difference of two sets is defined as the members of the first set that do not appear in the second set.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method returns those elements in <code>first</code> that do not appear in <code>second</code>. It does not also return those elements in <code>second</code> that do not appear in <code>first</code>.  </p>\n</div>\n<p> The default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values of the types that implement the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> generic interface. To compare a custom data type, you need to implement this interface and provide your own <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods for the type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Except(TSource) method to compare two sequences of numbers and return elements that appear only in the first sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#34\">double[] numbers1 = { 2.0, 2.0, 2.1, 2.2, 2.3, 2.3, 2.4, 2.5 };\ndouble[] numbers2 = { 2.2 };\n\nIEnumerable&lt;double&gt; onlyInFirstSet = numbers1.Except(numbers2);\n\nforeach (double number in onlyInFirstSet)\n    Console.WriteLine(number);\n\n/*\n This code produces the following output:\n\n 2\n 2.1\n 2.3\n 2.4\n 2.5\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#34\">            &#39; Create two arrays of doubles.\n            Dim numbers1() As Double = { 2.0, 2.0, 2.1, 2.2, 2.3, 2.3, 2.4, 2.5 }\n            Dim numbers2() As Double = {2.2}\n\n            &#39; Select the elements from the first array that are not\n            &#39; in the second array.\n            Dim onlyInFirstSet As IEnumerable(Of Double) = numbers1.Except(numbers2)\n\n            Dim output As New System.Text.StringBuilder\n            For Each number As Double In onlyInFirstSet\n                output.AppendLine(number)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 2\n            &#39; 2.1\n            &#39; 2.3\n            &#39; 2.4\n            &#39; 2.5\n</code></pre><p> If you want to compare sequences of objects of some custom data type, you have to implement the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> generic interface in a helperclass. The following code example shows how to implement this interface in a custom data type and provide <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#9\">public class ProductA\n{ \n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\npublic class ProductComparer : IEqualityComparer&lt;ProductA&gt;\n{\n\n    public bool Equals(ProductA x, ProductA y)\n    {\n        //Check whether the objects are the same object. \n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether the products&#39; properties are equal. \n        return x != null &amp;&amp; y != null &amp;&amp; x.Code.Equals(y.Code) &amp;&amp; x.Name.Equals(y.Name);\n    }\n\n    public int GetHashCode(ProductA obj)\n    {\n        //Get hash code for the Name field if it is not null. \n        int hashProductName = obj.Name == null ? 0 : obj.Name.GetHashCode();\n\n        //Get hash code for the Code field. \n        int hashProductCode = obj.Code.GetHashCode();\n\n        //Calculate the hash code for the product. \n        return hashProductName ^ hashProductCode;\n    }\n}\n</code></pre><p> After you implement this interface, you can use sequences of <code>ProductA</code> objects in the Except(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#7\">        ProductA[] fruits1 = { new ProductA { Name = &quot;apple&quot;, Code = 9 }, \n                               new ProductA { Name = &quot;orange&quot;, Code = 4 },\n                                new ProductA { Name = &quot;lemon&quot;, Code = 12 } };\n\n        ProductA[] fruits2 = { new ProductA { Name = &quot;apple&quot;, Code = 9 } };\n\n        //Get all the elements from the first array\n        //except for the elements from the second array.\n\n        IEnumerable&lt;ProductA&gt; except =\n            fruits1.Except(fruits2);\n\n        foreach (var product in except)\n            Console.WriteLine(product.Name + &quot; &quot; + product.Code);\n\n        /*\n          This code produces the following output:\n         \n          orange 4\n          lemon 12\n        */\n</code></pre><pre><code class=\"lang-vb\" name=\"CSLINQEncapsulatedComparer#7\">        Dim fruits1() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}, \n             New Product With {.Name = &quot;lemon&quot;, .Code = 12}}\n\n        Dim fruits2() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}}\n\n        &#39; Get all the elements from the first array\n        &#39; except for the elements from the second array.\n\n        Dim except = fruits1.Except(fruits2)\n\n        For Each product In except\n            Console.WriteLine(product.Name &amp; &quot; &quot; &amp; product.Code)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; orange 4\n        &#39; lemon 12\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Except__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Except_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Except&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set difference of two sequences by using the specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements that are not also in <code>second</code> will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A sequence that contains the set difference of the elements of two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If c<code>omparer</code> is <code>null</code>, the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to implement an equality comparer that can be used in the Except(TSource) method.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#1\">Public Class Product\n    Public Property Name As String\n    Public Property Code As Integer\nEnd Class\n\n&#39; Custom comparer for the Product class\nPublic Class ProductComparer\n    Implements IEqualityComparer(Of Product)\n\n    Public Function Equals1(\n        ByVal x As Product, \n        ByVal y As Product\n        ) As Boolean Implements IEqualityComparer(Of Product).Equals\n\n        &#39; Check whether the compared objects reference the same data.\n        If x Is y Then Return True\n\n        &#39;Check whether any of the compared objects is null.\n        If x Is Nothing OrElse y Is Nothing Then Return False\n\n        &#39; Check whether the products&#39; properties are equal.\n        Return (x.Code = y.Code) AndAlso (x.Name = y.Name)\n    End Function\n\n    Public Function GetHashCode1(\n        ByVal product As Product\n        ) As Integer Implements IEqualityComparer(Of Product).GetHashCode\n\n        &#39; Check whether the object is null.\n        If product Is Nothing Then Return 0\n\n        &#39; Get hash code for the Name field if it is not null.\n        Dim hashProductName = \n            If(product.Name Is Nothing, 0, product.Name.GetHashCode())\n\n        &#39; Get hash code for the Code field.\n        Dim hashProductCode = product.Code.GetHashCode()\n\n        &#39; Calculate the hash code for the product.\n        Return hashProductName Xor hashProductCode\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#1\">public class Product\n{\n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\n// Custom comparer for the Product class\nclass ProductComparer : IEqualityComparer&lt;Product&gt;\n{\n    // Products are equal if their names and product numbers are equal.\n    public bool Equals(Product x, Product y)\n    {\n       \n        //Check whether the compared objects reference the same data.\n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether any of the compared objects is null.\n        if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))\n            return false;\n\n        //Check whether the products&#39; properties are equal.\n        return x.Code == y.Code &amp;&amp; x.Name == y.Name;\n    }\n\n    // If Equals() returns true for a pair of objects \n    // then GetHashCode() must return the same value for these objects.\n\n    public int GetHashCode(Product product)\n    {\n        //Check whether the object is null\n        if (Object.ReferenceEquals(product, null)) return 0;\n\n        //Get hash code for the Name field if it is not null.\n        int hashProductName = product.Name == null ? 0 : product.Name.GetHashCode();\n\n        //Get hash code for the Code field.\n        int hashProductCode = product.Code.GetHashCode();\n\n        //Calculate the hash code for the product.\n        return hashProductName ^ hashProductCode;\n    }\n\n}\n</code></pre><p> After you implement this comparer, you can use sequences of <code>Product</code> objects in the Except(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#7\">        Dim fruits1() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}, \n             New Product With {.Name = &quot;lemon&quot;, .Code = 12}}\n\n        Dim fruits2() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}}\n\n        &#39; Get all the elements from the first array\n        &#39; except for the elements from the second array.\n\n        Dim except = fruits1.Except(fruits2, New ProductComparer())\n\n        For Each product In except\n            Console.WriteLine(product.Name &amp; &quot; &quot; &amp; product.Code)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; orange 4\n        &#39; lemon 12\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#7\">        Product[] fruits1 = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;orange&quot;, Code = 4 },\n                                new Product { Name = &quot;lemon&quot;, Code = 12 } };\n\n        Product[] fruits2 = { new Product { Name = &quot;apple&quot;, Code = 9 } };\n\n        //Get all the elements from the first array\n        //except for the elements from the second array.\n\n        IEnumerable&lt;Product&gt; except =\n            fruits1.Except(fruits2, new ProductComparer());\n\n        foreach (var product in except)\n            Console.WriteLine(product.Name + &quot; &quot; + product.Code);\n\n        /*\n          This code produces the following output:\n         \n          orange 4\n          lemon 12\n        */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_First__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_First_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">First&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first element of a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return the first element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The first element in the specified sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The First(TSource) method throws an exception if <code>source</code> contains no elements. To instead return a default value when the source sequence is empty, use the &lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt; method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use First(TSource) to return the first element of an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#35\">int[] numbers = { 9, 34, 65, 92, 87, 435, 3, 54, \n                    83, 23, 87, 435, 67, 12, 19 };\n\nint first = numbers.First();\n\nConsole.WriteLine(first);\n\n/*\n This code produces the following output:\n\n 9\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#35\">            &#39; Create an array of integers.\n            Dim numbers() As Integer =\n            {9, 34, 65, 92, 87, 435, 3, 54, 83, 23, 87, 435, 67, 12, 19}\n\n            &#39; Select the first element in the array.\n            Dim first As Integer = numbers.First()\n\n            &#39; Display the output.\n            MsgBox(first)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 9\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_First__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_First_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">First&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first element in a sequence that satisfies a specified condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The first element in the sequence that passes the test in the specified predicate function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No element satisfies the condition in <code>predicate</code>.  </p>\n<p> -or-  </p>\n<p> The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The First(TSource) method throws an exception if no matching element is found in <code>source</code>. To instead return a default value when no matching element is found, use the &lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt; method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use First(TSource) to return the first element of an array that satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#36\">int[] numbers = { 9, 34, 65, 92, 87, 435, 3, 54, \n                    83, 23, 87, 435, 67, 12, 19 };\n\nint first = numbers.First(number =&gt; number &gt; 80);\n\nConsole.WriteLine(first);\n\n/*\n This code produces the following output:\n\n 92\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#36\">            &#39; Create an array of integers.\n            Dim numbers() As Integer =\n            {9, 34, 65, 92, 87, 435, 3, 54, 83, 23, 87, 435, 67, 12, 19}\n\n            &#39; Select the first element in the array whose value is greater than 80.\n            Dim first As Integer = numbers.First(Function(number) number &gt; 80)\n\n            &#39; Display the output.\n            MsgBox(first)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 92\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_FirstOrDefault__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_FirstOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return the first element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for reference and nullable types is <code>null</code>.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt; method does not provide a way to specify a default value. If you want to specify a default value other than <code>default</code>(<code>TSource</code>), use the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> method as described in the Example section.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use FirstOrDefault(TSource) on an empty array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#37\">int[] numbers = { };\nint first = numbers.FirstOrDefault();\nConsole.WriteLine(first);\n\n/*\n This code produces the following output:\n\n 0\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#37\">            &#39; Create an empty array.\n            Dim numbers() As Integer = {}\n\n            &#39; Select the first element in the array, or a default value\n            &#39; if there are not elements in the array.\n            Dim first As Integer = numbers.FirstOrDefault()\n\n            &#39; Display the output.\n            MsgBox(first)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 0\n</code></pre><p> Sometimes the value of <code>default</code>(<code>TSource</code>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> method to specify the default value that you want to use if the collection is empty. Then, call <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_First__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"relative-path\">First&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a> to obtain the first element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty. Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> to specify a default value of 1.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#126\">List&lt;int&gt; months = new List&lt;int&gt; { };\n\n// Setting the default value to 1 after the query.\nint firstMonth1 = months.FirstOrDefault();\nif (firstMonth1 == 0)\n{\n    firstMonth1 = 1;\n}\nConsole.WriteLine(&quot;The value of the firstMonth1 variable is {0}&quot;, firstMonth1);\n\n// Setting the default value to 1 by using DefaultIfEmpty() in the query.\nint firstMonth2 = months.DefaultIfEmpty(1).First();\nConsole.WriteLine(&quot;The value of the firstMonth2 variable is {0}&quot;, firstMonth2);\n\n/*\n This code produces the following output:\n\n The value of the firstMonth1 variable is 1\n The value of the firstMonth2 variable is 1\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#126\">            Dim months As New List(Of Integer)(New Integer() {})\n\n            &#39; Setting the default value to 1 after the query.\n            Dim firstMonth1 As Integer = months.FirstOrDefault()\n            If firstMonth1 = 0 Then\n                firstMonth1 = 1\n            End If\n            MsgBox(String.Format(&quot;The value of the firstMonth1 variable is {0}&quot;, firstMonth1))\n\n            &#39; Setting the default value to 1 by using DefaultIfEmpty() in the query.\n            Dim firstMonth2 As Integer = months.DefaultIfEmpty(1).First()\n            MsgBox(String.Format(&quot;The value of the firstMonth2 variable is {0}&quot;, firstMonth2))\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The value of the firstMonth1 variable is 1\n            &#39; The value of the firstMonth2 variable is 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_FirstOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_FirstOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for reference and nullable types is <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use FirstOrDefault(TSource) by passing in a predicate. In the second call to the method, there is no element in the array that satisfies the condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#38\">string[] names = { &quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, \n                     &quot;Andersen, Henriette Thaulow&quot;, \n                     &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot; };\n\nstring firstLongName = names.FirstOrDefault(name =&gt; name.Length &gt; 20);\n\nConsole.WriteLine(&quot;The first long name is &#39;{0}&#39;.&quot;, firstLongName);\n\nstring firstVeryLongName = names.FirstOrDefault(name =&gt; name.Length &gt; 30);\n\nConsole.WriteLine(\n    &quot;There is {0} name longer than 30 characters.&quot;,\n    string.IsNullOrEmpty(firstVeryLongName) ? &quot;not a&quot; : &quot;a&quot;);\n\n/*\n This code produces the following output:\n\n The first long name is &#39;Andersen, Henriette Thaulow&#39;.\n There is not a name longer than 30 characters.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#38\">            &#39; Create an array of strings.\n            Dim names() As String =\n            {&quot;Hartono, Tommy&quot;, &quot;Adams, Terry&quot;, &quot;Andersen, Henriette Thaulow&quot;, &quot;Hedlund, Magnus&quot;, &quot;Ito, Shu&quot;}\n\n            &#39; Select the first string in the array whose length is greater than 20.\n            Dim firstLongName As String =\n            names.FirstOrDefault(Function(name) name.Length &gt; 20)\n\n            &#39; Display the output.\n            MsgBox(&quot;The first long name is &quot; &amp; firstLongName)\n\n            &#39; Select the first string in the array whose length is greater than 30,\n            &#39; or a default value if there are no such strings in the array.\n            Dim firstVeryLongName As String =\n            names.FirstOrDefault(Function(name) name.Length &gt; 30)\n\n            Dim text As String = IIf(String.IsNullOrEmpty(firstVeryLongName), &quot;not a&quot;, &quot;a&quot;)\n\n            MsgBox(&quot;There is &quot; &amp; text &amp; &quot; name longer than 30 characters.&quot;)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The first long name is Andersen, Henriette Thaulow\n            &#39;\n            &#39; There is not a name longer than 30 characters.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TSource</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IEnumerable<><tkey, tsource=\"\">&gt;</tkey,></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TSource))</code> in Visual Basic where each <span class=\"xref\">stem.Linq.IGrouping`2</span> object contains a sequence of objects and a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For examples of <code>GroupBy</code>, see the following topics.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</a>  <ul>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___1_System_Collections_Generic_IEnumerable___0____2__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;)</a>  </li>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__4_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Func___1_System_Collections_Generic_IEnumerable___2____3__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;)</a>  </li>\n</ul>\n</li>\n</ul>\n</div>\n<p> The GroupBy(TSource, method returns a collection of <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> objects, one for each distinct key that was encountered. An <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> is an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> that also has a key associated with its elements.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> objects are yielded in an order based on the order of the elements in <code>source</code> that produced the first key of each <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a>. Elements in a grouping are yielded in the order they appear in <code>source</code>.  </p>\n<p> The default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.  </p>\n<p> In query expression syntax, a <code>group by</code> (Visual C#) or <code>Group By Into</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;. For more information and usage examples, see <a href=\"../Topic/group%20clause%20(C%23%20Reference).md\" data-linktype=\"relative-path\">group clause</a> and <a href=\"../Topic/Group%20By%20Clause%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Group By Clause</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TSource</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IEnumerable<><tkey, tsource=\"\">&gt;</tkey,></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TSource))</code> in Visual Basic where each <span class=\"xref\">stem.Linq.IGrouping`2</span> object contains a collection of objects and a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For examples of <code>GroupBy</code>, see the following topics.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</a>  <ul>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___1_System_Collections_Generic_IEnumerable___0____2__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;)</a>  </li>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__4_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Func___1_System_Collections_Generic_IEnumerable___2____3__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;)</a>  </li>\n</ul>\n</li>\n</ul>\n</div>\n<p> The GroupBy(TSource, method returns a collection of <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> objects, one for each distinct key that was encountered. An <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> is an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> that also has a key associated with its elements.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> objects are yielded in an order based on the order of the elements in <code>source</code> that produced the first key of each <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a>. Elements in a grouping are yielded in the order they appear in <code>source</code>.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.  </p>\n<p> If two keys are considered equal according to <code>comparer</code>, the first key is chosen as the key for that grouping.  </p>\n<p> In query expression syntax, a <code>group by</code> (Visual C#) or <code>Group By Into</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;. For more information and usage examples, see <a href=\"../Topic/group%20clause%20(C%23%20Reference).md\" data-linktype=\"relative-path\">group clause</a> and <a href=\"../Topic/Group%20By%20Clause%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Group By Clause</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupBy_TSource_TKey_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to map each source element to an element in the <span class=\"xref\">stem.Linq.IGrouping`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TElement</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IEnumerable<><tkey, telement=\"\">&gt;</tkey,></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TElement))</code> in Visual Basic where each <span class=\"xref\">stem.Linq.IGrouping`2</span> object contains a collection of objects of type <code>TElement</code> and a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The GroupBy(TSource, method returns a collection of <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> objects, one for each distinct key that was encountered. An <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> is an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> that also has a key associated with its elements.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> objects are yielded in an order based on the order of the elements in <code>source</code> that produced the first key of each <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a>. Elements in a grouping are yielded in the order that the elements that produced them appear in <code>source</code>.  </p>\n<p> The default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#39\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\n// Uses method-based query syntax.\npublic static void GroupByEx1()\n{\n    // Create a list of pets.\n    List&lt;Pet&gt; pets =\n        new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8 },\n                       new Pet { Name=&quot;Boots&quot;, Age=4 },\n                       new Pet { Name=&quot;Whiskers&quot;, Age=1 },\n                       new Pet { Name=&quot;Daisy&quot;, Age=4 } };\n\n    // Group the pets using Age as the key value \n    // and selecting only the pet&#39;s Name for each value.\n    IEnumerable&lt;IGrouping&lt;int, string&gt;&gt; query =\n        pets.GroupBy(pet =&gt; pet.Age, pet =&gt; pet.Name);\n\n    // Iterate over each IGrouping in the collection.\n    foreach (IGrouping&lt;int, string&gt; petGroup in query)\n    {\n        // Print the key value of the IGrouping.\n        Console.WriteLine(petGroup.Key);\n        // Iterate over each value in the \n        // IGrouping and print the value.\n        foreach (string name in petGroup)\n            Console.WriteLine(&quot;  {0}&quot;, name);\n    }\n}\n\n/*\n This code produces the following output:\n\n 8\n   Barley\n 4\n   Boots\n   Daisy\n 1\n   Whiskers\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#39\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub GroupByEx1()\n                &#39;Create a list of Pet objects.\n                Dim pets As New List(Of Pet)(New Pet() _\n                                     {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                      New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                      New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1},\n                                      New Pet With {.Name = &quot;Daisy&quot;, .Age = 4}})\n\n                &#39; Group the pets using Age as the key \n                &#39; and selecting only the pet&#39;s Name for each value.\n                Dim query As IEnumerable(Of IGrouping(Of Integer, String)) =\n            pets.GroupBy(Function(pet) pet.Age,\n                         Function(pet) pet.Name)\n\n                Dim output As New System.Text.StringBuilder\n                &#39; Iterate over each IGrouping in the collection.\n                For Each petGroup As IGrouping(Of Integer, String) In query\n                    &#39; Print the key value of the IGrouping.\n                    output.AppendLine(petGroup.Key)\n                    &#39; Iterate over each value in the IGrouping and print the value.\n                    For Each name As String In petGroup\n                        output.AppendLine(&quot;  &quot; &amp; name)\n                    Next\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 8\n            &#39;   Barley\n            &#39; 4\n            &#39;   Boots\n            &#39;   Daisy\n            &#39; 1\n            &#39;   Whiskers\n</code></pre><p> In query expression syntax, a <code>group by</code> (Visual C#) or <code>Group By Into</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;. The translation of the query expression in the following example is equivalent to the query in the example above.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#122\">IEnumerable&lt;IGrouping&lt;int, string&gt;&gt; query =\n    from pet in pets\n    group pet.Name by pet.Age;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#122\">                Dim query =\n            From pet In pets\n            Group pet.Name By Age = pet.Age Into ageGroup = Group\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the GroupBy(TSource, method.</p>\n</div>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupBy_TSource_TKey_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group&#39;s elements are projected by using a specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to map each source element to an element in an <span class=\"xref\">stem.Linq.IGrouping`2</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TElement</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IEnumerable<><tkey, telement=\"\">&gt;</tkey,></code> in C# or <code>IEnumerable(Of IGrouping(Of TKey, TElement))</code> in Visual Basic where each <span class=\"xref\">stem.Linq.IGrouping`2</span> object contains a collection of objects of type <code>TElement</code> and a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For examples of <code>GroupBy</code>, see the following topics.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</a>  <ul>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___1_System_Collections_Generic_IEnumerable___0____2__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;)</a>  </li>\n<li><a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_GroupBy__4_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Func___1_System_Collections_Generic_IEnumerable___2____3__\" data-linktype=\"relative-path\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;)</a>  </li>\n</ul>\n</li>\n</ul>\n</div>\n<p> The GroupBy(TSource, method returns a collection of <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> objects, one for each distinct key that was encountered. An <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> is an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> that also has a key associated with its elements.  </p>\n<p> The <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> objects are yielded in an order based on the order of the elements in <code>source</code> that produced the first key of each <a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a>. Elements in a grouping are yielded in the order that the elements that produced them appear in <code>source</code>.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.  </p>\n<p> If two keys are considered equal according to <code>comparer</code>, the first key is chosen as the key for that grouping.  </p>\n<p> In query expression syntax, a <code>group by</code> (Visual C#) or <code>Group By Into</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;. For more information and usage examples, see <a href=\"../Topic/group%20clause%20(C%23%20Reference).md\" data-linktype=\"relative-path\">group clause</a> and <a href=\"../Topic/Group%20By%20Clause%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Group By Clause</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___1_System_Collections_Generic_IEnumerable___0____2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupBy_TSource_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result value from each group.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In query expression syntax, a <code>group by</code> (Visual C#) or <code>Group By Into</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence and project a sequence of results of type <code>TResult</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#15\">class Pet\n{\n    public string Name { get; set; }\n    public double Age { get; set; }\n}\n\npublic static void GroupByEx3()\n{\n    // Create a list of pets.\n    List&lt;Pet&gt; petsList =\n        new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8.3 },\n                       new Pet { Name=&quot;Boots&quot;, Age=4.9 },\n                       new Pet { Name=&quot;Whiskers&quot;, Age=1.5 },\n                       new Pet { Name=&quot;Daisy&quot;, Age=4.3 } };\n\n    // Group Pet objects by the Math.Floor of their age.\n    // Then project an anonymous type from each group\n    // that consists of the key, the count of the group&#39;s\n    // elements, and the minimum and maximum age in the group.\n    var query = petsList.GroupBy(\n        pet =&gt; Math.Floor(pet.Age),\n        (age, pets) =&gt; new\n        {\n            Key = age,\n            Count = pets.Count(),\n            Min = pets.Min(pet =&gt; pet.Age),\n            Max = pets.Max(pet =&gt; pet.Age)\n        });\n\n    // Iterate over each anonymous type.\n    foreach (var result in query)\n    {\n        Console.WriteLine(&quot;<br>Age group: &quot; + result.Key);\n        Console.WriteLine(&quot;Number of pets in this age group: &quot; + result.Count);\n        Console.WriteLine(&quot;Minimum age: &quot; + result.Min);\n        Console.WriteLine(&quot;Maximum age: &quot; + result.Max);\n    }\n\n    /*  This code produces the following output:\n     \n        Age group: 8\n        Number of pets in this age group: 1\n        Minimum age: 8.3\n        Maximum age: 8.3\n     \n        Age group: 4\n        Number of pets in this age group: 2\n        Minimum age: 4.3\n        Maximum age: 4.9\n     \n        Age group: 1\n        Number of pets in this age group: 1\n        Minimum age: 1.5\n        Maximum age: 1.5\n    */\n}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#15\">            Structure Pet\n                Public Name As String\n                Public Age As Double\n            End Structure\n\n            Public Sub GroupByEx3()\n                &#39; Create a list of pets.\n                Dim petsList As New List(Of Pet)(New Pet() _\n                                     {New Pet With {.Name = &quot;Barley&quot;, .Age = 8.3},\n                                      New Pet With {.Name = &quot;Boots&quot;, .Age = 4.9},\n                                      New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1.5},\n                                      New Pet With {.Name = &quot;Daisy&quot;, .Age = 4.3}})\n\n                &#39; Group Pet objects by the Math.Floor of their age.\n                &#39; Then project an anonymous type from each group\n                &#39; that consists of the key, the count of the group&#39;s\n                &#39; elements, and the minimum and maximum age in the group.\n                Dim query = petsList.GroupBy(\n            Function(pet) Math.Floor(pet.Age),\n            Function(age, pets) New With\n                {.Key = age,\n                .Count = pets.Count(),\n                .Min = pets.Min(Function(pet) pet.Age),\n                .Max = pets.Max(Function(Pet) Pet.Age)}\n            )\n\n                Dim output As New System.Text.StringBuilder\n                &#39; Iterate over each anonymous type.\n                For Each result In query\n                    output.AppendLine(vbCrLf &amp; &quot;Age group: &quot; &amp; result.Key)\n                    output.AppendLine(&quot;Number of pets in this age group: &quot; &amp; result.Count)\n                    output.AppendLine(&quot;Minimum age: &quot; &amp; result.Min)\n                    output.AppendLine(&quot;Maximum age: &quot; &amp; result.Max)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString)\n            End Sub\n\n            &#39; This code produces the following output:\n\n            &#39; Age group: 8\n            &#39; Number of pets in this age group: 1\n            &#39; Minimum age: 8.3\n            &#39; Maximum age: 8.3\n            &#39;\n            &#39; Age group: 4\n            &#39; Number of pets in this age group: 2\n            &#39; Minimum age: 4.3\n            &#39; Maximum age: 4.9\n            &#39;\n            &#39; Age group: 1\n            &#39; Number of pets in this age group: 1\n            &#39; Minimum age: 1.5\n            &#39; Maximum age: 1.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupBy__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___1_System_Collections_Generic_IEnumerable___0____2__System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupBy_TSource_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TKey,IEnumerable&lt;TSource&gt;,TResult&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result value from each group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys with.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupBy__4_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Func___1_System_Collections_Generic_IEnumerable___2____3__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupBy_TSource_TKey_TElement_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to map each source element to an element in an <span class=\"xref\">stem.Linq.IGrouping`2</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TElement</span>&gt;,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result value from each group.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In query expression syntax, a <code>group by</code> (Visual C#) or <code>Group By Into</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupBy(TSource, to group the projected elements of a sequence and then project a sequence of results of type <code>TResult</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#125\">class Pet\n{\n    public string Name { get; set; }\n    public double Age { get; set; }\n}\n\npublic static void GroupByEx4()\n{\n    // Create a list of pets.\n    List&lt;Pet&gt; petsList =\n        new List&lt;Pet&gt;{ new Pet { Name=&quot;Barley&quot;, Age=8.3 },\n                       new Pet { Name=&quot;Boots&quot;, Age=4.9 },\n                       new Pet { Name=&quot;Whiskers&quot;, Age=1.5 },\n                       new Pet { Name=&quot;Daisy&quot;, Age=4.3 } };\n\n    // Group Pet.Age values by the Math.Floor of the age.\n    // Then project an anonymous type from each group\n    // that consists of the key, the count of the group&#39;s\n    // elements, and the minimum and maximum age in the group.\n    var query = petsList.GroupBy(\n        pet =&gt; Math.Floor(pet.Age),\n        pet =&gt; pet.Age,\n        (baseAge, ages) =&gt; new\n        {\n            Key = baseAge,\n            Count = ages.Count(),\n            Min = ages.Min(),\n            Max = ages.Max()\n        });\n\n    // Iterate over each anonymous type.\n    foreach (var result in query)\n    {\n        Console.WriteLine(&quot;<br>Age group: &quot; + result.Key);\n        Console.WriteLine(&quot;Number of pets in this age group: &quot; + result.Count);\n        Console.WriteLine(&quot;Minimum age: &quot; + result.Min);\n        Console.WriteLine(&quot;Maximum age: &quot; + result.Max);\n    }\n\n    /*  This code produces the following output:\n     \n        Age group: 8\n        Number of pets in this age group: 1\n        Minimum age: 8.3\n        Maximum age: 8.3\n     \n        Age group: 4\n        Number of pets in this age group: 2\n        Minimum age: 4.3\n        Maximum age: 4.9\n     \n        Age group: 1\n        Number of pets in this age group: 1\n        Minimum age: 1.5\n        Maximum age: 1.5\n    */\n}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#125\">            Structure Pet\n                Public Name As String\n                Public Age As Double\n            End Structure\n\n            Public Sub GroupByEx4()\n                &#39; Create a list of pets.\n                Dim petsList As New List(Of Pet)(New Pet() _\n                                     {New Pet With {.Name = &quot;Barley&quot;, .Age = 8.3},\n                                      New Pet With {.Name = &quot;Boots&quot;, .Age = 4.9},\n                                      New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1.5},\n                                      New Pet With {.Name = &quot;Daisy&quot;, .Age = 4.3}})\n\n                &#39; Group Pet.Age values by the Math.Floor of the age.\n                &#39; Then project an anonymous type from each group\n                &#39; that consists of the key, the count of the group&#39;s\n                &#39; elements, and the minimum and maximum age in the group.\n                Dim query = petsList.GroupBy(\n            Function(pet) Math.Floor(pet.Age),\n            Function(pet) pet.Age,\n            Function(baseAge, ages) New With\n                {.Key = baseAge,\n                .Count = ages.Count(),\n                .Min = ages.Min(),\n                .Max = ages.Max()}\n            )\n\n                Dim output As New System.Text.StringBuilder\n                &#39; Iterate over each anonymous type.\n                For Each result In query\n                    output.AppendLine(vbCrLf &amp; &quot;Age group: &quot; &amp; result.Key)\n                    output.AppendLine(&quot;Number of pets in this age group: &quot; &amp; result.Count)\n                    output.AppendLine(&quot;Minimum age: &quot; &amp; result.Min)\n                    output.AppendLine(&quot;Maximum age: &quot; &amp; result.Max)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString)\n            End Sub\n\n            &#39; This code produces the following output:\n\n            &#39; Age group: 8\n            &#39; Number of pets in this age group: 1\n            &#39; Minimum age: 8.3\n            &#39; Maximum age: 8.3\n            &#39;\n            &#39; Age group: 4\n            &#39; Number of pets in this age group: 2\n            &#39; Minimum age: 4.3\n            &#39; Maximum age: 4.9\n            &#39;\n            &#39; Age group: 1\n            &#39; Number of pets in this age group: 1\n            &#39; Minimum age: 1.5\n            &#39; Maximum age: 1.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupBy__4_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Func___1_System_Collections_Generic_IEnumerable___2____3__System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupBy_TSource_TKey_TElement_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements to group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to map each source element to an element in an <span class=\"xref\">stem.Linq.IGrouping`2</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TElement</span>&gt;,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result value from each group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys with.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of elements of type <code>TResult</code> where each element represents a projection over a group and its key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupJoin__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0_System_Collections_Generic_IEnumerable___1____3__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupJoin_TOuter_TInner_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;(IEnumerable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Func&lt;TOuter,TKey&gt;,Func&lt;TInner,TKey&gt;,Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TOuter</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to join to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TInner</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains elements of type <code>TResult</code> that are obtained by performing a grouped join on two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to hash and compare keys.  </p>\n<p> GroupJoin(TOuter, produces hierarchical results, which means that elements from <code>outer</code> are paired with collections of matching elements from <code>inner</code>. <code>GroupJoin</code> enables you to base your results on a whole set of matches for each element of <code>outer</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If there are no correlated elements in <code>inner</code> for a given element of <code>outer</code>, the sequence of matches for that element will be empty but will still appear in the results.  </p>\n</div>\n<p> The <code>resultSelector</code> function is called only one time for each <code>outer</code> element together with a collection of all the <code>inner</code> elements that match the <code>outer</code> element. This differs from the &lt;xref:System.Linq.Enumerable.Join%2A&gt; method, in which the result selector function is invoked on pairs that contain one element from <code>outer</code> and one element from <code>inner</code>.  </p>\n<p> <code>GroupJoin</code> preserves the order of the elements of <code>outer</code>, and for each element of <code>outer</code>, the order of the matching elements from <code>inner</code>.  </p>\n<p> GroupJoin(TOuter, has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See <a href=\"../Topic/Join%20Operations.md\" data-linktype=\"relative-path\">Join Operations</a>.  </p>\n<p> In query expression syntax, a <code>join â€¦ into</code> (Visual C#) or <code>Group Join</code> (Visual Basic) clause translates to an invocation of GroupJoin(TOuter,.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use GroupJoin(TOuter, to perform a grouped join on two sequences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#40\">class Person\n{\n    public string Name { get; set; }\n}\n\nclass Pet\n{\n    public string Name { get; set; }\n    public Person Owner { get; set; }\n}\n\npublic static void GroupJoinEx1()\n{\n    Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };\n    Person terry = new Person { Name = &quot;Adams, Terry&quot; };\n    Person charlotte = new Person { Name = &quot;Weiss, Charlotte&quot; };\n\n    Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n    Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n    Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, Owner = charlotte };\n    Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n    List&lt;Person&gt; people = new List&lt;Person&gt; { magnus, terry, charlotte };\n    List&lt;Pet&gt; pets = new List&lt;Pet&gt; { barley, boots, whiskers, daisy };\n\n    // Create a list where each element is an anonymous \n    // type that contains a person&#39;s name and \n    // a collection of names of the pets they own.\n    var query =\n        people.GroupJoin(pets,\n                         person =&gt; person,\n                         pet =&gt; pet.Owner,\n                         (person, petCollection) =&gt;\n                             new\n                             {\n                                 OwnerName = person.Name,\n                                 Pets = petCollection.Select(pet =&gt; pet.Name)\n                             });\n\n    foreach (var obj in query)\n    {\n        // Output the owner&#39;s name.\n        Console.WriteLine(&quot;{0}:&quot;, obj.OwnerName);\n        // Output each of the owner&#39;s pet&#39;s names.\n        foreach (string pet in obj.Pets)\n        {\n            Console.WriteLine(&quot;  {0}&quot;, pet);\n        }\n    }\n}\n\n/*\n This code produces the following output:\n\n Hedlund, Magnus:\n   Daisy\n Adams, Terry:\n   Barley\n   Boots\n Weiss, Charlotte:\n   Whiskers\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#40\">            Structure Person\n                Public Name As String\n            End Structure\n\n            Structure Pet\n                Public Name As String\n                Public Owner As Person\n            End Structure\n\n            Sub GroupJoinEx1()\n                Dim magnus As New Person With {.Name = &quot;Hedlund, Magnus&quot;}\n                Dim terry As New Person With {.Name = &quot;Adams, Terry&quot;}\n                Dim charlotte As New Person With {.Name = &quot;Weiss, Charlotte&quot;}\n\n                Dim barley As New Pet With {.Name = &quot;Barley&quot;, .Owner = terry}\n                Dim boots As New Pet With {.Name = &quot;Boots&quot;, .Owner = terry}\n                Dim whiskers As New Pet With {.Name = &quot;Whiskers&quot;, .Owner = charlotte}\n                Dim daisy As New Pet With {.Name = &quot;Daisy&quot;, .Owner = magnus}\n\n                Dim people As New List(Of Person)(New Person() {magnus, terry, charlotte})\n                Dim pets As New List(Of Pet)(New Pet() {barley, boots, whiskers, daisy})\n\n                &#39; Create a collection where each element is an anonymous type\n                &#39; that contains a Person&#39;s name and a collection of names of \n                &#39; the pets that are owned by them.\n                Dim query =\n            people.GroupJoin(pets,\n                       Function(person) person,\n                       Function(pet) pet.Owner,\n                       Function(person, petCollection) _\n                           New With {.OwnerName = person.Name,\n                                     .Pets = petCollection.Select(\n                                                        Function(pet) pet.Name)})\n\n                Dim output As New System.Text.StringBuilder\n                For Each obj In query\n                    &#39; Output the owner&#39;s name.\n                    output.AppendLine(obj.OwnerName &amp; &quot;:&quot;)\n                    &#39; Output each of the owner&#39;s pet&#39;s names.\n                    For Each pet As String In obj.Pets\n                        output.AppendLine(&quot;  &quot; &amp; pet)\n                    Next\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Hedlund, Magnus\n            &#39;   Daisy\n            &#39; Adams, Terry\n            &#39;   Barley\n            &#39;   Boots\n            &#39; Weiss, Charlotte\n            &#39;   Whiskers\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_GroupJoin__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0_System_Collections_Generic_IEnumerable___1____3__System_Collections_Generic_IEqualityComparer___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_GroupJoin_TOuter_TInner_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;(IEnumerable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Func&lt;TOuter,TKey&gt;,Func&lt;TInner,TKey&gt;,Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Correlates the elements of two sequences based on key equality and groups the results. A specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> is used to compare keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TOuter</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to join to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TInner</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to hash and compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains elements of type <code>TResult</code> that are obtained by performing a grouped join on two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> If c<code>omparer</code> is <code>null</code>, the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to hash and compare keys.  </p>\n<p> &lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt; produces hierarchical results, which means that elements from <code>outer</code> are paired with collections of matching elements from <code>inner</code>. <code>GroupJoin</code> enables you to base your results on a whole set of matches for each element of <code>outer</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If there are no correlated elements in <code>inner</code> for a given element of <code>outer</code>, the sequence of matches for that element will be empty but will still appear in the results.  </p>\n</div>\n<p> The <code>resultSelector</code> function is called only one time for each <code>outer</code> element together with a collection of all the <code>inner</code> elements that match the <code>outer</code> element. This differs from the &lt;xref:System.Linq.Enumerable.Join%2A&gt; method in which the result selector function is invoked on pairs that contain one element from <code>outer</code> and one element from <code>inner</code>.  </p>\n<p> <code>GroupJoin</code> preserves the order of the elements of <code>outer</code>, and for each element of <code>outer</code>, the order of the matching elements from <code>inner</code>.  </p>\n<p> &lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt; has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See <a href=\"../Topic/Join%20Operations.md\" data-linktype=\"relative-path\">Join Operations</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Intersect__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Intersect_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set intersection of two sequences by using the default equality comparer to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements that also appear in <code>second</code> will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements that also appear in the first sequence will be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A sequence that contains the elements that form the set intersection of two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.  </p>\n<p> When the object returned by this method is enumerated, Intersect(TSource) yields distinct elements occurring in both sequences in the order in which they appear in <code>first</code>.  </p>\n<p> The default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values of the types that implement the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> generic interface. To compare a custom data type, you need to implement this interface and provide your own <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods for the type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Intersect(TSource) to return the elements that appear in each of two sequences of integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#41\">int[] id1 = { 44, 26, 92, 30, 71, 38 };\nint[] id2 = { 39, 59, 83, 47, 26, 4, 30 };\n\nIEnumerable&lt;int&gt; both = id1.Intersect(id2);\n\nforeach (int id in both)\n    Console.WriteLine(id);\n\n/*\n This code produces the following output:\n\n 26\n 30\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#41\">            &#39; Create two integer arrays.\n            Dim id1() As Integer = {44, 26, 92, 30, 71, 38}\n            Dim id2() As Integer = {39, 59, 83, 47, 26, 4, 30}\n\n            &#39; Find the set intersection of the two arrays.\n            Dim intersection As IEnumerable(Of Integer) = id1.Intersect(id2)\n\n            Dim output As New System.Text.StringBuilder\n            For Each id As Integer In intersection\n                output.AppendLine(id)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 26\n            &#39; 30\n</code></pre><p> If you want to compare sequences of objects of a custom data type, you have to implement the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> generic interface in a helper class. The following code example shows how to implement this interface in a custom data type and provide <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#9\">public class ProductA\n{ \n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\npublic class ProductComparer : IEqualityComparer&lt;ProductA&gt;\n{\n\n    public bool Equals(ProductA x, ProductA y)\n    {\n        //Check whether the objects are the same object. \n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether the products&#39; properties are equal. \n        return x != null &amp;&amp; y != null &amp;&amp; x.Code.Equals(y.Code) &amp;&amp; x.Name.Equals(y.Name);\n    }\n\n    public int GetHashCode(ProductA obj)\n    {\n        //Get hash code for the Name field if it is not null. \n        int hashProductName = obj.Name == null ? 0 : obj.Name.GetHashCode();\n\n        //Get hash code for the Code field. \n        int hashProductCode = obj.Code.GetHashCode();\n\n        //Calculate the hash code for the product. \n        return hashProductName ^ hashProductCode;\n    }\n}\n</code></pre><p> After you implement this interface, you can use sequences of <code>ProductA</code> objects in the Intersect(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#10\">        ProductA[] store1 = { new ProductA { Name = &quot;apple&quot;, Code = 9 }, \n                               new ProductA { Name = &quot;orange&quot;, Code = 4 } };\n\n        ProductA[] store2 = { new ProductA { Name = &quot;apple&quot;, Code = 9 }, \n                               new ProductA { Name = &quot;lemon&quot;, Code = 12 } };\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#3\">        // Get the products from the first array \n        // that have duplicates in the second array.\n        \n        IEnumerable&lt;ProductA&gt; duplicates =\n            store1.Intersect(store2, new ProductComparer());\n\n        foreach (var product in duplicates)\n            Console.WriteLine(product.Name + &quot; &quot; + product.Code);\n\n        /*\n            This code produces the following output:\n            apple 9\n        */\n</code></pre><pre><code class=\"lang-vb\" name=\"CSLINQEncapsulatedComparer#3\">        &#39; Get the products from the first array \n        &#39; that have duplicates in the second array.\n\n        Dim duplicates = store1.Intersect(store2)\n\n        For Each product In duplicates\n            Console.WriteLine(product.Name &amp; &quot; &quot; &amp; product.Code)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; apple 9\n        &#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Intersect__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Intersect_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set intersection of two sequences by using the specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements that also appear in <code>second</code> will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements that also appear in the first sequence will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A sequence that contains the elements that form the set intersection of two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.  </p>\n<p> When the object returned by this method is enumerated, Intersect(TSource) yields distinct elements occurring in both sequences in the order in which they appear in <code>first</code>.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to implement an equality comparer that can be used in the Intersect(TSource) method.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#1\">Public Class Product\n    Public Property Name As String\n    Public Property Code As Integer\nEnd Class\n\n&#39; Custom comparer for the Product class\nPublic Class ProductComparer\n    Implements IEqualityComparer(Of Product)\n\n    Public Function Equals1(\n        ByVal x As Product, \n        ByVal y As Product\n        ) As Boolean Implements IEqualityComparer(Of Product).Equals\n\n        &#39; Check whether the compared objects reference the same data.\n        If x Is y Then Return True\n\n        &#39;Check whether any of the compared objects is null.\n        If x Is Nothing OrElse y Is Nothing Then Return False\n\n        &#39; Check whether the products&#39; properties are equal.\n        Return (x.Code = y.Code) AndAlso (x.Name = y.Name)\n    End Function\n\n    Public Function GetHashCode1(\n        ByVal product As Product\n        ) As Integer Implements IEqualityComparer(Of Product).GetHashCode\n\n        &#39; Check whether the object is null.\n        If product Is Nothing Then Return 0\n\n        &#39; Get hash code for the Name field if it is not null.\n        Dim hashProductName = \n            If(product.Name Is Nothing, 0, product.Name.GetHashCode())\n\n        &#39; Get hash code for the Code field.\n        Dim hashProductCode = product.Code.GetHashCode()\n\n        &#39; Calculate the hash code for the product.\n        Return hashProductName Xor hashProductCode\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#1\">public class Product\n{\n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\n// Custom comparer for the Product class\nclass ProductComparer : IEqualityComparer&lt;Product&gt;\n{\n    // Products are equal if their names and product numbers are equal.\n    public bool Equals(Product x, Product y)\n    {\n       \n        //Check whether the compared objects reference the same data.\n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether any of the compared objects is null.\n        if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))\n            return false;\n\n        //Check whether the products&#39; properties are equal.\n        return x.Code == y.Code &amp;&amp; x.Name == y.Name;\n    }\n\n    // If Equals() returns true for a pair of objects \n    // then GetHashCode() must return the same value for these objects.\n\n    public int GetHashCode(Product product)\n    {\n        //Check whether the object is null\n        if (Object.ReferenceEquals(product, null)) return 0;\n\n        //Get hash code for the Name field if it is not null.\n        int hashProductName = product.Name == null ? 0 : product.Name.GetHashCode();\n\n        //Get hash code for the Code field.\n        int hashProductCode = product.Code.GetHashCode();\n\n        //Calculate the hash code for the product.\n        return hashProductName ^ hashProductCode;\n    }\n\n}\n</code></pre><p> After you implement this comparer, you can use sequences of <code>Product</code> objects in the Intersect(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#2\">        Dim store1() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}}\n\n        Dim store2() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;lemon&quot;, .Code = 12}}\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#2\">        Product[] store1 = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;orange&quot;, Code = 4 } };\n\n        Product[] store2 = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;lemon&quot;, Code = 12 } };\n</code></pre><pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#3\">        &#39; Get the products from the first array \n        &#39; that have duplicates in the second array.\n\n        Dim duplicates = store1.Intersect(store2, New ProductComparer())\n\n        For Each product In duplicates\n            Console.WriteLine(product.Name &amp; &quot; &quot; &amp; product.Code)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; apple 9\n        &#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#3\">        // Get the products from the first array \n        // that have duplicates in the second array.\n        \n        IEnumerable&lt;Product&gt; duplicates =\n            store1.Intersect(store2, new ProductComparer());\n\n        foreach (var product in duplicates)\n            Console.WriteLine(product.Name + &quot; &quot; + product.Code);\n\n        /*\n            This code produces the following output:\n            apple 9\n        */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Join__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0___1___3__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Join_TOuter_TInner_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join&lt;TOuter,TInner,TKey,TResult&gt;(IEnumerable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Func&lt;TOuter,TKey&gt;,Func&lt;TInner,TKey&gt;,Func&lt;TOuter,TInner,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TOuter</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to join to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TInner</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TInner</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result element from two matching elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that has elements of type <code>TResult</code> that are obtained by performing an inner join on two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to hash and compare keys.  </p>\n<p> A join refers to the operation of correlating the elements of two sources of information based on a common key. Join(TOuter, brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of <code>SelectMany</code>, which requires more than one method call to perform the same operation.  </p>\n<p> Join(TOuter, preserves the order of the elements of <code>outer</code>, and for each of these elements, the order of the matching elements of <code>inner</code>.  </p>\n<p> In query expression syntax, a <code>join</code> (Visual C#) or <code>Join</code> (Visual Basic) clause translates to an invocation of Join(TOuter,.  </p>\n<p> In relational database terms, the Join(TOuter, method implements an inner equijoin. &#39;Inner&#39; means that only elements that have a match in the other sequence are included in the results. An &#39;equijoin&#39; is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the &lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt; method. See <a href=\"../Topic/Join%20Operations.md\" data-linktype=\"relative-path\">Join Operations</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Join(TOuter, to perform an inner join of two sequences based on a common key.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#42\">class Person\n{\n    public string Name { get; set; }\n}\n\nclass Pet\n{\n    public string Name { get; set; }\n    public Person Owner { get; set; }\n}\n\npublic static void JoinEx1()\n{\n    Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };\n    Person terry = new Person { Name = &quot;Adams, Terry&quot; };\n    Person charlotte = new Person { Name = &quot;Weiss, Charlotte&quot; };\n\n    Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n    Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n    Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, Owner = charlotte };\n    Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n    List&lt;Person&gt; people = new List&lt;Person&gt; { magnus, terry, charlotte };\n    List&lt;Pet&gt; pets = new List&lt;Pet&gt; { barley, boots, whiskers, daisy };\n\n    // Create a list of Person-Pet pairs where \n    // each element is an anonymous type that contains a\n    // Pet&#39;s name and the name of the Person that owns the Pet.\n    var query =\n        people.Join(pets,\n                    person =&gt; person,\n                    pet =&gt; pet.Owner,\n                    (person, pet) =&gt;\n                        new { OwnerName = person.Name, Pet = pet.Name });\n\n    foreach (var obj in query)\n    {\n        Console.WriteLine(\n            &quot;{0} - {1}&quot;,\n            obj.OwnerName,\n            obj.Pet);\n    }\n}\n\n/*\n This code produces the following output:\n\n Hedlund, Magnus - Daisy\n Adams, Terry - Barley\n Adams, Terry - Boots\n Weiss, Charlotte - Whiskers\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#42\">            Structure Person\n                Public Name As String\n            End Structure\n\n            Structure Pet\n                Public Name As String\n                Public Owner As Person\n            End Structure\n\n            Sub JoinEx1()\n                Dim magnus As New Person With {.Name = &quot;Hedlund, Magnus&quot;}\n                Dim terry As New Person With {.Name = &quot;Adams, Terry&quot;}\n                Dim charlotte As New Person With {.Name = &quot;Weiss, Charlotte&quot;}\n\n                Dim barley As New Pet With {.Name = &quot;Barley&quot;, .Owner = terry}\n                Dim boots As New Pet With {.Name = &quot;Boots&quot;, .Owner = terry}\n                Dim whiskers As New Pet With {.Name = &quot;Whiskers&quot;, .Owner = charlotte}\n                Dim daisy As New Pet With {.Name = &quot;Daisy&quot;, .Owner = magnus}\n\n                Dim people As New List(Of Person)(New Person() {magnus, terry, charlotte})\n                Dim pets As New List(Of Pet)(New Pet() {barley, boots, whiskers, daisy})\n\n                &#39; Create a list of Person-Pet pairs, where each element is an\n                &#39; anonymous type that contains a Pet&#39;s name and the name of the \n                &#39; Person that owns the Pet.\n                Dim query =\n            people.Join(pets,\n                        Function(person) person,\n                        Function(pet) pet.Owner,\n                        Function(person, pet) _\n                            New With {.OwnerName = person.Name, .Pet = pet.Name})\n\n                Dim output As New System.Text.StringBuilder\n                For Each obj In query\n                    output.AppendLine(obj.OwnerName &amp; &quot; - &quot; &amp; obj.Pet)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Hedlund, Magnus - Daisy\n            &#39; Adams, Terry - Barley\n            &#39; Adams, Terry - Boots\n            &#39; Weiss, Charlotte - Whiskers\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Join__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0___1___3__System_Collections_Generic_IEqualityComparer___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Join_TOuter_TInner_TKey_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Join&lt;TOuter,TInner,TKey,TResult&gt;(IEnumerable&lt;TOuter&gt;,IEnumerable&lt;TInner&gt;,Func&lt;TOuter,TKey&gt;,Func&lt;TInner,TKey&gt;,Func&lt;TOuter,TInner,TResult&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Correlates the elements of two sequences based on matching keys. A specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> is used to compare keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>outer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TOuter</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TInner</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to join to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerKeySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TInner</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract the join key from each element of the second sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TOuter</span>,<span class=\"xref\">TInner</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to create a result element from two matching elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to hash and compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that has elements of type <code>TResult</code> that are obtained by performing an inner join on two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> If c<code>omparer</code> is <code>null</code>, the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to hash and compare keys.  </p>\n<p> A join refers to the operation of correlating the elements of two sources of information based on a common key. &lt;xref:System.Linq.Enumerable.Join%2A&gt; brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of <code>SelectMany</code>, which requires more than one method call to perform the same operation.  </p>\n<p> &lt;xref:System.Linq.Enumerable.Join%2A&gt; preserves the order of the elements of <code>outer</code>, and for each of these elements, the order of the matching elements of <code>inner</code>.  </p>\n<p> In relational database terms, the &lt;xref:System.Linq.Enumerable.Join%2A&gt; method implements an inner equijoin. &#39;Inner&#39; means that only elements that have a match in the other sequence are included in the results. An &#39;equijoin&#39; is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the &lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt; method. See <a href=\"../Topic/Join%20Operations.md\" data-linktype=\"relative-path\">Join Operations</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Last__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Last_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Last&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the last element of a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return the last element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The value at the last position in the source sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Last(TSource) method throws an exception if <code>source</code> contains no elements. To instead return a default value when the source sequence is empty, use the &lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt; method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Last(TSource) to return the last element of an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#43\">int[] numbers = { 9, 34, 65, 92, 87, 435, 3, 54, \n                    83, 23, 87, 67, 12, 19 };\n\nint last = numbers.Last();\n\nConsole.WriteLine(last);\n\n/*\n This code produces the following output:\n\n 19\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#43\">            &#39; Create an array of integers.\n            Dim numbers() As Integer =\n            {9, 34, 65, 92, 87, 435, 3, 54, 83, 23, 87, 67, 12, 19}\n\n            &#39; Get the last item in the array.\n            Dim last As Integer = numbers.Last()\n\n            &#39; Display the result.\n            MsgBox(last)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 19\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Last__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Last_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Last&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the last element of a sequence that satisfies a specified condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The last element in the sequence that passes the test in the specified predicate function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No element satisfies the condition in <code>predicate</code>.  </p>\n<p> -or-  </p>\n<p> The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Last(TSource) method throws an exception if no matching element is found in <code>source</code>. To instead return a default value when no matching element is found, use the &lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt; method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Last(TSource) to return the last element of an array that satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#44\">int[] numbers = { 9, 34, 65, 92, 87, 435, 3, 54, \n                    83, 23, 87, 67, 12, 19 };\n\nint last = numbers.Last(num =&gt; num &gt; 80);\n\nConsole.WriteLine(last);\n\n/*\n This code produces the following output:\n\n 87\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#44\">            &#39; Create an array of integers.\n            Dim numbers() As Integer =\n            {9, 34, 65, 92, 87, 435, 3, 54, 83, 23, 87, 67, 12, 19}\n\n            &#39; Get the last element in the array whose value is\n            &#39; greater than 80.\n            Dim last As Integer = numbers.Last(Function(num) num &gt; 80)\n\n            &#39; Display the result.\n            MsgBox(last)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 87\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_LastOrDefault__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_LastOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the last element of a sequence, or a default value if the sequence contains no elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return the last element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if the source sequence is empty; otherwise, the last element in the <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for reference and nullable types is <code>null</code>.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt; method does not provide a way to specify a default value. If you want to specify a default value other than <code>default</code>(<code>TSource</code>), use the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> method as described in the Example section.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use LastOrDefault(TSource) on an empty array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#45\">string[] fruits = { };\nstring last = fruits.LastOrDefault();\nConsole.WriteLine(\n    String.IsNullOrEmpty(last) ? &quot;&lt;string is null or empty&gt;&quot; : last);\n\n/*\n This code produces the following output:\n\n &lt;string is null or empty&gt;\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#45\">            &#39; Create an empty array.\n            Dim fruits() As String = {}\n\n            &#39; Get the last item in the array, or a\n            &#39; default value if there are no items.\n            Dim last As String = fruits.LastOrDefault()\n\n            &#39; Display the result.\n            MsgBox(IIf(String.IsNullOrEmpty(last),\n                   &quot;&lt;string is Nothing or empty&gt;&quot;,\n                   last))\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; &lt;string is Nothing or empty&gt;\n</code></pre><p> Sometimes the value of <code>default</code>(<code>TSource</code>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> method to specify the default value that you want to use if the collection is empty. Then, call <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Last__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"relative-path\">Last&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a> to obtain the last element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty. Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> to specify a default value of 1.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#127\">List&lt;int&gt; daysOfMonth = new List&lt;int&gt; { };\n\n// Setting the default value to 1 after the query.\nint lastDay1 = daysOfMonth.LastOrDefault();\nif (lastDay1 == 0)\n{\n    lastDay1 = 1;\n}\nConsole.WriteLine(&quot;The value of the lastDay1 variable is {0}&quot;, lastDay1);\n\n// Setting the default value to 1 by using DefaultIfEmpty() in the query.\nint lastDay2 = daysOfMonth.DefaultIfEmpty(1).Last();\nConsole.WriteLine(&quot;The value of the lastDay2 variable is {0}&quot;, lastDay2);\n\n/*\n This code produces the following output:\n \n The value of the lastDay1 variable is 1\n The value of the lastDay2 variable is 1\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#127\">            Dim daysOfMonth As New List(Of Integer)(New Integer() {})\n\n            &#39; Setting the default value to 1 after the query.\n            Dim lastDay1 As Integer = daysOfMonth.LastOrDefault()\n            If lastDay1 = 0 Then\n                lastDay1 = 1\n            End If\n            MsgBox(String.Format(&quot;The value of the lastDay1 variable is {0}&quot;, lastDay1))\n\n            &#39; Setting the default value to 1 by using DefaultIfEmpty() in the query.\n            Dim lastDay2 As Integer = daysOfMonth.DefaultIfEmpty(1).Last()\n            MsgBox(String.Format(&quot;The value of the lastDay2 variable is {0}&quot;, lastDay2))\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The value of the lastDay1 variable is 1\n            &#39; The value of the lastDay2 variable is 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_LastOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_LastOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return an element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p><code>default</code>(<code>TSource</code>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for reference and nullable types is <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use LastOrDefault(TSource) by passing in a predicate. In the second call to the method, there is no element in the sequence that satisfies the condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#46\">double[] numbers = { 49.6, 52.3, 51.0, 49.4, 50.2, 48.3 };\n\ndouble last50 = numbers.LastOrDefault(n =&gt; Math.Round(n) == 50.0);\n\nConsole.WriteLine(&quot;The last number that rounds to 50 is {0}.&quot;, last50);\n\ndouble last40 = numbers.LastOrDefault(n =&gt; Math.Round(n) == 40.0);\n\nConsole.WriteLine(\n    &quot;The last number that rounds to 40 is {0}.&quot;,\n    last40 == 0.0 ? &quot;&lt;DOES NOT EXIST&gt;&quot; : last40.ToString());\n\n/*\n This code produces the following output:\n\n The last number that rounds to 50 is 50.2.\n The last number that rounds to 40 is &lt;DOES NOT EXIST&gt;.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#46\">            &#39; Create an array of doubles.\n            Dim numbers() As Double = {49.6, 52.3, 51.0, 49.4, 50.2, 48.3}\n\n            &#39; Get the last item whose value rounds to 50.0.\n            Dim number50 As Double =\n            numbers.LastOrDefault(Function(n) Math.Round(n) = 50.0)\n\n            Dim output As New System.Text.StringBuilder\n            output.AppendLine(&quot;The last number that rounds to 50 is &quot; &amp; number50)\n\n            &#39; Get the last item whose value rounds to 40.0.\n            Dim number40 As Double =\n            numbers.LastOrDefault(Function(n) Math.Round(n) = 40.0)\n\n            Dim text As String = IIf(number40 = 0.0,\n                                 &quot;[DOES NOT EXIST]&quot;,\n                                 number40.ToString())\n            output.AppendLine(&quot;The last number that rounds to 40 is &quot; &amp; text)\n\n            &#39; Display the output.\n            MsgBox(output.ToString)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The last number that rounds to 50 is 50.2\n            &#39; The last number that rounds to 40 is [DOES NOT EXIST]\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_LongCount__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_LongCount_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LongCount&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that represents the total number of elements in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements to be counted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the source sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The number of elements exceeds <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method rather than &lt;xref:System.Linq.Enumerable.Count%2A&gt; when you expect the result to be greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into LongCount()</code> clause translates to an invocation of LongCount(TSource).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use LongCount(TSource) to count the elements in an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#47\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                      &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\nlong count = fruits.LongCount();\n\nConsole.WriteLine(&quot;There are {0} fruits in the collection.&quot;, count);\n\n/*\n This code produces the following output:\n\n There are 6 fruits in the collection.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#47\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Get the number of items in the array.\n            Dim count As Long = fruits.LongCount()\n\n            &#39; Display the result.\n            MsgBox(&quot;There are &quot; &amp; count &amp; &quot; fruits in the collection.&quot;)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; There are 6 fruits in the collection.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_LongCount__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_LongCount_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LongCount&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that represents how many elements in a sequence satisfy a condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements to be counted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The number of matching elements exceeds <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method rather than &lt;xref:System.Linq.Enumerable.Count%2A&gt; when you expect the result to be greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into LongCount()</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.LongCount%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use LongCount(TSource) to count the elements in an array that satisfy a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#48\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void LongCountEx2()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    const int Age = 3;\n\n    long count = pets.LongCount(pet =&gt; pet.Age &gt; Age);\n\n    Console.WriteLine(&quot;There are {0} animals over age {1}.&quot;, count, Age);\n}\n\n/*\n This code produces the following output:\n\n There are 2 animals over age 3.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#48\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub LongCountEx2()\n                &#39; Create a list of Pet objects.\n                Dim pets As New List(Of Pet)(New Pet() _\n                             {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                              New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                              New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}})\n\n                &#39; Determine the number of elements in the list\n                &#39; where the pet&#39;s age is greater than a constant value (3).\n                Const Age As Integer = 3\n                Dim count As Long =\n            pets.LongCount(Function(pet) pet.Age &gt; Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;There are &quot; &amp; count &amp; &quot; animals over age &quot; &amp; Age)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; There are 2 animals over age 3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Int64__\" data-linktype=\"relative-path\">Max(IEnumerable&lt;Int64&gt;)</a> to determine the maximum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#52\">List&lt;long&gt; longs = new List&lt;long&gt; { 4294967296L, 466855135L, 81125L };\n\nlong max = longs.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 4294967296.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#52\">            &#39; Create a list of Long values.\n            Dim longs As New List(Of Long)(New Long() _\n                                       {4294967296L, 466855135L, 81125L})\n\n            &#39; Get the maximum value in the list.\n            Dim max As Long = longs.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 4294967296\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Int64__\" data-linktype=\"relative-path\">Max(IEnumerable&lt;Int64&gt;)</a> to determine the maximum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#52\">List&lt;long&gt; longs = new List&lt;long&gt; { 4294967296L, 466855135L, 81125L };\n\nlong max = longs.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 4294967296.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#52\">            &#39; Create a list of Long values.\n            Dim longs As New List(Of Long)(New Long() _\n                                       {4294967296L, 466855135L, 81125L})\n\n            &#39; Get the maximum value in the list.\n            Dim max As Long = longs.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 4294967296\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Int64__\" data-linktype=\"relative-path\">Max(IEnumerable&lt;Int64&gt;)</a> to determine the maximum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#52\">List&lt;long&gt; longs = new List&lt;long&gt; { 4294967296L, 466855135L, 81125L };\n\nlong max = longs.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 4294967296.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#52\">            &#39; Create a list of Long values.\n            Dim longs As New List(Of Long)(New Long() _\n                                       {4294967296L, 466855135L, 81125L})\n\n            &#39; Get the maximum value in the list.\n            Dim max As Long = longs.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 4294967296\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Max to determine the maximum value in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#52\">List&lt;long&gt; longs = new List&lt;long&gt; { 4294967296L, 466855135L, 81125L };\n\nlong max = longs.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 4294967296.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#52\">            &#39; Create a list of Long values.\n            Dim longs As New List(Of Long)(New Long() _\n                                       {4294967296L, 466855135L, 81125L})\n\n            &#39; Get the maximum value in the list.\n            Dim max As Long = longs.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 4294967296\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<decimal></decimal></code> in C# or <code>Nullable(Of Decimal)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\" data-linktype=\"relative-path\">Max(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</a> to determine the maximum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#54\">double?[] doubles = { null, 1.5E+104, 9E+103, -2E+103 };\n\ndouble? max = doubles.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 1.5E+104.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#54\">            &#39; Create an array of Nullable Double values.\n            Dim doubles() As Nullable(Of Double) =\n            {Nothing, 1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the maximum value in the array.\n            Dim max As Nullable(Of Double) = doubles.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 1.5E+104\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<double></double></code> in C# or <code>Nullable(Of Double)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Max to determine the maximum value in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#54\">double?[] doubles = { null, 1.5E+104, 9E+103, -2E+103 };\n\ndouble? max = doubles.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 1.5E+104.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#54\">            &#39; Create an array of Nullable Double values.\n            Dim doubles() As Nullable(Of Double) =\n            {Nothing, 1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the maximum value in the array.\n            Dim max As Nullable(Of Double) = doubles.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 1.5E+104\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<int32></int32></code> in C# or <code>Nullable(Of Int32)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\" data-linktype=\"relative-path\">Max(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</a> to determine the maximum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#54\">double?[] doubles = { null, 1.5E+104, 9E+103, -2E+103 };\n\ndouble? max = doubles.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 1.5E+104.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#54\">            &#39; Create an array of Nullable Double values.\n            Dim doubles() As Nullable(Of Double) =\n            {Nothing, 1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the maximum value in the array.\n            Dim max As Nullable(Of Double) = doubles.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 1.5E+104\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<int64></int64></code> in C# or <code>Nullable(Of Int64)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\" data-linktype=\"relative-path\">Max(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</a> to determine the maximum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#54\">double?[] doubles = { null, 1.5E+104, 9E+103, -2E+103 };\n\ndouble? max = doubles.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 1.5E+104.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#54\">            &#39; Create an array of Nullable Double values.\n            Dim doubles() As Nullable(Of Double) =\n            {Nothing, 1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the maximum value in the array.\n            Dim max As Nullable(Of Double) = doubles.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 1.5E+104\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<single></single></code> in C# or <code>Nullable(Of Single)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\" data-linktype=\"relative-path\">Max(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</a> to determine the maximum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#54\">double?[] doubles = { null, 1.5E+104, 9E+103, -2E+103 };\n\ndouble? max = doubles.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 1.5E+104.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#54\">            &#39; Create an array of Nullable Double values.\n            Dim doubles() As Nullable(Of Double) =\n            {Nothing, 1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the maximum value in the array.\n            Dim max As Nullable(Of Double) = doubles.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 1.5E+104\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max(IEnumerable&lt;Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max method uses the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_System_Collections_Generic_IEnumerable_System_Int64__\" data-linktype=\"relative-path\">Max(IEnumerable&lt;Int64&gt;)</a> to determine the maximum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#52\">List&lt;long&gt; longs = new List&lt;long&gt; { 4294967296L, 466855135L, 81125L };\n\nlong max = longs.Max();\n\nConsole.WriteLine(&quot;The largest number is {0}.&quot;, max);\n\n/*\n This code produces the following output:\n\n The largest number is 4294967296.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#52\">            &#39; Create a list of Long values.\n            Dim longs As New List(Of Long)(New Long() _\n                                       {4294967296L, 466855135L, 81125L})\n\n            &#39; Get the maximum value in the list.\n            Dim max As Long = longs.Max()\n\n            &#39; Display the result.\n            MsgBox(&quot;The largest number is &quot; &amp; max)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The largest number is 4294967296\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the maximum value in a generic sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If type <code>TSource</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a>, the Max(TSource) method uses that implementation to compare values. Otherwise, if type <code>TSource</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>, that implementation is used to compare values.  </p>\n<p> If <code>TSource</code> is a reference type and the source sequence is empty or contains only values that are <code>null</code>, this method returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Max(TSource) to determine the maximum value in a sequence of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#57\">/// &lt;summary&gt;\n/// This class implements IComparable to be able to \n/// compare one Pet to another Pet.\n/// &lt;/summary&gt;\nclass Pet : IComparable&lt;Pet&gt;\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    /// &lt;summary&gt;\n    /// Compares this Pet to another Pet by \n    /// summing each Pet&#39;s age and name length.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;other&quot;&gt;The Pet to compare this Pet to.&lt;/param&gt;\n    /// &lt;returns&gt;-1 if this Pet is &#39;less&#39; than the other Pet, \n    /// 0 if they are equal,\n    /// or 1 if this Pet is &#39;greater&#39; than the other Pet.&lt;/returns&gt;\n    int IComparable&lt;Pet&gt;.CompareTo(Pet other)\n    {\n        int sumOther = other.Age + other.Name.Length;\n        int sumThis = this.Age + this.Name.Length;\n\n        if (sumOther &gt; sumThis)\n            return -1;\n        else if (sumOther == sumThis)\n            return 0;\n        else\n            return 1;\n    }\n}\n\npublic static void MaxEx3()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    Pet max = pets.Max();\n\n    Console.WriteLine(\n        &quot;The &#39;maximum&#39; animal is {0}.&quot;,\n        max.Name);\n}\n\n/*\n This code produces the following output:\n\n The &#39;maximum&#39; animal is Barley.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#57\">            &#39; This class implements IComparable \n            &#39; and has a custom &#39;CompareTo&#39; implementation.\n            Class Pet\n                Implements IComparable(Of Pet)\n\n                Public Name As String\n                Public Age As Integer\n\n                &#39;&#39;&#39; &lt;summary&gt;\n                &#39;&#39;&#39; Compares Pet objects by the sum of their age and name length.\n                &#39;&#39;&#39; &lt;/summary&gt;\n                &#39;&#39;&#39; &lt;param name=&quot;other&quot;&gt;The Pet to compare this Pet to.&lt;/param&gt;\n                &#39;&#39;&#39; &lt;returns&gt;-1 if this Pet&#39;s sum is &#39;less&#39; than the other Pet,\n                &#39;&#39;&#39; 0 if they are equal,\n                &#39;&#39;&#39; or 1 if this Pet&#39;s sum is &#39;greater&#39; than the other Pet.&lt;/returns&gt;\n                Function CompareTo(ByVal other As Pet) As Integer _\n                Implements IComparable(Of Pet).CompareTo\n\n                    If (other.Age + other.Name.Length &gt; Me.Age + Me.Name.Length) Then\n                        Return -1\n                    ElseIf (other.Age + other.Name.Length = Me.Age + Me.Name.Length) Then\n                        Return 0\n                    Else\n                        Return 1\n                    End If\n                End Function\n            End Class\n\n            Sub MaxEx3()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the &quot;maximum&quot; pet according to the \n                &#39; custom CompareTo() implementation.\n                Dim max As Pet = pets.Max()\n\n                &#39; Display the result.\n                MsgBox(&quot;The &#39;maximum&#39; animal is &quot; &amp; max.Name)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The &#39;maximum&#39; animal is Barley\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Max(TSource) to determine the maximum value in a sequence of projected values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<decimal></decimal></code> in C# or <code>Nullable(Of Decimal)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Decimal&gt;</code> in C# or <code>Nullable(Of Decimal)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<double></double></code> in C# or <code>Nullable(Of Double)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Double&gt;</code> in C# or <code>Nullable(Of Double)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<int32></int32></code> in C# or <code>Nullable(Of Int32)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Int32&gt;</code> in C# or <code>Nullable(Of Int32)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<int64></int64></code> in C# or <code>Nullable(Of Int64)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Int64&gt;</code> in C# or <code>Nullable(Of Int64)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<single></single></code> in C# or <code>Nullable(Of Single)</code> in Visual Basic that corresponds to the maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Single&gt;</code> in C# or <code>Nullable(Of Single)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the maximum <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Max(TSource) method uses the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Max__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Max_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Max&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the maximum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>The maximum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If type <code>TResult</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a>, this method uses that implementation to compare values. Otherwise, if type <code>TResult</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>, that implementation is used to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the maximum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#58\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MaxEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int max = pets.Max(pet =&gt; pet.Age + pet.Name.Length);\n\n    Console.WriteLine(\n        &quot;The maximum pet age plus name length is {0}.&quot;,\n        max);\n}\n\n/*\n This code produces the following output:\n\n The maximum pet age plus name length is 14.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#58\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MaxEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;maximum&quot; pet by passing a\n                &#39; lambda expression to Max() that sums the pet&#39;s age\n                &#39; and name length.\n                Dim max As Integer = pets.Max(Function(pet) _\n                                              pet.Age + pet.Name.Length)\n\n                &#39; Display the result.\n                MsgBox(&quot;The maximum pet age plus name length is &quot; &amp; max)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The maximum pet age plus name length is 14\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Double__\" data-linktype=\"relative-path\">Min(IEnumerable&lt;Double&gt;)</a> to determine the minimum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#60\">double[] doubles = { 1.5E+104, 9E+103, -2E+103 };\n\ndouble min = doubles.Min();\n\nConsole.WriteLine(&quot;The smallest number is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The smallest number is -2E+103.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#60\">            &#39; Create an array of double values.\n            Dim doubles() As Double = {1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the smallest number in the array.\n            Dim min As Double = doubles.Min()\n\n            &#39; Display the result.\n            MsgBox(&quot;The smallest number is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The smallest number is -2E+103\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Min to determine the minimum value in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#60\">double[] doubles = { 1.5E+104, 9E+103, -2E+103 };\n\ndouble min = doubles.Min();\n\nConsole.WriteLine(&quot;The smallest number is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The smallest number is -2E+103.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#60\">            &#39; Create an array of double values.\n            Dim doubles() As Double = {1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the smallest number in the array.\n            Dim min As Double = doubles.Min()\n\n            &#39; Display the result.\n            MsgBox(&quot;The smallest number is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The smallest number is -2E+103\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Double__\" data-linktype=\"relative-path\">Min(IEnumerable&lt;Double&gt;)</a> to determine the minimum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#60\">double[] doubles = { 1.5E+104, 9E+103, -2E+103 };\n\ndouble min = doubles.Min();\n\nConsole.WriteLine(&quot;The smallest number is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The smallest number is -2E+103.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#60\">            &#39; Create an array of double values.\n            Dim doubles() As Double = {1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the smallest number in the array.\n            Dim min As Double = doubles.Min()\n\n            &#39; Display the result.\n            MsgBox(&quot;The smallest number is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The smallest number is -2E+103\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Double__\" data-linktype=\"relative-path\">Min(IEnumerable&lt;Double&gt;)</a> to determine the minimum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#60\">double[] doubles = { 1.5E+104, 9E+103, -2E+103 };\n\ndouble min = doubles.Min();\n\nConsole.WriteLine(&quot;The smallest number is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The smallest number is -2E+103.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#60\">            &#39; Create an array of double values.\n            Dim doubles() As Double = {1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the smallest number in the array.\n            Dim min As Double = doubles.Min()\n\n            &#39; Display the result.\n            MsgBox(&quot;The smallest number is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The smallest number is -2E+103\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<decimal></decimal></code> in C# or <code>Nullable(Of Decimal)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\" data-linktype=\"relative-path\">Min(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</a> to determine the minimum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#63\">int?[] grades = { 78, 92, null, 99, 37, 81 };\n\nint? min = grades.Min();\n\nConsole.WriteLine(&quot;The lowest grade is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The lowest grade is 37.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#63\">            Dim grades() As Nullable(Of Integer) = {78, 92, Nothing, 99, 37, 81}\n            Dim min As Nullable(Of Integer) = grades.Min()\n\n            &#39; Display the output.\n            MsgBox(&quot;The lowest grade is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The lowest grade is 37\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<double></double></code> in C# or <code>Nullable(Of Double)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\" data-linktype=\"relative-path\">Min(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</a> to determine the minimum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#63\">int?[] grades = { 78, 92, null, 99, 37, 81 };\n\nint? min = grades.Min();\n\nConsole.WriteLine(&quot;The lowest grade is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The lowest grade is 37.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#63\">            Dim grades() As Nullable(Of Integer) = {78, 92, Nothing, 99, 37, 81}\n            Dim min As Nullable(Of Integer) = grades.Min()\n\n            &#39; Display the output.\n            MsgBox(&quot;The lowest grade is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The lowest grade is 37\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<int32></int32></code> in C# or <code>Nullable(Of Int32)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Min to determine the minimum value in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#63\">int?[] grades = { 78, 92, null, 99, 37, 81 };\n\nint? min = grades.Min();\n\nConsole.WriteLine(&quot;The lowest grade is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The lowest grade is 37.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#63\">            Dim grades() As Nullable(Of Integer) = {78, 92, Nothing, 99, 37, 81}\n            Dim min As Nullable(Of Integer) = grades.Min()\n\n            &#39; Display the output.\n            MsgBox(&quot;The lowest grade is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The lowest grade is 37\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<int64></int64></code> in C# or <code>Nullable(Of Int64)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\" data-linktype=\"relative-path\">Min(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</a> to determine the minimum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#63\">int?[] grades = { 78, 92, null, 99, 37, 81 };\n\nint? min = grades.Min();\n\nConsole.WriteLine(&quot;The lowest grade is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The lowest grade is 37.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#63\">            Dim grades() As Nullable(Of Integer) = {78, 92, Nothing, 99, 37, 81}\n            Dim min As Nullable(Of Integer) = grades.Min()\n\n            &#39; Display the output.\n            MsgBox(&quot;The lowest grade is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The lowest grade is 37\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>A value of type <code>Nullable<single></single></code> in C# or <code>Nullable(Of Single)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> If the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\" data-linktype=\"relative-path\">Min(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</a> to determine the minimum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#63\">int?[] grades = { 78, 92, null, 99, 37, 81 };\n\nint? min = grades.Min();\n\nConsole.WriteLine(&quot;The lowest grade is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The lowest grade is 37.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#63\">            Dim grades() As Nullable(Of Integer) = {78, 92, Nothing, 99, 37, 81}\n            Dim min As Nullable(Of Integer) = grades.Min()\n\n            &#39; Display the output.\n            MsgBox(&quot;The lowest grade is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The lowest grade is 37\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min(IEnumerable&lt;Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min method uses the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_System_Collections_Generic_IEnumerable_System_Double__\" data-linktype=\"relative-path\">Min(IEnumerable&lt;Double&gt;)</a> to determine the minimum value in a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#60\">double[] doubles = { 1.5E+104, 9E+103, -2E+103 };\n\ndouble min = doubles.Min();\n\nConsole.WriteLine(&quot;The smallest number is {0}.&quot;, min);\n\n/*\n This code produces the following output:\n\n The smallest number is -2E+103.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#60\">            &#39; Create an array of double values.\n            Dim doubles() As Double = {1.5E+104, 9.0E+103, -2.0E+103}\n\n            &#39; Determine the smallest number in the array.\n            Dim min As Double = doubles.Min()\n\n            &#39; Display the result.\n            MsgBox(&quot;The smallest number is &quot; &amp; min)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The smallest number is -2E+103\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the minimum value in a generic sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If type <code>TSource</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a>, this method uses that implementation to compare values. Otherwise, if type <code>TSource</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>, that implementation is used to compare values.  </p>\n<p> If <code>TSource</code> is a reference type and the source sequence is empty or contains only values that are <code>null</code>, this function returns <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Min(TSource) to determine the minimum value in a sequence of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#67\">/// &lt;summary&gt;\n/// This class implements IComparable in order to \n/// be able to compare different Pet objects.\n/// &lt;/summary&gt;\nclass Pet : IComparable&lt;Pet&gt;\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    /// &lt;summary&gt;\n    /// Compares this Pet&#39;s age to another Pet&#39;s age.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;other&quot;&gt;The Pet to compare this Pet to.&lt;/param&gt;\n    /// &lt;returns&gt;-1 if this Pet&#39;s age is smaller, \n    /// 0 if the Pets&#39; ages are equal, or \n    /// 1 if this Pet&#39;s age is greater.&lt;/returns&gt;\n    int IComparable&lt;Pet&gt;.CompareTo(Pet other)\n    {\n        if (other.Age &gt; this.Age)\n            return -1;\n        else if (other.Age == this.Age)\n            return 0;\n        else\n            return 1;\n    }\n}\n\npublic static void MinEx3()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    Pet min = pets.Min();\n\n    Console.WriteLine(\n        &quot;The &#39;minimum&#39; animal is {0}.&quot;,\n        min.Name);\n}\n\n/*\n This code produces the following output:\n\n The &#39;minimum&#39; animal is Whiskers.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#67\">            &#39; This class implements IComparable \n            &#39; and has a custom &#39;CompareTo&#39; implementation.\n            Class Pet\n                Implements IComparable(Of Pet)\n\n                Public Name As String\n                Public Age As Integer\n\n                &#39;&#39;&#39; &lt;summary&gt;\n                &#39;&#39;&#39; Compares this Pet&#39;s age to another Pet&#39;s age.\n                &#39;&#39;&#39; &lt;/summary&gt;\n                &#39;&#39;&#39; &lt;param name=&quot;other&quot;&gt;The Pet to compare this Pet to.&lt;/param&gt;\n                &#39;&#39;&#39; &lt;returns&gt;-1 if this Pet&#39;s age is smaller,\n                &#39;&#39;&#39; 0 if the Pets&#39; ages are equal,\n                &#39;&#39;&#39; or 1 if this Pet&#39;s age is greater.&lt;/returns&gt;\n                Function CompareTo(ByVal other As Pet) As Integer _\n                Implements IComparable(Of Pet).CompareTo\n\n                    If (other.Age &gt; Me.Age) Then\n                        Return -1\n                    ElseIf (other.Age = Me.Age) Then\n                        Return 0\n                    Else\n                        Return 1\n                    End If\n                End Function\n            End Class\n\n            Sub MinEx3()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Determine the &quot;minimum&quot; pet in the array,\n                &#39; according to the custom CompareTo() implementation.\n                Dim min As Pet = pets.Min()\n\n                &#39; Display the result.\n                MsgBox(&quot;The &#39;minimum&#39; pet is &quot; &amp; min.Name)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The &#39;minimum&#39; pet is Whiskers\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Min(TSource) to determine the minimum value in a sequence of projected values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<decimal></decimal></code> in C# or <code>Nullable(Of Decimal)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Decimal&gt;</code> in C# or <code>Nullable(Of Decimal)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<double></double></code> in C# or <code>Nullable(Of Double)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Double&gt;</code> in C# or <code>Nullable(Of Double)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<int32></int32></code> in C# or <code>Nullable(Of Int32)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of source into a numeric type, specifically <code>Nullable&lt;Int32&gt;</code> in C# or <code>Nullable(Of Int32)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<int64></int64></code> in C# or <code>Nullable(Of Int64)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Int64&gt;</code> in C# or <code>Nullable(Of Int64)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The value of type <code>Nullable<single></single></code> in C# or <code>Nullable(Of Single)</code> in Visual Basic that corresponds to the minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Single&gt;</code> in C# or <code>Nullable(Of Single)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a sequence and returns the minimum <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Min(TSource) method uses the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> implementation of <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> to compare values.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Min__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Min_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Min&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to determine the minimum value of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>The minimum value in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If type <code>TResult</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a>, this method uses that implementation to compare values. Otherwise, if type <code>TResult</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>, that implementation is used to compare values.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\" data-linktype=\"relative-path\">Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</a> to determine the minimum value in a sequence of projected values.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#68\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void MinEx4()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    int min = pets.Min(pet =&gt; pet.Age);\n\n    Console.WriteLine(&quot;The youngest animal is age {0}.&quot;, min);\n}\n\n/*\n This code produces the following output:\n\n The youngest animal is age 1.  \n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#68\">            Structure Pet\n                Public Name As String\n                Public Age As Integer\n            End Structure\n\n            Sub MinEx4()\n                &#39; Create an array of Pet objects.\n                Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                                 New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                                 New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n                &#39; Find the youngest pet by passing a \n                &#39; lambda expression to the Min() method.\n                Dim min As Integer = pets.Min(Function(pet) pet.Age)\n\n                &#39; Display the result.\n                MsgBox(&quot;The youngest pet is age &quot; &amp; min)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The youngest pet is age 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_OfType__1_System_Collections_IEnumerable_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_OfType_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OfType&lt;TResult&gt;(IEnumerable)</div>        \r\n          </div>\r\n    \r\n            <p>Filters the elements of an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> based on a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> whose elements to filter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains elements from the input sequence of type <code>TResult</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The OfType(TResult) method returns only those elements in <code>source</code> that can be cast to type <code>TResult</code>. To instead receive an exception if an element cannot be cast to type <code>TResult</code>, use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Cast__1_System_Collections_IEnumerable_\" data-linktype=\"relative-path\">Cast&lt;TResult&gt;(IEnumerable)</a>.  </p>\n<p> This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. This is because OfType(TResult) extends the type <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>. OfType(TResult) cannot only be applied to collections that are based on the parameterized <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> type, but collections that are based on the non-parameterized <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> type also.  </p>\n<p> By applying OfType(TResult) to a collection that implements <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>, you gain the ability to query the collection by using the standard query operators. For example, specifying a type argument of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to OfType(TResult) would return an object of type <code>IEnumerable&lt;Object&gt;</code> in C# or <code>IEnumerable(Of Object)</code> in Visual Basic, to which the standard query operators can be applied.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use OfType(TResult) to filter the elements of an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#69\">System.Collections.ArrayList fruits = new System.Collections.ArrayList(4);\nfruits.Add(&quot;Mango&quot;);\nfruits.Add(&quot;Orange&quot;);\nfruits.Add(&quot;Apple&quot;);\nfruits.Add(3.0);\nfruits.Add(&quot;Banana&quot;);\n\n// Apply OfType() to the ArrayList.\nIEnumerable&lt;string&gt; query1 = fruits.OfType&lt;string&gt;();\n\nConsole.WriteLine(&quot;Elements of type &#39;string&#39; are:&quot;);\nforeach (string fruit in query1)\n{\n    Console.WriteLine(fruit);\n}\n\n// The following query shows that the standard query operators such as \n// Where() can be applied to the ArrayList type after calling OfType().\nIEnumerable&lt;string&gt; query2 =\n    fruits.OfType&lt;string&gt;().Where(fruit =&gt; fruit.ToLower().Contains(&quot;n&quot;));\n\nConsole.WriteLine(&quot;<br>The following strings contain &#39;n&#39;:&quot;);\nforeach (string fruit in query2)\n{\n    Console.WriteLine(fruit);\n}\n\n// This code produces the following output:\n//\n// Elements of type &#39;string&#39; are:\n// Mango\n// Orange\n// Apple\n// Banana\n//\n// The following strings contain &#39;n&#39;:\n// Mango\n// Orange\n// Banana\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#69\">            &#39; Create an ArrayList and add items to it.\n            Dim fruits As New System.Collections.ArrayList(4)\n            fruits.Add(&quot;Mango&quot;)\n            fruits.Add(&quot;Orange&quot;)\n            fruits.Add(&quot;Apple&quot;)\n            fruits.Add(3.0)\n            fruits.Add(&quot;Banana&quot;)\n\n            &#39; Apply OfType(Of String)() to the ArrayList\n            &#39; to filter out non-string items.\n            Dim query1 As IEnumerable(Of String) = fruits.OfType(Of String)()\n\n            &#39; Print the results.\n            Dim output As New System.Text.StringBuilder(&quot;Elements of type &#39;string&#39; are:&quot; _\n                                                    &amp; vbCrLf)\n            For Each fruit As String In query1\n                output.AppendLine(fruit)\n            Next\n\n            &#39; The following query shows that the standard query operators such as \n            &#39; Where() can be applied to the ArrayList type after calling OfType().\n            Dim query2 As IEnumerable(Of String) =\n            fruits.OfType(Of String)().Where(Function(fruit) _\n                                                 fruit.ToLower().Contains(&quot;n&quot;))\n\n            output.AppendLine(vbCrLf &amp; &quot;The following strings contain &#39;n&#39;:&quot;)\n            For Each fruit As String In query2\n                output.AppendLine(fruit)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Elements of type &#39;string&#39; are:\n            &#39; Mango\n            &#39; Orange\n            &#39; Apple\n            &#39; Banana\n            &#39;\n            &#39; The following strings contain &#39;n&#39;:\n            &#39; Mango\n            &#39; Orange\n            &#39; Banana\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_OrderBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_OrderBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrderBy&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements of a sequence in ascending order according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from an element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> To order a sequence by the values of the elements themselves, specify the identity function (<code>x =&gt; x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <code>keySelector</code>.  </p>\n<p> Two methods are defined to extend the type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which is the return type of this method. These two methods, namely <code>ThenBy</code> and <code>ThenByDescending</code>, enable you to specify additional sort criteria to sort a sequence. <code>ThenBy</code> and <code>ThenByDescending</code> also return an <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which means any number of consecutive calls to <code>ThenBy</code> or <code>ThenByDescending</code> can be made.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a> inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you can call &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt; on the results of a call to &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;. Doing this introduces a new primary ordering that ignores the previously established ordering.  </p>\n</div>\n<p> This method compares keys by using the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>.  </p>\n<p> This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  </p>\n<p> In query expression syntax, an <code>orderby</code> (Visual C#) or <code>Order By</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use OrderBy(TSource, to sort the elements of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#70\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void OrderByEx1()\n{\n    Pet[] pets = { new Pet { Name=&quot;Barley&quot;, Age=8 },\n                   new Pet { Name=&quot;Boots&quot;, Age=4 },\n                   new Pet { Name=&quot;Whiskers&quot;, Age=1 } };\n\n    IEnumerable&lt;Pet&gt; query = pets.OrderBy(pet =&gt; pet.Age);\n\n    foreach (Pet pet in query)\n    {\n        Console.WriteLine(&quot;{0} - {1}&quot;, pet.Name, pet.Age);\n    }\n}\n\n/*\n This code produces the following output:\n\n Whiskers - 1\n Boots - 4\n Barley - 8\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#70\">        Structure Pet\n            Public Name As String\n            Public Age As Integer\n        End Structure\n\n        Sub OrderByEx1()\n            &#39; Create an array of Pet objects.\n            Dim pets() As Pet = {New Pet With {.Name = &quot;Barley&quot;, .Age = 8},\n                             New Pet With {.Name = &quot;Boots&quot;, .Age = 4},\n                             New Pet With {.Name = &quot;Whiskers&quot;, .Age = 1}}\n\n            &#39; Order the Pet objects by their Age property.\n            Dim query As IEnumerable(Of Pet) =\n            pets.OrderBy(Function(pet) pet.Age)\n\n            Dim output As New System.Text.StringBuilder\n            For Each pt As Pet In query\n                output.AppendLine(pt.Name &amp; &quot; - &quot; &amp; pt.Age)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n        End Sub\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; Whiskers - 1\n        &#39; Boots - 4\n        &#39; Barley - 8\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_OrderBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_OrderBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrderBy&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements of a sequence in ascending order by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from an element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> To order a sequence by the values of the elements themselves, specify the identity function (<code>x =&gt; x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <code>keySelector</code>.  </p>\n<p> Two methods are defined to extend the type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which is the return type of this method. These two methods, namely <code>ThenBy</code> and <code>ThenByDescending</code>, enable you to specify additional sort criteria to sort a sequence. <code>ThenBy</code> and <code>ThenByDescending</code> also return an <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which means any number of consecutive calls to <code>ThenBy</code> or <code>ThenByDescending</code> can be made.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a> inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you can call &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt; on the results of a call to &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;. Doing this introduces a new primary ordering that ignores the previously established ordering.  </p>\n</div>\n<p> If <code>comparer</code> is <code>null</code>, the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.  </p>\n<p> This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_OrderByDescending__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_OrderByDescending_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrderByDescending&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements of a sequence in descending order according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from an element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted in descending order according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> To order a sequence by the values of the elements themselves, specify the identity function (<code>x =&gt; x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <code>keySelector</code>.  </p>\n<p> For an example of this method, see <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_OrderByDescending__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\" data-linktype=\"relative-path\">OrderByDescending&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</a>.  </p>\n<p> Two methods are defined to extend the type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which is the return type of this method. These two methods, namely <code>ThenBy</code> and <code>ThenByDescending</code>, enable you to specify additional sort criteria to sort a sequence. <code>ThenBy</code> and <code>ThenByDescending</code> also return an <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which means any number of consecutive calls to <code>ThenBy</code> or <code>ThenByDescending</code> can be made.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a> inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you can call &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt; on the results of a call to &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;. Doing this introduces a new primary ordering that ignores the previously established ordering.  </p>\n</div>\n<p> This method compares keys by using the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>.  </p>\n<p> This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  </p>\n<p> In query expression syntax, an <code>orderby descending</code> (Visual C#) or <code>Order By Descending</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_OrderByDescending__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_OrderByDescending_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OrderByDescending&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from an element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted in descending order according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> To order a sequence by the values of the elements themselves, specify the identity function (<code>x =&gt; x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <code>keySelector</code>.  </p>\n<p> Two methods are defined to extend the type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which is the return type of this method. These two methods, namely <code>ThenBy</code> and <code>ThenByDescending</code>, enable you to specify additional sort criteria to sort a sequence. <code>ThenBy</code> and <code>ThenByDescending</code> also return an <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which means any number of consecutive calls to <code>ThenBy</code> or <code>ThenByDescending</code> can be made.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a> inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you can call &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt; on the results of a call to &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;. Doing this introduces a new primary ordering that ignores the previously established ordering.  </p>\n</div>\n<p> If <code>comparer</code> is <code>null</code>, the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.  </p>\n<p> This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use OrderByDescending(TSource, to sort the elements of a sequence in descending order by using a transform function and a custom comparer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#71\">/// &lt;summary&gt;\n/// This IComparer class sorts by the fractional part of the decimal number.\n/// &lt;/summary&gt;\npublic class SpecialComparer : IComparer&lt;decimal&gt;\n{\n    /// &lt;summary&gt;\n    /// Compare two decimal numbers by their fractional parts.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;d1&quot;&gt;The first decimal to compare.&lt;/param&gt;\n    /// &lt;param name=&quot;d2&quot;&gt;The second decimal to compare.&lt;/param&gt;\n    /// &lt;returns&gt;1 if the first decimal&#39;s fractional part \n    /// is greater than the second decimal&#39;s fractional part,\n    /// -1 if the first decimal&#39;s fractional\n    /// part is less than the second decimal&#39;s fractional part,\n    /// or the result of calling Decimal.Compare()\n    /// if the fractional parts are equal.&lt;/returns&gt;\n    public int Compare(decimal d1, decimal d2)\n    {\n        decimal fractional1, fractional2;\n\n        // Get the fractional part of the first number.\n        try\n        {\n            fractional1 = decimal.Remainder(d1, decimal.Floor(d1));\n        }\n        catch (DivideByZeroException)\n        {\n            fractional1 = d1;\n        }\n        // Get the fractional part of the second number.\n        try\n        {\n            fractional2 = decimal.Remainder(d2, decimal.Floor(d2));\n        }\n        catch (DivideByZeroException)\n        {\n            fractional2 = d2;\n        }\n\n        if (fractional1 == fractional2)\n            return Decimal.Compare(d1, d2);\n        else if (fractional1 &gt; fractional2)\n            return 1;\n        else\n            return -1;\n    }\n}\n\npublic static void OrderByDescendingEx1()\n{\n    List&lt;decimal&gt; decimals =\n        new List&lt;decimal&gt; { 6.2m, 8.3m, 0.5m, 1.3m, 6.3m, 9.7m };\n\n    IEnumerable&lt;decimal&gt; query =\n        decimals.OrderByDescending(num =&gt;\n                                       num, new SpecialComparer());\n\n    foreach (decimal num in query)\n    {\n        Console.WriteLine(num);\n    }\n}\n\n/*\n This code produces the following output:\n\n 9.7\n 0.5\n 8.3\n 6.3\n 1.3\n 6.2\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#71\">        &#39; This class provides a custom implementation \n        &#39; of the IComparer.Compare() method.\n        Class SpecialComparer\n            Implements IComparer(Of Decimal)\n            &#39;&#39;&#39; &lt;summary&gt;\n            &#39;&#39;&#39; Compare two decimal numbers by their fractional parts.\n            &#39;&#39;&#39; &lt;/summary&gt;\n            &#39;&#39;&#39; &lt;param name=&quot;d1&quot;&gt;The first decimal to compare.&lt;/param&gt;\n            &#39;&#39;&#39; &lt;param name=&quot;d2&quot;&gt;The second decimal to compare.&lt;/param&gt;\n            &#39;&#39;&#39; &lt;returns&gt;1 if the first decimal&#39;s fractional part is greater than\n            &#39;&#39;&#39; the second decimal&#39;s fractional part,\n            &#39;&#39;&#39; -1 if the first decimal&#39;s fractional\n            &#39;&#39;&#39; part is less than the second decimal&#39;s fractional part,\n            &#39;&#39;&#39; or the result of calling Decimal.Compare()\n            &#39;&#39;&#39; if the fractional parts are equal.&lt;/returns&gt;\n            Function Compare(ByVal d1 As Decimal, ByVal d2 As Decimal) As Integer _\n            Implements IComparer(Of Decimal).Compare\n\n                Dim fractional1 As Decimal\n                Dim fractional2 As Decimal\n\n                &#39; Get the fractional part of the first number.\n                Try\n                    fractional1 = Decimal.Remainder(d1, Decimal.Floor(d1))\n                Catch ex As DivideByZeroException\n                    fractional1 = d1\n                End Try\n\n                &#39; Get the fractional part of the second number.\n                Try\n                    fractional2 = Decimal.Remainder(d2, Decimal.Floor(d2))\n                Catch ex As DivideByZeroException\n                    fractional2 = d2\n                End Try\n\n                If (fractional1 = fractional2) Then\n                    &#39; The fractional parts are equal, so compare the entire numbers.\n                    Return Decimal.Compare(d1, d2)\n                ElseIf (fractional1 &gt; fractional2) Then\n                    Return 1\n                Else\n                    Return -1\n                End If\n            End Function\n        End Class\n\n        Sub OrderByDescendingEx1()\n            &#39; Create a list of decimal values.\n            Dim decimals As New List(Of Decimal)(New Decimal() _\n                                             {6.2D, 8.3D, 0.5D, 1.3D, 6.3D, 9.7D})\n\n            &#39; Order the elements of the list by passing\n            &#39; in the custom IComparer class.\n            Dim query As IEnumerable(Of Decimal) =\n            decimals.OrderByDescending(Function(num) num,\n                                       New SpecialComparer())\n\n            Dim output As New System.Text.StringBuilder\n            For Each num As Decimal In query\n                output.AppendLine(num)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n        End Sub\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; 9.7\n        &#39; 0.5\n        &#39; 8.3\n        &#39; 6.3\n        &#39; 1.3\n        &#39; 6.2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Range_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Range_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Range(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Generates a sequence of integral numbers within a specified range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;int&gt; Range (int start, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>start</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the first integer in the sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of sequential integers to generate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <code>IEnumerable<int32></int32></code> in C# or <code>IEnumerable(Of Int32)</code> in Visual Basic that contains a range of sequential integral numbers.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>start</code> + <code>count</code> -1 is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Range to generate a sequence of values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#72\">// Generate a sequence of integers from 1 to 10 \n// and then select their squares.\nIEnumerable&lt;int&gt; squares = Enumerable.Range(1, 10).Select(x =&gt; x * x);\n\nforeach (int num in squares)\n{\n    Console.WriteLine(num);\n}\n\n/*\n This code produces the following output:\n\n 1\n 4\n 9\n 16\n 25\n 36\n 49\n 64\n 81\n 100\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#72\">            &#39; Generate a sequence of integers from 1 to 10 \n            &#39; and project their squares.\n            Dim squares As IEnumerable(Of Integer) =\n            Enumerable.Range(1, 10).Select(Function(x) x * x)\n\n            Dim output As New System.Text.StringBuilder\n            For Each num As Integer In squares\n                output.AppendLine(num)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 1\n            &#39; 4\n            &#39; 9\n            &#39; 16\n            &#39; 25\n            &#39; 36\n            &#39; 49\n            &#39; 64\n            &#39; 81\n            &#39; 100\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Repeat__1___0_System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Repeat_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Repeat&lt;TResult&gt;(TResult,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Generates a sequence that contains one repeated value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to be repeated.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of times to repeat the value in the generated sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains a repeated value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Repeat(TResult) to generate a sequence of a repeated value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#73\">IEnumerable&lt;string&gt; strings =\n    Enumerable.Repeat(&quot;I like programming.&quot;, 15);\n\nforeach (String str in strings)\n{\n    Console.WriteLine(str);\n}\n\n/*\n This code produces the following output:\n\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n I like programming.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#73\">            &#39; Repeat the same string to create a sequence.\n            Dim sentences As IEnumerable(Of String) =\n            Enumerable.Repeat(&quot;I like programming.&quot;, 15)\n\n            Dim output As New System.Text.StringBuilder\n            For Each sentence As String In sentences\n                output.AppendLine(sentence)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n            &#39; I like programming.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Reverse__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Reverse_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reverse&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Inverts the order of the elements in a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to reverse.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A sequence whose elements correspond to those of the input sequence in reverse order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> Unlike &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, this sorting method does not consider the actual values themselves in determining the order. Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Reverse(TSource) to reverse the order of elements in an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#74\">char[] apple = { &#39;a&#39;, &#39;p&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39; };\n\nchar[] reversed = apple.Reverse().ToArray();\n\nforeach (char chr in reversed)\n{\n    Console.Write(chr + &quot; &quot;);\n}\nConsole.WriteLine();\n\n/*\n This code produces the following output:\n\n e l p p a\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#74\">            &#39; Create a List of Char values.\n            Dim appleLetters As New List(Of Char)(New Char() _\n                                              {&quot;a&quot;c, &quot;P&quot;c, &quot;P&quot;c, &quot;L&quot;c, &quot;E&quot;c})\n\n            &#39; Reverse the order of the elements in the list.\n            &#39; (We have to call AsEnumerable() in order to\n            &#39; use System.Linq.Enumerable&#39;s Reverse() method.\n            Dim reversed() As Char =\n            appleLetters.AsEnumerable().Reverse().ToArray()\n\n            Dim output As New System.Text.StringBuilder\n            For Each chr As Char In reversed\n                output.Append(chr &amp; &quot; &quot;)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; E L P P a \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Select__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Select_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence into a new form by incorporating the element&#39;s index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to invoke a transform function on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements are the result of invoking the transform function on each element of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The first argument to <code>selector</code> represents the element to process. The second argument to <code>selector</code> represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.  </p>\n<p> This projection method requires the transform function, <code>selector</code>, to produce one value for each value in the source sequence, <code>source</code>. If <code>selector</code> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the &lt;xref:System.Linq.Enumerable.SelectMany%2A&gt; method instead of Select(TSource,. Although <code>SelectMany</code> works similarly to <code>Select</code>, it differs in that the transform function returns a collection that is then expanded by <code>SelectMany</code> before it is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Select(TSource, to project over a sequence of values and use the index of each element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#76\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, \n                      &quot;passionfruit&quot;, &quot;grape&quot; };\n\nvar query =\n    fruits.Select((fruit, index) =&gt;\n                      new { index, str = fruit.Substring(0, index) });\n\nforeach (var obj in query)\n{\n    Console.WriteLine(&quot;{0}&quot;, obj);\n}\n\n/*\n This code produces the following output:\n\n {index=0, str=}\n {index=1, str=b}\n {index=2, str=ma}\n {index=3, str=ora}\n {index=4, str=pass}\n {index=5, str=grape}\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#76\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Project each item in the array to an anonymous type\n            &#39; that stores the item&#39;s index in the array and\n            &#39; a substring of each item whose length is equal\n            &#39; to the index position in the original array.\n            Dim query =\n            fruits.Select(Function(fruit, index) _\n                              New With {index, .Str = fruit.Substring(0, index)})\n\n            Dim output As New System.Text.StringBuilder\n            For Each obj In query\n                output.AppendLine(obj.ToString())\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; { index = 0, Str =  }\n            &#39; { index = 1, Str = b }\n            &#39; { index = 2, Str = ma }\n            &#39; { index = 3, Str = ora }\n            &#39; { index = 4, Str = pass }\n            &#39; { index = 5, Str = grape }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Select__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Select_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence into a new form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to invoke a transform function on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements are the result of invoking the transform function on each element of <code>source</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> This projection method requires the transform function, <code>selector</code>, to produce one value for each value in the source sequence, <code>source</code>. If <code>selector</code> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the &lt;xref:System.Linq.Enumerable.SelectMany%2A&gt; method instead of Select(TSource,. Although <code>SelectMany</code> works similarly to <code>Select</code>, it differs in that the transform function returns a collection that is then expanded by <code>SelectMany</code> before it is returned.  </p>\n<p> In query expression syntax, a <code>select</code> (Visual C#) or <code>Select</code> (Visual Basic) clause translates to an invocation of &lt;xref:System.Linq.Enumerable.Select%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Select(TSource, to project over a sequence of values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#75\">IEnumerable&lt;int&gt; squares =\n    Enumerable.Range(1, 10).Select(x =&gt; x * x);\n\nforeach (int num in squares)\n{\n    Console.WriteLine(num);\n}\n/*\n This code produces the following output:\n\n 1\n 4\n 9\n 16\n 25\n 36\n 49\n 64\n 81\n 100\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#75\">            &#39; Create a collection of sequential integers\n            &#39; from 1 to 10 and project their squares.\n            Dim squares As IEnumerable(Of Integer) =\n            Enumerable.Range(1, 10).Select(Function(x) x * x)\n\n            Dim output As New System.Text.StringBuilder\n            For Each num As Integer In squares\n                output.AppendLine(num)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 1\n            &#39; 4\n            &#39; 9\n            &#39; 16\n            &#39; 25\n            &#39; 36\n            &#39; 49\n            &#39; 64\n            &#39; 81\n            &#39; 100\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SelectMany__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___1___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SelectMany_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectMany&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,IEnumerable&lt;TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> and flattens the resulting sequences into one sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The SelectMany(TSource, method enumerates the input sequence, uses a transform function to map each element to an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, and then enumerates and yields the elements of each such <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> object. That is, for each element of <code>source</code>, <code>selector</code> is invoked and a sequence of values is returned. SelectMany(TSource, then flattens this two-dimensional collection of collections into a one-dimensional <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> and returns it. For example, if a query uses SelectMany(TSource, to obtain the orders (of type <code>Order</code>) for each customer in a database, the result is of type <code>IEnumerable&lt;Order&gt;</code> in C# or <code>IEnumerable(Of Order)</code> in Visual Basic. If instead the query uses &lt;xref:System.Linq.Enumerable.Select%2A&gt; to obtain the orders, the collection of collections of orders is not combined and the result is of type <code>IEnumerable&lt;List&lt;Order&gt;&gt;</code> in C# or <code>IEnumerable(Of List(Of Order))</code> in Visual Basic.  </p>\n<p> In query expression syntax, each <code>from</code> clause (Visual C#) or <code>From</code> clause (Visual Basic) after the initial one translates to an invocation of SelectMany(TSource,.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#77\">class PetOwner\n{\n    public string Name { get; set; }\n    public List&lt;String&gt; Pets { get; set; }\n}\n\npublic static void SelectManyEx1()\n{\n    PetOwner[] petOwners = \n        { new PetOwner { Name=&quot;Higa, Sidney&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Scruffy&quot;, &quot;Sam&quot; } },\n          new PetOwner { Name=&quot;Ashkenazi, Ronen&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Walker&quot;, &quot;Sugar&quot; } },\n          new PetOwner { Name=&quot;Price, Vernette&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Scratches&quot;, &quot;Diesel&quot; } } };\n\n    // Query using SelectMany().\n    IEnumerable&lt;string&gt; query1 = petOwners.SelectMany(petOwner =&gt; petOwner.Pets);\n\n    Console.WriteLine(&quot;Using SelectMany():&quot;);\n\n    // Only one foreach loop is required to iterate \n    // through the results since it is a\n    // one-dimensional collection.\n    foreach (string pet in query1)\n    {\n        Console.WriteLine(pet);\n    }\n\n    // This code shows how to use Select() \n    // instead of SelectMany().\n    IEnumerable&lt;List&lt;String&gt;&gt; query2 =\n        petOwners.Select(petOwner =&gt; petOwner.Pets);\n\n    Console.WriteLine(&quot;<br>Using Select():&quot;);\n\n    // Notice that two foreach loops are required to \n    // iterate through the results\n    // because the query returns a collection of arrays.\n    foreach (List&lt;String&gt; petList in query2)\n    {\n        foreach (string pet in petList)\n        {\n            Console.WriteLine(pet);\n        }\n        Console.WriteLine();\n    }\n}\n\n/*\n This code produces the following output:\n\n Using SelectMany():\n Scruffy\n Sam\n Walker\n Sugar\n Scratches\n Diesel\n\n Using Select():\n Scruffy\n Sam\n\n Walker\n Sugar\n\n Scratches\n Diesel\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#77\">            Structure PetOwner\n                Public Name As String\n                Public Pets() As String\n            End Structure\n\n            Sub SelectManyEx1()\n                &#39; Create an array of PetOwner objects.\n                Dim petOwners() As PetOwner =\n            {New PetOwner With\n             {.Name = &quot;Higa, Sidney&quot;, .Pets = New String() {&quot;Scruffy&quot;, &quot;Sam&quot;}},\n             New PetOwner With\n             {.Name = &quot;Ashkenazi, Ronen&quot;, .Pets = New String() {&quot;Walker&quot;, &quot;Sugar&quot;}},\n             New PetOwner With\n             {.Name = &quot;Price, Vernette&quot;, .Pets = New String() {&quot;Scratches&quot;, &quot;Diesel&quot;}}}\n\n                &#39; Call SelectMany() to gather all pets into a &quot;flat&quot; sequence.\n                Dim query1 As IEnumerable(Of String) =\n            petOwners.SelectMany(Function(petOwner) petOwner.Pets)\n\n                Dim output As New System.Text.StringBuilder(&quot;Using SelectMany():&quot; &amp; vbCrLf)\n                &#39; Only one foreach loop is required to iterate through \n                &#39; the results because it is a one-dimensional collection.\n                For Each pet As String In query1\n                    output.AppendLine(pet)\n                Next\n\n                &#39; This code demonstrates how to use Select() instead \n                &#39; of SelectMany() to get the same result.\n                Dim query2 As IEnumerable(Of String()) =\n            petOwners.Select(Function(petOwner) petOwner.Pets)\n                output.AppendLine(vbCrLf &amp; &quot;Using Select():&quot;)\n                &#39; Notice that two foreach loops are required to iterate through \n                &#39; the results because the query returns a collection of arrays.\n                For Each petArray() As String In query2\n                    For Each pet As String In petArray\n                        output.AppendLine(pet)\n                    Next\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString())\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Using SelectMany():\n            &#39; Scruffy\n            &#39; Sam\n            &#39; Walker\n            &#39; Sugar\n            &#39; Scratches\n            &#39; Diesel\n            &#39;\n            &#39; Using Select():\n            &#39; Scruffy\n            &#39; Sam\n            &#39; Walker\n            &#39; Sugar\n            &#39; Scratches\n            &#39; Diesel\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SelectMany__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SelectMany_TSource_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectMany&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,IEnumerable&lt;TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The SelectMany(TSource, method enumerates the input sequence, uses a transform function to map each element to an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, and then enumerates and yields the elements of each such <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> object. That is, for each element of <code>source</code>, <code>selector</code> is invoked and a sequence of values is returned. SelectMany(TSource, then flattens this two-dimensional collection of collections into a one-dimensional <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> and returns it. For example, if a query uses SelectMany(TSource, to obtain the orders (of type <code>Order</code>) for each customer in a database, the result is of type <code>IEnumerable&lt;Order&gt;</code> in C# or <code>IEnumerable(Of Order)</code> in Visual Basic. If instead the query uses &lt;xref:System.Linq.Enumerable.Select%2A&gt; to obtain the orders, the collection of collections of orders is not combined and the result is of type <code>IEnumerable&lt;List&lt;Order&gt;&gt;</code> in C# or <code>IEnumerable(Of List(Of Order))</code> in Visual Basic.  </p>\n<p> The first argument to <code>selector</code> represents the element to process. The second argument to <code>selector</code> represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array and use the index of each outer element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#78\">class PetOwner\n{\n    public string Name { get; set; }\n    public List&lt;string&gt; Pets { get; set; }\n}\n\npublic static void SelectManyEx2()\n{\n    PetOwner[] petOwners = \n        { new PetOwner { Name=&quot;Higa, Sidney&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Scruffy&quot;, &quot;Sam&quot; } },\n          new PetOwner { Name=&quot;Ashkenazi, Ronen&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Walker&quot;, &quot;Sugar&quot; } },\n          new PetOwner { Name=&quot;Price, Vernette&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Scratches&quot;, &quot;Diesel&quot; } },\n          new PetOwner { Name=&quot;Hines, Patrick&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Dusty&quot; } } };\n\n    // Project the items in the array by appending the index \n    // of each PetOwner to each pet&#39;s name in that petOwner&#39;s \n    // array of pets.\n    IEnumerable&lt;string&gt; query =\n        petOwners.SelectMany((petOwner, index) =&gt;\n                                 petOwner.Pets.Select(pet =&gt; index + pet));\n\n    foreach (string pet in query)\n    {\n        Console.WriteLine(pet);\n    }\n}\n\n// This code produces the following output:\n//\n// 0Scruffy\n// 0Sam\n// 1Walker\n// 1Sugar\n// 2Scratches\n// 2Diesel\n// 3Dusty\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#78\">            Structure PetOwner\n                Public Name As String\n                Public Pets() As String\n            End Structure\n\n            Sub SelectManyEx2()\n                &#39; Create an array of PetOwner objects.\n                Dim petOwners() As PetOwner =\n            {New PetOwner With\n             {.Name = &quot;Higa, Sidney&quot;, .Pets = New String() {&quot;Scruffy&quot;, &quot;Sam&quot;}},\n             New PetOwner With\n             {.Name = &quot;Ashkenazi, Ronen&quot;, .Pets = New String() {&quot;Walker&quot;, &quot;Sugar&quot;}},\n             New PetOwner With\n             {.Name = &quot;Price, Vernette&quot;, .Pets = New String() {&quot;Scratches&quot;, &quot;Diesel&quot;}},\n             New PetOwner With\n             {.Name = &quot;Hines, Patrick&quot;, .Pets = New String() {&quot;Dusty&quot;}}}\n\n                &#39; Project the items in the array by appending the index \n                &#39; of each PetOwner to each pet&#39;s name in that petOwner&#39;s \n                &#39; array of pets.\n                Dim query As IEnumerable(Of String) =\n            petOwners.SelectMany(Function(petOwner, index) _\n                                     petOwner.Pets.Select(Function(pet) _\n                                                              index.ToString() + pet))\n\n                Dim output As New System.Text.StringBuilder\n                For Each pet As String In query\n                    output.AppendLine(pet)\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString())\n            End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SelectMany__3_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___1___System_Func___0___1___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SelectMany_TSource_TCollection_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectMany&lt;TSource,TCollection,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,IEnumerable&lt;TCollection&gt;&gt;,Func&lt;TSource,TCollection,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>collectionSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TCollection</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element of the input sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TCollection</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element of the intermediate sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements are the result of invoking the one-to-many transform function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The SelectMany(TSource, method is useful when you have to keep the elements of <code>source</code> in scope for query logic that occurs after the call to SelectMany(TSource,. See the Example section for a code example. If there is a bidirectional relationship between objects of type <code>TSource</code> and objects of type <code>TCollection</code>, that is, if an object of type <code>TCollection</code> provides a property to retrieve the <code>TSource</code> object that produced it, you do not need this overload of SelectMany(TSource,. Instead, you can use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_SelectMany__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___1___\" data-linktype=\"relative-path\">SelectMany&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,IEnumerable&lt;TResult&gt;&gt;)</a> and navigate back to the <code>TSource</code> object through the <code>TCollection</code> object.  </p>\n<p> In query expression syntax, each <code>from</code> clause (Visual C#) or <code>From</code> clause (Visual Basic) after the initial one translates to an invocation of &lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to <code>Select</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#124\">class PetOwner\n{\n    public string Name { get; set; }\n    public List&lt;string&gt; Pets { get; set; }\n}\n\npublic static void SelectManyEx3()\n{\n    PetOwner[] petOwners =\n        { new PetOwner { Name=&quot;Higa&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Scruffy&quot;, &quot;Sam&quot; } },\n          new PetOwner { Name=&quot;Ashkenazi&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Walker&quot;, &quot;Sugar&quot; } },\n          new PetOwner { Name=&quot;Price&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Scratches&quot;, &quot;Diesel&quot; } },\n          new PetOwner { Name=&quot;Hines&quot;, \n              Pets = new List&lt;string&gt;{ &quot;Dusty&quot; } } };\n\n    // Project the pet owner&#39;s name and the pet&#39;s name.\n    var query =\n        petOwners\n        .SelectMany(petOwner =&gt; petOwner.Pets, (petOwner, petName) =&gt; new { petOwner, petName })\n        .Where(ownerAndPet =&gt; ownerAndPet.petName.StartsWith(&quot;S&quot;))\n        .Select(ownerAndPet =&gt;\n                new\n                {\n                    Owner = ownerAndPet.petOwner.Name,\n                    Pet = ownerAndPet.petName\n                }\n        );\n\n    // Print the results.\n    foreach (var obj in query)\n    {\n        Console.WriteLine(obj);\n    }\n}\n\n// This code produces the following output:\n//\n// {Owner=Higa, Pet=Scruffy}\n// {Owner=Higa, Pet=Sam}\n// {Owner=Ashkenazi, Pet=Sugar}\n// {Owner=Price, Pet=Scratches}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#124\">            Structure PetOwner\n                Public Name As String\n                Public Pets() As String\n            End Structure\n\n            Sub SelectManyEx3()\n                &#39; Create an array of PetOwner objects.\n                Dim petOwners() As PetOwner =\n            {New PetOwner With\n             {.Name = &quot;Higa&quot;, .Pets = New String() {&quot;Scruffy&quot;, &quot;Sam&quot;}},\n             New PetOwner With\n             {.Name = &quot;Ashkenazi&quot;, .Pets = New String() {&quot;Walker&quot;, &quot;Sugar&quot;}},\n             New PetOwner With\n             {.Name = &quot;Price&quot;, .Pets = New String() {&quot;Scratches&quot;, &quot;Diesel&quot;}},\n             New PetOwner With\n             {.Name = &quot;Hines&quot;, .Pets = New String() {&quot;Dusty&quot;}}}\n\n                &#39; Project an anonymous type that consists of\n                &#39; the owner&#39;s name and the pet&#39;s name (string).\n                Dim query =\n            petOwners _\n            .SelectMany(\n                Function(petOwner) petOwner.Pets,\n                Function(petOwner, petName) New With {petOwner, petName}) _\n            .Where(Function(ownerAndPet) ownerAndPet.petName.StartsWith(&quot;S&quot;)) _\n            .Select(Function(ownerAndPet) _\n                   New With {.Owner = ownerAndPet.petOwner.Name,\n                             .Pet = ownerAndPet.petName\n                   })\n\n                Dim output As New System.Text.StringBuilder\n                For Each obj In query\n                    output.AppendLine(String.Format(&quot;Owner={0}, Pet={1}&quot;, obj.Owner, obj.Pet))\n                Next\n\n                &#39; Display the output.\n                MsgBox(output.ToString())\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Owner=Higa, Pet=Scruffy\n            &#39; Owner=Higa, Pet=Sam\n            &#39; Owner=Ashkenazi, Pet=Sugar\n            &#39; Owner=Price, Pet=Scratches\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SelectMany__3_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1___System_Func___0___1___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SelectMany_TSource_TCollection_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectMany&lt;TSource,TCollection,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,IEnumerable&lt;TCollection&gt;&gt;,Func&lt;TSource,TCollection,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Projects each element of a sequence to an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values to project.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>collectionSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TCollection</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TCollection</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element of the intermediate sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose elements are the result of invoking the one-to-many transform function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The SelectMany(TSource, method is useful when you have to keep the elements of <code>source</code> in scope for query logic that occurs after the call to SelectMany(TSource,. See the Example section for a code example. If there is a bidirectional relationship between objects of type <code>TSource</code> and objects of type <code>TCollection</code>, that is, if an object of type <code>TCollection</code> provides a property to retrieve the <code>TSource</code> object that produced it, you do not need this overload of SelectMany(TSource,. Instead, you can use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_SelectMany__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Collections_Generic_IEnumerable___1___\" data-linktype=\"relative-path\">SelectMany&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,IEnumerable&lt;TResult&gt;&gt;)</a> and navigate back to the <code>TSource</code> object through the <code>TCollection</code> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SequenceEqual__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SequenceEqual_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SequenceEqual&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to compare to <code>second</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to compare to the first sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SequenceEqual(TSource) method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for <code>TSource</code>, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>. The default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values of the types that implement the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> generic interface. To compare a custom data type, you need to implement this interface and provide your own <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods for the type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code examples demonstrate how to use SequenceEqual(TSource) to determine whether two sequences are equal. In the first two examples, the method determines whether the compared sequences contain references to the same objects. In the third and fourth examples, the method compares the actual data of the objects within the sequences.  </p>\n<p> In this example the sequences are equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#32\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void SequenceEqualEx1()\n{\n    Pet pet1 = new Pet { Name = &quot;Turbo&quot;, Age = 2 };\n    Pet pet2 = new Pet { Name = &quot;Peanut&quot;, Age = 8 };\n\n    // Create two lists of pets.\n    List&lt;Pet&gt; pets1 = new List&lt;Pet&gt; { pet1, pet2 };\n    List&lt;Pet&gt; pets2 = new List&lt;Pet&gt; { pet1, pet2 };\n\n    bool equal = pets1.SequenceEqual(pets2);\n\n    Console.WriteLine(\n        &quot;The lists {0} equal.&quot;,\n        equal ? &quot;are&quot; : &quot;are not&quot;);\n}\n\n/*\n This code produces the following output:\n\n The lists are equal.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#32\">            Class Pet\n                Public Name As String\n                Public Age As Integer\n            End Class\n\n            Sub SequenceEqualEx1()\n                &#39; Create two Pet objects.\n                Dim pet1 As New Pet With {.Name = &quot;Turbo&quot;, .Age = 2}\n                Dim pet2 As New Pet With {.Name = &quot;Peanut&quot;, .Age = 8}\n\n                &#39; Create two lists of pets.\n                Dim pets1 As New List(Of Pet)(New Pet() {pet1, pet2})\n                Dim pets2 As New List(Of Pet)(New Pet() {pet1, pet2})\n\n                &#39;Determine if the two lists are equal.\n                Dim equal As Boolean = pets1.SequenceEqual(pets2)\n\n                &#39; Display the output.\n                Dim text As String = IIf(equal, &quot;are&quot;, &quot;are not&quot;)\n                MsgBox(&quot;The lists &quot; &amp; text &amp; &quot; equal.&quot;)\n\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The lists are equal.\n</code></pre><p> The following code example compares two sequences that are not equal. Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#33\">class Pet\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic static void SequenceEqualEx2()\n{\n    Pet pet1 = new Pet() { Name = &quot;Turbo&quot;, Age = 2 };\n    Pet pet2 = new Pet() { Name = &quot;Peanut&quot;, Age = 8 };\n\n    // Create two lists of pets.\n    List&lt;Pet&gt; pets1 = new List&lt;Pet&gt; { pet1, pet2 };\n    List&lt;Pet&gt; pets2 =\n        new List&lt;Pet&gt; { new Pet { Name = &quot;Turbo&quot;, Age = 2 }, \n                        new Pet { Name = &quot;Peanut&quot;, Age = 8 } };\n\n    bool equal = pets1.SequenceEqual(pets2);\n\n    Console.WriteLine(&quot;The lists {0} equal.&quot;, equal ? &quot;are&quot; : &quot;are not&quot;);\n}\n\n/*\n This code produces the following output:\n\n The lists are not equal.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#33\">                &#39; Create two Pet objects.\n                Dim pet1 As New Pet With {.Name = &quot;Turbo&quot;, .Age = 2}\n                Dim pet2 As New Pet With {.Name = &quot;Peanut&quot;, .Age = 8}\n\n                &#39; Create two lists of pets.\n                Dim pets1 As New List(Of Pet)()\n                pets1.Add(pet1)\n                pets1.Add(pet2)\n\n                Dim pets2 As New List(Of Pet)()\n                pets2.Add(New Pet With {.Name = &quot;Turbo&quot;, .Age = 2})\n                pets2.Add(New Pet With {.Name = &quot;Peanut&quot;, .Age = 8})\n\n                &#39; Determine if the two lists are equal.\n                Dim equal As Boolean = pets1.SequenceEqual(pets2)\n\n                &#39; Display the output.\n                Dim text As String = IIf(equal, &quot;are&quot;, &quot;are not&quot;)\n                MsgBox(&quot;The lists &quot; &amp; text &amp; &quot; equal.&quot;)\n\n                &#39; This code produces the following output:\n                &#39;\n                &#39; The lists are not equal.\n</code></pre><p> If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> generic interface in your class. The following code example shows how to implement this interface in a helper class and provide <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#9\">public class ProductA\n{ \n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\npublic class ProductComparer : IEqualityComparer&lt;ProductA&gt;\n{\n\n    public bool Equals(ProductA x, ProductA y)\n    {\n        //Check whether the objects are the same object. \n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether the products&#39; properties are equal. \n        return x != null &amp;&amp; y != null &amp;&amp; x.Code.Equals(y.Code) &amp;&amp; x.Name.Equals(y.Name);\n    }\n\n    public int GetHashCode(ProductA obj)\n    {\n        //Get hash code for the Name field if it is not null. \n        int hashProductName = obj.Name == null ? 0 : obj.Name.GetHashCode();\n\n        //Get hash code for the Code field. \n        int hashProductCode = obj.Code.GetHashCode();\n\n        //Calculate the hash code for the product. \n        return hashProductName ^ hashProductCode;\n    }\n}\n</code></pre><p> After you implement this interface, you can use sequences of <code>ProductA</code> objects in the SequenceEqual(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#8\">\n        ProductA[] storeA = { new ProductA { Name = &quot;apple&quot;, Code = 9 }, \n                               new ProductA { Name = &quot;orange&quot;, Code = 4 } };\n\n        ProductA[] storeB = { new ProductA { Name = &quot;apple&quot;, Code = 9 }, \n                               new ProductA { Name = &quot;orange&quot;, Code = 4 } };\n\n        bool equalAB = storeA.SequenceEqual(storeB);\n\n        Console.WriteLine(&quot;Equal? &quot; + equalAB);\n\n        /*\n            This code produces the following output:\n            \n            Equal? True\n        */\n</code></pre><pre><code class=\"lang-vb\" name=\"CSLINQEncapsulatedComparer#8\">\n        Dim storeA() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}}\n\n        Dim storeB() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}}\n\n        Dim equalAB = storeA.SequenceEqual(storeB)\n\n        Console.WriteLine(&quot;Equal? &quot; &amp; equalAB)\n\n        &#39; This code produces the following output:\n\n        &#39; Equal? True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SequenceEqual__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SequenceEqual_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SequenceEqual&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two sequences are equal by comparing their elements by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to compare to <code>second</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to compare to the first sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to use to compare elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the two source sequences are of equal length and their corresponding elements compare equal according to <code>comparer</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SequenceEqual(TSource) method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a>. If c<code>omparer</code> is <code>null</code>, the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to implement an equality comparer that can be used in the SequenceEqual(TSource) method.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#1\">Public Class Product\n    Public Property Name As String\n    Public Property Code As Integer\nEnd Class\n\n&#39; Custom comparer for the Product class\nPublic Class ProductComparer\n    Implements IEqualityComparer(Of Product)\n\n    Public Function Equals1(\n        ByVal x As Product, \n        ByVal y As Product\n        ) As Boolean Implements IEqualityComparer(Of Product).Equals\n\n        &#39; Check whether the compared objects reference the same data.\n        If x Is y Then Return True\n\n        &#39;Check whether any of the compared objects is null.\n        If x Is Nothing OrElse y Is Nothing Then Return False\n\n        &#39; Check whether the products&#39; properties are equal.\n        Return (x.Code = y.Code) AndAlso (x.Name = y.Name)\n    End Function\n\n    Public Function GetHashCode1(\n        ByVal product As Product\n        ) As Integer Implements IEqualityComparer(Of Product).GetHashCode\n\n        &#39; Check whether the object is null.\n        If product Is Nothing Then Return 0\n\n        &#39; Get hash code for the Name field if it is not null.\n        Dim hashProductName = \n            If(product.Name Is Nothing, 0, product.Name.GetHashCode())\n\n        &#39; Get hash code for the Code field.\n        Dim hashProductCode = product.Code.GetHashCode()\n\n        &#39; Calculate the hash code for the product.\n        Return hashProductName Xor hashProductCode\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#1\">public class Product\n{\n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\n// Custom comparer for the Product class\nclass ProductComparer : IEqualityComparer&lt;Product&gt;\n{\n    // Products are equal if their names and product numbers are equal.\n    public bool Equals(Product x, Product y)\n    {\n       \n        //Check whether the compared objects reference the same data.\n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether any of the compared objects is null.\n        if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))\n            return false;\n\n        //Check whether the products&#39; properties are equal.\n        return x.Code == y.Code &amp;&amp; x.Name == y.Name;\n    }\n\n    // If Equals() returns true for a pair of objects \n    // then GetHashCode() must return the same value for these objects.\n\n    public int GetHashCode(Product product)\n    {\n        //Check whether the object is null\n        if (Object.ReferenceEquals(product, null)) return 0;\n\n        //Get hash code for the Name field if it is not null.\n        int hashProductName = product.Name == null ? 0 : product.Name.GetHashCode();\n\n        //Get hash code for the Code field.\n        int hashProductCode = product.Code.GetHashCode();\n\n        //Calculate the hash code for the product.\n        return hashProductName ^ hashProductCode;\n    }\n\n}\n</code></pre><p> After you implement this comparer, you can use sequences of <code>Product</code> objects in the SequenceEqual(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#8\">\n        Dim storeA() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}}\n\n        Dim storeB() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}}\n\n        Dim equalAB = storeA.SequenceEqual(storeB, New ProductComparer())\n\n        Console.WriteLine(&quot;Equal? &quot; &amp; equalAB)\n\n        &#39; This code produces the following output:\n\n        &#39; Equal? True\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#8\">\n        Product[] storeA = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;orange&quot;, Code = 4 } };\n\n        Product[] storeB = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;orange&quot;, Code = 4 } };\n\n        bool equalAB = storeA.SequenceEqual(storeB, new ProductComparer());\n\n        Console.WriteLine(&quot;Equal? &quot; + equalAB);\n\n        /*\n            This code produces the following output:\n            \n            Equal? True\n        */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Single__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Single_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Single&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return the single element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The single element of the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The input sequence contains more than one element.  </p>\n<p> -or-  </p>\n<p> The input sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Single(TSource) method throws an exception if the input sequence is empty. To instead return <code>null</code> when the input sequence is empty, use &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Single(TSource) to select the only element of an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#79\">string[] fruits1 = { &quot;orange&quot; };\n\nstring fruit1 = fruits1.Single();\n\nConsole.WriteLine(fruit1);\n\n/*\n This code produces the following output:\n\n orange\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#79\">            &#39; Create an array that contains one item.\n            Dim fruits1() As String = {&quot;orange&quot;}\n\n            &#39; Get the single item in the array.\n            Dim result As String = fruits1.Single()\n\n            &#39; Display the result.\n            MsgBox(&quot;First query: &quot; &amp; result)\n</code></pre><p> The following code example demonstrates that Single(TSource) throws an exception when the sequence does not contain exactly one element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#80\">string[] fruits2 = { &quot;orange&quot;, &quot;apple&quot; };\nstring fruit2 = null;\n\ntry\n{\n    fruit2 = fruits2.Single();\n}\ncatch (System.InvalidOperationException)\n{\n    Console.WriteLine(&quot;The collection does not contain exactly one element.&quot;);\n}\n\nConsole.WriteLine(fruit2);\n\n/*\n This code produces the following output:\n\n The collection does not contain exactly one element.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#80\">            &#39; Create an array that contains two items.\n            Dim fruits2() As String = {&quot;orange&quot;, &quot;apple&quot;}\n\n            result = String.Empty\n\n            &#39; Try to get the &#39;single&#39; item in the array.\n            Try\n                result = fruits2.Single()\n            Catch ex As System.InvalidOperationException\n                result = &quot;The collection does not contain exactly one element.&quot;\n            End Try\n\n            &#39; Display the result.\n            MsgBox(&quot;Second query: &quot; &amp; result)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; First query: orange\n            &#39; Second query: The collection does not contain exactly one element.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Single__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Single_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Single&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return a single element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test an element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The single element of the input sequence that satisfies a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No element satisfies the condition in <code>predicate</code>.  </p>\n<p> -or-  </p>\n<p> More than one element satisfies the condition in <code>predicate</code>.  </p>\n<p> -or-  </p>\n<p> The source sequence is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Single(TSource) method throws an exception if the input sequence contains no matching element. To instead return <code>null</code> when no matching element is found, use &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Single(TSource) to select the only element of an array that satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#81\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                      &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\nstring fruit1 = fruits.Single(fruit =&gt; fruit.Length &gt; 10);\n\nConsole.WriteLine(fruit1);\n\n/*\n This code produces the following output:\n\n passionfruit\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#81\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Get the single item in the array whose length is greater than 10.\n            Dim result As String =\n            fruits.Single(Function(fruit) fruit.Length &gt; 10)\n\n            &#39; Display the result.\n            MsgBox(&quot;First query: &quot; &amp; result)\n</code></pre><p> The following code example demonstrates that Single(TSource) throws an exception when the sequence does not contain exactly one element that satisfies the condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#82\">string fruit2 = null;\n\ntry\n{\n    fruit2 = fruits.Single(fruit =&gt; fruit.Length &gt; 15);\n}\ncatch (System.InvalidOperationException)\n{\n    Console.WriteLine(@&quot;The collection does not contain exactly \n                    one element whose length is greater than 15.&quot;);\n}\n\nConsole.WriteLine(fruit2);\n\n// This code produces the following output:\n//\n// The collection does not contain exactly  \n// one element whose length is greater than 15.\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#82\">            result = String.Empty\n\n            &#39; Try to get the single item in the array whose length is &gt; 15.\n            Try\n                result = fruits.Single(Function(fruit) _\n                                       fruit.Length &gt; 15)\n            Catch ex As System.InvalidOperationException\n                result = &quot;There is not EXACTLY ONE element whose length is &gt; 15.&quot;\n            End Try\n\n            &#39; Display the result.\n            MsgBox(&quot;Second query: &quot; &amp; result)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; First query: passionfruit\n            &#39; Second query: There is not EXACTLY ONE element whose length is &gt; 15.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SingleOrDefault__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SingleOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SingleOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return the single element of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The single element of the input sequence, or <code>default</code>(<code>TSource</code>) if the sequence contains no elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The input sequence contains more than one element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for reference and nullable types is <code>null</code>.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt; method does not provide a way to specify a default value. If you want to specify a default value other than <code>default</code>(<code>TSource</code>), use the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> method as described in the Example section.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SingleOrDefault(TSource) to select the only element of an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#83\">string[] fruits1 = { &quot;orange&quot; };\n\nstring fruit1 = fruits1.SingleOrDefault();\n\nConsole.WriteLine(fruit1);\n\n/*\n This code produces the following output:\n\n orange\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#83\">            &#39; Create an array that contains one item.\n            Dim fruits1() As String = {&quot;orange&quot;}\n\n            &#39; Get the single item in the array or else a default value.\n            Dim result As String = fruits1.SingleOrDefault()\n\n            &#39; Display the result.\n            MsgBox(&quot;First array: &quot; &amp; result)\n</code></pre><p> The following code example demonstrates that SingleOrDefault(TSource) returns a default value when the sequence does not contain exactly one element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#84\">string[] fruits2 = { };\n\nstring fruit2 = fruits2.SingleOrDefault();\n\nConsole.WriteLine(\n    String.IsNullOrEmpty(fruit2) ? &quot;No such string!&quot; : fruit2);\n\n/*\n This code produces the following output:\n\n No such string!\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#84\">            &#39; Create an empty array.\n            Dim fruits2() As String = {}\n\n            result = String.Empty\n\n            &#39; Get the single item in the array or else a default value.\n            result = fruits2.SingleOrDefault()\n\n            &#39; Display the result.\n            Dim output As String =\n            IIf(String.IsNullOrEmpty(result), &quot;No single item found&quot;, result)\n            MsgBox(&quot;Second array: &quot; &amp; output)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; First array: orange\n            &#39; Second array: No single item found\n</code></pre><p> Sometimes the value of <code>default</code>(<code>TSource</code>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> method to specify the default value that you want to use if the collection is empty. Then, call <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Single__1_System_Collections_Generic_IEnumerable___0__\" data-linktype=\"relative-path\">Single&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</a> to obtain the element. The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty. Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_DefaultIfEmpty__1_System_Collections_Generic_IEnumerable___0____0_\" data-linktype=\"relative-path\">DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,TSource)</a> to specify a default value of 1.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#128\">int[] pageNumbers = { };\n\n// Setting the default value to 1 after the query.\nint pageNumber1 = pageNumbers.SingleOrDefault();\nif (pageNumber1 == 0)\n{\n    pageNumber1 = 1;\n}\nConsole.WriteLine(&quot;The value of the pageNumber1 variable is {0}&quot;, pageNumber1);\n\n// Setting the default value to 1 by using DefaultIfEmpty() in the query.\nint pageNumber2 = pageNumbers.DefaultIfEmpty(1).Single();\nConsole.WriteLine(&quot;The value of the pageNumber2 variable is {0}&quot;, pageNumber2);\n\n/*\n This code produces the following output:\n\n The value of the pageNumber1 variable is 1\n The value of the pageNumber2 variable is 1\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#128\">            Dim pageNumbers() As Integer = {}\n\n            &#39; Setting the default value to 1 after the query.\n            Dim pageNumber1 As Integer = pageNumbers.SingleOrDefault()\n            If pageNumber1 = 0 Then\n                pageNumber1 = 1\n            End If\n            MsgBox(String.Format(&quot;The value of the pageNumber1 variable is {0}&quot;, pageNumber1))\n\n            &#39; Setting the default value to 1 by using DefaultIfEmpty() in the query.\n            Dim pageNumber2 As Integer = pageNumbers.DefaultIfEmpty(1).Single()\n            MsgBox(String.Format(&quot;The value of the pageNumber2 variable is {0}&quot;, pageNumber2))\n\n            &#39; This code produces the following output:\n\n            &#39; The value of the pageNumber1 variable is 1\n            &#39; The value of the pageNumber2 variable is 1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SingleOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SingleOrDefault_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SingleOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return a single element from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test an element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource</span></div>\r\n                  </div>\r\n                  <p>The single element of the input sequence that satisfies the condition, or <code>default</code>(<code>TSource</code>) if no such element is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value for reference and nullable types is <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SingleOrDefault(TSource) to select the only element of an array that satisfies a condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#85\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                      &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot; };\n\nstring fruit1 = fruits.SingleOrDefault(fruit =&gt; fruit.Length &gt; 10);\n\nConsole.WriteLine(fruit1);\n\n/*\n This code produces the following output:\n\n passionfruit\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#85\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Get the single item in the array whose length is &gt; 10.\n            Dim fruit1 As String =\n            fruits.SingleOrDefault(Function(fruit) fruit.Length &gt; 10)\n\n            &#39; Display the result.\n            MsgBox(&quot;First array: &quot; &amp; fruit1)\n</code></pre><p> The following code example demonstrates that SingleOrDefault(TSource) returns a default value when the sequence does not contain exactly one element that satisfies the condition.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#86\">string fruit2 =\n    fruits.SingleOrDefault(fruit =&gt; fruit.Length &gt; 15);\n\nConsole.WriteLine(\n    String.IsNullOrEmpty(fruit2) ? &quot;No such string!&quot; : fruit2);\n\n/*\n This code produces the following output:\n\n No such string!\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#86\">            &#39; Get the single item in the array whose length is &gt; 15.\n            Dim fruit2 As String =\n            fruits.SingleOrDefault(Function(fruit) fruit.Length &gt; 15)\n\n            &#39; Display the result.\n            Dim output As String =\n            IIf(String.IsNullOrEmpty(fruit2), &quot;No single item found&quot;, fruit2)\n            MsgBox(&quot;Second array: &quot; &amp; output)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; First array: passionfruit\n            &#39; Second array: No single item found\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Skip__1_System_Collections_Generic_IEnumerable___0__System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Skip_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Skip&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to skip before returning the remaining elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements that occur after the specified index in the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> If <code>source</code> contains fewer than <code>count</code> elements, an empty <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> is returned. If <code>count</code> is less than or equal to zero, all elements of <code>source</code> are yielded.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.Take%2A&gt; and Skip(TSource) methods are functional complements. Given a sequence <code>coll</code> and an integer <code>n</code>, concatenating the results of <code>coll.Take(n)</code> and <code>coll.Skip(n)</code> yields the same sequence as <code>coll</code>.  </p>\n<p> In Visual Basic query expression syntax, a <code>Skip</code> clause translates to an invocation of Skip(TSource).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Skip(TSource) to skip a specified number of elements in a sorted array and return the remaining elements.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#87\">int[] grades = { 59, 82, 70, 56, 92, 98, 85 };\n\nIEnumerable&lt;int&gt; lowerGrades =\n    grades.OrderByDescending(g =&gt; g).Skip(3);\n\nConsole.WriteLine(&quot;All grades except the top three are:&quot;);\nforeach (int grade in lowerGrades)\n{\n    Console.WriteLine(grade);\n}\n\n/*\n This code produces the following output:\n\n All grades except the top three are:\n 82\n 70\n 59\n 56\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#87\">            &#39; Create an array of integers that represent grades.\n            Dim grades() As Integer = {59, 82, 70, 56, 92, 98, 85}\n\n            &#39; Sort the numbers in descending order and\n            &#39; get all but the first (largest) three numbers.\n            Dim lowerGrades As IEnumerable(Of Integer) =\n            grades _\n            .OrderByDescending(Function(g) g) _\n            .Skip(3)\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder(&quot;All grades except the top three are:&quot; &amp; vbCrLf)\n            For Each grade As Integer In lowerGrades\n                output.AppendLine(grade)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; All grades except the top three are:\n            &#39; 82\n            &#39; 70\n            &#39; 59\n            &#39; 56\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SkipWhile__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SkipWhile_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SkipWhile(TSource) method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> This method tests each element of <code>source</code> by using <code>predicate</code> and skips the element if the result is <code>true</code>. After the predicate function returns <code>false</code> for an element, that element and the remaining elements in <code>source</code> are yielded and there are no more invocations of <code>predicate</code>.  </p>\n<p> If <code>predicate</code> returns <code>true</code> for all elements in the sequence, an empty <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> is returned.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt; and &lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt; methods are functional complements. Given a sequence <code>coll</code> and a pure function <code>p</code>, concatenating the results of <code>coll.TakeWhile(p)</code> and <code>coll.SkipWhile(p)</code> yields the same sequence as <code>coll</code>.  </p>\n<p> In Visual Basic query expression syntax, a <code>Skip While</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SkipWhile(TSource) to skip elements of an array as long as a condition is true.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#88\">int[] grades = { 59, 82, 70, 56, 92, 98, 85 };\n\nIEnumerable&lt;int&gt; lowerGrades =\n    grades\n    .OrderByDescending(grade =&gt; grade)\n    .SkipWhile(grade =&gt; grade &gt;= 80);\n\nConsole.WriteLine(&quot;All grades below 80:&quot;);\nforeach (int grade in lowerGrades)\n{\n    Console.WriteLine(grade);\n}\n\n/*\n This code produces the following output:\n\n All grades below 80:\n 70\n 59\n 56\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#88\">            &#39; Create an array of integers that represent grades.\n            Dim grades() As Integer = {59, 82, 70, 56, 92, 98, 85}\n\n            &#39; Sort the grades in descending order and\n            &#39; get all grades greater less than 80.\n            Dim lowerGrades As IEnumerable(Of Integer) =\n            grades _\n            .OrderByDescending(Function(grade) grade) _\n            .SkipWhile(Function(grade) grade &gt;= 80)\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder(&quot;All grades below 80:&quot; &amp; vbCrLf)\n            For Each grade As Integer In lowerGrades\n                output.AppendLine(grade)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; All grades below 80:\n            &#39; 70\n            &#39; 59\n            &#39; 56\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_SkipWhile__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_SkipWhile_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element&#39;s index is used in the logic of the predicate function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The SkipWhile(TSource) method tests each element of <code>source</code> by using <code>predicate</code> and skips the element if the result is <code>true</code>. After the predicate function returns <code>false</code> for an element, that element and the remaining elements in <code>source</code> are yielded and there are no more invocations of <code>predicate</code>.  </p>\n<p> If <code>predicate</code> returns <code>true</code> for all elements in the sequence, an empty <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> is returned.  </p>\n<p> The first argument of <code>predicate</code> represents the element to test. The second argument represents the zero-based index of the element within <code>source</code>.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt; and &lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt; methods are functional complements. Given a sequence <code>coll</code> and a pure function <code>p</code>, concatenating the results of <code>coll.TakeWhile(p)</code> and <code>coll.SkipWhile(p)</code> yields the same sequence as <code>coll</code>.  </p>\n<p> In Visual Basic query expression syntax, a <code>Skip While</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SkipWhile(TSource) to skip elements of an array as long as a condition that depends on the element&#39;s index is true.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#89\">int[] amounts = { 5000, 2500, 9000, 8000, \n                    6500, 4000, 1500, 5500 };\n\nIEnumerable&lt;int&gt; query =\n    amounts.SkipWhile((amount, index) =&gt; amount &gt; index * 1000);\n\nforeach (int amount in query)\n{\n    Console.WriteLine(amount);\n}\n\n/*\n This code produces the following output:\n\n 4000\n 1500\n 5500\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#89\">            &#39; Create an array of integers.\n            Dim amounts() As Integer =\n            {5000, 2500, 9000, 8000, 6500, 4000, 1500, 5500}\n\n            &#39; Skip items in the array whose value is greater than\n            &#39; the item&#39;s index times 1000; get the remaining items.\n            Dim query As IEnumerable(Of Integer) =\n            amounts.SkipWhile(Function(amount, index) _\n                                  amount &gt; index * 1000)\n\n            &#39; Output the results.\n            Dim output As New System.Text.StringBuilder\n            For Each amount As Integer In query\n                output.AppendLine(amount)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 4000\n            &#39; 1500\n            &#39; 5500\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum method returns zero if <code>source</code> contains no elements.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Single__\" data-linktype=\"relative-path\">Sum(IEnumerable&lt;Single&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#120\">List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\nfloat sum = numbers.Sum();\n\nConsole.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n/*\n This code produces the following output:\n\n The sum of the numbers is 635.13.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#120\">            &#39; Create a list of Single values.\n            Dim numbers As New List(Of Single)(New Single() _\n                                           {43.68F, 1.25F, 583.7F, 6.5F})\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Single = numbers.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The sum of the numbers is 635.13\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Single__\" data-linktype=\"relative-path\">Sum(IEnumerable&lt;Single&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#120\">List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\nfloat sum = numbers.Sum();\n\nConsole.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n/*\n This code produces the following output:\n\n The sum of the numbers is 635.13.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#120\">            &#39; Create a list of Single values.\n            Dim numbers As New List(Of Single)(New Single() _\n                                           {43.68F, 1.25F, 583.7F, 6.5F})\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Single = numbers.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The sum of the numbers is 635.13\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Single__\" data-linktype=\"relative-path\">Sum(IEnumerable&lt;Single&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#120\">List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\nfloat sum = numbers.Sum();\n\nConsole.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n/*\n This code produces the following output:\n\n The sum of the numbers is 635.13.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#120\">            &#39; Create a list of Single values.\n            Dim numbers As New List(Of Single)(New Single() _\n                                           {43.68F, 1.25F, 583.7F, 6.5F})\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Single = numbers.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The sum of the numbers is 635.13\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Single__\" data-linktype=\"relative-path\">Sum(IEnumerable&lt;Single&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#120\">List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\nfloat sum = numbers.Sum();\n\nConsole.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n/*\n This code produces the following output:\n\n The sum of the numbers is 635.13.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#120\">            &#39; Create a list of Single values.\n            Dim numbers As New List(Of Single)(New Single() _\n                                           {43.68F, 1.25F, 583.7F, 6.5F})\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Single = numbers.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The sum of the numbers is 635.13\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result doesnot include values that are <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\" data-linktype=\"relative-path\">Sum(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#121\">float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\nfloat? sum = points.Sum();\n\nConsole.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n/*\n This code produces the following output:\n\n Total points earned: 311.39\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#121\">            &#39; Create an array of Nullable Single values.\n            Dim points() As Nullable(Of Single) =\n            {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Nullable(Of Single) = points.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not include values that are <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\" data-linktype=\"relative-path\">Sum(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#121\">float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\nfloat? sum = points.Sum();\n\nConsole.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n/*\n This code produces the following output:\n\n Total points earned: 311.39\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#121\">            &#39; Create an array of Nullable Single values.\n            Dim points() As Nullable(Of Single) =\n            {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Nullable(Of Single) = points.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not include values that are <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\" data-linktype=\"relative-path\">Sum(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#121\">float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\nfloat? sum = points.Sum();\n\nConsole.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n/*\n This code produces the following output:\n\n Total points earned: 311.39\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#121\">            &#39; Create an array of Nullable Single values.\n            Dim points() As Nullable(Of Single) =\n            {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Nullable(Of Single) = points.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not include values that are <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\" data-linktype=\"relative-path\">Sum(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</a> to sum the values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#121\">float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\nfloat? sum = points.Sum();\n\nConsole.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n/*\n This code produces the following output:\n\n Total points earned: 311.39\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#121\">            &#39; Create an array of Nullable Single values.\n            Dim points() As Nullable(Of Single) =\n            {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Nullable(Of Single) = points.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not include values that are <code>null</code>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Sum to sum the values of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#121\">float?[] points = { null, 0, 92.83F, null, 100.0F, 37.46F, 81.1F };\n\nfloat? sum = points.Sum();\n\nConsole.WriteLine(&quot;Total points earned: {0}&quot;, sum);\n\n/*\n This code produces the following output:\n\n Total points earned: 311.39\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#121\">            &#39; Create an array of Nullable Single values.\n            Dim points() As Nullable(Of Single) =\n            {Nothing, 0, 92.83F, Nothing, 100.0F, 37.46F, 81.1F}\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Nullable(Of Single) = points.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;Total points earned: &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Total points earned: 311.39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum(IEnumerable&lt;Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of a sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to calculate the sum of.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The sum of the values in the sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Sum to sum the values of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#120\">List&lt;float&gt; numbers = new List&lt;float&gt; { 43.68F, 1.25F, 583.7F, 6.5F };\n\nfloat sum = numbers.Sum();\n\nConsole.WriteLine(&quot;The sum of the numbers is {0}.&quot;, sum);\n\n/*\n This code produces the following output:\n\n The sum of the numbers is 635.13.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#120\">            &#39; Create a list of Single values.\n            Dim numbers As New List(Of Single)(New Single() _\n                                           {43.68F, 1.25F, 583.7F, 6.5F})\n\n            &#39; Get the sum of values in the list.\n            Dim sum As Single = numbers.Sum()\n\n            &#39; Display the output.\n            MsgBox(&quot;The sum of the numbers is &quot; &amp; sum)\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The sum of the numbers is 635.13\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Decimal__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Decimal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Sum(TSource) to sum the projected values of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int64__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Decimal___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Decimal&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not included values that are <code>null</code>.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Decimal&gt;</code> in C# or <code>Nullable(Of Decimal)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Double___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Double&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not include values that are <code>null</code>.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Double&gt;</code> in C# or <code>Nullable(Of Double)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int32___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int32&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not include values that are <code>null</code>.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Int32&gt;</code> in C# or <code>Nullable(Of Int32)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Int64___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Int64&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum is larger than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not include values that are <code>null</code>.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Int64&gt;</code> in C# or <code>Nullable(Of Int64)</code> in Visual Basic  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Nullable_System_Single___\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Nullable&lt;Single&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of nullable <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns zero if <code>source</code> contains no elements.  </p>\n<p> The result does not include values that are <code>null</code>.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <code>Nullable&lt;Single&gt;</code> in C# or <code>Nullable(Of Single)</code> in Visual Basic.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Single__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Sum_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Single&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the sum of the sequence of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence of values that are used to calculate a sum.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>selector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to apply to each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The sum of the projected values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>selector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Sum(TSource) method returns zero if <code>source</code> contains no elements.  </p>\n<p> You can apply this method to a sequence of arbitrary values if you provide a function, <code>selector</code>, that projects the members of <code>source</code> into a numeric type, specifically <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.  </p>\n<p> In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum_\" data-linktype=\"relative-path\">Sum</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Sum__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Double__\" data-linktype=\"relative-path\">Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Double&gt;)</a> to sum the projected values of a sequence.  </p>\n<p> &gt; [!NOTE]\n&gt;  This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <code>selector</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#98\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void SumEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    double totalWeight = packages.Sum(pkg =&gt; pkg.Weight);\n\n    Console.WriteLine(&quot;The total weight of the packages is: {0}&quot;, totalWeight);\n}\n\n/*\n This code produces the following output:\n\n The total weight of the packages is: 83.7\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#98\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub SumEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Sum the values from each item&#39;s Weight property.\n                Dim totalWeight As Double = packages.Sum(Function(pkg) _\n                                                         pkg.Weight)\n\n                &#39; Display the result.\n                MsgBox(&quot;The total weight of the packages is: &quot; &amp; totalWeight)\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The total weight of the packages is: 83.7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Take__1_System_Collections_Generic_IEnumerable___0__System_Int32_\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Take_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Take&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a specified number of contiguous elements from the start of a sequence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the specified number of elements from the start of the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> Take(TSource) enumerates <code>source</code> and yields elements until <code>count</code> elements have been yielded or <code>source</code>contains no more elements. If <code>count</code> exceeds the number of elements in <code>source</code>, all elements of <code>source</code>are returned.  </p>\n<p> If <code>count</code> is less than or equal to zero, <code>source</code> is not enumerated and an empty <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> is returned.  </p>\n<p> The Take(TSource) and &lt;xref:System.Linq.Enumerable.Skip%2A&gt; methods are functional complements. Given a sequence <code>coll</code> and an integer <code>n</code>, concatenating the results of <code>coll.Take(n)</code> and <code>coll.Skip(n)</code> yields the same sequence as <code>coll</code>.  </p>\n<p> In Visual Basic query expression syntax, a <code>Take</code> clause translates to an invocation of Take(TSource).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Take(TSource) to return elements from the start of a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#99\">int[] grades = { 59, 82, 70, 56, 92, 98, 85 };\n\nIEnumerable&lt;int&gt; topThreeGrades =\n    grades.OrderByDescending(grade =&gt; grade).Take(3);\n\nConsole.WriteLine(&quot;The top three grades are:&quot;);\nforeach (int grade in topThreeGrades)\n{\n    Console.WriteLine(grade);\n}\n/*\n This code produces the following output:\n\n The top three grades are:\n 98\n 92\n 85\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#99\">            &#39; Create an array of Integer values that represent grades.\n            Dim grades() As Integer = {59, 82, 70, 56, 92, 98, 85}\n\n            &#39; Get the highest three grades by first sorting\n            &#39; them in descending order and then taking the\n            &#39; first three values.\n            Dim topThreeGrades As IEnumerable(Of Integer) =\n            grades _\n            .OrderByDescending(Function(grade) grade) _\n            .Take(3)\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder(&quot;The top three grades are:&quot; &amp; vbCrLf)\n            For Each grade As Integer In topThreeGrades\n                output.AppendLine(grade)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; The top three grades are:\n            &#39; 98\n            &#39; 92\n            &#39; 85\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_TakeWhile__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_TakeWhile_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TakeWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns elements from a sequence as long as a specified condition is true.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A sequence to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The TakeWhile(TSource) method tests each element of <code>source</code> by using <code>predicate</code> and yields the element if the result is <code>true</code>. Enumeration stops when the predicate function returns <code>false</code> for an element or when <code>source</code> contains no more elements.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt; and &lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt; methods are functional complements. Given a sequence <code>coll</code> and a pure function <code>p</code>, concatenating the results of <code>coll.TakeWhile(p)</code> and <code>coll.SkipWhile(p)</code> yields the same sequence as <code>coll</code>.  </p>\n<p> In Visual Basic query expression syntax, a <code>Take While</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use TakeWhile(TSource) to return elements from the start of a sequence as long as a condition is true.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#100\">string[] fruits = { &quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, \n                      &quot;passionfruit&quot;, &quot;grape&quot; };\n\nIEnumerable&lt;string&gt; query =\n    fruits.TakeWhile(fruit =&gt; String.Compare(&quot;orange&quot;, fruit, true) != 0);\n\nforeach (string fruit in query)\n{\n    Console.WriteLine(fruit);\n}\n\n/*\n This code produces the following output:\n\n apple\n banana\n mango\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#100\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;orange&quot;, &quot;passionfruit&quot;, &quot;grape&quot;}\n\n            &#39; Take strings from the array until one of\n            &#39; the strings matches &quot;orange&quot;.\n            Dim query As IEnumerable(Of String) =\n            fruits.TakeWhile(Function(fruit) _\n                                 String.Compare(&quot;orange&quot;, fruit, True) &lt;&gt; 0)\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder\n            For Each fruit As String In query\n                output.AppendLine(fruit)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; apple\n            &#39; banana\n            &#39; mango\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_TakeWhile__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_TakeWhile_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TakeWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns elements from a sequence as long as a specified condition is true. The element&#39;s index is used in the logic of the predicate function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sequence to return elements from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains elements from the input sequence that occur before the element at which the test no longer passes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The TakeWhile(TSource) method tests each element of <code>source</code> by using <code>predicate</code> and yields the element if the result is <code>true</code>. Enumeration stops when the predicate function returns <code>false</code> for an element or when <code>source</code> contains no more elements.  </p>\n<p> The first argument of <code>predicate</code> represents the element to test. The second argument represents the zero-based index of the element within <code>source</code>.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt; and &lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt; methods are functional complements. Given a sequence <code>coll</code> and a pure function <code>p</code>, concatenating the results of <code>coll.TakeWhile(p)</code> and <code>coll.SkipWhile(p)</code> yields the same sequence as <code>coll</code>.  </p>\n<p> In Visual Basic query expression syntax, a <code>Take While</code> clause translates to an invocation of &lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use TakeWhile(TSource) to return elements from the start of a sequence as long as a condition that uses the element&#39;s index is true.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#101\">string[] fruits = { &quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                      &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot; };\n\nIEnumerable&lt;string&gt; query =\n    fruits.TakeWhile((fruit, index) =&gt; fruit.Length &gt;= index);\n\nforeach (string fruit in query)\n{\n    Console.WriteLine(fruit);\n}\n\n/*\n This code produces the following output:\n\n apple\n passionfruit\n banana\n mango\n orange\n blueberry\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#101\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;,\n             &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot;}\n\n            &#39; Take strings from the array until one\n            &#39; of the string&#39;s lengths is greater than or\n            &#39; equal to the string item&#39;s index in the array.\n            Dim query As IEnumerable(Of String) =\n            fruits.TakeWhile(Function(fruit, index) _\n                                 fruit.Length &gt;= index)\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder\n            For Each fruit As String In query\n                output.AppendLine(fruit)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; apple\n            &#39; passionfruit\n            &#39; banana\n            &#39; mango\n            &#39; orange\n            &#39; blueberry\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ThenBy__2_System_Linq_IOrderedEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ThenBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThenBy&lt;TSource,TKey&gt;(IOrderedEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> that contains elements to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> To order a sequence by the values of the elements themselves, specify the identity function (<code>x =&gt; x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <code>keySelector</code>.  </p>\n<p> &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; and &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; are defined to extend the type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a> inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you can call &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt; on the results of a call to &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;. Doing this introduces a new primary ordering that ignores the previously established ordering.  </p>\n</div>\n<p> This method compares keys by using the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>.  </p>\n<p> This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  </p>\n<p> In query expression syntax, an <code>orderby [first criterion], [second criterion]</code> (Visual C#) or <code>Order By [first criterion], [second criterion]</code> (Visual Basic) clause translates to an invocation of ThenBy(TSource,.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ThenBy(TSource, to perform a secondary ordering of the elements in a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#102\">string[] fruits = { &quot;grape&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                      &quot;orange&quot;, &quot;raspberry&quot;, &quot;apple&quot;, &quot;blueberry&quot; };\n\n// Sort the strings first by their length and then \n//alphabetically by passing the identity selector function.\nIEnumerable&lt;string&gt; query =\n    fruits.OrderBy(fruit =&gt; fruit.Length).ThenBy(fruit =&gt; fruit);\n\nforeach (string fruit in query)\n{\n    Console.WriteLine(fruit);\n}\n\n/*\n    This code produces the following output:\n\n    apple\n    grape\n    mango\n    banana\n    orange\n    blueberry\n    raspberry\n    passionfruit\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#102\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;grape&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;,\n             &quot;orange&quot;, &quot;raspberry&quot;, &quot;apple&quot;, &quot;blueberry&quot;}\n\n            &#39; Sort the strings first by their length and then \n            &#39; alphabetically by passing the identity function.\n            Dim query As IEnumerable(Of String) =\n            fruits _\n            .OrderBy(Function(fruit) fruit.Length) _\n            .ThenBy(Function(fruit) fruit)\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder\n            For Each fruit As String In query\n                output.AppendLine(fruit)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; apple\n            &#39; grape\n            &#39; mango\n            &#39; banana\n            &#39; orange\n            &#39; blueberry\n            &#39; raspberry\n            &#39; passionfruit\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ThenBy__2_System_Linq_IOrderedEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ThenBy_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThenBy&lt;TSource,TKey&gt;(IOrderedEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> that contains elements to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> To order a sequence by the values of the elements themselves, specify the identity function (<code>x =&gt; x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <code>keySelector</code>.  </p>\n<p> &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; and &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; are defined to extend the type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a> inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you can call &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt; on the results of a call to &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;. Doing this introduces a new primary ordering that ignores the previously established ordering.  </p>\n</div>\n<p> If <code>comparer</code> is <code>null</code>, the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.  </p>\n<p> This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ThenByDescending__2_System_Linq_IOrderedEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ThenByDescending_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThenByDescending&lt;TSource,TKey&gt;(IOrderedEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> that contains elements to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted in descending order according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> To order a sequence by the values of the elements themselves, specify the identity function (<code>x =&gt; x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <code>keySelector</code>.  </p>\n<p> &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; and &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; are defined to extend the type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a> inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you can call &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt; on the results of a call to &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;. Doing this introduces a new primary ordering that ignores the previously established ordering.  </p>\n</div>\n<p> This sorting method compares keys by using the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>.  </p>\n<p> This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.  </p>\n<p> In Visual C# query expression syntax, an <code>orderby [first criterion], [second criterion] descending</code> clause translates to an invocation of ThenByDescending(TSource,.  </p>\n<p> In Visual Basic query expression syntax, an <code>Order By [first criterion], [second criterion] Descending</code> clause translates to an invocation of ThenByDescending(TSource,.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ThenByDescending__2_System_Linq_IOrderedEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ThenByDescending_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThenByDescending&lt;TSource,TKey&gt;(IOrderedEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> that contains elements to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted in descending order according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> To order a sequence by the values of the elements themselves, specify the identity function (<code>x =&gt; x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <code>keySelector</code>.  </p>\n<p> &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; and &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; are defined to extend the type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a> inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you can call &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt; on the results of a call to &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;. Doing this introduces a new primary ordering that ignores the previously established ordering.  </p>\n</div>\n<p> If <code>comparer</code> is <code>null</code>, the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.  </p>\n<p> This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ThenByDescending(TSource, to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#103\">public class CaseInsensitiveComparer : IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        return string.Compare(x, y, true);\n    }\n}\n\npublic static void ThenByDescendingEx1()\n{\n    string[] fruits = { &quot;apPLe&quot;, &quot;baNanA&quot;, &quot;apple&quot;, &quot;APple&quot;, &quot;orange&quot;, &quot;BAnana&quot;, &quot;ORANGE&quot;, &quot;apPLE&quot; };\n\n    // Sort the strings first ascending by their length and \n    // then descending using a custom case insensitive comparer.\n    IEnumerable&lt;string&gt; query =\n        fruits\n        .OrderBy(fruit =&gt; fruit.Length)\n        .ThenByDescending(fruit =&gt; fruit, new CaseInsensitiveComparer());\n\n    foreach (string fruit in query)\n    {\n        Console.WriteLine(fruit);\n    }\n}\n\n/*\n    This code produces the following output:\n\n    apPLe\n    apple\n    APple\n    apPLE\n    orange\n    ORANGE\n    baNanA\n    BAnana\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#103\">        &#39; This class provides a custom implementation of the Compare() method.\n        Class CaseInsensitiveComparer\n            Implements IComparer(Of String)\n\n            Function Compare(ByVal x As String, ByVal y As String) As Integer _\n            Implements IComparer(Of String).Compare\n\n                &#39; Compare values and ignore case.\n                Return String.Compare(x, y, True)\n            End Function\n        End Class\n\n        Sub ThenByDescendingEx1()\n            Dim fruits() As String =\n            {&quot;apPLe&quot;, &quot;baNanA&quot;, &quot;apple&quot;, &quot;APple&quot;, &quot;orange&quot;, &quot;BAnana&quot;, &quot;ORANGE&quot;, &quot;apPLE&quot;}\n\n            &#39; Sort the strings first by their length and then \n            &#39; by using a custom &quot;case insensitive&quot; comparer.\n            Dim query As IEnumerable(Of String) =\n            fruits _\n            .OrderBy(Function(fruit) fruit.Length) _\n            .ThenByDescending(Function(fruit) fruit, New CaseInsensitiveComparer())\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder\n            For Each fruit As String In query\n                output.AppendLine(fruit)\n            Next\n            MsgBox(output.ToString())\n        End Sub\n\n        &#39; This code produces the following output:\n\n        &#39; apPLe\n        &#39; apple\n        &#39; APple\n        &#39; apPLE\n        &#39; orange\n        &#39; ORANGE\n        &#39; baNanA\n        &#39; BAnana\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToArray__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToArray_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToArray&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an array from a <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create an array from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TSource[]</span>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the elements from the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToArray(TSource) method forces immediate query evaluation and returns an array that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.  </p>\n<p> &lt;xref:System.Linq.Enumerable.ToList%2A&gt; has similar behavior but returns a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> instead of an array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ToArray(TSource) to force immediate query evaluation and return an array of results.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#104\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n}\n\npublic static void ToArrayEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt; \n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2 },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7 },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0 },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8 } };\n\n    string[] companies = packages.Select(pkg =&gt; pkg.Company).ToArray();\n\n    foreach (string company in companies)\n    {\n        Console.WriteLine(company);\n    }\n}\n\n/*\n This code produces the following output:\n\n Coho Vineyard\n Lucerne Publishing\n Wingtip Toys\n Adventure Works\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#104\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n            End Structure\n\n            Sub ToArrayEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2},\n                  New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7},\n                  New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0},\n                  New Package With {.Company = &quot;Adventure Works&quot;, .Weight = 33.8}})\n\n                &#39; Project the Company values from each item in the list\n                &#39; and put them into an array.\n                Dim companies() As String =\n                packages _\n                .Select(Function(pkg) pkg.Company) _\n                .ToArray()\n\n                &#39; Display the results.\n                Dim output As New System.Text.StringBuilder\n                For Each company As String In companies\n                    output.AppendLine(company)\n                Next\n                MsgBox(output.ToString())\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Coho Vineyard\n            &#39; Lucerne Publishing\n            &#39; Wingtip Toys\n            &#39; Adventure Works\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToDictionary__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToDictionary_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDictionary&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> that contains keys and values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>keySelector</code> produces a key that is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>keySelector</code> produces duplicate keys for two elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToDictionary(TSource, method uses the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> to compare keys.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ToDictionary(TSource, to create a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> by using a key selector.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#105\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n    public long TrackingNumber { get; set; }\n}\n\npublic static void ToDictionaryEx1()\n{\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt;\n            { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2, TrackingNumber = 89453312L },\n              new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7, TrackingNumber = 89112755L },\n              new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0, TrackingNumber = 299456122L },\n              new Package { Company = &quot;Adventure Works&quot;, Weight = 33.8, TrackingNumber = 4665518773L } };\n\n    // Create a Dictionary of Package objects, \n    // using TrackingNumber as the key.\n    Dictionary&lt;long, Package&gt; dictionary =\n        packages.ToDictionary(p =&gt; p.TrackingNumber);\n\n    foreach (KeyValuePair&lt;long, Package&gt; kvp in dictionary)\n    {\n        Console.WriteLine(\n            &quot;Key {0}: {1}, {2} pounds&quot;,\n            kvp.Key,\n            kvp.Value.Company,\n            kvp.Value.Weight);\n    }\n}\n\n/*\n This code produces the following output:\n\n Key 89453312: Coho Vineyard, 25.2 pounds\n Key 89112755: Lucerne Publishing, 18.7 pounds\n Key 299456122: Wingtip Toys, 6 pounds\n Key 4665518773: Adventure Works, 33.8 pounds\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#105\">            Structure Package\n                Public Company As String\n                Public Weight As Double\n                Public TrackingNumber As Long\n            End Structure\n\n            Sub ToDictionaryEx1()\n                &#39; Create a list of Package values.\n                Dim packages As New List(Of Package)(New Package() _\n                 {New Package With\n                  {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2, .TrackingNumber = 89453312L},\n                  New Package With\n                  {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7, .TrackingNumber = 89112755L},\n                  New Package With\n                  {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0, .TrackingNumber = 299456122L},\n                  New Package With\n                  {.Company = &quot;Adventure Works&quot;, .Weight = 33.8, .TrackingNumber = 4665518773L}})\n\n                &#39; Create a Dictionary that contains Package values, \n                &#39; using TrackingNumber as the key.\n                Dim dict As Dictionary(Of Long, Package) =\n                packages.ToDictionary(Function(p) p.TrackingNumber)\n\n                &#39; Display the results.\n                Dim output As New System.Text.StringBuilder\n                For Each kvp As KeyValuePair(Of Long, Package) In dict\n                    output.AppendLine(&quot;Key &quot; &amp; kvp.Key &amp; &quot;: &quot; &amp;\n                                  kvp.Value.Company &amp; &quot;, &quot; &amp;\n                                  kvp.Value.Weight &amp; &quot; pounds&quot;)\n                Next\n                MsgBox(output.ToString())\n            End Sub\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; Key 89453312: Coho Vineyard, 25.2 pounds\n            &#39; Key 89112755: Lucerne Publishing, 18.7 pounds\n            &#39; Key 299456122: Wingtip Toys, 6 pounds\n            &#39; Key 4665518773: Adventure Works, 33.8 pounds\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToDictionary__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToDictionary_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDictionary&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function and key comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> that contains keys and values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>keySelector</code> produces a key that is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>keySelector</code> produces duplicate keys for two elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is <code>null</code>, the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToDictionary__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToDictionary_TSource_TKey_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDictionary&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to specified key selector and element selector functions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to produce a result element value from each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> that contains values of type <code>TElement</code> selected from the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>keySelector</code> produces a key that is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>keySelector</code> produces duplicate keys for two elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToDictionary(TSource, method uses the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> to compare keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToDictionary__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToDictionary_TSource_TKey_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDictionary&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function, a comparer, and an element selector function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to produce a result element value from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.Dictionary`2</span> that contains values of type <code>TElement</code> selected from the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>keySelector</code> produces a key that is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>keySelector</code> produces duplicate keys for two elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is <code>null</code>, the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToList__1_System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToList_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToList&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Collections.Generic.List`1</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Collections.Generic.List`1</span> from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.List`1</span> that contains elements from the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToList(TSource) method forces immediate query evaluation and returns a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.  </p>\n<p> &lt;xref:System.Linq.Enumerable.ToArray%2A&gt; has similar behavior but returns an array instead of a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ToList(TSource) to force immediate query evaluation and return a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> that contains the query results.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#106\">string[] fruits = { &quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                      &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot; };\n\nList&lt;int&gt; lengths = fruits.Select(fruit =&gt; fruit.Length).ToList();\n\nforeach (int length in lengths)\n{\n    Console.WriteLine(length);\n}\n\n/*\n This code produces the following output:\n\n 5\n 12\n 6\n 5\n 6\n 9\n 5\n 10\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#106\">            &#39; Create an array of strings.\n            Dim fruits() As String =\n            {&quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;,\n             &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot;}\n\n            &#39; Project the length of each string and \n            &#39; put the length values into a List object.\n            Dim lengths As List(Of Integer) =\n            fruits _\n            .Select(Function(fruit) fruit.Length) _\n            .ToList()\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder\n            For Each length As Integer In lengths\n                output.AppendLine(length)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 5\n            &#39; 12\n            &#39; 6\n            &#39; 5\n            &#39; 6\n            &#39; 9\n            &#39; 5\n            &#39; 10\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToLookup__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToLookup_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLookup&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Linq.Lookup`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Linq.Lookup`2</span> from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.ilookup-2\" data-linktype=\"relative-path\">ILookup</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Linq.Lookup`2</span> that contains keys and values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToLookup(TSource, method returns a <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a>, a one-to-many dictionary that maps keys to collections of values. A <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> differs from a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, which performs a one-to-one mapping of keys to single values.  </p>\n<p> The default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToLookup__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToLookup_TSource_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLookup&lt;TSource,TKey&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Linq.Lookup`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function and key comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Linq.Lookup`2</span> from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.ilookup-2\" data-linktype=\"relative-path\">ILookup</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Linq.Lookup`2</span> that contains keys and values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToLookup(TSource, method returns a <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a>, a one-to-many dictionary that maps keys to collections of values. A <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> is different to a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, which performs a one-to-one mapping of keys to single values.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToLookup__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToLookup_TSource_TKey_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLookup&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Linq.Lookup`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to specified key selector and element selector functions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Linq.Lookup`2</span> from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to produce a result element value from each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.ilookup-2\" data-linktype=\"relative-path\">ILookup<tkey,telement></tkey,telement></a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Linq.Lookup`2</span> that contains values of type <code>TElement</code> selected from the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToLookup(TSource, method returns a <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a>, a one-to-many dictionary that maps keys to collections of values. A <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> differs from a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, which performs a one-to-one mapping of keys to single values.  </p>\n<p> The default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use ToLookup(TSource, to create a <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> by using a key selector function and an element selector function.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#107\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n    public long TrackingNumber { get; set; }\n}\n\npublic static void ToLookupEx1()\n{\n    // Create a list of Packages.\n    List&lt;Package&gt; packages =\n        new List&lt;Package&gt;\n            { new Package { Company = &quot;Coho Vineyard&quot;, \n                  Weight = 25.2, TrackingNumber = 89453312L },\n              new Package { Company = &quot;Lucerne Publishing&quot;, \n                  Weight = 18.7, TrackingNumber = 89112755L },\n              new Package { Company = &quot;Wingtip Toys&quot;, \n                  Weight = 6.0, TrackingNumber = 299456122L },\n              new Package { Company = &quot;Contoso Pharmaceuticals&quot;, \n                  Weight = 9.3, TrackingNumber = 670053128L },\n              new Package { Company = &quot;Wide World Importers&quot;, \n                  Weight = 33.8, TrackingNumber = 4665518773L } };\n\n    // Create a Lookup to organize the packages. \n    // Use the first character of Company as the key value.\n    // Select Company appended to TrackingNumber \n    // as the element values of the Lookup.\n    ILookup&lt;char, string&gt; lookup =\n        packages\n        .ToLookup(p =&gt; Convert.ToChar(p.Company.Substring(0, 1)),\n                  p =&gt; p.Company + &quot; &quot; + p.TrackingNumber);\n\n    // Iterate through each IGrouping in the Lookup.\n    foreach (IGrouping&lt;char, string&gt; packageGroup in lookup)\n    {\n        // Print the key value of the IGrouping.\n        Console.WriteLine(packageGroup.Key);\n        // Iterate through each value in the \n        // IGrouping and print its value.\n        foreach (string str in packageGroup)\n            Console.WriteLine(&quot;    {0}&quot;, str);\n    }\n}\n\n/*\n This code produces the following output:\n\n C\n     Coho Vineyard 89453312\n     Contoso Pharmaceuticals 670053128\n L\n     Lucerne Publishing 89112755\n W\n     Wingtip Toys 299456122\n     Wide World Importers 4665518773\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#107\">        Structure Package\n            Public Company As String\n            Public Weight As Double\n            Public TrackingNumber As Long\n        End Structure\n\n        Sub ToLookupEx1()\n            &#39; Create a list of Packages.\n            Dim packages As New List(Of Package)(New Package() _\n             {New Package With\n              {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2, .TrackingNumber = 89453312L},\n              New Package With\n              {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7, .TrackingNumber = 89112755L},\n              New Package With\n              {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0, .TrackingNumber = 299456122L},\n              New Package With\n              {.Company = &quot;Contoso Pharmaceuticals&quot;, .Weight = 9.3, .TrackingNumber = 670053128L},\n              New Package With\n              {.Company = &quot;Wide World Importers&quot;, .Weight = 33.8, .TrackingNumber = 4665518773L}})\n\n            &#39; Create a Lookup to organize the packages. \n            &#39; Use the first character of Company as the key value.\n            &#39; Select Company appended to TrackingNumber \n            &#39; as the element values of the Lookup.\n            Dim lookup As ILookup(Of Char, String) =\n            packages.ToLookup(Function(p) _\n                                  Convert.ToChar(p.Company.Substring(0, 1)),\n                              Function(p) _\n                                  p.Company &amp; &quot; &quot; &amp; p.TrackingNumber)\n\n            Dim output As New System.Text.StringBuilder\n\n            &#39; Iterate through each IGrouping in the Lookup.\n            For Each packageGroup As IGrouping(Of Char, String) In lookup\n                &#39; Print the key value of the IGrouping.\n                output.AppendLine(packageGroup.Key)\n                &#39; Iterate through each value in the IGrouping and print its value.\n                For Each str As String In packageGroup\n                    output.AppendLine(&quot;   &quot; &amp; str)\n                Next\n            Next\n\n            &#39; Select a group of packages by indexing directly into the Lookup.\n            Dim cgroup As IEnumerable(Of String) = lookup(&quot;C&quot;c)\n\n            output.AppendLine(vbCrLf &amp; &quot;Packages from Company names that start with &#39;C&#39;:&quot;)\n            For Each str As String In cgroup\n                output.AppendLine(str)\n            Next\n\n            &#39; Display the output.\n            MsgBox(output.ToString())\n        End Sub\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; C\n        &#39;    Coho Vineyard 89453312\n        &#39;    Contoso Pharmaceuticals 670053128\n        &#39; L\n        &#39;    Lucerne Publishing 89112755\n        &#39; W\n        &#39;    Wingtip Toys 299456122\n        &#39;    Wide World Importers 4665518773\n        &#39;\n        &#39; Packages from Company names that start with &#39;C&#39;:\n        &#39; Coho Vineyard 89453312\n        &#39; Contoso Pharmaceuticals 670053128\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_ToLookup__3_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Func___0___2__System_Collections_Generic_IEqualityComparer___1__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_ToLookup_TSource_TKey_TElement__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLookup&lt;TSource,TKey,TElement&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,TKey&gt;,Func&lt;TSource,TElement&gt;,IEqualityComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Linq.Lookup`2</span> from an <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> according to a specified key selector function, a comparer and an element selector function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to create a <span class=\"xref\">stem.Linq.Lookup`2</span> from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to extract a key from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<span class=\"xref\">TElement</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transform function to produce a result element value from each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.ilookup-2\" data-linktype=\"relative-path\">ILookup<tkey,telement></tkey,telement></a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Linq.Lookup`2</span> that contains values of type <code>TElement</code> selected from the input sequence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToLookup(TSource, method returns a <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a>, a one-to-many dictionary that maps keys to collections of values. A <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> differs from a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, which performs a one-to-one mapping of keys to single values.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> is used to compare keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Union__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Union_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set union of two sequences by using the default equality comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements form the first set for the union.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements form the second set for the union.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements from both input sequences, excluding duplicates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> This method excludes duplicates from the return set. This is different behavior to the &lt;xref:System.Linq.Enumerable.Concat%2A&gt; method, which returns all the elements in the input sequences including duplicates.  </p>\n<p> The default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values of the types that implement the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> generic interface. To compare a custom data type, you need to implement this interface and provide your own <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods for the type.  </p>\n<p> When the object returned by this method is enumerated, Union(TSource) enumerates <code>first</code> and <code>second</code> in that order and yields each element that has not already been yielded.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Union(TSource) to obtain the union of two sequences of integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#109\">int[] ints1 = { 5, 3, 9, 7, 5, 9, 3, 7 };\nint[] ints2 = { 8, 3, 6, 4, 4, 9, 1, 0 };\n\nIEnumerable&lt;int&gt; union = ints1.Union(ints2);\n\nforeach (int num in union)\n{\n    Console.Write(&quot;{0} &quot;, num);\n}\n\n/*\n This code produces the following output:\n\n 5 3 9 7 8 6 4 1 0\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#109\">            &#39; Create two arrays of integer values.\n            Dim ints1() As Integer = {5, 3, 9, 7, 5, 9, 3, 7}\n            Dim ints2() As Integer = {8, 3, 6, 4, 4, 9, 1, 0}\n\n            &#39; Get the set union of the two arrays.\n            Dim union As IEnumerable(Of Integer) = ints1.Union(ints2)\n\n            &#39; Display the resulting set&#39;s values.\n            Dim output As New System.Text.StringBuilder\n            For Each num As Integer In union\n                output.AppendLine(num &amp; &quot; &quot;)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 5 \n            &#39; 3 \n            &#39; 9 \n            &#39; 7 \n            &#39; 8 \n            &#39; 6 \n            &#39; 4 \n            &#39; 1 \n            &#39; 0 \n</code></pre><p> If you want to compare sequences of objects of a custom data type, you have to implement the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> generic interface in a helperclass. The following code example shows how to implement this interface in a custom data type and provide <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> and <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#9\">public class ProductA\n{ \n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\npublic class ProductComparer : IEqualityComparer&lt;ProductA&gt;\n{\n\n    public bool Equals(ProductA x, ProductA y)\n    {\n        //Check whether the objects are the same object. \n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether the products&#39; properties are equal. \n        return x != null &amp;&amp; y != null &amp;&amp; x.Code.Equals(y.Code) &amp;&amp; x.Name.Equals(y.Name);\n    }\n\n    public int GetHashCode(ProductA obj)\n    {\n        //Get hash code for the Name field if it is not null. \n        int hashProductName = obj.Name == null ? 0 : obj.Name.GetHashCode();\n\n        //Get hash code for the Code field. \n        int hashProductCode = obj.Code.GetHashCode();\n\n        //Calculate the hash code for the product. \n        return hashProductName ^ hashProductCode;\n    }\n}\n</code></pre><p> After you implement this interface, you can use sequences of <code>ProductA</code> objects in the Union(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#10\">        ProductA[] store1 = { new ProductA { Name = &quot;apple&quot;, Code = 9 }, \n                               new ProductA { Name = &quot;orange&quot;, Code = 4 } };\n\n        ProductA[] store2 = { new ProductA { Name = &quot;apple&quot;, Code = 9 }, \n                               new ProductA { Name = &quot;lemon&quot;, Code = 12 } };\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQEncapsulatedComparer#4\">        //Get the products from the both arrays\n        //excluding duplicates.\n\n        IEnumerable&lt;ProductA&gt; union =\n          store1.Union(store2);\n\n        foreach (var product in union)\n            Console.WriteLine(product.Name + &quot; &quot; + product.Code);\n\n        /*\n            This code produces the following output:\n         \n            apple 9\n            orange 4\n            lemon 12\n        */\n</code></pre><pre><code class=\"lang-vb\" name=\"CSLINQEncapsulatedComparer#4\">        &#39; Get the products from the both arrays\n        &#39; excluding duplicates.\n\n        Dim union = store1.Union(store2)\n\n        For Each product In union\n            Console.WriteLine(product.Name &amp; &quot; &quot; &amp; product.Code)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; apple 9\n        &#39; orange 4\n        &#39; lemon 12\n        &#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Union__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEqualityComparer___0__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Union_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,IEnumerable&lt;TSource&gt;,IEqualityComparer&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Produces the set union of two sequences by using a specified <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements form the first set for the union.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> whose distinct elements form the second set for the union.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> to compare values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains the elements from both input sequences, excluding duplicates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> If c<code>omparer</code> is <code>null</code>, the default equality comparer, <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, is used to compare values.  </p>\n<p> When the object returned by this method is enumerated, &lt;xref:System.Linq.Enumerable.Union%2A&gt; enumerates <code>first</code> and <code>second</code> in that order and yields each element that has not already been yielded.  </p>\n<p> The &lt;xref:System.Linq.Enumerable.Concat%2A&gt; method differs from the &lt;xref:System.Linq.Enumerable.Union%2A&gt; method because the &lt;xref:System.Linq.Enumerable.Concat%2A&gt; method returns all the elements in the input sequences including duplicates, whereas &lt;xref:System.Linq.Enumerable.Union%2A&gt; returns only unique values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to implement an equality comparer that can be used in the Union(TSource) method.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#1\">Public Class Product\n    Public Property Name As String\n    Public Property Code As Integer\nEnd Class\n\n&#39; Custom comparer for the Product class\nPublic Class ProductComparer\n    Implements IEqualityComparer(Of Product)\n\n    Public Function Equals1(\n        ByVal x As Product, \n        ByVal y As Product\n        ) As Boolean Implements IEqualityComparer(Of Product).Equals\n\n        &#39; Check whether the compared objects reference the same data.\n        If x Is y Then Return True\n\n        &#39;Check whether any of the compared objects is null.\n        If x Is Nothing OrElse y Is Nothing Then Return False\n\n        &#39; Check whether the products&#39; properties are equal.\n        Return (x.Code = y.Code) AndAlso (x.Name = y.Name)\n    End Function\n\n    Public Function GetHashCode1(\n        ByVal product As Product\n        ) As Integer Implements IEqualityComparer(Of Product).GetHashCode\n\n        &#39; Check whether the object is null.\n        If product Is Nothing Then Return 0\n\n        &#39; Get hash code for the Name field if it is not null.\n        Dim hashProductName = \n            If(product.Name Is Nothing, 0, product.Name.GetHashCode())\n\n        &#39; Get hash code for the Code field.\n        Dim hashProductCode = product.Code.GetHashCode()\n\n        &#39; Calculate the hash code for the product.\n        Return hashProductName Xor hashProductCode\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#1\">public class Product\n{\n    public string Name { get; set; }\n    public int Code { get; set; }\n}\n\n// Custom comparer for the Product class\nclass ProductComparer : IEqualityComparer&lt;Product&gt;\n{\n    // Products are equal if their names and product numbers are equal.\n    public bool Equals(Product x, Product y)\n    {\n       \n        //Check whether the compared objects reference the same data.\n        if (Object.ReferenceEquals(x, y)) return true;\n\n        //Check whether any of the compared objects is null.\n        if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))\n            return false;\n\n        //Check whether the products&#39; properties are equal.\n        return x.Code == y.Code &amp;&amp; x.Name == y.Name;\n    }\n\n    // If Equals() returns true for a pair of objects \n    // then GetHashCode() must return the same value for these objects.\n\n    public int GetHashCode(Product product)\n    {\n        //Check whether the object is null\n        if (Object.ReferenceEquals(product, null)) return 0;\n\n        //Get hash code for the Name field if it is not null.\n        int hashProductName = product.Name == null ? 0 : product.Name.GetHashCode();\n\n        //Get hash code for the Code field.\n        int hashProductCode = product.Code.GetHashCode();\n\n        //Calculate the hash code for the product.\n        return hashProductName ^ hashProductCode;\n    }\n\n}\n</code></pre><p> After you implement this comparer, you can use sequences of <code>Product</code> objects in the Union(TSource) method, as shown in the following example.  </p>\n<pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#2\">        Dim store1() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;orange&quot;, .Code = 4}}\n\n        Dim store2() As Product = \n            {New Product With {.Name = &quot;apple&quot;, .Code = 9}, \n             New Product With {.Name = &quot;lemon&quot;, .Code = 12}}\n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#2\">        Product[] store1 = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;orange&quot;, Code = 4 } };\n\n        Product[] store2 = { new Product { Name = &quot;apple&quot;, Code = 9 }, \n                               new Product { Name = &quot;lemon&quot;, Code = 12 } };\n</code></pre><pre><code class=\"lang-vb\" name=\"CSLINQCustomComparer#4\">        &#39; Get the products from the both arrays\n        &#39; excluding duplicates.\n\n        Dim union = store1.Union(store2, New ProductComparer())\n\n        For Each product In union\n            Console.WriteLine(product.Name &amp; &quot; &quot; &amp; product.Code)\n        Next\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; apple 9\n        &#39; orange 4\n        &#39; lemon 12\n        &#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"CSLINQCustomComparer#4\">        //Get the products from the both arrays\n        //excluding duplicates.\n\n        IEnumerable&lt;Product&gt; union =\n          store1.Union(store2, new ProductComparer());\n\n        foreach (var product in union)\n            Console.WriteLine(product.Name + &quot; &quot; + product.Code);\n\n        /*\n            This code produces the following output:\n         \n            apple 9\n            orange 4\n            lemon 12\n        */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Where__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Where_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Where&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Filters a sequence of values based on a predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to filter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each element for a condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains elements from the input sequence that satisfy the condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> In query expression syntax, a <code>where</code> (Visual C#) or <code>Where</code> (Visual Basic) clause translates to an invocation of Where(TSource).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Where(TSource) to filter a sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#110\">List&lt;string&gt; fruits =\n    new List&lt;string&gt; { &quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;, \n                    &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot; };\n\nIEnumerable&lt;string&gt; query = fruits.Where(fruit =&gt; fruit.Length &lt; 6);\n\nforeach (string fruit in query)\n{\n    Console.WriteLine(fruit);\n}\n/*\n This code produces the following output:\n\n apple\n mango\n grape\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#110\">            &#39; Create a list of strings.\n            Dim fruits As New List(Of String)(New String() _\n                                {&quot;apple&quot;, &quot;passionfruit&quot;, &quot;banana&quot;, &quot;mango&quot;,\n                                 &quot;orange&quot;, &quot;blueberry&quot;, &quot;grape&quot;, &quot;strawberry&quot;})\n\n            &#39; Restrict the results to those strings whose \n            &#39; length is less than six.\n            Dim query As IEnumerable(Of String) =\n            fruits.Where(Function(fruit) fruit.Length &lt; 6)\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder\n            For Each fruit As String In query\n                output.AppendLine(fruit)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; apple\n            &#39; mango\n            &#39; grape\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Where__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Boolean__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Where_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Where&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Int32,Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Filters a sequence of values based on a predicate. Each element&#39;s index is used in the logic of the predicate function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> to filter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>predicate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains elements from the input sequence that satisfy the condition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code> or <code>predicate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The first argument of <code>predicate</code> represents the element to test. The second argument represents the zero-based index of the element within <code>source</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use Where(TSource) to filter a sequence based on a predicate that involves the index of each element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#111\">int[] numbers = { 0, 30, 20, 15, 90, 85, 40, 75 };\n\nIEnumerable&lt;int&gt; query =\n    numbers.Where((number, index) =&gt; number &lt;= index * 10);\n\nforeach (int number in query)\n{\n    Console.WriteLine(number);\n}\n/*\n This code produces the following output:\n\n 0\n 20\n 15\n 40\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#111\">            &#39; Create an array of integers.\n            Dim numbers() As Integer = {0, 30, 20, 15, 90, 85, 40, 75}\n\n            &#39; Restrict the results to those numbers whose\n            &#39; values are less than or equal to their index times 10.\n            Dim query As IEnumerable(Of Integer) =\n            numbers.Where(Function(number, index) number &lt;= index * 10)\n\n            &#39; Display the results.\n            Dim output As New System.Text.StringBuilder\n            For Each number As Integer In query\n                output.AppendLine(number)\n            Next\n            MsgBox(output.ToString())\n\n            &#39; This code produces the following output:\n            &#39;\n            &#39; 0\n            &#39; 20\n            &#39; 15\n            &#39; 40\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Enumerable_Zip__3_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___1___2__\">\r\n    \r\n            <a id=\"System_Linq_Enumerable_Zip_TFirst_TSecond_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Zip&lt;TFirst,TSecond,TResult&gt;(IEnumerable&lt;TFirst&gt;,IEnumerable&lt;TSecond&gt;,Func&lt;TFirst,TSecond,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>first</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TFirst</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sequence to merge.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSecond</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second sequence to merge.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>resultSelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TFirst</span>,<span class=\"xref\">TSecond</span>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function that specifies how to merge the elements from the two sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> that contains merged elements of two input sequences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>first</code> or <code>second</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <code>GetEnumerator</code> method directly or by using <code>foreach</code> in Visual C# or <code>For Each</code> in Visual Basic.  </p>\n<p> The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Zip(TFirst, method to merge two sequences.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Enumerable#200\">int[] numbers = { 1, 2, 3, 4 };\nstring[] words = { &quot;one&quot;, &quot;two&quot;, &quot;three&quot; };\n\nvar numbersAndWords = numbers.Zip(words, (first, second) =&gt; first + &quot; &quot; + second);\n\nforeach (var item in numbersAndWords)\n    Console.WriteLine(item);\n\n// This code produces the following output:\n\n// 1 one\n// 2 two\n// 3 three\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Enumerable#200\">            Dim numbers() As Integer = {1, 2, 3, 4}\n            Dim words() As String = {&quot;one&quot;, &quot;two&quot;, &quot;three&quot;}\n            Dim numbersAndWords = numbers.Zip(words, Function(first, second) first &amp; &quot; &quot; &amp; second)\n\n            For Each item In numbersAndWords\n                Console.WriteLine(item)\n            Next\n\n            &#39; This code produces the following output:\n\n            &#39; 1 one\n            &#39; 2 two\n            &#39; 3 three\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Enumerable.yml\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Aggregate&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Aggregate&lt;TSource,TAccumulate&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Aggregate&lt;TSource,TAccumulate,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.All&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Any&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.AsEnumerable&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Average\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Average&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Cast&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Concat&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Contains&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Count&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.DefaultIfEmpty&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Distinct&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ElementAt&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ElementAtOrDefault&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Empty&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Except&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.First&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.FirstOrDefault&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.GroupBy&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.GroupBy&lt;TSource,TKey,TElement&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.GroupBy&lt;TSource,TKey,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.GroupBy&lt;TSource,TKey,TElement,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Intersect&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Join&lt;TOuter,TInner,TKey,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Last&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.LastOrDefault&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.LongCount&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Max\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Max&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Max&lt;TSource,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Min\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Min&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Min&lt;TSource,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.OfType&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.OrderBy&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.OrderByDescending&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Range\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Repeat&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Reverse&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Select&lt;TSource,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.SelectMany&lt;TSource,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.SelectMany&lt;TSource,TCollection,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.SequenceEqual&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Single&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.SingleOrDefault&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Skip&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.SkipWhile&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Sum\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Sum&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Take&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.TakeWhile&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ThenBy&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ThenByDescending&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ToArray&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ToDictionary&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ToDictionary&lt;TSource,TKey,TElement&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ToList&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ToLookup&lt;TSource,TKey&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.ToLookup&lt;TSource,TKey,TElement&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Union&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Where&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Enumerable.Zip&lt;TFirst,TSecond,TResult&gt;\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"d6812356-c1a4-df1d-9309-ac55467a3af6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a set of static (Shared in Visual Basic) methods for querying objects that implement .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Linq/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.Enumerable\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Enumerable.yml","open_to_public_contributors":true,"api_name":["System.Linq.Enumerable","System.Linq.Enumerable.Aggregate<TSource>","System.Linq.Enumerable.Aggregate<TSource,TAccumulate>","System.Linq.Enumerable.Aggregate<TSource,TAccumulate,TResult>","System.Linq.Enumerable.All<TSource>","System.Linq.Enumerable.Any<TSource>","System.Linq.Enumerable.AsEnumerable<TSource>","System.Linq.Enumerable.Average","System.Linq.Enumerable.Average<TSource>","System.Linq.Enumerable.Cast<TResult>","System.Linq.Enumerable.Concat<TSource>","System.Linq.Enumerable.Contains<TSource>","System.Linq.Enumerable.Count<TSource>","System.Linq.Enumerable.DefaultIfEmpty<TSource>","System.Linq.Enumerable.Distinct<TSource>","System.Linq.Enumerable.ElementAt<TSource>","System.Linq.Enumerable.ElementAtOrDefault<TSource>","System.Linq.Enumerable.Empty<TResult>","System.Linq.Enumerable.Except<TSource>","System.Linq.Enumerable.First<TSource>","System.Linq.Enumerable.FirstOrDefault<TSource>","System.Linq.Enumerable.GroupBy<TSource,TKey>","System.Linq.Enumerable.GroupBy<TSource,TKey,TElement>","System.Linq.Enumerable.GroupBy<TSource,TKey,TResult>","System.Linq.Enumerable.GroupBy<TSource,TKey,TElement,TResult>","System.Linq.Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>","System.Linq.Enumerable.Intersect<TSource>","System.Linq.Enumerable.Join<TOuter,TInner,TKey,TResult>","System.Linq.Enumerable.Last<TSource>","System.Linq.Enumerable.LastOrDefault<TSource>","System.Linq.Enumerable.LongCount<TSource>","System.Linq.Enumerable.Max","System.Linq.Enumerable.Max<TSource>","System.Linq.Enumerable.Max<TSource,TResult>","System.Linq.Enumerable.Min","System.Linq.Enumerable.Min<TSource>","System.Linq.Enumerable.Min<TSource,TResult>","System.Linq.Enumerable.OfType<TResult>","System.Linq.Enumerable.OrderBy<TSource,TKey>","System.Linq.Enumerable.OrderByDescending<TSource,TKey>","System.Linq.Enumerable.Range","System.Linq.Enumerable.Repeat<TResult>","System.Linq.Enumerable.Reverse<TSource>","System.Linq.Enumerable.Select<TSource,TResult>","System.Linq.Enumerable.SelectMany<TSource,TResult>","System.Linq.Enumerable.SelectMany<TSource,TCollection,TResult>","System.Linq.Enumerable.SequenceEqual<TSource>","System.Linq.Enumerable.Single<TSource>","System.Linq.Enumerable.SingleOrDefault<TSource>","System.Linq.Enumerable.Skip<TSource>","System.Linq.Enumerable.SkipWhile<TSource>","System.Linq.Enumerable.Sum","System.Linq.Enumerable.Sum<TSource>","System.Linq.Enumerable.Take<TSource>","System.Linq.Enumerable.TakeWhile<TSource>","System.Linq.Enumerable.ThenBy<TSource,TKey>","System.Linq.Enumerable.ThenByDescending<TSource,TKey>","System.Linq.Enumerable.ToArray<TSource>","System.Linq.Enumerable.ToDictionary<TSource,TKey>","System.Linq.Enumerable.ToDictionary<TSource,TKey,TElement>","System.Linq.Enumerable.ToList<TSource>","System.Linq.Enumerable.ToLookup<TSource,TKey>","System.Linq.Enumerable.ToLookup<TSource,TKey,TElement>","System.Linq.Enumerable.Union<TSource>","System.Linq.Enumerable.Where<TSource>","System.Linq.Enumerable.Zip<TFirst,TSecond,TResult>"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Linq.Enumerable","System::Linq::Enumerable","System.Linq.Enumerable.Aggregate``1","System::Linq::Enumerable::Aggregate``1","System.Linq.Enumerable.Aggregate``2","System::Linq::Enumerable::Aggregate``2","System.Linq.Enumerable.Aggregate``3","System::Linq::Enumerable::Aggregate``3","System.Linq.Enumerable.All``1","System::Linq::Enumerable::All``1","System.Linq.Enumerable.Any``1","System::Linq::Enumerable::Any``1","System.Linq.Enumerable.AsEnumerable``1","System::Linq::Enumerable::AsEnumerable``1","System.Linq.Enumerable.Average","System::Linq::Enumerable::Average","System.Linq.Enumerable.Average``1","System::Linq::Enumerable::Average``1","System.Linq.Enumerable.Cast``1","System::Linq::Enumerable::Cast``1","System.Linq.Enumerable.Concat``1","System::Linq::Enumerable::Concat``1","System.Linq.Enumerable.Contains``1","System::Linq::Enumerable::Contains``1","System.Linq.Enumerable.Count``1","System::Linq::Enumerable::Count``1","System.Linq.Enumerable.DefaultIfEmpty``1","System::Linq::Enumerable::DefaultIfEmpty``1","System.Linq.Enumerable.Distinct``1","System::Linq::Enumerable::Distinct``1","System.Linq.Enumerable.ElementAt``1","System::Linq::Enumerable::ElementAt``1","System.Linq.Enumerable.ElementAtOrDefault``1","System::Linq::Enumerable::ElementAtOrDefault``1","System.Linq.Enumerable.Empty``1","System::Linq::Enumerable::Empty``1","System.Linq.Enumerable.Except``1","System::Linq::Enumerable::Except``1","System.Linq.Enumerable.First``1","System::Linq::Enumerable::First``1","System.Linq.Enumerable.FirstOrDefault``1","System::Linq::Enumerable::FirstOrDefault``1","System.Linq.Enumerable.GroupBy``2","System::Linq::Enumerable::GroupBy``2","System.Linq.Enumerable.GroupBy``3","System::Linq::Enumerable::GroupBy``3","System.Linq.Enumerable.GroupBy``4","System::Linq::Enumerable::GroupBy``4","System.Linq.Enumerable.GroupJoin``4","System::Linq::Enumerable::GroupJoin``4","System.Linq.Enumerable.Intersect``1","System::Linq::Enumerable::Intersect``1","System.Linq.Enumerable.Join``4","System::Linq::Enumerable::Join``4","System.Linq.Enumerable.Last``1","System::Linq::Enumerable::Last``1","System.Linq.Enumerable.LastOrDefault``1","System::Linq::Enumerable::LastOrDefault``1","System.Linq.Enumerable.LongCount``1","System::Linq::Enumerable::LongCount``1","System.Linq.Enumerable.Max","System::Linq::Enumerable::Max","System.Linq.Enumerable.Max``1","System::Linq::Enumerable::Max``1","System.Linq.Enumerable.Max``2","System::Linq::Enumerable::Max``2","System.Linq.Enumerable.Min","System::Linq::Enumerable::Min","System.Linq.Enumerable.Min``1","System::Linq::Enumerable::Min``1","System.Linq.Enumerable.Min``2","System::Linq::Enumerable::Min``2","System.Linq.Enumerable.OfType``1","System::Linq::Enumerable::OfType``1","System.Linq.Enumerable.OrderBy``2","System::Linq::Enumerable::OrderBy``2","System.Linq.Enumerable.OrderByDescending``2","System::Linq::Enumerable::OrderByDescending``2","System.Linq.Enumerable.Range","System::Linq::Enumerable::Range","System.Linq.Enumerable.Repeat``1","System::Linq::Enumerable::Repeat``1","System.Linq.Enumerable.Reverse``1","System::Linq::Enumerable::Reverse``1","System.Linq.Enumerable.Select``2","System::Linq::Enumerable::Select``2","System.Linq.Enumerable.SelectMany``2","System::Linq::Enumerable::SelectMany``2","System.Linq.Enumerable.SelectMany``3","System::Linq::Enumerable::SelectMany``3","System.Linq.Enumerable.SequenceEqual``1","System::Linq::Enumerable::SequenceEqual``1","System.Linq.Enumerable.Single``1","System::Linq::Enumerable::Single``1","System.Linq.Enumerable.SingleOrDefault``1","System::Linq::Enumerable::SingleOrDefault``1","System.Linq.Enumerable.Skip``1","System::Linq::Enumerable::Skip``1","System.Linq.Enumerable.SkipWhile``1","System::Linq::Enumerable::SkipWhile``1","System.Linq.Enumerable.Sum","System::Linq::Enumerable::Sum","System.Linq.Enumerable.Sum``1","System::Linq::Enumerable::Sum``1","System.Linq.Enumerable.Take``1","System::Linq::Enumerable::Take``1","System.Linq.Enumerable.TakeWhile``1","System::Linq::Enumerable::TakeWhile``1","System.Linq.Enumerable.ThenBy``2","System::Linq::Enumerable::ThenBy``2","System.Linq.Enumerable.ThenByDescending``2","System::Linq::Enumerable::ThenByDescending``2","System.Linq.Enumerable.ToArray``1","System::Linq::Enumerable::ToArray``1","System.Linq.Enumerable.ToDictionary``2","System::Linq::Enumerable::ToDictionary``2","System.Linq.Enumerable.ToDictionary``3","System::Linq::Enumerable::ToDictionary``3","System.Linq.Enumerable.ToList``1","System::Linq::Enumerable::ToList``1","System.Linq.Enumerable.ToLookup``2","System::Linq::Enumerable::ToLookup``2","System.Linq.Enumerable.ToLookup``3","System::Linq::Enumerable::ToLookup``3","System.Linq.Enumerable.Union``1","System::Linq::Enumerable::Union``1","System.Linq.Enumerable.Where``1","System::Linq::Enumerable::Where``1","System.Linq.Enumerable.Zip``3","System::Linq::Enumerable::Zip``3"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"d6812356-c1a4-df1d-9309-ac55467a3af6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Linq/Enumerable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Enumerable class | Microsoft Docs","_op_ogTitle":"Enumerable class","description":"Provides a set of static (Shared in Visual Basic) methods for querying objects that implement .\n","toc_asset_id":"_splitted/System.Linq/toc.json","toc_rel":"_splitted/System.Linq/toc.json","source_url":"","ms.assetid":"System.Linq.Enumerable","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.enumerable","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.enumerable","fileRelativePath":"System.Linq.Enumerable.html"},"themesRelativePathToOutputRoot":"_themes/"}