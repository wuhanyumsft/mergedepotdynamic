{"content":"    \r\n    <h1 id=\"System_Net_CredentialCache\">\r\n      <span class=\"lang-csharp\">CredentialCache</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides storage for multiple credentials.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class CredentialCache : System.Collections.IEnumerable, System.Net.ICredentials, System.Net.ICredentialsByHost</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CredentialCache</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The CredentialCache class stores credentials for multiple Internet resources. Applications that need to access multiple resources can store the credentials for those resources in a CredentialCache instance that then provides the proper set of credentials to the Internet resource when required. When the <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_GetCredential_\" data-linktype=\"relative-path\">GetCredential</a> method is called, it compares the Uniform Resource Identifier (URI) and authentication type provided with those stored in the cache and returns the first set of credentials that match.  </p>\n<p> The <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a> property contains the system credentials of the current security context. For client applications, these represent the user name, password, and domain of the user who is currently logged in. For ASP.NET applications, the default credentials are the user credentials of the logged-in user or the user being impersonated.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache__ctor\" data-linktype=\"self-bookmark\">CredentialCache()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_DefaultCredentials\" data-linktype=\"self-bookmark\">DefaultCredentials</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the system credentials of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_DefaultNetworkCredentials\" data-linktype=\"self-bookmark\">DefaultNetworkCredentials</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the network credentials of the current security context.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_Add_System_Uri_System_String_System_Net_NetworkCredential_\" data-linktype=\"self-bookmark\">Add(Uri,String,NetworkCredential)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance to the credential cache for use with protocols other than SMTP and associates it with a Uniform Resource Identifier (URI) prefix and authentication protocol.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_Add_System_String_System_Int32_System_String_System_Net_NetworkCredential_\" data-linktype=\"self-bookmark\">Add(String,Int32,String,NetworkCredential)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance for use with SMTP to the credential cache and associates it with a host computer, port, and authentication protocol. Credentials added using this method are valid for SMTP only. This method does not work for HTTP or FTP requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_GetCredential_System_Uri_System_String_\" data-linktype=\"self-bookmark\">GetCredential(Uri,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance associated with the specified Uniform Resource Identifier (URI) and authentication type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_GetCredential_System_String_System_Int32_System_String_\" data-linktype=\"self-bookmark\">GetCredential(String,Int32,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance associated with the specified host, port, and authentication protocol.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that can iterate through the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_Remove_System_Uri_System_String_\" data-linktype=\"self-bookmark\">Remove(Uri,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance from the cache if it is associated with the specified Uniform Resource Identifier (URI) prefix and authentication protocol.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_CredentialCache_Remove_System_String_System_Int32_System_String_\" data-linktype=\"self-bookmark\">Remove(String,Int32,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance from the cache if it is associated with the specified host, port, and authentication protocol.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache__ctor\">\r\n    \r\n            <a id=\"System_Net_CredentialCache__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CredentialCache()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CredentialCache ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The constructor creates a <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example initializes a <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> with multiple security credentials and uses those credentials with a <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic CredentialCache.Add Example#1\">    CredentialCache myCache = new CredentialCache();\n\n    myCache.Add(new Uri(&quot;http://www.contoso.com/&quot;),&quot;Basic&quot;,new NetworkCredential(UserName,SecurelyStoredPassword));\n    myCache.Add(new Uri(&quot;http://www.contoso.com/&quot;),&quot;Digest&quot;, new NetworkCredential(UserName,SecurelyStoredPassword,Domain));\n\n    wReq.Credentials = myCache;\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic CredentialCache.Add Example#1\">      CredentialCache^ myCache = gcnew CredentialCache;\n\n      myCache-&gt;Add( gcnew Uri( &quot;http://www.contoso.com/&quot; ), &quot;Basic&quot;, gcnew NetworkCredential( UserName,SecurelyStoredPassword ) );\n      myCache-&gt;Add( gcnew Uri( &quot;http://www.contoso.com/&quot; ), &quot;Digest&quot;, gcnew NetworkCredential( UserName,SecurelyStoredPassword,Domain ) );\n\n      wReq-&gt;Credentials = myCache;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic CredentialCache.Add Example#1\">        Dim myCache As New CredentialCache()\n        \n        myCache.Add(New Uri(&quot;http://www.contoso.com/&quot;), &quot;Basic&quot;, New NetworkCredential(UserName, SecurelyStoredPassword))\n        myCache.Add(New Uri(&quot;http://www.contoso.com/&quot;), &quot;Digest&quot;, New NetworkCredential(UserName, SecurelyStoredPassword, Domain))\n        \n        wReq.Credentials = myCache\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_DefaultCredentials\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_DefaultCredentials_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultCredentials</div>        \r\n          </div>\r\n    \r\n            <p>Gets the system credentials of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.ICredentials DefaultCredentials { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> that represents the system credentials of the application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DefaultCredentials property applies only to NTLM, negotiate, and Kerberos-based authentication.  </p>\n<p> DefaultCredentials represents the system credentials for the current security context in which the application is running. For a client-side application, these are usually the Windows credentials (user name, password, and domain) of the user running the application. For ASP.NET applications, the default credentials are the user credentials of the logged-in user, or the user being impersonated.  </p>\n<p> To get the credentials as a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance, use the <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultNetworkCredentials_\" data-linktype=\"relative-path\">DefaultNetworkCredentials</a> property.  </p>\n<p> The supported values for <code>authType</code> are &quot;NTLM&quot;, &quot;Digest&quot;, &quot;Kerberos&quot;, and &quot;Negotiate&quot;. This method does not work for HTTP or FTP protocols.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> instance returned by DefaultCredentials cannot be used to view the user name, password, or domain of the current security context.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the DefaultCredentials property to get the system credentials of the application.  </p>\n<pre><code class=\"lang-vb\" name=\"CredentialCache_DefaultCredentials#1\">            &#39; Assuming &quot;Windows Authentication&quot; has been set as; \n            &#39; Directory Security settings for default web site in IIS.\n            Dim url As String = &quot;http://localhost&quot;\n            &#39; Create a &#39;HttpWebRequest&#39; object with the specified url. \n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n            &#39; Assign the credentials of the logged in user or the user being impersonated.\n            myHttpWebRequest.Credentials = CredentialCache.DefaultCredentials\n            &#39; Send the &#39;HttpWebRequest&#39; and wait for response.            \n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            Console.WriteLine(&quot;Authentication successful&quot;)\n            Console.WriteLine(&quot;Response received successfully&quot;)\n</code></pre><pre><code class=\"lang-cpp\" name=\"CredentialCache_DefaultCredentials#1\">      // Ensure Directory Security settings for default web site in IIS is &quot;Windows Authentication&quot;.\n      String^ url = &quot;http://localhost&quot;;\n\n      // Create a &#39;HttpWebRequest&#39; object with the specified url.\n      HttpWebRequest^ myHttpWebRequest = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( url ));\n\n      // Assign the credentials of the logged in user or the user being impersonated.\n      myHttpWebRequest-&gt;Credentials = CredentialCache::DefaultCredentials;\n\n      // Send the &#39;HttpWebRequest&#39; and wait for response.\n      HttpWebResponse^ myHttpWebResponse = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest-&gt;GetResponse());\n      Console::WriteLine( &quot;Authentication successful&quot; );\n      Console::WriteLine( &quot;Response received successfully&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"CredentialCache_DefaultCredentials#1\">            // Ensure Directory Security settings for default web site in IIS is &quot;Windows Authentication&quot;.\n            string url = &quot;http://localhost&quot;;\n            // Create a &#39;HttpWebRequest&#39; object with the specified url. \n            HttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n            // Assign the credentials of the logged in user or the user being impersonated.\n            myHttpWebRequest.Credentials = CredentialCache.DefaultCredentials;\n            // Send the &#39;HttpWebRequest&#39; and wait for response.            \n            HttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n            Console.WriteLine(&quot;Authentication successful&quot;);\n            Console.WriteLine(&quot;Response received successfully&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_DefaultNetworkCredentials\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_DefaultNetworkCredentials_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultNetworkCredentials</div>        \r\n          </div>\r\n    \r\n            <p>Gets the network credentials of the current security context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.NetworkCredential DefaultNetworkCredentials { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that represents the network credentials of the current user or application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The credentials returned by the DefaultNetworkCredentials property is applicable only for NTLM, negotiate, and Kerberos-based authentication.  </p>\n<p> The credentials returned by DefaultNetworkCredentials represents the authentication credentials for the current security context in which the application is running. For a client-side application, these are usually the Windows credentials (user name, password, and domain) of the user running the application. For ASP.NET applications, the default network credentials are the user credentials of the logged-in user, or the user being impersonated.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_Add_System_Uri_System_String_System_Net_NetworkCredential_\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Uri,String,NetworkCredential)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance to the credential cache for use with protocols other than SMTP and associates it with a Uniform Resource Identifier (URI) prefix and authentication protocol.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (Uri uriPrefix, string authType, System.Net.NetworkCredential cred);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uriPrefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that specifies the URI prefix of the resources that the credential grants access to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>authType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The authentication scheme used by the resource named in <code>uriPrefix</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cred</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> to add to the credential cache.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>uriPrefix</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>authType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The same credentials are added more than once.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Add method places a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance for use with protocols other than SMTP into the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a>. The cache stores credentials in the order in which they are added to it. When the <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_GetCredential_System_Uri_System_String_\" data-linktype=\"relative-path\">GetCredential(Uri,String)</a> method is called, it returns the proper matching <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example initializes a <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> with multiple security credentials and uses those credentials with a <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic CredentialCache.Add Example#1\">    CredentialCache myCache = new CredentialCache();\n\n    myCache.Add(new Uri(&quot;http://www.contoso.com/&quot;),&quot;Basic&quot;,new NetworkCredential(UserName,SecurelyStoredPassword));\n    myCache.Add(new Uri(&quot;http://www.contoso.com/&quot;),&quot;Digest&quot;, new NetworkCredential(UserName,SecurelyStoredPassword,Domain));\n\n    wReq.Credentials = myCache;\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic CredentialCache.Add Example#1\">      CredentialCache^ myCache = gcnew CredentialCache;\n\n      myCache-&gt;Add( gcnew Uri( &quot;http://www.contoso.com/&quot; ), &quot;Basic&quot;, gcnew NetworkCredential( UserName,SecurelyStoredPassword ) );\n      myCache-&gt;Add( gcnew Uri( &quot;http://www.contoso.com/&quot; ), &quot;Digest&quot;, gcnew NetworkCredential( UserName,SecurelyStoredPassword,Domain ) );\n\n      wReq-&gt;Credentials = myCache;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic CredentialCache.Add Example#1\">        Dim myCache As New CredentialCache()\n        \n        myCache.Add(New Uri(&quot;http://www.contoso.com/&quot;), &quot;Basic&quot;, New NetworkCredential(UserName, SecurelyStoredPassword))\n        myCache.Add(New Uri(&quot;http://www.contoso.com/&quot;), &quot;Digest&quot;, New NetworkCredential(UserName, SecurelyStoredPassword, Domain))\n        \n        wReq.Credentials = myCache\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_Add_System_String_System_Int32_System_String_System_Net_NetworkCredential_\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(String,Int32,String,NetworkCredential)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance for use with SMTP to the credential cache and associates it with a host computer, port, and authentication protocol. Credentials added using this method are valid for SMTP only. This method does not work for HTTP or FTP requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (string host, int port, string authenticationType, System.Net.NetworkCredential credential);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>host</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that identifies the host computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that specifies the port to connect to on <code>host</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>authenticationType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that identifies the authentication scheme used when connecting to <code>host</code> using <code>cred</code>. See Remarks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> to add to the credential cache.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>host</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>authType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>authType</code> not an accepted value. See Remarks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method places a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance for use with SMTP into the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a>. The cache stores credentials in the order in which they are added to it. When the <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_GetCredential_System_String_System_Int32_System_String_\" data-linktype=\"relative-path\">GetCredential(String,Int32,String)</a> method is called, it returns a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance that is selected by matching the <code>host</code>, <code>port</code>, and <code>authType</code>. The comparison is done case-insensitively.  </p>\n<p> The supported values for <code>authType</code> are &quot;NTLM&quot;, &quot;Digest&quot;, &quot;Kerberos&quot;, and &quot;Negotiate&quot;.  </p>\n<p> Credentials added with this method are only valid for use with SMTP. This method does not work for HTTP or FTP protocols.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example initializes a <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> with multiple security credentials for use with SMTP and uses one of those credentials with a <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"NCL_Credential.Cache.Add_SMTP#1\">        SmtpClient client = new SmtpClient(&quot;ContosoMail&quot;, 45);\n        MailAddress from = new MailAddress(&quot;sender@SenderMailServerName.com&quot;, &quot;Sender Name&quot;);\n        MailAddress to = new MailAddress(&quot;recepient@RecepientMailServerName.com&quot;, &quot;Recepient Name&quot;);\n        MailMessage message = new MailMessage(from, to);\n\n        message.Body = &quot;This is a test e-mail message sent by an application. &quot;;\n        message.Subject = &quot;Test Email using Credentials&quot;;\n\n        NetworkCredential myCreds = new NetworkCredential(&quot;username&quot;, &quot;password&quot;, &quot;domain&quot;);\n        CredentialCache myCredentialCache = new CredentialCache();        \n        try \n        {\n            myCredentialCache.Add(&quot;ContoscoMail&quot;, 35, &quot;Basic&quot;, myCreds);\n            myCredentialCache.Add(&quot;ContoscoMail&quot;, 45, &quot;NTLM&quot;, myCreds);\n                    \n            client.Credentials = myCredentialCache.GetCredential(&quot;ContosoMail&quot;, 45, &quot;NTLM&quot;);\n            client.Send(message);\n            Console.WriteLine(&quot;Goodbye.&quot;);\n        }\n\t\t    catch(Exception e)\n\t\t    {\n\t\t\t      Console.WriteLine(&quot;Exception is raised. &quot;);\n\t\t\t      Console.WriteLine(&quot;Message: {0} &quot;,e.Message);\n\t\t    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NCL_Credential.Cache.Add_SMTP#1\">        SmtpClient^ client = gcnew SmtpClient(&quot;ContosoMail&quot;, 45);\n        MailAddress^ from = gcnew MailAddress(&quot;sender@SenderMailServerName.com&quot;, &quot;Sender Name&quot;);\n        MailAddress^ to = gcnew MailAddress(&quot;recepient@RecepientMailServerName.com&quot;, &quot;Recepient Name&quot;);\n        MailMessage^ message = gcnew MailMessage(from, to);\n\n        message-&gt;Body = &quot;This is a test e-mail message sent by an application. &quot;;\n        message-&gt;Subject = &quot;Test Email using Credentials&quot;;\n\n        NetworkCredential^ myCreds = gcnew NetworkCredential(&quot;username&quot;, &quot;password&quot;, &quot;domain&quot;);\n        CredentialCache^ myCredentialCache = gcnew CredentialCache();        \n        try \n        {\n            myCredentialCache-&gt;Add(&quot;ContoscoMail&quot;, 35, &quot;Basic&quot;, myCreds);\n            myCredentialCache-&gt;Add(&quot;ContoscoMail&quot;, 45, &quot;NTLM&quot;, myCreds);\n                    \n            client-&gt;Credentials = myCredentialCache-&gt;GetCredential(&quot;ContosoMail&quot;, 45, &quot;NTLM&quot;);\n            client-&gt;Send(message);\n            Console::WriteLine(&quot;Goodbye.&quot;);\n        }\n\t\t    catch(Exception^ e)\n\t\t    {\n\t\t\t      Console::WriteLine(&quot;Exception is raised. &quot;);\n\t\t\t      Console::WriteLine(&quot;Message: {0} &quot;,e-&gt;Message);\n\t\t    }\n</code></pre><pre><code class=\"lang-vb\" name=\"NCL_Credential.Cache.Add_SMTP#1\">        Dim Client As New SmtpClient(&quot;ContosoMail&quot;, 45)\n        Dim from As New MailAddress(&quot;sender@SenderMailServerName.com&quot;, &quot;Sender Name&quot;)\n        Dim sendto As New MailAddress(&quot;recepient@RecepientMailServerName.com&quot;, &quot;Recepient Name&quot;)\n        Dim message As New MailMessage(from, sendto)\n\n        message.Body = &quot;This is a test e-mail message sent by an application. &quot;\n        message.Subject = &quot;Test Email using Credentials&quot;\n\n        Dim myCreds As New NetworkCredential(&quot;username&quot;, &quot;password&quot;, &quot;domain&quot;)\n        DIm myCredentialCache As New CredentialCache()\n\n        try \n            myCredentialCache.Add(&quot;ContoscoMail&quot;, 35, &quot;Basic&quot;, myCreds)\n            myCredentialCache.Add(&quot;ContoscoMail&quot;, 45, &quot;NTLM&quot;, myCreds)\n                    \n            client.Credentials = myCredentialCache.GetCredential(&quot;ContosoMail&quot;, 45, &quot;NTLM&quot;)\n            client.Send(message)\n            Console.WriteLine(&quot;Goodbye.&quot;)\n\t\t    catch e As Exception\n\t\t\t      Console.WriteLine(&quot;Exception is raised. &quot;)\n\t\t\t      Console.WriteLine(&quot;Message: {0} &quot;,e.Message)\n        End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_GetCredential_System_Uri_System_String_\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_GetCredential_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCredential(Uri,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance associated with the specified Uniform Resource Identifier (URI) and authentication type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.NetworkCredential GetCredential (Uri uriPrefix, string authType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uriPrefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that specifies the URI prefix of the resources that the credential grants access to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>authType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The authentication scheme used by the resource named in <code>uriPrefix</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> or, if there is no matching credential in the cache, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>uriPrefix</code> or <code>authType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetCredential method searches the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> and returns the <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance for the specified URI and authorization type. If the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> contains no matching <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance, <code>null</code> is returned.  </p>\n<p> GetCredential uses the longest matching URI prefix in the cache to determine which set of credentials to return for an authorization type. The following table shows examples.  </p>\n<table>\n<thead>\n<tr>\n<th>URI Prefix</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>http://www.contoso.com/portal/news.htm</code></td>\n<td>Requests for the specific Web page <code>news.htm</code>.</td>\n</tr>\n<tr>\n<td><code>http://www.contoso.com/portal/</code></td>\n<td>Requests for all content in the <code>portal</code> path, except the page <code>news.htm</code>.</td>\n</tr>\n<tr>\n<td><code>http://www.contoso.com/</code></td>\n<td>Requests for all resources at <code>www.contoso.com</code>, except those in the <code>portal</code> path.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the GetCredential method to return the <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance associated with the specified URI and authentication type.  </p>\n<pre><code class=\"lang-cpp\" name=\"CredentialCache_GetCredential#1\">void Display( NetworkCredential^ credential )\n{\n   Console::WriteLine( &quot;<br>The credentials are:&quot; );\n   Console::WriteLine( &quot;<br>Username : {0} , Password : {1} , Domain : {2}&quot;, credential-&gt;UserName, credential-&gt;Password, credential-&gt;Domain );\n}\n\nvoid GetPage( String^ url, String^ userName, String^ password, String^ domainName )\n{\n   try\n   {\n      CredentialCache^ myCredentialCache = gcnew CredentialCache;\n\n      // Dummy names used as credentials.\n      myCredentialCache-&gt;Add( gcnew Uri( &quot;http://microsoft.com/&quot; ), &quot;Basic&quot;, gcnew NetworkCredential( &quot;user1&quot;,&quot;passwd1&quot;,&quot;domain1&quot; ) );\n      myCredentialCache-&gt;Add( gcnew Uri( &quot;http://msdn.com/&quot; ), &quot;Basic&quot;, gcnew NetworkCredential( &quot;user2&quot;,&quot;passwd2&quot;,&quot;domain2&quot; ) );\n      myCredentialCache-&gt;Add( gcnew Uri( url ), &quot;Basic&quot;, gcnew NetworkCredential( userName,password,domainName ) );\n\n      // Create a webrequest with the specified url.\n      WebRequest^ myWebRequest = WebRequest::Create( url );\n\n      // Call &#39;GetCredential&#39; to obtain the credentials specific to our Uri.\n      NetworkCredential^ myCredential = myCredentialCache-&gt;GetCredential( gcnew Uri( url ), &quot;Basic&quot; );\n      Display( myCredential );\n\n      // Associating only our credentials.\n      myWebRequest-&gt;Credentials = myCredential;\n\n      // Sends the request and waits for response.\n      WebResponse^ myWebResponse = myWebRequest-&gt;GetResponse();\n\n      // Process response here.\n      Console::WriteLine( &quot;<br>Response Received.&quot; );\n      myWebResponse-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      if ( e-&gt;Response != nullptr )\n            Console::WriteLine( &quot;\\r<br>Failed to obtain a response. The following error occured : {0}&quot;, (dynamic_cast&lt;HttpWebResponse^&gt;(e-&gt;Response))-&gt;StatusDescription );\n      else\n            Console::WriteLine( &quot;\\r<br>Failed to obtain a response. The following error occured : {0}&quot;, e-&gt;Status );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>The following exception was raised : {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CredentialCache_GetCredential#1\">    public static void GetPage(string url,string userName,string password,string domainName)\n    {\n        try \n        {\n            CredentialCache myCredentialCache = new CredentialCache();\n            // Dummy names used as credentials.    \n            myCredentialCache.Add(new Uri(&quot;http://microsoft.com/&quot;),&quot;Basic&quot;, new NetworkCredential(&quot;user1&quot;,&quot;passwd1&quot;,&quot;domain1&quot;));\n            myCredentialCache.Add(new Uri(&quot;http://msdn.com/&quot;),&quot;Basic&quot;, new NetworkCredential(&quot;user2&quot;,&quot;passwd2&quot;,&quot;domain2&quot;));\n            myCredentialCache.Add(new Uri(url),&quot;Basic&quot;, new NetworkCredential(userName,password,domainName));\n            // Create a webrequest with the specified url.\n         WebRequest myWebRequest = WebRequest.Create(url);  \n            // Call &#39;GetCredential&#39; to obtain the credentials specific to our Uri.\n            NetworkCredential myCredential = myCredentialCache.GetCredential(new Uri(url),&quot;Basic&quot;);\n            Display(myCredential);\n         // Associating only our credentials.        \n            myWebRequest.Credentials = myCredential;    \n            // Sends the request and waits for response.\n         WebResponse myWebResponse = myWebRequest.GetResponse(); \n            \n            // Process response here.\n      \n         Console.WriteLine(&quot;<br>Response Received.&quot;);\n            myWebResponse.Close();\n                                  \n        } \n        catch(WebException e) \n        {\n            if (e.Response != null)\n                Console.WriteLine(&quot;\\r<br>Failed to obtain a response. The following error occured : {0}&quot;,((HttpWebResponse)(e.Response)).StatusDescription); \n            else\n                Console.WriteLine(&quot;\\r<br>Failed to obtain a response. The following error occured : {0}&quot;,e.Status); \n        }\n        catch(Exception e)\n        {\n            Console.WriteLine(&quot;<br>The following exception was raised : {0}&quot;,e.Message);\n        }\n  }\n  public static void Display(NetworkCredential credential)\n  {\n    Console.WriteLine(&quot;<br>The credentials are:&quot;);\n    Console.WriteLine(&quot;<br>Username : {0} ,Password : {1} ,Domain : {2}&quot;,credential.UserName,credential.Password,credential.Domain);\n  }\n</code></pre><pre><code class=\"lang-vb\" name=\"CredentialCache_GetCredential#1\">    Public Shared Sub GetPage(url As String, userName As String, password As String, domainName As String)\n        Try\n            Dim myCredentialCache As New CredentialCache()\n            &#39; Dummy names used as credentials    \n            myCredentialCache.Add(New Uri(&quot;http://microsoft.com/&quot;), &quot;Basic&quot;, New NetworkCredential(&quot;user1&quot;, &quot;passwd1&quot;, &quot;domain1&quot;))\n            myCredentialCache.Add(New Uri(&quot;http://msdn.com/&quot;), &quot;Basic&quot;, New NetworkCredential(&quot;user2&quot;, &quot;passwd2&quot;, &quot;domain2&quot;))\n            myCredentialCache.Add(New Uri(url), &quot;Basic&quot;, New NetworkCredential(userName, password, domainName))\n            &#39; Creates a webrequest with the specified url. \n            Dim myWebRequest As WebRequest = WebRequest.Create(url)\n            &#39; Call &#39;GetCredential&#39; to obtain the credentials specific to our Uri.\n            Dim myCredential As NetworkCredential = myCredentialCache.GetCredential(New Uri(url), &quot;Basic&quot;)\n            Display(myCredential)\n            myWebRequest.Credentials = myCredential &#39;Associating only our credentials            \n            &#39; Sends the request and waits for response.\n            Dim myWebResponse As WebResponse = myWebRequest.GetResponse()\n            &#39; Process response here.\n            Console.WriteLine(ControlChars.Cr + &quot;Response Received.&quot;)\n            myWebResponse.Close()\n\n        Catch e As WebException\n            If Not (e.Response Is Nothing) Then\n                Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;Failed to obtain a response. The following error occured : {0}&quot;, CType(e.Response, HttpWebResponse).StatusDescription)\n            Else\n                Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;Failed to obtain a response. The following error occured : {0}&quot;, e.Status)\n            End If\n        Catch e As Exception\n            Console.WriteLine(ControlChars.Cr + &quot;The following exception was raised : {0}&quot;, e.Message)\n        End Try\n    End Sub &#39;GetPage\n\n    Public Shared Sub Display(ByVal credential As NetworkCredential)\n        Console.WriteLine(&quot;The credentials are: &quot;)\n        Console.WriteLine(ControlChars.Cr + &quot;Username : {0} ,Password : {1} ,Domain : {2}&quot;, credential.UserName, credential.Password, credential.Domain)\n    End Sub &#39;Display\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_GetCredential_System_String_System_Int32_System_String_\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_GetCredential_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCredential(String,Int32,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance associated with the specified host, port, and authentication protocol.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.NetworkCredential GetCredential (string host, int port, string authenticationType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>host</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that identifies the host computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that specifies the port to connect to on <code>host</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>authenticationType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that identifies the authentication scheme used when connecting to <code>host</code>. See Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> or, if there is no matching credential in the cache, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>host</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>authType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>authType</code> not an accepted value. See Remarks.  </p>\n<p> -or-  </p>\n<p> <code>host</code> is equal to the empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searches the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> and returns the <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance for the specified host, port, and authorization type. The <code>host</code>, <code>port</code>, and <code>authType</code> values passed to this method are case-insensitively compared to the values specified when the credential was added to the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> using the <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_Add_\" data-linktype=\"relative-path\">Add</a> methods.  </p>\n<p> The supported values for <code>authType</code> are &quot;NTLM&quot;, &quot;Digest&quot;, &quot;Kerberos&quot;, and &quot;Negotiate&quot;.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_GetEnumerator\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that can iterate through the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the GetEnumerator method to return an enumerator that can iterate through the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"CredentialCache_GetEnumerator#1\">void Display( NetworkCredential^ credential )\n{\n   Console::WriteLine( &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;Username : {0} , Password : {1} , Domain : {2}&quot;, credential-&gt;UserName, credential-&gt;Password, credential-&gt;Domain );\n}\n\nvoid GetPage( String^ url, String^ userName, String^ password, String^ domainName )\n{\n   try\n   {\n      CredentialCache^ myCredentialCache = gcnew CredentialCache;\n\n      // Dummy Credentials used here.\n      myCredentialCache-&gt;Add( gcnew Uri( &quot;http://microsoft.com/&quot; ), &quot;Basic&quot;, gcnew NetworkCredential( &quot;user1&quot;,&quot;passwd1&quot;,&quot;domain1&quot; ) );\n      myCredentialCache-&gt;Add( gcnew Uri( &quot;http://msdn.com/&quot; ), &quot;Basic&quot;, gcnew NetworkCredential( &quot;user2&quot;,&quot;passwd2&quot;,&quot;domain2&quot; ) );\n      myCredentialCache-&gt;Add( gcnew Uri( url ), &quot;Basic&quot;, gcnew NetworkCredential( userName,password,domainName ) );\n\n      // Creates a webrequest with the specified url.\n      WebRequest^ myWebRequest = WebRequest::Create( url );\n      myWebRequest-&gt;Credentials = myCredentialCache;\n      IEnumerator^ listCredentials = myCredentialCache-&gt;GetEnumerator();\n      Console::WriteLine( &quot;<br>Displaying credentials stored in CredentialCache: &quot; );\n      while ( listCredentials-&gt;MoveNext() )\n            Display( dynamic_cast&lt;NetworkCredential^&gt;(listCredentials-&gt;Current) );\n      Console::WriteLine( &quot;<br>Now Displaying the same using &#39;foreach&#39; : &quot; );\n\n      // Can use foreach with CredentialCache(Since GetEnumerator function of IEnumerable* has been implemented by &#39;CredentialCache&#39; class.\n      IEnumerator^ myEnum = myCredentialCache-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         NetworkCredential^ credential = safe_cast&lt;NetworkCredential^&gt;(myEnum-&gt;Current);\n         Display( credential );\n      }\n      WebResponse^ myWebResponse = myWebRequest-&gt;GetResponse();\n\n      // Process response here.\n      Console::WriteLine( &quot;<br>Response Received.&quot; );\n      myWebResponse-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      if ( e-&gt;Response != nullptr )\n            Console::WriteLine( &quot;\\r<br>Failed to obtain a response. The following error occured : {0}&quot;, (dynamic_cast&lt;HttpWebResponse^&gt;(e-&gt;Response))-&gt;StatusDescription );\n      else\n            Console::WriteLine( &quot;\\r<br>Failed to obtain a response. The following error occured : {0}&quot;, e-&gt;Status );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>The following exception was raised : {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CredentialCache_GetEnumerator#1\">        Try\n            Dim myCredentialCache As New CredentialCache\n            &#39; Dummy Credentials used here.             \n            myCredentialCache.Add(New Uri(&quot;http://microsoft.com/&quot;), &quot;Basic&quot;, New NetworkCredential(&quot;user1&quot;, &quot;passwd1&quot;, &quot;domain1&quot;))\n            myCredentialCache.Add(New Uri(&quot;http://msdn.com/&quot;), &quot;Basic&quot;, New NetworkCredential(&quot;user2&quot;, &quot;passwd2&quot;, &quot;domain2&quot;))\n\n            myCredentialCache.Add(New Uri(url), &quot;Basic&quot;, New NetworkCredential(userName, password, domainName))\n            Dim myWebRequest As WebRequest = WebRequest.Create(url) &#39;Creates a webrequest with the specified url \n            myWebRequest.Credentials = myCredentialCache\n            Dim listCredentials As IEnumerator = myCredentialCache.GetEnumerator()\n            Console.WriteLine(&quot;Displaying credentials stored in CredentialCache: &quot;)\n            While listCredentials.MoveNext()\n                Display(CType(listCredentials.Current, NetworkCredential))\n            End While\n            Console.WriteLine(ControlChars.Cr + &quot;Now Displaying using &#39;foreach&#39;: &quot;)\n            &#39; Can use foreach with CredentialCache(Since GetEnumerator method of IEnumerable has been implemented by &#39;CredentialCache&#39; class.\n            Dim credential As NetworkCredential\n            For Each credential In myCredentialCache\n                Display(credential)\n            Next credential\n            Dim myWebResponse As WebResponse = myWebRequest.GetResponse() &#39;Sends the request and waits for response.\n            &#39; Process the response here\n            Console.WriteLine(ControlChars.Cr + &quot;Response Received.&quot;)\n            myWebResponse.Close()\n\n        Catch e As WebException\n            If Not (e.Response Is Nothing) Then\n                Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;Failed to obtain a response. The following error occured : {0}&quot;, CType(e.Response, HttpWebResponse).StatusDescription)\n            Else\n                Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;Failed to obtain a response. The following error occured : {0}&quot;, e.Status)\n            End If\n        Catch e As Exception\n            Console.WriteLine(ControlChars.Cr + &quot;The following exception was raised : {0}&quot;, e.Message)\n        End Try\n\n    End Sub &#39;GetPage\n    \n    Public Shared Sub Display(credential As NetworkCredential)\n        Console.WriteLine(ControlChars.Cr + &quot;Username : {0} ,Password : {1} ,Domain : {2}&quot;, credential.UserName, credential.Password, credential.Domain)\n    End Sub &#39;Display\n</code></pre><pre><code class=\"lang-cs\" name=\"CredentialCache_GetEnumerator#1\">   public static void GetPage(string url,string userName,string password,string domainName)\n     {\n        try \n        {\n            CredentialCache myCredentialCache = new CredentialCache();\n            // Dummy Credentials used here.             \n            myCredentialCache.Add(new Uri(&quot;http://microsoft.com/&quot;),&quot;Basic&quot;, new NetworkCredential(&quot;user1&quot;,&quot;passwd1&quot;,&quot;domain1&quot;));\n            myCredentialCache.Add(new Uri(&quot;http://msdn.com/&quot;),&quot;Basic&quot;, new NetworkCredential(&quot;user2&quot;,&quot;passwd2&quot;,&quot;domain2&quot;));\n\n            myCredentialCache.Add(new Uri(url),&quot;Basic&quot;, new NetworkCredential(userName,password,domainName));    \n            // Creates a webrequest with the specified url.                 \n            WebRequest myWebRequest = WebRequest.Create(url);\n            myWebRequest.Credentials = myCredentialCache;            \n            IEnumerator listCredentials = myCredentialCache.GetEnumerator();\n            \n            Console.WriteLine(&quot;<br>Displaying credentials stored in CredentialCache: &quot;);\n            while(listCredentials.MoveNext())\n            {\n                Display((NetworkCredential)listCredentials.Current);\n            }\n            Console.WriteLine(&quot;<br>Now Displaying the same using &#39;foreach&#39; : &quot;);\n            // Can use foreach with CredentialCache(Since GetEnumerator function of IEnumerable has been implemented by &#39;CredentialCache&#39; class.\n            foreach(NetworkCredential credential in myCredentialCache)\n                Display(credential);\n            // Send the request and waits for response.\n         WebResponse myWebResponse = myWebRequest.GetResponse(); \n            \n           // Process response here.\n            \n           Console.WriteLine(&quot;<br>Response Received.&quot;);\n            myWebResponse.Close();\n                                  \n        } \n        catch(WebException e) \n        {\n            if (e.Response != null)\n                Console.WriteLine(&quot;\\r<br>Failed to obtain a response. The following error occured : {0}&quot;,((HttpWebResponse)(e.Response)).StatusDescription); \n            else\n                Console.WriteLine(&quot;\\r<br>Failed to obtain a response. The following error occured : {0}&quot;,e.Status); \n        }\n        catch(Exception e)\n        {\n            Console.WriteLine(&quot;<br>The following exception was raised : {0}&quot;,e.Message);\n        }\n  }\n  public static void Display(NetworkCredential credential)\n  {\n    Console.WriteLine(&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;Username : {0} ,Password : {1} ,Domain : {2}&quot;,credential.UserName,credential.Password,credential.Domain);\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_Remove_System_Uri_System_String_\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Uri,String)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance from the cache if it is associated with the specified Uniform Resource Identifier (URI) prefix and authentication protocol.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove (Uri uriPrefix, string authType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uriPrefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that specifies the URI prefix of the resources that the credential is used for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>authType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The authentication scheme used by the host named in <code>uriPrefix</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method removes a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance from the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> if the specified URI prefix and authentication protocol match those associated with the credential. Multiple calls to the Remove method for the same <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> have no effect.  </p>\n<p> If <code>authType</code> is <code>null</code> or <code>uriPrefix</code> is <code>null</code>, or no matching credential is found in the cache, this method does nothing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses this method to delete a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance from the cache.  </p>\n<pre><code class=\"lang-cpp\" name=\"CredentialCache_Add_Remove#3\">      // Create a webrequest with the specified url.\n      WebRequest^ myWebRequest = WebRequest::Create( url );\n      myWebRequest-&gt;Credentials = myCredentialCache;\n      Console::WriteLine( &quot;<br>Linked CredentialCache to your request.&quot; );\n      // Send the request and wait for response.\n      WebResponse^ myWebResponse = myWebRequest-&gt;GetResponse();\n\n      // Process response here.\n\n      Console::Write( &quot;Response received successfully.&quot; );\n      \n      // Call &#39;Remove&#39; method to dispose credentials for current Uri as not required further.\n      myCredentialCache-&gt;Remove( myWebRequest-&gt;RequestUri, &quot;Basic&quot; );\n      Console::WriteLine( &quot;<br>Your credentials have now been removed from the program&#39;s CredentialCache&quot; );\n      myWebResponse-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"CredentialCache_Add_Remove#3\">            &#39; Create a webrequest with the specified url .\n            Dim myWebRequest As WebRequest = WebRequest.Create(url)\n            myWebRequest.Credentials = myCredentialCache\n            Console.WriteLine(ControlChars.Cr + &quot;Linked CredentialCache to your request.&quot;)\n            &#39; Send the request and wait for response.\n            Dim myWebResponse As WebResponse = myWebRequest.GetResponse()\n\n            &#39;Process the response here\n\n            Console.Write(&quot;Response received successfully.&quot;)\n            &#39;Call &#39;Remove&#39; method to dispose credentials for current Uri as they would not be; \n            &#39;required in any of the future requests.\n            myCredentialCache.Remove(myWebRequest.RequestUri, &quot;Basic&quot;)\n            Console.WriteLine(ControlChars.Cr + &quot;Your credentials have now been removed from the program&#39;s CredentialCache&quot;)\n            myWebResponse.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"CredentialCache_Add_Remove#3\">        // Create a webrequest with the specified url. \n        WebRequest myWebRequest = WebRequest.Create(url); \n        myWebRequest.Credentials = myCredentialCache;\n        Console.WriteLine(&quot;<br>Linked CredentialCache to your request.&quot;);\n        // Send the request and wait for response.\n        WebResponse myWebResponse = myWebRequest.GetResponse(); \n\n        // Process response here.\n\n        Console.Write(&quot;Response received successfully.&quot;);\n        // Call &#39;Remove&#39; method to dispose credentials for current Uri as not required further.\n        myCredentialCache.Remove(myWebRequest.RequestUri,&quot;Basic&quot;);\n        Console.WriteLine(&quot;<br>Your credentials have now been removed from the program&#39;s CredentialCache&quot;);\n        myWebResponse.Close();        \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_CredentialCache_Remove_System_String_System_Int32_System_String_\">\r\n    \r\n            <a id=\"System_Net_CredentialCache_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(String,Int32,String)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance from the cache if it is associated with the specified host, port, and authentication protocol.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove (string host, int port, string authenticationType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>host</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that identifies the host computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that specifies the port to connect to on <code>host</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>authenticationType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that identifies the authentication scheme used when connecting to <code>host</code>. See Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method removes a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> instance from the <a class=\"xref\" href=\"system.net.credentialcache\" data-linktype=\"relative-path\">CredentialCache</a> if the specified host, port, and authentication protocol match those associated with the credential. Multiple calls to the Remove method for the same <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> have no effect.  </p>\n<p> If <code>authType</code> is <code>null</code> or <code>uriPrefix</code> is <code>null</code>, or no matching credential is found in the cache, this method does nothing.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.CredentialCache.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.CredentialCache.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.CredentialCache\">\r\n<meta name=\"APIName\" content=\"System.Net.CredentialCache..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.CredentialCache.Add\">\r\n<meta name=\"APIName\" content=\"System.Net.CredentialCache.DefaultCredentials\">\r\n<meta name=\"APIName\" content=\"System.Net.CredentialCache.DefaultNetworkCredentials\">\r\n<meta name=\"APIName\" content=\"System.Net.CredentialCache.GetCredential\">\r\n<meta name=\"APIName\" content=\"System.Net.CredentialCache.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Net.CredentialCache.Remove\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4c549a36-116d-73b4-2315-b72dbcc6bd95\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides storage for multiple credentials.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.CredentialCache\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.CredentialCache.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.CredentialCache.yml","open_to_public_contributors":true,"api_name":["System.Net.CredentialCache","System.Net.CredentialCache..ctor","System.Net.CredentialCache.Add","System.Net.CredentialCache.DefaultCredentials","System.Net.CredentialCache.DefaultNetworkCredentials","System.Net.CredentialCache.GetCredential","System.Net.CredentialCache.GetEnumerator","System.Net.CredentialCache.Remove"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.CredentialCache","System::Net::CredentialCache","System.Net.CredentialCache.#ctor","System::Net::CredentialCache::#ctor","System.Net.CredentialCache.Add","System::Net::CredentialCache::Add","System.Net.CredentialCache.DefaultCredentials","System::Net::CredentialCache::DefaultCredentials","System.Net.CredentialCache.DefaultNetworkCredentials","System::Net::CredentialCache::DefaultNetworkCredentials","System.Net.CredentialCache.GetCredential","System::Net::CredentialCache::GetCredential","System.Net.CredentialCache.GetEnumerator","System::Net::CredentialCache::GetEnumerator","System.Net.CredentialCache.Remove","System::Net::CredentialCache::Remove"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4c549a36-116d-73b4-2315-b72dbcc6bd95","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/CredentialCache.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CredentialCache class | Microsoft Docs","_op_ogTitle":"CredentialCache class","description":"Provides storage for multiple credentials.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.CredentialCache","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.credentialcache","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.credentialcache","fileRelativePath":"System.Net.CredentialCache.html"},"themesRelativePathToOutputRoot":"_themes/"}