{"content":"    \r\n    <h1 id=\"System_Globalization_SortKey\">\r\n      <span class=\"lang-csharp\">SortKey</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the result of mapping a string to its sort key.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class SortKey</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SortKey</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A culture-sensitive comparison of two strings depends on each character in the strings having several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key serves as the repository of these weights for a particular string.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_GetSortKey_\" data-linktype=\"relative-path\">GetSortKey</a> method returns an instance of the SortKey class that reflects the culture-sensitive mapping of characters in a specified string. The value of a SortKey object is its key data, which is returned by the <a class=\"xref\" href=\"system.globalization.sortkey#System_Globalization_SortKey_KeyData_\" data-linktype=\"relative-path\">KeyData</a> property. This key data consists of a series of bytes that encode the string, culture-specific sorting rules, and user-specified comparison options. A comparison using sort keys consists of a bitwise comparison of the corresponding key data in each sort key.  For example, if you create a sort key by calling the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_GetSortKey_System_String_System_Globalization_CompareOptions_\" data-linktype=\"relative-path\">GetSortKey(String,CompareOptions)</a> method with a value of <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">System.Globalization.CompareOptions</a>, a string comparison operation that uses the sort key is case-insensitive.  </p>\n<p> After you create a sort key for a string, you compare sort keys by calling the static <a class=\"xref\" href=\"system.globalization.sortkey#System_Globalization_SortKey_Compare_\" data-linktype=\"relative-path\">Compare</a> method. This method performs a simple byte-by-byte comparison, so it is much faster than the <a class=\"xref\" href=\"system.string#System_String_Compare_\" data-linktype=\"relative-path\">Compare</a> or <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method.  </p>\n<h2 id=\"performance-considerations\">Performance considerations</h2>\n<p> When performing a string comparison, the <a class=\"xref\" href=\"system.globalization.sortkey#System_Globalization_SortKey_Compare_\" data-linktype=\"relative-path\">Compare</a> and <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> methods yield the same results, but they target different scenarios.  </p>\n<p> At a high level, the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method generates the sort key for each string, performs the comparison, and then discards the sort key and returns the result of the comparison. However, the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method actually doesn&#39;t generate an entire sort key to perform the comparison. Instead, the method generates the key data for each text element (that is, base character, surrogate pair, or combining character sequence) in each string. The method then compares the key data for the corresponding text elements. The operation terminates as soon as the ultimate result of the comparison is determined. Sort key information is computed, but no SortKey object is created. This strategy is economical in terms of performance if both strings are compared once, but becomes expensive if the same strings are compared many times.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.sortkey#System_Globalization_SortKey_Compare_\" data-linktype=\"relative-path\">Compare</a> method requires generation of a SortKey object for each string before performing the comparison. This strategy is expensive in terms of performance for the first comparison because of the time and memory invested to generate the SortKey objects. However, it becomes economical if the same sort keys are compared many times.  </p>\n<p> For example, suppose you write an application that searches a database table for the row in which the string-based index column matches a specified search string. The table contains thousands of rows, and comparing the search string to the index in each row will take a long time. Therefore, when the application stores a row and its index column, it also generates and stores the sort key for the index in a column dedicated to improving search performance. When the application searches for a target row, it compares the sort key for the search string to the sort key for the index string, instead of comparing the search string to the index string.  </p>\n<h2 id=\"security-considerations\">Security considerations</h2>\n<p> The <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_GetSortKey_System_String_System_Globalization_CompareOptions_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.GetSortKey(String,CompareOptions)</a> method returns a SortKey object with the value based on a specified string and <a class=\"xref\" href=\"system.globalization.compareoptions\" data-linktype=\"relative-path\">CompareOptions</a> value, and the culture associated with the underlying <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object. If a security decision depends on a string comparison or case change, you should use the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_GetSortKey_System_String_System_Globalization_CompareOptions_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.GetSortKey(String,CompareOptions)</a> method of the invariant culture to ensure that the behavior of the operation is consistent, regardless of the culture settings of the operating system.  </p>\n<p> Use the following steps to obtain a sort key:  </p>\n<ol>\n<li><p>Retrieve the invariant culture from the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture\" data-linktype=\"relative-path\">System.Globalization.CultureInfo.InvariantCulture</a> property.  </p>\n</li>\n<li><p>Retrieve a <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object for the invariant culture from the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CompareInfo_\" data-linktype=\"relative-path\">CompareInfo</a> property.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_GetSortKey_System_String_System_Globalization_CompareOptions_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.GetSortKey(String,CompareOptions)</a> method.  </p>\n<p>Working with the value of a SortKey object is equivalent to calling the Windows <code>LCMapString</code> method with the LCMAP_SORTKEY value specified. However, for the SortKey object, the sort keys for English characters precede the sort keys for Korean characters.  </p>\n<p>SortKey objects can be serialized, but only so that they can cross <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> objects. If an application serializes a SortKey object, the application must regenerate all the sort keys when there is a new version of the .NET Framework.  </p>\n<p>For more information about sort keys, see Unicode Technical Standard #10, &quot;Unicode Collation Algorithm&quot; on the <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Consortium website</a>.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_SortKey_KeyData\" data-linktype=\"self-bookmark\">KeyData</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the byte array representing the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_SortKey_OriginalString\" data-linktype=\"self-bookmark\">OriginalString</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the original string used to create the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_SortKey_Compare_System_Globalization_SortKey_System_Globalization_SortKey_\" data-linktype=\"self-bookmark\">Compare(SortKey,SortKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two sort keys.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_SortKey_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object is equal to the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_SortKey_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object that is suitable for hashing algorithms and data structures such as a hash table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_SortKey_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_SortKey_KeyData\">\r\n    \r\n            <a id=\"System_Globalization_SortKey_KeyData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyData</div>        \r\n          </div>\r\n    \r\n            <p>Gets the byte array representing the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] KeyData { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array representing the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about the use of the data returned by the KeyData property in comparing strings, see the <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  </p>\n<pre><code class=\"lang-vb\" name=\"sys.glob.sortkey.tostring#1\">&#39; This code example demonstrates the \n&#39; GetSortKey() and ToString() methods, and the \n&#39; OriginalString and KeyData properties of the \n&#39; System.Globalization.SortKey class.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim cmpi As CompareInfo = Nothing\n        Dim sk1 As SortKey = Nothing\n        Dim sk2 As SortKey = Nothing\n        Dim s As String = &quot;ABC&quot;\n        Dim ignoreCase As String = &quot;Ignore case&quot;\n        Dim useCase As String =    &quot;Use case   &quot;\n        \n        &#39; Get a CompareInfo object for the English-Great Britain culture.\n        cmpi = CompareInfo.GetCompareInfo(&quot;en-GB&quot;)\n        \n        &#39; Get a sort key that ignores case for the specified string.\n        sk1 = cmpi.GetSortKey(s, CompareOptions.IgnoreCase)\n        &#39; Get a sort key with no compare option for the specified string.\n        sk2 = cmpi.GetSortKey(s)\n        \n        &#39; Display the original string.\n        Console.WriteLine(&quot;Original string: &quot;&quot;{0}&quot;&quot;&quot;, sk1.OriginalString)\n        Console.WriteLine()\n        \n        &#39; Display the the string equivalent of the two sort keys.\n        Console.WriteLine(&quot;CompareInfo (culture) name: {0}&quot;, cmpi.Name)\n        Console.WriteLine(&quot;ToString - {0}: &quot;&quot;{1}&quot;&quot;&quot;, ignoreCase, sk1.ToString())\n        Console.WriteLine(&quot;ToString - {0}: &quot;&quot;{1}&quot;&quot;&quot;, useCase, sk2.ToString())\n        Console.WriteLine()\n        \n        &#39; Display the key data of the two sort keys.\n        DisplayKeyData(sk1, ignoreCase)\n        DisplayKeyData(sk2, useCase)\n    End Sub &#39;Main\n    \n    Public Shared Sub DisplayKeyData(ByVal sk As SortKey, ByVal title As String) \n        Console.Write(&quot;Key Data - {0}: &quot;, title)\n        Dim keyDatum As UInteger\n        For Each keyDatum In sk.KeyData\n            Console.Write(&quot;0x{0} &quot;, CUInt(keyDatum))\n        Next keyDatum\n        Console.WriteLine()\n    End Sub &#39;DisplayKeyData\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Original string: &quot;ABC&quot;\n&#39;\n&#39;CompareInfo (culture) name: en-GB\n&#39;ToString - Ignore case: &quot;SortKey - 2057, IgnoreCase, ABC&quot;\n&#39;ToString - Use case   : &quot;SortKey - 2057, None, ABC&quot;\n&#39;\n&#39;Key Data - Ignore case: 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x1 0x1 0x0\n&#39;Key Data - Use case   : 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x18 0x18 0x18 0x1 0x1 0x0\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"sys.glob.sortkey.tostring#1\">// This code example demonstrates the \n// GetSortKey() and ToString() methods, and the \n// OriginalString and KeyData properties of the \n// System.Globalization.SortKey class.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    CompareInfo cmpi = null;\n    SortKey sk1 = null;\n    SortKey sk2 = null;\n    string s = &quot;ABC&quot;;\n    string ignoreCase = &quot;Ignore case&quot;;\n    string useCase    = &quot;Use case   &quot;;\n\n// Get a CompareInfo object for the English-Great Britain culture.\n    cmpi = CompareInfo.GetCompareInfo(&quot;en-GB&quot;);\n\n// Get a sort key that ignores case for the specified string.\n    sk1 = cmpi.GetSortKey(s, CompareOptions.IgnoreCase);\n// Get a sort key with no compare option for the specified string.\n    sk2 = cmpi.GetSortKey(s);\n\n// Display the original string.\n    Console.WriteLine(&quot;Original string: \\&quot;{0}\\&quot;&quot;, sk1.OriginalString);\n    Console.WriteLine();\n\n// Display the the string equivalent of the two sort keys.\n    Console.WriteLine(&quot;CompareInfo (culture) name: {0}&quot;, cmpi.Name);\n    Console.WriteLine(&quot;ToString - {0}: \\&quot;{1}\\&quot;&quot;, ignoreCase, sk1.ToString());\n    Console.WriteLine(&quot;ToString - {0}: \\&quot;{1}\\&quot;&quot;, useCase, sk2.ToString());\n    Console.WriteLine();\n\n// Display the key data of the two sort keys.\n    DisplayKeyData(sk1, ignoreCase);\n    DisplayKeyData(sk2, useCase);\n    }\n\n    public static void DisplayKeyData(SortKey sk, string title)\n    {\n    Console.Write(&quot;Key Data - {0}: &quot;, title);\n    foreach (byte keyDatum in sk.KeyData)\n        Console.Write(&quot;0x{0} &quot;, (uint)keyDatum);\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nOriginal string: &quot;ABC&quot;\n\nCompareInfo (culture) name: en-GB\nToString - Ignore case: &quot;SortKey - 2057, IgnoreCase, ABC&quot;\nToString - Use case   : &quot;SortKey - 2057, None, ABC&quot;\n\nKey Data - Ignore case: 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x1 0x1 0x0\nKey Data - Use case   : 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x18 0x18 0x18 0x1 0x1 0x0\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_SortKey_OriginalString\">\r\n    \r\n            <a id=\"System_Globalization_SortKey_OriginalString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OriginalString</div>        \r\n          </div>\r\n    \r\n            <p>Gets the original string used to create the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string OriginalString { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The original string used to create the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  </p>\n<pre><code class=\"lang-vb\" name=\"sys.glob.sortkey.tostring#1\">&#39; This code example demonstrates the \n&#39; GetSortKey() and ToString() methods, and the \n&#39; OriginalString and KeyData properties of the \n&#39; System.Globalization.SortKey class.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim cmpi As CompareInfo = Nothing\n        Dim sk1 As SortKey = Nothing\n        Dim sk2 As SortKey = Nothing\n        Dim s As String = &quot;ABC&quot;\n        Dim ignoreCase As String = &quot;Ignore case&quot;\n        Dim useCase As String =    &quot;Use case   &quot;\n        \n        &#39; Get a CompareInfo object for the English-Great Britain culture.\n        cmpi = CompareInfo.GetCompareInfo(&quot;en-GB&quot;)\n        \n        &#39; Get a sort key that ignores case for the specified string.\n        sk1 = cmpi.GetSortKey(s, CompareOptions.IgnoreCase)\n        &#39; Get a sort key with no compare option for the specified string.\n        sk2 = cmpi.GetSortKey(s)\n        \n        &#39; Display the original string.\n        Console.WriteLine(&quot;Original string: &quot;&quot;{0}&quot;&quot;&quot;, sk1.OriginalString)\n        Console.WriteLine()\n        \n        &#39; Display the the string equivalent of the two sort keys.\n        Console.WriteLine(&quot;CompareInfo (culture) name: {0}&quot;, cmpi.Name)\n        Console.WriteLine(&quot;ToString - {0}: &quot;&quot;{1}&quot;&quot;&quot;, ignoreCase, sk1.ToString())\n        Console.WriteLine(&quot;ToString - {0}: &quot;&quot;{1}&quot;&quot;&quot;, useCase, sk2.ToString())\n        Console.WriteLine()\n        \n        &#39; Display the key data of the two sort keys.\n        DisplayKeyData(sk1, ignoreCase)\n        DisplayKeyData(sk2, useCase)\n    End Sub &#39;Main\n    \n    Public Shared Sub DisplayKeyData(ByVal sk As SortKey, ByVal title As String) \n        Console.Write(&quot;Key Data - {0}: &quot;, title)\n        Dim keyDatum As UInteger\n        For Each keyDatum In sk.KeyData\n            Console.Write(&quot;0x{0} &quot;, CUInt(keyDatum))\n        Next keyDatum\n        Console.WriteLine()\n    End Sub &#39;DisplayKeyData\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Original string: &quot;ABC&quot;\n&#39;\n&#39;CompareInfo (culture) name: en-GB\n&#39;ToString - Ignore case: &quot;SortKey - 2057, IgnoreCase, ABC&quot;\n&#39;ToString - Use case   : &quot;SortKey - 2057, None, ABC&quot;\n&#39;\n&#39;Key Data - Ignore case: 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x1 0x1 0x0\n&#39;Key Data - Use case   : 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x18 0x18 0x18 0x1 0x1 0x0\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"sys.glob.sortkey.tostring#1\">// This code example demonstrates the \n// GetSortKey() and ToString() methods, and the \n// OriginalString and KeyData properties of the \n// System.Globalization.SortKey class.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    CompareInfo cmpi = null;\n    SortKey sk1 = null;\n    SortKey sk2 = null;\n    string s = &quot;ABC&quot;;\n    string ignoreCase = &quot;Ignore case&quot;;\n    string useCase    = &quot;Use case   &quot;;\n\n// Get a CompareInfo object for the English-Great Britain culture.\n    cmpi = CompareInfo.GetCompareInfo(&quot;en-GB&quot;);\n\n// Get a sort key that ignores case for the specified string.\n    sk1 = cmpi.GetSortKey(s, CompareOptions.IgnoreCase);\n// Get a sort key with no compare option for the specified string.\n    sk2 = cmpi.GetSortKey(s);\n\n// Display the original string.\n    Console.WriteLine(&quot;Original string: \\&quot;{0}\\&quot;&quot;, sk1.OriginalString);\n    Console.WriteLine();\n\n// Display the the string equivalent of the two sort keys.\n    Console.WriteLine(&quot;CompareInfo (culture) name: {0}&quot;, cmpi.Name);\n    Console.WriteLine(&quot;ToString - {0}: \\&quot;{1}\\&quot;&quot;, ignoreCase, sk1.ToString());\n    Console.WriteLine(&quot;ToString - {0}: \\&quot;{1}\\&quot;&quot;, useCase, sk2.ToString());\n    Console.WriteLine();\n\n// Display the key data of the two sort keys.\n    DisplayKeyData(sk1, ignoreCase);\n    DisplayKeyData(sk2, useCase);\n    }\n\n    public static void DisplayKeyData(SortKey sk, string title)\n    {\n    Console.Write(&quot;Key Data - {0}: &quot;, title);\n    foreach (byte keyDatum in sk.KeyData)\n        Console.Write(&quot;0x{0} &quot;, (uint)keyDatum);\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nOriginal string: &quot;ABC&quot;\n\nCompareInfo (culture) name: en-GB\nToString - Ignore case: &quot;SortKey - 2057, IgnoreCase, ABC&quot;\nToString - Use case   : &quot;SortKey - 2057, None, ABC&quot;\n\nKey Data - Ignore case: 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x1 0x1 0x0\nKey Data - Use case   : 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x18 0x18 0x18 0x1 0x1 0x0\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_SortKey_Compare_System_Globalization_SortKey_System_Globalization_SortKey_\">\r\n    \r\n            <a id=\"System_Globalization_SortKey_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(SortKey,SortKey)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two sort keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sortkey1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first sort key to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sortkey2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second sort key to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relationship between <code>sortkey1</code> and <code>sortkey2</code>.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>sortkey1</code> is less than <code>sortkey2</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>sortkey1</code> is equal to <code>sortkey2</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>sortkey1</code> is greater than <code>sortkey2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sortkey1</code> or <code>sortkey2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Compare method compares the <a class=\"xref\" href=\"system.globalization.sortkey#System_Globalization_SortKey_KeyData_\" data-linktype=\"relative-path\">KeyData</a> properties of the <code>sortkey1</code> and <code>sortkey2</code> parameters. The method yields the same results as the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method.  </p>\n<p> For more information about the Compare method and the comparison of sort keys, see the <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares two strings using the Compare method and the equivalent <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_System_String_System_String_System_Globalization_CompareOptions_\" data-linktype=\"relative-path\">System.Globalization.CompareInfo.Compare(String,String,CompareOptions)</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.sortkey.compare#1\">// This code example demonstrates the CompareInfo.Compare() and\n// SortKey.Compare() methods.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string lowerABC = &quot;abc&quot;;\n    string upperABC = &quot;ABC&quot;;\n    int result = 0;\n\n// Create a CompareInfo object for the en-US culture.\n    Console.WriteLine(&quot;<br>Create a CompareInfo object for the en-US culture...<br>&quot;);\n    CompareInfo cmpi = CompareInfo.GetCompareInfo(&quot;en-US&quot;);\n// Alternatively:\n//  CompareInfo cmpi = new CultureInfo(&quot;en-US&quot;).CompareInfo;\n\n// Create sort keys for lowercase and uppercase &quot;abc&quot;, the en-US culture, and \n// ignore case. \n    SortKey sk1LowerIgnCase = cmpi.GetSortKey(lowerABC, CompareOptions.IgnoreCase);\n    SortKey sk2UpperIgnCase = cmpi.GetSortKey(upperABC, CompareOptions.IgnoreCase);\n\n// Create sort keys for lowercase and uppercase &quot;abc&quot;, the en-US culture, and \n// use case. \n    SortKey sk1LowerUseCase = cmpi.GetSortKey(lowerABC, CompareOptions.None);\n    SortKey sk2UpperUseCase = cmpi.GetSortKey(upperABC, CompareOptions.None);\n\n// Compare lowercase and uppercase &quot;abc&quot;, ignoring case and using CompareInfo.\n    result = cmpi.Compare(lowerABC, upperABC, CompareOptions.IgnoreCase);\n    Display(result, &quot;CompareInfo, Ignore case&quot;, lowerABC, upperABC);\n// Compare lowercase and uppercase &quot;abc&quot;, ignoring case and using SortKey.\n    result = SortKey.Compare(sk1LowerIgnCase, sk2UpperIgnCase);\n    Display(result, &quot;SortKey, Ignore case&quot;, lowerABC, upperABC);\n    Console.WriteLine();\n\n// Compare lowercase and uppercase &quot;abc&quot;, using case and using CompareInfo.\n    result = cmpi.Compare(lowerABC, upperABC, CompareOptions.None);\n    Display(result, &quot;CompareInfo, Use case&quot;, lowerABC, upperABC);\n// Compare lowercase and uppercase &quot;abc&quot;, using case and using SortKey.\n    result = SortKey.Compare(sk1LowerUseCase, sk2UpperUseCase);\n    Display(result, &quot;SortKey, Use case&quot;, lowerABC, upperABC);\n    }\n\n// Display the results of a comparison.\n    private static void Display(int compareResult, string title, \n                                string lower, string upper)\n    {\n    string lessThan    = &quot;less than &quot;;\n    string equalTo     = &quot;equal to &quot;;\n    string greaterThan = &quot;greater than &quot;;\n    string resultPhrase = null;\n    string format = &quot;{0}:<br>    \\&quot;{1}\\&quot; is {2}\\&quot;{3}\\&quot;.&quot;;\n\n    if      (compareResult &lt; 0) resultPhrase = lessThan;\n    else if (compareResult &gt; 0) resultPhrase = greaterThan;\n    else                        resultPhrase = equalTo;\n    Console.WriteLine(format, title, lower, resultPhrase, upper);\n    }\n}\n/*\nThis code example produces the following results:\n\nCreate a CompareInfo object for the en-US culture...\n\nCompareInfo, Ignore case:\n    &quot;abc&quot; is equal to &quot;ABC&quot;.\nSortKey, Ignore case:\n    &quot;abc&quot; is equal to &quot;ABC&quot;.\n\nCompareInfo, Use case:\n    &quot;abc&quot; is less than &quot;ABC&quot;.\nSortKey, Use case:\n    &quot;abc&quot; is less than &quot;ABC&quot;.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.sortkey.compare#1\">&#39; This code example demonstrates the CompareInfo.Compare() and\n&#39; SortKey.Compare() methods.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim lowerABC As String = &quot;abc&quot;\n        Dim upperABC As String = &quot;ABC&quot;\n        Dim result As Integer = 0\n        \n    &#39; Create a CompareInfo object for the en-US culture.\n        Console.WriteLine(vbCrLf &amp; _\n                          &quot;Create a CompareInfo object for the en-US culture...&quot; &amp; _\n                          vbCrLf)\n        Dim cmpi As CompareInfo = CompareInfo.GetCompareInfo(&quot;en-US&quot;)\n    &#39; Alternatively:\n    &#39;   Dim cmpi As CompareInfo = New CultureInfo(&quot;en-US&quot;).CompareInfo\n\n    &#39; Create sort keys for lowercase and uppercase &quot;abc&quot;, the en-US culture, and \n    &#39; ignore case. \n        Dim sk1LowerIgnCase As SortKey = cmpi.GetSortKey(lowerABC, CompareOptions.IgnoreCase)\n        Dim sk2UpperIgnCase As SortKey = cmpi.GetSortKey(upperABC, CompareOptions.IgnoreCase)\n        \n    &#39; Create sort keys for lowercase and uppercase &quot;abc&quot;, the en-US culture, and \n    &#39; use case. \n        Dim sk1LowerUseCase As SortKey = cmpi.GetSortKey(lowerABC, CompareOptions.None)\n        Dim sk2UpperUseCase As SortKey = cmpi.GetSortKey(upperABC, CompareOptions.None)\n        \n    &#39; Compare lowercase and uppercase &quot;abc&quot;, ignoring case and using CompareInfo.\n        result = cmpi.Compare(lowerABC, upperABC, CompareOptions.IgnoreCase)\n        Display(result, &quot;CompareInfo, Ignore case&quot;, lowerABC, upperABC)\n    &#39; Compare lowercase and uppercase &quot;abc&quot;, ignoring case and using SortKey.\n        result = SortKey.Compare(sk1LowerIgnCase, sk2UpperIgnCase)\n        Display(result, &quot;SortKey, Ignore case&quot;, lowerABC, upperABC)\n        Console.WriteLine()\n        \n    &#39; Compare lowercase and uppercase &quot;abc&quot;, using case and using CompareInfo.\n        result = cmpi.Compare(lowerABC, upperABC, CompareOptions.None)\n        Display(result, &quot;CompareInfo, Use case&quot;, lowerABC, upperABC)\n    &#39; Compare lowercase and uppercase &quot;abc&quot;, using case and using SortKey.\n        result = SortKey.Compare(sk1LowerUseCase, sk2UpperUseCase)\n        Display(result, &quot;SortKey, Use case&quot;, lowerABC, upperABC)\n    End Sub &#39;Main\n    \n    &#39; Display the results of a comparison.\n    Private Shared Sub Display(ByVal compareResult As Integer, _\n                               ByVal title As String, _\n                               ByVal lower As String, _\n                               ByVal upper As String) \n        Dim lessThan As String = &quot;less than &quot;\n        Dim equalTo As String = &quot;equal to &quot;\n        Dim greaterThan As String = &quot;greater than &quot;\n        Dim resultPhrase As String = Nothing\n        Dim format As String = &quot;{0}:&quot; &amp; vbCrLf &amp; &quot;    &quot;&quot;{1}&quot;&quot; is {2}&quot;&quot;{3}&quot;&quot;.&quot;\n        \n        If compareResult &lt; 0 Then\n            resultPhrase = lessThan\n        ElseIf compareResult &gt; 0 Then\n            resultPhrase = greaterThan\n        Else\n            resultPhrase = equalTo\n        End If\n        Console.WriteLine(format, title, lower, resultPhrase, upper)\n    End Sub &#39;Display\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Create a CompareInfo object for the en-US culture...\n&#39;\n&#39;CompareInfo, Ignore case:\n&#39;    &quot;abc&quot; is equal to &quot;ABC&quot;.\n&#39;SortKey, Ignore case:\n&#39;    &quot;abc&quot; is equal to &quot;ABC&quot;.\n&#39;\n&#39;CompareInfo, Use case:\n&#39;    &quot;abc&quot; is less than &quot;ABC&quot;.\n&#39;SortKey, Use case:\n&#39;    &quot;abc&quot; is less than &quot;ABC&quot;.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_SortKey_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Globalization_SortKey_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object is equal to the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter is equal to the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> objects are considered equal if their <a class=\"xref\" href=\"system.globalization.sortkey#System_Globalization_SortKey_KeyData_\" data-linktype=\"relative-path\">KeyData</a> properties are equal.  </p>\n<p> This method overrides <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the results of Equals when compared with different <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> objects.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.SortKey.Equals#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesSortKey\n\n   Public Shared Sub Main()\n\n      &#39; Creates two identical en-US cultures and one de-DE culture.\n      Dim myComp_enUS1 As CompareInfo = New CultureInfo(&quot;en-US&quot;, False).CompareInfo\n      Dim myComp_enUS2 As CompareInfo = New CultureInfo(&quot;en-US&quot;, False).CompareInfo\n      Dim myComp_deDE As CompareInfo = New CultureInfo(&quot;de-DE&quot;, False).CompareInfo\n\n      &#39; Creates the base SortKey to compare with all the others.\n      Dim mySK1 As SortKey = myComp_enUS1.GetSortKey(&quot;cant&quot;, CompareOptions.StringSort)\n      &#39; Creates a SortKey that is derived exactly the same way as the base SortKey.\n      Dim mySK2 As SortKey = myComp_enUS1.GetSortKey(&quot;cant&quot;, CompareOptions.StringSort)\n      &#39; Creates a SortKey that uses word sort, which is the default sort.\n      Dim mySK3 As SortKey = myComp_enUS1.GetSortKey(&quot;cant&quot;)\n      &#39; Creates a SortKey for a different string.\n      Dim mySK4 As SortKey = myComp_enUS1.GetSortKey(&quot;can&#39;t&quot;, CompareOptions.StringSort)\n      &#39; Creates a SortKey from a different CompareInfo with the same culture.\n      Dim mySK5 As SortKey = myComp_enUS2.GetSortKey(&quot;cant&quot;, CompareOptions.StringSort)\n      &#39; Creates a SortKey from a different CompareInfo with a different culture.\n      Dim mySK6 As SortKey = myComp_deDE.GetSortKey(&quot;cant&quot;, CompareOptions.StringSort)\n\n      &#39; Compares the base SortKey with itself.\n      Console.WriteLine(&quot;Comparing the base SortKey with itself: {0}&quot;, mySK1.Equals(mySK1))\n      Console.WriteLine()\n\n      &#39; Prints the header for the table.\n      Console.WriteLine(&quot;CompareInfo   Culture      OriginalString   CompareOptions   Equals()&quot;)\n\n      &#39; Compares the base SortKey with a SortKey that is\n      &#39;    created from the same CompareInfo with the same string and the same CompareOptions.\n      Console.WriteLine(&quot;same          same         same             same             {0}&quot;, mySK1.Equals(mySK2))\n\n      &#39; Compares the base SortKey with a SortKey that is \n      &#39;    created from the same CompareInfo with the same string but with different CompareOptions.\n      Console.WriteLine(&quot;same          same         same             different        {0}&quot;, mySK1.Equals(mySK3))\n\n      &#39; Compares the base SortKey with a SortKey that is \n      &#39;    created from the same CompareInfo with the different string \n      &#39;    but with the same CompareOptions.\n      Console.WriteLine(&quot;same          same         different        same             {0}&quot;, mySK1.Equals(mySK4))\n\n      &#39; Compares the base SortKey with a SortKey that is \n      &#39;    created from a different CompareInfo (same culture) \n      &#39;    with the same string and the same CompareOptions.\n      Console.WriteLine(&quot;different     same         same             same             {0}&quot;, mySK1.Equals(mySK5))\n\n      &#39; Compares the base SortKey with a SortKey that is \n      &#39;    created from a different CompareInfo (different culture) \n      &#39;    with the same string and the same CompareOptions.\n      Console.WriteLine(&quot;different     different    same             same             {0}&quot;, mySK1.Equals(mySK6))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesSortKey\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Comparing the base SortKey with itself: True\n&#39;\n&#39;CompareInfo   Culture      OriginalString   CompareOptions   Equals()\n&#39;same          same         same             same             True\n&#39;same          same         same             different        False\n&#39;same          same         different        same             False\n&#39;different     same         same             same             True\n&#39;different     different    same             same             False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.SortKey.Equals#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates two identical en-US cultures and one de-DE culture.\n   CultureInfo^ MyCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   CompareInfo^ myComp_enUS1 = MyCI-&gt;CompareInfo;\n   MyCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   CompareInfo^ myComp_enUS2 = MyCI-&gt;CompareInfo;\n   MyCI = gcnew CultureInfo( &quot;de-DE&quot;,false );\n   CompareInfo^ myComp_deDE = MyCI-&gt;CompareInfo;\n   \n   // Creates the base SortKey to compare with all the others.\n   SortKey^ mySK1 = myComp_enUS1-&gt;GetSortKey( &quot;cant&quot;, CompareOptions::StringSort );\n   \n   // Creates a SortKey that is derived exactly the same way as the base SortKey.\n   SortKey^ mySK2 = myComp_enUS1-&gt;GetSortKey( &quot;cant&quot;, CompareOptions::StringSort );\n   \n   // Creates a SortKey that uses word sort, which is the default sort.\n   SortKey^ mySK3 = myComp_enUS1-&gt;GetSortKey( &quot;cant&quot; );\n   \n   // Creates a SortKey for a different String*.\n   SortKey^ mySK4 = myComp_enUS1-&gt;GetSortKey( &quot;can&#39;t&quot;, CompareOptions::StringSort );\n   \n   // Creates a SortKey from a different CompareInfo with the same culture.\n   SortKey^ mySK5 = myComp_enUS2-&gt;GetSortKey( &quot;cant&quot;, CompareOptions::StringSort );\n   \n   // Creates a SortKey from a different CompareInfo with a different culture.\n   SortKey^ mySK6 = myComp_deDE-&gt;GetSortKey( &quot;cant&quot;, CompareOptions::StringSort );\n   \n   // Compares the base SortKey with itself.\n   Console::WriteLine( &quot;Comparing the base SortKey with itself: {0}&quot;, mySK1-&gt;Equals( mySK1 ) );\n   Console::WriteLine();\n   \n   // Prints the header for the table.\n   Console::WriteLine( &quot;CompareInfo   Culture      OriginalString   CompareOptions   Equals()&quot; );\n   \n   // Compares the base SortKey with a SortKey that is\n   //    created from the same CompareInfo with the same String* and the same CompareOptions.\n   Console::WriteLine( &quot;same          same         same             same {0}&quot;, mySK1-&gt;Equals( mySK2 ) );\n   \n   // Compares the base SortKey with a SortKey that is \n   //    created from the same CompareInfo with the same String* but with different CompareOptions.\n   Console::WriteLine( &quot;same          same         same             different {0}&quot;, mySK1-&gt;Equals( mySK3 ) );\n   \n   // Compares the base SortKey with a SortKey that is \n   //    created from the same CompareInfo with the different String* \n   //    but with the same CompareOptions.\n   Console::WriteLine( &quot;same          same         different        same {0}&quot;, mySK1-&gt;Equals( mySK4 ) );\n   \n   // Compares the base SortKey with a SortKey that is \n   //    created from a different CompareInfo (same culture) \n   //    with the same String* and the same CompareOptions.\n   Console::WriteLine( &quot;different     same         same             same {0}&quot;, mySK1-&gt;Equals( mySK5 ) );\n   \n   // Compares the base SortKey with a SortKey that is \n   //    created from a different CompareInfo (different culture) \n   //    with the same String* and the same CompareOptions.\n   Console::WriteLine( &quot;different     different    same             same {0}&quot;, mySK1-&gt;Equals( mySK6 ) );\n}\n\n/*\nThis code produces the following output.\n\nComparing the base SortKey with itself: True\n\nCompareInfo   Culture      OriginalString   CompareOptions   Equals()\nsame          same         same             same             True\nsame          same         same             different        False\nsame          same         different        same             False\ndifferent     same         same             same             True\ndifferent     different    same             same             False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.SortKey.Equals#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesSortKey  {\n\n   public static void Main()  {\n\n      // Creates two identical en-US cultures and one de-DE culture.\n      CompareInfo myComp_enUS1 = new CultureInfo(&quot;en-US&quot;,false).CompareInfo;\n      CompareInfo myComp_enUS2 = new CultureInfo(&quot;en-US&quot;,false).CompareInfo;\n      CompareInfo myComp_deDE = new CultureInfo(&quot;de-DE&quot;,false).CompareInfo;\n\n      // Creates the base SortKey to compare with all the others.\n      SortKey mySK1 = myComp_enUS1.GetSortKey( &quot;cant&quot;, CompareOptions.StringSort );\n      // Creates a SortKey that is derived exactly the same way as the base SortKey.\n      SortKey mySK2 = myComp_enUS1.GetSortKey( &quot;cant&quot;, CompareOptions.StringSort );\n      // Creates a SortKey that uses word sort, which is the default sort.\n      SortKey mySK3 = myComp_enUS1.GetSortKey( &quot;cant&quot; );\n      // Creates a SortKey for a different string.\n      SortKey mySK4 = myComp_enUS1.GetSortKey( &quot;can&#39;t&quot;, CompareOptions.StringSort );\n      // Creates a SortKey from a different CompareInfo with the same culture.\n      SortKey mySK5 = myComp_enUS2.GetSortKey( &quot;cant&quot;, CompareOptions.StringSort );\n      // Creates a SortKey from a different CompareInfo with a different culture.\n      SortKey mySK6 = myComp_deDE.GetSortKey( &quot;cant&quot;, CompareOptions.StringSort );\n\n      // Compares the base SortKey with itself.\n      Console.WriteLine( &quot;Comparing the base SortKey with itself: {0}&quot;, mySK1.Equals( mySK1 ) );\n      Console.WriteLine();\n\n      // Prints the header for the table.\n      Console.WriteLine( &quot;CompareInfo   Culture      OriginalString   CompareOptions   Equals()&quot; );\n\n      // Compares the base SortKey with a SortKey that is\n      //    created from the same CompareInfo with the same string and the same CompareOptions.\n      Console.WriteLine( &quot;same          same         same             same             {0}&quot;, mySK1.Equals( mySK2 ) );\n\n      // Compares the base SortKey with a SortKey that is \n      //    created from the same CompareInfo with the same string but with different CompareOptions.\n      Console.WriteLine( &quot;same          same         same             different        {0}&quot;, mySK1.Equals( mySK3 ) );\n      \n      // Compares the base SortKey with a SortKey that is \n      //    created from the same CompareInfo with the different string \n      //    but with the same CompareOptions.\n      Console.WriteLine( &quot;same          same         different        same             {0}&quot;, mySK1.Equals( mySK4 ) );\n\n      // Compares the base SortKey with a SortKey that is \n      //    created from a different CompareInfo (same culture) \n      //    with the same string and the same CompareOptions.\n      Console.WriteLine( &quot;different     same         same             same             {0}&quot;, mySK1.Equals( mySK5 ) );\n\n      // Compares the base SortKey with a SortKey that is \n      //    created from a different CompareInfo (different culture) \n      //    with the same string and the same CompareOptions.\n      Console.WriteLine( &quot;different     different    same             same             {0}&quot;, mySK1.Equals( mySK6 ) );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nComparing the base SortKey with itself: True\n\nCompareInfo   Culture      OriginalString   CompareOptions   Equals()\nsame          same         same             same             True\nsame          same         same             different        False\nsame          same         different        same             False\ndifferent     same         same             same             True\ndifferent     different    same             same             False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_SortKey_GetHashCode\">\r\n    \r\n            <a id=\"System_Globalization_SortKey_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object that is suitable for hashing algorithms and data structures such as a hash table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method generates the same hash code for two objects that are equal according to the <a class=\"xref\" href=\"system.globalization.sortkey#System_Globalization_SortKey_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<p> This method overrides <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_SortKey_ToString\">\r\n    \r\n            <a id=\"System_Globalization_SortKey_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the concatenation of the string &quot;SortKey - &quot;, the culture identifier and compare options of the current <a class=\"xref\" href=\"system.globalization.sortkey\" data-linktype=\"relative-path\">SortKey</a> object, and the value of the <a class=\"xref\" href=\"system.globalization.sortkey#System_Globalization_SortKey_OriginalString_\" data-linktype=\"relative-path\">OriginalString</a> property.  </p>\n<p> This method overrides <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays an original string, the strings yielded by the ToString method for case-sensitive and case-insensitive sort keys, and the key data for case-sensitive and case-insensitive sort keys.  </p>\n<pre><code class=\"lang-vb\" name=\"sys.glob.sortkey.tostring#1\">&#39; This code example demonstrates the \n&#39; GetSortKey() and ToString() methods, and the \n&#39; OriginalString and KeyData properties of the \n&#39; System.Globalization.SortKey class.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim cmpi As CompareInfo = Nothing\n        Dim sk1 As SortKey = Nothing\n        Dim sk2 As SortKey = Nothing\n        Dim s As String = &quot;ABC&quot;\n        Dim ignoreCase As String = &quot;Ignore case&quot;\n        Dim useCase As String =    &quot;Use case   &quot;\n        \n        &#39; Get a CompareInfo object for the English-Great Britain culture.\n        cmpi = CompareInfo.GetCompareInfo(&quot;en-GB&quot;)\n        \n        &#39; Get a sort key that ignores case for the specified string.\n        sk1 = cmpi.GetSortKey(s, CompareOptions.IgnoreCase)\n        &#39; Get a sort key with no compare option for the specified string.\n        sk2 = cmpi.GetSortKey(s)\n        \n        &#39; Display the original string.\n        Console.WriteLine(&quot;Original string: &quot;&quot;{0}&quot;&quot;&quot;, sk1.OriginalString)\n        Console.WriteLine()\n        \n        &#39; Display the the string equivalent of the two sort keys.\n        Console.WriteLine(&quot;CompareInfo (culture) name: {0}&quot;, cmpi.Name)\n        Console.WriteLine(&quot;ToString - {0}: &quot;&quot;{1}&quot;&quot;&quot;, ignoreCase, sk1.ToString())\n        Console.WriteLine(&quot;ToString - {0}: &quot;&quot;{1}&quot;&quot;&quot;, useCase, sk2.ToString())\n        Console.WriteLine()\n        \n        &#39; Display the key data of the two sort keys.\n        DisplayKeyData(sk1, ignoreCase)\n        DisplayKeyData(sk2, useCase)\n    End Sub &#39;Main\n    \n    Public Shared Sub DisplayKeyData(ByVal sk As SortKey, ByVal title As String) \n        Console.Write(&quot;Key Data - {0}: &quot;, title)\n        Dim keyDatum As UInteger\n        For Each keyDatum In sk.KeyData\n            Console.Write(&quot;0x{0} &quot;, CUInt(keyDatum))\n        Next keyDatum\n        Console.WriteLine()\n    End Sub &#39;DisplayKeyData\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Original string: &quot;ABC&quot;\n&#39;\n&#39;CompareInfo (culture) name: en-GB\n&#39;ToString - Ignore case: &quot;SortKey - 2057, IgnoreCase, ABC&quot;\n&#39;ToString - Use case   : &quot;SortKey - 2057, None, ABC&quot;\n&#39;\n&#39;Key Data - Ignore case: 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x1 0x1 0x0\n&#39;Key Data - Use case   : 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x18 0x18 0x18 0x1 0x1 0x0\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"sys.glob.sortkey.tostring#1\">// This code example demonstrates the \n// GetSortKey() and ToString() methods, and the \n// OriginalString and KeyData properties of the \n// System.Globalization.SortKey class.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    CompareInfo cmpi = null;\n    SortKey sk1 = null;\n    SortKey sk2 = null;\n    string s = &quot;ABC&quot;;\n    string ignoreCase = &quot;Ignore case&quot;;\n    string useCase    = &quot;Use case   &quot;;\n\n// Get a CompareInfo object for the English-Great Britain culture.\n    cmpi = CompareInfo.GetCompareInfo(&quot;en-GB&quot;);\n\n// Get a sort key that ignores case for the specified string.\n    sk1 = cmpi.GetSortKey(s, CompareOptions.IgnoreCase);\n// Get a sort key with no compare option for the specified string.\n    sk2 = cmpi.GetSortKey(s);\n\n// Display the original string.\n    Console.WriteLine(&quot;Original string: \\&quot;{0}\\&quot;&quot;, sk1.OriginalString);\n    Console.WriteLine();\n\n// Display the the string equivalent of the two sort keys.\n    Console.WriteLine(&quot;CompareInfo (culture) name: {0}&quot;, cmpi.Name);\n    Console.WriteLine(&quot;ToString - {0}: \\&quot;{1}\\&quot;&quot;, ignoreCase, sk1.ToString());\n    Console.WriteLine(&quot;ToString - {0}: \\&quot;{1}\\&quot;&quot;, useCase, sk2.ToString());\n    Console.WriteLine();\n\n// Display the key data of the two sort keys.\n    DisplayKeyData(sk1, ignoreCase);\n    DisplayKeyData(sk2, useCase);\n    }\n\n    public static void DisplayKeyData(SortKey sk, string title)\n    {\n    Console.Write(&quot;Key Data - {0}: &quot;, title);\n    foreach (byte keyDatum in sk.KeyData)\n        Console.Write(&quot;0x{0} &quot;, (uint)keyDatum);\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\nOriginal string: &quot;ABC&quot;\n\nCompareInfo (culture) name: en-GB\nToString - Ignore case: &quot;SortKey - 2057, IgnoreCase, ABC&quot;\nToString - Use case   : &quot;SortKey - 2057, None, ABC&quot;\n\nKey Data - Ignore case: 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x1 0x1 0x0\nKey Data - Use case   : 0x14 0x2 0x14 0x9 0x14 0x10 0x1 0x1 0x18 0x18 0x18 0x1 0x1 0x0\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.SortKey.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.SortKey.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.SortKey\">\r\n<meta name=\"APIName\" content=\"System.Globalization.SortKey.Compare\">\r\n<meta name=\"APIName\" content=\"System.Globalization.SortKey.Equals\">\r\n<meta name=\"APIName\" content=\"System.Globalization.SortKey.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Globalization.SortKey.KeyData\">\r\n<meta name=\"APIName\" content=\"System.Globalization.SortKey.OriginalString\">\r\n<meta name=\"APIName\" content=\"System.Globalization.SortKey.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"411e0f57-6b28-72c2-a3a4-a072936d3fea\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\SortKey.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the result of mapping a string to its sort key.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.SortKey\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.SortKey.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.SortKey.yml","open_to_public_contributors":true,"api_name":["System.Globalization.SortKey","System.Globalization.SortKey.Compare","System.Globalization.SortKey.Equals","System.Globalization.SortKey.GetHashCode","System.Globalization.SortKey.KeyData","System.Globalization.SortKey.OriginalString","System.Globalization.SortKey.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.SortKey","System::Globalization::SortKey","System.Globalization.SortKey.Compare","System::Globalization::SortKey::Compare","System.Globalization.SortKey.Equals","System::Globalization::SortKey::Equals","System.Globalization.SortKey.GetHashCode","System::Globalization::SortKey::GetHashCode","System.Globalization.SortKey.KeyData","System::Globalization::SortKey::KeyData","System.Globalization.SortKey.OriginalString","System::Globalization::SortKey::OriginalString","System.Globalization.SortKey.ToString","System::Globalization::SortKey::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"411e0f57-6b28-72c2-a3a4-a072936d3fea","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\SortKey.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/SortKey.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SortKey class | Microsoft Docs","_op_ogTitle":"SortKey class","description":"Represents the result of mapping a string to its sort key.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.SortKey","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.sortkey","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.sortkey","fileRelativePath":"System.Globalization.SortKey.html"},"themesRelativePathToOutputRoot":"_themes/"}