{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FileSystem</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>The <code>FileSystem</code> module contains the procedures that are used to perform file, directory or folder, and system operations. The <code>My</code> feature gives you better productivity and performance in file I/O operations than using the <code>FileSystem</code> module. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[Microsoft.VisualBasic.CompilerServices.StandardModule]\n[System.Security.SecurityCritical]\npublic sealed class FileSystem</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">FileSystem</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This module supports the Visual Basic language keywords and run-time library members that access files and folders.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_ChDir_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ChDir(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Changes the current directory or folder. The <code>My</code> feature gives you better productivity and performance in file I/O operations than the <code>ChDir</code>function. For more information, see <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*</span> .</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void ChDir (string Path);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Path</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. A <code>String</code> expression that identifies which directory or folder becomes the new default directory or folder. <code>Path</code> may include the drive. If no drive is specified, <code>ChDir</code> changes the default directory or folder on the current drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>Path</code> is empty.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Invalid drive is specified, or drive is unavailable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>ChDir</code> function changes the default directory, but not the default drive. For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#39\">        ChDir(&quot;D:\\TMP&quot;)\n</code></pre><p> You can make relative directory changes is by typing two periods, as follows:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#40\">        ChDir(&quot;..&quot;) &#39; Moves up one directory.\n</code></pre><div class=\"IMPORTANT\"><h5>Important</h5><p> The <code>ChDir</code> function requires unmanaged code permission, which may affect its execution in partial-trust situations. For more information, see <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> and .</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_ChDrive_System_Char_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ChDrive(Char)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Changes the current drive.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void ChDrive (char Drive);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Drive</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. String expression that specifies an existing drive. If you supply a zero-length string (&quot;&quot;), the current drive does not change. If the <code>Drive</code> argument is a multiple-character string, <code>ChDrive</code> uses only the first letter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Invalid drive is specified, or drive is unavailable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>ChDrive</code> function requires unmanaged-code permission, which may affect its execution in partial-trust situations. For more information, see <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> and <a href=\"http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675\" data-linktype=\"external\">Code Access Permissions</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_ChDrive_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ChDrive(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Changes the current drive.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void ChDrive (string Drive);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Drive</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. String expression that specifies an existing drive. If you supply a zero-length string (&quot;&quot;), the current drive does not change. If the <code>Drive</code> argument is a multiple-character string, <code>ChDrive</code> uses only the first letter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Invalid drive is specified, or drive is unavailable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>ChDrive</code> function requires unmanaged-code permission, which may affect its execution in partial-trust situations. For more information, see <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> and <a href=\"http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675\" data-linktype=\"external\">Code Access Permissions</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_CurDir\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CurDir()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string representing the current path. The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a> gives you better productivity and performance in file I/O operations than <code>CurDir</code>. For more information, see <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string CurDir ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string representing the current path.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_CurDir_System_Char_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CurDir(Char)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string representing the current path. The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a> gives you better productivity and performance in file I/O operations than <code>CurDir</code>. For more information, see <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string CurDir (char Drive);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Drive</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. <code>Char</code> expression that specifies an existing drive. If no drive is specified, or if <code>Drive</code> is a zero-length string (&quot;&quot;), <code>CurDir</code> returns the path for the current drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string representing the current path.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Dir\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dir()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a> gives you better productivity and performance in file I/O operations than the <code>Dir</code> function. See <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*</span> for more information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Dir ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Dir</code> function supports the use of multiple-character (<code>*</code>) and single-character (<code>?</code>) wildcards to specify multiple files.  </p>\n<p> <code>VbVolume</code> returns the volume label for the drive instead of a specific file name.  </p>\n<p> You must supply a <code>PathName</code> the first time that you call the <code>Dir</code> function. To retrieve the next item, you can make subsequent calls to the <code>Dir</code> function without parameters.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> To run correctly, the <code>Dir</code> function requires the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> and <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>flags of <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> to be granted to the executing code. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a>, <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a>, and <a href=\"http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675\" data-linktype=\"external\">Code Access Permissions</a>.  </p>\n</div>\n<p> The <code>Attributes</code> argument enumeration values are as follows:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>Normal</code></td>\n<td><code>vbnormal</code></td>\n<td>Default. Specifies files without attributes.</td>\n</tr>\n<tr>\n<td><code>ReadOnly</code></td>\n<td><code>vbReadOnly</code></td>\n<td>Specifies read-only files, and also files without attributes.</td>\n</tr>\n<tr>\n<td><code>Hidden</code></td>\n<td><code>vbHidden</code></td>\n<td>Specifies hidden files, and also files without attributes.</td>\n</tr>\n<tr>\n<td><code>System</code></td>\n<td><code>vbSystem</code></td>\n<td>Specifies system files, and also files without attributes.</td>\n</tr>\n<tr>\n<td><code>Volume</code></td>\n<td><code>vbVolume</code></td>\n<td>Specifies volume label; if any other attribute is specified, <code>vbVolume</code> is ignored.</td>\n</tr>\n<tr>\n<td><code>Directory</code></td>\n<td><code>vbDirectory</code></td>\n<td>Specifies directories or folders, and also files without attributes.</td>\n</tr>\n<tr>\n<td><code>Archive</code></td>\n<td><code>vbArchive</code></td>\n<td>File has changed since last backup.</td>\n</tr>\n<tr>\n<td><code>Alias</code></td>\n<td><code>vbAlias</code></td>\n<td>File has a different name.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Dir_System_String_Microsoft_VisualBasic_FileAttribute_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dir(String,FileAttribute)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a> gives you better productivity and performance in file I/O operations than the <code>Dir</code> function. See <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*</span> for more information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>PathName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. <code>String</code> expression that specifies a file name, directory or folder name, or drive volume label. A zero-length string (<code>&quot;&quot;</code>) is returned if <code>PathName</code> is not found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.fileattribute\" data-linktype=\"relative-path\">FileAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Enumeration or numeric expression whose value specifies file attributes. If omitted, <code>Dir</code> returns files that match <code>PathName</code> but have no attributes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Dir</code> function supports the use of multiple-character (<code>*</code>) and single-character (<code>?</code>) wildcards to specify multiple files.  </p>\n<p> <code>VbVolume</code> returns the volume label for the drive instead of a specific file name.  </p>\n<p> You must supply a <code>PathName</code> the first time that you call the <code>Dir</code> function. To retrieve the next item, you can make subsequent calls to the <code>Dir</code> function with no parameters.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> To run correctly, the <code>Dir</code> function requires the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> and <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>flags of <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> to be granted to the executing code. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a>, <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a>, and <a href=\"http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675\" data-linktype=\"external\">Code Access Permissions</a>.  </p>\n</div>\n<p> The <code>Attributes</code> argument enumeration values are as follows:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>Normal</code></td>\n<td><code>vbnormal</code></td>\n<td>Default. Specifies files that have no attributes.</td>\n</tr>\n<tr>\n<td><code>ReadOnly</code></td>\n<td><code>vbReadOnly</code></td>\n<td>Specifies read-only files, in addition to files that have no attributes.</td>\n</tr>\n<tr>\n<td><code>Hidden</code></td>\n<td><code>vbHidden</code></td>\n<td>Specifies hidden files, in addition to files that have no attributes.</td>\n</tr>\n<tr>\n<td><code>System</code></td>\n<td><code>vbSystem</code></td>\n<td>Specifies system files, in addition to files that have no attributes.</td>\n</tr>\n<tr>\n<td><code>Volume</code></td>\n<td><code>vbVolume</code></td>\n<td>Specifies volume label; if any other attribute is specified, <code>vbVolume</code> is ignored.</td>\n</tr>\n<tr>\n<td><code>Directory</code></td>\n<td><code>vbDirectory</code></td>\n<td>Specifies directories or folders, in addition to files that have no attributes.</td>\n</tr>\n<tr>\n<td><code>Archive</code></td>\n<td><code>vbArchive</code></td>\n<td>File has changed since last backup.</td>\n</tr>\n<tr>\n<td><code>Alias</code></td>\n<td><code>vbAlias</code></td>\n<td>File has a different name.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_EOF_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EOF(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a Boolean value <code>True</code> when the end of a file opened for <code>Random</code> or sequential <code>Input</code> has been reached.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool EOF (int FileNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. An <code>Integer</code> that contains any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns a Boolean value <code>True</code> when the end of a file opened for <code>Random</code> or sequential <code>Input</code> has been reached.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use <code>EOF</code> to avoid the error generated by attempting to get input past the end of a file.  </p>\n<p> The <code>EOF</code> function returns <code>False</code> until the end of the file has been reached. With files opened for <code>Random</code> or <code>Binary</code> access, <code>EOF</code> returns <code>False</code> until the last executed <code>FileGet</code> function is unable to read a whole record.  </p>\n<p> With files opened for <code>Binary</code> access, an attempt to read through the file using the <code>Input</code> function until <code>EOF</code> returns <code>True</code> generates an error. Use the <code>LOF</code> and <code>Loc</code> functions instead of <code>EOF</code> when reading binary files with <code>Input</code>, or use <code>Get</code> when using the <code>EOF</code> function. With files opened for <code>Output</code>, <code>EOF</code> always returns <code>True</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileAttr_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileAttr(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an enumeration representing the file mode for files opened using the <code>FileOpen</code> function. The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a> gives you better productivity and performance in file I/O operations than the <code>FileAttr</code>function. See <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.GetFileInfo*</span> for more information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>Integer</code>. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.openmode\" data-linktype=\"relative-path\">OpenMode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The following enumeration values indicate the file access mode:  </p>\n <table><tbody><tr><td> Value<br>\n </td><td> Mode<br>\n </td></tr><tr><td> 1<br>\n </td><td><code>OpenMode.Input</code></td></tr><tr><td> 2<br>\n </td><td><code>OpenMode.Output</code></td></tr><tr><td> 4<br>\n </td><td><code>OpenMode.Random</code></td></tr><tr><td> 8<br>\n </td><td><code>OpenMode.Append</code></td></tr><tr><td> 32<br>\n </td><td><code>OpenMode.Binary</code></td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This function returns an enumeration representing the file mode for files opened using the <code>FileOpen</code> function.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileClose_System_Int32___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileClose(Int32[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Concludes input/output (I/O) to a file opened using the <code>FileOpen</code> function. <code>My</code> gives you better productivity and performance in file I/O operations. See <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a> for more information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileClose (int[] FileNumbers);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumbers</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Parameter array of 0 or more channels to be closed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>FileNumber</code> does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>FileClose</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/How%20to:%20Read%20Text%20from%20Files%20with%20a%20StreamReader%20(Visual%20Basic).md\" data-linktype=\"relative-path\">How to: Read Text from Files with a StreamReader</a>,<a href=\"../Topic/How%20to:%20Write%20Text%20to%20Files%20with%20a%20StreamWriter%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">How to: Write Text to Files with a StreamWriter</a>, and <a href=\"../Topic/Walkthrough:%20Manipulating%20Files%20and%20Directories%20in%20Visual%20Basic.md\" data-linktype=\"relative-path\">Walkthrough: Manipulating Files and Directories in Visual Basic</a>.  </p>\n<p> If you omit <code>FileNumbers</code>, all active files opened by the <code>FileOpen</code> function are closed.  </p>\n<p> When you close files that were opened for <code>Output</code> or <code>Append</code>, the final buffer of output is written to the operating system buffer for that file. All buffer space associated with the closed file is released.  </p>\n<p> When the <code>FileClose</code> function is executed, the association of a file with its file number ends.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileCopy_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileCopy(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies a file. The <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a> gives you better productivity and performance in file I/O operations than <code>FileCopy</code>. See <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.CopyFile*</span> for more information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileCopy (string Source, string Destination);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Source</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies the name of the file to be copied. <code>Source</code> may include the directory or folder, and drive, of the source file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Destination</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies the destination file name. <code>Destination</code> may include the directory or folder, and drive, of the destination file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>Source</code> or <code>Destination</code> is invalid or not specified.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File is already open.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you try to use the <code>FileCopy</code> function on a currently open file, an error occurs.  </p>\n<p> <code>FileCopy</code> requires full trust to work on the local drive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileDateTime_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileDateTime(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <code>Date</code> value that indicates the date and time a file was written to. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileDateTime</code>. For more information, see <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.GetFileInfo*</span></p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static DateTime FileDateTime (string PathName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>PathName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies a file name. <code>PathName</code> may include the directory or folder, and the drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>Date</code> value that indicates the date and time a file was created or last modified.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>PathName</code> is invalid or contains wildcards.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Target file does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Boolean__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Boolean,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a></p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file with <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the<code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Byte__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Byte,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file with <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code>parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used. Then the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Char__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Char,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file with <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code>parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_DateTime__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,DateTime,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file with <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function,<code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Decimal__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Decimal,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Double__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Double,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the<code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Int16__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Int16,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code>parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Int32__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Int32,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Int64__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Int64,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Single__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Single,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_ValueType__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,ValueType,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code>function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_String__System_Int64_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,String,Int64,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>StringIsFixedLength</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is <code>False</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGet_System_Int32_System_Array__System_Int64_System_Boolean_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGet(Int32,Array,Int64,Boolean,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGet</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ArrayIsDynamic</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>StringIsFixedLength</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is <code>False</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FileGet</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGet</code> is usually written to a file by using <code>FilePut</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte following the last <code>FileGet</code> or <code>FilePut</code> function (or pointed to by the last <code>Seek</code> function) is read.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGet</code> reads subsequent records on record-length boundaries. The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>By default, if the variable being read into is a string, <code>FileGet</code> reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When reading the array, you have to match the way the array was written. If it was written with the descriptor, you have to read the descriptor. If the descriptor is not used, the size and bounds of the array passed into <code>FileGet</code> determine what to read.  </p>\n<p> The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#21\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows:  </p>\n<ul>\n<li><p>18 bytes for the descriptor: (2 + 8 * 2)  </p>\n</li>\n<li><p>200 bytes for the data: (5 * 10 * 4).  </p>\n</li>\n</ul>\n</li>\n<li><p>If the variable being read into is any other type of variable (not a variable-length string or an object), <code>FileGet</code> reads only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being read.  </p>\n</li>\n<li><p><code>FileGet</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePut</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to read the individual elements. This includes any arrays and their descriptors. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGet</code> reads all variables from disk contiguously; that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGet</code> reads only the data. No descriptor is read.  </p>\n</li>\n<li><p><code>FileGet</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>FileGet</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileGetObject_System_Int32_System_Object__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileGetObject(Int32,Object,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open disk file into a variable.  The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileGetObject</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name into which data is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which reading starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>FileGetObject</code> function is used instead of <code>FileGet</code> to avoid ambiguities at compile time if type <code>Object</code> is returned instead of another type, such as <code>Integer</code>, <code>Long</code>, <code>Short</code>, and so forth.  </p>\n<p> If you intend to write out the <code>Variant</code> type, <code>FileGetObject</code> is required. When in doubt, if you are using an object for the second parameter, it is always suggested that you use <code>FilePutObject</code> and <code>FileGetObject</code>.  </p>\n<p> <code>FileGetObject</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data read with <code>FileGetObject</code> is usually written with <code>FilePutObject</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, <code>FileGetObject</code> reads the record or byte after the last <code>FileGetObject</code> or <code>FilePutObject</code> function (or pointed to by the last <code>Seek</code> function).  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being read is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FileGetObject</code> reads subsequent records on record-length boundaries. The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.  </p>\n</li>\n<li><p>If the variable being read into is a string, by default <code>FileGetObject</code> reads a two-byte descriptor containing the string length and then reads the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause of the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string. Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written. If you want to read a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being read into is an array, then the record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: 2 + 8 * NumberOfDimensions.  </p>\n<p> For example, the following array declaration requires 218 bytes when the array is written to disk:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#27\">        Dim MyArray(4, 9) As Integer\n</code></pre><p> The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 * 2), and 100 bytes for the data (5 * 10 * 4).  </p>\n</li>\n<li><p><code>FileGetObject</code> reads elements of structures as if each were being read individually, except that there is no padding between elements. On disk, a dynamic array in a user-defined type (written with <code>FilePutObject</code>) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 * NumberOfDimensions. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors. The <a class=\"xref\" href=\"microsoft.visualbasic.vbfixedstringattribute\" data-linktype=\"relative-path\">VBFixedStringAttribute</a> class can be applied to string fields in the structures to indicate the size of string when written to disk.  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, all of the <code>Random</code> rules apply, with these exceptions:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FileGetObject</code>reads all variables from disk contiguously, that is, with no padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FileGetObject</code> reads only the data. No descriptor is read.  </p>\n<p><code>FileGetObject</code> reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor. The number of bytes read equals the number of characters already in the string.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file named Form1.vb may not be a Visual Basic source file.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileLen_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileLen(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <code>Long</code> value that specifies the length of a file in bytes. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileLen</code>. For more information, see <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.GetFileInfo*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static long FileLen (string PathName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>PathName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies a file. <code>PathName</code> may include the directory or folder, and the drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>Long</code> value that specifies the length of a file in bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the specified file is open when the <code>FileLen</code> function is called, the value returned represents the size of the file at the time it was opened.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To obtain the current length of an open file, use the <code>LOF</code> function.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileOpen_System_Int32_System_String_Microsoft_VisualBasic_OpenMode_Microsoft_VisualBasic_OpenAccess_Microsoft_VisualBasic_OpenShare_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileOpen(Int32,String,OpenMode,OpenAccess,OpenShare,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Opens a file for input or output. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileOpen</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number. Use the <code>FreeFile</code> function to obtain the next available file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies a file name—may include directory or folder, and drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Mode</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.openmode\" data-linktype=\"relative-path\">OpenMode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Enumeration specifying the file mode: <code>Append</code>, <code>Binary</code>, <code>Input</code>, <code>Output</code>, or <code>Random</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.openmode\" data-linktype=\"relative-path\">OpenMode</a> .</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Access</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.openaccess\" data-linktype=\"relative-path\">OpenAccess</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Enumeration specifying the operations permitted on the open file: <code>Read</code>, <code>Write</code>, or <code>ReadWrite</code>. Defaults to <code>ReadWrite</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.openaccess\" data-linktype=\"relative-path\">OpenAccess</a> .</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Share</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.openshare\" data-linktype=\"relative-path\">OpenShare</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Enumeration specifying the operations not permitted on the open file by other processes: <code>Shared</code>, <code>Lock Read</code>, <code>Lock Write</code>, and <code>Lock Read Write</code>. Defaults to <code>Lock Read Write</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.openshare\" data-linktype=\"relative-path\">OpenShare</a> .</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordLength</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Number less than or equal to 32,767 (bytes). For files opened for random access, this value is the record length. For sequential files, this value is the number of characters buffered.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Record length is negative (and not equal to -1).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>FileName</code> is already open, or <code>FileName</code> is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>FileOpen</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> You must open a file before any I/O operation can be performed on it. <code>FileOpen</code> allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist. To do so, it needs permission for the directory in which the file is to be created. However, if the file specified by <code>FileName</code> does exist, the application needs <code>Write</code> permission only to the file itself. Wherever possible, to help improve security, create the file during deployment and grant <code>Write</code> permission to that file only, instead of to the whole directory. To help improve security, write data to user directories instead of to the root directory or the Program Files directory.  </p>\n</div>\n<p> The channel to open can be found by using the <code>FreeFile()</code> function.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <code>FileOpen</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration, which may affect its execution in partial trust situations. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Boolean_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Boolean,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code>function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Byte_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Byte,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Char_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Char,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_DateTime_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,DateTime,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Decimal_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Decimal,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Double_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Double,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Int16_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Int16,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the<code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Int32_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Int32,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Int64_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Int64,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Single_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Single,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code>function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_ValueType_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,ValueType,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the<code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Object_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Object,Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_String_System_Int64_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,String,Int64,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>..</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>StringIsFixedLength</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is <code>False</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePut_System_Int32_System_Array_System_Int64_System_Boolean_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePut(Int32,Array,Int64,Boolean,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePut</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ArrayIsDynamic</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>StringIsFixedLength</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is <code>False</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>RecordNumber</code> &lt; 1 and not equal to -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>FilePut</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePut</code> is usually read from a file by using <code>FileGet</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, the next record or byte after the last <code>FileGet</code> or <code>FilePut</code> function or pointed to by the last <code>Seek</code> function is written.  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePut</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePut</code>, you have to do the same with <code>FileGet</code>, and you have to make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePut</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception will be thrown.  </p>\n</li>\n<li><p>If the variable being written is a string, <code>FilePut</code> writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable. Therefore, the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be at least two bytes greater than the actual length of the string.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePut</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePut</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePut</code> writes a two byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array. Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array. Visual Basic 2005 defaults to not writing the descriptor. To write the descriptor, set the <code>ArrayIsDynamic</code> parameter to <code>True</code>. When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions). The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 218 bytes when the array is written to disk.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#43\">        Dim MyArray(4, 9) As Integer\n</code></pre></li>\n<li><p>If the variable being written is any other type of variable (not a variable-length string or an object), <code>FilePut</code> writes only the variable data. The record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the length of the data being written.  </p>\n</li>\n<li><p><code>FilePut</code> writes elements of structures as if each were written individually, except there is no padding between elements. The <code>VBFixedString</code> attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> String fields that have more bytes than specified by the <code>VBFixedString</code> attribute are truncated when written to disk,  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, most of the <code>Random</code> mode rules apply, with some exceptions. The following rules for files opened in <code>Binary</code> mode differ from the rules for <code>Random</code> mode:  </p>\n<ul>\n<li><p>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePut</code> writes all variables to disk contiguously, that is, without padding between records.  </p>\n</li>\n<li><p>For any array other than an array in a structure, <code>FilePut</code> writes only the data. No descriptor is written.  </p>\n</li>\n<li><p><code>FilePut</code> writes variable-length strings that are not elements of structures without the two-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 11 bytes to file number 1:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#44\">        Dim hellow As String = &quot;Hello World&quot;\n        FilePut(1, hellow)\n</code></pre></li>\n<li><p>Writing to a file by using the <code>FilePut</code> function requires <code>Write</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FilePutObject_System_Int32_System_Object_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FilePutObject(Int32,Object,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data from a variable to a disk file.  The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FilePutObject</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Valid variable name that contains data written to disk.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Record number (<code>Random</code> mode files) or byte number (<code>Binary</code> mode files) at which writing starts.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>FilePutObject</code> function is used instead of <code>FilePut</code> to avoid ambiguities at compile time if type <code>Object</code> is passed instead of another type, such as <code>Integer</code>, <code>Long</code>, <code>Short</code>, and so forth.  </p>\n<p> <code>FilePutObject</code> writes and reads descriptors that describe the object. If you intend to write out the <code>Variant</code> type, <code>FilePutObject</code> is required. When in doubt, if you are using an object for the second parameter, we recommend that you always use <code>FilePutObject</code> and <code>FileGetObject</code>.  </p>\n<p> <code>FilePutObject</code> is valid only in <code>Random</code> and <code>Binary</code> mode.  </p>\n<p> Data written with <code>FilePutObject</code> is usually read from a file by using <code>FileGetObject</code>.  </p>\n<p> The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <code>RecordNumber</code>, <code>FilePutObject</code> writes the next record or byte after the last <code>FileGetObject</code> or <code>FilePutObject</code> function (or the record or byte pointed to by the last <code>Seek</code> function).  </p>\n<p> The <code>StringIsFixedLength</code> argument controls whether the function interprets strings as variable or fixed length. <code>FilePutObject</code> does not write the length descriptor when the argument is <code>True</code>. If you use <code>StringIsFixedLength</code> = <code>True</code> with <code>FilePutObject</code>, you have to do the same with <code>FileGetObject</code>, and you must also make sure that the string is initialized to the length expected.  </p>\n<h2 id=\"random-mode\">Random Mode</h2>\n<p> For files opened in <code>Random</code> mode, the following rules apply:  </p>\n<ul>\n<li><p>If the length of the data being written is less than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, <code>FilePutObject</code> writes subsequent records on record-length boundaries. The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <code>RecordLength</code> clause of the <code>FileOpen</code> function, an exception is thrown.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a numeric type, <code>FilePutObject</code> writes two bytes identifying the <code>VarType</code> of the object and then writes the variable. For example, when writing an object that contains an integer, <code>FilePutObject</code> writes six bytes: two bytes that identify the object as <code>VarType(</code>3<code>)</code> (<code>Integer</code>) and four bytes that contain the data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least two bytes greater than the actual number of bytes required to store the variable.  </p>\n</li>\n<li><p>If the variable being written is an object that contains a string, <code>FilePutObject</code> writes a two-byte descriptor identifying the <code>VarType(</code>8<code>)</code> of the object, a two-byte descriptor indicating the length of the string, and then writes the string data. The record length specified by the <code>RecordLength</code> parameter in the <code>FileOpen</code> function must be at least four bytes greater than the actual length of the string. If you want to put a string without the descriptor, you should pass <code>True</code> to the <code>StringIsFixedLength</code> parameter, and the string you read into should be the correct length.  </p>\n</li>\n<li><p>If the variable being written is an array, then the record length specified by the <code>RecordLength</code> clause in the <code>FileOpen</code> function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. The descriptor specifies the rank of the array, the size, and the lower bounds for each rank. Its length equals 2 plus 8 times the number of dimensions: (2 + 8 * NumberOfDimensions).  </p>\n</li>\n</ul>\n<h2 id=\"binary-mode\">Binary Mode</h2>\n<p> For files opened in <code>Binary</code> mode, all the <code>Random</code> mode rules apply, except:  </p>\n<ul>\n<li>The <code>RecordLength</code> clause in the <code>FileOpen</code> function has no effect. <code>FilePutObject</code> writes all variables to disk contiguously, that is, without padding between records.</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FileWidth_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileWidth(Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Assigns an output line width to a file opened by using the <code>FileOpen</code> function.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FileWidth (int FileNumber, int RecordWidth);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>RecordWidth</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started. If <code>RecordWidth</code> equals 0, there is no limit to the length of a line. The default value for <code>RecordWidth</code> is 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_FreeFile\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FreeFile()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an <code>Integer</code> value that represents the next file number available for use by the <code>FileOpen</code> function.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int FreeFile ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns an <code>Integer</code> value that represents the next file number available for use by the <code>FileOpen</code> function.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>More than 255 files are in use.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use <code>FreeFile</code> to supply a file number that is not already being used.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_GetAttr_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAttr(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <code>FileAttribute</code> value that represents the attributes of a file, directory, or folder. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>FileAttribute</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>PathName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies a file, directory, or folder name. <code>PathName</code> can include the directory or folder, and the drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.fileattribute\" data-linktype=\"relative-path\">FileAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value returned by <code>GetAttr</code> is the sum of the following enumeration values:  </p>\n<p> <table><tbody><tr><td> Value  <p>\n<p> </td><td> Constant  <p>\n<p>  Description  </p>\n<p> </td></tr><tr><td><code>Normal</code></td><td><code>vbNormal</code> Normal.  <p>\n<p> </td></tr><tr><td><code>ReadOnly</code></td><td><code>vbReadOnly</code> Read-only.  <p>\n<p> </td></tr><tr><td><code>Hidden</code></td><td><code>vbHidden</code> Hidden.  <p>\n<p> </td></tr><tr><td><code>System</code></td><td><code>vbSystem</code> System file.  <p>\n<p> </td></tr><tr><td><code>Directory</code></td><td><code>vbDirectory</code> Directory or folder.  <p>\n<p> </td></tr><tr><td><code>Archive</code></td><td><code>vbArchive</code> File has changed since last backup.  <p>\n<p> </td></tr><tr><td><code>Alias</code></td><td><code>vbAlias</code> File has a different name.  <p>\n<p> </td></tr></tbody></table><div class=\"alert NOTE\"><br> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  <p>\n<p></div></p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>Pathname</code> is invalid or contains wildcards.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Target file does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To determine which attributes are set, use the <code>And</code> operator to perform a bitwise comparison of the value returned by the <code>GetAttr</code> function and the value of the individual file attribute you want. If the result is not zero, that attribute is set for the named file. For example, the return value of the following <code>And</code> expression is zero if the <code>Archive</code> attribute is not set:  </p>\n<pre><code class=\"lang-vb#\">Result = GetAttr(FName) And vbArchive  \n</code></pre><p> A nonzero value is returned if the <code>Archive</code> attribute is set.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Boolean__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref bool Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Byte__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Byte)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref byte Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Char__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Char)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref char Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_DateTime__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,DateTime)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref DateTime Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Decimal__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Decimal)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref decimal Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Double__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Double)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref double Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Int16__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Int16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref short Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Int32__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref int Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Int64__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref long Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref object Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_Single__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,Single)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref float Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Input_System_Int32_System_String__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Input(Int32,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads data from an open sequential file and assigns the data to variables.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Input (int FileNumber, ref string Value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Variable that is assigned the values read from the file—cannot be an array or object variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Input</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>Input</code> is usually written to a file by using <code>Write</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of the file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.  </p>\n</div>\n<p> When read, standard string or numeric data is assigned to variables without modification. The following table illustrates how other input data is treated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Data</td>\n<td>Value assigned to variable</td>\n</tr>\n<tr>\n<td>Delimiting comma or blank line</td>\n<td>Empty</td>\n</tr>\n<tr>\n<td>#NULL#</td>\n<td><code>DBNull</code></td>\n</tr>\n<tr>\n<td>#TRUE# or #FALSE#</td>\n<td><code>True</code> or <code>False</code></td>\n</tr>\n<tr>\n<td>#<code>yyyy-mm-dd hh:mm:ss</code>#</td>\n<td>The date and/or time represented by the expression</td>\n</tr>\n<tr>\n<td>#ERROR <code>errornumber</code>#</td>\n<td><code>errornumber</code> (variable is an object tagged as an error)</td>\n</tr>\n</tbody>\n</table>\n<p> If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Input</code> function is not localized. For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>Input</code> function requires <code>Read</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_InputString_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InputString(Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns <code>String</code> value that contains characters from a file opened in <code>Input</code> or <code>Binary</code> mode. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>InputString</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string InputString (int FileNumber, int CharCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>CharCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid numeric expression specifying the number of characters to read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns <code>String</code> value that contains characters from a file opened in <code>Input</code> or <code>Binary</code> mode. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>InputString</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>FileNumber</code> does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>CharCount</code> &lt; 0 or &gt; 214.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>InputString</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with the <code>InputString</code> function is usually written to a file by using <code>Print</code> or <code>FilePut</code>. Use this function only with files opened in <code>Input</code> or <code>Binary</code> mode.  </p>\n<p> Unlike the <code>Input</code> function, the <code>InputString</code> function returns all the characters it reads. This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.  </p>\n<p> With files opened for <code>Binary</code> access, an attempt to read through the file by using the <code>InputString</code> function until <code>EOF</code> returns <code>True</code> generates an error. Use the <code>LOF</code> and <code>Loc</code> functions instead of <code>EOF</code> when you read binary files by using <code>InputString</code>, or use <code>FileGet</code> when you use the <code>EOF</code> function.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When reading from files, do not make security decisions about the contents of the file based on the file name extension. For example, a file named Form1.vb may not be a Visual Basic source file.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Kill_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Kill(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Deletes files from a disk. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Kill</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a> .</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Kill (string PathName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>PathName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies one or more file names to be deleted. <code>PathName</code> can include the directory or folder, and the drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Target file(s) open.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Target file(s) not found.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Permission denied.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>Kill</code> supports the use of multiple-character (<code>*</code>) and single-character (<code>?</code>) wildcards to specify multiple files.  </p>\n<p> <strong>Security Note</strong> In order to execute, the <code>Kill</code> function requires <code>Read</code> and <code>PathDiscovery</code> flags of <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> to be granted to the executing code. For more information, see <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a><a href=\"http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675\" data-linktype=\"external\">Code Access Permissions</a></p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_LineInput_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LineInput(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads a single line from an open sequential file and assigns it to a <code>String</code> variable.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string LineInput (int FileNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Reads a single line from an open sequential file and assigns it to a <code>String</code> variable.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>End of file reached.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>FileNumber</code> does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>LineInput</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> Data read with <code>LineInput</code> is usually written to a file by using <code>Print</code>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When reading from files, do not make decisions about the contents of a file based on the file name extension. For example, a file that is named Form1.vb may not be a Visual Basic source file.  </p>\n</div>\n<p> The <code>LineInput</code> function reads from a file one character at a time until it encounters a carriage return (<code>Chr(</code>13<code>)</code>) or carriage return/line feed (<code>Chr(</code>13<code>)</code> + <code>Chr(</code>10<code>)</code>) sequence. Carriage return/line feed sequences are skipped instead of appended to the character string.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Reading from a file by using the <code>LineInput</code> function requires <code>Read</code> access from the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> enumeration.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Loc_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Loc(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <code>Long</code> value that specifies the current read/write position in an open file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static long Loc (int FileNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid <code>Integer</code> file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns a <code>Long</code> value that specifies the current read/write position in an open file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Loc</code> function is zero-based; using it to retrieve the first byte in a file will return 0.  </p>\n<p> The <code>Loc</code> function is provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> The following describes the return value for each file access mode:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mode</td>\n<td>Return value</td>\n</tr>\n<tr>\n<td><code>Random</code></td>\n<td>Number of the last record read from or written to the file.</td>\n</tr>\n<tr>\n<td><code>Sequential</code></td>\n<td>Current byte position in the file divided by 128. However, information returned by <code>Loc</code> for sequential files is neither used nor required.</td>\n</tr>\n<tr>\n<td><code>Binary</code></td>\n<td>Position of the last byte read or written.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Lock_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lock(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Controls access by other processes to all or part of a file opened by using the <code>Open</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Lock</code> and <code>Unlock</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Lock (int FileNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Lock</code> and <code>Unlock</code> functions are used in environments where several processes might need access to the same file.  </p>\n<p> <code>Lock</code> and <code>Unlock</code> functions are always used in pairs. The arguments to <code>Lock</code> and <code>Unlock</code> must be identical.  </p>\n<p> If <code>Record</code>, or <code>FromRecord</code> and <code>ToRecord</code> are not supplied, the lock will be for the whole file. If <code>Record</code> alone is specified the single record will be locked/unlocked.  </p>\n<p> If the file has been opened for sequential input or output, <code>Lock</code> and <code>Unlock</code> affect the whole file, regardless of the range specified by <code>FromRecord</code> and<code>ToRecord</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Lock_System_Int32_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lock(Int32,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Controls access by other processes to all or part of a file opened by using the <code>Open</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Lock</code> and <code>Unlock</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Lock (int FileNumber, long Record);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Record</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Number of the only record or byte to lock or unlock</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Lock</code> and <code>Unlock</code> functions are used in environments where several processes might need access to the same file.  </p>\n<p> <code>Lock</code> and <code>Unlock</code> functions are always used in pairs. The arguments to <code>Lock</code> and <code>Unlock</code> must be identical.  </p>\n<p> If <code>Record</code>, or <code>FromRecord</code> and <code>ToRecord</code> are not supplied, the lock will be for the whole file. If <code>Record</code> alone is specified the single record will be locked/unlocked.  </p>\n<p> If the file has been opened for sequential input or output, <code>Lock</code> and <code>Unlock</code> affect the whole file, regardless of the range specified by <code>FromRecord</code> and<code>ToRecord</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Lock_System_Int32_System_Int64_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lock(Int32,Int64,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Controls access by other processes to all or part of a file opened by using the <code>Open</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Lock</code> and <code>Unlock</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Lock (int FileNumber, long FromRecord, long ToRecord);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FromRecord</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Number of the first record or byte to lock or unlock.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ToRecord</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Number of the last record or byte to lock or unlock.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Lock</code> and <code>Unlock</code> functions are used in environments where several processes might need access to the same file.  </p>\n<p> <code>Lock</code> and <code>Unlock</code> functions are always used in pairs. The arguments to <code>Lock</code> and <code>Unlock</code> must be identical.  </p>\n<p> If <code>Record</code>, or <code>FromRecord</code> and <code>ToRecord</code> are not supplied, the lock will be for the whole file. If <code>Record</code> alone is specified the single record will be locked/unlocked.  </p>\n<p> If the file has been opened for sequential input or output, <code>Lock</code> and <code>Unlock</code> affect the whole file, regardless of the range specified by <code>FromRecord</code> and<code>ToRecord</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_LOF_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LOF(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <code>Long</code> representing the size, in bytes, of a file opened by using the <code>FileOpen</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>LOF</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static long LOF (int FileNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. An <code>Integer</code> that contains a valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns a <code>Long</code> representing the size, in bytes, of a file opened by using the <code>FileOpen</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>LOF</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the <code>FileLen</code> function to obtain the length of a file that is not open.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_MkDir_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MkDir(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a new directory. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>MkDir</code>. For more information, see <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.CreateDirectory*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void MkDir (string Path);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Path</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that identifies the directory to be created. The <code>Path</code> may include the drive. If no drive is specified, <code>MkDir</code> creates the new directory on the current drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>Path</code> is not specified or is empty.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Permission denied.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Directory already exists.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This function creates a new directory.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Print_System_Int32_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Print(Int32,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes display-formatted data to a sequential file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Print (int FileNumber, object[] Output);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Output</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Zero or more comma-delimited expressions to write to a file.  </p>\n<p> The <code>Output</code> argument settings are:  </p>\n<p> <code>T:System.IO.IOException</code>: File mode is invalid.  </p>\n<p> <code>T:System.IO.IOException</code>: <code>FileNumber</code> does not exist.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Print</code> and <code>PrintLine</code> functions are provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> <code>Print</code> does not include a line feed at the end of a line; however, <code>PrintLine</code> does include a line feed.  </p>\n<p> Data written with <code>Print</code> is usually read from a file by using <code>LineInput</code> or <code>Input</code>.  </p>\n<p> If you omit <code>Output</code> for <code>PrintLine</code>, a blank line is printed to the file; for <code>Print</code>, nothing is output. Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and <code>TAB</code> may cause inconsistent results.  </p>\n<p> For <code>Boolean</code> data, either <code>True</code> or <code>False</code> is printed. The <code>True</code> and <code>False</code> keywords are not translated, regardless of the locale.  </p>\n<p> Date data is written to the file by using the standard short date format recognized by your system. When either the date or the time component is missing or zero, only the part provided is written to the file.  </p>\n<p> Nothing is written to the file if <code>Output</code> data is empty. However, if <code>Output</code> list data is <code>DBNull</code>, <code>Null</code> is written to the file.  </p>\n<p> For <code>Error</code> data, the output appears as <code>Error errorcode</code>. The <code>Error</code> keyword is not translated regardless of the locale.  </p>\n<p> All data written to the file by using <code>Print</code> is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator. If the user wishes to output data for use by multiple locales, <code>Write</code> should be used.  </p>\n<p> Writing to a file by using the <code>Print</code> or <code>PrintLine</code> functions requires <code>Write</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> .</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_PrintLine_System_Int32_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PrintLine(Int32,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes display-formatted data to a sequential file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void PrintLine (int FileNumber, object[] Output);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Output</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Zero or more comma-delimited expressions to write to a file.  </p>\n<p> The <code>Output</code> argument settings are:  </p>\n<p> <code>T:System.IO.IOException</code>: File mode is invalid.  </p>\n<p> <code>T:System.IO.IOException</code>: <code>FileNumber</code> does not exist.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Print</code> and <code>PrintLine</code> functions are provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> <code>Print</code> does not include a line feed at the end of a line; however,<code>PrintLine</code> does include a line feed.  </p>\n<p> Data written with <code>Print</code> is usually read from a file by using <code>LineInput</code> or <code>Input</code>.  </p>\n<p> If you omit <code>Output</code> for <code>PrintLine</code>, a blank line is printed to the file; for <code>Print</code>, nothing is output. Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and <code>TAB</code> may cause inconsistent results.  </p>\n<p> For <code>Boolean</code> data, either <code>True</code> or <code>False</code> is printed. The <code>True</code> and <code>False</code> keywords are not translated, regardless of the locale.  </p>\n<p> Date data is written to the file by using the standard short date format recognized by the system. When either the date or the time component is missing or zero, only the part provided is written to the file.  </p>\n<p> Nothing is written to the file if <code>Output</code> data is empty. However, if <code>Output</code> list data is <code>DBNull</code>, <code>Null</code> is written to the file.  </p>\n<p> For <code>Error</code> data, the output appears as <code>Error errorcode</code>. The <code>Error</code> keyword is not translated regardless of the locale.  </p>\n<p> All data written to the file by using <code>Print</code> is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator. If the user wishes to output data for use by multiple locales, <code>Write</code> should be used.  </p>\n<p> Writing to a file by using the <code>Print</code> or <code>PrintLine</code> functions requires <code>Write</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> .</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Rename_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Rename(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Renames a disk file or directory. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Rename</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Rename (string OldPath, string NewPath);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>OldPath</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies the existing file name and location. <code>OldPath</code> may include the directory, and drive, of the file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>NewPath</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies the new file name and location. <code>NewPath</code> may include directory and drive of the destination location. The file name specified by <code>NewPath</code> cannot already exist.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Path is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>OldPath</code> file does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Cannot rename to different device.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The<code>Rename</code> function renames a file and moves it to a different directory, if it is required. The <code>Rename</code> function can move a file across drives, but it can only rename an existing directory when both <code>NewPath</code> and <code>OldPath</code> are located on the same drive. <code>Rename</code> cannot create a new file or directory.  </p>\n<p> Using the <code>Rename</code> function on an open file produces an error. You must close an open file before renaming it. <code>Rename</code> arguments cannot include multiple-character (*) and single-character (?) wildcards.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When using <code>Rename</code> to copy a file from an unprotected location to a protected location, the file retains the less restricted rights. Check to make sure that you are not introducing a possible security risk.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Reset\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Reset()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Closes all disk files opened by using the <code>FileOpen</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Reset</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Reset ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Reset</code> function closes all active files opened by the <code>FileOpen</code> function and has the same function as <code>FileClose()</code> without any parameters.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_RmDir_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RmDir(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes an existing directory. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>RmDir</code>. For more information, see <span class=\"xref\">crosoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void RmDir (string Path);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Path</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that identifies the directory or folder to be removed. <code>Path</code> can include the drive. If no drive is specified, <code>RmDir</code> removes the directory on the current drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>Path</code> is not specified or is empty.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Target directory contains files.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Directory does not exist.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An error occurs if you try to use <code>RmDir</code> on a directory that contains files. Use the <code>Kill</code> function to delete all files before you try to remove a directory.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Seek_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Seek(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <code>Long</code> specifying the current read/write position in a file opened by using the <code>FileOpen</code> function, or sets the position for the next read/write operation in a file opened by using the <code>FileOpen</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Seek</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static long Seek (int FileNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. An <code>Integer</code> that contains a valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns a <code>Long</code> specifying the current read/write position in a file opened by using the <code>FileOpen</code> function, or sets the position for the next read/write operation in a file opened by using the <code>FileOpen</code> function.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>Seek</code> returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.  </p>\n<p> The following describes the return values for each file access mode:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mode</td>\n<td>Return Value</td>\n</tr>\n<tr>\n<td><code>Random</code></td>\n<td>Number of the next record read or written</td>\n</tr>\n<tr>\n<td><code>Binary</code>, <code>Input</code>, <code>Output</code>, <code>Append</code></td>\n<td>Byte position at which the next operation occurs. The first byte in a file is at position 1, the second byte is at position 2, and so on.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Seek_System_Int32_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Seek(Int32,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <code>Long</code> specifying the current read/write position in a file opened by using the <code>FileOpen</code> function, or sets the position for the next read/write operation in a file opened by using the <code>FileOpen</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Seek</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Seek (int FileNumber, long Position);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. An <code>Integer</code> that contains a valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Position</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>Seek</code> returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.  </p>\n<p> The following describes the return values for each file access mode:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mode</td>\n<td>Return Value</td>\n</tr>\n<tr>\n<td><code>Random</code></td>\n<td>Number of the next record read or written</td>\n</tr>\n<tr>\n<td><code>Binary</code>, <code>Input</code>, <code>Output</code>, <code>Append</code></td>\n<td>Byte position at which the next operation occurs. The first byte in a file is at position 1, the second byte is at position 2, and so on.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_SetAttr_System_String_Microsoft_VisualBasic_FileAttribute_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SetAttr(String,FileAttribute)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Sets attribute information for a file. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>SetAttr</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>PathName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. <code>String</code> expression that specifies a file name. <code>PathName</code> can include directory or folder, and drive.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.fileattribute\" data-linktype=\"relative-path\">FileAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Constant or numeric expression, whose sum specifies file attributes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>Attribute</code> type is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A run-time error occurs if you try to set the attributes of an open file.  </p>\n<p> The <code>Attributes</code> argument enumeration values are as follows:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Value</td>\n<td>Constant</td>\n<td>Description</td>\n</tr>\n<tr>\n<td><code>Normal</code></td>\n<td><code>vbNormal</code></td>\n<td>Normal (default).</td>\n</tr>\n<tr>\n<td><code>ReadOnly</code></td>\n<td><code>vbReadOnly</code></td>\n<td>Read-only.</td>\n</tr>\n<tr>\n<td><code>Hidden</code></td>\n<td><code>vbHidden</code></td>\n<td>Hidden.</td>\n</tr>\n<tr>\n<td><code>System</code></td>\n<td><code>vbSystem</code></td>\n<td>System file.</td>\n</tr>\n<tr>\n<td><code>Volume</code></td>\n<td><code>vbVolume</code></td>\n<td>Volume label</td>\n</tr>\n<tr>\n<td><code>Directory</code></td>\n<td><code>vbDirectory</code></td>\n<td>Directory or folder.</td>\n</tr>\n<tr>\n<td><code>Archive</code></td>\n<td><code>vbArchive</code></td>\n<td>File has changed since last backup.</td>\n</tr>\n<tr>\n<td><code>Alias</code></td>\n<td><code>vbAlias</code></td>\n<td>File has a different name.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code instead of the actual values.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_SPC_System_Int16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SPC(Int16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used with the <code>Print</code> or <code>PrintLine</code> function to position output.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static Microsoft.VisualBasic.SpcInfo SPC (short Count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. The number of spaces to insert before displaying or printing the next expression in a list.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.spcinfo\" data-linktype=\"relative-path\">SpcInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Used with the <code>Print</code> or <code>PrintLine</code> function to position output.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>Count</code> is less than the output line width, the next print position immediately follows the number of spaces printed. If<code>Count</code> is greater than the output line width, <code>SPC</code> calculates the next print position using the formula:  </p>\n<p> <code>currentprintposition</code>(+(<code>Count``Mod``width</code>))  </p>\n<p> For example, if the current print position is 24, the output line width is 80, and you specify <code>SPC(</code>90<code>)</code>, the next print will start at position 34 (current print position + the remainder of 90/80). If the difference between the current print position and the output line width is less than <code>Count</code> (or <code>Count</code> <code>Mod</code> <em>width</em>), the <code>SPC</code> function skips to the start of the next line and generates spaces equal to <code>Count</code> – (<em>width</em> – <em>currentprintposition</em>).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Make sure your tabular columns are wide enough to allow for wide letters.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_TAB\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TAB()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used with the <code>Print</code> or <code>PrintLine</code> functions to position output.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static Microsoft.VisualBasic.TabInfo TAB ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tabinfo\" data-linktype=\"relative-path\">TabInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Used with the <code>Print</code> or <code>PrintLine</code> functions to position output.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the current print position on the current line is larger than <code>Column</code>, <code>TAB</code> skips to the column value equal to <code>Column</code> on the next output line. If <code>Column</code> is less than 1, <code>TAB</code> moves the print position to column 1. If <code>Column</code> is larger than the output line width, <code>TAB</code> calculates the next print position using the formula:  </p>\n<p> Column Mod width  </p>\n<p> For example, if <em>width</em> is 80 and you specify <code>TAB(</code>90<code>)</code>, the next print will start at column 10 (the remainder of 90/80). If <code>Column</code> is less than the current print position, printing starts on the next line at the calculated print position. If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.  </p>\n<p> The leftmost print position on an output line is always 1. When you use the <code>Print</code> or <code>PrintLine</code> functions to print to files, the rightmost print position is the current width of the output file, which you can set using the <code>FileWidth</code> function.  </p>\n<p> The <code>TAB</code> function can also be used with the <code>WriteLine</code> function. It cannot be used with <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Make sure your tabular columns are wide enough to contain wide letters.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_TAB_System_Int16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TAB(Int16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used with the <code>Print</code> or <code>PrintLine</code> functions to position output.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static Microsoft.VisualBasic.TabInfo TAB (short Column);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Column</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. The column number moved to before displaying or printing the next expression in a list. If omitted, <code>TAB</code> moves the insertion point to the start of the next print zone.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.tabinfo\" data-linktype=\"relative-path\">TabInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Used with the <code>Print</code> or <code>PrintLine</code> functions to position output.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the current print position on the current line is greater than <code>Column</code>, <code>TAB</code> skips to the column value equal to <code>Column</code> on the next output line. If <code>Column</code> is less than 1, <code>TAB</code> moves the print position to column 1. If <code>Column</code> is greater than the output line width, <code>TAB</code> calculates the next print position using the formula:  </p>\n<p> Column Mod width  </p>\n<p> For example, if <em>width</em> is 80 and you specify <code>TAB(</code>90<code>)</code>, the next print will start at column 10 (the remainder of 90/80). If <code>Column</code> is less than the current print position, printing starts on the next line at the calculated print position. If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.  </p>\n<p> The leftmost print position on an output line is always 1. When you use the <code>Print</code> or <code>PrintLine</code> functions to print to files, the rightmost print position is the current width of the output file, which you can set using the <code>FileWidth</code> function.  </p>\n<p> The <code>TAB</code> function can also be used with the <code>WriteLine</code> function. It cannot be used with <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Make sure your tabular columns are wide enough to contain wide letters.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Unlock_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Unlock(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Controls access by other processes to all or part of a file opened by using the <code>Open</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Lock</code> and <code>Unlock</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Unlock (int FileNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Lock</code> and <code>Unlock</code> functions are used in environments where several processes might need access to the same file.  </p>\n<p> <code>Lock</code> and <code>Unlock</code> functions are always used in pairs. The arguments to <code>Lock</code> and <code>Unlock</code> must be identical.  </p>\n<p> If <code>Record</code>, or <code>FromRecord</code> and <code>ToRecord</code> are not supplied, the lock will be for the whole file. If <code>Record</code> alone is specified the single record will be locked/unlocked.  </p>\n<p> If the file has been opened for sequential input or output, <code>Lock</code> and <code>Unlock</code> affect the whole file, regardless of the range specified by <code>FromRecord</code> and<code>ToRecord</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Unlock_System_Int32_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Unlock(Int32,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Controls access by other processes to all or part of a file opened by using the <code>Open</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Lock</code> and <code>Unlock</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Unlock (int FileNumber, long Record);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Record</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Number of the only record or byte to lock or unlock</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Lock</code> and <code>Unlock</code> functions are used in environments where several processes might need access to the same file.  </p>\n<p> <code>Lock</code> and <code>Unlock</code> functions are always used in pairs. The arguments to <code>Lock</code> and <code>Unlock</code> must be identical.  </p>\n<p> If <code>Record</code>, or <code>FromRecord</code> and <code>ToRecord</code> are not supplied, the lock will be for the whole file. If <code>Record</code> alone is specified the single record will be locked/unlocked.  </p>\n<p> If the file has been opened for sequential input or output, <code>Lock</code> and <code>Unlock</code> affect the whole file, regardless of the range specified by <code>FromRecord</code> and<code>ToRecord</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Unlock_System_Int32_System_Int64_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Unlock(Int32,Int64,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Controls access by other processes to all or part of a file opened by using the <code>Open</code> function. The <code>My</code> feature gives you better productivity and performance in file I/O operations than <code>Lock</code> and <code>Unlock</code>. For more information, see <a class=\"xref\" href=\"microsoft.visualbasic.fileio.filesystem\" data-linktype=\"relative-path\">FileSystem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Unlock (int FileNumber, long FromRecord, long ToRecord);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. Any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FromRecord</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Number of the first record or byte to lock or unlock.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ToRecord</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. Number of the last record or byte to lock or unlock.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Lock</code> and <code>Unlock</code> functions are used in environments where several processes might need access to the same file.  </p>\n<p> <code>Lock</code> and <code>Unlock</code> functions are always used in pairs. The arguments to <code>Lock</code> and <code>Unlock</code> must be identical.  </p>\n<p> If <code>Record</code>, or <code>FromRecord</code> and <code>ToRecord</code> are not supplied, the lock will be for the whole file. If <code>Record</code> alone is specified the single record will be locked/unlocked.  </p>\n<p> If the file has been opened for sequential input or output, <code>Lock</code> and <code>Unlock</code> affect the whole file, regardless of the range specified by <code>FromRecord</code> and<code>ToRecord</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_Write_System_Int32_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Write(Int32,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data to a sequential file. Data written with <code>Write</code> is usually read from a file by using <code>Input</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Write (int FileNumber, object[] Output);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. An <code>Integer</code> expression that contains any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Output</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. One or more comma-delimited expressions to write to a file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>File mode is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Write</code> and <code>WriteLine</code> functions are provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> If you omit <code>Output</code>, a blank line is printed to the file. Multiple expressions can be separated with a comma.  </p>\n<p> Unlike the <code>Print</code> function, the <code>Write</code> function inserts commas between items and quotation marks around strings as they are written to the file. You do not have to put explicit delimiters in the list. When <code>Write</code> is used to write data to a file, only numeric, <code>Boolean</code>, date, null, and <code>Error</code> data formats are supported. The following universal assumptions are followed so the data can always be read and correctly interpreted using <code>Input</code>, regardless of locale:  </p>\n<ul>\n<li><p>Numeric data is always written using the period as the decimal separator.  </p>\n</li>\n<li><p>For <code>Boolean</code> data, either <code>#TRUE#</code> or <code>#FALSE#</code> is printed. The <code>True</code> and <code>False</code> keywords are not translated, regardless of locale.  </p>\n</li>\n<li><p>Date data is written to the file using the universal date format. When either the date or the time component is missing or zero, only the part provided is written to the file.  </p>\n</li>\n<li><p>Nothing is written to the file if <code>Output</code> data is empty. However, for null data, <code>#NULL#</code> is written.  </p>\n</li>\n<li><p>For <code>Error</code> data, the output appears as <code>#ERROR errorcode#</code>. The <code>Error</code> keyword is not translated, regardless of locale.  </p>\n<p><code>WriteLine</code> inserts a newline character (that is, a carriage return/line feed, or <code>Chr(13) + Chr(10)</code>), after it has written the final character in <code>Output</code> to the file.  </p>\n<p>You can embed quotation marks in a string by using double quotation marks, or &quot;&quot;. For example,  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#63\">        Dim x As String = &quot;Double quotation marks aren&#39;t &quot;&quot;difficult&quot;&quot; to handle.&quot;\n</code></pre><p>returns a string with the value of <code>Double quotation marks aren&#39;t &quot;difficult&quot; to handle</code>.  </p>\n<p>Writing to a file by using the <code>Write</code> or <code>WriteLine</code> functions requires <code>Append</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> .</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_VisualBasic_FileSystem_WriteLine_System_Int32_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteLine(Int32,Object[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes data to a sequential file. Data written with <code>Write</code> is usually read from a file by using <code>Input</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void WriteLine (int FileNumber, object[] Output);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>FileNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Required. An <code>Integer</code> expression that contains any valid file number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>Output</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Optional. One or more comma-delimited expressions to write to a file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Write</code> and <code>WriteLine</code> functions are provided for backward compatibility and may affect performance. For non-legacy applications, the <code>My.Computer.FileSystem</code> object provides better performance. For more information, see <a href=\"../Topic/File%20Access%20with%20Visual%20Basic.md\" data-linktype=\"relative-path\">File Access with Visual Basic</a>.  </p>\n<p> If you omit <code>Output</code>, a blank line is printed to the file. Multiple expressions can be separated with a comma.  </p>\n<p> Unlike the <code>Print</code> function, the <code>Write</code> function inserts commas between items and quotation marks around strings as they are written to the file. You do not have to put explicit delimiters in the list. When <code>Write</code> is used to write data to a file, only numeric, <code>Boolean</code>, date, null, and <code>Error</code> data formats are supported. The following universal assumptions are followed so the data can always be read and correctly interpreted using <code>Input</code>, regardless of locale:  </p>\n<ul>\n<li><p>Numeric data is always written using the period as the decimal separator.  </p>\n</li>\n<li><p>For <code>Boolean</code> data, either <code>#TRUE#</code> or <code>#FALSE#</code> is printed. The <code>True</code> and <code>False</code> keywords are not translated, regardless of locale.  </p>\n</li>\n<li><p>Date data is written to the file using the universal date format. When either the date or the time component is missing or zero, only the part provided is written to the file.  </p>\n</li>\n<li><p>Nothing is written to the file if <code>Output</code> data is empty. However, for null data, <code>#NULL#</code> is written.  </p>\n</li>\n<li><p>For <code>Error</code> data, the output appears as <code>#ERROR errorcode#</code>. The <code>Error</code> keyword is not translated, regardless of locale.  </p>\n<p><code>WriteLine</code> inserts a newline character (that is, a carriage return/line feed, or <code>Chr(13) + Chr(10)</code>), after it has written the final character in <code>Output</code> to the file.  </p>\n<p>You can embed quotation marks in a string by using double quotation marks, or &quot;&quot;. For example,  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#63\">        Dim x As String = &quot;Double quotation marks aren&#39;t &quot;&quot;difficult&quot;&quot; to handle.&quot;\n</code></pre><p>returns a string with the value of <code>Double quotation marks aren&#39;t &quot;difficult&quot; to handle</code>.  </p>\n<p>Writing to a file by using the <code>Write</code> or <code>WriteLine</code> functions requires <code>Append</code> access from the <code>FileIOPermissionAccess</code> enumeration. For more information, see <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> .</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualBasic.FileSystem.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualBasic.FileSystem.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.ChDir\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.ChDrive\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.CurDir\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Dir\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.EOF\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileAttr\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileClose\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileCopy\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileDateTime\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileGet\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileGetObject\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileLen\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileOpen\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FilePut\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FilePutObject\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FileWidth\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.FreeFile\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.GetAttr\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Input\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.InputString\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Kill\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.LineInput\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Loc\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Lock\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.LOF\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.MkDir\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Print\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.PrintLine\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Rename\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Reset\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.RmDir\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Seek\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.SetAttr\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.SPC\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.TAB\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Unlock\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.Write\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.FileSystem.WriteLine\">\r\n<meta name=\"APILocation\" content=\"Microsoft.VisualBasic.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2e57f476-ed56-5586-4169-a675d1345395\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The FileSystem module contains the procedures that are used to perform file, directory or folder, and system operations. The My feature gives you better productivity and performance in file I/O opera…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.VisualBasic/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.VisualBasic.FileSystem\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualBasic.FileSystem.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualBasic.FileSystem.yml","open_to_public_contributors":true,"api_name":["Microsoft.VisualBasic.FileSystem","Microsoft.VisualBasic.FileSystem.ChDir","Microsoft.VisualBasic.FileSystem.ChDrive","Microsoft.VisualBasic.FileSystem.CurDir","Microsoft.VisualBasic.FileSystem.Dir","Microsoft.VisualBasic.FileSystem.EOF","Microsoft.VisualBasic.FileSystem.FileAttr","Microsoft.VisualBasic.FileSystem.FileClose","Microsoft.VisualBasic.FileSystem.FileCopy","Microsoft.VisualBasic.FileSystem.FileDateTime","Microsoft.VisualBasic.FileSystem.FileGet","Microsoft.VisualBasic.FileSystem.FileGetObject","Microsoft.VisualBasic.FileSystem.FileLen","Microsoft.VisualBasic.FileSystem.FileOpen","Microsoft.VisualBasic.FileSystem.FilePut","Microsoft.VisualBasic.FileSystem.FilePutObject","Microsoft.VisualBasic.FileSystem.FileWidth","Microsoft.VisualBasic.FileSystem.FreeFile","Microsoft.VisualBasic.FileSystem.GetAttr","Microsoft.VisualBasic.FileSystem.Input","Microsoft.VisualBasic.FileSystem.InputString","Microsoft.VisualBasic.FileSystem.Kill","Microsoft.VisualBasic.FileSystem.LineInput","Microsoft.VisualBasic.FileSystem.Loc","Microsoft.VisualBasic.FileSystem.Lock","Microsoft.VisualBasic.FileSystem.LOF","Microsoft.VisualBasic.FileSystem.MkDir","Microsoft.VisualBasic.FileSystem.Print","Microsoft.VisualBasic.FileSystem.PrintLine","Microsoft.VisualBasic.FileSystem.Rename","Microsoft.VisualBasic.FileSystem.Reset","Microsoft.VisualBasic.FileSystem.RmDir","Microsoft.VisualBasic.FileSystem.Seek","Microsoft.VisualBasic.FileSystem.SetAttr","Microsoft.VisualBasic.FileSystem.SPC","Microsoft.VisualBasic.FileSystem.TAB","Microsoft.VisualBasic.FileSystem.Unlock","Microsoft.VisualBasic.FileSystem.Write","Microsoft.VisualBasic.FileSystem.WriteLine"],"api_location":["Microsoft.VisualBasic.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.VisualBasic.FileSystem","Microsoft::VisualBasic::FileSystem","Microsoft.VisualBasic.FileSystem.ChDir","Microsoft::VisualBasic::FileSystem::ChDir","Microsoft.VisualBasic.FileSystem.ChDrive","Microsoft::VisualBasic::FileSystem::ChDrive","Microsoft.VisualBasic.FileSystem.CurDir","Microsoft::VisualBasic::FileSystem::CurDir","Microsoft.VisualBasic.FileSystem.Dir","Microsoft::VisualBasic::FileSystem::Dir","Microsoft.VisualBasic.FileSystem.EOF","Microsoft::VisualBasic::FileSystem::EOF","Microsoft.VisualBasic.FileSystem.FileAttr","Microsoft::VisualBasic::FileSystem::FileAttr","Microsoft.VisualBasic.FileSystem.FileClose","Microsoft::VisualBasic::FileSystem::FileClose","Microsoft.VisualBasic.FileSystem.FileCopy","Microsoft::VisualBasic::FileSystem::FileCopy","Microsoft.VisualBasic.FileSystem.FileDateTime","Microsoft::VisualBasic::FileSystem::FileDateTime","Microsoft.VisualBasic.FileSystem.FileGet","Microsoft::VisualBasic::FileSystem::FileGet","Microsoft.VisualBasic.FileSystem.FileGetObject","Microsoft::VisualBasic::FileSystem::FileGetObject","Microsoft.VisualBasic.FileSystem.FileLen","Microsoft::VisualBasic::FileSystem::FileLen","Microsoft.VisualBasic.FileSystem.FileOpen","Microsoft::VisualBasic::FileSystem::FileOpen","Microsoft.VisualBasic.FileSystem.FilePut","Microsoft::VisualBasic::FileSystem::FilePut","Microsoft.VisualBasic.FileSystem.FilePutObject","Microsoft::VisualBasic::FileSystem::FilePutObject","Microsoft.VisualBasic.FileSystem.FileWidth","Microsoft::VisualBasic::FileSystem::FileWidth","Microsoft.VisualBasic.FileSystem.FreeFile","Microsoft::VisualBasic::FileSystem::FreeFile","Microsoft.VisualBasic.FileSystem.GetAttr","Microsoft::VisualBasic::FileSystem::GetAttr","Microsoft.VisualBasic.FileSystem.Input","Microsoft::VisualBasic::FileSystem::Input","Microsoft.VisualBasic.FileSystem.InputString","Microsoft::VisualBasic::FileSystem::InputString","Microsoft.VisualBasic.FileSystem.Kill","Microsoft::VisualBasic::FileSystem::Kill","Microsoft.VisualBasic.FileSystem.LineInput","Microsoft::VisualBasic::FileSystem::LineInput","Microsoft.VisualBasic.FileSystem.Loc","Microsoft::VisualBasic::FileSystem::Loc","Microsoft.VisualBasic.FileSystem.Lock","Microsoft::VisualBasic::FileSystem::Lock","Microsoft.VisualBasic.FileSystem.LOF","Microsoft::VisualBasic::FileSystem::LOF","Microsoft.VisualBasic.FileSystem.MkDir","Microsoft::VisualBasic::FileSystem::MkDir","Microsoft.VisualBasic.FileSystem.Print","Microsoft::VisualBasic::FileSystem::Print","Microsoft.VisualBasic.FileSystem.PrintLine","Microsoft::VisualBasic::FileSystem::PrintLine","Microsoft.VisualBasic.FileSystem.Rename","Microsoft::VisualBasic::FileSystem::Rename","Microsoft.VisualBasic.FileSystem.Reset","Microsoft::VisualBasic::FileSystem::Reset","Microsoft.VisualBasic.FileSystem.RmDir","Microsoft::VisualBasic::FileSystem::RmDir","Microsoft.VisualBasic.FileSystem.Seek","Microsoft::VisualBasic::FileSystem::Seek","Microsoft.VisualBasic.FileSystem.SetAttr","Microsoft::VisualBasic::FileSystem::SetAttr","Microsoft.VisualBasic.FileSystem.SPC","Microsoft::VisualBasic::FileSystem::SPC","Microsoft.VisualBasic.FileSystem.TAB","Microsoft::VisualBasic::FileSystem::TAB","Microsoft.VisualBasic.FileSystem.Unlock","Microsoft::VisualBasic::FileSystem::Unlock","Microsoft.VisualBasic.FileSystem.Write","Microsoft::VisualBasic::FileSystem::Write","Microsoft.VisualBasic.FileSystem.WriteLine","Microsoft::VisualBasic::FileSystem::WriteLine"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2e57f476-ed56-5586-4169-a675d1345395","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/Microsoft.VisualBasic/FileSystem.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FileSystem class | Microsoft Docs","_op_ogTitle":"FileSystem class","description":"The FileSystem module contains the procedures that are used to perform file, directory or folder, and system operations. The My feature gives you better productivity and performance in file I/O opera…","toc_asset_id":"_splitted/Microsoft.VisualBasic/toc.json","toc_rel":"_splitted/Microsoft.VisualBasic/toc.json","source_url":"","ms.assetid":"Microsoft.VisualBasic.FileSystem","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualbasic.filesystem","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualbasic.filesystem","fileRelativePath":"Microsoft.VisualBasic.FileSystem.html"},"themesRelativePathToOutputRoot":"_themes/"}