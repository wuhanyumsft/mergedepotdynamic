{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_AssemblyBuilder\">\r\n      <span class=\"lang-csharp\">AssemblyBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines and represents a dynamic assembly.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._AssemblyBuilder))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class AssemblyBuilder : System.Reflection.Assembly, System.Runtime.InteropServices._AssemblyBuilder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">System.Reflection.Assembly</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AssemblyBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CreateInstance_System_String_\" data-linktype=\"relative-path\">CreateInstance(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CreateInstance_System_String_System_Boolean_\" data-linktype=\"relative-path\">CreateInstance(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CreateInstance_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\" data-linktype=\"relative-path\">CreateInstance(String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CreateQualifiedName_System_String_System_String_\" data-linktype=\"relative-path\">CreateQualifiedName(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_DefinedTypes\" data-linktype=\"relative-path\">DefinedTypes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_EscapedCodeBase\" data-linktype=\"relative-path\">EscapedCodeBase</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ExportedTypes\" data-linktype=\"relative-path\">ExportedTypes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetAssembly_System_Type_\" data-linktype=\"relative-path\">GetAssembly(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetCallingAssembly\" data-linktype=\"relative-path\">GetCallingAssembly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetEntryAssembly\" data-linktype=\"relative-path\">GetEntryAssembly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetExecutingAssembly\" data-linktype=\"relative-path\">GetExecutingAssembly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetFiles\" data-linktype=\"relative-path\">GetFiles()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetLoadedModules\" data-linktype=\"relative-path\">GetLoadedModules()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetModules\" data-linktype=\"relative-path\">GetModules()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetName\" data-linktype=\"relative-path\">GetName()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_System_String_\" data-linktype=\"relative-path\">GetType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetTypes\" data-linktype=\"relative-path\">GetTypes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_IsFullyTrusted\" data-linktype=\"relative-path\">IsFullyTrusted</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_Byte___\" data-linktype=\"relative-path\">Load(Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_Byte___System_Byte___\" data-linktype=\"relative-path\">Load(Byte[],Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_Byte___System_Byte___System_Security_Policy_Evidence_\" data-linktype=\"relative-path\">Load(Byte[],Byte[],Evidence)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_Byte___System_Byte___System_Security_SecurityContextSource_\" data-linktype=\"relative-path\">Load(Byte[],Byte[],SecurityContextSource)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_Reflection_AssemblyName_System_Security_Policy_Evidence_\" data-linktype=\"relative-path\">Load(AssemblyName,Evidence)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_String_\" data-linktype=\"relative-path\">Load(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_String_System_Security_Policy_Evidence_\" data-linktype=\"relative-path\">Load(String,Evidence)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_System_String_\" data-linktype=\"relative-path\">LoadFile(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_System_String_System_Security_Policy_Evidence_\" data-linktype=\"relative-path\">LoadFile(String,Evidence)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_System_String_\" data-linktype=\"relative-path\">LoadFrom(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_System_String_System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\" data-linktype=\"relative-path\">LoadFrom(String,Byte[],AssemblyHashAlgorithm)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_System_String_System_Security_Policy_Evidence_\" data-linktype=\"relative-path\">LoadFrom(String,Evidence)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_System_String_System_Security_Policy_Evidence_System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\" data-linktype=\"relative-path\">LoadFrom(String,Evidence,Byte[],AssemblyHashAlgorithm)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadModule_System_String_System_Byte___\" data-linktype=\"relative-path\">LoadModule(String,Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadModule_System_String_System_Byte___System_Byte___\" data-linktype=\"relative-path\">LoadModule(String,Byte[],Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadWithPartialName_System_String_\" data-linktype=\"relative-path\">LoadWithPartialName(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadWithPartialName_System_String_System_Security_Policy_Evidence_\" data-linktype=\"relative-path\">LoadWithPartialName(String,Evidence)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ModuleResolve\" data-linktype=\"relative-path\">ModuleResolve</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Modules\" data-linktype=\"relative-path\">Modules</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_op_Equality_System_Reflection_Assembly_System_Reflection_Assembly_\" data-linktype=\"relative-path\">op_Equality(Assembly,Assembly)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_op_Inequality_System_Reflection_Assembly_System_Reflection_Assembly_\" data-linktype=\"relative-path\">op_Inequality(Assembly,Assembly)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_System_Byte___\" data-linktype=\"relative-path\">ReflectionOnlyLoad(Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_System_String_\" data-linktype=\"relative-path\">ReflectionOnlyLoad(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoadFrom_System_String_\" data-linktype=\"relative-path\">ReflectionOnlyLoadFrom(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_System_Runtime_InteropServices__Assembly_GetType\" data-linktype=\"relative-path\">_Assembly.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_UnsafeLoadFrom_System_String_\" data-linktype=\"relative-path\">UnsafeLoadFrom(String)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A dynamic assembly is an assembly that is created using the Reflection Emit APIs. The dynamic modules in the assembly are saved when the dynamic assembly is saved using the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_Save_\" data-linktype=\"relative-path\">Save</a> method. To generate an executable, the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_\" data-linktype=\"relative-path\">SetEntryPoint</a> method must be called to identify the method that is the entry point to the assembly. Assemblies are saved as DLLs by default, unless the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_\" data-linktype=\"relative-path\">SetEntryPoint</a> method requests the generation of a console application or a Windows-based application.  </p>\n<p> If a dynamic assembly contains more than one dynamic module, the assembly&#39;s manifest file name should match the module&#39;s name that is specified as the first argument to the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a> method.  </p>\n<p> Some methods on the base <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class, such as <code>GetModules</code> and <code>GetLoadedModules</code>, will not work correctly when called from AssemblyBuilder objects. You can load the defined dynamic assembly and call the methods on the loaded assembly. For example, to ensure that resource modules are included in the returned module list, call <code>GetModules</code> on the loaded <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object.  </p>\n<p> The signing of a dynamic assembly using <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_KeyPair_\" data-linktype=\"relative-path\">KeyPair</a> is not effective until the assembly is saved to disk. So, strong names will not work with transient dynamic assemblies.  </p>\n<p> To get an AssemblyBuilder object, use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method.  </p>\n<h2 id=\"reflection-emit-dynamic-assembly-scenarios\">Reflection emit dynamic assembly scenarios</h2>\n<p> The following are some things to consider when using the AssemblyBuilder class to create dynamic assemblies.  </p>\n<h3 id=\"dynamic-modules\">Dynamic modules</h3>\n<p> Reflection emit supports the creation of dynamic modules defined in dynamic assemblies. A dynamic module created in a dynamic assembly can be transient or persistable.  </p>\n<h3 id=\"restrictions-on-type-references\">Restrictions on type references</h3>\n<p> Assemblies can reference types defined in another assembly. A transient dynamic assembly can safely reference types defined in another transient dynamic assembly, a persistable dynamic assembly, or a static assembly. However, the common language runtime does not allow a persistable dynamic module to reference a type defined in a transient dynamic module. This is because when the persisted dynamic module is loaded after being saved to disk, the runtime cannot resolve the references to types defined in the transient dynamic module.  </p>\n<h3 id=\"restrictions-on-emitting-to-remote-application-domains\">Restrictions on emitting to remote application domains</h3>\n<p> Some scenarios require a dynamic assembly to be created and executed in a remote application domain. Reflection emit does not allow a dynamic assembly to be emitted directly to a remote application domain. The solution is to emit the dynamic assembly in the current application domain, save the emitted dynamic assembly to disk, and then load the dynamic assembly into the remote application domain.  </p>\n<h3 id=\"dynamic-assembly-access-modes\">Dynamic assembly access modes</h3>\n<p> Dynamic assemblies can be created using one of the following access modes:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">System.Reflection.Emit.AssemblyBuilderAccess</a>  \n\n<p> The dynamic assembly represented by an AssemblyBuilder object is transient. The dynamic assembly can only be used to execute the emitted code.  </p>\n</li>\n<li><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">System.Reflection.Emit.AssemblyBuilderAccess</a>  \n\n<p> The dynamic assembly represented by an AssemblyBuilder object is persistable but cannot be executed until the saved portable executable (PE) file has been loaded from disk.  </p>\n</li>\n<li><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">System.Reflection.Emit.AssemblyBuilderAccess</a>  \n\n<p> The dynamic assembly represented by an AssemblyBuilder object is persistable, but can also be executed before and/or after the assembly is saved to disk.  </p>\n<p>The access mode must be specified by providing the appropriate <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a> value in the call to the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method when the dynamic assembly is defined and cannot be changed later. The runtime uses the access mode of a dynamic assembly to optimize the assembly&#39;s internal representation.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_CodeBase\" data-linktype=\"self-bookmark\">CodeBase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the location of the assembly, as specified originally (such as in an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_EntryPoint\" data-linktype=\"self-bookmark\">EntryPoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the entry point of this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_Evidence\" data-linktype=\"self-bookmark\">Evidence</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the evidence for this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_FullName\" data-linktype=\"self-bookmark\">FullName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the display name of the current dynamic assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GlobalAssemblyCache\" data-linktype=\"self-bookmark\">GlobalAssemblyCache</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the assembly was loaded from the global assembly cache.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_HostContext\" data-linktype=\"self-bookmark\">HostContext</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the host context where the dynamic assembly is being created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_ImageRuntimeVersion\" data-linktype=\"self-bookmark\">ImageRuntimeVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the version of the common language runtime that will be saved in the file containing the manifest.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_IsDynamic\" data-linktype=\"self-bookmark\">IsDynamic</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates that the current assembly is a dynamic assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_Location\" data-linktype=\"self-bookmark\">Location</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_ManifestModule\" data-linktype=\"self-bookmark\">ManifestModule</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the module in the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> that contains the assembly manifest.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_PermissionSet\" data-linktype=\"self-bookmark\">PermissionSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the grant set of the current dynamic assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_ReflectionOnly\" data-linktype=\"self-bookmark\">ReflectionOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the dynamic assembly is in the reflection-only context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_SecurityRuleSet\" data-linktype=\"self-bookmark\">SecurityRuleSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_AddResourceFile_System_String_System_String_\" data-linktype=\"self-bookmark\">AddResourceFile(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an existing resource file to this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_AddResourceFile_System_String_System_String_System_Reflection_ResourceAttributes_\" data-linktype=\"self-bookmark\">AddResourceFile(String,String,ResourceAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an existing resource file to this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly that has the specified name and access rights.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a new assembly that has the specified name, access rights, and attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_System_String_\" data-linktype=\"self-bookmark\">DefineDynamicModule(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a named transient dynamic module in this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">DefineDynamicModule(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a named transient dynamic module in this assembly and specifies whether symbol information should be emitted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_System_String_System_String_\" data-linktype=\"self-bookmark\">DefineDynamicModule(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a persistable dynamic module with the given name that will be saved to the specified file. No symbol information is emitted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">DefineDynamicModule(String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a persistable dynamic module, specifying the module name, the name of the file to which the module will be saved, and whether symbol information should be emitted using the default symbol writer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineResource_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">DefineResource(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a standalone managed resource for this assembly with the default public resource attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineResource_System_String_System_String_System_String_System_Reflection_ResourceAttributes_\" data-linktype=\"self-bookmark\">DefineResource(String,String,String,ResourceAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a standalone managed resource for this assembly. Attributes can be specified for the managed resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_System_Byte___\" data-linktype=\"self-bookmark\">DefineUnmanagedResource(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an unmanaged resource for this assembly as an opaque blob of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_System_String_\" data-linktype=\"self-bookmark\">DefineUnmanagedResource(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an unmanaged resource file for this assembly given the name of the resource file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource\" data-linktype=\"self-bookmark\">DefineVersionInfoResource()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an unmanaged version information resource using the information specified in the assembly&#39;s AssemblyName object and the assembly&#39;s custom attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource_System_String_System_String_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">DefineVersionInfoResource(String,String,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an unmanaged version information resource for this assembly with the given specifications.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>, and that derive from a specified attribute type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetCustomAttributesData\" data-linktype=\"self-bookmark\">GetCustomAttributesData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects that contain information about the attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetDynamicModule_System_String_\" data-linktype=\"self-bookmark\">GetDynamicModule(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the dynamic module with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetExportedTypes\" data-linktype=\"self-bookmark\">GetExportedTypes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the exported types defined in this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetFile_System_String_\" data-linktype=\"self-bookmark\">GetFile(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> for the specified file in the file table of the manifest of this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetFiles_System_Boolean_\" data-linktype=\"self-bookmark\">GetFiles(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetLoadedModules_System_Boolean_\" data-linktype=\"self-bookmark\">GetLoadedModules(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetManifestResourceInfo_System_String_\" data-linktype=\"self-bookmark\">GetManifestResourceInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns information about how the given resource has been persisted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetManifestResourceNames\" data-linktype=\"self-bookmark\">GetManifestResourceNames()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the specified manifest resource from this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetManifestResourceStream_System_String_\" data-linktype=\"self-bookmark\">GetManifestResourceStream(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the specified manifest resource from this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetManifestResourceStream_System_Type_System_String_\" data-linktype=\"self-bookmark\">GetManifestResourceStream(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetModule_System_String_\" data-linktype=\"self-bookmark\">GetModule(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the specified module in this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetModules_System_Boolean_\" data-linktype=\"self-bookmark\">GetModules(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all the modules that are part of this assembly, and optionally includes resource modules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetName_System_Boolean_\" data-linktype=\"self-bookmark\">GetName(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> that was specified when the current dynamic assembly was created, and sets the code base as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetReferencedAssemblies\" data-linktype=\"self-bookmark\">GetReferencedAssemblies()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an incomplete list of <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> objects for the assemblies that are referenced by this <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetSatelliteAssembly_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">GetSatelliteAssembly(CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the satellite assembly for the specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetSatelliteAssembly_System_Globalization_CultureInfo_System_Version_\" data-linktype=\"self-bookmark\">GetSatelliteAssembly(CultureInfo,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the specified version of the satellite assembly for the specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_GetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">GetType(String,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the specified type from the types that have been defined and created in the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_Save_System_String_\" data-linktype=\"self-bookmark\">Save(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves this dynamic assembly to disk.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_Save_System_String_System_Reflection_PortableExecutableKinds_System_Reflection_ImageFileMachine_\" data-linktype=\"self-bookmark\">Save(String,PortableExecutableKinds,ImageFileMachine)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves this dynamic assembly to disk, specifying the nature of code in the assembly&#39;s executables and the target platform.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\" data-linktype=\"self-bookmark\">SetCustomAttribute(CustomAttributeBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Set a custom attribute on this assembly using a custom attribute builder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\" data-linktype=\"self-bookmark\">SetCustomAttribute(ConstructorInfo,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Set a custom attribute on this assembly using a specified custom attribute blob.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">SetEntryPoint(MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the entry point for this dynamic assembly, assuming that a console application is being built.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_System_Reflection_MethodInfo_System_Reflection_Emit_PEFileKinds_\" data-linktype=\"self-bookmark\">SetEntryPoint(MethodInfo,PEFileKinds)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the entry point for this assembly and defines the type of the portable executable (PE file) being built.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_AssemblyBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_AssemblyBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_AssemblyBuilder.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_AssemblyBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_CodeBase\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_CodeBase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeBase</div>        \r\n          </div>\r\n    \r\n            <p>Gets the location of the assembly, as specified originally (such as in an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string CodeBase { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The location of the assembly, as specified originally.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the absolute path to the loaded manifest-containing file, use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Location_\" data-linktype=\"relative-path\">Location</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_EntryPoint\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_EntryPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EntryPoint</div>        \r\n          </div>\r\n    \r\n            <p>Returns the entry point of this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodInfo EntryPoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The entry point of this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_Evidence\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_Evidence_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Evidence</div>        \r\n          </div>\r\n    \r\n            <p>Gets the evidence for this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Policy.Evidence Evidence { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </div>\r\n                  <p>The evidence for this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_FullName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_FullName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the display name of the current dynamic assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string FullName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The display name of the dynamic assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for a description of the format of the display name of an assembly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GlobalAssemblyCache\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GlobalAssemblyCache_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GlobalAssemblyCache</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the assembly was loaded from the global assembly cache.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool GlobalAssemblyCache { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Always <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> objects always represent dynamic assemblies, and therefore are never loaded from the global assembly cache.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_HostContext\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_HostContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HostContext</div>        \r\n          </div>\r\n    \r\n            <p>Gets the host context where the dynamic assembly is being created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long HostContext { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A value that indicates the host context where the dynamic assembly is being created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_ImageRuntimeVersion\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_ImageRuntimeVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageRuntimeVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the version of the common language runtime that will be saved in the file containing the manifest.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ImageRuntimeVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representing the common language runtime version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_IsDynamic\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_IsDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDynamic</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates that the current assembly is a dynamic assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDynamic { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Always <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> object always represents a dynamic assembly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_Location\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_Location_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Location</div>        \r\n          </div>\r\n    \r\n            <p>Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Location { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, the <code>Location</code> is that of the file before being shadow-copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_ManifestModule\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_ManifestModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManifestModule</div>        \r\n          </div>\r\n    \r\n            <p>Gets the module in the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> that contains the assembly manifest.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module ManifestModule { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The manifest module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_PermissionSet\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_PermissionSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PermissionSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets the grant set of the current dynamic assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.PermissionSet PermissionSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </div>\r\n                  <p>The grant set of the current dynamic assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a> objects can contain sensitive information such as paths. Therefore, full trust is required to access these objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_ReflectionOnly\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_ReflectionOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the dynamic assembly is in the reflection-only context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool ReflectionOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the dynamic assembly is in the reflection-only context; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To emit a dynamic assembly in the reflection-only context, specify <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">System.Reflection.Emit.AssemblyBuilderAccess</a> when you create the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>. If a dynamic assembly is emitted in the reflection-only context, its code cannot be executed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> After you have saved a dynamic assembly to disk, you can use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> method to load the completed assembly into the reflection-only context. However, the assembly can no longer be modified.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_SecurityRuleSet\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_SecurityRuleSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecurityRuleSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.SecurityRuleSet SecurityRuleSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityruleset\" data-linktype=\"relative-path\">SecurityRuleSet</a></div>\r\n                  </div>\r\n                  <p>The security rule set that the CLR enforces for this dynamic assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The .NET Framework 4 always enforces level 2 transparency (<a class=\"xref\" href=\"system.security.securityruleset\" data-linktype=\"relative-path\">System.Security.SecurityRuleSet</a>) for the dynamic assemblies it generates.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_AddResourceFile_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_AddResourceFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddResourceFile(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an existing resource file to this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddResourceFile (string name, string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The logical name of the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The physical file name (.resources file) to which the logical name is mapped. This should not include a path; the file must be in the same directory as the assembly to which it is added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> has been previously defined.  </p>\n<p> -or-  </p>\n<p> There is another file in the assembly named <code>fileName</code>.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>fileName</code> is zero, or if <code>fileName</code> includes a path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file <code>fileName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>fileName</code> should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.  </p>\n<p> The managed resources in the file are assumed to be public.  </p>\n<p> The specified resource file must be in the directory where the assembly will be saved.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates how to attach a resource file to a dynamically created assembly, using <code>AddResourceFile</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class AsmBuilderGetFileDemo\n{\npublic:\n   static String^ myResourceFileName = &quot;MyResource.txt&quot;;\n   static FileInfo^ CreateResourceFile()\n   {\n      FileInfo^ f = gcnew FileInfo( myResourceFileName );\n      StreamWriter^ sw = f-&gt;CreateText();\n      sw-&gt;WriteLine( &quot;Hello, world!&quot; );\n      sw-&gt;Close();\n      return f;\n   }\n\n   static AssemblyBuilder^ BuildDynAssembly()\n   {\n      String^ myAsmFileName = &quot;MyAsm.dll&quot;;\n      AppDomain^ myDomain = Thread::GetDomain();\n      AssemblyName^ myAsmName = gcnew AssemblyName;\n      myAsmName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ myAsmBuilder = myDomain-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::RunAndSave );\n      myAsmBuilder-&gt;AddResourceFile( &quot;MyResource&quot;, myResourceFileName );\n      \n      // To confirm that the resource file has been added to the manifest,\n      // we will save the assembly as MyAsm.dll. You can view the manifest\n      // and confirm the presence of the resource file by running\n      // &quot;ildasm MyAsm.dll&quot; from the prompt in the directory where you executed\n      // the compiled code.\n      myAsmBuilder-&gt;Save( myAsmFileName );\n      return myAsmBuilder;\n   }\n\n};\n\nint main()\n{\n   FileStream^ myResourceFS = nullptr;\n   AsmBuilderGetFileDemo::CreateResourceFile();\n   Console::WriteLine( &quot;The contents of MyResource.txt, via GetFile:&quot; );\n   AssemblyBuilder^ myAsm = AsmBuilderGetFileDemo::BuildDynAssembly();\n   try\n   {\n      myResourceFS = myAsm-&gt;GetFile( AsmBuilderGetFileDemo::myResourceFileName );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( &quot;---&quot; );\n      Console::WriteLine( &quot;System::Reflection::Emit::AssemblyBuilder::GetFile<br>is not supported in this SDK build.&quot; );\n      Console::WriteLine( &quot;The file data will now be retrieved directly, via a new FileStream.&quot; );\n      Console::WriteLine( &quot;---&quot; );\n      myResourceFS = gcnew FileStream( AsmBuilderGetFileDemo::myResourceFileName,FileMode::Open );\n   }\n\n   StreamReader^ sr = gcnew StreamReader( myResourceFS,System::Text::Encoding::ASCII );\n   Console::WriteLine( sr-&gt;ReadToEnd() );\n   sr-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1\">\nusing System;\nusing System.IO;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass AsmBuilderGetFileDemo\n\n{\n   private static string myResourceFileName = &quot;MyResource.txt&quot;;\n\n   private static FileInfo CreateResourceFile() \n   {\n\n     \tFileInfo f = new FileInfo(myResourceFileName); \n\tStreamWriter sw = f.CreateText();\n\n\tsw.WriteLine(&quot;Hello, world!&quot;);\n\n\tsw.Close();\n\n\treturn f;\n\n   }\n\n   private static AssemblyBuilder BuildDynAssembly()\n   {\n\n\tstring myAsmFileName = &quot;MyAsm.dll&quot;;\n\t\n\tAppDomain myDomain = Thread.GetDomain();\n\tAssemblyName myAsmName = new AssemblyName();\n\tmyAsmName.Name = &quot;MyDynamicAssembly&quot;;\t\n\n\tAssemblyBuilder myAsmBuilder = myDomain.DefineDynamicAssembly(\n\t\t\t\t\t\tmyAsmName,\n\t\t\t\t\t\tAssemblyBuilderAccess.RunAndSave);\n\n\tmyAsmBuilder.AddResourceFile(&quot;MyResource&quot;, myResourceFileName);\n\n\t// To confirm that the resource file has been added to the manifest,\n\t// we will save the assembly as MyAsm.dll. You can view the manifest\n\t// and confirm the presence of the resource file by running \n\t// &quot;ildasm MyAsm.dll&quot; from the prompt in the directory where you executed\n\t// the compiled code. \n\n\tmyAsmBuilder.Save(myAsmFileName);\t\n\n\treturn myAsmBuilder;\n\n   }\n\n   public static void Main() \n   {\n\n\tFileStream myResourceFS = null;\n\n\tCreateResourceFile();\n\n\tConsole.WriteLine(&quot;The contents of MyResource.txt, via GetFile:&quot;);\n\n\tAssemblyBuilder myAsm = BuildDynAssembly();\n\n\ttry \n        {\n\t   myResourceFS = myAsm.GetFile(myResourceFileName);\n        }\n\tcatch (NotSupportedException)\n\t{\n\t   Console.WriteLine(&quot;---&quot;);\n\t   Console.WriteLine(&quot;System.Reflection.Emit.AssemblyBuilder.GetFile<br>is not supported &quot; +\n\t\t\t     &quot;in this SDK build.&quot;);\n\t   Console.WriteLine(&quot;The file data will now be retrieved directly, via a new FileStream.&quot;);\n\t   Console.WriteLine(&quot;---&quot;);\n\t   myResourceFS = new FileStream(myResourceFileName, \n\t\t\t\t\t FileMode.Open);\n\t}\n\t \n\tStreamReader sr = new StreamReader(myResourceFS, System.Text.Encoding.ASCII);\n\tConsole.WriteLine(sr.ReadToEnd());\n\tsr.Close();\n\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1\">\nImports System\nImports System.IO\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n _\n\nClass AsmBuilderGetFileDemo\n   \n   Private Shared myResourceFileName As String = &quot;MyResource.txt&quot;\n   \n   \n   Private Shared Function CreateResourceFile() As FileInfo\n      \n      Dim f As New FileInfo(myResourceFileName)\n      Dim sw As StreamWriter = f.CreateText()\n      \n      sw.WriteLine(&quot;Hello, world!&quot;)\n      \n      sw.Close()\n      \n      Return f\n\n   End Function &#39;CreateResourceFile\n    \n   \n   Private Shared Function BuildDynAssembly() As AssemblyBuilder\n      \n      Dim myAsmFileName As String = &quot;MyAsm.dll&quot;\n      \n      Dim myDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim myAsmBuilder As AssemblyBuilder = myDomain.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t    AssemblyBuilderAccess.RunAndSave)\n      \n      myAsmBuilder.AddResourceFile(&quot;MyResource&quot;, myResourceFileName)\n      \n      &#39; To confirm that the resource file has been added to the manifest,\n      &#39; we will save the assembly as MyAsm.dll. You can view the manifest\n      &#39; and confirm the presence of the resource file by running \n      &#39; &quot;ildasm MyAsm.dll&quot; from the prompt in the directory where you executed\n      &#39; the compiled code. \n      myAsmBuilder.Save(myAsmFileName)\n      \n      Return myAsmBuilder\n\n   End Function &#39;BuildDynAssembly\n    \n   \n   Public Shared Sub Main()\n      \n      Dim myResourceFS As FileStream = Nothing\n      \n      CreateResourceFile()\n      \n      Console.WriteLine(&quot;The contents of MyResource.txt, via GetFile:&quot;)\n      \n      Dim myAsm As AssemblyBuilder = BuildDynAssembly()\n      \n      Try\n\n         myResourceFS = myAsm.GetFile(myResourceFileName)\n\n      Catch nsException As NotSupportedException\n\t \n\t Console.WriteLine(&quot;---&quot;)\n\t Console.WriteLine(&quot;System.Reflection.Emit.AssemblyBuilder.GetFile is not supported &quot; + _\n\t\t\t     &quot;in this SDK build.&quot;)\n\t Console.WriteLine(&quot;The file data will now be retrieved directly, via a new FileStream.&quot;)\n\t Console.WriteLine(&quot;---&quot;)\n\t myResourceFS = New FileStream(myResourceFileName, FileMode.Open) \n\n      End Try\n      \n      Dim sr As New StreamReader(myResourceFS, System.Text.Encoding.ASCII)\n      Console.WriteLine(sr.ReadToEnd())\n      sr.Close()\n\n   End Sub &#39;Main \n\nEnd Class &#39;AsmBuilderGetFileDemo\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_AddResourceFile_System_String_System_String_System_Reflection_ResourceAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_AddResourceFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddResourceFile(String,String,ResourceAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an existing resource file to this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddResourceFile (string name, string fileName, System.Reflection.ResourceAttributes attribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The logical name of the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The physical file name (.resources file) to which the logical name is mapped. This should not include a path; the file must be in the same directory as the assembly to which it is added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.resourceattributes\" data-linktype=\"relative-path\">ResourceAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The resource attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> has been previously defined.  </p>\n<p> -or-  </p>\n<p> There is another file in the assembly named <code>fileName</code>.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero or if the length of <code>fileName</code> is zero.  </p>\n<p> -or-  </p>\n<p> <code>fileName</code> includes a path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>If the file <code>fileName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>fileName</code> should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.  </p>\n<p> Attributes can be specified for the managed resource.  </p>\n<p> The specified resource file must be in the directory where the assembly will be saved.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates how to attach a resource file to a dynamically created assembly, using <code>AddResourceFile</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class AsmBuilderGetFileDemo\n{\npublic:\n   static String^ myResourceFileName = &quot;MyResource.txt&quot;;\n   static FileInfo^ CreateResourceFile()\n   {\n      FileInfo^ f = gcnew FileInfo( myResourceFileName );\n      StreamWriter^ sw = f-&gt;CreateText();\n      sw-&gt;WriteLine( &quot;Hello, world!&quot; );\n      sw-&gt;Close();\n      return f;\n   }\n\n   static AssemblyBuilder^ BuildDynAssembly()\n   {\n      String^ myAsmFileName = &quot;MyAsm.dll&quot;;\n      AppDomain^ myDomain = Thread::GetDomain();\n      AssemblyName^ myAsmName = gcnew AssemblyName;\n      myAsmName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ myAsmBuilder = myDomain-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::RunAndSave );\n      myAsmBuilder-&gt;AddResourceFile( &quot;MyResource&quot;, myResourceFileName );\n      \n      // To confirm that the resource file has been added to the manifest,\n      // we will save the assembly as MyAsm.dll. You can view the manifest\n      // and confirm the presence of the resource file by running\n      // &quot;ildasm MyAsm.dll&quot; from the prompt in the directory where you executed\n      // the compiled code.\n      myAsmBuilder-&gt;Save( myAsmFileName );\n      return myAsmBuilder;\n   }\n\n};\n\nint main()\n{\n   FileStream^ myResourceFS = nullptr;\n   AsmBuilderGetFileDemo::CreateResourceFile();\n   Console::WriteLine( &quot;The contents of MyResource.txt, via GetFile:&quot; );\n   AssemblyBuilder^ myAsm = AsmBuilderGetFileDemo::BuildDynAssembly();\n   try\n   {\n      myResourceFS = myAsm-&gt;GetFile( AsmBuilderGetFileDemo::myResourceFileName );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( &quot;---&quot; );\n      Console::WriteLine( &quot;System::Reflection::Emit::AssemblyBuilder::GetFile<br>is not supported in this SDK build.&quot; );\n      Console::WriteLine( &quot;The file data will now be retrieved directly, via a new FileStream.&quot; );\n      Console::WriteLine( &quot;---&quot; );\n      myResourceFS = gcnew FileStream( AsmBuilderGetFileDemo::myResourceFileName,FileMode::Open );\n   }\n\n   StreamReader^ sr = gcnew StreamReader( myResourceFS,System::Text::Encoding::ASCII );\n   Console::WriteLine( sr-&gt;ReadToEnd() );\n   sr-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1\">\nusing System;\nusing System.IO;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass AsmBuilderGetFileDemo\n\n{\n   private static string myResourceFileName = &quot;MyResource.txt&quot;;\n\n   private static FileInfo CreateResourceFile() \n   {\n\n     \tFileInfo f = new FileInfo(myResourceFileName); \n\tStreamWriter sw = f.CreateText();\n\n\tsw.WriteLine(&quot;Hello, world!&quot;);\n\n\tsw.Close();\n\n\treturn f;\n\n   }\n\n   private static AssemblyBuilder BuildDynAssembly()\n   {\n\n\tstring myAsmFileName = &quot;MyAsm.dll&quot;;\n\t\n\tAppDomain myDomain = Thread.GetDomain();\n\tAssemblyName myAsmName = new AssemblyName();\n\tmyAsmName.Name = &quot;MyDynamicAssembly&quot;;\t\n\n\tAssemblyBuilder myAsmBuilder = myDomain.DefineDynamicAssembly(\n\t\t\t\t\t\tmyAsmName,\n\t\t\t\t\t\tAssemblyBuilderAccess.RunAndSave);\n\n\tmyAsmBuilder.AddResourceFile(&quot;MyResource&quot;, myResourceFileName);\n\n\t// To confirm that the resource file has been added to the manifest,\n\t// we will save the assembly as MyAsm.dll. You can view the manifest\n\t// and confirm the presence of the resource file by running \n\t// &quot;ildasm MyAsm.dll&quot; from the prompt in the directory where you executed\n\t// the compiled code. \n\n\tmyAsmBuilder.Save(myAsmFileName);\t\n\n\treturn myAsmBuilder;\n\n   }\n\n   public static void Main() \n   {\n\n\tFileStream myResourceFS = null;\n\n\tCreateResourceFile();\n\n\tConsole.WriteLine(&quot;The contents of MyResource.txt, via GetFile:&quot;);\n\n\tAssemblyBuilder myAsm = BuildDynAssembly();\n\n\ttry \n        {\n\t   myResourceFS = myAsm.GetFile(myResourceFileName);\n        }\n\tcatch (NotSupportedException)\n\t{\n\t   Console.WriteLine(&quot;---&quot;);\n\t   Console.WriteLine(&quot;System.Reflection.Emit.AssemblyBuilder.GetFile<br>is not supported &quot; +\n\t\t\t     &quot;in this SDK build.&quot;);\n\t   Console.WriteLine(&quot;The file data will now be retrieved directly, via a new FileStream.&quot;);\n\t   Console.WriteLine(&quot;---&quot;);\n\t   myResourceFS = new FileStream(myResourceFileName, \n\t\t\t\t\t FileMode.Open);\n\t}\n\t \n\tStreamReader sr = new StreamReader(myResourceFS, System.Text.Encoding.ASCII);\n\tConsole.WriteLine(sr.ReadToEnd());\n\tsr.Close();\n\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1\">\nImports System\nImports System.IO\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n _\n\nClass AsmBuilderGetFileDemo\n   \n   Private Shared myResourceFileName As String = &quot;MyResource.txt&quot;\n   \n   \n   Private Shared Function CreateResourceFile() As FileInfo\n      \n      Dim f As New FileInfo(myResourceFileName)\n      Dim sw As StreamWriter = f.CreateText()\n      \n      sw.WriteLine(&quot;Hello, world!&quot;)\n      \n      sw.Close()\n      \n      Return f\n\n   End Function &#39;CreateResourceFile\n    \n   \n   Private Shared Function BuildDynAssembly() As AssemblyBuilder\n      \n      Dim myAsmFileName As String = &quot;MyAsm.dll&quot;\n      \n      Dim myDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim myAsmBuilder As AssemblyBuilder = myDomain.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t    AssemblyBuilderAccess.RunAndSave)\n      \n      myAsmBuilder.AddResourceFile(&quot;MyResource&quot;, myResourceFileName)\n      \n      &#39; To confirm that the resource file has been added to the manifest,\n      &#39; we will save the assembly as MyAsm.dll. You can view the manifest\n      &#39; and confirm the presence of the resource file by running \n      &#39; &quot;ildasm MyAsm.dll&quot; from the prompt in the directory where you executed\n      &#39; the compiled code. \n      myAsmBuilder.Save(myAsmFileName)\n      \n      Return myAsmBuilder\n\n   End Function &#39;BuildDynAssembly\n    \n   \n   Public Shared Sub Main()\n      \n      Dim myResourceFS As FileStream = Nothing\n      \n      CreateResourceFile()\n      \n      Console.WriteLine(&quot;The contents of MyResource.txt, via GetFile:&quot;)\n      \n      Dim myAsm As AssemblyBuilder = BuildDynAssembly()\n      \n      Try\n\n         myResourceFS = myAsm.GetFile(myResourceFileName)\n\n      Catch nsException As NotSupportedException\n\t \n\t Console.WriteLine(&quot;---&quot;)\n\t Console.WriteLine(&quot;System.Reflection.Emit.AssemblyBuilder.GetFile is not supported &quot; + _\n\t\t\t     &quot;in this SDK build.&quot;)\n\t Console.WriteLine(&quot;The file data will now be retrieved directly, via a new FileStream.&quot;)\n\t Console.WriteLine(&quot;---&quot;)\n\t myResourceFS = New FileStream(myResourceFileName, FileMode.Open) \n\n      End Try\n      \n      Dim sr As New StreamReader(myResourceFS, System.Text.Encoding.ASCII)\n      Console.WriteLine(sr.ReadToEnd())\n      sr.Close()\n\n   End Sub &#39;Main \n\nEnd Class &#39;AsmBuilderGetFileDemo\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly that has the specified name and access rights.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access rights of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>An object that represents the new assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a new assembly that has the specified name, access rights, and attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access rights of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection that contains the attributes of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>An object that represents the new assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicModule(String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a named transient dynamic module in this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic module. Must be less than 260 characters in length.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a> representing the defined dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> begins with white space.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is greater than or equal to 260.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a></div>\r\n                  </div>\r\n                  <p>The assembly for default symbol writer cannot be loaded.  </p>\n<p> -or-  </p>\n<p> The type that implements the default symbol writer interface cannot be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is an error to define multiple dynamic modules with the same name in an assembly.  </p>\n<p> The defined dynamic module is transient. The dynamic module is not saved, even if the parent dynamic assembly was created with <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To suppress optimizations when debugging dynamic modules, apply the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> attribute to the dynamic assembly before calling <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a>. Create an instance of <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> with the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute.debuggingmodes\" data-linktype=\"relative-path\">DebuggableAttribute+DebuggingModes</a> flag and apply it using the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_\" data-linktype=\"relative-path\">SetCustomAttribute</a> method. The attribute must be applied to the dynamic assembly. It has no effect if applied to the module.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The code example below demonstrates how to create a transient dynamic module using <code>DefineDynamicModule</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1\">      AppDomain^ myAppDomain = Thread::GetDomain();\n      AssemblyName^ myAsmName = gcnew AssemblyName;\n      myAsmName-&gt;Name = &quot;MyAssembly&quot;;\n      AssemblyBuilder^ myAsmBuilder = myAppDomain-&gt;DefineDynamicAssembly(\n         myAsmName, AssemblyBuilderAccess::Run );\n      \n      // Create a transient dynamic module. Since no DLL name is specified with\n      // this constructor, it cannot be saved.\n      ModuleBuilder^ myModuleBuilder = myAsmBuilder-&gt;DefineDynamicModule( &quot;MyModule1&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1\">\t   AppDomain myAppDomain = Thread.GetDomain(); \n\t   AssemblyName myAsmName = new AssemblyName();\n\t   myAsmName.Name = &quot;MyAssembly&quot;;\n\t   AssemblyBuilder myAsmBuilder = myAppDomain.DefineDynamicAssembly(\n\t\t\t\t\t\t\tmyAsmName,\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run);\n\n\t   // Create a transient dynamic module. Since no DLL name is specified with\n\t   // this constructor, it can not be saved. \n\t   ModuleBuilder myModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule1&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1\">      Dim myAppDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyAssembly&quot;\n      Dim myAsmBuilder As AssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run)\n      \n      &#39; Create a transient dynamic module. Since no DLL name is specified with\n      &#39; this constructor, it can not be saved. \n      Dim myModuleBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule1&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicModule(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a named transient dynamic module in this assembly and specifies whether symbol information should be emitted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, bool emitSymbolInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic module. Must be less than 260 characters in length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>emitSymbolInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if symbol information is to be emitted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a> representing the defined dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> begins with white space.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is greater than or equal to 260.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a></div>\r\n                  </div>\r\n                  <p>The assembly for default symbol writer cannot be loaded.  </p>\n<p> -or-  </p>\n<p> The type that implements the default symbol writer interface cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is an error to define multiple dynamic modules with the same name in an assembly.  </p>\n<p> The dynamic module is not saved, even if the parent dynamic assembly was created with <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To suppress optimizations when debugging dynamic modules, apply the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> attribute to the dynamic assembly before calling <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a>. Create an instance of <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> with the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute.debuggingmodes\" data-linktype=\"relative-path\">DebuggableAttribute+DebuggingModes</a> flag and apply it using the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_\" data-linktype=\"relative-path\">SetCustomAttribute</a> method. The attribute must be applied to the dynamic assembly. It has no effect if applied to the module.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The code example below demonstrates how to create a transient dynamic module using <code>DefineDynamicModule</code>, suppressing symbol information.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2\">      AppDomain^ myAppDomain = Thread::GetDomain();\n      AssemblyName^ myAsmName = gcnew AssemblyName;\n      myAsmName-&gt;Name = &quot;MyAssembly&quot;;\n      AssemblyBuilder^ myAsmBuilder = myAppDomain-&gt;DefineDynamicAssembly(\n         myAsmName, AssemblyBuilderAccess::Run );\n      \n      // Create a transient dynamic module. Since no DLL name is specified with\n      // this constructor, it can not be saved. By specifying the second parameter\n      // of the constructor as false, we can suppress the emission of symbol info.\n      ModuleBuilder^ myModuleBuilder = myAsmBuilder-&gt;DefineDynamicModule(\n         &quot;MyModule2&quot;, false );\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2\">\t   AppDomain myAppDomain = Thread.GetDomain(); \n\t   AssemblyName myAsmName = new AssemblyName();\n\t   myAsmName.Name = &quot;MyAssembly&quot;;\n\t   AssemblyBuilder myAsmBuilder = myAppDomain.DefineDynamicAssembly(\n\t\t\t\t\t\t\tmyAsmName,\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run);\n\n\t   // Create a transient dynamic module. Since no DLL name is specified with\n\t   // this constructor, it can not be saved. By specifying the second parameter\n\t   // of the constructor as false, we can suppress the emission of symbol info.\n\t   ModuleBuilder myModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule2&quot;,\n\t\t\t\t\t\t\t\t\t\tfalse);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2\">      Dim myAppDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyAssembly&quot;\n      Dim myAsmBuilder As AssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run)\n      \n      &#39; Create a transient dynamic module. Since no DLL name is specified with\n      &#39; this constructor, it can not be saved. By specifying the second parameter\n      &#39; of the constructor as false, we can suppress the emission of symbol info.\n      Dim myModuleBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule2&quot;, _\n\t\t\t\t\t\t\t\t\t\tFalse)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicModule(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a persistable dynamic module with the given name that will be saved to the specified file. No symbol information is emitted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic module. Must be less than 260 characters in length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to which the dynamic module should be saved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a> object representing the defined dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> or <code>fileName</code> is zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is greater than or equal to 260.  </p>\n<p> -or-  </p>\n<p> <code>fileName</code> contains a path specification (a directory component, for example).  </p>\n<p> -or-  </p>\n<p> There is a conflict with the name of another file that belongs to this assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This assembly has been previously saved.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This assembly was called on a dynamic assembly with <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a> attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a></div>\r\n                  </div>\r\n                  <p>The assembly for default symbol writer cannot be loaded.  </p>\n<p> -or-  </p>\n<p> The type that implements the default symbol writer interface cannot be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To define a persistable dynamic module, this assembly needs to be created with the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a> or the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a> attribute.  </p>\n<p> If you want the module to contain the assembly manifest, <code>name</code> should be the same as the name of the assembly (that is, the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Name_\" data-linktype=\"relative-path\">Name</a> property of the <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> used to create the dynamic assembly) and <code>fileName</code> should be the same as the filename you specify when you save the assembly.  </p>\n<p> In an assembly with only one module, that module should contain the assembly manifest.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To suppress optimizations when debugging dynamic modules, apply the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> attribute to the dynamic assembly before calling <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a>. Create an instance of <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> with the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute.debuggingmodes\" data-linktype=\"relative-path\">DebuggableAttribute+DebuggingModes</a> flag and apply it using the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_\" data-linktype=\"relative-path\">SetCustomAttribute</a> method. The attribute must be applied to the dynamic assembly. It has no effect if applied to the module.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The code example below demonstrates how to create a persistent dynamic module using <code>DefineDynamicModule</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3\">      AppDomain^ myAppDomain = Thread::GetDomain();\n      AssemblyName^ myAsmName = gcnew AssemblyName;\n      myAsmName-&gt;Name = &quot;MyAssembly&quot;;\n      AssemblyBuilder^ myAsmBuilder = myAppDomain-&gt;DefineDynamicAssembly(\n         myAsmName, AssemblyBuilderAccess::Run );\n      \n      // Create a dynamic module that can be saved as the specified DLL name.\n      ModuleBuilder^ myModuleBuilder = myAsmBuilder-&gt;DefineDynamicModule(\n         &quot;MyModule3&quot;, &quot;MyModule3.dll&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3\">\t   AppDomain myAppDomain = Thread.GetDomain(); \n\t   AssemblyName myAsmName = new AssemblyName();\n\t   myAsmName.Name = &quot;MyAssembly&quot;;\n\t   AssemblyBuilder myAsmBuilder = myAppDomain.DefineDynamicAssembly(\n\t\t\t\t\t\t\tmyAsmName,\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run);\n\t   // Create a dynamic module that can be saved as the specified DLL name.\n\t   ModuleBuilder myModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule3&quot;,\n\t\t\t\t\t\t\t\t\t    &quot;MyModule3.dll&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3\">      Dim myAppDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyAssembly&quot;\n      Dim myAsmBuilder As AssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module that can be saved as the specified DLL name.\n      Dim myModuleBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule3&quot;, _\n\t\t\t\t\t\t\t\t\t&quot;MyModule3.dll&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicModule(String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a persistable dynamic module, specifying the module name, the name of the file to which the module will be saved, and whether symbol information should be emitted using the default symbol writer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName, bool emitSymbolInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dynamic module. Must be less than 260 characters in length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to which the dynamic module should be saved.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>emitSymbolInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, symbolic information is written using the default symbol writer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a> object representing the defined dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> or <code>fileName</code> is zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is greater than or equal to 260.  </p>\n<p> -or-  </p>\n<p> <code>fileName</code> contains a path specification (a directory component, for example).  </p>\n<p> -or-  </p>\n<p> There is a conflict with the name of another file that belongs to this assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This assembly has been previously saved.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This assembly was called on a dynamic assembly with the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a> attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a></div>\r\n                  </div>\r\n                  <p>The assembly for default symbol writer cannot be loaded.  </p>\n<p> -or-  </p>\n<p> The type that implements the default symbol writer interface cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To define a persistable dynamic module, this assembly needs to be created with the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a> or the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a> attribute.  </p>\n<p> If you want the module to contain the assembly manifest, <code>name</code> should be the same as the name of the assembly (that is, the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Name_\" data-linktype=\"relative-path\">Name</a> property of the <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> used to create the dynamic assembly) and <code>fileName</code> should be the same as the filename you specify when you save the assembly.  </p>\n<p> In an assembly with only one module, that module should contain the assembly manifest.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To suppress optimizations when debugging dynamic modules, apply the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> attribute to the dynamic assembly before calling <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a>. Create an instance of <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> with the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute.debuggingmodes\" data-linktype=\"relative-path\">DebuggableAttribute+DebuggingModes</a> flag and apply it using the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_\" data-linktype=\"relative-path\">SetCustomAttribute</a> method. The attribute must be applied to the dynamic assembly. It has no effect if applied to the module.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The code example below demonstrates how to create a persistent dynamic module with symbol emission using <code>DefineDynamicModule</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4\">      AppDomain^ myAppDomain = Thread::GetDomain();\n      AssemblyName^ myAsmName = gcnew AssemblyName;\n      myAsmName-&gt;Name = &quot;MyAssembly&quot;;\n      AssemblyBuilder^ myAsmBuilder = myAppDomain-&gt;DefineDynamicAssembly(\n         myAsmName, AssemblyBuilderAccess::Run );\n      \n      // Create a dynamic module that can be saved as the specified DLL name. By\n      // specifying the third parameter as true, we can allow the emission of symbol info.\n      ModuleBuilder^ myModuleBuilder = myAsmBuilder-&gt;DefineDynamicModule(\n         &quot;MyModule4&quot;, &quot;MyModule4.dll&quot;, true );\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4\">\t   AppDomain myAppDomain = Thread.GetDomain(); \n\t   AssemblyName myAsmName = new AssemblyName();\n\t   myAsmName.Name = &quot;MyAssembly&quot;;\n\t   AssemblyBuilder myAsmBuilder = myAppDomain.DefineDynamicAssembly(\n\t\t\t\t\t\t\tmyAsmName,\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run);\n\t   // Create a dynamic module that can be saved as the specified DLL name. By\n\t   // specifying the third parameter as true, we can allow the emission of symbol info.\n\t   ModuleBuilder myModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule4&quot;,\n\t\t\t\t\t\t\t\t\t    &quot;MyModule4.dll&quot;,\n\t\t\t\t\t\t\t\t\t     true);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4\">      Dim myAppDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyAssembly&quot;\n      Dim myAsmBuilder As AssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module that can be saved as the specified DLL name. By\n      &#39; specifying the third parameter as true, we can allow the emission of symbol info.\n      Dim myModuleBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule4&quot;, _\n\t\t\t\t\t\t\t\t\t&quot;MyModule4.dll&quot;, _\n\t\t\t\t\t\t\t\t\tTrue)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineResource_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineResource(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a standalone managed resource for this assembly with the default public resource attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The logical name of the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>description</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A textual description of the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The physical file name (.resources file) to which the logical name is mapped. This should not include a path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.resources.iresourcewriter\" data-linktype=\"relative-path\">IResourceWriter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.resources.resourcewriter\" data-linktype=\"relative-path\">ResourceWriter</a> object for the specified resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> has been previously defined.  </p>\n<p> -or-  </p>\n<p> There is another file in the assembly named <code>fileName</code>.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>fileName</code> is zero.  </p>\n<p> -or-  </p>\n<p> <code>fileName</code> includes a path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Fine grain resources can be added with the returned <a class=\"xref\" href=\"system.resources.resourcewriter\" data-linktype=\"relative-path\">ResourceWriter</a> by calling <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_AddResource_\" data-linktype=\"relative-path\">AddResource</a>.  </p>\n<p> <code>fileName</code> should not be the same as that of any other persistable module, stand-alone managed resource, or the stand-alone manifest file.  </p>\n<p> The runtime calls the <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_Close_\" data-linktype=\"relative-path\">Close</a> method when the dynamic assembly is saved.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the DefineResource method to get a resource writer. The example uses the resource writer to add three resource strings.  </p>\n<pre><code class=\"lang-cpp\" name=\"AssemblyBuilder.DefineResource Example 2#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Resources;\n\n/*\n   The following program demonstrates the &#39;DefineResource&#39; and &#39;DefineVersionInfoResource&#39; \n   methods of &#39;AssemblyBuilder&#39; class. It builds an assembly and a resource file at runtime.\n   The unmanaged version information like product, product version, Company, Copyright, \n   trademark are defined with &#39;DefineVersionInfoResource&#39; method.\n*/\nstatic Type^ CreateAssembly( AppDomain^ appDomain );\n\nint main()\n{\n   AssemblyBuilder^ myAssembly;\n   IResourceWriter^ myResourceWriter;\n   myAssembly = safe_cast&lt;AssemblyBuilder^&gt;(CreateAssembly( Thread::GetDomain() )-&gt;Assembly);\n   myResourceWriter = myAssembly-&gt;DefineResource( &quot;myResourceFile&quot;, &quot;A sample Resource File&quot;, &quot;MyEmitAssembly.MyResource.resources&quot; );\n   myResourceWriter-&gt;AddResource( &quot;AddResource 1&quot;, &quot;First added resource&quot; );\n   myResourceWriter-&gt;AddResource( &quot;AddResource 2&quot;, &quot;Second added resource&quot; );\n   myResourceWriter-&gt;AddResource( &quot;AddResource 3&quot;, &quot;Third added resource&quot; );\n   myAssembly-&gt;DefineVersionInfoResource( &quot;AssemblySample&quot;,  &quot;2:0:0:1&quot;, &quot;Microsoft Corporation&quot;, &quot;@Copyright Microsoft Corp. 1990-2001&quot;, &quot;.NET is a trademark of Microsoft Corporation&quot; );\n   myAssembly-&gt;Save( &quot;MyEmitAssembly.dll&quot; );\n}\n\n// Create the callee transient dynamic assembly.\nstatic Type^ CreateAssembly( AppDomain^ appDomain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;MyEmitAssembly&quot;;\n   AssemblyBuilder^ myAssembly = appDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n   // Define a public class named &quot;HelloWorld&quot; in the assembly.\n   TypeBuilder^ helloWorldClass = myModule-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n\n   // Define the Display method.\n   MethodBuilder^ myMethod = helloWorldClass-&gt;DefineMethod( &quot;Display&quot;, MethodAttributes::Public, String::typeid, nullptr );\n\n   // Generate IL for GetGreeting.\n   ILGenerator^ methodIL = myMethod-&gt;GetILGenerator();\n   methodIL-&gt;Emit( OpCodes::Ldstr, &quot;Display method get called.&quot; );\n   methodIL-&gt;Emit( OpCodes::Ret );\n\n   // Returns the type HelloWorld.\n   return (helloWorldClass-&gt;CreateType());\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyBuilder.DefineResource Example 2#1\">   Public Shared Sub Main()\n      Dim myAssembly As AssemblyBuilder\n      Dim myResourceWriter As IResourceWriter\n      myAssembly = CType(CreateAssembly(Thread.GetDomain()).Assembly, AssemblyBuilder)\n      \n      myResourceWriter = myAssembly.DefineResource(&quot;myResourceFile&quot;, &quot;A sample Resource File&quot;, _\n                                                         &quot;MyEmitAssembly.MyResource.resources&quot;)\n      myResourceWriter.AddResource(&quot;AddResource 1&quot;, &quot;First added resource&quot;)\n      myResourceWriter.AddResource(&quot;AddResource 2&quot;, &quot;Second added resource&quot;)\n      myResourceWriter.AddResource(&quot;AddResource 3&quot;, &quot;Third added resource&quot;)\n      \n      myAssembly.DefineVersionInfoResource(&quot;AssemblySample&quot;, &quot;2:0:0:1&quot;, &quot;Microsoft Corporation&quot;, _\n            &quot;@Copyright Microsoft Corp. 1990-2001&quot;, &quot;.NET is a trademark of Microsoft Corporation&quot;)\n      myAssembly.Save(&quot;MyEmitAssembly.dll&quot;)\n   End Sub &#39;Main\n   \n   &#39; Create the callee transient dynamic assembly.\n   Private Shared Function CreateAssembly(myAppDomain As AppDomain) As Type\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;MyEmitAssembly&quot;\n      Dim myAssembly As AssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, _\n                                                               AssemblyBuilderAccess.Save)\n      Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;, _\n                                                               &quot;EmittedModule.mod&quot;)\n      \n      &#39; Define a public class named &quot;HelloWorld&quot; in the assembly.\n      Dim helloWorldClass As TypeBuilder = myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public)\n      &#39; Define the Display method.\n      Dim myMethod As MethodBuilder = helloWorldClass.DefineMethod(&quot;Display&quot;, _\n                                    MethodAttributes.Public, GetType(String), Nothing)\n      \n      &#39; Generate IL for GetGreeting.\n      Dim methodIL As ILGenerator = myMethod.GetILGenerator()\n      methodIL.Emit(OpCodes.Ldstr, &quot;Display method get called.&quot;)\n      methodIL.Emit(OpCodes.Ret)\n      &#39; Returns the type HelloWorld.\n      Return helloWorldClass.CreateType()\n   End Function &#39;CreateAssembly\n</code></pre><pre><code class=\"lang-cs\" name=\"AssemblyBuilder.DefineResource Example 2#1\">   public static void Main() \n   {\n      AssemblyBuilder myAssembly;\n      IResourceWriter myResourceWriter; \n      myAssembly = (AssemblyBuilder)CreateAssembly(Thread.GetDomain()).Assembly;\n         \n      myResourceWriter = myAssembly.DefineResource(&quot;myResourceFile&quot;,\n         &quot;A sample Resource File&quot;, &quot;MyEmitAssembly.MyResource.resources&quot;);\n      myResourceWriter.AddResource(&quot;AddResource 1&quot;, &quot;First added resource&quot;);\n      myResourceWriter.AddResource(&quot;AddResource 2&quot;, &quot;Second added resource&quot;);\n      myResourceWriter.AddResource(&quot;AddResource 3&quot;, &quot;Third added resource&quot;);\n\n      myAssembly.DefineVersionInfoResource(&quot;AssemblySample&quot;, &quot;2:0:0:1&quot;,\n         &quot;Microsoft Corporation&quot;, &quot;@Copyright Microsoft Corp. 1990-2001&quot;,\n         &quot;.NET is a trademark of Microsoft Corporation&quot;);\n      myAssembly.Save(&quot;MyEmitAssembly.dll&quot;);\n   }\n\n   // Create the callee transient dynamic assembly.\n   private static Type CreateAssembly(AppDomain appDomain) \n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;MyEmitAssembly&quot;;\n      AssemblyBuilder myAssembly = appDomain.DefineDynamicAssembly(myAssemblyName, \n         AssemblyBuilderAccess.Save);\n      ModuleBuilder myModule = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;,\n         &quot;EmittedModule.mod&quot;);\n\n      // Define a public class named &quot;HelloWorld&quot; in the assembly.\n      TypeBuilder helloWorldClass = \n         myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public);\n      // Define the Display method.\n      MethodBuilder myMethod = helloWorldClass.DefineMethod(&quot;Display&quot;, \n         MethodAttributes.Public, typeof(String), null);\n\n      // Generate IL for GetGreeting.\n      ILGenerator methodIL = myMethod.GetILGenerator();\n      methodIL.Emit(OpCodes.Ldstr, &quot;Display method get called.&quot;);\n      methodIL.Emit(OpCodes.Ret);\n\n      // Returns the type HelloWorld.\n      return(helloWorldClass.CreateType());\n   }   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineResource_System_String_System_String_System_String_System_Reflection_ResourceAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineResource(String,String,String,ResourceAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a standalone managed resource for this assembly. Attributes can be specified for the managed resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName, System.Reflection.ResourceAttributes attribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The logical name of the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>description</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A textual description of the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The physical file name (.resources file) to which the logical name is mapped. This should not include a path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.resourceattributes\" data-linktype=\"relative-path\">ResourceAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The resource attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.resources.iresourcewriter\" data-linktype=\"relative-path\">IResourceWriter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.resources.resourcewriter\" data-linktype=\"relative-path\">ResourceWriter</a> object for the specified resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> has been previously defined or if there is another file in the assembly named <code>fileName</code>.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>fileName</code> is zero.  </p>\n<p> -or-  </p>\n<p> <code>fileName</code> includes a path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Fine-grain resources can be added with the returned <a class=\"xref\" href=\"system.resources.resourcewriter\" data-linktype=\"relative-path\">ResourceWriter</a> by calling <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_AddResource_\" data-linktype=\"relative-path\">AddResource</a>.  </p>\n<p> <code>fileName</code> should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.  </p>\n<p> The runtime calls the <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_Close_\" data-linktype=\"relative-path\">Close</a> method when the dynamic assembly is saved.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineUnmanagedResource(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Defines an unmanaged resource for this assembly as an opaque blob of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DefineUnmanagedResource (byte[] resource);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>resource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The opaque blob of bytes representing the unmanaged resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An unmanaged resource was previously defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>resource</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An assembly can be associated with only one unmanaged resource. This means that calling <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource_\" data-linktype=\"relative-path\">DefineVersionInfoResource</a> or DefineUnmanagedResource after either one of the methods was called previously will throw the System.ArgumentException being throw. Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample creates and attaches an array of bytes representing an unmanaged resource to a dynamic assembly, using <code>DefineUnmanagedResource</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"AssemblyBuilder_DefineUnmanagedResource2#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Resources;\n\npublic class MyAssemblyResource\n{\n   internal static void Main()\n   {\n      AssemblyBuilder myAssembly = CreateAssembly(&quot;MyEmitTestAssembly&quot;);\n\n      // Defines a standalone managed resource for this assembly.\n      IResourceWriter myResourceWriter = myAssembly.DefineResource(&quot;myResourceFile&quot;,\n         &quot;A sample Resource File&quot;, &quot;MyAssemblyResource.resources&quot;, \n         ResourceAttributes.Private);\n\n      myResourceWriter.AddResource(&quot;AddResource Test&quot;, &quot;Testing for the added resource&quot;);\n\n      myAssembly.Save(myAssembly.GetName().Name + &quot;.dll&quot;);\n\n      // Defines an unmanaged resource file for this assembly.\n      myAssembly.DefineUnmanagedResource(new byte[]{01, 00, 01});\n   }\n\n   private static AssemblyBuilder CreateAssembly(string name)\n   {\n      AssemblyName aName = new AssemblyName(name);\n      AssemblyBuilder myAssembly = \n         AppDomain.CurrentDomain.DefineDynamicAssembly(aName,\n            AssemblyBuilderAccess.Save);\n\n      // Define a dynamic module.\n      ModuleBuilder myModule = \n         myAssembly.DefineDynamicModule(aName.Name, aName.Name + &quot;.dll&quot;);\n\n      // Define a public class named &quot;EmitClass&quot; in the assembly.\n      TypeBuilder myEmitClass = myModule.DefineType(&quot;EmitClass&quot;, TypeAttributes.Public);\n\n      // Define the Display method.\n      MethodBuilder myMethod = myEmitClass.DefineMethod(&quot;Display&quot;,\n         MethodAttributes.Public, typeof(String), null);\n\n      // Generate IL for Display method.\n      ILGenerator methodIL = myMethod.GetILGenerator();\n      methodIL.Emit(OpCodes.Ldstr, &quot;Display method gets called.&quot;);\n      methodIL.Emit(OpCodes.Ret);\n\n      myEmitClass.CreateType();\n\n      return(myAssembly);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AssemblyBuilder_DefineUnmanagedResource2#1\">/*\n   The following program demonstrates the &#39;DefineResource&#39; and &#39;DefineUnmanagedResource&#39;\n   methods of &#39;AssemblyBuilder&#39; class. It builds an assembly and a resource file at runtime.\n   An unmanaged resource file is also defined for the same resource file. The EmittedTest2.cpp file\n   calls the methods of &quot;MyEmitAssembly.dll&quot; assembly and the message is displayed to console.\n*/\nusing namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Resources;\n\n   static AssemblyBuilder^ CreateAssembly( String^ name )\n   {\n      AssemblyName^ aName = gcnew AssemblyName(name);\n      AssemblyBuilder^ myAssembly = \n         AppDomain::CurrentDomain-&gt;DefineDynamicAssembly( aName, \n            AssemblyBuilderAccess::Save );\n      \n      // Define a dynamic module.\n      ModuleBuilder^ myModule = \n         myAssembly-&gt;DefineDynamicModule( aName-&gt;Name, aName-&gt;Name + &quot;.dll&quot; );\n      \n      // Define a public class named &quot;EmitClass&quot; in the assembly.\n      TypeBuilder^ myEmitClass = \n         myModule-&gt;DefineType( &quot;EmitClass&quot;, TypeAttributes::Public );\n      \n      // Define the Display method.\n      MethodBuilder^ myMethod = \n         myEmitClass-&gt;DefineMethod( &quot;Display&quot;, MethodAttributes::Public, \n            String::typeid, nullptr );\n      \n      // Generate IL for Display method.\n      ILGenerator^ methodIL = myMethod-&gt;GetILGenerator();\n      methodIL-&gt;Emit( OpCodes::Ldstr, &quot;Display method gets called.&quot; );\n      methodIL-&gt;Emit( OpCodes::Ret );\n      \n      myEmitClass-&gt;CreateType();\n\n      return (myAssembly);\n   };\n\n   void main()\n   {\n      AssemblyBuilder^ myAssembly = CreateAssembly(&quot;MyEmitTestAssembly&quot;);\n      \n      // Defines a standalone managed resource for this assembly.\n      IResourceWriter^ myResourceWriter = \n         myAssembly-&gt;DefineResource( &quot;myResourceFile&quot;, &quot;A sample Resource File&quot;, \n            &quot;MyAssemblyResource.resources&quot;, ResourceAttributes::Private );\n\n      myResourceWriter-&gt;AddResource( &quot;AddResource Test&quot;, &quot;Testing for the added resource&quot; );\n\n      myAssembly-&gt;Save(myAssembly-&gt;GetName()-&gt;Name + &quot;.dll&quot; );\n      \n      // Defines an unmanaged resource file for this assembly.\n      myAssembly-&gt;DefineUnmanagedResource( gcnew array&lt;Byte&gt;{01, 00, 01} );\n   };\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyBuilder_DefineUnmanagedResource2#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Resources\n\nPublic Class MyAssemblyResource\n   \n   Friend Shared Sub Main()\n      Dim myAssembly As AssemblyBuilder = _\n          CreateAssembly(&quot;MyEmitTestAssembly&quot;)\n      \n      &#39; Defines a standalone managed resource for this assembly.\n      Dim myResourceWriter As IResourceWriter = _\n         myAssembly.DefineResource(&quot;myResourceFile&quot;, _\n            &quot;A sample Resource File&quot;, &quot;MyAssemblyResource.resources&quot;, _\n            ResourceAttributes.Private)\n\n      myResourceWriter.AddResource(&quot;AddResource Test&quot;, &quot;Testing for the added resource&quot;)\n\n      myAssembly.Save(myAssembly.GetName().Name &amp; &quot;.dll&quot;)\n      \n      &#39; Defines an unmanaged resource file for this assembly.\n      myAssembly.DefineUnmanagedResource(New Byte() {1, 0, 1})\n\n   End Sub \n   \n   Private Shared Function CreateAssembly(ByVal name As String) As AssemblyBuilder\n\n      Dim aName As New AssemblyName(name)\n\n      Dim myAssembly As AssemblyBuilder = _\n         AppDomain.CurrentDomain.DefineDynamicAssembly(aName, _\n            AssemblyBuilderAccess.Save)\n      \n      &#39; Define a dynamic module.\n      Dim myModule As ModuleBuilder = _\n         myAssembly.DefineDynamicModule(aName.Name, aName.Name &amp; &quot;.dll&quot;)\n\n      &#39; Define a public class named &quot;EmitClass&quot; in the assembly.\n      Dim myEmitClass As TypeBuilder = _\n         myModule.DefineType(&quot;EmitClass&quot;, TypeAttributes.Public)\n      \n      &#39; Define the Display method.\n      Dim myMethod As MethodBuilder = _\n         myEmitClass.DefineMethod(&quot;Display&quot;, MethodAttributes.Public, _\n                                                GetType(String), Nothing)\n      \n      &#39; Generate IL for Display method.\n      Dim methodIL As ILGenerator = myMethod.GetILGenerator()\n      methodIL.Emit(OpCodes.Ldstr, &quot;Display method get called.&quot;)\n      methodIL.Emit(OpCodes.Ret)\n      \n      myEmitClass.CreateType()\n\n      Return myAssembly\n\n   End Function \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineUnmanagedResource(String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines an unmanaged resource file for this assembly given the name of the resource file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DefineUnmanagedResource (string resourceFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the resource file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An unmanaged resource was previously defined.  </p>\n<p> -or-  </p>\n<p> The file <code>resourceFileName</code> is not readable.  </p>\n<p> -or-  </p>\n<p> <code>resourceFileName</code> is the empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>resourceFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>resourceFileName</code> is not found.  </p>\n<p> -or-  </p>\n<p> <code>resourceFileName</code> is a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An assembly can be associated with only one unmanaged resource. This means that calling <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource_\" data-linktype=\"relative-path\">DefineVersionInfoResource</a> or <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_\" data-linktype=\"relative-path\">DefineUnmanagedResource</a> after either one of the methods was called previously will throw the System.ArgumentException. Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example below demonstrates a call to <code>DefineUnmanagedResource</code>, passing an external resource file.  </p>\n<pre><code class=\"lang-cs\" name=\"AssemblyBuilder_DefineUnmanagedResource#3\">   internal static void Main()\n   {\n      AssemblyBuilder myAssembly = CreateAssembly(&quot;MyEmitTestAssembly&quot;);\n\n      // Defines a standalone managed resource for this assembly.\n      IResourceWriter myResourceWriter = myAssembly.DefineResource(&quot;myResourceFile&quot;,\n         &quot;A sample Resource File&quot;, &quot;MyAssemblyResource.resources&quot;, \n         ResourceAttributes.Private);\n\n      myResourceWriter.AddResource(&quot;AddResource Test&quot;, &quot;Testing for the added resource&quot;);\n\n      myAssembly.Save(myAssembly.GetName().Name + &quot;.dll&quot;);\n\n      // Defines an unmanaged resource file for this assembly.\n      myAssembly.DefineUnmanagedResource(&quot;MyAssemblyResource.resources&quot;);\n   }\n\n   private static AssemblyBuilder CreateAssembly(string name)\n   {\n      AssemblyName aName = new AssemblyName(name);\n      AssemblyBuilder myAssembly = \n         AppDomain.CurrentDomain.DefineDynamicAssembly(aName,\n            AssemblyBuilderAccess.Save);\n\n      // Define a dynamic module.\n      ModuleBuilder myModule = \n         myAssembly.DefineDynamicModule(aName.Name, aName.Name + &quot;.dll&quot;);\n\n      // Define a public class named &quot;EmitClass&quot; in the assembly.\n      TypeBuilder myEmitClass = myModule.DefineType(&quot;EmitClass&quot;, TypeAttributes.Public);\n\n      // Define the Display method.\n      MethodBuilder myMethod = myEmitClass.DefineMethod(&quot;Display&quot;,\n         MethodAttributes.Public, typeof(String), null);\n\n      // Generate IL for Display method.\n      ILGenerator methodIL = myMethod.GetILGenerator();\n      methodIL.Emit(OpCodes.Ldstr, &quot;Display method gets called.&quot;);\n      methodIL.Emit(OpCodes.Ret);\n\n      myEmitClass.CreateType();\n\n      return(myAssembly);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AssemblyBuilder_DefineUnmanagedResource#3\">   void main()\n   {\n      AssemblyBuilder^ myAssembly = CreateAssembly(&quot;MyEmitTestAssembly&quot;);\n      \n      // Defines a standalone managed resource for this assembly.\n      IResourceWriter^ myResourceWriter = \n         myAssembly-&gt;DefineResource( &quot;myResourceFile&quot;, &quot;A sample Resource File&quot;, \n            &quot;MyAssemblyResource.resources&quot;, ResourceAttributes::Private );\n\n      myResourceWriter-&gt;AddResource( &quot;AddResource Test&quot;, &quot;Testing for the added resource&quot; );\n\n      myAssembly-&gt;Save(myAssembly-&gt;GetName()-&gt;Name + &quot;.dll&quot; );\n      \n      // Defines an unmanaged resource file for this assembly.\n      myAssembly-&gt;DefineUnmanagedResource(  &quot;MyAssemblyResource.resources&quot; );\n   };\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyBuilder_DefineUnmanagedResource#3\">   Friend Shared Sub Main()\n      Dim myAssembly As AssemblyBuilder = _\n          CreateAssembly(&quot;MyEmitTestAssembly&quot;)\n      \n      &#39; Defines a standalone managed resource for this assembly.\n      Dim myResourceWriter As IResourceWriter = _\n         myAssembly.DefineResource(&quot;myResourceFile&quot;, _\n            &quot;A sample Resource File&quot;, &quot;MyAssemblyResource.resources&quot;, _\n            ResourceAttributes.Private)\n\n      myResourceWriter.AddResource(&quot;AddResource Test&quot;, &quot;Testing for the added resource&quot;)\n\n      myAssembly.Save(myAssembly.GetName().Name &amp; &quot;.dll&quot;)\n      \n      &#39; Defines an unmanaged resource file for this assembly.\n      myAssembly.DefineUnmanagedResource(&quot;MyAssemblyResource.resources&quot;)\n\n   End Sub \n   \n   Private Shared Function CreateAssembly(ByVal name As String) As AssemblyBuilder\n\n      Dim aName As New AssemblyName(name)\n\n      Dim myAssembly As AssemblyBuilder = _\n         AppDomain.CurrentDomain.DefineDynamicAssembly(aName, _\n            AssemblyBuilderAccess.Save)\n      \n      &#39; Define a dynamic module.\n      Dim myModule As ModuleBuilder = _\n         myAssembly.DefineDynamicModule(aName.Name, aName.Name &amp; &quot;.dll&quot;)\n\n      &#39; Define a public class named &quot;EmitClass&quot; in the assembly.\n      Dim myEmitClass As TypeBuilder = _\n         myModule.DefineType(&quot;EmitClass&quot;, TypeAttributes.Public)\n      \n      &#39; Define the Display method.\n      Dim myMethod As MethodBuilder = _\n         myEmitClass.DefineMethod(&quot;Display&quot;, MethodAttributes.Public, _\n                                                GetType(String), Nothing)\n      \n      &#39; Generate IL for Display method.\n      Dim methodIL As ILGenerator = myMethod.GetILGenerator()\n      methodIL.Emit(OpCodes.Ldstr, &quot;Display method get called.&quot;)\n      methodIL.Emit(OpCodes.Ret)\n      \n      myEmitClass.CreateType()\n\n      Return myAssembly\n\n   End Function \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineVersionInfoResource()</div>        \r\n          </div>\r\n    \r\n            <p>Defines an unmanaged version information resource using the information specified in the assembly&#39;s AssemblyName object and the assembly&#39;s custom attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DefineVersionInfoResource ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An unmanaged version information resource was previously defined.  </p>\n<p> -or-  </p>\n<p> The unmanaged version information is too large to persist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An assembly can be associated with only one unmanaged resource. This means that calling <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource_\" data-linktype=\"relative-path\">DefineVersionInfoResource</a> or <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_\" data-linktype=\"relative-path\">DefineUnmanagedResource</a> after either one of the methods was called previously will throw the System.ArgumentException. Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime SDK).  </p>\n<p> Empty argument strings get written as a single space. Spaces are substituted for null characters in the argument strings.  </p>\n<p> The information is inferred from the <code>AssemblyName</code> object used to define this dynamic assembly. This assembly&#39;s custom attributes override information specified in the <code>AssemblyName</code> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example below illustrates the usage of <code>DefineVersionInfoResource</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Example\n{\n   public static void Main()\n   {\n      AssemblyName assemName = new AssemblyName();\n      assemName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create a dynamic assembly in the current application domain,\n      // specifying that the assembly is to be saved.\n      //\n      AssemblyBuilder myAssembly = \n         AppDomain.CurrentDomain.DefineDynamicAssembly(assemName, \n            AssemblyBuilderAccess.Save);\n\n\n      // To apply an attribute to a dynamic assembly, first get the \n      // attribute type. The AssemblyFileVersionAttribute sets the \n      // File Version field on the Version tab of the Windows file\n      // properties dialog.\n      //\n      Type attributeType = typeof(AssemblyFileVersionAttribute);\n\n      // To identify the constructor, use an array of types representing\n      // the constructor&#39;s parameter types. This ctor takes a string.\n      //\n      Type[] ctorParameters = { typeof(string) };\n\n      // Get the constructor for the attribute.\n      //\n      ConstructorInfo ctor = attributeType.GetConstructor(ctorParameters);\n\n      // Pass the constructor and an array of arguments (in this case,\n      // an array containing a single string) to the \n      // CustomAttributeBuilder constructor.\n      //\n      object[] ctorArgs = { &quot;2.0.3033.0&quot; };\n      CustomAttributeBuilder attribute = \n         new CustomAttributeBuilder(ctor, ctorArgs);\n\n      // Finally, apply the attribute to the assembly.\n      //\n      myAssembly.SetCustomAttribute(attribute);\n\n\n      // The pattern described above is used to create and apply\n      // several more attributes. As it happens, all these attributes\n      // have a constructor that takes a string, so the same ctorArgs\n      // variable works for all of them.\n      \n\n      // The AssemblyTitleAttribute sets the Description field on\n      // the General tab and the Version tab of the Windows file \n      // properties dialog.\n      //\n      attributeType = typeof(AssemblyTitleAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      ctorArgs = new object[] { &quot;The Application Title&quot; };\n      attribute = new CustomAttributeBuilder(ctor, ctorArgs);\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyCopyrightAttribute sets the Copyright field on\n      // the Version tab.\n      //\n      attributeType = typeof(AssemblyCopyrightAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      ctorArgs = new object[] { &quot;ï¿½ My Example Company 1991-2005&quot; };\n      attribute = new CustomAttributeBuilder(ctor, ctorArgs);\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyDescriptionAttribute sets the Comment item.\n      //\n      attributeType = typeof(AssemblyDescriptionAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;This is a comment.&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyCompanyAttribute sets the Company item.\n      //\n      attributeType = typeof(AssemblyCompanyAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;My Example Company&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyProductAttribute sets the Product Name item.\n      //\n      attributeType = typeof(AssemblyProductAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;My Product Name&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n\n      // Define the assembly&#39;s only module. For a single-file assembly,\n      // the module name is the assembly name.\n      //\n      ModuleBuilder myModule = \n         myAssembly.DefineDynamicModule(assemName.Name, \n            assemName.Name + &quot;.exe&quot;);\n\n      // No types or methods are created for this example.\n\n\n      // Define the unmanaged version information resource, which\n      // contains the attribute informaion applied earlier, and save\n      // the assembly. Use the Windows Explorer to examine the properties\n      // of the .exe file.\n      //\n      myAssembly.DefineVersionInfoResource();\n      myAssembly.Save(assemName.Name + &quot;.exe&quot;);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n\n/*\n// Create the callee transient dynamic assembly.\nstatic Type^ CreateAssembly( AppDomain^ myDomain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;MyEmittedAssembly&quot;;\n   AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n   \n   // Set Company Attribute to the assembly.\n   Type^ companyAttribute = AssemblyCompanyAttribute::typeid;\n   array&lt;Type^&gt;^types1 = {String::typeid};\n   ConstructorInfo^ myConstructorInfo1 = companyAttribute-&gt;GetConstructor( types1 );\n   array&lt;Object^&gt;^obj1 = {&quot;Microsoft Corporation&quot;};\n   CustomAttributeBuilder^ attributeBuilder1 = gcnew CustomAttributeBuilder( myConstructorInfo1,obj1 );\n   myAssembly-&gt;SetCustomAttribute( attributeBuilder1 );\n   \n   // Set Copyright Attribute to the assembly.\n   Type^ copyrightAttribute = AssemblyCopyrightAttribute::typeid;\n   array&lt;Type^&gt;^types2 = {String::typeid};\n   ConstructorInfo^ myConstructorInfo2 = copyrightAttribute-&gt;GetConstructor( types2 );\n   array&lt;Object^&gt;^obj2 = {&quot;@Copyright Microsoft Corp. 1990-2001&quot;};\n   CustomAttributeBuilder^ attributeBuilder2 = gcnew CustomAttributeBuilder( myConstructorInfo2,obj2 );\n   myAssembly-&gt;SetCustomAttribute( attributeBuilder2 );\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n   \n   // Define a public class named S&quot;HelloWorld&quot; in the assembly.\n   TypeBuilder^ helloWorldClass = myModule-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n   \n   // Define the Display method.\n   MethodBuilder^ myMethod = helloWorldClass-&gt;DefineMethod( &quot;Display&quot;, MethodAttributes::Public, String::typeid, nullptr );\n   \n   // Generate IL for GetGreeting.\n   ILGenerator^ methodIL = myMethod-&gt;GetILGenerator();\n   methodIL-&gt;Emit( OpCodes::Ldstr, &quot;Display method get called.&quot; );\n   methodIL-&gt;Emit( OpCodes::Ret );\n   \n   // Returns the type HelloWorld.\n   return (helloWorldClass-&gt;CreateType());\n}\n*/\n\nint main()\n{\n   AssemblyName^ assemName = gcnew AssemblyName();\n   assemName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n   // Create a dynamic assembly in the current application domain,\n   // specifying that the assembly is to be saved.\n   //\n   AssemblyBuilder^ myAssembly = \n      AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(assemName, \n         AssemblyBuilderAccess::Save);\n\n\n   // To apply an attribute to a dynamic assembly, first get the \n   // attribute type. The AssemblyFileVersionAttribute sets the \n   // File Version field on the Version tab of the Windows file\n   // properties dialog.\n   //\n   Type^ attributeType = AssemblyFileVersionAttribute::typeid;\n\n   // To identify the constructor, use an array of types representing\n   // the constructor&#39;s parameter types. This ctor takes a string.\n   //\n   array&lt;Type^&gt;^ ctorParameters = { String::typeid };\n\n   // Get the constructor for the attribute.\n   //\n   ConstructorInfo^ ctor = attributeType-&gt;GetConstructor(ctorParameters);\n\n   // Pass the constructor and an array of arguments (in this case,\n   // an array containing a single string) to the \n   // CustomAttributeBuilder constructor.\n   //\n   array&lt;Object^&gt;^ ctorArgs = { &quot;2.0.3033.0&quot; };\n   CustomAttributeBuilder^ attribute = \n      gcnew CustomAttributeBuilder(ctor, ctorArgs);\n\n   // Finally, apply the attribute to the assembly.\n   //\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n\n   // The pattern described above is used to create and apply\n   // several more attributes. As it happens, all these attributes\n   // have a constructor that takes a string, so the same ctorArgs\n   // variable works for all of them.\n    \n\n   // The AssemblyTitleAttribute sets the Description field on\n   // the General tab and the Version tab of the Windows file \n   // properties dialog.\n   //\n   attributeType = AssemblyTitleAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   ctorArgs = gcnew array&lt;Object^&gt; { &quot;The Application Title&quot; };\n   attribute = gcnew CustomAttributeBuilder(ctor, ctorArgs);\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyCopyrightAttribute sets the Copyright field on\n   // the Version tab.\n   //\n   attributeType = AssemblyCopyrightAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   ctorArgs = gcnew array&lt;Object^&gt; { &quot;ï¿½ My Example Company 1991-2005&quot; };\n   attribute = gcnew CustomAttributeBuilder(ctor, ctorArgs);\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyDescriptionAttribute sets the Comment item.\n   //\n   attributeType = AssemblyDescriptionAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;This is a comment.&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyCompanyAttribute sets the Company item.\n   //\n   attributeType = AssemblyCompanyAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;My Example Company&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyProductAttribute sets the Product Name item.\n   //\n   attributeType = AssemblyProductAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;My Product Name&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n\n   // Define the assembly&#39;s only module. For a single-file assembly,\n   // the module name is the assembly name.\n   //\n   ModuleBuilder^ myModule = \n      myAssembly-&gt;DefineDynamicModule(assemName-&gt;Name, \n         assemName-&gt;Name + &quot;.exe&quot;);\n\n   // No types or methods are created for this example.\n\n\n   // Define the unmanaged version information resource, which\n   // contains the attribute informaion applied earlier, and save\n   // the assembly. Use the Windows Explorer to examine the properties\n   // of the .exe file.\n   //\n   myAssembly-&gt;DefineVersionInfoResource();\n   myAssembly-&gt;Save(assemName-&gt;Name + &quot;.exe&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Example\n\n   Sub Main()\n\n      Dim assemName As New AssemblyName()\n      assemName.Name = &quot;EmittedAssembly&quot;\n\n      &#39; Create a dynamic assembly in the current application domain,\n      &#39; specifying that the assembly is to be saved.\n      &#39;\n      Dim myAssembly As AssemblyBuilder = _\n         AppDomain.CurrentDomain.DefineDynamicAssembly(assemName, _\n            AssemblyBuilderAccess.Save)\n\n\n      &#39; To apply an attribute to a dynamic assembly, first get the \n      &#39; attribute type. The AssemblyFileVersionAttribute sets the \n      &#39; File Version field on the Version tab of the Windows file\n      &#39; properties dialog.\n      &#39;\n      Dim attributeType As Type = GetType(AssemblyFileVersionAttribute)\n\n      &#39; To identify the constructor, use an array of types representing\n      &#39; the constructor&#39;s parameter types. This ctor takes a string.\n      &#39;\n      Dim ctorParameters() As Type = { GetType(String) }\n\n      &#39; Get the constructor for the attribute.\n      &#39;\n      Dim ctor As ConstructorInfo = _\n                         attributeType.GetConstructor(ctorParameters)\n\n      &#39; Pass the constructor and an array of arguments (in this case,\n      &#39; an array containing a single string) to the \n      &#39; CustomAttributeBuilder constructor.\n      &#39;\n      Dim ctorArgs() As Object = { &quot;2.0.3033.0&quot; }\n      Dim attribute As New CustomAttributeBuilder(ctor, ctorArgs)\n\n      &#39; Finally, apply the attribute to the assembly.\n      &#39;\n      myAssembly.SetCustomAttribute(attribute)\n\n\n      &#39; The pattern described above is used to create and apply\n      &#39; several more attributes. As it happens, all these attributes\n      &#39; have a constructor that takes a string, so the same ctorArgs\n      &#39; variable works for all of them.\n      \n\n      &#39; The AssemblyTitleAttribute sets the Description field on\n      &#39; the General tab and the Version tab of the Windows file \n      &#39; properties dialog.\n      &#39;\n      attributeType = GetType(AssemblyTitleAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      ctorArgs = New Object() { &quot;The Application Title&quot; }\n      attribute = New CustomAttributeBuilder(ctor, ctorArgs)\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyCopyrightAttribute sets the Copyright field on\n      &#39; the Version tab.\n      &#39;\n      attributeType = GetType(AssemblyCopyrightAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      ctorArgs = New Object() { &quot;ï¿½ My Example Company 1991-2005&quot; }\n      attribute = New CustomAttributeBuilder(ctor, ctorArgs)\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyDescriptionAttribute sets the Comment item.\n      &#39;\n      attributeType = GetType(AssemblyDescriptionAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;This is a comment.&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyCompanyAttribute sets the Company item.\n      &#39;\n      attributeType = GetType(AssemblyCompanyAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;My Example Company&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyProductAttribute sets the Product Name item.\n      &#39;\n      attributeType = GetType(AssemblyProductAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;My Product Name&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n\n      &#39; Define the assembly&#39;s only module. For a single-file assembly,\n      &#39; the module name is the assembly name.\n      &#39;\n      Dim myModule As ModuleBuilder = _\n         myAssembly.DefineDynamicModule(assemName.Name, _\n            assemName.Name &amp; &quot;.exe&quot;)\n\n      &#39; No types or methods are created for this example.\n\n\n      &#39; Define the unmanaged version information resource, which\n      &#39; contains the attribute informaion applied earlier, and save\n      &#39; the assembly. Use the Windows Explorer to examine the properties\n      &#39; of the .exe file.\n      &#39;\n      myAssembly.DefineVersionInfoResource()\n      myAssembly.Save(assemName.Name &amp; &quot;.exe&quot;)\n\n   End Sub \nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource_System_String_System_String_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_DefineVersionInfoResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineVersionInfoResource(String,String,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines an unmanaged version information resource for this assembly with the given specifications.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DefineVersionInfoResource (string product, string productVersion, string company, string copyright, string trademark);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>product</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the product with which this assembly is distributed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>productVersion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The version of the product with which this assembly is distributed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>company</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the company that produced this assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>copyright</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Describes all copyright notices, trademarks, and registered trademarks that apply to this assembly. This should include the full text of all notices, legal symbols, copyright dates, trademark numbers, and so on. In English, this string should be in the format &quot;Copyright Microsoft Corp. 1990-2001&quot;.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>trademark</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Describes all trademarks and registered trademarks that apply to this assembly. This should include the full text of all notices, legal symbols, trademark numbers, and so on. In English, this string should be in the format &quot;Windows is a trademark of Microsoft Corporation&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An unmanaged version information resource was previously defined.  </p>\n<p> -or-  </p>\n<p> The unmanaged version information is too large to persist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An assembly can be associated with only one unmanaged resource. This means that calling DefineVersionInfoResource or <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_\" data-linktype=\"relative-path\">DefineUnmanagedResource</a> after either one of the methods was called previously will throw the System.ArgumentException. Multiple unmanaged resources need to be merged with a tool such as the Microsoft <code>ResMerge</code> utility (not supplied with the common language runtime SDK).  </p>\n<p> Empty argument strings get written as a single space. Spaces are substituted for null characters in the argument strings.  </p>\n<p> The structure of the version resource includes data that identifies the version, language, and distribution of the file. Installation programs use the functions in the file installation library (VER.DLL) to retrieve the version information resource from a file and to extract the version information blocks from the resource.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example below illustrates the usage of <code>DefineVersionInfoResource</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Example\n{\n   public static void Main()\n   {\n      AssemblyName assemName = new AssemblyName();\n      assemName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create a dynamic assembly in the current application domain,\n      // specifying that the assembly is to be saved.\n      //\n      AssemblyBuilder myAssembly = \n         AppDomain.CurrentDomain.DefineDynamicAssembly(assemName, \n            AssemblyBuilderAccess.Save);\n\n\n      // To apply an attribute to a dynamic assembly, first get the \n      // attribute type. The AssemblyFileVersionAttribute sets the \n      // File Version field on the Version tab of the Windows file\n      // properties dialog.\n      //\n      Type attributeType = typeof(AssemblyFileVersionAttribute);\n\n      // To identify the constructor, use an array of types representing\n      // the constructor&#39;s parameter types. This ctor takes a string.\n      //\n      Type[] ctorParameters = { typeof(string) };\n\n      // Get the constructor for the attribute.\n      //\n      ConstructorInfo ctor = attributeType.GetConstructor(ctorParameters);\n\n      // Pass the constructor and an array of arguments (in this case,\n      // an array containing a single string) to the \n      // CustomAttributeBuilder constructor.\n      //\n      object[] ctorArgs = { &quot;2.0.3033.0&quot; };\n      CustomAttributeBuilder attribute = \n         new CustomAttributeBuilder(ctor, ctorArgs);\n\n      // Finally, apply the attribute to the assembly.\n      //\n      myAssembly.SetCustomAttribute(attribute);\n\n\n      // The pattern described above is used to create and apply\n      // several more attributes. As it happens, all these attributes\n      // have a constructor that takes a string, so the same ctorArgs\n      // variable works for all of them.\n      \n\n      // The AssemblyTitleAttribute sets the Description field on\n      // the General tab and the Version tab of the Windows file \n      // properties dialog.\n      //\n      attributeType = typeof(AssemblyTitleAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      ctorArgs = new object[] { &quot;The Application Title&quot; };\n      attribute = new CustomAttributeBuilder(ctor, ctorArgs);\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyCopyrightAttribute sets the Copyright field on\n      // the Version tab.\n      //\n      attributeType = typeof(AssemblyCopyrightAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      ctorArgs = new object[] { &quot;ï¿½ My Example Company 1991-2005&quot; };\n      attribute = new CustomAttributeBuilder(ctor, ctorArgs);\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyDescriptionAttribute sets the Comment item.\n      //\n      attributeType = typeof(AssemblyDescriptionAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;This is a comment.&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyCompanyAttribute sets the Company item.\n      //\n      attributeType = typeof(AssemblyCompanyAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;My Example Company&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n      // The AssemblyProductAttribute sets the Product Name item.\n      //\n      attributeType = typeof(AssemblyProductAttribute);\n      ctor = attributeType.GetConstructor(ctorParameters);\n      attribute = new CustomAttributeBuilder(ctor, \n         new object[] { &quot;My Product Name&quot; });\n      myAssembly.SetCustomAttribute(attribute);\n\n\n      // Define the assembly&#39;s only module. For a single-file assembly,\n      // the module name is the assembly name.\n      //\n      ModuleBuilder myModule = \n         myAssembly.DefineDynamicModule(assemName.Name, \n            assemName.Name + &quot;.exe&quot;);\n\n      // No types or methods are created for this example.\n\n\n      // Define the unmanaged version information resource, which\n      // contains the attribute informaion applied earlier, and save\n      // the assembly. Use the Windows Explorer to examine the properties\n      // of the .exe file.\n      //\n      myAssembly.DefineVersionInfoResource();\n      myAssembly.Save(assemName.Name + &quot;.exe&quot;);\n\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n\n/*\n// Create the callee transient dynamic assembly.\nstatic Type^ CreateAssembly( AppDomain^ myDomain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;MyEmittedAssembly&quot;;\n   AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n   \n   // Set Company Attribute to the assembly.\n   Type^ companyAttribute = AssemblyCompanyAttribute::typeid;\n   array&lt;Type^&gt;^types1 = {String::typeid};\n   ConstructorInfo^ myConstructorInfo1 = companyAttribute-&gt;GetConstructor( types1 );\n   array&lt;Object^&gt;^obj1 = {&quot;Microsoft Corporation&quot;};\n   CustomAttributeBuilder^ attributeBuilder1 = gcnew CustomAttributeBuilder( myConstructorInfo1,obj1 );\n   myAssembly-&gt;SetCustomAttribute( attributeBuilder1 );\n   \n   // Set Copyright Attribute to the assembly.\n   Type^ copyrightAttribute = AssemblyCopyrightAttribute::typeid;\n   array&lt;Type^&gt;^types2 = {String::typeid};\n   ConstructorInfo^ myConstructorInfo2 = copyrightAttribute-&gt;GetConstructor( types2 );\n   array&lt;Object^&gt;^obj2 = {&quot;@Copyright Microsoft Corp. 1990-2001&quot;};\n   CustomAttributeBuilder^ attributeBuilder2 = gcnew CustomAttributeBuilder( myConstructorInfo2,obj2 );\n   myAssembly-&gt;SetCustomAttribute( attributeBuilder2 );\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n   \n   // Define a public class named S&quot;HelloWorld&quot; in the assembly.\n   TypeBuilder^ helloWorldClass = myModule-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n   \n   // Define the Display method.\n   MethodBuilder^ myMethod = helloWorldClass-&gt;DefineMethod( &quot;Display&quot;, MethodAttributes::Public, String::typeid, nullptr );\n   \n   // Generate IL for GetGreeting.\n   ILGenerator^ methodIL = myMethod-&gt;GetILGenerator();\n   methodIL-&gt;Emit( OpCodes::Ldstr, &quot;Display method get called.&quot; );\n   methodIL-&gt;Emit( OpCodes::Ret );\n   \n   // Returns the type HelloWorld.\n   return (helloWorldClass-&gt;CreateType());\n}\n*/\n\nint main()\n{\n   AssemblyName^ assemName = gcnew AssemblyName();\n   assemName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n   // Create a dynamic assembly in the current application domain,\n   // specifying that the assembly is to be saved.\n   //\n   AssemblyBuilder^ myAssembly = \n      AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(assemName, \n         AssemblyBuilderAccess::Save);\n\n\n   // To apply an attribute to a dynamic assembly, first get the \n   // attribute type. The AssemblyFileVersionAttribute sets the \n   // File Version field on the Version tab of the Windows file\n   // properties dialog.\n   //\n   Type^ attributeType = AssemblyFileVersionAttribute::typeid;\n\n   // To identify the constructor, use an array of types representing\n   // the constructor&#39;s parameter types. This ctor takes a string.\n   //\n   array&lt;Type^&gt;^ ctorParameters = { String::typeid };\n\n   // Get the constructor for the attribute.\n   //\n   ConstructorInfo^ ctor = attributeType-&gt;GetConstructor(ctorParameters);\n\n   // Pass the constructor and an array of arguments (in this case,\n   // an array containing a single string) to the \n   // CustomAttributeBuilder constructor.\n   //\n   array&lt;Object^&gt;^ ctorArgs = { &quot;2.0.3033.0&quot; };\n   CustomAttributeBuilder^ attribute = \n      gcnew CustomAttributeBuilder(ctor, ctorArgs);\n\n   // Finally, apply the attribute to the assembly.\n   //\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n\n   // The pattern described above is used to create and apply\n   // several more attributes. As it happens, all these attributes\n   // have a constructor that takes a string, so the same ctorArgs\n   // variable works for all of them.\n    \n\n   // The AssemblyTitleAttribute sets the Description field on\n   // the General tab and the Version tab of the Windows file \n   // properties dialog.\n   //\n   attributeType = AssemblyTitleAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   ctorArgs = gcnew array&lt;Object^&gt; { &quot;The Application Title&quot; };\n   attribute = gcnew CustomAttributeBuilder(ctor, ctorArgs);\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyCopyrightAttribute sets the Copyright field on\n   // the Version tab.\n   //\n   attributeType = AssemblyCopyrightAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   ctorArgs = gcnew array&lt;Object^&gt; { &quot;ï¿½ My Example Company 1991-2005&quot; };\n   attribute = gcnew CustomAttributeBuilder(ctor, ctorArgs);\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyDescriptionAttribute sets the Comment item.\n   //\n   attributeType = AssemblyDescriptionAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;This is a comment.&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyCompanyAttribute sets the Company item.\n   //\n   attributeType = AssemblyCompanyAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;My Example Company&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n   // The AssemblyProductAttribute sets the Product Name item.\n   //\n   attributeType = AssemblyProductAttribute::typeid;\n   ctor = attributeType-&gt;GetConstructor(ctorParameters);\n   attribute = gcnew CustomAttributeBuilder(ctor, \n      gcnew array&lt;Object^&gt; { &quot;My Product Name&quot; });\n   myAssembly-&gt;SetCustomAttribute(attribute);\n\n\n   // Define the assembly&#39;s only module. For a single-file assembly,\n   // the module name is the assembly name.\n   //\n   ModuleBuilder^ myModule = \n      myAssembly-&gt;DefineDynamicModule(assemName-&gt;Name, \n         assemName-&gt;Name + &quot;.exe&quot;);\n\n   // No types or methods are created for this example.\n\n\n   // Define the unmanaged version information resource, which\n   // contains the attribute informaion applied earlier, and save\n   // the assembly. Use the Windows Explorer to examine the properties\n   // of the .exe file.\n   //\n   myAssembly-&gt;DefineVersionInfoResource();\n   myAssembly-&gt;Save(assemName-&gt;Name + &quot;.exe&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyBuilder_DefineVersionInfoResource#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Example\n\n   Sub Main()\n\n      Dim assemName As New AssemblyName()\n      assemName.Name = &quot;EmittedAssembly&quot;\n\n      &#39; Create a dynamic assembly in the current application domain,\n      &#39; specifying that the assembly is to be saved.\n      &#39;\n      Dim myAssembly As AssemblyBuilder = _\n         AppDomain.CurrentDomain.DefineDynamicAssembly(assemName, _\n            AssemblyBuilderAccess.Save)\n\n\n      &#39; To apply an attribute to a dynamic assembly, first get the \n      &#39; attribute type. The AssemblyFileVersionAttribute sets the \n      &#39; File Version field on the Version tab of the Windows file\n      &#39; properties dialog.\n      &#39;\n      Dim attributeType As Type = GetType(AssemblyFileVersionAttribute)\n\n      &#39; To identify the constructor, use an array of types representing\n      &#39; the constructor&#39;s parameter types. This ctor takes a string.\n      &#39;\n      Dim ctorParameters() As Type = { GetType(String) }\n\n      &#39; Get the constructor for the attribute.\n      &#39;\n      Dim ctor As ConstructorInfo = _\n                         attributeType.GetConstructor(ctorParameters)\n\n      &#39; Pass the constructor and an array of arguments (in this case,\n      &#39; an array containing a single string) to the \n      &#39; CustomAttributeBuilder constructor.\n      &#39;\n      Dim ctorArgs() As Object = { &quot;2.0.3033.0&quot; }\n      Dim attribute As New CustomAttributeBuilder(ctor, ctorArgs)\n\n      &#39; Finally, apply the attribute to the assembly.\n      &#39;\n      myAssembly.SetCustomAttribute(attribute)\n\n\n      &#39; The pattern described above is used to create and apply\n      &#39; several more attributes. As it happens, all these attributes\n      &#39; have a constructor that takes a string, so the same ctorArgs\n      &#39; variable works for all of them.\n      \n\n      &#39; The AssemblyTitleAttribute sets the Description field on\n      &#39; the General tab and the Version tab of the Windows file \n      &#39; properties dialog.\n      &#39;\n      attributeType = GetType(AssemblyTitleAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      ctorArgs = New Object() { &quot;The Application Title&quot; }\n      attribute = New CustomAttributeBuilder(ctor, ctorArgs)\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyCopyrightAttribute sets the Copyright field on\n      &#39; the Version tab.\n      &#39;\n      attributeType = GetType(AssemblyCopyrightAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      ctorArgs = New Object() { &quot;ï¿½ My Example Company 1991-2005&quot; }\n      attribute = New CustomAttributeBuilder(ctor, ctorArgs)\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyDescriptionAttribute sets the Comment item.\n      &#39;\n      attributeType = GetType(AssemblyDescriptionAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;This is a comment.&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyCompanyAttribute sets the Company item.\n      &#39;\n      attributeType = GetType(AssemblyCompanyAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;My Example Company&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n      &#39; The AssemblyProductAttribute sets the Product Name item.\n      &#39;\n      attributeType = GetType(AssemblyProductAttribute)\n      ctor = attributeType.GetConstructor(ctorParameters)\n      attribute = New CustomAttributeBuilder(ctor, _\n         New Object() { &quot;My Product Name&quot; })\n      myAssembly.SetCustomAttribute(attribute)\n\n\n      &#39; Define the assembly&#39;s only module. For a single-file assembly,\n      &#39; the module name is the assembly name.\n      &#39;\n      Dim myModule As ModuleBuilder = _\n         myAssembly.DefineDynamicModule(assemName.Name, _\n            assemName.Name &amp; &quot;.exe&quot;)\n\n      &#39; No types or methods are created for this example.\n\n\n      &#39; Define the unmanaged version information resource, which\n      &#39; contains the attribute informaion applied earlier, and save\n      &#39; the assembly. Use the Windows Explorer to examine the properties\n      &#39; of the .exe file.\n      &#39;\n      myAssembly.DefineVersionInfoResource()\n      myAssembly.Save(assemName.Name &amp; &quot;.exe&quot;)\n\n   End Sub \nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the custom attributes; the array is empty if there are no attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>, and that derive from a specified attribute type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base type from which attributes derive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the custom attributes that are derived at any level from <code>attributeType</code>; the array is empty if there are no such attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object supplied by the runtime. For example, <code>attributeType</code> is a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetCustomAttributesData\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetCustomAttributesData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributesData()</div>        \r\n          </div>\r\n    \r\n            <p>Returns <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects that contain information about the attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A generic list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetDynamicModule_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetDynamicModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDynamicModule(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the dynamic module with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ModuleBuilder GetDynamicModule (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the requested dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a></div>\r\n                  </div>\r\n                  <p>A ModuleBuilder object representing the requested dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetExportedTypes\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetExportedTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExportedTypes()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the exported types defined in this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetExportedTypes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> containing the exported types defined in this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetFile_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFile(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> for the specified file in the file table of the manifest of this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.FileStream GetFile (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the specified file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> for the specified file, or <code>null</code>, if the file is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>name</code> should not include the path to the file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetFiles_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.FileStream[] GetFiles (bool getResourceModules);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>getResourceModules</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include resource modules; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetLoadedModules_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetLoadedModules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLoadedModules(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module[] GetLoadedModules (bool getResourceModules);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>getResourceModules</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include resource modules; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>[]</div>\r\n                  </div>\r\n                  <p>The loaded modules that are part of this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetManifestResourceInfo_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetManifestResourceInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManifestResourceInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns information about how the given resource has been persisted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.manifestresourceinfo\" data-linktype=\"relative-path\">ManifestResourceInfo</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.reflection.manifestresourceinfo\" data-linktype=\"relative-path\">ManifestResourceInfo</a> populated with information about the resource&#39;s topology, or <code>null</code> if the resource is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetManifestResourceNames\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetManifestResourceNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManifestResourceNames()</div>        \r\n          </div>\r\n    \r\n            <p>Loads the specified manifest resource from this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string[] GetManifestResourceNames ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <code>String</code> containing the names of all the resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported on a dynamic assembly. To get the manifest resource names, use <span class=\"xref\">stem.Reflection.Assembly.GetManifestResourceNames*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetManifestResourceStream_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetManifestResourceStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManifestResourceStream(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the specified manifest resource from this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Stream GetManifestResourceStream (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the manifest resource being requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> representing this manifest resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetManifestResourceStream_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetManifestResourceStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManifestResourceStream(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Stream GetManifestResourceStream (Type type, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type whose namespace is used to scope the manifest resource name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the manifest resource being requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> representing this manifest resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> has its file pointer set to the beginning of the resource.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>If the full name of <code>type</code> is &quot;MyNameSpace.MyClasses&quot; and <code>name</code> is &quot;Dot&quot;, <code>GetManifestResourceStream</code> will search for a resource named MyNameSpace.Dot.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetModule_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetModule(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the specified module in this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module GetModule (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the requested module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The module being requested, or <code>null</code> if the module is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetModules_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetModules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetModules(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets all the modules that are part of this assembly, and optionally includes resource modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module[] GetModules (bool getResourceModules);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>getResourceModules</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include resource modules; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>[]</div>\r\n                  </div>\r\n                  <p>The modules that are part of this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetName_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetName(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> that was specified when the current dynamic assembly was created, and sets the code base as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.AssemblyName GetName (bool copiedName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>copiedName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set the code base to the location of the assembly after it is shadow-copied; <code>false</code> to set the code base to the original location.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </div>\r\n                  <p>The name of the dynamic assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetReferencedAssemblies\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetReferencedAssemblies_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetReferencedAssemblies()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an incomplete list of <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> objects for the assemblies that are referenced by this <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.AssemblyName[] GetReferencedAssemblies ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>[]</div>\r\n                  </div>\r\n                  <p>An array of assembly names for the referenced assemblies. This array is not a complete list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not return a complete list of referenced assemblies. For example, if you apply a custom attribute to the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>, the assembly in which the attribute was defined is included in the list returned by this method. However, if you use a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object to specify the type of a method parameter, that type is not included.  </p>\n<p> To get a complete list of referenced assemblies, save the assembly, load it into another application domain, and call the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetReferencedAssemblies_\" data-linktype=\"relative-path\">GetReferencedAssemblies</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetSatelliteAssembly_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetSatelliteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSatelliteAssembly(CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the satellite assembly for the specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">System.Reflection.Assembly</a></div>\r\n                  </div>\r\n                  <p>The specified satellite assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The satellite assembly with a matching file name was found, but the <code>CultureInfo</code> did not match the one specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The satellite assembly is not a valid assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  </p>\n<p> Call this method to use your current assembly version.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetSatelliteAssembly_System_Globalization_CultureInfo_System_Version_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetSatelliteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSatelliteAssembly(CultureInfo,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the specified version of the satellite assembly for the specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified culture.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>version</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The version of the satellite assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">System.Reflection.Assembly</a></div>\r\n                  </div>\r\n                  <p>The specified satellite assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The satellite assembly with a matching file name was found, but the <code>CultureInfo</code> or the version did not match the one specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The satellite assembly is not a valid assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  </p>\n<p> Call the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetSatelliteAssembly_System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">GetSatelliteAssembly(CultureInfo)</a> overload to use your current assembly version.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_GetType_System_String_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the specified type from the types that have been defined and created in the current <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetType (string name, bool throwOnError, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the type to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnError</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if the type is not found; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore the case of the type name when searching; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The specified type, or <code>null</code> if the type is not found or has not been created yet.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A type cannot be found until it has been created by calling the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of attribute to test for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if one or more instances of <code>attributeType</code> is applied to this dynamic assembly; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_Save_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String)</div>        \r\n          </div>\r\n    \r\n            <p>Saves this dynamic assembly to disk.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (string assemblyFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>assemblyFileName</code> is 0.  </p>\n<p> -or-  </p>\n<p> There are two or more modules resource files in the assembly with the same name.  </p>\n<p> -or-  </p>\n<p> The target directory of the assembly is invalid.  </p>\n<p> -or-  </p>\n<p> <code>assemblyFileName</code> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resource, was defined in this assembly.  </p>\n<p> -or-  </p>\n<p> The <code>CultureInfo</code> string in <a class=\"xref\" href=\"system.reflection.assemblycultureattribute\" data-linktype=\"relative-path\">AssemblyCultureAttribute</a> is not a valid string and <span class=\"xref\">stem.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource*</span> was called prior to calling this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This assembly has been saved before.  </p>\n<p> -or-  </p>\n<p> This assembly has access <code>Run</code><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An output error occurs during the save.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> has not been called for any of the types in the modules of the assembly to be written to disk.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method saves all non-transient dynamic modules defined in this dynamic assembly. Transient dynamic modules are not saved. The assembly file name can be the same as the name of one of the modules. If so, the assembly manifest is stored within that module. <code>assemblyFileName</code> can be different from the names of all of the modules contained within the assembly. If so, the assembly file contains only the assembly manifest.  </p>\n<p> For each <a class=\"xref\" href=\"system.resources.resourcewriter\" data-linktype=\"relative-path\">ResourceWriter</a> obtained using <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineResource_\" data-linktype=\"relative-path\">DefineResource</a>, this method writes the .resources file and calls <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_Close_\" data-linktype=\"relative-path\">Close</a> to close the stream.  </p>\n<p> The <code>assemblyFileName</code> needs to be a simple file name without a drive or directory component. To create an assembly in a specific directory, use one of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> methods that takes a target directory argument.  </p>\n<p> In the .NET Framework version 2.0, this overload of the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_Save_\" data-linktype=\"relative-path\">Save</a> method is equivalent to calling the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_Save_System_String_System_Reflection_PortableExecutableKinds_System_Reflection_ImageFileMachine_\" data-linktype=\"relative-path\">Save(String,PortableExecutableKinds,ImageFileMachine)</a> method overload with <a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">PortableExecutableKinds</a> for the <code>portableExecutableKind</code> parameter and <a class=\"xref\" href=\"system.reflection.imagefilemachine\" data-linktype=\"relative-path\">ImageFileMachine</a> for the <code>imageFileMachine</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample creates a dynamic assembly and then persists it to a local disk using <code>Save</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.AssemblyBuilder.Save Example#1\">\nusing System;\nusing System.Text;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n// The Point class is the class we will reflect on and copy into our\n// dynamic assembly. The public static function PointMain() will be used\n// as our entry point.\n//\n// We are constructing the type seen here dynamically, and will write it\n// out into a .exe file for later execution from the command-line.\n// --- \n// class Point {\n//   \n//   private int x;\n//   private int y;\n//\n//   public Point(int ix, int iy) {\n//\n//   \tthis.x = ix;\n//    \tthis.y = iy;\n//\n//   }\n//\n//   public int DotProduct (Point p) {\n//   \n//   \treturn ((this.x * p.x) + (this.y * p.y));\n//\n//   }\n//\n//   public static void PointMain() {\n//     \n//     Console.Write(&quot;Enter the &#39;x&#39; value for point 1: &quot;); \n//     int x1 = Convert.ToInt32(Console.ReadLine());\n//     \n//     Console.Write(&quot;Enter the &#39;y&#39; value for point 1: &quot;);\n//     int y1 = Convert.ToInt32(Console.ReadLine());\n//\n//     Console.Write(&quot;Enter the &#39;x&#39; value for point 2: &quot;); \n//     int x2 = Convert.ToInt32(Console.ReadLine());\n//     \n//     Console.Write(&quot;Enter the &#39;y&#39; value for point 2: &quot;);\n//     int y2 = Convert.ToInt32(Console.ReadLine());\n//\n//     Point p1 = new Point(x1, y1);\n//     Point p2 = new Point(x2, y2);\n//\n//     Console.WriteLine(&quot;({0}, {1}) . ({2}, {3}) = {4}.&quot;,\n//\t\t       x1, y1, x2, y2, p1.DotProduct(p2));\n//   \n//   }\n//\n// }\n// ---\n\nclass AssemblyBuilderDemo {\n\n   public static Type BuildDynAssembly() {\n\n        Type pointType = null;\n\n    \tAppDomain currentDom = Thread.GetDomain();\n\n\tConsole.Write(&quot;Please enter a name for your new assembly: &quot;);\n\tStringBuilder asmFileNameBldr = new StringBuilder();\n        asmFileNameBldr.Append(Console.ReadLine());\n\tasmFileNameBldr.Append(&quot;.exe&quot;);\n\tstring asmFileName = asmFileNameBldr.ToString();\t\n\n        AssemblyName myAsmName = new AssemblyName();\n\tmyAsmName.Name = &quot;MyDynamicAssembly&quot;;\n\n        AssemblyBuilder myAsmBldr = currentDom.DefineDynamicAssembly(\n\t\t\t\t\t       myAsmName,\n\t\t\t\t\t       AssemblyBuilderAccess.RunAndSave);\n\n        // We&#39;ve created a dynamic assembly space - now, we need to create a module\n        // within it to reflect the type Point into.\n\n\tModuleBuilder myModuleBldr = myAsmBldr.DefineDynamicModule(asmFileName,\n\t\t\t\t\t\t\t           asmFileName);\n      \n\tTypeBuilder myTypeBldr =  myModuleBldr.DefineType(&quot;Point&quot;);\n    \n        FieldBuilder xField = myTypeBldr.DefineField(&quot;x&quot;, typeof(int),\n                                                     FieldAttributes.Private);\n        FieldBuilder yField = myTypeBldr.DefineField(&quot;y&quot;, typeof(int), \n                                                     FieldAttributes.Private); \n\n        // Build the constructor.\n\n        Type objType = Type.GetType(&quot;System.Object&quot;); \n        ConstructorInfo objCtor = objType.GetConstructor(new Type[0]);\n\n        Type[] ctorParams = new Type[] {typeof(int), typeof(int)};\n        ConstructorBuilder pointCtor = myTypeBldr.DefineConstructor(\n \t\t\t\t                  MethodAttributes.Public,\n\t\t\t\t                  CallingConventions.Standard,\n\t\t\t\t                  ctorParams);\n        ILGenerator ctorIL = pointCtor.GetILGenerator();\n        ctorIL.Emit(OpCodes.Ldarg_0);\n        ctorIL.Emit(OpCodes.Call, objCtor);\n        ctorIL.Emit(OpCodes.Ldarg_0);\n        ctorIL.Emit(OpCodes.Ldarg_1);\n        ctorIL.Emit(OpCodes.Stfld, xField); \n        ctorIL.Emit(OpCodes.Ldarg_0);\n        ctorIL.Emit(OpCodes.Ldarg_2);\n        ctorIL.Emit(OpCodes.Stfld, yField); \n        ctorIL.Emit(OpCodes.Ret);\n\n\t// Build the DotProduct method.\n\n        Console.WriteLine(&quot;Constructor built.&quot;);\n\n\tMethodBuilder pointDPBldr = myTypeBldr.DefineMethod(&quot;DotProduct&quot;,\n\t\t\t\t\t\t\t    MethodAttributes.Public,\n\t\t\t\t\t\t\t    typeof(int),\n\t\t\t\t\t\t\t    new Type[] {myTypeBldr});\n\t\t\t\t\t\t\t   \n\tILGenerator dpIL = pointDPBldr.GetILGenerator();\n\tdpIL.Emit(OpCodes.Ldarg_0);\n\tdpIL.Emit(OpCodes.Ldfld, xField);\n\tdpIL.Emit(OpCodes.Ldarg_1);\n\tdpIL.Emit(OpCodes.Ldfld, xField);\n\tdpIL.Emit(OpCodes.Mul_Ovf_Un);\n\tdpIL.Emit(OpCodes.Ldarg_0);\n\tdpIL.Emit(OpCodes.Ldfld, yField);\n\tdpIL.Emit(OpCodes.Ldarg_1);\n\tdpIL.Emit(OpCodes.Ldfld, yField);\n\tdpIL.Emit(OpCodes.Mul_Ovf_Un);\n\tdpIL.Emit(OpCodes.Add_Ovf_Un);\n\tdpIL.Emit(OpCodes.Ret);\n\n  \t// Build the PointMain method.\n\n        Console.WriteLine(&quot;DotProduct built.&quot;);\n\n\tMethodBuilder pointMainBldr = myTypeBldr.DefineMethod(&quot;PointMain&quot;,\n\t\t\t\t\t\t\t    MethodAttributes.Public |\n\t\t\t\t\t\t\t    MethodAttributes.Static,\n\t\t\t\t\t\t\t    typeof(void),\n\t\t\t\t\t\t\t    null);\n        pointMainBldr.InitLocals = true;\n\tILGenerator pmIL = pointMainBldr.GetILGenerator();\n\n\t// We have four methods that we wish to call, and must represent as\n\t// MethodInfo tokens:\n\t// - void Console.WriteLine(string)\n\t// - string Console.ReadLine()\n\t// - int Convert.Int32(string)\n\t// - void Console.WriteLine(string, object[])\n\n\tMethodInfo writeMI = typeof(Console).GetMethod(\n\t\t\t\t\t     &quot;Write&quot;,\n\t\t\t\t\t     new Type[] {typeof(string)});\n\tMethodInfo readLineMI = typeof(Console).GetMethod(\n\t\t\t\t\t        &quot;ReadLine&quot;,\n\t\t\t\t\t        new Type[0]);\n\tMethodInfo convertInt32MI = typeof(Convert).GetMethod(\n\t\t\t\t\t\t    &quot;ToInt32&quot;,\n\t\t\t\t\t            new Type[] {typeof(string)});\n\tType[] wlParams = new Type[] {typeof(string), typeof(object[])};\n\tMethodInfo writeLineMI = typeof(Console).GetMethod(\n\t\t\t\t\t\t &quot;WriteLine&quot;,\n\t\t\t\t\t\t wlParams);\n\n\t// Although we could just refer to the local variables by\n\t// index (short ints for Ldloc/Stloc, bytes for LdLoc_S/Stloc_S),\n\t// this time, we&#39;ll use LocalBuilders for clarity and to\n\t// demonstrate their usage and syntax.\n\n\tLocalBuilder x1LB = pmIL.DeclareLocal(typeof(int));\t\t\t\t\n\tLocalBuilder y1LB = pmIL.DeclareLocal(typeof(int));\t\t\t\t\n\tLocalBuilder x2LB = pmIL.DeclareLocal(typeof(int));\t\t\t\t\n\tLocalBuilder y2LB = pmIL.DeclareLocal(typeof(int));\t\t\t\t\n\tLocalBuilder point1LB = pmIL.DeclareLocal(myTypeBldr);\t\t\t\t\n\tLocalBuilder point2LB = pmIL.DeclareLocal(myTypeBldr);\t\t\t\t\n\tLocalBuilder tempObjArrLB = pmIL.DeclareLocal(typeof(object[]));\t\t\t\t\n\n\tpmIL.Emit(OpCodes.Ldstr, &quot;Enter the &#39;x&#39; value for point 1: &quot;);\t\n\tpmIL.EmitCall(OpCodes.Call, writeMI, null);\n\tpmIL.EmitCall(OpCodes.Call, readLineMI, null);\n\tpmIL.EmitCall(OpCodes.Call, convertInt32MI, null);\n\tpmIL.Emit(OpCodes.Stloc, x1LB);\n\n\tpmIL.Emit(OpCodes.Ldstr, &quot;Enter the &#39;y&#39; value for point 1: &quot;);\t\n\tpmIL.EmitCall(OpCodes.Call, writeMI, null);\n\tpmIL.EmitCall(OpCodes.Call, readLineMI, null);\n\tpmIL.EmitCall(OpCodes.Call, convertInt32MI, null);\n\tpmIL.Emit(OpCodes.Stloc, y1LB);\n\n\tpmIL.Emit(OpCodes.Ldstr, &quot;Enter the &#39;x&#39; value for point 2: &quot;);\t\n\tpmIL.EmitCall(OpCodes.Call, writeMI, null);\n\tpmIL.EmitCall(OpCodes.Call, readLineMI, null);\n\tpmIL.EmitCall(OpCodes.Call, convertInt32MI, null);\n\tpmIL.Emit(OpCodes.Stloc, x2LB);\n\n\tpmIL.Emit(OpCodes.Ldstr, &quot;Enter the &#39;y&#39; value for point 2: &quot;);\t\n\tpmIL.EmitCall(OpCodes.Call, writeMI, null);\n\tpmIL.EmitCall(OpCodes.Call, readLineMI, null);\n\tpmIL.EmitCall(OpCodes.Call, convertInt32MI, null);\n\tpmIL.Emit(OpCodes.Stloc, y2LB);\n\n\tpmIL.Emit(OpCodes.Ldloc, x1LB);\n\tpmIL.Emit(OpCodes.Ldloc, y1LB);\n\tpmIL.Emit(OpCodes.Newobj, pointCtor);\n\tpmIL.Emit(OpCodes.Stloc, point1LB);\n\n\tpmIL.Emit(OpCodes.Ldloc, x2LB);\n\tpmIL.Emit(OpCodes.Ldloc, y2LB);\n\tpmIL.Emit(OpCodes.Newobj, pointCtor);\n\tpmIL.Emit(OpCodes.Stloc, point2LB);\n\n\tpmIL.Emit(OpCodes.Ldstr, &quot;({0}, {1}) . ({2}, {3}) = {4}.&quot;);\n\tpmIL.Emit(OpCodes.Ldc_I4_5);\n\tpmIL.Emit(OpCodes.Newarr, typeof(Object));\n\tpmIL.Emit(OpCodes.Stloc, tempObjArrLB);\n\n\tpmIL.Emit(OpCodes.Ldloc, tempObjArrLB);\n\tpmIL.Emit(OpCodes.Ldc_I4_0);\n\tpmIL.Emit(OpCodes.Ldloc, x1LB);\n\tpmIL.Emit(OpCodes.Box, typeof(int));\n\tpmIL.Emit(OpCodes.Stelem_Ref);\n\n\tpmIL.Emit(OpCodes.Ldloc, tempObjArrLB);\n\tpmIL.Emit(OpCodes.Ldc_I4_1);\n\tpmIL.Emit(OpCodes.Ldloc, y1LB);\n\tpmIL.Emit(OpCodes.Box, typeof(int));\n\tpmIL.Emit(OpCodes.Stelem_Ref);\n\n\tpmIL.Emit(OpCodes.Ldloc, tempObjArrLB);\n\tpmIL.Emit(OpCodes.Ldc_I4_2);\n\tpmIL.Emit(OpCodes.Ldloc, x2LB);\n\tpmIL.Emit(OpCodes.Box, typeof(int));\n\tpmIL.Emit(OpCodes.Stelem_Ref);\n\n\tpmIL.Emit(OpCodes.Ldloc, tempObjArrLB);\n\tpmIL.Emit(OpCodes.Ldc_I4_3);\n\tpmIL.Emit(OpCodes.Ldloc, y2LB);\n\tpmIL.Emit(OpCodes.Box, typeof(int));\n\tpmIL.Emit(OpCodes.Stelem_Ref);\n\n\tpmIL.Emit(OpCodes.Ldloc, tempObjArrLB);\n\tpmIL.Emit(OpCodes.Ldc_I4_4);\n\tpmIL.Emit(OpCodes.Ldloc, point1LB);\n\tpmIL.Emit(OpCodes.Ldloc, point2LB);\n\tpmIL.EmitCall(OpCodes.Callvirt, pointDPBldr, null);\n\n\tpmIL.Emit(OpCodes.Box, typeof(int));\n\tpmIL.Emit(OpCodes.Stelem_Ref);\n\tpmIL.Emit(OpCodes.Ldloc, tempObjArrLB);\n\tpmIL.EmitCall(OpCodes.Call, writeLineMI, null);\n\n\tpmIL.Emit(OpCodes.Ret);\n\n        Console.WriteLine(&quot;PointMain (entry point) built.&quot;);\n\n        pointType = myTypeBldr.CreateType();\n\n        Console.WriteLine(&quot;Type completed.&quot;);\n\n\tmyAsmBldr.SetEntryPoint(pointMainBldr);\n\n        myAsmBldr.Save(asmFileName);\n\n        Console.WriteLine(&quot;Assembly saved as &#39;{0}&#39;.&quot;, asmFileName);\n        Console.WriteLine(&quot;Type &#39;{0}&#39; at the prompt to run your new &quot; +\n\t\t          &quot;dynamically generated dot product calculator.&quot;,\n\t\t\t   asmFileName);\n\n\t// After execution, this program will have generated and written to disk,\n        // in the directory you executed it from, a program named \n\t// &lt;name_you_entered_here&gt;.exe. You can run it by typing\n\t// the name you gave it during execution, in the same directory where\n\t// you executed this program.\n\n\treturn pointType;\n   \n   }\n\n   public static void Main() {\n\n     Type myType = BuildDynAssembly(); \n     Console.WriteLine(&quot;---&quot;);\n\n     // Let&#39;s invoke the type &#39;Point&#39; created in our dynamic assembly. \n   \n     object ptInstance = Activator.CreateInstance(myType, new object[] {0,0}); \n\t\t\t\t\t\t  \n     myType.InvokeMember(&quot;PointMain&quot;,\n\t\t\t  BindingFlags.InvokeMethod,\n\t\t\t  null,\n\t\t\t  ptInstance,\n\t\t\t  new object[0]); \n\n            \n   }\n}\n\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.AssemblyBuilder.Save Example#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n// The Point class is the class we will reflect on and copy into our\n// dynamic assembly. The public static function PointMain() will be used\n// as our entry point.\n//\n// We are constructing the type seen here dynamically, and will write it\n// out into a .exe file for later execution from the command-line.\n// ---\n// __gc class Point {\n// \n// private:\n//    int  x;\n//    int  y;\n// \n// public:\n//    Point(int ix, int iy) {\n// \n//       this-&gt;x = ix;\n//       this-&gt;y = iy;\n// \n//    }\n// \n//    int DotProduct (Point* p) {\n// \n//       return ((this-&gt;x * p-&gt;x) + (this-&gt;y * p-&gt;y));\n// \n//   }\n// \n//    static void PointMain() {\n// \n//       Console::Write(S&quot;Enter the &#39;x&#39; value for point 1: &quot;);\n//       int x1 = Convert::ToInt32(Console::ReadLine());\n// \n//       Console::Write(S&quot;Enter the &#39;y&#39; value for point 1: &quot;);\n//       int y1 = Convert::ToInt32(Console::ReadLine());\n// \n//       Console::Write(S&quot;Enter the &#39;x&#39; value for point 2: &quot;);\n//       int x2 = Convert::ToInt32(Console::ReadLine());\n// \n//       Console::Write(S&quot;Enter the &#39;y&#39; value for point 2: &quot;);\n//       int y2 = Convert::ToInt32(Console::ReadLine());\n// \n//       Point* p1 = new Point(x1, y1);\n//       Point* p2 = new Point(x2, y2);\n// \n//       Console::WriteLine(S&quot;( {0}, {1}) . ( {2}, {3}) = {4}.&quot;,\n//          __box(x1), __box(y1), __box(x2), __box(y2), p1-&gt;DotProduct(p2));\n// \n//    }\n// \n// };\n// ---\nType^ BuildDynAssembly()\n{\n   Type^ pointType = nullptr;\n   AppDomain^ currentDom = Thread::GetDomain();\n   Console::Write( &quot;Please enter a name for your new assembly: &quot; );\n   StringBuilder^ asmFileNameBldr = gcnew StringBuilder;\n   asmFileNameBldr-&gt;Append( Console::ReadLine() );\n   asmFileNameBldr-&gt;Append( &quot;.exe&quot; );\n   String^ asmFileName = asmFileNameBldr-&gt;ToString();\n   AssemblyName^ myAsmName = gcnew AssemblyName;\n   myAsmName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n   AssemblyBuilder^ myAsmBldr = currentDom-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::RunAndSave );\n   \n   // We&#39;ve created a dynamic assembly space - now, we need to create a module\n   // within it to reflect the type Point into.\n   ModuleBuilder^ myModuleBldr = myAsmBldr-&gt;DefineDynamicModule( asmFileName, asmFileName );\n   TypeBuilder^ myTypeBldr = myModuleBldr-&gt;DefineType( &quot;Point&quot; );\n   FieldBuilder^ xField = myTypeBldr-&gt;DefineField( &quot;x&quot;, int::typeid, FieldAttributes::Private );\n   FieldBuilder^ yField = myTypeBldr-&gt;DefineField( &quot;y&quot;, int::typeid, FieldAttributes::Private );\n   \n   // Build the constructor.\n   Type^ objType = Type::GetType( &quot;System.Object&quot; );\n   ConstructorInfo^ objCtor = objType-&gt;GetConstructor( gcnew array&lt;Type^&gt;(0) );\n   array&lt;Type^&gt;^temp4 = {int::typeid,int::typeid};\n   array&lt;Type^&gt;^ctorParams = temp4;\n   ConstructorBuilder^ pointCtor = myTypeBldr-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, ctorParams );\n   ILGenerator^ ctorIL = pointCtor-&gt;GetILGenerator();\n   ctorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ctorIL-&gt;Emit( OpCodes::Call, objCtor );\n   ctorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ctorIL-&gt;Emit( OpCodes::Ldarg_1 );\n   ctorIL-&gt;Emit( OpCodes::Stfld, xField );\n   ctorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ctorIL-&gt;Emit( OpCodes::Ldarg_2 );\n   ctorIL-&gt;Emit( OpCodes::Stfld, yField );\n   ctorIL-&gt;Emit( OpCodes::Ret );\n   \n   // Build the DotProduct method.\n   Console::WriteLine( &quot;Constructor built.&quot; );\n   array&lt;Type^&gt;^temp0 = {myTypeBldr};\n   MethodBuilder^ pointDPBldr = myTypeBldr-&gt;DefineMethod( &quot;DotProduct&quot;, MethodAttributes::Public, int::typeid, temp0 );\n   ILGenerator^ dpIL = pointDPBldr-&gt;GetILGenerator();\n   dpIL-&gt;Emit( OpCodes::Ldarg_0 );\n   dpIL-&gt;Emit( OpCodes::Ldfld, xField );\n   dpIL-&gt;Emit( OpCodes::Ldarg_1 );\n   dpIL-&gt;Emit( OpCodes::Ldfld, xField );\n   dpIL-&gt;Emit( OpCodes::Mul_Ovf_Un );\n   dpIL-&gt;Emit( OpCodes::Ldarg_0 );\n   dpIL-&gt;Emit( OpCodes::Ldfld, yField );\n   dpIL-&gt;Emit( OpCodes::Ldarg_1 );\n   dpIL-&gt;Emit( OpCodes::Ldfld, yField );\n   dpIL-&gt;Emit( OpCodes::Mul_Ovf_Un );\n   dpIL-&gt;Emit( OpCodes::Add_Ovf_Un );\n   dpIL-&gt;Emit( OpCodes::Ret );\n   \n   // Build the PointMain method.\n   Console::WriteLine( &quot;DotProduct built.&quot; );\n   MethodBuilder^ pointMainBldr = myTypeBldr-&gt;DefineMethod( &quot;PointMain&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Static), void::typeid, nullptr );\n   pointMainBldr-&gt;InitLocals = true;\n   ILGenerator^ pmIL = pointMainBldr-&gt;GetILGenerator();\n   \n   // We have four methods that we wish to call, and must represent as\n   // MethodInfo tokens:\n   // - void Console::WriteLine(String*)\n   // - String* Console::ReadLine()\n   // - int Convert::Int32(String*)\n   // - void Console::WriteLine(String*, Object*[])\n   array&lt;Type^&gt;^temp1 = {String::typeid};\n   MethodInfo^ writeMI = Console::typeid-&gt;GetMethod( &quot;Write&quot;, temp1 );\n   MethodInfo^ readLineMI = Console::typeid-&gt;GetMethod( &quot;ReadLine&quot;, gcnew array&lt;Type^&gt;(0) );\n   array&lt;Type^&gt;^temp2 = {String::typeid};\n   MethodInfo^ convertInt32MI = Convert::typeid-&gt;GetMethod( &quot;ToInt32&quot;, temp2 );\n   array&lt;Type^&gt;^temp5 = {String::typeid,array&lt;Object^&gt;::typeid};\n   array&lt;Type^&gt;^wlParams = temp5;\n   MethodInfo^ writeLineMI = Console::typeid-&gt;GetMethod( &quot;WriteLine&quot;, wlParams );\n   \n   // Although we could just refer to the local variables by\n   // index (short ints for Ldloc/Stloc, bytes for LdLoc_S/Stloc_S),\n   // this time, we&#39;ll use LocalBuilders for clarity and to\n   // demonstrate their usage and syntax.\n   LocalBuilder^ x1LB = pmIL-&gt;DeclareLocal( int::typeid );\n   LocalBuilder^ y1LB = pmIL-&gt;DeclareLocal( int::typeid );\n   LocalBuilder^ x2LB = pmIL-&gt;DeclareLocal( int::typeid );\n   LocalBuilder^ y2LB = pmIL-&gt;DeclareLocal( int::typeid );\n   LocalBuilder^ point1LB = pmIL-&gt;DeclareLocal( myTypeBldr );\n   LocalBuilder^ point2LB = pmIL-&gt;DeclareLocal( myTypeBldr );\n   LocalBuilder^ tempObjArrLB = pmIL-&gt;DeclareLocal( array&lt;Object^&gt;::typeid );\n   pmIL-&gt;Emit( OpCodes::Ldstr, &quot;Enter the &#39;x&#39; value for point 1: &quot; );\n   pmIL-&gt;EmitCall( OpCodes::Call, writeMI, nullptr );\n   pmIL-&gt;EmitCall( OpCodes::Call, readLineMI, nullptr );\n   pmIL-&gt;EmitCall( OpCodes::Call, convertInt32MI, nullptr );\n   pmIL-&gt;Emit( OpCodes::Stloc, x1LB );\n   pmIL-&gt;Emit( OpCodes::Ldstr, &quot;Enter the &#39;y&#39; value for point 1: &quot; );\n   pmIL-&gt;EmitCall( OpCodes::Call, writeMI, nullptr );\n   pmIL-&gt;EmitCall( OpCodes::Call, readLineMI, nullptr );\n   pmIL-&gt;EmitCall( OpCodes::Call, convertInt32MI, nullptr );\n   pmIL-&gt;Emit( OpCodes::Stloc, y1LB );\n   pmIL-&gt;Emit( OpCodes::Ldstr, &quot;Enter the &#39;x&#39; value for point 2: &quot; );\n   pmIL-&gt;EmitCall( OpCodes::Call, writeMI, nullptr );\n   pmIL-&gt;EmitCall( OpCodes::Call, readLineMI, nullptr );\n   pmIL-&gt;EmitCall( OpCodes::Call, convertInt32MI, nullptr );\n   pmIL-&gt;Emit( OpCodes::Stloc, x2LB );\n   pmIL-&gt;Emit( OpCodes::Ldstr, &quot;Enter the &#39;y&#39; value for point 2: &quot; );\n   pmIL-&gt;EmitCall( OpCodes::Call, writeMI, nullptr );\n   pmIL-&gt;EmitCall( OpCodes::Call, readLineMI, nullptr );\n   pmIL-&gt;EmitCall( OpCodes::Call, convertInt32MI, nullptr );\n   pmIL-&gt;Emit( OpCodes::Stloc, y2LB );\n   pmIL-&gt;Emit( OpCodes::Ldloc, x1LB );\n   pmIL-&gt;Emit( OpCodes::Ldloc, y1LB );\n   pmIL-&gt;Emit( OpCodes::Newobj, pointCtor );\n   pmIL-&gt;Emit( OpCodes::Stloc, point1LB );\n   pmIL-&gt;Emit( OpCodes::Ldloc, x2LB );\n   pmIL-&gt;Emit( OpCodes::Ldloc, y2LB );\n   pmIL-&gt;Emit( OpCodes::Newobj, pointCtor );\n   pmIL-&gt;Emit( OpCodes::Stloc, point2LB );\n   pmIL-&gt;Emit( OpCodes::Ldstr, &quot;( {0}, {1}) . ( {2}, {3}) = {4}.&quot; );\n   pmIL-&gt;Emit( OpCodes::Ldc_I4_5 );\n   pmIL-&gt;Emit( OpCodes::Newarr, Object::typeid );\n   pmIL-&gt;Emit( OpCodes::Stloc, tempObjArrLB );\n   pmIL-&gt;Emit( OpCodes::Ldloc, tempObjArrLB );\n   pmIL-&gt;Emit( OpCodes::Ldc_I4_0 );\n   pmIL-&gt;Emit( OpCodes::Ldloc, x1LB );\n   pmIL-&gt;Emit( OpCodes::Box, int::typeid );\n   pmIL-&gt;Emit( OpCodes::Stelem_Ref );\n   pmIL-&gt;Emit( OpCodes::Ldloc, tempObjArrLB );\n   pmIL-&gt;Emit( OpCodes::Ldc_I4_1 );\n   pmIL-&gt;Emit( OpCodes::Ldloc, y1LB );\n   pmIL-&gt;Emit( OpCodes::Box, int::typeid );\n   pmIL-&gt;Emit( OpCodes::Stelem_Ref );\n   pmIL-&gt;Emit( OpCodes::Ldloc, tempObjArrLB );\n   pmIL-&gt;Emit( OpCodes::Ldc_I4_2 );\n   pmIL-&gt;Emit( OpCodes::Ldloc, x2LB );\n   pmIL-&gt;Emit( OpCodes::Box, int::typeid );\n   pmIL-&gt;Emit( OpCodes::Stelem_Ref );\n   pmIL-&gt;Emit( OpCodes::Ldloc, tempObjArrLB );\n   pmIL-&gt;Emit( OpCodes::Ldc_I4_3 );\n   pmIL-&gt;Emit( OpCodes::Ldloc, y2LB );\n   pmIL-&gt;Emit( OpCodes::Box, int::typeid );\n   pmIL-&gt;Emit( OpCodes::Stelem_Ref );\n   pmIL-&gt;Emit( OpCodes::Ldloc, tempObjArrLB );\n   pmIL-&gt;Emit( OpCodes::Ldc_I4_4 );\n   pmIL-&gt;Emit( OpCodes::Ldloc, point1LB );\n   pmIL-&gt;Emit( OpCodes::Ldloc, point2LB );\n   pmIL-&gt;EmitCall( OpCodes::Callvirt, pointDPBldr, nullptr );\n   pmIL-&gt;Emit( OpCodes::Box, int::typeid );\n   pmIL-&gt;Emit( OpCodes::Stelem_Ref );\n   pmIL-&gt;Emit( OpCodes::Ldloc, tempObjArrLB );\n   pmIL-&gt;EmitCall( OpCodes::Call, writeLineMI, nullptr );\n   pmIL-&gt;Emit( OpCodes::Ret );\n   Console::WriteLine( &quot;PointMain (entry point) built.&quot; );\n   pointType = myTypeBldr-&gt;CreateType();\n   Console::WriteLine( &quot;Type completed.&quot; );\n   myAsmBldr-&gt;SetEntryPoint( pointMainBldr );\n   myAsmBldr-&gt;Save( asmFileName );\n   Console::WriteLine( &quot;Assembly saved as &#39; {0}&#39;.&quot;, asmFileName );\n   Console::WriteLine( &quot;Type &#39; {0}&#39; at the prompt to run your new dynamically generated dot product calculator.&quot;, asmFileName );\n   \n   // After execution, this program will have generated and written to disk,\n   // in the directory you executed it from, a program named\n   // &lt;name_you_entered_here&gt;.exe. You can run it by typing\n   // the name you gave it during execution, in the same directory where\n   // you executed this program.\n   return pointType;\n}\n\nint main()\n{\n   Type^ myType = BuildDynAssembly();\n   Console::WriteLine( &quot;---&quot; );\n   \n   // Let&#39;s invoke the type &#39;Point&#39; created in our dynamic assembly.\n   array&lt;Object^&gt;^temp3 = {nullptr,nullptr};\n   Object^ ptInstance = Activator::CreateInstance( myType, temp3 );\n   myType-&gt;InvokeMember( &quot;PointMain&quot;, BindingFlags::InvokeMethod, nullptr, ptInstance, gcnew array&lt;Object^&gt;(0) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.AssemblyBuilder.Save Example#1\">Imports System\nImports System.Text\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n _\n\n&#39; The Point class is the class we will reflect on and copy into our\n&#39; dynamic assembly. The public static function PointMain() will be used\n&#39; as our entry point.\n&#39;\n&#39; We are constructing the type seen here dynamically, and will write it\n&#39; out into a .exe file for later execution from the command-line.\n&#39; --- \n&#39; Class Point\n&#39;    \n&#39;    Private x As Integer\n&#39;    Private y As Integer\n&#39;    \n&#39;    \n&#39;    Public Sub New(ix As Integer, iy As Integer)\n&#39;       \n&#39;       Me.x = ix\n&#39;       Me.y = iy\n&#39;    End Sub &#39;New\n&#39;     \n&#39;    \n&#39;    Public Function DotProduct(p As Point) As Integer\n&#39;       \n&#39;       Return Me.x * p.x + Me.y * p.y\n&#39;    End Function &#39;DotProduct\n&#39;     \n&#39;    \n&#39;    Public Shared Sub Main()\n&#39;       \n&#39;       Console.Write(&quot;Enter the &#39;x&#39; value for point 1: &quot;)\n&#39;       Dim x1 As Integer = Convert.ToInt32(Console.ReadLine())\n&#39;       \n&#39;       Console.Write(&quot;Enter the &#39;y&#39; value for point 1: &quot;)\n&#39;       Dim y1 As Integer = Convert.ToInt32(Console.ReadLine())\n&#39;       \n&#39;       Console.Write(&quot;Enter the &#39;x&#39; value for point 2: &quot;)\n&#39;       Dim x2 As Integer = Convert.ToInt32(Console.ReadLine())\n&#39;       \n&#39;       Console.Write(&quot;Enter the &#39;y&#39; value for point 2: &quot;)\n&#39;       Dim y2 As Integer = Convert.ToInt32(Console.ReadLine())\n&#39;       \n&#39;       Dim p1 As New Point(x1, y1)\n&#39;       Dim p2 As New Point(x2, y2)\n&#39;       \n&#39;       Console.WriteLine(&quot;({0}, {1}) . ({2}, {3}) = {4}.&quot;, x1, y1, x2, y2, p1.DotProduct(p2))\n&#39;    End Sub &#39;Main\n&#39; End Class &#39;Point \n&#39; ---\nClass AssemblyBuilderDemo\n   \n   \n   Public Shared Function BuildDynAssembly() As Type\n      \n      Dim pointType As Type = Nothing\n      \n      Dim currentDom As AppDomain = Thread.GetDomain()\n      \n      Console.Write(&quot;Please enter a name for your new assembly: &quot;)\n      Dim asmFileNameBldr As New StringBuilder()\n      asmFileNameBldr.Append(Console.ReadLine())\n      asmFileNameBldr.Append(&quot;.exe&quot;)\n      Dim asmFileName As String = asmFileNameBldr.ToString()\n      \n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim myAsmBldr As AssemblyBuilder = currentDom.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t AssemblyBuilderAccess.RunAndSave)\n      \n      &#39; We&#39;ve created a dynamic assembly space - now, we need to create a module\n      &#39; within it to reflect the type Point into.\n      Dim myModuleBldr As ModuleBuilder = myAsmBldr.DefineDynamicModule(asmFileName, _\n\t\t\t\t\t\t\t\t\tasmFileName)\n      \n      Dim myTypeBldr As TypeBuilder = myModuleBldr.DefineType(&quot;Point&quot;)\n      \n      Dim xField As FieldBuilder = myTypeBldr.DefineField(&quot;x&quot;, GetType(Integer), _\n\t\t\t\t\t\t          FieldAttributes.Private)\n      Dim yField As FieldBuilder = myTypeBldr.DefineField(&quot;y&quot;, GetType(Integer), _\n\t\t\t\t\t \t\t  FieldAttributes.Private)\n      \n      &#39; Build the constructor.\n      Dim objType As Type = Type.GetType(&quot;System.Object&quot;)\n      Dim objCtor As ConstructorInfo = objType.GetConstructor(New Type() {})\n      \n      Dim ctorParams() As Type = {GetType(Integer), GetType(Integer)}\n      Dim pointCtor As ConstructorBuilder = myTypeBldr.DefineConstructor( _\n\t\t\t\t\t    MethodAttributes.Public, _\n\t\t\t\t\t    CallingConventions.Standard, _\n\t\t\t\t\t    ctorParams)\n      Dim ctorIL As ILGenerator = pointCtor.GetILGenerator()\n      ctorIL.Emit(OpCodes.Ldarg_0)\n      ctorIL.Emit(OpCodes.Call, objCtor)\n      ctorIL.Emit(OpCodes.Ldarg_0)\n      ctorIL.Emit(OpCodes.Ldarg_1)\n      ctorIL.Emit(OpCodes.Stfld, xField)\n      ctorIL.Emit(OpCodes.Ldarg_0)\n      ctorIL.Emit(OpCodes.Ldarg_2)\n      ctorIL.Emit(OpCodes.Stfld, yField)\n      ctorIL.Emit(OpCodes.Ret)\n      \n      &#39; Build the DotProduct method.\n      Console.WriteLine(&quot;Constructor built.&quot;)\n      \n      Dim pointDPBldr As MethodBuilder = myTypeBldr.DefineMethod(&quot;DotProduct&quot;, _\n\t\t\t\t\t\t\t\t MethodAttributes.Public, _\n\t\t\t\t\t\t\t\t GetType(Integer), _\n\t\t\t\t\t\t\t\t New Type(0) {myTypeBldr})\n      \n      Dim dpIL As ILGenerator = pointDPBldr.GetILGenerator()\n      dpIL.Emit(OpCodes.Ldarg_0)\n      dpIL.Emit(OpCodes.Ldfld, xField)\n      dpIL.Emit(OpCodes.Ldarg_1)\n      dpIL.Emit(OpCodes.Ldfld, xField)\n      dpIL.Emit(OpCodes.Mul_Ovf_Un)\n      dpIL.Emit(OpCodes.Ldarg_0)\n      dpIL.Emit(OpCodes.Ldfld, yField)\n      dpIL.Emit(OpCodes.Ldarg_1)\n      dpIL.Emit(OpCodes.Ldfld, yField)\n      dpIL.Emit(OpCodes.Mul_Ovf_Un)\n      dpIL.Emit(OpCodes.Add_Ovf_Un)\n      dpIL.Emit(OpCodes.Ret)\n      \n      &#39; Build the PointMain method.\n      Console.WriteLine(&quot;DotProduct built.&quot;)\n      \n      Dim pointMainBldr As MethodBuilder = myTypeBldr.DefineMethod(&quot;PointMain&quot;, _\n\t\t\t\t\t\t      MethodAttributes.Public Or _\n\t\t\t\t\t\t      MethodAttributes.Static, _\n\t\t\t\t\t\t      Nothing, Nothing)\n      pointMainBldr.InitLocals = True\n      Dim pmIL As ILGenerator = pointMainBldr.GetILGenerator()\n      \n      &#39; We have four methods that we wish to call, and must represent as\n      &#39; MethodInfo tokens:\n      &#39; - Sub Console.WriteLine(string)\n      &#39; - Function Console.ReadLine() As String\n      &#39; - Function Convert.Int32(string) As Int\n      &#39; - Sub Console.WriteLine(string, object[])\n\n      Dim writeMI As MethodInfo = GetType(Console).GetMethod(&quot;Write&quot;, _\n\t\t\t\t\t           New Type(0) {GetType(String)}) \n\t\t\t\t\t\t\t\t     \n      Dim readLineMI As MethodInfo = GetType(Console).GetMethod(&quot;ReadLine&quot;, _\n\t\t\t\t\t\t      New Type() {})\n      Dim convertInt32MI As MethodInfo = GetType(Convert).GetMethod(&quot;ToInt32&quot;, _\n\t\t\t\t\t\t\t  New Type(0) {GetType(String)})\n      Dim wlParams() As Type = {GetType(String), GetType(Object())}\n      Dim writeLineMI As MethodInfo = GetType(Console).GetMethod(&quot;WriteLine&quot;, wlParams)\n      \n      &#39; Although we could just refer to the local variables by\n      &#39; index (short ints for Ldloc/Stloc, bytes for LdLoc_S/Stloc_S),\n      &#39; this time, we&#39;ll use LocalBuilders for clarity and to\n      &#39; demonstrate their usage and syntax.\n\n      Dim x1LB As LocalBuilder = pmIL.DeclareLocal(GetType(Integer))\n      Dim y1LB As LocalBuilder = pmIL.DeclareLocal(GetType(Integer))\n      Dim x2LB As LocalBuilder = pmIL.DeclareLocal(GetType(Integer))\n      Dim y2LB As LocalBuilder = pmIL.DeclareLocal(GetType(Integer))\n      Dim point1LB As LocalBuilder = pmIL.DeclareLocal(myTypeBldr)\n      Dim point2LB As LocalBuilder = pmIL.DeclareLocal(myTypeBldr)\n      Dim tempObjArrLB As LocalBuilder = pmIL.DeclareLocal(GetType(Object()))\n      \n      pmIL.Emit(OpCodes.Ldstr, &quot;Enter the &#39;x&#39; value for point 1: &quot;)\n      pmIL.EmitCall(OpCodes.Call, writeMI, Nothing)\n      pmIL.EmitCall(OpCodes.Call, readLineMI, Nothing)\n      pmIL.EmitCall(OpCodes.Call, convertInt32MI, Nothing)\n      pmIL.Emit(OpCodes.Stloc, x1LB)\n      \n      pmIL.Emit(OpCodes.Ldstr, &quot;Enter the &#39;y&#39; value for point 1: &quot;)\n      pmIL.EmitCall(OpCodes.Call, writeMI, Nothing)\n      pmIL.EmitCall(OpCodes.Call, readLineMI, Nothing)\n      pmIL.EmitCall(OpCodes.Call, convertInt32MI, Nothing)\n      pmIL.Emit(OpCodes.Stloc, y1LB)\n      \n      pmIL.Emit(OpCodes.Ldstr, &quot;Enter the &#39;x&#39; value for point 2: &quot;)\n      pmIL.EmitCall(OpCodes.Call, writeMI, Nothing)\n      pmIL.EmitCall(OpCodes.Call, readLineMI, Nothing)\n      pmIL.EmitCall(OpCodes.Call, convertInt32MI, Nothing)\n      pmIL.Emit(OpCodes.Stloc, x2LB)\n      \n      pmIL.Emit(OpCodes.Ldstr, &quot;Enter the &#39;y&#39; value for point 2: &quot;)\n      pmIL.EmitCall(OpCodes.Call, writeMI, Nothing)\n      pmIL.EmitCall(OpCodes.Call, readLineMI, Nothing)\n      pmIL.EmitCall(OpCodes.Call, convertInt32MI, Nothing)\n      pmIL.Emit(OpCodes.Stloc, y2LB)\n      \n      pmIL.Emit(OpCodes.Ldloc, x1LB)\n      pmIL.Emit(OpCodes.Ldloc, y1LB)\n      pmIL.Emit(OpCodes.Newobj, pointCtor)\n      pmIL.Emit(OpCodes.Stloc, point1LB)\n      \n      pmIL.Emit(OpCodes.Ldloc, x2LB)\n      pmIL.Emit(OpCodes.Ldloc, y2LB)\n      pmIL.Emit(OpCodes.Newobj, pointCtor)\n      pmIL.Emit(OpCodes.Stloc, point2LB)\n      \n      pmIL.Emit(OpCodes.Ldstr, &quot;({0}, {1}) . ({2}, {3}) = {4}.&quot;)\n      pmIL.Emit(OpCodes.Ldc_I4_5)\n      pmIL.Emit(OpCodes.Newarr, GetType([Object]))\n      pmIL.Emit(OpCodes.Stloc, tempObjArrLB)\n      \n      pmIL.Emit(OpCodes.Ldloc, tempObjArrLB)\n      pmIL.Emit(OpCodes.Ldc_I4_0)\n      pmIL.Emit(OpCodes.Ldloc, x1LB)\n      pmIL.Emit(OpCodes.Box, GetType(Integer))\n      pmIL.Emit(OpCodes.Stelem_Ref)\n      \n      pmIL.Emit(OpCodes.Ldloc, tempObjArrLB)\n      pmIL.Emit(OpCodes.Ldc_I4_1)\n      pmIL.Emit(OpCodes.Ldloc, y1LB)\n      pmIL.Emit(OpCodes.Box, GetType(Integer))\n      pmIL.Emit(OpCodes.Stelem_Ref)\n      \n      pmIL.Emit(OpCodes.Ldloc, tempObjArrLB)\n      pmIL.Emit(OpCodes.Ldc_I4_2)\n      pmIL.Emit(OpCodes.Ldloc, x2LB)\n      pmIL.Emit(OpCodes.Box, GetType(Integer))\n      pmIL.Emit(OpCodes.Stelem_Ref)\n      \n      pmIL.Emit(OpCodes.Ldloc, tempObjArrLB)\n      pmIL.Emit(OpCodes.Ldc_I4_3)\n      pmIL.Emit(OpCodes.Ldloc, y2LB)\n      pmIL.Emit(OpCodes.Box, GetType(Integer))\n      pmIL.Emit(OpCodes.Stelem_Ref)\n      \n      pmIL.Emit(OpCodes.Ldloc, tempObjArrLB)\n      pmIL.Emit(OpCodes.Ldc_I4_4)\n      pmIL.Emit(OpCodes.Ldloc, point1LB)\n      pmIL.Emit(OpCodes.Ldloc, point2LB)\n      pmIL.EmitCall(OpCodes.Callvirt, pointDPBldr, Nothing)\n      \n      pmIL.Emit(OpCodes.Box, GetType(Integer))\n      pmIL.Emit(OpCodes.Stelem_Ref)\n      pmIL.Emit(OpCodes.Ldloc, tempObjArrLB)\n      pmIL.EmitCall(OpCodes.Call, writeLineMI, Nothing)\n      \n      pmIL.Emit(OpCodes.Ret)\n      \n      Console.WriteLine(&quot;PointMain (entry point) built.&quot;)\n      \n      pointType = myTypeBldr.CreateType()\n      \n      Console.WriteLine(&quot;Type completed.&quot;)\n      \n      myAsmBldr.SetEntryPoint(pointMainBldr)\n      \n      myAsmBldr.Save(asmFileName)\n      \n      Console.WriteLine(&quot;Assembly saved as &#39;{0}&#39;.&quot;, asmFileName)\n      Console.WriteLine(&quot;Type &#39;{0}&#39; at the prompt to run your new &quot; + &quot;dynamically generated dot product calculator.&quot;, asmFileName)\n      \n      &#39; After execution, this program will have generated and written to disk,\n      &#39; in the directory you executed it from, a program named \n      &#39; &lt;name_you_entered_here&gt;.exe. You can run it by typing\n      &#39; the name you gave it during execution, in the same directory where\n      &#39; you executed this program.\n\n      Return pointType\n\n   End Function &#39;BuildDynAssembly\n    \n   \n   Public Shared Sub Main()\n      \n      Dim myType As Type = BuildDynAssembly()\n      Console.WriteLine(&quot;---&quot;)\n      \n      &#39; Let&#39;s invoke the type &#39;Point&#39; created in our dynamic assembly. \n      Dim ptInstance As Object = Activator.CreateInstance(myType, New Object(1) {0, 0})\n      \n      myType.InvokeMember(&quot;PointMain&quot;, BindingFlags.InvokeMethod, _\n\t\t\t  Nothing, ptInstance, New Object() {})\n\n   End Sub &#39;Main\n\nEnd Class &#39;AssemblyBuilderDemo\n\n\n\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_Save_System_String_System_Reflection_PortableExecutableKinds_System_Reflection_ImageFileMachine_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String,PortableExecutableKinds,ImageFileMachine)</div>        \r\n          </div>\r\n    \r\n            <p>Saves this dynamic assembly to disk, specifying the nature of code in the assembly&#39;s executables and the target platform.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (string assemblyFileName, System.Reflection.PortableExecutableKinds portableExecutableKind, System.Reflection.ImageFileMachine imageFileMachine);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>portableExecutableKind</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">PortableExecutableKinds</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">PortableExecutableKinds</a> values that specifies the nature of the code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>imageFileMachine</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.imagefilemachine\" data-linktype=\"relative-path\">ImageFileMachine</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.reflection.imagefilemachine\" data-linktype=\"relative-path\">ImageFileMachine</a> values that specifies the target platform.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>assemblyFileName</code> is 0.  </p>\n<p> -or-  </p>\n<p> There are two or more modules resource files in the assembly with the same name.  </p>\n<p> -or-  </p>\n<p> The target directory of the assembly is invalid.  </p>\n<p> -or-  </p>\n<p> <code>assemblyFileName</code> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resources, was defined in this assembly.  </p>\n<p> -or-  </p>\n<p> The <code>CultureInfo</code> string in <a class=\"xref\" href=\"system.reflection.assemblycultureattribute\" data-linktype=\"relative-path\">AssemblyCultureAttribute</a> is not a valid string and <span class=\"xref\">stem.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource*</span> was called prior to calling this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This assembly has been saved before.  </p>\n<p> -or-  </p>\n<p> This assembly has access <code>Run</code><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An output error occurs during the save.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> has not been called for any of the types in the modules of the assembly to be written to disk.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>imageFileMachine</code> and <code>portableExecutableKind</code> are incompatible, <code>imageFileMachine</code> takes precedence over <code>portableExecutableKind</code>. No exception is thrown. For example, if you specify <a class=\"xref\" href=\"system.reflection.imagefilemachine\" data-linktype=\"relative-path\">System.Reflection.ImageFileMachine</a> with <a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">System.Reflection.PortableExecutableKinds</a>, <a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">System.Reflection.PortableExecutableKinds</a> is ignored.  </p>\n<p> This method saves all non-transient dynamic modules defined in this dynamic assembly. Transient dynamic modules are not saved. The assembly file name can be the same as the name of one of the module. If so, the assembly manifest is stored within that module. <code>assemblyFileName</code> can be different from the names of all of the modules contained within the assembly. If so, the assembly file contains only the assembly manifest.  </p>\n<p> For each <a class=\"xref\" href=\"system.resources.resourcewriter\" data-linktype=\"relative-path\">ResourceWriter</a> obtained using <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineResource_\" data-linktype=\"relative-path\">DefineResource</a>, this method writes the .resources file and calls <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_Close_\" data-linktype=\"relative-path\">Close</a> to close the stream.  </p>\n<p> The <code>assemblyFileName</code> needs to be a simple file name without a drive or directory component. To create an assembly in a specific directory, use one of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> methods that takes a target directory argument.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(CustomAttributeBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Set a custom attribute on this assembly using a custom attribute builder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>customBuilder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of a helper class to define the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_\" data-linktype=\"relative-path\">SetCustomAttribute</a> cannot be used to set declarative security attributes. Use one of the overloads of <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> that takes required, optional, and refused permissions.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>SetCustomAttribute</code> within <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>, using a <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AssemblyBuilder_SetCustomAttribute1#1\">[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\npublic class MyAttribute : Attribute\n{\n   public String s;\n   public int x;\n\n   public MyAttribute(String s, int x)\n   {\n      this.s = s;\n      this.x = x;\n   }\n}\n\nclass MyApplication\n{\n   public static void Main()\n   {\n      Type customAttribute = CreateCallee(Thread.GetDomain());\n      object[] attributes = customAttribute.Assembly.GetCustomAttributes(true);\n      Console.WriteLine(&quot;MyAttribute custom attribute contains : &quot;);\n      for(int index=0; index &lt; attributes.Length; index++)\n      {\n         if(attributes[index] is MyAttribute)\n         {\n            Console.WriteLine(&quot;s : &quot; + ((MyAttribute)attributes[index]).s);\n            Console.WriteLine(&quot;x : &quot; + ((MyAttribute)attributes[index]).x);\n            break;\n         }\n      }\n   }\n\n\n   private static Type CreateCallee(AppDomain domain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n      AssemblyBuilder myAssembly = domain.DefineDynamicAssembly(myAssemblyName,\n         AssemblyBuilderAccess.Run);\n      Type myType = typeof(MyAttribute);\n      ConstructorInfo infoConstructor = myType.GetConstructor(new Type[2]{typeof(String), typeof(int)});\n      CustomAttributeBuilder attributeBuilder =\n         new CustomAttributeBuilder(infoConstructor, new object[2]{&quot;Hello&quot;, 2});\n      myAssembly.SetCustomAttribute(attributeBuilder);\n      ModuleBuilder myModule = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n      // Define a public class named &quot;HelloWorld&quot; in the assembly.\n      TypeBuilder helloWorldClass = myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public);\n\n      return(helloWorldClass.CreateType());\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AssemblyBuilder_SetCustomAttribute1#1\">[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute: public Attribute\n{\npublic:\n   String^ s;\n   int x;\n   MyAttribute( String^ s, int x )\n   {\n      this-&gt;s = s;\n      this-&gt;x = x;\n   }\n};\n\nType^ CreateCallee( AppDomain^ domain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n   AssemblyBuilder^ myAssembly = domain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n   Type^ myType = MyAttribute::typeid;\n   array&lt;Type^&gt;^temp0 = {String::typeid,int::typeid};\n   ConstructorInfo^ infoConstructor = myType-&gt;GetConstructor( temp0 );\n   array&lt;Object^&gt;^temp1 = {&quot;Hello&quot;,2};\n   CustomAttributeBuilder^ attributeBuilder = gcnew CustomAttributeBuilder( infoConstructor,temp1 );\n   myAssembly-&gt;SetCustomAttribute( attributeBuilder );\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n   \n   // Define a public class named &quot;HelloWorld&quot; in the assembly.\n   TypeBuilder^ helloWorldClass = myModule-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n   return (helloWorldClass-&gt;CreateType());\n}\n\nint main()\n{\n   Type^ customAttribute = CreateCallee( Thread::GetDomain() );\n   array&lt;Object^&gt;^attributes = customAttribute-&gt;Assembly-&gt;GetCustomAttributes( true );\n   Console::WriteLine( &quot;MyAttribute custom attribute contains : &quot; );\n   for ( int index = 0; index &lt; attributes-&gt;Length; index++ )\n   {\n      if ( dynamic_cast&lt;MyAttribute^&gt;(attributes[ index ]) )\n      {\n         Console::WriteLine( &quot;s : {0}&quot;, (dynamic_cast&lt;MyAttribute^&gt;(attributes[ index ]))-&gt;s );\n         Console::WriteLine( &quot;x : {0}&quot;, (dynamic_cast&lt;MyAttribute^&gt;(attributes[ index ]))-&gt;x );\n         break;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyBuilder_SetCustomAttribute1#1\">&lt;AttributeUsage(AttributeTargets.All, AllowMultiple := False)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n   Public s As String\n   Public x As Integer\n\n   Public Sub New(s As String, x As Integer)\n      Me.s = s\n      Me.x = x\n   End Sub &#39;New\nEnd Class &#39;MyAttribute\n\nClass MyApplication\n   Public Shared Sub Main()\n      Dim customAttribute As Type = CreateCallee(Thread.GetDomain())\n      Dim attributes As Object() = customAttribute.Assembly.GetCustomAttributes(True)\n      Console.WriteLine(&quot;MyAttribute custom attribute contains : &quot;)\n      Dim index As Integer\n      For index = 0 To attributes.Length - 1\n         If TypeOf attributes(index) Is MyAttribute Then\n            Console.WriteLine(&quot;s : &quot; + CType(attributes(index), MyAttribute).s)\n            Console.WriteLine(&quot;x : &quot; + CType(attributes(index), MyAttribute).x.ToString())\n            Exit For\n         End If\n      Next index\n   End Sub &#39;Main\n\n   Private Shared Function CreateCallee(domain As AppDomain) As Type\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      Dim myAssembly As AssemblyBuilder = _\n                     domain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run)\n      Dim myType As Type = GetType(MyAttribute)\n      Dim infoConstructor As ConstructorInfo = _\n                     myType.GetConstructor(New Type(1) {GetType(String), GetType(Integer)})\n      Dim attributeBuilder As New CustomAttributeBuilder(infoConstructor, New Object(1) {&quot;Hello&quot;, 2})\n      myAssembly.SetCustomAttribute(attributeBuilder)\n      Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n      &#39; Define a public class named &quot;HelloWorld&quot; in the assembly.\n      Dim helloWorldClass As TypeBuilder = myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public)\n      Return helloWorldClass.CreateType()\n   End Function &#39;CreateCallee\nEnd Class &#39;MyApplication\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(ConstructorInfo,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Set a custom attribute on this assembly using a specified custom attribute blob.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>con</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor for the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryAttribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte blob representing the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> or <code>binaryAttribute</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> is not a <code>RuntimeConstructorInfo</code> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See the metadata specification in the ECMA Partition II documentation for details on how to format <code>binaryAttribute</code>. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.  </p>\n<p> <code>RuntimeConstructorInfo</code> is a special type generated by the system. It derives from the <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> class, and any <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object you obtain through reflection is actually an instance of <code>RuntimeConstructorInfo</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> SetCustomAttribute cannot be used to set declarative security attributes. Use one of the overloads of <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> that takes required, optional, and refused permissions.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>SetCustomAttribute</code> to attach a custom attribute to a dynamically generated assembly.  </p>\n<pre><code class=\"lang-cs\" name=\"AssemblyBuilder_SetCustomAttribute2#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\npublic class MyAttribute : Attribute\n{\n   public bool s;\n\n   public MyAttribute(bool s)\n   {\n      this.s = s;\n   }\n}\n\nclass MyApplication\n{\n   public static void Main()\n   {\n      Type customAttribute = CreateCallee(Thread.GetDomain());\n      object[] attributes = customAttribute.Assembly.GetCustomAttributes(true);\n      Console.WriteLine(&quot;MyAttribute custom attribute contains : &quot;);\n      for(int index=0; index &lt; attributes.Length; index++)\n      {\n         if(attributes[index] is MyAttribute)\n         {\n            Console.WriteLine(&quot;s : &quot; + ((MyAttribute)attributes[index]).s);\n            break;\n         }\n      }\n   }\n\n   private static Type CreateCallee(AppDomain domain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n      AssemblyBuilder myAssembly = domain.DefineDynamicAssembly(myAssemblyName,\n         AssemblyBuilderAccess.Run);\n      Type myType = typeof(MyAttribute);\n      ConstructorInfo infoConstructor = myType.GetConstructor(new Type[]{typeof(bool)});\n      myAssembly.SetCustomAttribute(infoConstructor, new byte[]{01,00,01});\n      ModuleBuilder myModule = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n      // Define a public class named &quot;HelloWorld&quot; in the assembly.\n      TypeBuilder helloWorldClass = myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public);\n\n      return(helloWorldClass.CreateType());\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AssemblyBuilder_SetCustomAttribute2#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute: public Attribute\n{\npublic:\n   bool s;\n   MyAttribute( bool s )\n   {\n      this-&gt;s = s;\n   }\n};\n\nType^ CreateCallee( AppDomain^ domain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n   AssemblyBuilder^ myAssembly = domain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n   Type^ myType = MyAttribute::typeid;\n   array&lt;Type^&gt;^temp0 = {bool::typeid};\n   ConstructorInfo^ infoConstructor = myType-&gt;GetConstructor( temp0 );\n   array&lt;Byte&gt;^temp1 = {01,00,01};\n   myAssembly-&gt;SetCustomAttribute( infoConstructor, temp1 );\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n\n   // Define a public class named &quot;HelloWorld&quot; in the assembly.\n   TypeBuilder^ helloWorldClass = myModule-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n   return (helloWorldClass-&gt;CreateType());\n}\n\nint main()\n{\n   Type^ customAttribute = CreateCallee( Thread::GetDomain() );\n   array&lt;Object^&gt;^attributes = customAttribute-&gt;Assembly-&gt;GetCustomAttributes( true );\n   Console::WriteLine( &quot;MyAttribute custom attribute contains : &quot; );\n   for ( int index = 0; index &lt; attributes-&gt;Length; index++ )\n   {\n      if ( dynamic_cast&lt;MyAttribute^&gt;(attributes[ index ]) )\n      {\n         Console::WriteLine( &quot;s : {0}&quot;, (dynamic_cast&lt;MyAttribute^&gt;(attributes[ index ]))-&gt;s );\n         break;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyBuilder_SetCustomAttribute2#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n\n&lt;AttributeUsage(AttributeTargets.All, AllowMultiple := False)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n   Public s As Boolean\n   \n   Public Sub New(s As Boolean)\n      Me.s = s\n   End Sub &#39;New\nEnd Class &#39;MyAttribute\n\nClass MyApplication\n   \n   Public Shared Sub Main()\n      Dim customAttribute As Type = CreateCallee(Thread.GetDomain())\n      Dim attributes As Object() = customAttribute.Assembly.GetCustomAttributes(True)\n      Console.WriteLine(&quot;MyAttribute custom attribute contains : &quot;)\n      Dim index As Integer\n      For index = 0 To attributes.Length - 1\n         If TypeOf attributes(index) Is MyAttribute Then\n            Console.WriteLine(&quot;s : &quot; + CType(attributes(index), MyAttribute).s.ToString())\n            Exit For\n         End If\n      Next index\n   End Sub &#39;Main\n   \n   Private Shared Function CreateCallee(domain As AppDomain) As Type\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      Dim myAssembly As AssemblyBuilder = domain.DefineDynamicAssembly(myAssemblyName, _\n                                                            AssemblyBuilderAccess.Run)\n      Dim myType As Type = GetType(MyAttribute)\n      Dim infoConstructor As ConstructorInfo = myType.GetConstructor(New Type() {GetType(Boolean)})\n      myAssembly.SetCustomAttribute(infoConstructor, New Byte() {01, 00, 01})\n      Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n      &#39; Define a public class named &quot;HelloWorld&quot; in the assembly.\n      Dim helloWorldClass As TypeBuilder = myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public)\n      \n      Return helloWorldClass.CreateType()\n   End Function &#39;CreateCallee\nEnd Class &#39;MyApplication\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetEntryPoint(MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the entry point for this dynamic assembly, assuming that a console application is being built.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetEntryPoint (System.Reflection.MethodInfo entryMethod);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>entryMethod</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to the method that represents the entry point for this dynamic assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>entryMethod</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>entryMethod</code> is not contained within this assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_System_Reflection_MethodInfo_System_Reflection_Emit_PEFileKinds_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetEntryPoint(MethodInfo,PEFileKinds)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the entry point for this assembly and defines the type of the portable executable (PE file) being built.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetEntryPoint (System.Reflection.MethodInfo entryMethod, System.Reflection.Emit.PEFileKinds fileKind);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>entryMethod</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to the method that represents the entry point for this dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileKind</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.pefilekinds\" data-linktype=\"relative-path\">PEFileKinds</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the assembly executable being built.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>entryMethod</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>entryMethod</code> is not contained within this assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_AssemblyBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _AssemblyBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_AssemblyBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _AssemblyBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_AssemblyBuilder.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _AssemblyBuilder.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_AssemblyBuilder_System_Runtime_InteropServices__AssemblyBuilder_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_AssemblyBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _AssemblyBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.AssemblyBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.AssemblyBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.AddResourceFile\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.CodeBase\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.DefineResource\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.EntryPoint\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.Evidence\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.FullName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetDynamicModule\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetExportedTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetFile\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetFiles\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetLoadedModules\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetModule\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetModules\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.HostContext\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.IsDynamic\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.Location\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.ManifestModule\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.PermissionSet\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.ReflectionOnly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.Save\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder.SetEntryPoint\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder._AssemblyBuilder.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder._AssemblyBuilder.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder._AssemblyBuilder.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.AssemblyBuilder._AssemblyBuilder.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4363db0c-6cd8-8591-3f3a-2bcbf5752805\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines and represents a dynamic assembly.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.AssemblyBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.AssemblyBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.AssemblyBuilder.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.AssemblyBuilder","System.Reflection.Emit.AssemblyBuilder.AddResourceFile","System.Reflection.Emit.AssemblyBuilder.CodeBase","System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly","System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule","System.Reflection.Emit.AssemblyBuilder.DefineResource","System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource","System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource","System.Reflection.Emit.AssemblyBuilder.EntryPoint","System.Reflection.Emit.AssemblyBuilder.Equals","System.Reflection.Emit.AssemblyBuilder.Evidence","System.Reflection.Emit.AssemblyBuilder.FullName","System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes","System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData","System.Reflection.Emit.AssemblyBuilder.GetDynamicModule","System.Reflection.Emit.AssemblyBuilder.GetExportedTypes","System.Reflection.Emit.AssemblyBuilder.GetFile","System.Reflection.Emit.AssemblyBuilder.GetFiles","System.Reflection.Emit.AssemblyBuilder.GetHashCode","System.Reflection.Emit.AssemblyBuilder.GetLoadedModules","System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo","System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames","System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream","System.Reflection.Emit.AssemblyBuilder.GetModule","System.Reflection.Emit.AssemblyBuilder.GetModules","System.Reflection.Emit.AssemblyBuilder.GetName","System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies","System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly","System.Reflection.Emit.AssemblyBuilder.GetType","System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache","System.Reflection.Emit.AssemblyBuilder.HostContext","System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion","System.Reflection.Emit.AssemblyBuilder.IsDefined","System.Reflection.Emit.AssemblyBuilder.IsDynamic","System.Reflection.Emit.AssemblyBuilder.Location","System.Reflection.Emit.AssemblyBuilder.ManifestModule","System.Reflection.Emit.AssemblyBuilder.PermissionSet","System.Reflection.Emit.AssemblyBuilder.ReflectionOnly","System.Reflection.Emit.AssemblyBuilder.Save","System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet","System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute","System.Reflection.Emit.AssemblyBuilder.SetEntryPoint","System.Reflection.Emit.AssemblyBuilder._AssemblyBuilder.GetIDsOfNames","System.Reflection.Emit.AssemblyBuilder._AssemblyBuilder.GetTypeInfo","System.Reflection.Emit.AssemblyBuilder._AssemblyBuilder.GetTypeInfoCount","System.Reflection.Emit.AssemblyBuilder._AssemblyBuilder.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.AssemblyBuilder","System::Reflection::Emit::AssemblyBuilder","System.Reflection.Emit.AssemblyBuilder.AddResourceFile","System::Reflection::Emit::AssemblyBuilder::AddResourceFile","System.Reflection.Emit.AssemblyBuilder.CodeBase","System::Reflection::Emit::AssemblyBuilder::CodeBase","System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly","System::Reflection::Emit::AssemblyBuilder::DefineDynamicAssembly","System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule","System::Reflection::Emit::AssemblyBuilder::DefineDynamicModule","System.Reflection.Emit.AssemblyBuilder.DefineResource","System::Reflection::Emit::AssemblyBuilder::DefineResource","System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource","System::Reflection::Emit::AssemblyBuilder::DefineUnmanagedResource","System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource","System::Reflection::Emit::AssemblyBuilder::DefineVersionInfoResource","System.Reflection.Emit.AssemblyBuilder.EntryPoint","System::Reflection::Emit::AssemblyBuilder::EntryPoint","System.Reflection.Emit.AssemblyBuilder.Equals","System::Reflection::Emit::AssemblyBuilder::Equals","System.Reflection.Emit.AssemblyBuilder.Evidence","System::Reflection::Emit::AssemblyBuilder::Evidence","System.Reflection.Emit.AssemblyBuilder.FullName","System::Reflection::Emit::AssemblyBuilder::FullName","System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes","System::Reflection::Emit::AssemblyBuilder::GetCustomAttributes","System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData","System::Reflection::Emit::AssemblyBuilder::GetCustomAttributesData","System.Reflection.Emit.AssemblyBuilder.GetDynamicModule","System::Reflection::Emit::AssemblyBuilder::GetDynamicModule","System.Reflection.Emit.AssemblyBuilder.GetExportedTypes","System::Reflection::Emit::AssemblyBuilder::GetExportedTypes","System.Reflection.Emit.AssemblyBuilder.GetFile","System::Reflection::Emit::AssemblyBuilder::GetFile","System.Reflection.Emit.AssemblyBuilder.GetFiles","System::Reflection::Emit::AssemblyBuilder::GetFiles","System.Reflection.Emit.AssemblyBuilder.GetHashCode","System::Reflection::Emit::AssemblyBuilder::GetHashCode","System.Reflection.Emit.AssemblyBuilder.GetLoadedModules","System::Reflection::Emit::AssemblyBuilder::GetLoadedModules","System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo","System::Reflection::Emit::AssemblyBuilder::GetManifestResourceInfo","System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames","System::Reflection::Emit::AssemblyBuilder::GetManifestResourceNames","System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream","System::Reflection::Emit::AssemblyBuilder::GetManifestResourceStream","System.Reflection.Emit.AssemblyBuilder.GetModule","System::Reflection::Emit::AssemblyBuilder::GetModule","System.Reflection.Emit.AssemblyBuilder.GetModules","System::Reflection::Emit::AssemblyBuilder::GetModules","System.Reflection.Emit.AssemblyBuilder.GetName","System::Reflection::Emit::AssemblyBuilder::GetName","System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies","System::Reflection::Emit::AssemblyBuilder::GetReferencedAssemblies","System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly","System::Reflection::Emit::AssemblyBuilder::GetSatelliteAssembly","System.Reflection.Emit.AssemblyBuilder.GetType","System::Reflection::Emit::AssemblyBuilder::GetType","System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache","System::Reflection::Emit::AssemblyBuilder::GlobalAssemblyCache","System.Reflection.Emit.AssemblyBuilder.HostContext","System::Reflection::Emit::AssemblyBuilder::HostContext","System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion","System::Reflection::Emit::AssemblyBuilder::ImageRuntimeVersion","System.Reflection.Emit.AssemblyBuilder.IsDefined","System::Reflection::Emit::AssemblyBuilder::IsDefined","System.Reflection.Emit.AssemblyBuilder.IsDynamic","System::Reflection::Emit::AssemblyBuilder::IsDynamic","System.Reflection.Emit.AssemblyBuilder.Location","System::Reflection::Emit::AssemblyBuilder::Location","System.Reflection.Emit.AssemblyBuilder.ManifestModule","System::Reflection::Emit::AssemblyBuilder::ManifestModule","System.Reflection.Emit.AssemblyBuilder.PermissionSet","System::Reflection::Emit::AssemblyBuilder::PermissionSet","System.Reflection.Emit.AssemblyBuilder.ReflectionOnly","System::Reflection::Emit::AssemblyBuilder::ReflectionOnly","System.Reflection.Emit.AssemblyBuilder.Save","System::Reflection::Emit::AssemblyBuilder::Save","System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet","System::Reflection::Emit::AssemblyBuilder::SecurityRuleSet","System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute","System::Reflection::Emit::AssemblyBuilder::SetCustomAttribute","System.Reflection.Emit.AssemblyBuilder.SetEntryPoint","System::Reflection::Emit::AssemblyBuilder::SetEntryPoint","System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetIDsOfNames","System::Reflection::Emit::AssemblyBuilder::System#Runtime#InteropServices#_AssemblyBuilder#GetIDsOfNames","System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfo","System::Reflection::Emit::AssemblyBuilder::System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfo","System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfoCount","System::Reflection::Emit::AssemblyBuilder::System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfoCount","System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#Invoke","System::Reflection::Emit::AssemblyBuilder::System#Runtime#InteropServices#_AssemblyBuilder#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4363db0c-6cd8-8591-3f3a-2bcbf5752805","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/AssemblyBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AssemblyBuilder class | Microsoft Docs","_op_ogTitle":"AssemblyBuilder class","description":"Defines and represents a dynamic assembly.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.AssemblyBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.assemblybuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.assemblybuilder","fileRelativePath":"System.Reflection.Emit.AssemblyBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}